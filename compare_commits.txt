v18.2.0 React DOM

Provide a component stack as a second argument to onRecoverableError. (@gnoff in #24591)
Fix hydrating into document causing a blank page on mismatch. (@gnoff in #24523)
Fix false positive hydration errors with Suspense. (@gnoff in #24480 and  @acdlite in #24532)
Fix ignored setState in Safari when adding an iframe. (@gaearon in #24459)

React DOM Server

Pass information about server errors to the client. (@salazarm and @gnoff in #24551 and #24591)
Allow to provide a reason when aborting the HTML stream. (@gnoff in #24680)
Eliminate extraneous text separators in the HTML where possible. (@gnoff in #24630)
Disallow complex children inside <title> elements to match the browser constraints. (@gnoff in #24679)
Fix buffering in some worker environments by explicitly setting highWaterMark to 0. (@jplhomer in #24641)

Server Components (Experimental)

Add support for useId() inside Server Components. (@gnoff) in #24172
 ['Bump local package.json versions for 18.1 release (#24447)', 'Bump @next versions (#24448)\n18.2 will be the next release', 'Changelog for 18.1 (#24411)\n\n\n1810-changelog\n\n\nUpdate CHANGELOG.md\n\n\nCo-authored-by: Strek ssharishkumar@gmail.com\n\nUpdate CHANGELOG.md\n\nCo-authored-by: Strek ssharishkumar@gmail.com', 'Add date to changelog', 'Fill in date in changelog for 18.1 (#24449)', 'Add missing item to the changelog', 'Add @Andarist to changelog credits', 'Remove enablePersistentOffscreenHostContainer flag (#24460)\nThis was a Fabric-related experiment that we ended up not shipping.', 'Fixed wrong method call for LRU cache (#24477)', 'Hide children of Offscreen after destroy effects (#24446)', 'Do not replay erroring beginWork with invokeGuardedCallback when suspended or previously errored (#24480)\nWhen hydrating a suspense boundary an error or a suspending fiber can often lead to a cascade of hydration errors. While in many cases these errors are simply discarded (e.g. when teh root does not commit and we fall back to client rendering) the use of invokeGuardedCallback can lead to many of these errors appearing as uncaught in the browser console. This change avoids error replaying using invokeGuardedCallback when we are hydrating a suspense boundary and have either already suspended or we have one previous error which was replayed.', 'Add test for hiding children after layout destroy (#24483)', 'Fork ReactSymbols (#24484)\n\n\nFork ReactSymbols\n\n\nFix tests\n\n\nUpdate jest config\n\n', "[React DevTools] Fix regex for formateWithStyles function (#24486)\nThe previous regex to detect string substitutions is not quite right, this PR fixes it by:\nCheck to make sure we are starting either at the beginning of the line or we match a character that's not % to make sure we capture all the % in a row.\nMake sure there are an odd number of % (the first X pairs are escaped % characters. The odd % followed by a letter is the string substitution)", "fix forward ref (#24494)\nResolves #24428\n\nFor fiber types that render user code, we check the PerformedWork flag rather than the props, ref, and state to see if the fiber rendered (rather than bailing out/etc.) so we know whether we need to do things like record profile durations. ForwardRef wasn't added to this list, which caused #24428.", "Constrain the container type of createPortal (#24496)\nWe already constrained the type of createRoot (can't take document) and hydrateRoot (can't take fragments).", 'Fixed possible undefined error in TreeContext reducer (#24501)', 'React DevTools 4.24.4 -> 4.24.5 (#24503)', "[React DevTools] Improve DevTools UI when Inspecting a user Component that Throws an Error  (#24248)\n\n\n[ReactDevTools] custom view for errors occur in user's code\n\n\n[ReactDevTools] show message for unsupported feature\n\n\nfix bad import\n\n\nfix typo\n\n\nfix issues from rebasing\n\n\nprettier\n\n\nsync error names\n\n\nsync error name with upstream\n\n\nfix lint & better comment\n\n\nfix error message for test\n\n\nbetter error message per review\n\n\nadd missing file\n\n\nremove dead enum & provide component name in error message\n\n\nbetter error message\n\n\nbetter user facing error message\n\n", 'Unify JSResourceReference Interfaces (#24507)', "[DevTools][Bug] Fix Race Condition When Unmounting Fibers (#24510)\nWhen we delete fibers, we will call onCommitFiberUnmount on every deleted fiber to also remove them from the element tree. However, there are some cases where fibers aren't deleted but we still want to remove them from the element tree (ex. offscreen). In the second case, we recursively remove these children during handleCommitFiberRoot.\nWhen we remove an element, we will untrack its corresponding fiber ID. However, because of fast refresh, we don't do this immediately, opting to instead add the value to a set to process later. However, before the set has been processed, we unmount that fiber again, we will get duplicate unmounts.\nTo fix this, handleCommitFiberRoot explicitly flushes all the fibers in the set before starting the deletion process. We also need to do this in handleCommitFiberUnmount in case handleCommitFiberRoot gets called first.", 'Support document rendering (#24523)\n\nSupport Document as a container for hydration and rendering\n\nPreviously Document was not handled effectively as a container. in particual when hydrating if there was a fallback to client rendering React would attempt to append a new  element into the document before clearing out the existing one which errored leaving the application in brokent state.\nThe initial approach I took was to recycle the documentElement and never remove or append it, always just moving it to the right fiber and appending the right children (heady/body) as needed. However in testing a simple approach in modern browsers it seems like treating the documentElement like any other element works fine. This change modifies the clearContainer method to remove the documentElement if the container is a DOCUMENT_NODE. Once the container is cleared React can append a new documentElement via normal means.\n\nAllow Document as container for createRoot\n\npreviously rendering into Document was broken and only hydration worked because React did not properly deal with the documentElement and would error in a broken state if used that way. With the previous commit addressing this limitation this change re-adds Document as a valid container for createRoot.\nIt should be noted that if you use document with createRoot it will drop anything a 3rd party scripts adds the page before rendering for the first time.', '[DevTools] Add Pragma to Only Run Tests if Version Requirement Satisfied (#24533)\nThis PR:\nAdds a transform-react-version-pragma that transforms // @reactVersion SEMVER_VERSION into _test_react_version(...) and _test_react_version_focus(...) that lets us only run a test if it satisfies the right react version.\nAdds _test_react_version and _test_react_version_focus to the devtools setupEnv file\nAdd a devtools preprocessor file for devtools specific plugins', 'Only treat updates to lazy as a new mount in legacy mode (#24530)\n\n\nOnly treat updates to lazy as a new mount in legacy mode\n\n\nUpdate name and swap current check\n\n\nFlip order back\n\n', 'fix a bug in console.log with non-string args (#24546)', 'React DevTools 4.24.5 -> 4.24.6 (#24547)', 'Remove enableFlipOffscreenUnhideOrder (#24545)', 'Fix ignored setState in Safari when iframe is touched (#24459)', "[DevTools] Fix formatWithStyles not styling the results if the first argument is an object + Added unit tests (#24554)\nformatWithStyles currently doesn't style the array argument if the first argument is an object. This PR fixes this and also adds unit tests.", "[DevTools] ignore tests without reactVersion pragma if REACT_VERSION specified (#24555)\nIn DevTools tests, if the REACT_VERSION specified, we know this is a regression test (testing older React Versions). Because a lot of tests test the DevTools front end and we don't want to run them in the regression test scenario, we decided to only run tests that have the // @reactVersion pragma defined.\nBecause if there are no tests specified, jest will fail, we also opt to use jest.skip to skip all the tests that we don't want to run for a specific React version istead.\nThis PR makes this change.", '[DevTools] Add jest-cli --reactVersion argument (#24556)\nAdd --reactVersion argument. This argument is only used in DevTools. When this is specified, run only the tests that have the // @reactVersion pragma that satisfies the semver version range. Otherwise, run tests as normal', '[DevTools][Transition Tracing] Added support for Suspense Boundaries (#23365)\nThis PR:\n\nDuring the passive effect complete phase for Offscreen, we add all the transitions that were added to the update queue in the render phase to the transitions set on the memoziedState. We also add the stateNode for the Offscreen component to the root pendingSuspenseBoundaries map if the suspense boundary has gone from shown to fallback. We remove the stateNode if the boundary goes from fallback to shown.\nDuring the passive effect complete phase for the HostRoot, for each transition that was initiated during this commit, we add a pending transitionStart callback. We also add them to the transition set on the memoizedState for the HostRoot. If the root pendingSuspenseBoundaries is empty, we add a pending transitionComplete callback.\n', "Remove dependency on build artifacts mirror (#24575)\nThis reverts #24106.\nThere was a regression in CircleCI's artifacts API recently where you\ncould no longer access artifacts without an authorization token. This\nbroke our size reporting CI job because we can't use an authorization\ntoken on external PRs without potentially leaking it. As a temporary\nworkaround, I changed the size reporting job to use a public mirror of\nour build artifacts.\nThe CircleCI API has since been fixed to no longer require\nauthorization, so we can revert the workaround.", "[DevTools] Add React Version Pragma to Tests (#24576)\nThis PR adds the reactVersion pragma to tests.\nTests without the reactVersion pragma won't be run if the reactVersion pragma isn't specified.\nTested each React version manually with the pragma to make sure the tests pass", "Add option for source maps when running tests (#24577)\nI added a --sourceMaps option to our test command that enables inline\nsource maps. I've kept it disabled by default, since it makes the tests\nrun slower. But it's super useful when attaching to a debugger.", "Handle github rate limiting response (#24573)\nMake the error messages clearer when the API doesn't respond with 200.", '[DevTools] Use Inline Snapshots for storeStressTestSync (#24583)\nChange storeStressTestSync to use inline snapshots instead of a snapshot file. We want to do this because some tests are gated and not called in regression tests, and if snapshot tests are not called when there is a corresponding .snap file, that test will fail.\nArguably inline snapshots are a better pattern anyway, so enforcing this in DevTools tests IMO makes sense', "[DevTools] Remove string.replaceAll Call in @reactVersion Pragma Functions (#24584)\nstring.replaceAll doesn't exist in our CircleCI Docker environment. We also don't need it in this case because semver.satisfies allows for whitespace when specifying a range. This PR removes the unnecessary call.", 'Match Preact behavior for boolean props on custom elements (#24541)\n\n\nLog unexpected warnings when testing with ReactDOMServerIntegrationTestUtils\n\n\nAdd test\n\n\nFollowing https://github.com/facebook/react/issues/9230#issuecomment-322007671 except that foo={true} renders an empty string.\nSee https://github.com/facebook/react/issues/9230#issuecomment-1123464720 for rationale.\n\n\nMatch Preact behavior for boolean props on custom elements\n\n\nPoke CircleCI\n\n', "[DevTools] Regression Test Jest Config (#24598)\nSome older React versions have different module import names and are missing certain features. This PR mocks modules that don't exist and maps modules in older versions to the ones that are required in tests. Specifically:\n\nIn React v16.5, scheduler is named schedule\nIn pre concurrent React, there is no act\nPrior to React v18.0, react-dom/client doesn't exist\nIn DevTools, we expect to use scheduler/tracing-profiling instead of scheduler/tracing\n", '[DevTools] Make Devtools Regression Build (#24599)\nThis PR adds a script that downloads the specified react version from NPM (ie. react-dom, react, and react-test-renderer) and replaces the corresponding files in the build folder with the downloaded react files.\nThe scheduler package, unlike react-dom, react, and react-test-renderer, is versioned differently, so we also need to specifically account for that in the script.', '[DevTools] Fix moduleNameMapper Order in DevTools Config  #24602)\nWe need the regression config moduleNameMapper to come before the current moduleNameMapper so when it tries to map "/^react-dom\\/([^/]+)$/ it doesn\'t get confused. The reason is because order in which the mappings are defined matters. Patterns are checked one by one until one fits, and the most specific rule should be listed first.', '[DevTools] Add CircleCI Chron Job For DevTools Regression Tests  (#24601)\nThis PR adds an hourly chron job on Circle CI that runs regression tests on the most recent DevTools build for React v16.0, v16.5, v16.8 v17.0 and v18.0.', 'fix scripts folder text (#24609)', "Move hydration code out of normal Suspense path (#24532)\n\nMove hydration code out of normal Suspense path\n\nShuffling some code around to make it easier to follow. The logic for\nupdating a dehydrated Suspense boundary is significantly different\nfrom the logic for a client-rendered Suspense boundary. Most of it was\nalready lifted out into a separate function; this moves the remaining\nhydration-specific logic out of updateSuspenseComponent and into\nupdateDehydratedSuspenseComponent instead.\nNo expected changes to program behavior.\n\nExtract hydration logic in complete phase, too\n\nSame as previous step but for the complete phase. This is a separate\ncommit to make bisecting easier in case something breaks. The logic\nis very subtle but mostly all I've done is extract it to\nanother function.", '[Test] Outer boundary should not report errors from an inner boundary (#24618)\n\n\nTest to assert that hydration errors of an inner suspended boundary are not retained by an unsuspended outer boundary\n\n\nlints\n\n', "[DevTools] Regression-proof e2e Tests (#24620)\nThis PR:\n\nIncreases test retry count to 2 so that flaky tests have more of a chance to pass\nIdeally most e2e tests will run for all React versions (and ensure DevTools elegantly fails if React doesn't support its features). However, some features aren't supported in older React versions at all (ex. Profiling) Add runOnlyForReactRange function in these cases to skip tests that don't satisfy the correct React semver range\nFix should allow searching for component by name test, which was flaky because sometimes the Searchbox would be unfocused the second time we try to type in it\nEdited test Should allow elements to be inspected to check that element inspect gracefully fails in older React versions\nUpdated config to add a config.use.url field and a config.use.react_version field, which change depending on the React Version (and whether it's specified)\n", "DevTools] e2e Regression Testing App (#24619)\nThis PR adds an e2e regression app to the react-devtools-shell package. This app:\n\nHas an app.js and an appLegacy.js entrypoint because apps prior to React 18 need to use ReactDOM.render. These files will create and render multiple test apps (though they currently only render the List)\nMoved the ListApp out of the e2e folder and into an e2e-apps folder so that both e2e and e2e-regression can use the same test apps\nCreates a ListAppLegacy app because prior to React 16.8 hooks didn't exist.\nAdded a devtools file for the e2e-regression\nModifies the webpack config so that the e2e-regression React app can use different a different React version than DevTools\n", "Add a module map option to the Webpack Flight Client (#24629)\nOn the server we have a similar translation map from the file path that the\nloader uses to the refer to the original module and to the bundled module ID.\nThe Flight server is optimized to emit the smallest format for the client.\nHowever during SSR, the same client component might go by a different\nmodule ID since it's a different bundle than the client bundle.\nThis provides an option to add a translation map from client ID to SSR ID\nwhen reading the Flight stream.\nIdeally we should have a special SSR Flight Client that takes this option\nbut for now we only have one Client for both.", 'Fix typo in useSyncExternalStore main entry point error (#24631)', '[Fizz] Improve text separator byte efficiency (#24630)\n\n[Fizz] Improve text separator byte efficiency\n\nPreviously text separators were inserted following any Text node in Fizz. This increases bytes sent when streaming and in some cases such as title elements these separators are not interpreted as comment nodes and leak into the visual aspects of a page as escaped text.\nThe reason simple tracking on the last pushed type doesn\'t work is that Segments can be filled in asynchronously later and so you cannot know in a single pass whether the preceding content was a text node or not. This commit adds a concept of TextEmbedding which provides a best effort signal to Segments on whether they are embedded within text. This allows the later resolution of that Segment to add text separators when possibly necessary but avoid them when they are surely not.\nThe current implementation can only "peek" head if the segment is a the Root Segment or a Suspense Boundary Segment. In these cases we know there is no trailing text embedding and we can eliminate the separator at the end of the segment if the last emitted element was Text. In normal Segments we cannot peek and thus have to assume there might be a trailing text embedding and we issue a separator defensively. This should be rare in practice as it is assumed most components that will cause segment creation will also emit some markup at the edges.\n\n[Fizz] Improve separator efficiency when flushing delayed segments\n\nThe method by which we get segment markup into the DOM differs depending on when the Segment resolves.\nIf a Segment resolves before flushing begins for it\'s parent it will be emitted inline with the parent markup. In these cases separators may be necessary because they are how we clue the browser into breakup up text into distinct nodes that will later match up with what will be hydrated on the client.\nIf a Segment resolves after flushing has happened a script will be used to patch up the DOM in the client. when this happens if there are any text nodes on the boundary of the patch they won\'t be "merged" and thus will continue to have distinct representation as Nodes in the DOM. Thus we can avoid doing any separators at the boundaries in these cases.\nAfter applying these changes the only time you will get text separators as follows\n\nin between serial text nodes that emit at the same time - these are necessary and cannot be eliminated unless we stop relying on the browser to automatically parse the correct text nodes when processing this HTML\nafter a final text node in a non-boundary segment that resolves before it\'s parent has flushed - these are sometimes extraneous, like when the next emitted thing is a non-Text node.\n\nIn all other cases text separators should be omitted which means the general byte efficiency of this approach should be pretty good', '[Fizz] Send errors down to client (#24551)\n\n\nuse return from onError\n\n\nexport getSuspenseInstanceFallbackError\n\n\nstringToChunk\n\n\nreturn string from onError in downstream type signatures\n\n\n1 more type\n\n\nsupport encoding errors in html stream and escape user input\n\n\nThis commit adds another way to get errors to the suspense instance by encoding them as dataset properties of a template element at the head of the boundary. Previously if there was an error before the boundary flushed there was no way to stream the error to the client because there would never be a client render instruction.\nAdditionally the error is sent in 3 parts\n1) error hash - this is always sent (dev or prod) if one is provided\n2) error message - Dev only\n3) error component stack - Dev only, this now captures the stack at the point of error\nAnother item addressed in this commit is the escaping of potentially unsafe data. all error components are escaped as test for browers when written into the html and as javascript strings when written into a client render instruction.\n\nnits\n\nCo-authored-by: Marco Salazar salazarm@fb.com', '[DevTools] Add --replaceBuild option to Older React Builds Download Script (#24621)\nThis PR adds a --replaceBuild option to the script that downloads older React version builds. If this flag is true, we will replace the contents of the build folder with the contents of the build-regression folder and remove the build-regression folder after, which was the original behavior.\nHowever, for e2e tests, we need both the original build (for DevTools) and the new build (for the React Apps), so we need both the build and the build-regression folders. Not adding the --replaceBuild option will do this.\nThis PR also modifies the circle CI config to reflect this change.', '[DevTools] Modify DevTools e2e test script for regression tests (#24642)\nModified the run_devtools_e2e_tests script so that you can pass in a React version. If you pass in a version, it will build the DevTools shell and run the e2e tests with that version.', '[DevTools] mock requestAnimationFrame with setTimeout as a temporary fix for #24626 (#24633)\n\n\nmock requestAnimationFrame as a temp workaround for #24626\n\n\ngive name to constant variable\n\n', 'React DevTools 4.24.6 -> 4.24.7 (#24646)', 'Explicitly set highWaterMark to 0 for ReadableStream (#24641)\n\nExplicitly set highWaterMark to 0 for ReadableStreams\n\nThis is because not all streaming implementations respect the\ndefault behavior of settings highWaterMark to 0 for byte streams.\nBeing explicit guarantees the intended behavior across runtimes.\n\nRemove size methods and add FlowFixMe instead\n', '[Flight] Implement useId hook (#24172)\n\nImplements useId hook for Flight server.\n\nThe approach for ids for Flight is different from Fizz/Client where there is a need for determinancy. Flight rendered elements will not be rendered on the client and as such the ids generated in a request only need to be unique. However since FLight does support refetching subtrees it is possible a client will need to patch up a part of the tree rather than replacing the entire thing so it is not safe to use a simple incrementing counter. To solve for this we allow the caller to specify a prefix. On an initial fetch it is likely this will be empty but on refetches or subtrees we expect to have a client useId provide the prefix since it will guaranteed be unique for that subtree and thus for the entire tree. It is also possible that we will automatically provide prefixes based on a client/Fizz useId on refetches\nin addition to the core change I also modified the structure of options for renderToReadableStream where onError, context, and the new identifierPrefix are properties of an Options object argument to avoid the clumsiness of a growing list of optional function arguments.\n\n\ndefend against useId call outside of rendering\n\n\nswitch to S from F for Server Component ids\n\n\ndefault to empty string identifier prefix\n\n\nAdd a test demonstrating that there is no warning when double rendering on the client a server component that used useId\n\n\nlints and gates\n\n', "[DevTools] devtools-test-shell Regression App fixes (#24644)\nMade a couple of fixes to the devtools-test-shell\n* test selectors aren't available in > React v18.0 either, so we'll need to mock the test selector functions there as well\n* react-dom/client should map to react-dom/client and not react-dom", '[DevTools] Run e2e Regression Tests Hourly on Circle CI (#24648)\nModifies Circle CI so we run e2e regression tests hourly on Circle CI', '[DevTools] only polyfill requestAnimationFrame when necessary (#24651)', "Allow aritfacts download even if CI is broken (#24666)\n\nAllow aritfacts download even if CI is broken\n\nAdds an option to the download script to disable the CI check and\ncontinue downloading the artifacts even if CI is broken.\nI often rely on this to debug broken build artifacts. I was thinking\nthe sizebot should also use this when downloading the base artifacts\nfrom main, since for the purposes of size tracking, it really doesn't\nmatter whether the base commit is broken.\n\nSizebot should work even if base rev is broken\n\nSizebot works by downloading the build artifacts for the base revision\nand comparing the fize sizes, but the download script will fail if\nthe base revision has a failing CI job. This happens more often than it\nshould because of flaky cron jobs, but even when it does, we shouldn't\nlet it affect the sizebot — for the purposes of tracking sizes, it\ndoesn't really matter whether the base revision is broken.", "DevTools e2e workflow: Download build artifacts (#24676)\nWhen running the hourly DevTools testing workflow, we don't need to\nbuild React from scratch each time; we can download its build artifacts,\nlike we do for sizebot and the release workflow.", 'Fix CI: Download to build instead of base-build (#24677)\nFixes a mistake in #24676. The get_base_build job downloads artifacts to\nbase-build instead of build, so that sizebot can compare the two\ndirectories. For most other jobs, though, we want it to produce the\nsame output as the normal build job.', 'Fix CI: Remove copypasta from sizebot download job\nThis was copy pasted from the similar job that exists to download\nbase artifacts for sizebot.', 'Fix CI: Persist build artifacts to workspace\nThe download_build job needs to persist its artifacts to the workspace\nso downstream jobs can access them.\nPersist the same directories as the normal build job.', 'Track revs that intentionally fork the reconciler (#24671)\n\nTrack revs that intentionaly fork the reconciler\n\nWhen we fork the the "old" and "new" reconciler implementations, it can\nbe difficult to keep track of which commits introduced the delta\nin behavior. This makes bisecting difficult if one of the changes\nintroduces a bug.\nI\'ve added a new file called forked-revisions that contains the list\nof commits that intentionally forked the reconcilers.\nIn CI, we\'ll confirm that the reconcilers are identical except for the\nchanges in the listed revisions. This also ensures that the revisions\ncan be cleanly reverted.\n\n[TEST] Add trivial divergence between forks\n\nThis should fail CI. We\'ll see if the next commit fixes it.\n\n[TEST] Update list of forked revisions\n\nThis should fix CI\n\nRevert temporary fork\n\nThis reverts the temporary fork added in the previous commits that was\nused to test CI.\n\nUpdate error message when CI fails\n', 'Refactor of interleaved ("concurrent") update queue (#24663)\n\nAlways push updates to interleaved queue first\n\nInterleaves updates (updates that are scheduled while another render\nis already is progress) go into a special queue that isn\'t applied until\nthe end of the current render. They are transferred to the "real" queue\nat the beginning of the next render.\nCurrently we check during setState whether an update should go\ndirectly onto the real queue or onto the special interleaved queue. The\nlogic is subtle and it can lead to bugs if you mess it up, as in #24400.\nInstead, this changes it to always go onto the interleaved queue. The\nbehavior is the same but the logic is simpler.\nAs a further step, we can also wait to update the childLanes until\nthe end of the current render. I\'ll do this in the next step.\n\nMove setState return path traversal to own call\n\nA lot of the logic around scheduling an update needs access to the\nfiber root. To obtain this reference, we must walk up the fiber return\npath. We also do this to update childLanes on all the parent\nnodes, so we can use the same traversal for both purposes.\nThe traversal currently happens inside scheduleUpdateOnFiber, but\nsometimes we need to access it beyond that function, too.\nSo I\'ve hoisted the traversal out of scheduleUpdateOnFiber into its\nown function call that happens at the beginning of the\nsetState algorithm.\n\nRename ReactInterleavedUpdates -> ReactFiberConcurrentUpdates\n\nThe scope of this module is expanding so I\'ve renamed accordingly. No\nbehavioral changes.\n\nEnqueue and update childLanes in same function\n\nDuring a setState, the childLanes are updated immediately, even if a\nrender is already in progress. This can lead to subtle concurrency bugs,\nso the plan is to wait until the in-progress render has finished before\nupdating the childLanes, to prevent subtle concurrency bugs.\nAs a step toward that change, when scheduling an update, we should not\nupdate the childLanes directly, but instead defer to the\nReactConcurrentUpdates module to do it at the appropriate time.\nThis makes markUpdateLaneFromFiberToRoot a private function that is\nonly called from the ReactConcurrentUpdates module.\n\n[FORKED] Don\'t update childLanes until after current render\n\n(This is the riskiest commit in the stack. Only affects the "new"\nreconciler fork.)\nUpdates that occur in a concurrent event while a render is already in\nprogress can\'t be processed during that render. This is tricky to get\nright. Previously we solved this by adding concurrent updates to a\nspecial interleaved queue, then transferring the interleaved queue\nto the pending queue after the render phase had completed.\nHowever, we would still mutate the childLanes along the parent path\nimmediately, which can lead to its own subtle data races.\nInstead, we can queue the entire operation until after the render phase\nhas completed. This replaces the need for an interleaved field on\nevery fiber/hook queue.\nThe main motivation for this change, aside from simplifying the logic a\nbit, is so we can read information about the current fiber while we\'re\nwalking up its return path, like whether it\'s inside a hidden tree.\n(I haven\'t done anything like that in this commit, though.)\n\nAdd 17691ac to forked revisions\n', "Add snapshot testing on e2e test failure (#24672)\nWe have a currently unreproducible flaky e2e test. This PR captures snapshots on e2e test failures so we can better debug flaky e2e tests that don't fail locally.", 'support errorInfo in onRecoverableError (#24591)\n\nextend onRecoverableError API to support errorInfo\n\nerrorInfo has been used in Error Boundaries wiht componentDidCatch for a while now. To date this metadata only contained a componentStack. onRecoverableError only receives an error (type mixed) argument and thus providing additional error metadata was not possible without mutating user created mixed objects.\nThis change modifies rootConcurrentErrors rootRecoverableErrors, and hydrationErrors so all expect CapturedValue types. additionally a new factory function allows the creation of CapturedValues from a value plus a hash and stack.\nIn general, client derived CapturedValues will be created using the original function which derives a componentStack from a fiber and server originated CapturedValues will be created using with a passed in hash and optional componentStack.', "[Fizz] Disallow complex children in  elements (#24679)\n\n[Fizz] Disallow complex children in  elements\n\n Elements in the DOM can only have Text content. In Fizz if more than one text node is emitted an HTML comment node is used as a text separator. Unfortunately because of the content restriction of the DOM representation of the title element this separator is displayed as escaped text which is not what the component author intended.\nThis commit special cases title handling, primarily to issue warnings if you pass complex children to . At the moment title expects to receive a single child or an array of length 1. In both cases the type of that child must be string or number. If anything more complex is provided a warning will be logged to the console explaining why this is problematic.\nThere is no runtime behavior change so broken things are still broken (e.g. returning two text nodes which will cause a separator or using Suspense inside title children) but they should at least be accompanied by warnings that are useful.\nOne edge case that will now warn but won't technically break an application is if you use a Component that returns a single string as a child of title. This is a form of indirection that works but becasue we cannot discriminate between a Component that will follow the rules and one that violates them the warning is issued regardless.\n\n\nfixup dev warning conditional logic\n\n\nlints\n\n\nfix bugs\n\n", "[DevTools] Run Devtools Regression Tests Once a Day (#24678)\nWe don't need to run DevTools regression tests once an hour, and also it makes getting the most recent react build or react devtools build really annoying, so run them once a day instead", 'Remove extra Server Context argument (#24683)\nThis was left over from a refactor.', 'Bugfix: Revealing a hidden update (#24685)\n\nAdd isHidden to OffscreenInstance\n\nWe need to be able to read whether an offscreen tree is hidden from\nan imperative event. We can store this on its OffscreenInstance.\nWe were already scheduling a commit effect whenever the visibility\nchanges, in order to toggle the inner effects. So we can reuse that.\n\n[FORKED] Bugfix: Revealing a hidden update\n\nThis fixes a bug I discovered related to revealing a hidden Offscreen\ntree. When this happens, we include in that render all the updates that\nhad previously been deferred — that is, all the updates that would have\nalready committed if the tree weren\'t hidden. This is necessary to avoid\ntearing with the surrounding contents. (This was the "flickering"\nSuspense bug we found a few years ago: #18411.)\nThe way we do this is by tracking the lanes of the updates that were\ndeferred by a hidden tree. These are the "base" lanes. Then, in order\nto reveal the hidden tree, we process any update that matches one of\nthose base lanes.\nThe bug I discovered is that some of these base lanes may include\nupdates that were not present at the time the tree was hidden. We cannot\nflush those updates earlier that the surrounding contents — that, too,\ncould cause tearing.\nThe crux of the problem is that we sometimes reuse the same lane for\nbase updates and for non-base updates. So the lane alone isn\'t\nsufficient to distinguish between these cases. We must track this in\nsome other way.\nThe solution I landed upon was to add an extra OffscreenLane bit to any\nupdate that is made to a hidden tree. Then later when we reveal the\ntree, we\'ll know not to treat them as base updates.\nThe extra OffscreenLane bit is removed as soon as that lane is committed\nby the root (markRootFinished) — at that point, it gets\n"upgraded" to a base update.\nThe trickiest part of this algorithm is reliably detecting when an\nupdate is made to a hidden tree. What makes this challenging is when the\nupdate is received during a concurrent event, while a render is already\nin progress — it\'s possible the work-in-progress render is about to\nflip the visibility of the tree that\'s being updated, leading to a race\ncondition.\nTo avoid a race condition, we will wait to read the visibility of the\ntree until the current render has finished. In other words, this makes\nit an atomic operation. Most of this logic was already implemented\nin #24663.\nBecause this bugfix depends on a moderately risky refactor to the update\nqueue (#24663), it only works in the "new" reconciler fork. We will roll\nit out gradually to www before landing in the main fork.\n\nAdd previous commit to list of forked revisions\n', '[Fizz] Support abort reasons (#24680)\n\n[Fizz] Support abort reasons\n\nFizz supports aborting the render but does not currently accept a reason. The various render functions that use Fizz have some automatic and some user-controlled abort semantics that can be useful to communicate with the running program and users about why an Abort happened.\nThis change implements abort reasons for renderToReadableStream and renderToPipeable stream as well as legacy renderers such as renderToString and related implementations.\nFor AbortController implementations the reason passed to the abort method is forwarded to Fizz and sent to the onError handler. If no reason is provided the AbortController should construct an AbortError DOMException and as a fallback Fizz will generate a similar error in the absence of a reason\nFor pipeable  streams, an abort function is returned alongside pipe which already accepted a reason. That reason is now forwarded to Fizz and the implementation described above.\nFor legacy renderers there is no exposed abort functionality but it is used internally and the reasons provided give useful context to, for instance to the fact that Suspense is not supported in renderToString-like renderers', "now isn't part of the react-reconciler config anymore (#24689)", 'Fix misapplying prod error opt-out (#24688)\nThe eslint-disable-next-line opt out for prod error minification was not properly working. In the build a replacable error was output even though it was not failing the build. This change refactors the code to avoid the erroneous behavior but a fix for the lint may be better', 'Fix check_error_codes CI job (#24692)\nThe diff command was missing a --quiet argument, causing the job not to\nfail when unminified messages were found.', '[DevTools] find best renderer when inspecting (#24665)\n\n\n[DevTools] find best renderer when inspecting\n\n\nfix lint\n\n\nfix test\n\n\nfix lint\n\n\nmove logic to agent\n\n\nfix lint\n\n\nstyle improvements per review comments\n\n\nfix lint & flow\n\n\nre-add try catch for safety\n\n', 'Update error transform to allow excluding errors inside subexpressions like ternaries (#24693)\n\n\nUpdate error transform to allow excluding errors inside subexpressions like ternaries\n\n\nmake leadingcomments aggregation walk the expression stack\n\n']v18.1.0 React DOM

Fix the false positive warning about react-dom/client when using UMD bundle. (@alireza-molaee in #24274)
Fix suppressHydrationWarning to work in production too. (@gaearon in #24271)
Fix componentWillUnmount firing twice inside of Suspense. (@acdlite in #24308)
Fix some transition updates being ignored. (@acdlite in #24353)
Fix useDeferredValue causing an infinite loop when passed an unmemoized value. (@acdlite in #24247)
Fix throttling of revealing Suspense fallbacks. (@sunderls in #24253)
Fix an inconsistency in whether the props object is the same between renders. (@Andarist and @acdlite in #24421)
Fix a missing warning about a setState loop in useEffect. (@gaearon in #24298)
Fix a spurious hydration error. (@gnoff in #24404)
Warn when calling setState in useInsertionEffect. (@gaearon in #24295)
Ensure the reason for hydration errors is always displayed. (@gaearon in #24276)

React DOM Server

Fix escaping for the bootstrapScriptContent contents. (@gnoff in #24385)
Significantly improve performance of renderToPipeableStream. (@gnoff in #24291)

ESLint Plugin: React Hooks

Fix false positive errors with a large number of branches. (@scyron6 in #24287)
Don't consider a known dependency stable when the variable is reassigned. (@afzalsayed96 in #24343)

Use Subscription

Replace the implementation with the use-sync-external-store shim. (@gaearon in #24289)
 ['Bump react-refresh version', 'Bump react-refresh version', 'Add React 18 changelog (#24195)\n\n\nAdd React 18 to changelog\n\n\nFix typo\n\n\nCo-authored-by: Rick Hanlon rickhanlonii@gmail.com', 'React DevTools 4.24.2 -> 4.24.3 (#24198)', 'Add a missing breaking change to changelog', 'Update CHANGELOG.md (#24206)', 'fix build script for react dev tools (#24193)', 'DevTools release script: Show changelog before minor/patch prompt (#24200)', 'Inline DevTools test snapshots and cleaned up tests (#24199)', '[ReactDebugTools] add custom error type for future new hooks (#24168)\n\n\n[ReactDebugTools] add custom error type for future new hooks\n\n\nupdate per review comments\n\n\nremove unused argument\n\n', 'Fix changelog typos', 'Remove unstable_createMutableSource from experimental build (#24209)', 'Update @next version (#24218)\nNow that 18.0 is out, the next minor is 18.1', 'Remove React 18 issue template (#24220)\nReact 18 is just React now.', 'Add 4.4.0 release to eslint rules CHANGELOG (#24234)', 'Test suite for hydration diff warnings (#24229)\n\n\nTest suite for hydration diff warnings\n\n\nTest both variants\n\n\nAdd more edge cases\n\n', 'Fix for SSR2 fixture not working locally  (#24237)\n\n\nSS2 fixture not working locally fix\n\n\nFix prettier issue\n\n\nprettier excess line fix\n\n\nUpdate render.js\n\n\nUpdate README.md\n\n\nCo-authored-by: dan dan.abramov@gmail.com', "Don't recreate the same fallback on the client if hydrating suspends (#24236)\n\n\nDelay showing fallback if hydrating suspends\n\n\nFix up\n\n\nInclude all non-urgent lanes\n\n\nMoar tests\n\n\nAdd test for transitions\n\n", "[ReactDebugTools] wrap uncaught error from rendering user's component (#24216)\n\n\n[ReactDebugTools] wrap uncaught error from rendering user's component\n\n\nfix lint\n\n\nmake error names more package specific\n\n\nupdate per review comments\n\n\nfix tests\n\n\nfix lint\n\n\nfix tests\n\n\nfix lint\n\n\nfix error name & nits\n\n\ntry catch instead of mocking error\n\n\nfix test for older node.js version\n\n\navoid false positive from try-catch in tests\n\n", 'changed Transitions type to Array (#24249)\nChanged the Transitions type to Array because Transitions was confusing', 'Update Example render for React v18 (#24259)', 'Fix name mismatch in react-reconciler custom build. (#24272)', 'Fix suppressHydrationWarning not working in production (#24271)', 'Add more tests for suppressHydrationWarning (#24275)\n\n\nMore tests for suppressHydrationWarning\n\n\nMove suppressHydration tests to new file\n\n\nExtract more tests\n\n\nTest name\n\n\nTest legacy behavior too\n\n', "Don't mute hydration errors forcing client render (#24276)\n\n\nDon't mute hydration errors forcing client render\n\n\nNits\n\n", 'Fix false positive warning about react-dom/client with UMD builds (#24274)', 'test: Update attribute fixture snapshot (#24083)\n\n\ntest: Update attribute fixture snapshot\n\n\nPoke CircleCI\n\n\nPoke CircleCI\n\n', 'Remove unnecessary flag check (#24284)', "Rename Controls to PipeableStream (#24286)\nThis type isn't exported so it's technically not public.\nThis object mimics a ReadableStream.\nCurrently this is safe to destructure and call separately but I'm not sure\nthat's even guaranteed. It should probably be treated as a class in docs.", 'Update some READMEs (#24290)\n\n\nUpdate some READMEs\n\n\nUpdate README.md\n\n', 'Fix import in README', 'Fix import in example', 'Update create-subscription README (#24294)', 'Fix warning about setState in useEffect (#24295)\n\n\nFix warning about setState in useEffect\n\n\nFix test\n\n\nFix multiple roots\n\n', 'Update renderToPipeableStream#options.onShellError to match usage (#24299)', 'Warn on setState() in useInsertionEffect() (#24298)\n\n\nWarn on setState() in useInsertionEffect()\n\n\nUse existing DEV reset mechanism\n\n', 'Fix false positive lint error with large number of branches  (#24287)\n\n\nSwitched RulesOfHooks.js to use BigInt. Added test and updated .eslintrc.js to use es2020.\n\n\nAdded BigInt as readonly global in eslintrc.cjs.js and eslintrc.cjs2015.js\n\n\nAdded comment to RulesOfHooks.js that gets rid of BigInt eslint error\n\n\nGot rid of changes in .eslintrc.js and yarn.lock\n\n\nMove global down\n\n\nCo-authored-by: stephen cyron stephen.cyron@fdmgroup.com\nCo-authored-by: dan dan.abramov@gmail.com', 'Allow react-devtools-inline createStore() method to override Store config params (#24303)', 'update types for NonIdleLanes and IdleLane (#24313)', 'React DevTools 4.24.3 -> 4.24.4 (#24315)', 'moved mutation code to passive (#24251)\nThis PR moves the code for transition tracing in the mutation phase that adds transitions to the pending callbacks object (to be called sometime later after paint) from the mutation to the passive phase.\nThings to think about:\nPassive effects can be flushed before or after paint. How do we make sure that we get the correct end time for the interaction?', 'update types for InputContinuousLane and DefaultLane (#24316)', "Fix file path separator compatibility in scripts/babel (#24318)\nThe problem in scripts\\babel\\transform-object-assign.js is that file path separator has '/' and '\\' between Linux, MacOS and Windows, which causes yarn build error. See https://github.com/facebook/react/issues/24103", 'Add back lost cache test (#24317)', 'Add fallback shim for AbortController (#24285)\n\n\nAdd fallback shim for AbortController\n\n\nReplace shim with a minimal stub\n\n\nreplace-fork\n\n\nBetter minification\n\n\nFix flow\n\n\nEven smaller\n\n\nreplace-fork\n\n\nRevert back to object constructor\n\n\nreplace-fork\n\n', "Remove wrong return pointer warning\nI'm about to refactor part of the commit phase to use recursion instead\nof iteration. As part of that change, we will no longer assign the\nreturn pointer when traversing into a subtree. So I'm disabling\nthe internal warning that fires if the return pointer is not consistent\nwith the parent during the commit phase.\nI had originally added this warning to help prevent mistakes when\ntraversing the tree iteratively, but since we're intentionally switching\nto recursion instead, we don't need it.", "Combine commitWork into single switch statement\ncommitWork is forked into a separate implementation for mutation mode\n(DOM) and persistent mode (React Native). But unlike when it was first\nintroduced, there's more overlap than differences between the forks,\nmainly because we've added new types of fibers. So this joins the two\nforks and adds more local branches where the behavior actually\ndiverges: host nodes, host containers, and portals.", "Inline commitWork into commitMutationOnFiber\nThere's not really any reason these should be separate functions. The\nfactoring has gotten sloppy and redundant because there's similar logic\nin both places, which is more obvious now that they're combined.\nNext I'll start combining the redundant branches.", "Move Update flag check into each switch case\nThe fiber tag is more specific than the effect flag, so we should always\nrefine the type of work first, to minimize redundant checks.\nIn the next step I'll move all other other flag checks in this function\ninto the same switch statement.", 'Move ad hoc flag checks into main switch statement\nWe should always refine the type of fiber before checking the effect\nflag, because the fiber tag is more specific.\nNow we have a single switch statement for all mutation effects.', 'Move reportUncaughtErrorInDev to captureCommitPhaseError\nreportUncaughtErrorInDev is always followed by captureCommitPhaseError,\nso we can move it into that function.', "Wrap try-catch directly around each user function\nThis moves the try-catch from around each fiber's mutation phase to\ndireclty around each user function (effect function, callback, etc).\nWe already do this when unmounting because if one unmount function\nerrors, we still need to call all the others so they can clean up\ntheir resources.\nPreviously we didn't bother to do this for anything but unmount,\nbecause if a mount effect throws, we're going to delete that whole\ntree anyway.\nBut now that we're switching from an iterative loop to a recursive one,\nwe don't want every call frame on the stack to have a try-catch, since\nthe error handling requires additional memory.\nWrapping every user function is a bit tedious, but it's better\nfor performance. Many of them already had try blocks around\nthem already.", 'Use recursion to traverse during mutation phase\nMost of the commit phase uses iterative loops to traverse the tree.\nOriginally we thought this would be faster than using recursion, but\na while back @trueadm did some performance testing and found that the\nloop was slower because we assign to the return pointer before\nentering a subtree (which we have to do because the return pointer\nis not always consistent; it could point to one of two fibers).\nThe other motivation is so we can take advantage of the JS stack to\ntrack contextual information, like the nearest host parent.\nWe already use recursion in a few places; this changes the mutation\nphase to use it, too.', "Combine deletion phase into single recursive function\nSimilar to the previous step, this converts the deletion phase into\na single recursive function. Although there's less code, this one is\na bit trickier because it's already contains some stack-like logic\nfor tracking the nearest host parent. But instead of using the actual\nstack, it repeatedly searches up the fiber return path to find the\nnearest host parent.\nInstead, I've changed it to track the nearest host parent on the\nJS stack.\n(We still search up the return path once, to set the initial host parent\nright before entering a deleted tree. As a follow up, we can instead\npush this to the stack as we traverse during the main mutation phase.)", 'Fix: Don\'t call cWU if already unmounted\nWhen a tree goes offscreen, we unmount all the effects just like we\nwould in a normal deletion. (Conceptually it is a deletion; we keep\nthe fiber around so we can reuse its state if the tree mounts again.)\nIf an offscreen component gets deleted "for real", we shouldn\'t unmount\nit again.\nThe fix is to track on the stack whether we\'re inside a hidden tree.\nWe already had a stack variable for this purpose, called\noffscreenSubtreeWasHidden, in another part of the commit phase, so I\nreused that variable instead of creating a new one. (The name is a bit\nconfusing: "was" refers to the current tree before this commit. So, the\n"previous current".)\nCo-authored-by: dan dan.abramov@me.com', 'remove console.error in ReactFiberLane (#24319)\nWe changed the implementation of root.transitionLanes so that, if there is no transitions for a given lane, we use null instead of an array. This means that this error is no longer valid, so we are removing it', 'add pendingPassiveTransitions (#24320)\nAdd pendingPassiveTransitions work loop module level variable. Because workInProgressTransitions might change before we process it in the passive effects, we introduce a new variable, pendingPassiveTransitions, where we store the transitions until we can actually process them in the commit phase.', 'add transition tracing transitions stack (#24321)\nAdded a transitions stack for to keep track of which transitions are still happening for the current boundary.\n* On the root, we will get all transitions that have been initiated for the corresponding lanes.\n* Whenever we encounter a suspended boundary, we will add all transitions on the stack onto the boundary\n* Whenever we encounter a boundary that just unsuspended, we will add all transitions on the boundary onto the stack\nA transition will be considered complete when there are no boundaries that have the associated transition', 'Replace zero with NoLanes for consistency in FiberLane (#24327)', "[Fizz] Pipeable Stream Perf (#24291)\n\nAdd fixture for comparing baseline render perf for renderToString and renderToPipeableStream\n\nModified from ssr2 and https://github.com/SuperOleg39/react-ssr-perf-test\n\nImplement buffering in pipeable streams\n\nThe previous implementation of pipeable streaming (Node) suffered some performance issues brought about by the high chunk counts and innefficiencies with how node streams handle this situation. In particular the use of cork/uncork was meant to alleviate this but these methods do not do anything unless the receiving Writable Stream implements _writev which many won't.\nThis change adopts the view based buffering techniques previously implemented for the Browser execution context. The main difference is the use of backpressure provided by the writable stream which is not implementable in the other context. Another change to note is the use of standards constructs like TextEncoder and TypedArrays.\n\nImplement encodeInto during flushCompletedQueues\n\nencodeInto allows us to write directly to the view buffer that will end up getting streamed instead of encoding into an intermediate buffer and then copying that data.", 'Fix infinite update loop that happens when an unmemoized value is passed to useDeferredValue (#24247)\n\nFix infinite loop if unmemoized val passed to uDV\n\nThe current implementation of useDeferredValue will spawn a new\nrender any time the input value is different from the previous one. So\nif you pass an unmemoized value (like an inline object), it will never\nstop spawning new renders.\nThe fix is to only defer during an urgent render. If we\'re already\ninside a transition, retry, offscreen, or other non-urgen render, then\nwe can use the latest value.\n\nTemporarily disable "long nested update" warning\n\nDevTools\' timeline profiler warns if an update inside a layout effect\nresults in an expensive re-render. However, it misattributes renders\nthat are spawned from a sync render at lower priority. This affects the\nnew implementation of useDeferredValue but it would also apply to things\nlike Offscreen.\nIt\'s not obvious to me how to fix this given how DevTools models the\nidea of a "nested update" so I\'m disabling the warning for now to\nunblock the bugfix for useDeferredValue.', 'Delete create-subscription folder (#24288)', 'Remove unnecessary check (#24332)', 'Remove create-subscription from the list', 'Point useSubscription to useSyncExternalStore shim (#24289)\n\n\nPoint useSubscription to useSyncExternalStore shim\n\n\nUpdate tests\n\n\nUpdate README\n\n\nAd hoc case\n\n', '[eslint-plugin-exhaustive-deps] Fix exhaustive deps check for unstable vars (#24343)\n\n\nFix exhaustive deps for unstable vars\n\n\nFix formatting\n\n\nOptimise iterations\n\n\nFix linting\n\n', 'fix pushTransition for transition tracing (#24338)\nWe forgot to move pushTransition out from the enableCache flag in #24321 in a place that both transition tracing and cache need to push transitions. Move it out from behind the enableCache to prepare for the next PRs.', "move passive flag (#24339)\nPreviously, we were only adding the passive flag when we add the Visibility flag, which is only set when we go from primary to fallback. Now, we add the passive flag BOTH when we go from primary to fallback and from fallback to primary.\nAn alternate solution is to add the passive flag in the same place as the visibility flag in the offscreen complete phase (rather than the suspense complete phase), but this feature is currently only for suspense, and offscreen can be used in different ways, so for now we add the passive flag only in the suspense component's complete phase. We might want to revisit this later when we think about how offscreen should work with transition tracing.", "[Transition Tracing] Add transition to OffscreenState and pendingSuspenseBoundaries to RootState (#24340)\nIn this PR we:\nAdd transitions boilerplate to the OffscreenState. The transitions field will be null on initiation. During the commit phase, if there are any new transitions, we will add any new transitions (either as a result of a transition occurring or a parent suspense boundary completing) to the transitions field. Once the suspense boundary resolves, we no longer need to store the transitions on the boundary, so we can put this field on the Offscreen memoized state\nAdd pendingSuspenseBoundaries boilerplate to the RootState. This field starts as null. During the commit phase, if a suspense boundary has either gone from fallback to resolved or from resolved to fallback, we will create a new Map if there isn't one, and if there is, we will add (if the boundary is a fallback) or remove the suspense boundary (if the boundary has resolved) from the map.\nAdd an optional name field to the Suspense boundary", "Match bundle.name and match upper case entry points (#24346)\nFix matching in the build script.\nIt's possible to provide a custom bundle name in the case we build deep\nimports. We should match those names as a convenience.\nThe script also calls toLowerCase on requested names but some entries have\nupper case now.", 'Fix suspense fallback throttling (#24253)\n\n\nfix suspense throttling\n\n\nfix lint\n\n\nTweak tests + another test\n\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', '[Transition Tracing] Add Offscreen Queue (#24341)\nAdds an Offscreen Queue. We use the offscreen queue to store not yet processed transitions. During the commit phase, we will add these transitions to the transitions field in memoizedState (in the subsequent PR) and clear the transitions field in the updateQueue', 'Bugfix: Fix race condition between interleaved and non-interleaved updates (#24353)\n\nRegression test: Interleaved update race condition\n\nDemonstrates the bug reported in #24350.\n\nBugfix: Last update wins, even if interleaved\n\n"Interleaved" updates are updates that are scheduled while a render is\nalready in progress. We put these on a special queue so that they don\'t\nget processed during the current render. Then we transfer them to\nthe "real" queue after the render has finished.\nThere was a race condition where an update is received after the render\nhas finished but before the interleaved update queue had been\ntransferred, causing the updates to be queued in the wrong order.\nThe fix I chose is to check if the interleaved updates queue is empty\nbefore adding any update to the real queue. If it\'s not empty, then\nthe new update must also be treated as interleaved.', 'Fix typo that happened during rebasing\nI changed the type of this functions returned value but forgot to change\nthe check.\nIt happens to work before anyway, because eventually the interleaved\nupdates will get transferred at the beginning of the next render phase.\nBut this is more logically consistent.', "Rename react-dom/testing to react-dom/unstable_testing in yarn build-for-devtools (#24364)\nThe shell package wasn't compiling because yarn build-for-devtools was incorrect. The react-dom/test package was renamed to react-dom/unstable_testing. This PR fixes this in the package.json.\nNote: Adding packages to the yarn build-for-devtools command isn't great in the long run. Eventually we should make devtools have its own build script.", "don't stringify objects for console log second render (#24373)\nFixes #24302 based on #24306.\nThe current implementation for strict mode double logging stringiness and dims the second log. However, because we stringify everything, including objects, this causes objects to be logged as [object Object] etc.\nThis PR creates a new function that formats console log arguments with a specified style. It does this by:\n1. The first param is a string that contains %c: Bail out and return the args without modifying the styles. We don't want to affect styles that the developer deliberately set.\n2. The first param is a string that doesn't contain %c but contains string formatting: [%c${args[0]}, style, ...args.slice(1)] Note: we assume that the string formatting that the developer uses is correct.\n3. The first param is a string that doesn't contain string formatting OR is not a string: Create a formatting string where:\n   -  boolean, string, symbol -> %s\n   -  number -> %f OR %i depending on if it's an int or float\n   -  default -> %o\n\nCo-authored-by: Billy Janitsch billy@kensho.com", "Synchronize implementations of second render logging (#24381)\nMinor followup to #24373. The fix for #24373 (comment) didn't get synchronized to the hook implementation.", 'Escape bootstrapScriptContent for javascript embedding into HTML (#24385)\nThe previous escape was for Text into HTML and breaks script contents. The new escaping ensures that the script contents cannot prematurely close the host script tag by escaping script open and close string sequences using a unicode escape substitution.', 'explain the rationale for the chosen escaping implemenation in a comment (#24389)', "Bugfix: In legacy mode, call suspended tree's unmount effects when it is deleted (#24400)\n\nBug: Missing unmount when suspended tree deleted\n\nWhen a suspended tree switches to a fallback, we unmount the effects.\nIf the suspended tree is then deleted, there's a guard to prevent us\nfrom unmounting the effects again.\nHowever, in legacy mode, we don't unmount effects when a tree suspends.\nSo if the suspended tree is then deleted, we do need to unmount\nthe effects.\nWe're missing a check for legacy/concurrent mode.\n\nFix: Unmount suspended tree when it is deleted\n", 'Revert "Clean up Selective Hydration / Event Replay flag (#24156)" (#24402)\nThis reverts commit b5cca182ffd5500b83f20f215d0e16d6dbae0efb.', 'Temporarily feature flag numeric fallback for symbols (#24401)', 'Land enableLazyElements flag (#24407)\nThis flag is already enabled on all relevant surfaces. We can remove it.', 'Land enableClientRenderFallbackOnTextMismatch flag (#24405)\nThis flag is already enabled on all relevant surfaces. We can remove it.', 'Land enableSelectiveHydration flag (#24406)\nThis flag is already enabled on all relevant surfaces. We can remove it.', 'Land enableClientRenderFallbackOnHydrationMismatch (#24410)\nThis flag is already enabled on all relevant surfaces. We can remove it.', "Suppress hydration warnings when a preceding sibling suspends (#24404)\n\nAdd failing test case for #24384\n\nIf a components suspends during hydration we expect there to be mismatches with server rendered HTML but we were not always supressing warning messages related to these expected mismatches\n\nMark hydration as suspending on every thrownException\n\npreviously hydration would only be marked as supsending when a genuine error was thrown. This created an opportunity for a hydration mismatch that would warn after which later hydration mismatches would not lead to warnings. By moving the marker check earlier in the thrownException function we get the hydration context to enter the didSuspend state on both error and thrown promise cases which eliminates this gap.\n\nFix failing test related to client render fallbacks\n\nThis test was actually subject to the project identified in the issue fixed in this branch. After fixing the underlying issue the assertion logic needed to change to pick the right warning which now emits after hydration successfully completes on promise resolution. I changed the container type to 'section' to make the error message slightly easier to read/understand (for me)\n\nOnly mark didSuspend on suspense path\n\nFor unknown reasons the didSuspend was being set only on the error path and nto the suspense path. The original change hoisted this to happen on both paths. This change moves the didSuspend call to the suspense path only. This appears to be a noop because if the error path marked didSuspend it would suppress later warnings but if it does not the warning functions themsevles do that suppression (after the first one which necessarily already happened)\n\n\ngate test on hydration fallback flags\n\n\nrefactor didSuspend to didSuspendOrError\n\n\nthe orignial behavior applied the hydration warning bailout to error paths only. originally I moved it to Suspense paths only but this commit restores it to both paths and renames the marker function as didThrow rather than didSuspend\nThe logic here is that for either case if we get a mismatch in hydration we want to warm up components but effectively consider the hydration for this boundary halted\n\n\nfactor tests to assert different behavior between prod and dev\n\n\nadd DEV suffix to didSuspendOrError to better indicate this feature should only affect dev behavior\n\n\nmove tests back to ReactDOMFizzServer-test\n\n\nfix comment casing\n\n\ndrop extra flag gates in tests\n\n\nadd test for user error case\n\n\nremove unnecessary gate\n\n\nMake test better\n\n\nit now has an intentional client mismatch that would error if there wasn't suppression brought about by the earlier error. when it client renders it has the updated value not found in the server response but we do not see a hydration warning because it was superseded by the thrown error in that render", 'Fix: useDeferredValue should reuse previous value (#24413)\nDuring an urgent update, useDeferredValue should reuse the previous\nvalue. The regression test I added shows that it was reverting to\nthe initial value instead.\nThe cause of the bug was trivial: the update path doesn\'t update the\nhook\'s memoizedState field. Only the mount path.\nNone of the existing tests happened to catch this because to trigger the\nbug, you have to do an urgent update that isn\'t the first update after\ninitial render. In all of the existing tests that included an urgent\nupdate, it was the first update, so the "previous" value and the initial\nvalue happened to be the same thing.', "forwardRef et al shouldn't affect if props reused (#24421)\nWe don't have strong guarantees that the props object is referentially\nequal during updates where we can't bail out anyway — like if the props\nare shallowly equal, but there's a local state or context update in the\nsame batch.\nHowever, as a principle, we should aim to make the behavior consistent\nacross different ways of memoizing a component. For example, React.memo\nhas a different internal Fiber layout if you pass a normal function\ncomponent (SimpleMemoComponent) versus if you pass a different type like\nforwardRef (MemoComponent). But this is an implementation detail.\nWrapping a component in forwardRef (or React.lazy, etc) shouldn't affect\nwhether the props object is reused during a bailout.\nCo-authored-by: Mateusz Burzyński mateuszburzynski@gmail.com", "Revert #24236 (Don't recreate the same fallback on the client if hydrating suspends) (#24434)\n\n\nRevert #24236 (Don't recreate the same fallback on the client if hydrating suspends)\n\n\nUse @gate FIXME\n\n", 'Upgrade react-shallow-renderer to support react 18 (#24442)\nTo a minimum version that support react 18', 'React version field should match package.json (#24445)\nThe version field exported by the React package currently corresponds\nto the @next release for that build. This updates the build script\nto output the same version that is used in the package.json file.\nIt works by doing a find-and-replace of the React version after the\nbuild has completed. This is a bit weird but it saves us from having\nto build the @next and @latest releases separately; they are\nidentical except for the version numbers.']v18.0.0 Below is a list of all new features, APIs, deprecations, and breaking changes.
Read React 18 release post and React 18 upgrade guide for more information.
New Features
React

useId is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.
startTransition and useTransition let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).
useDeferredValue lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.
useSyncExternalStore is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for useEffect when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.
useInsertionEffect is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.

React DOM Client
These new APIs are now exported from react-dom/client:

createRoot: New method to create a root to render or unmount. Use it instead of ReactDOM.render. New features in React 18 don't work without it.
hydrateRoot: New method to hydrate a server rendered application. Use it instead of ReactDOM.hydrate in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.

Both createRoot and hydrateRoot accept a new option called onRecoverableError in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use reportError, or console.error in the older browsers.
React DOM Server
These new APIs are now exported from react-dom/server and have full support for streaming Suspense on the server:

renderToPipeableStream: for streaming in Node environments.
renderToReadableStream: for modern edge runtime environments, such as Deno and Cloudflare workers.

The existing renderToString method keeps working but is discouraged.
Deprecations

react-dom: ReactDOM.render has been deprecated. Using it will warn and run your app in React 17 mode.
react-dom: ReactDOM.hydrate has been deprecated. Using it will warn and run your app in React 17 mode.
react-dom: ReactDOM.unmountComponentAtNode has been deprecated.
react-dom: ReactDOM.renderSubtreeIntoContainer has been deprecated.
react-dom/server: ReactDOMServer.renderToNodeStream has been deprecated.

Breaking Changes
React

Automatic batching: This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See Automatic batching for fewer renders in React 18 for more info. In the rare case that you need to opt out, wrap the state update in flushSync.
Stricter Strict Mode: In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.
Consistent useEffect timing: React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.
Stricter hydration errors: Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to "patch up" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest <Suspense> boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.
Suspense trees are always consistent: If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.
Layout Effects with Suspense: When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.
New JS Environment Requirements: React now depends on modern browsers features including Promise, Symbol, and Object.assign. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.

Scheduler (Experimental)

Remove unstable scheduler/tracing API

Notable Changes
React

Components can now render undefined: React no longer throws if you return undefined from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a return statement before JSX.
In tests, act warnings are now opt-in: If you're running end-to-end tests, the act warnings are unnecessary. We've introduced an opt-in mechanism so you can enable them only for unit tests where they are useful and beneficial.
No warning about setState on unmounted components: Previously, React warned about memory leaks when you call setState on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've removed this warning.
No suppression of console logs: When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to community feedback about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.
Improved memory usage: React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.

React DOM Server

renderToString: Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest <Suspense> boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like renderToPipeableStream or renderToReadableStream instead.
renderToStaticMarkup: Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest <Suspense> boundary and retry rendering on the client.

All Changes
React

Add useTransition and useDeferredValue to separate urgent updates from transitions. (#10426, #10715, #15593, #15272, #15578, #15769, #17058, #18796, #19121, #19703, #19719, #19724, #20672, #20976 by @acdlite, @lunaruan, @rickhanlonii, and @sebmarkbage)
Add useId for generating unique IDs. (#17322, #18576, #22644, #22672, #21260 by @acdlite, @lunaruan, and @sebmarkbage)
Add useSyncExternalStore to help external store libraries integrate with React. (#15022, #18000, #18771, #22211, #22292, #22239, #22347, #23150 by @acdlite, @bvaughn, and @drarmstr)
Add startTransition as a version of useTransition without pending feedback. (#19696 by @rickhanlonii)
Add useInsertionEffect for CSS-in-JS libraries. (#21913 by @rickhanlonii)
Make Suspense remount layout effects when content reappears. (#19322, #19374, #19523, #20625, #21079 by @acdlite, @bvaughn, and @lunaruan)
Make <StrictMode> re-run effects to check for restorable state. (#19523 , #21418 by @bvaughn and @lunaruan)
Assume Symbols are always available. (#23348 by @sebmarkbage)
Remove object-assign polyfill. (#23351 by @sebmarkbage)
Remove unsupported unstable_changedBits API. (#20953 by @acdlite)
Allow components to render undefined. (#21869 by @rickhanlonii)
Flush useEffect resulting from discrete events like clicks synchronously. (#21150 by @acdlite)
Suspense fallback={undefined} now behaves the same as null and isn't ignored. (#21854 by @rickhanlonii)
Consider all lazy() resolving to the same component equivalent. (#20357 by @sebmarkbage)
Don't patch console during first render. (#22308 by @lunaruan)
Improve memory usage. (#21039 by @bgirard)
Improve messages if string coercion throws (Temporal.*, Symbol, etc.) (#22064 by @justingrant)
Use setImmediate when available over MessageChannel. (#20834 by @gaearon)
Fix context failing to propagate inside suspended trees. (#23095 by @gaearon)
Fix useReducer observing incorrect props by removing the eager bailout mechanism. (#22445 by @josephsavona)
Fix setState being ignored in Safari when appending iframes. (#23111 by @gaearon)
Fix a crash when rendering ZonedDateTime in the tree. (#20617 by @dimaqq)
Fix a crash when document is set to null in tests. (#22695 by @SimenB)
Fix onLoad not triggering when concurrent features are on. (#23316 by @gnoff)
Fix a warning when a selector returns NaN.  (#23333 by @hachibeeDI)
Fix the generated license header. (#23004 by @vitaliemiron)
Add package.json as one of the entry points. (#22954 by @Jack)
Allow suspending outside a Suspense boundary. (#23267 by @acdlite)
Log a recoverable error whenever hydration fails. (#23319 by @acdlite)

React DOM

Add createRoot and hydrateRoot. (#10239, #11225, #12117, #13732, #15502, #15532, #17035, #17165, #20669, #20748, #20888, #21072, #21417, #21652, #21687, #23207, #23385 by @acdlite, @bvaughn, @gaearon, @lunaruan, @rickhanlonii, @trueadm, and @sebmarkbage)
Add selective hydration. (#14717, #14884, #16725, #16880, #17004, #22416, #22629, #22448, #22856, #23176 by @acdlite, @gaearon, @salazarm, and @sebmarkbage)
Add aria-description to the list of known ARIA attributes. (#22142 by @mahyareb)
Add onResize event to video elements. (#21973 by @rileyjshaw)
Add imageSizes and imageSrcSet to known props. (#22550 by @eps1lon)
Allow non-string <option> children if value is provided.  (#21431 by @sebmarkbage)
Fix aspectRatio style not being applied. (#21100 by @gaearon)
Warn if renderSubtreeIntoContainer is called. (#23355 by @acdlite)

React DOM Server

Add the new streaming renderer. (#14144, #20970, #21056, #21255, #21200, #21257, #21276, #22443, #22450, #23247, #24025, #24030 by @sebmarkbage)
Fix context providers in SSR when handling multiple requests. (#23171 by @frandiox)
Revert to client render on text mismatch. (#23354 by @acdlite)
Deprecate renderToNodeStream. (#23359 by @sebmarkbage)
Fix a spurious error log in the new server renderer. (#24043 by @eps1lon)
Fix a bug in the new server renderer. (#22617 by @shuding)
Ignore function and symbol values inside custom elements on the server. (#21157 by @sebmarkbage)

React DOM Test Utils

Throw when act is used in production. (#21686 by @acdlite)
Support disabling spurious act warnings with global.IS_REACT_ACT_ENVIRONMENT. (#22561 by @acdlite)
Expand act warning to cover all APIs that might schedule React work. (#22607 by @acdlite)
Make act batch updates. (#21797 by @acdlite)
Remove warning for dangling passive effects. (#22609 by @acdlite)

React Refresh

Track late-mounted roots in Fast Refresh. (#22740 by @anc95)
Add exports field to package.json. (#23087 by @otakustay)

Server Components (Experimental)

Add Server Context support. (#23244 by @salazarm)
Add lazy support. (#24068 by @gnoff)
Update webpack plugin for webpack 5 (#22739 by @michenly)
Fix a mistake in the Node loader. (#22537 by @btea)
Use globalThis instead of window for edge environments. (#22777 by @huozhi)

Scheduler (Experimental)

Remove unstable scheduler/tracing API (#20037 by @bvaughn)
 ['updating the informations needed when adding a root node to a tree in react-devtools overview doc (#19979)\nCo-authored-by: Idriss AITHAFID Idriss.AITHAFID@um6p.ma', '[Flight] Add Runtime Errors for Non-serializable Values (#19980)\n\n\nError on encoding non-serializable props\n\n\nAdd DEV time warnings to enforce that values are plain objects\n\n', 'Enable eager listeners statically (#19983)', "[Flight] Don't warn for key, but error for ref (#19986)\n\n\nImprove error message by expanding the object in question\n\n\nDon't warn for key/ref getters\n\n\nError if refs are passed in server components or to client components\n\n", 'Update outdated links and fix two broken links  (#19985)\n\n\nupdate all facebook.github.io links\n\n\nfacebookincubator links : update some outdated links and fix two other broken links where they are actually the latest updated ones\n\n', 'Updated OVERVIEW.md to the new infos required when adding a new leaf node to the tree (#19981)\nCo-authored-by: Idriss AITHAFID Idriss.AITHAFID@um6p.ma', '[DevTools] Add DevTools forked Feature flags (#18994)\nAlso resolve an uncaught error in extension build (#18843).\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Fix bad null check in DevTools highlight code (#20010)', 'handled a missing suspense fiber when suspense is filtered on the profiler (#19987)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Deprecate old test script commands (#19893)\n\n\nDeprecate old test script commands\n\n\nUpdate PR template test script\n\n\nAdd test-stable and test-www-classic\n\n\nUpdate circle test names\n\n\nRename test-www-classic to test-classic\n\n\nMissed some job renames\n\n\nMissed some more job renames\n\n', 'DevTools always overrides the dispatcher when shallow rendering (#20011)\nThis is done so that any effects scheduled by the shallow render are thrown away.\nUnlike the code this was forked from (in ReactComponentStackFrame) DevTools should override the dispatcher even when DevTools is compiled in production mode, because the app itself may be in development mode and log errors/warnings.', 'Fixture: Legacy JSX Runtimes (#20012)\n\n\nFixture: Legacy JSX Runtimes\n\n\nAdd more comments\n\n', 'DevTools: Handle restricted browser pages properly like new tab page, extensions page etc(only chrome and edge for now) (#20023)', 'chore: downgrade source-map-support for stack "fix" (#20026)\n\n\nchore: downgrade source-map-support for stack "fix"\n\n\nlint?\n\n', 'Update changelog for 16.14, 15.7, 0.14.10 (#20027)', '[EventSystem] Revise onBeforeBlur propagation mechanics (#20020)', "Don't double-invoke effects in legacy roots (#20028)\nLarge legacy applications are likely to be difficult to update to handle this feature, and it wouldn't add any value– since newer APIs that require this resilience are not legacy compatible.", 'ReactIs.isValidElementType Unit Test extended with PureComponent case (#20033)\nCo-authored-by: Adam Plocieniak adam.plocieniak@allegro.pl', 'fixed unfound node error when Suspense is filtered (#20019)\n\n\nfixed unfound node error when Suspense is filtered\n\n\nadded a test for filtered Suspense node\n\n', 'Remove Passive flag from "before mutation" phase (#20038)\nWe don\'t need to visit passive effect nodes during before mutation.\nThe only reason we were previously was to schedule the root-level\npassive effect callback as early as possible, but now that\nsubtreeFlags exists, we can check that instead.\nThis should reduce the amount of traversal during the commit phase,\nparticularly when mounting or updating large trees that contain many\npassive effects.', 'Bump to latest eslint-config-fbjs (#20029)\n\n\nbump package to latest\n\n\nupdate files to respect lint\n\n\ndisable object-type-delimiter rule to work with prettier\n\n\ndisable rule to let flow check pass\n\n', 'test: Add regression test for hooks after error boundaries (#20002)\n\n\ntest: Add regression test for hooks after error boundaries\n\n\nfix lint\n\n', "Remove Set bookkeeping for root events (#19990)\n\nRemove dead code branch\n\nThis function is only called when initializing roots/containers (where we skip non-delegated events) and in the createEventHandle path for non-DOM nodes (where we never hit this path because targetElement is null).\n\n\nMove related functions close to each other\n\n\nFork listenToNativeEvent for createEventHandle\n\n\nIt doesn't need all of the logic that's needed for normal event path.\nAnd the normal codepath doesn't use the last two arguments.\n\nExpand test coverage for non-delegated events\n\nThis changes a test to fail if we removed the event handler Sets. Previously, we didn't cover that.\n\nAdd DEV-level check that top-level events and non-delegated events do not overlap\n\nThis makes us confident that they're mutually exclusive and there is no duplication between them.\n\nAdd a test verifying selectionchange deduplication\n\nThis is why we still need the Set bookkeeping. Adding a test for it.\n\nRemove Set bookkeeping for root events\n\nRoot events don't intersect with non-delegated bubbled events (so no need to deduplicate there). They also don't intersect with createEventHandle non-managed events (because those don't go on the DOM elements). So we can remove the bookeeping because we already have code ensuring the eager subscriptions only run once per element.\nI've moved the selectionchange special case outside, and added document-level deduplication for it alone.\nTechnically this might change the behavior of createEventHandle with selectionchange on the document, but we're not using that, and I'm not sure that behavior makes sense anyway.\n\nFlow\n", "Remove last schedulePassiveEffectCallback call (#20042)\nNow there's only a single place where the passive effect callback\nis scheduled.", "Add Visibility flag for hiding/unhiding trees (#20043)\n\nAdd Visibility flag for hiding/unhiding trees\n\nThere's beforeblur logic in the snapshot phase that needs to visit\nevery Suspense boundary whose visibility is toggled. Right now it does\nthat by visiting Placement and Deletion effects. That includes many\nunrelated nodes.\nBy adding a new flag specifically for toggling Visibility, we will only\nvisit the relevant Suspense (and Offscreen) boundaries, instead of all\nnodes that have a Placement.\nPotential follow-ups (not urgent):\n\nThe beforeblur logic also has a check to see whether the visibility\nwas toggled on or off. It only cares about things being hidden. As a\nfollow up, I can split the Visibility flag into separate Hide/Show\nflags, and only visit Hide.\n\nNow that this is separate from Update, we can move the rest of the\nSuspense's layout effects (like attaching retry listeners) to the\npassive phase.\n\n\nGate behind createEventHandle feature flag\n\n\nOnly need to visit deleted and hidden trees during the snapshot phase\nif the experimental createEventHandle flag is enabled. Currently,\nit's only used internally at Facebook, not open source.", "Use bitwise OR to define flag masks (#20044)\nEasier to read, harder to mess up. These expressions get simplified by\nClosure, so there's no runtime impact.", '[Fast Refresh] Fix crashes caused by rogue Proxies (#20030) (#20039)', "Improved Profiler commit hooks test (#20053)\nPreviously the tests didn't ensure that time spent during cascading render was not included in duration reported by commit hooks.", 'DevTools 4.8.2 -> 4.9.0 bump', 'DevTools fix props editing for host components (#20055)', 'useRef: Warn about reading or writing mutable values during render (#18545)\nReading or writing a ref value during render is only safe if you are implementing the lazy initialization pattern.\nOther types of reading are unsafe as the ref is a mutable source.\nOther types of writing are unsafe as they are effectively side effects.\nThis change also refactors useTransition to no longer use a ref hook, but instead manage its own (stable) hook state.', 'Profiler: Include ref callbacks in onCommit duration (#20060)', 'Add React 17 changelog', 'Bump versions for 17 (#20062)', 'Link to the blog post', 'Update CHANGELOG.md', 'Remove usage of Array#fill (#20071)', "Use react-shallow-renderer@16.14.1 in yarn.lock (#20072)\nThis ensures that tests are run against the latest published version. This\nmerely updates the version in yarn.lock and not in react-test-renderer's\npackage.json to avoid having to cut another release of react-test-renderer.", '17.0.1', 'Overly eager update-notifier usage in react-devtools (#20078)\nCo-authored-by: abhyuday abhyuday@miqdigital.com', 'Fix error loading source maps for devtools extension (#20079)', 'Allow Node 15.x (#20108)\nCo-authored-by: Justus Hämäläinen me@justushamalainen.fi', "Traverse commit phase effects iteratively (#20094)\n\nMove traversal logic to ReactFiberCommitWork\n\nThe current traversal logic is spread between ReactFiberWorkLoop and\nReactFiberCommitWork, and it's a bit awkward, especially when\nrefactoring. Idk the ideal module structure, so for now I'd rather keep\nit all in one file.\n\nTraverse commit phase effects iteratively\n\nWe suspect that using the JS stack to traverse through the tree in the\ncommit phase is slower than traversing iteratively.\nI've kept the recursive implementation behind a flag, both so we have\nthe option to run an experiment comparing the two, and so we can revert\nit easily later if needed.", 'Prevent inlining into recursive commit functions (#20105)\nAdds a bunch of no-inline directives to commit phase functions to\nprevent them from being inlined into one of our recursive algorithms.\nThe motivation is to minimize the number of variables in the recursive\nfunctions, since each one contributes to the size of the stack frame.\nTheoretically, this could help the performance of both the recursive\nand non-recursive (iterative) implementations of the commit phase,\nsince even the iterative implementation sometimes uses the JS stack.', 'Make DevTools Websocket retry delay configurable (#20107)', "Fast Refresh: Don't block DevTools commit hook (#20129)\nIn some scenarios (either timing dependent, or pre-FR compatible React versions) FR blocked calling the React DevTools commit hook. This PR adds a test and a fix for that.", '[Flight] Add support for Module References in transport protocol (#20121)\n\nRefactor Flight to require a module reference to be brand checked\n\nThis exposes a host environment (bundler) specific hook to check if an\nobject is a module reference. This will be used so that they can be passed\ndirectly into Flight without needing additional wrapper objects.\n\nEmit module references as a special type of value\n\nWe already have JSON and errors as special types of "rows". This encodes\nmodule references as a special type of row value. This was always the\nintention because it allows those values to be emitted first in the stream\nso that as a large models stream down, we can start preloading as early\nas possible.\nWe preload the module when they resolve but we lazily require them as they\nare referenced.\n\nEmit module references where ever they occur\n\nThis emits module references where ever they occur. In blocks or even\ndirectly in elements.\n\nDon\'t special case the root row\n\nI originally did this so that a simple stream is also just plain JSON.\nHowever, since we might want to emit things like modules before the root\nmodule in the stream, this gets unnecessarily complicated. We could add\nthis back as a special case if it\'s the first byte written but meh.\n\n\nUpdate the protocol\n\n\nAdd test for using a module reference as a client component\n\n\nRelax element type check\n\n\nSince Flight now accepts a module reference as returned by any bundler\nsystem, depending on the renderer running. We need to drastically relax\nthe check to include all of them. We can add more as we discover them.\n\nMove flow annotation\n\nSeems like our compiler is not happy with stripping this.\n\n\nSome bookkeeping bug\n\n\nCan\'t use the private field to check\n\n', 'Rename (#20134)', 'Allow values to be encoded by "reference" to a value rather than the value itself (#20136)\nThese references are currently transformed into React.lazy values. We can use these in\nReact positions like element type or node position.\nThis could be expanded to a more general concept like Suspensey Promises, asset references or JSResourceReferences.\nFor now it\'s only used in React Element type position.\nThe purpose of these is to let you suspend deeper in the tree.', "Serialize pending server components by reference (lazy component) (#20137)\nThis now means that if a server component suspends, its value becomes a\nReact.lazy object. I.e. the element that rendered the server component\ngets replaced with a lazy node.\nAs of #19033 lazy objects can be rendered in the node position. This allows\nus to suspend at the location of the server component while we're waiting\non its content.\nNow server components has the same capabilities as Blocks to progressively\nreveal its content.", "Remove Blocks (#20138)\n\n\nRemove Blocks\n\n\nRemove Flight Server Runtime\n\n\nThere's no need for this now that the JSResource is part of the bundler\nprotocol. Might need something for Webpack plugin specifically later.\n\nDevtools\n", 'Refactor SchedulerHostConfigs (#20025)\n\n\nRemove SchedulerHostConfigs\n\n\nFix builds\n\n\nFix forks\n\n\nMove SchedulerNoDom check to npm/index.js\n\n\nFix tests\n\n\nAdd @gate source\n\n\nGate build-only test to build test runs\n\n', 'Add Relay specific React Native build of Flight (#20149)\nThis adds a new dimension similar to dom-relay. It\'s different from\n"native" which would be Flight for RN without Relay.\nThis has some copy-pasta that\'s the same between the two Relay builds but\nthe key difference will be Metro and we\'re not quite sure what other\ndifferences there will be yet.', '[Flight Fixture] Server + Client Components (#20150)', 'typo fix in comment (#20153)', 'Add workspaces hash to yarn cache key (#20154)\n\n\nAdd branch to yarn cache key\n\n\nAdd checksum check for workspace info\n\n\nFix yaml\n\n\nTry moving the command\n\n\nHow about here\n\n\nJust inline it\n\n\ni hate it here\n\n\ntry reverting back\n\n\nAdd run\n\n\nidk\n\n\ntry inlining the command everywhere\n\n\nCreate workspace_info.txt when we create the cache\n\n\nDelete the timestamp\n\n', 'fix: useImperativeMethods to useImperativeHandle (#20194)', 'Fix typo (#20188)', '(Temporarily) revert unmounting error boundaries changes (#20147)\nThis reverts commits bcca5a6ca78b33504e0a328c411b043261e7e303 and ffb749c95e0361b3cfbbfc4e1a73bfa2fda0aa93, although neither revert cleanly since methods have been moved between the work-loop and commit-work files. This commit is a mostly manual effort of undoing the changes.', 'Fix path for SchedulerFeatureFlags (#20200)', "react-devtools-inline: Remove css-sourcemap's when bundling for dist (#20170)", 'Add "nested-update" phase to Profiler API (#20163)\nBackground:\nState updates that are scheduled in a layout effect (useLayoutEffect or componentDidMount / componentDidUpdate) get processed synchronously by React before it yields to the browser to paint. This is done so that components can adjust their layout (e.g. position and size a tooltip) without any visible shifting being seen by users. This type of update is often called a "nested update" or a "cascading update".\nBecause they delay paint, nested updates are considered expensive and should be avoided when possible. For example, effects that do not impact layout (e.g. adding event handlers, logging impressions) can be safely deferred to the passive effect phase by using useEffect instead.\nThis PR updates the Profiler API to explicitly flag nested updates so they can be monitored for and avoided when possible.\nImplementation:\nI considered a few approaches for this.\nAdd a new callback (e.g. onNestedUpdateScheduled) to the Profiler that gets called when a nested updates gets scheduled.\nAdd an additional boolean parameter to the end of existing callbacks (e.g. wasNestedUpdate).\nUpdate the phase param to add an additional variant: "mount", "update", or "nested-update" (new).\nI think the third option makes for the best API so that\'s what I\'ve implemented in this PR.\nBecause the Profiler API is stable, this change will need to remain behind a feature flag until v18. I\'ve turned the feature flag on for Facebook builds though after confirming that Web Speed does not currently make use of the phase parameter.\nQuirks:\nOne quirk about the implementation I\'ve chosen is that errors thrown during the layout phase are also reported as nested updates. I believe this is appropriate since these errors get processed synchronously and block paint. Errors thrown during render or from within passive effects are not affected by this change.', 'Add version of scheduler that only swaps MessageChannel for postTask (#20206)\n\n\nFork SchedulerDOM to SchedulerPostTaskOnly\n\n\nSwap in postTask for MessageChannel\n\n\nAdd SchedulerPostTaskOnly-test.js\n\n\nUpdate getCurrentTime\n\n\nGate tests to source\n\n\nPrettier\n\n', "Set return pointer when reusing current tree (#20212)\n\nDo not fix return pointers during commit phase\n\nIn the commit phase, we should be able to assume that the return\npointers in the just-completed tree are consistent. The render phase\nshould be responsible for ensuring these are always correct.\nI've removed the return pointer assignments from the render phase\ntraversal logic. This isn't all of them, only the ones added recently\nduring the effects refactor. The other ones have been around longer so\nI'll leave those for a later clean up.\nThis breaks a few SuspenseList tests; I'll fix in the next commit.\n\nSet return pointer when reusing current tree\n\nWe always set the return pointer on freshly cloned, work-in-progress\nfibers. However, we were neglecting to set them on trees that are reused\nfrom current.\nI fixed this in the same path of the complete phase where we reset the\nfiber flags.\nThis is a code smell because it assumes the commit phase is never\nconcurrent with the render phase. Our eventual goal is to make fibers a\nlock free data structure.\nWill address further during refactor to alternate model.", "[Flight] Expand the fixture to use require.extensions (#20209)\n\nExpand fixture\n\nUse .server convention. /server/index.js should really change too so it can be compiled but for now we treat it as bootstrapping code outside the compiled code.\nMove App.server. It's part of the application code rather than the infra.\nAdd hybrid component used in both server/client and an extra component shared by multiple entry points.\n\nUse require.extensions to replace .client imports\n\nThe simplest server doesn't need AOT compilation. Instead we can just\nconfigure require.extensions. This is probably not the best idea to use\nin prod but is enough to show the set up.", "Encode throwing server components as lazy throwing references (#20217)\nThis ensures that if this server component was the child of a client\ncomponent that has an error boundary, it doesn't trigger the error until\nthis gets rendered so it happens as deep as possible.", '[Flight] Simplify Relay row protocol (#20168)\n\n\nSimplify Relay protocol integration\n\n\nEncode Relay rows as tuples instead of objects\n\n\nThis is slightly more compact and more ressembles more closely the encoding\nwe use for the raw stream protocol.', '[Flight] Encode Symbols as special rows that can be referenced by models … (#20171)\n\nEncode Symbols as special rows that can be referenced by models\n\nIf a symbol was extracted from Symbol.for(...) then we can reliably\nrecreate the same symbol on the client.\nS123:"react.suspense"\nM456:{mySymbol: \'$123\'}\nThis doesn\'t suffer from the XSS problem because you have to write actual\ncode to create one of these symbols. That problem is only a problem because\nvalues pass through common other usages of JSON which are not secure.\nSince React encodes its built-ins as symbols, we can now use them as long\nas its props are serializable. Like Suspense.\n\nRefactor resolution to avoid memo hack\n\nGoing through createElement isn\'t quite equivalent for ref and key in props.\n\nReuse symbol ids that have already been written earlier in the stream\n', 'Dedupe module id generation (#20172)', "Perform hasOwnProperty check in Relay Flight (#20220)\nWe simulate JSON.stringify in this loop so we should do a has own check.\nOtherwise we'll include things like constructor properties.\nThis will actually make things throw less even when it should.", 'Improved dev experience when DevTools hook is disabled (#20208)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', "Add warning if return pointer is inconsistent (#20219)\nBugs caused by inconsistent return pointers are tricky to diagnose\nbecause the source of the error is often in a different part of the\ncodebase from the actual mistake. For example, you might forget to set a\nreturn pointer during the render phase, which later causes a crash in\nthe commit phase.\nThis adds a dev-only invariant to the commit phase to check for\ninconsistencies. With this in place, we'll hopefully catch return\npointer errors quickly during local development, when we have the most\ncontext for what might have caused it.", 'Widen peer dependency range of use-subscription (#20225)', 'use-subscription@1.5.1', 'DevTools 4.9.0 -> 4.10.0', 'Add Profiler callback when nested updates are scheduled (#20211)\nThis callback accepts the no parameters (except for the current interactions). Users of this hook can inspect the call stack to access and log the source location of the component.', 'Scheduling profiler tweaks (#20215)', 'Support ESM module loaders in Flight fixture (#20229)\nThis lets the Flight fixture run as "type": "module" or "commonjs".\nExperimental loaders can be used similar to require.extensions to do the\ntranspilation and replacement of .client.js references.', "Remove noinline directives from new commit phase (#20241)\nMy theory for too much inlining contributing to overall stack size is\nlikely flawed, because Closure reuses variables within a function to\noptimize registers.\nEven if my theory were correct, the impact would be minimal anyway\nbecause the recursive implementation of the commit phase traversals is\nbehind a disabled feature flag.\nGoing to revert this. We can maybe test the impact once we land the\ncommit phase changes. In the meantime, I'd prefer to eliminate this\ndelta from the new fork.", 'Add Node ESM build option (#20243)\nThis allows exporting ESM modules for the Webpack plugin. This is necessary\nfor making a resolver plugin. We could probably make the whole plugin\nuse ESM instead of CJS ES2015.', 'Remove cycle between ReactFiberHooks and ReactInternalTypes (#20242)\nCo-authored-by: Paul Doyle pauldoyle22@gmail.com', "Add new effect fields to old fork, and vice versa (#20246)\n\nAdd new effect fields to old fork\n\nSo that when comparing relative performance, we don't penalize the new\nfork for using more memory.\n\nAdd firstEffect, et al fields to new fork\n\nWe need to bisect the changes to the recent commit phase refactor. To\ndo this, we'll need to add back the effect list temporarily.\nThis only adds them to the Fiber type so that the memory is the same\nas the old fork.", 'Check for deletions in hadNoMutationsEffects (#20252)\nWhen detecting if a host tree was changed, we must check for deletions\nin addition to mounts and updates.', 'Pass extra CLI args through to ESLint (#20250)\nThese now work:\nyarn run lint --fix\nyarn run linc --fix', 'Autofix imports when running replace-fork (#20251)\n\nPass extra CLI args through to ESLint\n\nThese now work:\nyarn run lint --fix\nyarn run linc --fix\n\nAutofix imports when running replace-fork\n\nWe have a custom ESLint rule that can autofix cross-fork imports.\nUsually, after running the replace-fork script, you need to run\nyarn lint --fix to fix the imports.\nThis combines the two steps into one.', "Add --reverse option to replace-fork script (#20249)\nWhen enabled, replaces new fork with old fork.\nI've done this several times by manually editing the script file, so\nseems useful enough to add an option.", 'Properly reset Profiler nested-update flag (#20253)\nPreviously this flag was not being reset correctly if a concurrent update followed a nested (sync) update. This PR fixes the behavior and adds a regression test.', "Reset new fork to old fork  (#20254)\n\nFix typo\n\nThis typo was fixed in the new fork but not the old.\n\nReset new fork to old fork\n\nSomething in the new fork is causing a topline metrics regression. We're\nnot sure what it is, so we're going to split it into steps and bisect.\nAs a first step, this resets the new fork back to the contents of the\nold fork. We will land this to confirm that the fork infra itself is\nnot causing a regression.\n\nFix tests: Add dfsEffectsRefactor flag\n\nSome of the tests that gated on the effects refactor used the new\nflag. In order to bisect, we'll need to decompose the new fork changes\ninto multiple steps.\nSo I added a hardcoded test flag called dfsEffectsRefactor and set it\nto false. Will turn back on when we switch back to traversing the\nfinished tree using DFS and subtreeTag.", "Add separate ChildDeletion flag (#20264)\nIn the old, effect list implementation, the Deletion flag is is set on\neach deleted fiber.\nIn the new, subtreeTag implementation, the Deletion flag is set on the\nparent of each deleted fiber, and the deleted fibers themselves are\npushed to the deletions array.\nTo better distinguish between these two uses, I've added a separate\nChildDeletion flag. That way we can, if desired, maintain both\nimplementations simultaneously, as we bisect to find the performance\nregression that we're currently investigating.", "findDOMNode: Remove return pointer mutation (#20272)\nThe last step of the findDOMNode algorithm is a search of the\ncurrent tree.\nWhen descending into a child node, it mutates child.return so that it\npoints to the current fiber pair, instead of a work-in-progress. This\ncan cause bugs if findDOMNode is called at the wrong time, like in\nan interleaved event.\nFor this reason (among others), you're not suppposed to use\nfindDOMNode in Concurrent Mode. However, we still have some internal\nuses that we haven't migrated.\nTo reduce the potential for bugs, I've removed the .return pointer\nassignment in favor of recursion.", 'Add Node ESM Loader and Register Entrypoints (#20274)\n\nAdd Node ESM loader build\n\nThis adds a loader build as a first-class export. This will grow in\ncomplexity so it deserves its own module.\n\nAdd Node CommonJS regiter build\n\nThis adds a build as a first-class export for legacy CommonJS registration\nin Node.js. This will grow in complexity so it deserves its own module.\n\n\nSimplify fixture a bit to easier show usage with or without esm\n\n\nBump es version\n\n\nWe leave async function in here which are newer than ES2015.', 'Add best-effort documentation for third-party renderers (#20278)\n\n\nAdd best-effort documentation for third-party renderers\n\n\nUpdate README.md\n\n\nUpdate README.md\n\n', 'Regression test: Missing unmount after re-order (#20285)\nAdds a regression test for a bug I found in the effects refactor.\nThe bug was that reordering a child that contains passive effects would\ncause the child to "forget" that it contains passive effects. This is\nbecause when a Placement effect is scheduled by the reconciler, it would\noverride all of the fiber\'s flags, including its "static" ones:\nchild.flags = Placement;\nThe problem is that we use a static flag to use a "static" flag to track\nthat a fiber contains passive effects.\nSo what happens is that when the tree is deleted, the unmount effect is\nnever fired.\nIn the new implementation, the fix is to add the Placement flag without\noverriding the rest of the bitmask:\nchild.flags |= Placement;\n(The old implementation doesn\'t need to be changed because it does not\nuse static flags for this purpose.)', "Warn if commit phase error thrown in detached tree (#20286)\nUntil skipUnmountedBoundaries lands again, we need some way to detect\nwhen errors are thrown inside a deleted tree. I've added a warning to\ncaptureCommitPhaseError that fires when we reach the root of a subtree\nwithout finding either a boundary or a HostRoot.\nEven after skipUnmountedBoundaries  lands, this warning could be a\nuseful guard against internal bugs, like a bug in the\nskipUnmountedBoundaries implementation itself.\nIn the meantime, do not add this warning to the allowlist; this is only\nfor our internal use. For this reason, I've also only added it to the\nnew fork, not the old one, to prevent this from accidentally leaking\ninto the open source build.", 'Profiler onNestedUpdateScheduled accepts id as first param (#20293)', 'Exclude fixtures from Flow config (#20302)', 'Add flight specific entry point for react package (#20304)\nThis configures the Flight fixture to use the "react-server" environment.\nThis allows the package.json exports field to specify a different resolution\nin this environment.\nI use this in the "react" package to resolve to a new bundle that excludes\nthe Hooks that aren\'t relevant in this environment like useState and useEffect.\nThis allows us to error early if these names are imported. If we actually\npublished ESM, it would we a static error. Now it\'s a runtime error.\nYou can test this by importing useState in Container.js which is used\nby the client and server.', 'Speed up local "build-for-detools" target (#20307)', 'Profiler: Improve nested-update checks (#20299)\nPrevious checks were too naive when it comes to pending lower-pri work or batched updates. This commit adds two new (previously failing) tests and fixes.', 'Disallow *.server.js imports from any other files (#20309)\nThis convention ensures that you can declare that you intend for a file\nto only be used on the server (even if it technically might resolve\non the client).', 'Support named exports from client references (#20312)\n\nRename "name"->"filepath" field on Webpack module references\n\nThis field name will get confused with the imported name or the module id.\n\nSwitch back to transformSource instead of getSource\n\ngetSource would be more efficient in the cases where we don\'t need to read\nthe original file but we\'ll need to most of the time.\nEven then, we can\'t return a JS file if we\'re trying to support non-JS\nloader because it\'ll end up being transformed.\nSimilarly, we\'ll need to parse the file and we can\'t parse it before it\'s\ntransformed. So we need to chain with other loaders that know how.\n\nAdd acorn dependency\n\nThis should be the version used by Webpack since we have a dependency on\nWebpack anyway.\n\nParse exported names of ESM modules\n\nWe need to statically resolve the names that a client component will\nexport so that we can export a module reference for each of the names.\nFor export * from, this gets tricky because we need to also load the\nsource of the next file to parse that. We don\'t know exactly how the\nclient is built so we guess it\'s somewhat default.\n\nHandle imported names one level deep in CommonJS using a Proxy\n\nWe use a proxy to see what property the server access and that will tell\nus which property we\'ll want to import on the client.\n\nAdd export name to module reference and Webpack map\n\nTo support named exports each name needs to be encoded as a separate\nreference. It\'s possible with module splitting that different exports end\nup in different chunks.\nIt\'s also possible that the export is renamed as part of minification.\nSo the map also includes a map from the original to the bundled name.\n\nSpecial case plain CJS requires and conditional imports using __esModule\n\nThis models if the server tries to import .default or a plain require.\nWe should replicate the same thing on the client when we load that\nmodule reference.\n\nDedupe acorn-related deps\n\nCo-authored-by: Mateusz Burzyński mateuszburzynski@gmail.com', "Reconcile element types of lazy component yielding the same type (#20357)\n\n\nReconcile element types of lazy component yielding the same type\n\n\nAdd some legacy mode and suspense boundary flushing tests\n\n\nFix infinite loop in legacy mode\n\n\nIn legacy mode we typically commit the suspending fiber and then rerender\nthe nearest boundary to render the fallback in a separate commit.\nWe can't do that when the boundary itself suspends because when we try to\ndo the second pass, it'll suspend again and infinite loop.\nInterestingly the legacy semantics are not needed in this case because\nthey exist to let an existing partial render fully commit its partial state.\nIn this case there's no partial state, so we can just render the fallback\nimmediately instead.\n\nCheck fast refresh compatibility first\n\nresolveLazy can suspend and if it does, it can resuspend. Fast refresh\nassumes that we don't resuspend. Instead it relies on updating the inner\ncomponent later.\n\nUse timers instead of act to force fallbacks to show\n", "Fixed invalid DevTools work tags (#20362)\n\nFixed invalid DevTools work tags\n\nWork tags changed recently (PR #13902) but we didn't bump React versions. This meant that DevTools has valid work tags only for master (and FB www sync) but invalid work tags for the latest open source releases. To fix this, I incremneted React's version in Git (without an actual release) and added a new fork to the work tags detection branch.\nThis commit also adds tags for the experimental Scope and Fundamental APIs to DevTools so component names will at least display correctly. Technically these new APIs were first introduced to experimental builds ~16.9 but I didn't add a new branch to the work tags fork because I don't they're used commonly. I've just added them to the 17+ branches.\n\nRemoved FundamentalComponent from DevTools tag defs\n", 'Ignore node_modules when printing warnings (#20363)\nThis now finds acorn and fails to extract warnings from it. But also, this\nseems slow.', 'Failing test for Client reconciliation (#20318)', "Add disableNativeComponentFrames flag (#20364)\nSummary\nWe're experiencing some issues internally where the component stack is\ngetting into our way of fixing them as it causes the page to become\nunresponsive. This adds a flag so that we can disable this feature as a\ntemporary workaround.\nMore internal context: https://fburl.com/go9yoklm\nTest Plan\nI tried to default this flag to __VARIANT__ but the variant tests\n(yarn test-www --variant) started to fail across the board since a lot\nof tests depend on the component tree, things like this:\nhttps://user-images.githubusercontent.com/458591/100771192-6a1e1c00-33fe-11eb-9ab0-8ff46ba378a2.png\nSo, it seems to work :-)\nGiven that it's unhandy to update the hundreds of tests that are failing\nI decided to hard code this to false like we already do for some other\noptions.", "[Flight] Add getCacheForType() to the dispatcher (#20315)\n\nRemove react/unstable_cache\n\nWe're probably going to make it available via the dispatcher. Let's remove this for now.\n\nAdd readContext() to the dispatcher\n\nOn the server, it will be per-request.\nOn the client, there will be some way to shadow it.\nFor now, I provide it on the server, and throw on the client.\n\nUse readContext() from react-fetch\n\nThis makes it work on the server (but not on the client until we implement it there.)\nUpdated the test to use Server Components. Now it passes.\n\n\nFixture: Add fetch from a Server Component\n\n\nreadCache -> getCacheForType\n\n\nAdd React.unstable_getCacheForType\n\n\nAdd a feature flag\n\n\nFix Flow\n\n\nAdd react-suspense-test-utils and port tests\n\n\nRemove extra Map lookup\n\n\nUnroll async/await because build system\n\n\nAdd some error coverage and retry\n\n\nAdd unstable_getCacheForType to Flight entry\n\n", '[Flight] Minimal webpack plugin (#20228)', 'fixed: typo in react-devtools/README.md Websocked -> Websocket (#20376)', "Fork ReactFiberLane (#20371)\nThis wasn't forked previously because Lane and associated types are\nopaque, and they leak into non-reconciler packages. So forking the type\nwould also require forking all those other packages.\nBut I really want to use the reconciler fork infra for lanes changes.\nSo I made them no longer opaque.\nAnother possible solution would be to add separate new and old\nfields to the Fiber type, like I did when migrating from expiration\ntimes. But that seems so excessive. This seems fine.\nBut we should still treat them like they're opaque and only do lanes\nmanipulation in the ReactFiberLane module. At least until the model\nstabilizes more. We'll just need to enforce this with discipline\ninstead of with the type system.", '[Flight] Add rudimentary PG binding (#20372)\n\n\n[Flight] Add rudimentary PG binding\n\n\nUse nested Maps for parameters\n\n\nInline and fix Flow\n\n', 'Error when the number of parameters to a query changes (#20379)', 'React DevTools 4.10.0 -> 4.10.1', 'React DevTools 4.10.0 -> 4.10.1', "Fix Flight Prod Fixture (#20382)\n\nDon't use async/await\n\nBabel transpilation fails for some reason in prod.\n\nSet up production runner command\n\nUses python because meh. Just to show it's static.\n\nUse build folder in prod\n", 'Add more DevTools tests for React.Lazy (#20380)', 'Tweaked DevTools build command slightly', "[Flight] Basic scan of the file system to find Client modules (#20383)\n\nBasic scan of the file system to find Client modules\n\nThis does a rudimentary merge of the plugins. It still uses the global\nscan and writes to file system.\nNow the plugin accepts a search path or a list of referenced client files.\nIn prod, the best practice is to provide a list of files that are actually\nreferenced rather than including everything possibly reachable. Probably\nin dev too since it's faster.\nThis is using the same convention as the upstream ContextModule - which\npowers the require.context helpers.\n\nAdd neo-async to dependencies\n", 'Remove catch from Scheduler build (#20396)\nMakes debugging errors harder.\nIn this case, we can use finally instead.', 'Add Placement bit without removing others (#20398)\nWhen scheduling a Placement effect, we should add the Placement bit\nwithout resetting the others.\nIn the old fork, there are no flags to reset, anyway, since by the\ntime we reach the child reconciler, the flags will have already been\nreset.\nHowever, in the effects refactor, "static" flags are not reset, so this\ncan actually manifest as a bug. See #20285 for a regression test.', 'Track deletions using an array on the parent\nAdds back the deletions array and uses it in the commit phase.\nWe use a trick where the first time we hit a deletion effect, we commit\nall the deletion effects that belong to that parent. This is an\nincremental step away from using the effect list and toward a DFS +\nsubtreeFlags traversal.\nThis will help determine whether the regression is caused by, say,\npushing the same fiber into the deletions array multiple times.', 'Track subtreeFlags et al with bubbleProperties\nOriginal PR: #19836', 'Bump fixture dependency versions (#20397)\n\n\nBump all versions\n\n\nSwitch to CJS mode\n\n\nRevert "Switch to CJS mode"\n\n\nThis reverts commit b3c4fd92dcef6ecb4116fc66f674ae88aad3c582.\n\n\nFix ES mode\n\n\nAdd nodemon to restart the server on edits\n\n\nIgnore /server/ from compilation\n\n', 'Use assets API + writeToDisk instead of directly writing to disk (#20402)', '[Flight] Rename react-transport-... packages to react-server-... (#20403)\n\n\nMove files\n\n\nUpdate paths\n\n\nRename import variables\n\n\nRename /server to /writer\n\n\nThis is mainly because "React Server Server" is weird so we need another\ndimension.\n\nUse "react-server" convention to enforce that writer is only loaded in a server\n', 'Fix module ID deduplication (#20406)', 'fix: Fix typo in react-reconciler docs (#20284)\nperistent -> persistent', 'Fix typo (#20300)\nSigned-off-by: Hollow Man hollowman@hollowman.ml', 'Fix typo (#20279)', 'Cache react-fetch results in the Node version (#20407)', "Clear deletions in detachFiber (#20401)\nThis was added in a later step of the refactor but since deletions\narray already landed, clearing it should, too.\nI think it's unlikely that this causes GC problems but worth\nadding anyway.", "[Flight] Add rudimentary FS binding (#20409)\n\n\n[Flight] Add rudimentary FS binding\n\n\nThrow for unsupported\n\n\nDon't mess with hidden class\n\n\nUse absolute path as the key\n\n\nWarn on relative and non-normalized paths\n\n", 'Rename internal cache helpers (#20410)', 'fixed typo (#20351)', "Double Invoke Effects in DEV (in old reconciler fork) (#20415)\nWe originally added a new DEV behavior of double-invoking effects during mount to our new reconciler fork in PRs #19523 and #19935 and later refined it to only affect modern roots in PR #20028. This PR adds that behavior to the old reconciler fork with a small twist– the behavior applies to StrictMode subtrees, regardless of the root type.\nThis commit also adds a few additional tests that weren't in the original commits.", 'Turn on double effects for www test renderer (#20416)', "[Flight] Add read-only fs methods (#20412)\n\nDon't allocate the inner cache unnecessarily\n\nWe only need it when we're asking for text. I anticipate I'll want to avoid allocating it in other methods too when it's not strictly necessary.\n\n\nAdd fs.access\n\n\nAdd fs.lstat\n\n\nAdd fs.stat\n\n\nAdd fs.readdir\n\n\nAdd fs.readlink\n\n\nAdd fs.realpath\n\n\nRename functions to disambiguate two caches\n\n", 'Put .server.js at the end of bundle filenames (#20419)\n\n\nPut .server.js at the end of bundle filenames\n\n\nClient too\n\n', '[Flight] Rename the shared entry point (#20420)\n\n\n[Flight] Rename the shared entry point\n\n\nShared\n\n', '[Flight] Fix webpack plugin to use chunk groups (#20421)', '[Flight] Prevent non-Server imports of aliased Server entrypoints (#20422)\n\n\n[Flight] Prevent non-Server imports of aliased Server entrypoints\n\n\nFix Flow + await\n\n\nTighten the types\n\n', '[Flight] Make PG and FS server-only (#20424)\n\n\nMake react-fs server-only\n\n\nMake react-pg server-only\n\n', "Always rethrow original error when we replay errors (#20425)\nWe replay errors so you can break on paused exceptions. This is done in\nthe second pass so that the first pass can ignore suspense.\nOriginally this threw the original error. For suppression purposes\nwe copied the flag onto the original error.\nhttps://github.com/facebook/react/blob/f1dc626b29b8bf0f14c75a8525e8650b7ea94a47/packages/react-reconciler/src/ReactFiberScheduler.old.js#L367-L369\nDuring this refactor it changed to just throw the retried error:\nhttps://github.com/facebook/react/pull/15151\nWe're not sure exactly why but it was likely just an optimization or\nclean up.\nSo we can go back to throwing the original error. That helps in the case\nwhere a memoized function is naively not rethrowing each time such as\nin Node's module system.\nUnfortunately this doesn't fix the problem fully.\nBecause invokeGuardedCallback captures the error and logs it to the browser.\nSo you still end up seeing the wrong message in the logs.\nThis just fixes so that the error boundary sees the first one.", 'Regression test: SuspenseList causes lost unmount (#20433)\n@sebmarkbage reminded me that the complete phase of SuspenseList\nwill sometimes enter the begin phase of the children without calling\ncreateWorkInProgress again, instead calling resetWorkInProgress.\nThis was raised in the context of considering whether #20398 might\nhave accidentally caused a SuspenseList bug. (I did look at this code\nat the time, but considering how complicated SuspenseList is it\'s not\nhard to imagine that I made a mistake.)\nAnyway, I think that PR is fine; however, reviewing it again did lead me\nto find a different bug. This new bug is actually a variant of the bug\nfixed by #20398.\nresetWorkInProgress clears a fiber\'s static flags. That\'s wrong, since\nstatic flags -- like PassiveStatic -- are meant to last the lifetime of\nthe component.\nIn more practical terms, what happens is that if a direct child of\nSuspenseList contains a useEffect, then SuspenseList will cause the\nchild to "forget" that it contains passive effects. When the child\nis deleted, its unmount effects are not fired :O\nThis is the second of this type of bug I\'ve found, which indicates to me\nthat it\'s too easy to accidentally clear static flags.\nMaybe we should only update the flags field using helper functions,\nlike we do with lanes.\nOr perhaps we add an internal warning somewhere that detects when a\nfiber has different static flags than its alternate.', '[Flight] Use lazy reference for existing modules (#20445)', '[Flight] Support concatenated modules in Webpack plugin (#20449)\n\n\nExtract recordModule\n\n\nAdd support for concatenated modules\n\n', '[Flight] Fix webpack watch mode issue (#20457)', '[devtools] Increase the clickable area of the prop value (#20428)', 'clone json obj in relay flight client host config parser (#20465)\nWhen parseModel suspends because of missing dependencies, it will exit and retry to parse later. However, in the relay implementation, the model is an object that we modify in place when we parse it, so when we we retry, part of the model might be parsed already into React elements, which will error because the parsing code expect a Flight model. This diff clones instead of mutating the original model, which fixes this error.', "clone json obj in react native flight client host config parser (#20474)\nAs per Seb's comment in #20465, we need to do the same thing in React Native as we do in Relay.\nWhen parseModel suspends because of missing dependencies, it will exit and retry to parse later. However, in the relay implementation, the model is an object that we modify in place when we parse it, so when we we retry, part of the model might be parsed already into React elements, which will error because the parsing code expect a Flight model. This diff clones instead of mutating the original model, which fixes this error.", 'Add back disableSchedulerTimeoutInWorkLoop flag (#20482)\n\n\nAdd back enableSchedulerTimeoutInWorkLoop flag\n\n\nNvm, keep it as disableSchedulerTimeoutInWorkLoop\n\n', "Don't clear other flags when adding Deletion\nSame as #20398 but for Deletions. There's no new regression test, but in\nthe effects refactor, existing tests will fail without this.", 'Add PassiveStatic to trees with passive effects\nIndicates that a tree needs passive clean-up on deletion.', 'Convert passive mount phase to tree traversal', 'Defer more field detachments to passive phase\nThis allows us to use those fields during passive unmount traversal.', 'Convert passive unmount phase to tree traversal', "Don't clear static flags in resetWorkInProgress\nFixes the regression test added in #20433", "Remove PassiveStatic optimization\nPassive flags are a new concept that is tricky to get right. We've\nalready found two bugs related to PassiveStatic. Let's remove this\noptimization for now, and add it back once the main part of the effects\nrefactor lands.", 'Add built-in Suspense cache with support for invalidation (refreshing) (#20456)', 'Hardcoded allowlist for publishing packages (#20485)\nWith separate lists for stable and experimental.', 'Add Flight packages to experimental allowlist (#20486)\n\nreact-fetch\nreact-fs\nreact-pg\nreact-server-dom-webpack\n', 'devtools: Display shortcuts for prev/next search result (#20470)', 'Expose DEV-mode warnings in devtools UI (#20463)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'React Native fixes for new inline errors feature (#20502)', 'Add rudimentary support for Cache to DevTools (#20458)', '[devtools] Bump electron version from 9.1.0 to 11.1.0 for darwin-arm64 builds (#20496)', 'Add useRefresh hook to react-debug-tools (#20460)', 'Fix ESLint crash on empty react effect hook (#20385)\n\n\nFix ESLint crash on empty react effect hook\n\n\nAdd layout effect to test\n\n\nImprove wording in comment\n\n\nImprove lint warning wording\n\n\nReword missing effect callback message\n\n', "Build stable and experimental with same command (#20573)\nThe goal is to simplify our CI pipeline so that all configurations\nare built and tested in a single workflow.\nAs a first step, this adds a new build script entry point that builds\nboth the experimental and stable release channels into a single\nartifacts directory.\nThe script works by wrapping the existing build script (which only\nbuilds a single release channel at a time), then post-processing the\nresults to match the desired filesystem layout. A future version of the\nbuild script would output the files directly without post-processing.\nBecause many parts of our infra depend on the existing layout of the\nbuild artifacts directory, I have left the old workflows untouched.\nWe can incremental migrate to the new layout, then delete the old\nworkflows after we've finished.", 'Migrate build tests to combined workflow (#20574)', 'Migrate remaining tests to combined workflow (#20577)', 'Update package.json versions as part of build step (#20579)\nFixes issue in the new build workflow where the experimental packages do\nnot include "experimental" in the version string. This was because the\nprevious approach relied on the RELEASE_CHANNEL environment variable,\nwhich we are no longer setting in the outer CI job, since we use the\nsame job to build both channels. To solve, I moved the version\npost-processing into the build script itself.\nOnly affects the new build workflow. Old workflow is unchanged.\nLonger term, I would like to remove version numbers from the source\nentirely, including the package.jsons. We should use a placeholder\ninstead; that\'s mostly how it already works, since the release script\nswaps out the versions before we publish to stable.', 'Retry with fresh otp if publish fails (#20582)\nCurrently, if publishing a package fails, the script crashes, and the\nuser must start it again from the beginning. Usually this happens\nbecause the one-time password has timed out.\nWith this change, the user will be prompted for a fresh otp, and the\nscript will resume publishing.', 'Deletion effects should fire parent -> child (#20584)\n\nTest: Deletion effects should fire parent -> child\n\nRegression in new effect implementation\n\nFix passive deletion effect ordering\n', 'Fix: Detach deleted fiber\'s alternate, too (#20587)\nWe need to call detachFiberAfterEffects on the fiber\'s alternate to\nclean it up. We\'re currently not, because the alternate field is\ncleared during detachFiberMutation. So I deferred detaching the\nalternate until the passive phase. Only the return pointer needs to\nbe detached for semantic purposes.\nI don\'t think there\'s any good way to test this without using\nreflection. It\'s not even observable using out our "supported"\nreflection APIs (findDOMNode), or at least not that I can think of.\nWhich is a good thing, in a way.\nIt\'s not really a memory leak, either, because the only reference to the\nalternate fiber is from the parent\'s alternate. Which will be\ndisconnected the next time the parent is updated or deleted.\nIt\'s really only observable if you mess around with internals in ways\nyou\'re not supposed to — I found it because a product test in www that\nuses Enzyme was doing just that.\nIn lieu of a new unit test, I confirmed this patch fixes the broken\nproduct test.', 'Migrate prepare-release-from-ci to new workflow (#20581)\n\nMigrate prepare-release-from-ci to new workflow\n\nI added a --releaseChannel (-r) argument to script. You must choose\neither "stable" or "experimental", because every build job now includes\nboth channels.\nThe prepare-release-from-npm script is unchanged since those releases\nare downloaded from npm, nt CI.\n(As a side note, I think we should start preparing semver releases using\nthe prepare-release-from-ci script, too, and get rid of\nprepare-release-from-npm. I think that was a neat idea originally but\nbecause we already run npm pack before storing the artifacts in CI,\nthere\'s really not much additional safety; the only safeguard it adds is\nthe requirement that a "next" release must have already been published.)\n\nMove validation to parse-params module\n', 'Convert layout phase to depth-first traversal (#20595)', 'Convert mutation phase to depth-first traversal (#20596)', 'Fix prod build in ci/codesandbox (#20606)', 'Update DevTools to use getCacheForType API (#20548)\nDevTools was built with a fork of an early idea for how Suspense cache might work. This idea is incompatible with newer APIs like useTransition which unfortunately prevented me from making certain UX improvements. This PR swaps out the primary usage of this cache (there are a few) in favor of the newer unstable_getCacheForType and unstable_useCacheRefresh APIs. We can go back and update the others in follow up PRs.\nMessaging changes\nI\'ve refactored the way the frontend loads component props/state/etc to hopefully make it better match the Suspense+cache model. Doing this gave up some of the small optimizations I\'d added but hopefully the actual performance impact of that is minor and the overall ergonomic improvements of working with the cache API make this worth it.\nThe backend no longer remembers inspected paths. Instead, the frontend sends them every time and the backend sends a response with those paths. I\'ve also added a new "force" parameter that the frontend can use to tell the backend to send a response even if the component hasn\'t rendered since the last time it asked. (This is used to get data for newly inspected paths.)\nInitial inspection...\nfront |                                                      | back\n      | -- "inspect" (id:1, paths:[], force:true) ---------> |\n      | <------------------------ "inspected" (full-data) -- |\n1 second passes with no updates...\n| -- "inspect" (id:1, paths:[], force:false) --------> |\n      | <------------------------ "inspected" (no-change) -- |\nUser clicks to expand a path, aka hydrate...\n| -- "inspect" (id:1, paths:[\'foo\'], force:true) ----> |\n      | <------------------------ "inspected" (full-data) -- |\n1 second passes during which there is an update...\n| -- "inspect" (id:1, paths:[\'foo\'], force:false) ---> |\n      | <----------------- "inspectedElement" (full-data) -- |\nClear errors/warnings transition\nPreviously this meant there would be a delay after clicking the "clear" button. The UX after this change is much improved.\nHydrating paths transition\nI also added a transition to hydration (expanding "dehyrated" paths).\nBetter error boundaries\nI also added a lower-level error boundary in case the new suspense operation ever failed. It provides a better "retry" mechanism (select a new element) so DevTools doesn\'t become entirely useful. Here I\'m intentionally causing an error every time I select an element.\nImproved snapshot tests\nI also migrated several of the existing snapshot tests to use inline snapshots and added a new serializer for dehydrated props. Inline snapshots are easier to verify and maintain and the new serializer means dehydrated props will be formatted in a way that makes sense rather than being empty (in external snapshots) or super verbose (default inline snapshot format).', "[devtools] Fix can't expand prop value in some scenario (#20534)\nCo-authored-by: Brian Vaughn bvaughn@fb.com", 'build-combined: Fix failures  when renaming across devices (#20620)', 'Land #20595 and #20596 in main fork (#20602)', 'Cache tests: Make it easier to test many caches (#20600)\nSome rearranging to make it easier to write tests that assert on the\noutput of multiple caches.', "Remove custom error message from hook access error (#20604)\nIt will still result in a null access error, so there's no change in\nsemantics. We will print a user-friendly error message in DEV.", 'Use update lane priority in work loop (#20621)', 'Convert ReactSuspenseWithNoopRenderer tests to use built-in cache (#20601)\n\nRemove ms prop from SuspenseWithNoop tests\n\nUse resolveText instead.\n\nMigrate SuspenseWithNoop tests to built-in cache\n', 'Convert snapshot phase to depth-first traversal (#20622)', 'Avoid .valueOf to close #20594 (#20617)', 'Remove references to Deletion flag (#20623)\nWe no longer use the Deletion flag anywhere in the new fork, so we can\nstop marking it.', "Schedule passive phase whenever there's a deletion (#20624)\nWe use the passive phase to detach the fibers.", "Delete remaining references to effect list (#20625)\nI think that's it!", 'Flow ignore new build2 directory (#20635)', 'Re-add "strict effects mode" for legacy roots only (#20639)\nThis combines changes originally made in #19523, #20028, and #20415 but with slightly different semantics: "strict effects" mode is enabled only for the experimental root APIs (never for legacy render, regardless of  usage). These semantics may change slightly in the future.', 'Refactored recursive strict effects method to be iterative (#20642)', 'Land rest of effects refactor in main fork (#20644)', "Store interleaved updates on separate queue until end of render (#20615)\nMotivation\nAn interleaved update is one that is scheduled while a render is\nalready in progress, typically from a concurrent user input event.\nWe have to take care not to process these updates during the current\nrender, because a multiple interleaved updates may have been scheduled\nacross many components; to avoid tearing, we cannot render some of\nthose updates without rendering all of them.\nOld approach\nWhat we currently do when we detect an interleaved update is assign a\nlane that is not part of the current render.\nThis has some unfortunate drawbacks. For example, we will eventually run\nout of lanes at a given priority level. When this happens, our last\nresort is to interrupt the current render and start over from scratch.\nIf this happens enough, it can lead to starvation.\nMore concerning, there are a suprising number of places that must\nseparately account for this case, often in subtle ways. The maintenance\ncomplexity has led to a number of tearing bugs.\nNew approach\nI added a new field to the update queue, interleaved. It's a linked\nlist, just like the pending field. When an interleaved update is\nscheduled, we add it to the interleaved list instead of pending.\nThen we push the entire queue object onto a global array. When the\ncurrent render exits, we iterate through the array of interleaved queues\nand transfer the interleaved list to the pending list.\nSo, until the current render has exited (whether due to a commit or an\ninterruption), it's impossible to process an interleaved update, because\nthey have not yet been enqueued.\nIn this new approach, we don't need to resort to clever lanes tricks to\navoid inconsistencies. This should allow us to simplify a lot of the\nlogic that's currently in ReactFiberWorkLoop and ReactFiberLane,\nespecially findUpdateLane and getNextLanes. All the logic for\ninterleaved updates is isolated to one place.", "Improve error boundary handling for unmounted subtrees (#20645)\nA passive effect's cleanup function may throw after an unmount. Prior to this commit, such an error would be ignored. (React would not notify any error boundaries.)\nAfter this commit, React will skip any unmounted boundaries and look for a still-mounted boundary. If one is found, it will call getDerivedStateFromError and/or componentDidCatch (depending on the type of boundary). Unmounted boundaries will be ignored, but as they have been unmounted– this seems appropriate.", 'Devtool: $r should contain hooks property when it is forwardRef or memo component (#20626)', 'DevTools: Make it easier to write tests for inspected elements (#20655)\nAnd also add a few tests for  which also cover a recent bugfix that just landed', 'Remove lazy invokation of segments (#20656)\nThis is a remainder from Blocks when these were separate query functions.', 'Error for deferred value and transition in Server Components (#20657)', 'Set default release channel for download-experimental-build script (#20663)', 'Experiment: Unsuspend all lanes on update (#20660)\nAdds a feature flag to tweak the internal heuristic used to "unsuspend"\nlanes when a new update comes in.\nA lane is "suspended" if we couldn\'t finish rendering it because it was\nmissing data, and we chose not to commit the fallback. (In this context,\n"suspended" does not include updates that finished with a fallback.)\nWhen we receive new data in the form of an update, we need to retry\nrendering the suspended lanes, since the new data may have unblocked the\npreviously suspended work. For example, the new update could navigate\nback to an already loaded route.\nIt\'s impractical to retry every combination of suspended lanes, so we\nneed some heuristic that decides which lanes to retry and in\nwhich order.\nThe existing heuristic roughly approximates the old Expiration Times\nmodel. It unsuspends all lower priority lanes, but leaves higher\npriority lanes suspended.\nThen when we start rendering, we choose the lanes that have the highest\nLanePriority and render those -- and then we add to that all the lanes\nthat are highher priority.\nIf this sounds terribly confusing, it\'s because it barely makes sense.\n(It made more sense in the Expiration Times world, I promise, but it\nwas still confusing.) I don\'t think it\'s worth me trying to explain the\nold behavior too much because the point here is that we can replace it\nwith something simpler.\nThe new heurstic is to unsuspend all suspended lanes whenever there\'s\nan update.\nThis is effectively what we already do except in a few very specific\nedge cases, ever since we removed the delayed suspense feature from\neverything that\'s not a refresh transition.\nWe can optimize this in the future to only unsuspend lanes that are\neither 1) in the lanes or subtreeLanes of the node that was updated,\nor 2) in the lanes of the return path of the node that was updated.\nThis would exclude lanes that are only located in unrelated sibling\ntrees. But, this optimization wouldn\'t be useful currently because we\nassign the same transition lane to all transitions. It will become\nrelevant again once we start assigning arbitrary lanes to transitions\n-- but that in turn requires us to implement entanglement of overlapping\ntransitions, one of our planned projects.\nSo to sum up: the goal here is to remove the weird edge cases and switch\nto a simpler model, on top of which we can make more substantial\nimprovements.\nI put it behind a flag so I can run an A/B test and confirm it doesn\'t\ncause a regression.', 'Improve tests that use discrete events (#20667)', 'RN: Implement sendAccessibilityEvent in RN Renderer that proxies between Fabric/non-Fabric (#20554)\n\nRN: Implement sendAccessibilityEvent on HostComponent\n\nImplement sendAccessibilityEvent on HostComponent for Fabric and non-Fabric RN.\nCurrently the Fabric version is a noop and non-Fabric uses\nAccessibilityInfo directly. The Fabric version will be updated once\nnative Fabric Android/iOS support this method in the native UIManager.\n\n\nMove methods out of HostComponent\n\n\nProperly type dispatchCommand and sendAccessibilityEvent handle arg\n\n\nImplement Fabric side of sendAccessibilityEvent\n\n\nAdd tests: 1. Fabric->Fabric, 2. Paper->Fabric, 3. Fabric->Paper, 4. Paper->Paper\n\n\nFix typo: ReactFaricEventTouch -> ReactFabricEventTouch\n\n\nfix flow types\n\n\nprettier\n\n', "Entangle overlapping transitions per queue (#20670)\nWhen multiple transitions update the same queue, only the most recent\none should be allowed to finish. We shouldn't show intermediate states.\nSee #17418 for background on why this is important.\nThe way this currently works is that we always assign the same lane to\nall transitions. It's impossible for one transition to finish without\nalso finishing all the others.\nThe downside of the current approach is that it's too aggressive. Not\nall transitions are related to each other, so one should not block\nthe other.\nThe new approach is to only entangle transitions if they update one or\nmore of the same state hooks (or class components), because this\nindicates that they are related. If they are unrelated, then they can\nfinish in any order, as long as they have different lanes.\nHowever, this commit does not change anything about how the lanes are\nassigned. All it does is add the mechanism to entangle per queue. So it\ndoesn't actually change any behavior, yet. But it's a requirement for my\nnext step, which is to assign different lanes to consecutive transitions\nuntil we run out and cycle back to the beginning.", 'Add queue microtask to host configs (#20668)\n\n\nQueue discrete events in microtask\n\n\nFix flow types\n\n\nAdd to createReactNoop\n\n\nMore flow types\n\n\nRemove import\n\n\nAdd to custom HostConfig as well\n\n', 'Queue discrete events in microtask (#20669)\n\n\nQueue discrete events in microtask\n\n\nUse callback priority to determine cancellation\n\n\nAdd queueMicrotask to react-reconciler README\n\n\nFix invatiant conditon for InputDiscrete\n\n\nSwitch invariant null check\n\n\nConvert invariant to warning\n\n\nRemove warning from codes.json\n\n', 'Fix cache refresh bug that broke DevTools (#20687)\nWill follow up with test', "Improve React error message when mutable sources are mutated during render (#20665)\nChanged previous error message from:\n\nCannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.\n\nTo:\n\nCannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.\n\nAlso added a DEV only warning about the unsafe side effect:\n\nA mutable source was mutated while the %s component was rendering. This is not supported. Move any mutations into event handlers or effects.\n\nI think this is the best we can do without adding production overhead that we'd probably prefer to avoid.", "fix: don't run effects if a render phase update results in unchanged deps (#20676)\nThe memoized state of effect hooks is only invalidated when deps change. Deps are compared between the previous effect and the current effect. This can be problematic if one commit consists of an update that has changed deps followed by an update that has equal deps. That commit will lead to memoizedState containing the changed deps even though we committed with unchanged deps.\nThe n+1 update will therefore run an effect because we compare the updated deps with the deps with which we never actually committed.\nTo prevent this we now invalidate memoizedState on every updateEffectImpl call so that memoizedStat.deps always points to the latest deps.", 'Add --commit param to release scripts (#20703)\nAlternative to --build. Uses same logic as sizebot and www\nsync script.\nImmediate motivation is I want sizebot to use the\ndownload-experimental-build command in CI. Will do that next.', "Add automatic retry to download script (#20704)\nIf build job is still pending, the script will continously poll until\nit reaches the retry limit.\nI've set the limit at 10 minutes, since our CI pipeline almost always\nfinishes before that.", "useMutableSource: Use StrictMode double render to detect render phase mutation (#20698)\n\nConcurrent Mode test for uMS render mutation\n\nSame test as the one added in #20665, but for Concurrent Mode.\n\nUse double render to detect render phase mutation\n\nPR #20665 added a mechanism to detect when a useMutableSource source\nis mutated during the render phase. It relies on the fact that we double\ninvoke components that error during development using\ninvokeGuardedCallback. If the version in the double render doesn't\nmatch the first, that indicates there must have been a mutation during\nrender.\nAt first I thought it worked by detecting inside the other double\nrender, the one we do for Strict Mode. It turns out that while it does\nwarn then, the warning is suppressed, because we suppress all console\nmethods that occur during the Strict Mode double render. So it's really\nthe invokeGuardedCallback one that makes it work.\nAnyway, let's set that aside that issue for a second. I realized during\nreview that errors that occur during the Strict Mode double render\nreveal a useful property: A pure component will never throw during the\ndouble render, because if it were pure, it would have also thrown during\nthe first render... in which case it wouldn't have double rendered! This\nis true of all such errors, not just the one thrown by\nuseMutableSource.\nGiven this, we can simplify the useMutableSource mutation detection\nmechanism. Instead of tracking and comparing the source's version, we\ncan instead check if we're inside a double render when the error is\nthrown.\nTo get around the console suppression issue, I changed the warning to an\nerror. It errors regardless, in both dev and prod, so it doesn't have\nsemantic implications.\nHowever, because of the paradox I described above, we arguably\nshouldn't throw an error in development, since we know that error\nwon't happen in production, because prod doesn't double render. (It's\nstill a tearing bug, but that doesn't mean the component will actually\nthrow.) I considered that, but that requires a larger conversation about\nhow to handle errors that we know are only possible in development. I\nthink we should probably be suppressing all errors (with a warning)\nthat occur during a double render.", 'Land interleaved updates change in main fork (#20710)\n\nLand #20615 in main fork\n\nIncludes change to interleaved updates.\nyarn replace-fork\n\nCheck deferRenderPhaseUpdateToNextBatch in test\n', 'DevTools: Patch console methods even when only show-inline-warnings/errors enabled (#20688)', "Restore experimental build script's ability to auto download latest build (#20717)", 'Some release script fixes (#20718)\n\nRetry loop should not start over from beginning\n\nWhen the otp times out, we should not retry the packages that were\nalready successfully published. We should pick up where we left off.\n\nDon\'t crash if build-info.json doesn\'t exist\n\nThe "print follow up instructions" step crashes if build-info.json is\nnot found. The new build workflow doesn\'t include those yet (might not\nneed to) and since the instructions that depend on it only affect\nsemver (latest) releases, I\'ve moved the code to that branch. Will\nfollow up with a proper fix, either by adding back a build-info.json\nfile or removing that dependency and reading the commit some other way.', "Fix release script --commit param (#20720)\nPR #20717 accidentally broke the --commit parameter because the\nscript errors if you provide both a --build and a --commit.\nI solved by removing the validation error. When there's a conflict, it\nwill choose the --build.\n(Although maybe we should --build entirely and always uses --commit.\nI think --commit is a sufficient replacement.)", 'Remove --build flag from release scripts (#20723)\nAlso update instructions to match recent script changes.\nAlso add reproducible commit SHA to post download instructions to support publishing the Firefox DevTools extension.', "Update sizebot to new workflow (#20719)\n\n\nbuild-combined: Fix bundle sizes path\n\n\nOutput COMMIT_SHA in build directory\n\n\nAlternative to parsing an arbitrary package's version number, or\nits build-info.json.\n\nRemove CircleCI environment variable requirement\n\nI think this only reason we needed this was to support passing any\njob id to --build, instead of requiring the process_artifacts job.\nAnd to do that you needed to use the workflows API endpoint, which\nrequires an API token.\nBut now that the --commit argument exists and automatically finds the\ncorrect job id, we can just use that.\n\nAdd CI job that gets base artifacts\n\nUses download-experimental script and places the base artifacts into\na top-level folder.\n\nMigrate sizebot to combined workflow\n\nReplaces the two separate sizebot jobs (one for each channel, stable and\nexperimental) with a single combined job that outputs size information\nfor all bundles in a single GitHub comment.\nI didn't attempt to simplify the output at all, but we should. I think\nwhat I would do is remove our custom Rollup sizes plugin, and read the\nsizes from the filesystem instead. We would lose some information about\nthe build configuration used to generate each artifact, but that can be\ninferred from the filepath. For example, the filepath\nfb-www/ReactDOM-dev.classic.js already tells us everything we need to\nknow about the artifact. Leaving this for a follow up.\n\nMove GitHub status check inside retry loop\n\nThe download script will poll the CircleCI endpoint until the build job\nis complete; it should also poll the GitHub status endpoint if the\nbuild job hasn't been spawned yet.\n\nOnly run get_base_build on main branch\n", 'Delete consolidateBundleSizes script (#20724)\nThis was ported to the new workflow by #20720', "Add publish workflow, triggerable via API request (#20726)\nAdds a new CircleCI workflow, which I will use to publish prereleases\n(next and experimental) for a given commit.\nThe CircleCI API doesn't yet support triggering a specific workflow, but\nit does support triggering a pipeline. So as a workaround you can\ntriggger the entire pipeline and use parameters to disable everything\nexcept the workflow you want. CircleCI recommends this workaround here:\nhttps://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2-\nEventually we can set this workflow to trigger on a cron schedule (once\nper week, for example).", 'Add --ci option to publish script (#20727)\nWhen running in CI, the publish script will skip interactive prompts,\nincluding the prompt for a one-time password.\nInstead, CI will need to use an automation access token:\nhttps://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow', 'Fallback if GitHub status is stuck as "pending" (#20729)\nGitHub\'s status API is super flaky. Sometimes it reports a job as\n"pending" even after it completes in CircleCI. If it\'s still pending\nwhen we time out, return the build ID anyway. TODO: The location of the\nretry loop is a bit weird. We should probably combine this function with\nthe one that downloads the artifacts, and wrap the retry loop around the\nwhole thing.', "Add command to publish preleases via CI (#20728)\nyarn publish-prereleases\nScript to trigger a CircleCI workflow that publishes preleases.\nThe CI workflow doesn't actually publish yet; it just runs and logs\nits inputs.", 'Add silent to codesandbox config (#20730)', 'Empty commit to replace "broken" head of main\nHead commit had a "broken" (but not really) CircleCI job and CircleCI\ndoesn\'t give me a way to clear/restart it. So I\'m doing this.', "Implement CI job that publishes prereleases (#20732)\nPR #20728 added a command to initiate a prerelease using CI, but it left\nthe publish job unimplemented. This fills in the publish job.\nUses an npm automation token for authorization, which bypasses the need\nfor a one-time password. The token is configured via CircleCI's\nenvironment variable panel.\nCurrently, it will always publish the head of the main branch. If the\nhead has already been published, it will exit gracefully.\nIt does not yet support publishing arbitrary commits, though we could\neasily add that. I don't know how important that use case is, because\nfor PR branches, you can use CodeSandbox CI instead. Or as a last\nresort, run the publish script locally.\nAlways publishing from main is nice because it further incentivizes us\nto keep main in a releasable state. It also takes the guesswork out of\npublishing a prerelease that's in a broken state: as long as we don't\nmerge broken PRs, we're fine.", 'Auto-publish prereleases every weekday (#20733)\nSets up a cron trigger to publish prereleases at 16:00 UTC (11 am\nEastern, 8 am Pacific) on every weekday (Monday through Friday).', 'Autopublish prereleases using head of main branch\nInstead of using pipeline parameter. Fixes copypasta from the other\nworkflow, which accepts the SHA parameter via an API call.', "Fix cron syntax\nLet's try this again?", 'Fix codesandbox build command (#20731)', 'Update release documentation (#20736)\nAdded information about automated prereleases', 'Fix UMD bundles by removing usage of global (#20743)', 'Remove the Fundamental internals (#20745)', 'sizebot: Fix wrong order of base, head arguments (#20751)\nThe base and head arguments were flipped, so an n% decrease in bundle\nsize was instead reported as an n% increase.', 'sizebot: Combine stable and experimental results (#20753)\nBecause we have access to the artifacts in CI, we can read bundle sizes\ndirectly from the filesystem, instead of the JSON files emitted by our\ncustom Rollup plugin.\nThis gives us some flexibility if we ever have artifacts that aren\'t\ngenerated by Rollup, or if we rewrite our build script.\nPersonally, I also prefer to see the whole file path, instead of just\nthe name, because some of our names are repeated.\nMy immediate motivation, though, is because it gives us a way to merge\nthe separate "experimental" and "stable" size results. Instead\neverything is reported in a single table and disambiguated by path.\nI also added a section at the top that always displays the size impact\nto certain critical bundles — right now, that\'s the React DOM production\nbundles for each release channel. This section will also include any\nsize changes larger than 2%.\nBelow that is a section that is collapsed by default and includes all\nsize changes larger than 0.2%.', 'Align event group constant naming with lane naming (#20744)\n\n\nRename ContinuousEvent to DefaultEvent\n\n\nRename UserBlockingEvent to ContinuousEvent\n\n', 'Decouple event priority list from event name list (#20760)\n\n\nRemove some dead code\n\n\nDecouple event priority list from event name list\n\n\nFix lint\n\n', 'Parallel transitions: Assign different lanes to consecutive transitions (#20672)\n\nLand enableTransitionEntanglement changes\n\nLeaving the flag though because I plan to reuse it for additional,\nsimilar changes.\n\nAssign different lanes to consecutive transitions\n\nCurrently we always assign the same lane to all transitions. This means\nif there are two pending transitions at the same time, neither\ntransition can finish until both can finish, even if they affect\ncompletely separate parts of the UI.\nThe new approach is to assign a different lane to each consecutive\ntransition, by shifting the bit to the right each time. When we reach\nthe end of the bit range, we cycle back to the first bit. In practice,\nthis should mean that all transitions get their own dedicated lane,\nunless we have more pending transitions than lanes, which should\nbe rare.\nWe retain our existing behavior of assigning the same lane to all\ntransitions within the same event. This is achieved by caching the first\nlane assigned to a transition, then re-using that one until the next\nReact task, by which point the event must have finished. This preserves\nthe guarantee that all transition updates that result from a single\nevent will be consistent.', 'Reduce some constant duplication (#20761)\n\n\nReduce some constant duplication\n\n\nAlphabetize\n\n', 'Use Lanes instead of priority event constants (#20762)', 'Don\'t shift interleaved updates to separate lane (#20681)\nNow that interleaved updates are added to a special queue, we no longer\nneed to shift them into their own lane. We can add to a lane that\'s\nalready in the middle of rendering without risk of tearing.\nSee #20615 for more background.\nI\'ve only changed this in the new fork, and only behind the\nenableTransitionEntanglements flag.\nMost of this commit involves updating tests. The "shift-to-a-new" lane\ntrick was intentionally used in a handful of tests where two or more\nupdates need to be scheduled in different lanes. Most of these tests\nwere written before startTransition existed, and all of them were\nwritten before transitions were assigned arbitrary lanes.\nSo I ported these tests to use startTransition instead, which is the\nidiomatic way to mark an update as parallel.\nI didn\'t change the old fork at all. Writing these tests in such a way\nthat they also pass in the old fork actually revealed a few flaws in the\ncurrent implementation regarding interrupting a suspended refresh\ntransition early, which is a good reminder that we should be writing our\ntests using idiomatic patterns as much as we possibly can.', 'Experiment: Infer the current event priority from the native event (#20748)\n\n\nAdd the feature flag\n\n\nAdd a host config method\n\n\nWire it up to the work loop\n\n\nExport constants for third-party renderers\n\n\nDocument for third-party renderers\n\n', "Add tests for non-React discrete events flushing in a microtask (#20772)\n\nConvert some old discrete tests to Hooks\n\nI'm planning to copy paste so why not update them anyway.\n\nCopy paste discrete tests into another file\n\nThese are still using React events. I'll change that next.\n\nConvert the test to use native events\n", 'Add more non-React events to the priority list (#20774)\n\n\nAdd a test for mouseover being continuous\n\n\nAdd more non-React events to the priority list\n\n', 'Move scheduler priority check into ReactDOM (#20778)\n\n\nMove scheduler priority check into ReactDOM\n\n\nTODO\n\n', "Apply #20778 to new fork, too (#20782)\n\n\nApply #20778 to new fork, too\n\n\nFix tests that use runWithPriority\n\n\nWhere possible, I tried to rewrite in terms of an idiomatic API.\nFor DOM tests, we should be dispatching an event with the desired\npriority level.\nFor Idle updates (very unstable feature), probably need an unstable\nAPI like ReactDOM.unstable_IdleUpdates.\nSome of these fixes are not great, but we can replace them once we've\nlanded the more of our planned changes to the layering between\nScheduler, the reconciler, and the renderer.", 'Default updates should not interrupt transitions (#20771)\nThe only difference between default updates and transition updates is\nthat default updates do not support suspended refreshes — they will\ninstantly display a fallback.\nCo-authored-by: Rick Hanlon rickhanlonii@gmail.com', 'Lane enableTransitionEntanglement flag (#20775)', "Cross-fork lint: Support named export declaration (#20784)\nNoticed this didn't work when I ran replace-fork and a named export\ndeclaration in ReactFiberReconciler was not properly fixed.", 'Parallelize Flow in CI (#20794)\n\nParallelize Flow in CI\n\nWe added more host configs recently, and we run all the checks in\nsequence, so sometimes Flow ends up being the slowest CI job.\nThis splits the job across multiple processes.\n\nFix environment variable typo\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\nCo-authored-by: Ricky rickhanlonii@gmail.com', "CI job to check that forks are in sync (#20795)\nWe don't always keep the reconciler forks in sync (otherwise it we\nwouldn't have forked it) but during periods when they are meant to be in\nsync, we use this job to confirm there are no differences.", "Use a single lane per priority level (#20791)\n(Except transitions and retries.)\nThe idea is that the only priorities that benefit from multiple parallel\nupdates are the ones that might suspend: transitions and retries. All\nother priorities, including the ones that are interruptible like\nContinuous and Idle, don't need multiple lanes because it's better to\nbatch everything together.", "Make remaining empty lanes Transition lanes (#20793)\nDoesn't really have any effect now because we batch everything together\nanyway but will allow for more parallelism once we support that.", "Remove fakeCallbackNode (#20799)\nDon't need this, because sync tasks are never cancelled. We can do the\nsame thing we do for microtask callbacks.", 'fix comments of markUpdateLaneFromFiberToRoot (#20546)', 'Request to update email (#20533)', 'Fix typo in comment for react-devtools-shared (#20459)', 'Fix typo (#20466)', "Omit TransitionHydrationLane from TransitionLanes (#20802)\nFollow up to #20793\nI don't this makes any observable difference, but this is how it was\nbefore so might as well be consistent just in case.", 'Warn if static flag is accidentally cleared (#20807)\n\nWarn if static flag is accidentally cleared\n\n"Static" fiber flags are flags that are meant to exist for the lifetime\nof a component. It\'s really important not to accidentally reset these,\nbecause we use them to decide whether or not to perform some operation\non a tree (which we can do because they get bubbled via subtreeFlags).\nWe\'ve had several bugs that were caused by this mistake, so we actually\ndon\'t rely on static flags anywhere, yet. But we\'d like to.\nSo let\'s roll out this warning and see if it fires anywhere. Once we\ncan confirm that there are no warnings, we can assume that it\'s safe\nto start using static flags.\nI did not wrap it behind a feature flag, because it\'s dev-only, and we\ncan use our internal warning filter to hide this from the console.\n\n\nIntentionally clear static flag to test warning\n\n\n...and fix it again\n\n', "Add supportsMicrotasks to the host config (#20809)\n\nAdd supportsMicrotasks to the host config\n\nOnly certain renderers support scheduling a microtask, so we need a\nrenderer specific flag that we can toggle. That way it's off for some\nrenderers and on for others.\nI copied the approach we use for the other optional parts of the host\nconfig, like persistent mode and test selectors.\nWhy isn't the feature flag sufficient?\nThe feature flag modules, confusingly, are not renderer-specific, at\nleast when running the our tests against the source files. They are\nmeant to correspond to a release channel, not a renderer, but we got\nconfused at some point and haven't cleaned it up.\nFor example, when we run yarn test, Jest loads the flags from the\ndefault ReactFeatureFlags.js module, even when we import the React\nNative renderer — but in the actual builds, we load a different feature\nflag module, ReactFeatureFlags.native-oss.js. There's no way in our\ncurrent Jest load a different host config for each renderer, because\nthey all just import the same module. We should solve this by creating\nseparate Jest project for each renderer, so that the flags loaded when\nrunning against source are the same ones that we use in the\ncompiled bundles.\nThe feature flag (enableDiscreteMicrotasks) still exists — it's used\nto set the React DOM host config's supportsMicrotasks flag to true.\n(Same for React Noop) The important part is that turning on the feature\nflag does not affect the other renderers, like React Native.\nThe host config will likely outlive the feature flag, too, since the\nfeature flag only exists so we can gradually roll it out and measure the\nimpact in production; once we do, we'll remove it. Whereas the host\nconfig flag may continue to be used to disable the discrete microtask\nbehavior for RN, because RN will likely use a native (non-JavaScript)\nAPI to schedule its tasks.\n\nAdd supportsMicrotask to react-reconciler README\n", "[CI] Publish to release channels sequentially (#20827)\nnpm will sometimes fail if you try to concurrently publish two different\nversions of the same package, even if they use different dist tags.\nSo instead of publishing to the Next and Experimental channels\nsimultaneously, we'll do them one after the other.\nIf we did want to speed up these publish workflows, we could paralellize\nby package instead of by release channel.", '[CI] Use constant commit sha (#20828)\nWhen running the publish workflow, either via the command line or\nvia the daily cron job, we should use a constant SHA instead of\nwhatever happens to be at the head of the main branch at the time the\nworkflow is run.\nThe difference is subtle: currently, the SHA is read at runtime,\neach time the workflow is run. With this change, the SHA is read right\nbefore the workflow is created and passed in as a constant parameter.\nIn practical terms, this means if a workflow is re-run via the CircleCI\nweb UI, it will always re-run using the same commit SHA as the original\nworkflow, instead of fetching the latest SHA from GitHub, which may\nhave changed.\nAlso avoids a race condition where the head SHA changes in between the\nNext publish job and the Experimental publish job.', "Bailout in sync task if work is not sync (#20813)\nBecause we don't cancel synchronous tasks, sometimes more than one\nsynchronous task ends up being scheduled. This is an artifact of the\nfact that we have two different lanes that schedule sync tasks: discrete\nand sync. So what can happen is that a discrete update gets scheduled,\nthen a sync update right after that. Because sync is encoded as higher\npriority than discrete, we schedule a second sync task. And since we\ndon't cancel the first one, there are now two separate sync tasks.\nAs a next step, what we should do is merge InputDiscreteLane with\nSyncLane, then (I believe) this extra bailout wouldn't be necessary,\nbecause there's nothing higher priority than sync that would cause us to\ncancel it. Though we may want to add logging to be sure.", 'Use setImmediate when available over MessageChannel (#20834)\n\n\nMove direct port access into a function\n\n\nFork based on presence of setImmediate\n\n\nCopy SchedulerDOM-test into another file\n\n\nChange the new test to use shimmed setImmediate\n\n\nClarify comment\n\n\nFix test to work with existing feature detection\n\n\nAdd flags\n\n\nDisable OSS flag and skip tests\n\n\nUse VARIANT to reenable tests\n\n\nlol\n\n', 'fix: use SharedArrayBuffer only when cross-origin isolation is enabled (#20831)\n\n\nfix: check cross-origin isolation for SharedArrayBuffer\n\n\nchore: remove unused a $FlowFixMe comment\n\n\nprettier\n\n', 'Disable (unstable) scheduler sampling profiler for OSS builds (#20832)\n\nDisabled Scheduler sampling profiler for OSS builds\nAdded missing conditional feature flag around profiling calls\n', "Remove scheduler sampling profiler shared array buffer (#20840)\nNo one has been using this data so there's no reason to collect it. Event log has been maintained and tests have been updated.", 'Land enableNonInterruptingNormalPri (#20859)', "DevTools: Restore inspect-element bridge optimizations (#20789)\n\nRestore inspect-element bridge optimizations\n\nWhen the new Suspense cache was integrated (so that startTransition could be used) I removed a couple of optimizations between the backend and frontend that reduced bridge traffic when e.g. dehydrated paths were inspected for elements that had not rendered since previously inspected. This commit re-adds those optimizations as well as an additional test with a bug fix that I noticed while reading the backend code.\nThere are two remaining TODO items as of this commit:\n- Make inspected element edits and deletes also use transition API\n- Don't over-eagerly refresh the cache in our ping-for-updates handler\nI will addres both in subsequent commits.\n\n\nPoll for update only refreshes cache when there's an update\n\n\nAdded inline comment\n\n", 'Fabric-compatible implementation of JSReponder feature (#20768)\nWith this change, if a node is a Fabric node, we route the setJSResponder call to FabricUIManager. Native counterpart is already landed. Tested internally as D26241364.', 'Add additional messaging for RulesOfHooks lint error (#20692)\n\n\nAdd additional messaging for RulesOfHooks lint error\n\n\nFix tests and spacing issue\n\n\nPrettify ESLintRulesOfHooks-test\n\n', "Add Lane labels to scheduling profiler marks (#20808)\nThis commit changes scheduling profiler marks from a format like '--schedule-render-1' to '--schedule-render-1-Sync' (where 1 is the numeric value of the Sync lane). This will enable the profiler itself to show more meaningful labels for updates and render work.\nThe commit also refactors and adds additional tests for the scheduling profiler package.\nIt also updates the preprocessor to 'support' instant events. These are no-ops for us, but adding recognition of the event type will prevent profiles imported from e.g. Chrome Canary from throwing with an 'unrecognized event' error. (This will resolve issue #20767.)", "Update scheduling profiler Webpack config (#20867)\nUse the pre-built scheduler (which includes a check for 'window' being defined in order to load the right scheduler implementation) rather than just directly importing a version of the scheduler that relies on window. Since the scheduling profiler's code runs partially in a web worker, it can't rely on window.", "Add StrictMode level prop and createRoot unstable_strictModeLevel option (#20849)\n\nThe exported '' tag remains the same and opts legacy subtrees into strict mode level one ('mode == StrictModeL1'). This mode enables DEV-only double rendering, double component lifecycles, string ref warnings, legacy context warnings, etc. The primary purpose of this mode is to help detected render phase side effects. No new behavior. Roots created with experimental 'createRoot' and 'createBlockingRoot' APIs will also (for now) continue to default to strict mode level 1.\n\nIn a subsequent commit I will add support for a 'level' attribute on the '' tag (as well as a new option supported by ). This will be the way to opt into strict mode level 2 ('mode == StrictModeL2'). This mode will enable DEV-only double invoking of effects on initial mount. This will simulate future Offscreen API semantics for trees being mounted, then hidden, and then shown again. The primary purpose of this mode is to enable applications to prepare for compatibility with the new Offscreen API (more information to follow shortly).\nFor now, this commit changes no public facing behavior. The only mechanism for opting into strict mode level 2 is the pre-existing 'enableDoubleInvokingEffects' feature flag (only enabled within Facebook for now).\n\nRenamed strict mode constants\n\nStrictModeL1 -> StrictLegacyMode and StrictModeL2 -> StrictEffectsMode\n\n\nRenamed tests\n\n\nSplit strict effects mode into two flags\n\n\nOne flag ('enableStrictEffects') enables strict mode level 2. It is similar to 'debugRenderPhaseSideEffectsForStrictMode' which enables srtict mode level 1.\nThe second flag ('createRootStrictEffectsByDefault') controls the default strict mode level for 'createRoot' trees. For now, all 'createRoot' trees remain level 1 by default. We will experiment with level 2 within Facebook.\nThis is a prerequisite for adding a configurable option to 'createRoot' that enables choosing a different StrictMode level than the default.\n\nAdd StrictMode 'unstable_level' prop and createRoot 'unstable_strictModeLevel' option\n\nNew StrictMode 'unstable_level' prop allows specifying which level of strict mode to use. If no level attribute is specified, StrictLegacyMode will be used to maintain backwards compatibility. Otherwise the following is true:\n* Level 0 does nothing\n* Level 1 selects StrictLegacyMode\n* Level 2 selects StrictEffectsMode (which includes StrictLegacyMode)\nLevels can be increased with nesting (0 -> 1 -> 2) but not decreased.\nThis commit also adds a new 'unstable_strictModeLevel' option to the createRoot and createBatchedRoot APIs. This option can be used to override default behavior to increase or decrease the StrictMode level of the root.\nA subsequent commit will add additional DEV warnings:\n* If a nested StrictMode tag attempts to explicitly decrease the level\n* If a level attribute changes in an update", 'Update React Native types (#20883)', 'Add SuspenseList to react-is (#20874)\nThis commit also adds explicit index.stable and index.experimental forks to the react-is package so that we can avoid exporting references to SuspenseList in a stable release.', 'Schedule sync updates in microtask (#20872)\n\n\nSchedule sync updates in microtask\n\n\nUpdates from review\n\n\nFix comment\n\n', 'Fix react-devtools-scheduling-profiler tests on main (#20885)', 'Fix React Native flow types (#20889)', "typo fix for the word 'Psuedo' (#20894)\nCo-authored-by: Bowen Li bowen31337@gmail.com", 'Remove blocking mode and blocking root (#20888)\n\n\nRemove blocking mode and blocking root\n\n\nAdd back SuspenseList test\n\n\nClean up ReactDOMLegacyRoot\n\n\nRemove dupe ConcurrentRoot\n\n\nUpdate comment\n\n', 'Land enableSetImmediate feature flag (#20906)', 'Add unstable_strictModeLevel to test renderer (#20914)\nMatches what we do for React DOM', 'Revert "Remove blocking mode and blocking root (#20888)" (#20916)\nThis reverts commit 553440bd1578ef71982c4a10e2cc8c462f33d9be.', 'Split getComponentName into getComponentNameFromFiber and getComponentNameFromType (#20940)\nSplit getComponentName into getComponentNameFromFiber and getComponentNameFromType', "Move context comparison to consumer\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\nI added a memoizedValue field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into readContext, but that's a much hotter path, so I\nthink this is an appropriate trade off.", '[Experiment] Lazily propagate context changes (#20890)\n\nMove context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can\'t rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\nI added a memoizedValue field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it\'s a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into readContext, but that\'s a much hotter path, so I\nthink this is an appropriate trade off.\n\n[Experiment] Lazily propagate context changes\n\nWhen a context provider changes, we scan the tree for matching consumers\nand mark them as dirty so that we know they have pending work. This\nprevents us from bailing out if, say, an intermediate wrapper is\nmemoized.\nCurrently, we propagate these changes eagerly, at the provider.\nHowever, in many cases, we would have ended up visiting the consumer\nnodes anyway, as part of the normal render traversal, because there\'s no\nmemoized node in between that bails out.\nWe can save CPU cycles by propagating changes only when we hit a\nmemoized component — so, instead of propagating eagerly at the provider,\nwe propagate lazily if or when something bails out.\nMost of our bailout logic is centralized in\nbailoutOnAlreadyFinishedWork, so this ended up being not that\ndifficult to implement correctly.\nThere are some exceptions: Suspense and Offscreen. Those are special\nbecause they sometimes defer the rendering of their children to a\ncompletely separate render cycle. In those cases, we must take extra\ncare to propagate all the context changes, not just the first one.\nI\'m pleasantly surprised at how little I needed to change in this\ninitial implementation. I was worried I\'d have to use the reconciler\nfork, but I ended up being able to wrap all my changes in a regular\nfeature flag. So, we could run an experiment in parallel to our other\nones.\nI do consider this a risky rollout overall because of the potential for\nsubtle semantic deviations. However, the model is simple enough that I\ndon\'t expect us to have trouble fixing regressions if or when they arise\nduring internal dogfooding.\n\nThis is largely based on RFC#118,\nby @gnoff. I did deviate in some of the implementation details, though.\nThe main one is how I chose to track context changes. Instead of storing\na dirty flag on the stack, I added a memoizedValue field to the\ncontext dependency object. Then, to check if something has changed, the\nconsumer compares the new context value to the old (memoized) one.\nThis is necessary because of Suspense and Offscreen — those components\ndefer work from one render into a later one. When the subtree continues\nrendering, the stack from the previous render is no longer available.\nBut the memoized values on the dependencies list are. This requires a\nbit more work when a consumer bails out, but nothing considerable, and\nthere are ways we could optimize it even further. Conceptually, this\nmodel is really appealing, since it matches how our other features\n"reactively" detect changes — useMemo, useEffect,\ngetDerivedStateFromProps, the built-in cache, and so on.\nI also intentionally dropped support for\nunstable_calculateChangedBits. We\'re planning to remove this API\nanyway before the next major release, in favor of context selectors.\nIt\'s an unstable feature that we never advertised; I don\'t think it\'s\nseen much adoption.\nCo-Authored-By: Josh Story jcs.gnoff@gmail.com\n\nPropagate all contexts in single pass\n\nInstead of propagating the tree once per changed context, we can check\nall the contexts in a single propagation. This inverts the two loops so\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\nThis adds a bit of overhead to the case where only a single context\nchanges because you have to unwrap the context from the array. I\'m also\nunsure if this will hurt cache locality.\nCo-Authored-By: Josh Story jcs.gnoff@gmail.com\n\nStop propagating at nearest dependency match\n\nBecause we now propagate all context providers in a single traversal, we\ncan defer context propagation to a subtree without losing information\nabout which context providers we\'re deferring — it\'s all of them.\nTheoretically, this is a big optimization because it means we\'ll never\npropagate to any tree that has work scheduled on it, nor will we ever\npropagate the same tree twice.\nThere\'s an awkward case related to bailing out of the siblings of a\ncontext consumer. Because those siblings don\'t bail out until after\nthey\'ve already entered the begin phase, we have to do extra work to\nmake sure they don\'t unecessarily propagate context again. We could\navoid this by adding an earlier bailout for sibling nodes, something\nwe\'ve discussed in the past. We should consider this during the next\nrefactor of the fiber tree structure.\nCo-Authored-By: Josh Story jcs.gnoff@gmail.com\n\nMark trees that need propagation in readContext\n\nInstead of storing matched context consumers in a Set, we can mark\nwhen a consumer receives an update inside readContext.\nI hesistated to put anything in this function because it\'s such a hot\npath, but so are bail outs. Fortunately, we only need to set this flag\nonce, the first time a context is read. So I think it\'s a reasonable\ntrade off.\nIn exchange, propagation is faster because we no longer need to\naccumulate a Set of matched consumers, and fiber bailouts are faster\nbecause we don\'t need to consult that Set. And the code is simpler.\nCo-authored-by: Josh Story jcs.gnoff@gmail.com', "[Bugfix] Reset subtreeFlags in resetWorkInProgress (#20948)\n\nAdd failing regression test\n\nBased on #20932\nCo-Authored-By: Dan Abramov dan.abramov@gmail.com\n\nReset subtreeFlags in resetWorkInProgress\n\nAlternate fix to #20942\nThere was already a TODO to make this change, but at the time I left it,\nI couldn't think of a way that it would actually cause a bug, and I was\nhesistant to change something without fully understanding the\nramifications. This was during a time when we were hunting down a\ndifferent bug, so we were especially risk averse.\nWhat I should have done in retrospect is put the change behind a flag\nand tried rolling it out once the other bug had been flushed out.\nOTOH, now we have a regression test, which wouldn't have otherwise, and\nthe bug it caused rarely fired in production.\nCo-authored-by: Dan Abramov dan.abramov@gmail.com", 'Use update lane priority to set pending updates on roots (#20918)', 'Improve DevTools Profiler commit-selector UX (#20943)\n\n\nImprove DevTools Profiler commit-selector UX\n\n\nUse natural log of durations (rather than linear) when calculating bar height. This reduces the impact of one (or few) outlier times on more common smaller durations. (Continue to use linear for bar color though.)\n\nDecrease the minimum bar height to make the differences in height more noticeable.\nAdd a background hover highlight to increase contrast.\nAdd hover tooltip with commit duration and timestamp.\n', 'DevTools flushes updated passive warning/error info after delay (#20931)\n\nDevTools flushes updated passive warning/error info after delay\nPreviously this information was not flushed until the next commit, but this provides a worse user experience if the next commit is really delayed. Instead, the backend now flushes only the warning/error counts after a delay. As a safety, if there are already any pending operations in the queue, we bail.\n\nCo-authored-by: eps1lon silbermann.sebastian@gmail.com', 'chore(build):  Ensure experimental builds exists on windows (#20933)\n\n\nchore(build): Throw if rsync fails\n\n\ndid not get cwrsync to work\n\n', 'Swap log with cbrt for commit bar height (#20952)', 'Remove decoupleUpdatePriorityFromScheduler', 'Switch callsites over to update lane priority', 'Remove runWithPriority internally', 'Trigger Build', 'Land enableDiscreteEventMicroTasks (#20954)', 'Remove scheduler priority from hydration (#20957)', 'Land enableNativeEventPriorityInference (#20955)\n\n\nLand enableNativeEventPriorityInference\n\n\nMove schedulerPriorityToLanePriority\n\n\nRemove obsolete comment\n\n', 'Remove DevTools dependency on Scheduler runWithPriority (#20967)', 'Cleanup tests using runWithPriority. (#20958)\n\n\nRemove Scheduler.runWithPriority from some tests\n\n\nMark experimental test experimental\n\n', 'Cleaned up unused PassiveUnmountPendingDev DEV flag (#20973)', 'Unify InputDiscreteLane with SyncLane (#20968)\n\n\nUnify sync priority and input discrete\n\n\nFix lint\n\n\nUse update lane instead\n\n\nUpdate sync lane labels\n\n', 'Remove Blocking Mode (again) (#20974)\n\n\nRemove Blocking Mode (again)\n\n\nRename batchingmode file and comment\n\n', "Stop tracking roots with pending discrete updates (#20978)\nNow that discrete updates are flushed synchronously in a microtask,\nthere's no need to track them in their on queue. They're already in\nthe queue we use for all sync work. So we can call that directly.", 'Ensure sync-xhr is allowed before reload and profile (#20879)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', "Basic Fizz Architecture (#20970)\n\n\nCopy some infra structure patterns from Flight\n\n\nBasic data structures\n\n\nMove structural nodes and instruction commands to host config\n\n\nMove instruction command to host config\n\n\nIn the DOM this is implemented as script tags. The first time it's emitted\nit includes the function. Future calls invoke the same function.\nThe side of the complete boundary function in particular is unfortunately\nlarge.\n\nImplement Fizz Noop host configs\n\nThis is implemented not as a serialized protocol but by-passing the\nserialization when possible and instead it's like a live tree being\nbuilt.\n\nImplement React Native host config\n\nThis is not wired up. I just need something for the flow types since\nFlight and Fizz are both handled by the isServerSupported flag.\nMight as well add something though.\nThe principle of this format is the same structure as for HTML but a\nsimpler binary format.\nEach entry is a tag followed by some data and terminated by null.\n\n\nCheck in error codes\n\n\nComment\n\n", '[Fizz] Destroy the stream with an error if the root throws (#20992)\n\nDestroy the stream with an error if the root throws\n\nBut not if the error happens inside a suspense boundary.\n\nTry rewriting the test to see if it works in other Node envs\n', '[Fizz] Move DOM/Native format configs to their respective packages (#20994)\n\nMove DOM/Native format configs to their respective packages\n\nThe streaming configs (Node/Browser) are different because they operate at\nanother dimension that exists in each package.\n\nUse escapeTextForBrowser to encode dynamic strings\n\nWe can now use local dependencies', 'Clean up unused functions from SSR (#20995)', 'Update devtools-extensions build script to reflect changes in local b… (#21004)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Document prerequisites for download-experimental-build (#21005)', "Allow the streaming config to decide how to precompute or compute chunks (#21008)\nSome legacy environments can not encode non-strings. Those would specify\nboth as strings. They'll throw for binary data.\nSome environments have to encode strings (like web streams). Those would\nencode both as uint8array.\nSome environments (like Node) can do either. It can be beneficial to leave\nthings as strings in case the native stream can do something smart with it.", "Revert 'Fabric-compatible implementation of  feature' and have Fabric noop when setJSResponder is called for now (#21009)", 'Sync ReactNativeTypes from React Native (#21015)', 'chore: update react-reconciler README (#21016)', 'Fix native event batching in concurrent mode (#21010)\n\n\nFix native event batching in concurrent mode\n\n\nWrap DevTools test updates with act\n\n\nThese tests expect the scheduleUpdate DevTools hook to trigger a\nsynchronous re-render with legacy semantics, but flushing in a microtask\nis fine. Wrapping the updates with act fixes it.\n\n\nTesting nits\n\n\nNit: Check executionContext === NoContext first\n\n\nIn the common case it will be false and the binary expression will\nshort circuit.\nCo-authored-by: Andrew Clark git@andrewclark.io', 'Store commit durations on HostRoot for DevTools access (#20983)\nAlso add missing feature flag wrappers around effect duration attributes.', 'Speed up DevTools local build script (#21018)', '[Fizz] Assign an ID to the first DOM element in a fallback or insert a dummy (and testing infra) (#21020)\n\n\nPatches\n\n\nAdd Fizz testing infra structure\n\n\nAssign an ID to the first DOM node in a fallback or insert a dummy\n\n\nunstable_createRoot\n\n', "Don't delete trailing mismatches during hydration at the root (#21021)\n\n\nDon't delete any trailing nodes in the container during hydration error\n\n\nWarn when an error during hydration causes us to clear the container\n\n\nEncode unfortunate case in test\n\n\nWrap the root for tests that are applicable to nested cases\n\n\nNow we can pipe Fizz into a container\n\n\nGrammatical fix\n\n", 'DevTools Profiler: Add commit and post-commit durations to UI (#20984)', '[FB-only] Show which hooks (indices) changed when profiling (#20998)', 'React Native: Touch Instrumentation Interface (#21024)', "[Fizz] Expose a method to abort a pending request (#21027)\n\nTrack all suspended work while it's still pending\n\nThis allows us to abort work and put everything into client rendered mode\nif we don't want to wait for further I/O.\nIt also allows us to cancel fallbacks if we complete the main content\nbefore the fallback.\n\nExpose abort API to the browser streams\n\nSince this API already returns a value, we need to use destructuring to\nexpose more options.\n\n\nAdd a test including the client actually client rendering it\n\n\nUse AbortSignal option for W3C streams instead of external control\n\n\nClean up listener after it's used once\n\n", '[Fizz] Expose a method to explicitly start writing to a Node stream (#21028)\n\n\nExpose an explicit point when to start writing in the Node API\n\n\nAdd a previously failing test\n\n', 'Fixed primitive hook badge colors for light theme (#21034)', '[Fizz] Expose maxBoundarySize as an option (#21029)\n\n\nExpose maxBoundarySize as an option\n\n\nAdjust the heuristic\n\n\nRename to progressiveChunkSize\n\n', 'Land enableSyncMicrotasks (#20979)', 'Delete immediateQueueCallbackNode (#20980)\nWe don\'t need this anymore. It only existed so we could cancel the\ncallback later. But canceling isn\'t necessary, was only an\n"optimization" for something that almost never happens in practice.', "Remove unstable_changedBits (#20953)\nWe added this unstable feature a few years ago, as a way to opt out of\ncontext updates, but it didn't prove useful in practice.\nWe have other proposals for how to address the same problem, like\ncontext selectors.\nSince it was prefixed with unstable_, we should be able to remove it\nwithout consequence. The hook API already warned if you used it.\nEven if someone is using it somewhere, it's meant to be an optimization\nonly, so if they are using the API properly, it should not have any\nsemantic impact.", "Use SyncLane for discrete event hydration (#21038)\nDiscrete event hydration doesn't need to be interruptible, since\nthere's nothing higher priority than discrete events. So we can use\nSyncLane instead of a special hydration lane.", 'Replace some flushExpired callsites (#20975)', 'Remove discrete lanes and priorities (#21040)\nWe use SyncLane everywhere we used to use InputDiscreteLane or\nInputDiscreteHydrationLane. So we can delete them now, along with their\nassociated lane priority levels.', "[Fizz] Use identifierPrefix to avoid conflicts within the same response (#21037)\n\nUse identifierPrefix to avoid conflicts within the same response\n\nidentifierPrefix as an option exists to avoid useOpaqueIdentifier conflicting\nwhen different renders are used within one HTML response.\nThis lets this be configured for the DOM renderer specifically since it's DOM\nspecific whether they will conflict across trees or not.\n\nAdd test for using multiple containers in one HTML document\n", 'Fix a broken link', 'React 17.0.2 Changelog (#21052)\n17.0.2 (March 22, 2020)\nReact DOM\n\nRemove an unused dependency to address the SharedArrayBuffer cross-origin isolation warning. (@koba04 and @bvaughn in #20831, #20832, and #20840)\n', 'Remove already completed comment (#21054)', "Oops, it's 2021 already", "[Experiment] Add feature flag for more aggressive memory clean-up of deleted fiber trees (#21039)\n\nAdd feature flag: enableStrongMemoryCleanup\n\nAdd a feature flag that will test doing a recursive clean of an unmount\nnode. This will disconnect the fiber graph making leaks less severe.\n\nDetach sibling pointers in old child list\n\nWhen a fiber is deleted, it's still part of the previous (alternate)\nparent fiber's list of children. Because children are a linked list, an\nearlier sibling that's still alive will be connected to the deleted\nfiber via its alternate:\nlive fiber\n  --alternate--> previous live fiber\n  --sibling--> deleted fiber\nWe can't disconnect alternate on nodes that haven't been deleted\nyet, but we can disconnect the sibling and child pointers.\nWill use this feature flag to test the memory impact.\n\nCombine into single enum flag\n\nI combined enableStrongMemoryCleanup and enableDetachOldChildList\ninto a single enum flag. The flag has three possible values. Each level\nis a superset of the previous one and performs more aggressive clean up.\nWe will use this to compare the memory impact of each level.\n\n\nAdd Flow type to new host config method\n\n\nRe-use existing recursive clean up path\n\n\nWe already have a recursive loop that visits every deleted fiber. We\ncan re-use that one for clean up instead of adding another one.\nCo-authored-by: Andrew Clark git@andrewclark.io", '[Fizz] Expose callbacks in options for when various stages of the content is done (#21056)\n\nReport errors to a global handler\n\nThis allows you to log errors or set things like status codes.\n\n\nAdd complete callback\n\n\nonReadyToStream callback\n\n\nThis is typically not needed because if you want to stream when the\nroot is ready you can just start writing immediately.\n\nRename onComplete -> onCompleteAll\n', 'Move priorities to separate import to break cycle (#21060)\nThe event priority constants exports by the reconciler package are\nmeant to be used by the reconciler (host config) itself. So it doesn\'t\nmake sense to export them from a module that requires them.\nTo break the cycle, we can move them to a separate module and import\nthat. This looks like a "deep import" of an internal module, which we\ntry to avoid, but conceptually these are part of the public interface\nof the reconciler module. So, no different than importing from the main\nreact-reconciler.\nWe do need to be careful about not mixing these types of imports with\nimplementation details. Those are the ones to really avoid.\nAn unintended benefit of the reconciler fork infra is that it makes\ndeep imports harder. Any module that we treat as "public", like this\none, needs to account for the enableNewReconciler flag and forward\nto the correct implementation.', 'Add react-reconciler/constants entry point (#21062)\n\n\nAdd react-reconciler/constants entry point\n\n\nMove root tags to /constants\n\n', 'Fail build on deep requires in npm packages (#21063)', 'react-hooks/exhaustive-deps: Handle optional chained methods as dependency (#20204) (#20247)', 'Make opaque EventPriority type a Lane internally (#21065)\nInstead of LanePriority, we can use a Lane and skip the extra\nconversion. Eventually I want to get rid of LanePriority completely.', 'Don\'t use nested objects to "namespace" namespace constants (#21073)', 'Delete SyncBatchedLane (#21061)\n\n\nDelete SyncBatchedLane\n\n\nGo back to 31 lanes\n\n', 'Add pointerenter/leave priorities (#21077)', "Add separator comment between text nodes (#21099)\nThis is needed to avoid mutating the DOM during hydration. This always\nadds it even when it's just text children.\nWe need to avoid this overhead but it's a somewhat tricky problem to solve\nso we defer the optimization to later.", 'Use EventPriority to track update priority (#21082)\nInstead of LanePriority. Internally, EventPriority is just a lane, so\nthis skips an extra conversion. Since EventPriority is a "public" (to\nthe host config) type, I was also able to remove some deep imports\nof the Lane module.\nThis gets us most of the way to deleting the LanePriority entirely.', "Entangled expired lanes with SyncLane (#21083)\nMakes the implementation simpler. Expiration is now a special case of\nentanglement.\nAlso fixes an issue where expired lanes weren't batched with normal\nsync updates. (See deleted TODO comment in test.)", "Remove LanePriority from getBumpedLaneForHydration (#21086)\nI'm removing all uses of LanePriority so I can delete it.", "Remove LanePriority from computeExpirationTime (#21087)\nI'm removing all uses of LanePriority so I can delete it.", "Use highest priority lane to detect interruptions (#21088)\nInstead of LanePriority.\nI'm removing all uses of LanePriority so I can delete it.", 'Add aspectRatio to the unitless list (#21100)', 'React Fabric: Support passing nativeViewTag to getInspectorDataForViewAtPoint callback, for React DevTools compat (#21080)\nReact Fabric: Support passing nativeViewTag to getInspectorDataForViewAtPoint callback, for React DevTools compat', "[Fizz] Add FormatContext and Refactor Work (#21103)\n\n\nAdd format context\n\n\nLet the Work node hold all working state for the recursive loop\n\n\nStacks are nice and all but there's a cost to maintaining each frame\nboth in terms of stack size usage and writing to it.\n\n\nMove current format context into work\n\n\nSynchronously render children of a Suspense boundary\n\n\nWe don't have to spawn work and snapshot the context. Instead we can try\nto render the boundary immediately in case it works.\n\nLazily create the fallback work\n\nInstead of eagerly create the fallback work and then immediately abort it.\nWe can just avoid creating it if we finish synchronously.", 'Rename SuspendedWork to Task (#21105)', 'Fix plurals (#21106)', 'Use act in fuzz tester to flush expired work (#21108)\n\nAdd failing hard-coded fuzz test\n\nCaught in CI by the fuzz tester.\nRelated to expired updates.\n\nUse act in fuzz tester to flush expired work\n\nExpired work gets scheduled in a microtask now, so we need to use act\nto flush it.', 'Delete enableDiscreteEventFlushingChange (#21110)\nThis flag was meant to avoid flushing discrete updates unnecessarily,\nif multiple discrete events were dispatched in response to the same\nplatform event.\nBut since we now flush all discrete events at the end of the task, in\na microtask, it no longer has any effect.', 'Remove redundant if statement (#21101)', "[Fizz] Support special HTML/SVG/MathML tags to suspend (#21113)\n\nEncode tables as a special insertion mode\n\nThe table modes are special in that its children can't be created outside\na table context so we need the segment container to be wrapped in a table.\n\nMove formatContext from Task to Segment\n\nIt works the same otherwise. It's just that this context needs to outlive\nthe task so that I can use it when writing the segment.\n\nUse template tag for placeholders and inserted dummy nodes with IDs\n\nThese can be used in any parent. At least outside IE11. Not sure yet what\nhappens in IE11 to these.\nNot sure if these are bad for perf since they're special nodes.\n\n\nAdd special wrappers around inserted segments depending on their insertion mode\n\n\nAllow the root namespace to be configured\n\n\nThis allows us to insert the correct wrappers when streaming into an\nexisting non-HTML tree.\n\nAdd comment\n", "Clean up host pointers in level 2 of clean-up flag (#21112)\nThe host tree is a cyclical structure. Leaking a single DOM node can\nretain a large amount of memory. React-managed DOM nodes also point\nback to a fiber tree.\nPerf testing suggests that disconnecting these fields has a big memory\nimpact. That suggests leaks in non-React code but since it's hard to\ncompletely eliminate those, it may still be worth the extra work to\nclear these fields.\nI'm moving this to level 2 to confirm whether this alone is responsible\nfor the memory savings, or if there are other fields that are retaining\nlarge amounts of memory.\nIn our plan for removing the alternate model, DOM nodes would not be\nconnected to fibers, except at the root of the whole tree, which is\neasy to disconnect on deletion. So in that world, we likely won't have\nto do any additional work.", "Use Lane to track root callback priority (#21089)\nInstead of LanePriority.\nI'm removing all uses of LanePriority so I can delete it.", 'Delete LanePriority type (#21090)\nNo longer using LanePriority anywhere, so this deletes the\nremaining references.', "Remove Scheduler indirection (#21107)\n\n\nBump version number\n\n\nRemove Scheduler indirection\n\n\nI originally kept the React PriorityLevel and Scheduler PriorityLevel\ntypes separate in case there was a versioning mismatch between the two\nmodules. However, it looks like we're going to keep the Scheduler module\nprivate in the short to medium term, and longer term the public\ninterface will match postTask. So, I've removed the extra indirection\n(the switch statements that convert between the two types).", "Move sync task queue to its own module (#21109)\nThe sync task queue is React-specific and doesn't really have anything\nto do with Scheduler. We'd keep using it even once postTask exists.\nBy separating that part out, SchedulerWithReactIntegration is now\njust a module that re-exports the Scheduler API. So I unforked it.\nWhen we switch to ES Modules, we can remove this re-exporting module.", 'Fix: flushSync changes priority inside effect (#21122)\nWhen called from inside an effect, flushSync cannot synchronously flush\nits updates because React is already working. So we fire a warning.\nHowever, we should still change the priority of the updates to sync so\nthat they flush at the end of the current task.\nThis only affects useEffect because updates inside useLayoutEffect (and\nthe rest of the commit phase, like ref callbacks) are already sync.', 'Delete dead variable: currentEventWipLanes (#21123)\nNo longer used anywhere.', "Remove redundant setUpdatePriority call (#21127)\nSee removed TODO comment. This call is no longer necessary because we\nuse the dispatcher to track whether we're inside a transition, not the\nevent priority.", 'Move not shared to client (#21135)', "Don't import star from ReactDOM (#21133)", "Remove checkReact (#21132)\nI don't know what this is useful for but I suspect it was only useful at\nFB and is not applicable to ES modules at FB nor elsewhere.", "[Flight] Add global onError handler (#21129)\n\nAdd onError option to Flight Server\n\nThe callback is called any time an error is generated in a server component.\nThis allows it to be logged on a server if needed. It'll still be rethrown\non the client so it can be logged there too but in case it never reaches\nthe client, here's a way to make sure it doesn't get lost.\n\nAdd fatal error handling\n", 'Log all errors to console.error by default (#21130)', "[Fast Refresh] Support callthrough HOCs (#21104)\n\n\n[Fast Refresh] Support callthrough HOCs\n\n\nAdd a newly failing testing to demonstrate the flaw\n\n\nThis shows why my initial approach doesn't make sense.\n\n\nAttach signatures at every nesting level\n\n\nSign nested memo/forwardRef too\n\n\nAdd an IIFE test\n\n\nThis is not a case that is important for Fast Refresh, but we shouldn't change the code semantics. This case shows the transform isn't quite correct. It's wrapping the call at the wrong place.\n\nFind HOCs above more precisely\n\nThis fixes a false positive that was causing an IIFE to be wrapped in the wrong place, which made the wrapping unsafe.\n\n\nBe defensive against non-components being passed to setSignature\n\n\nFix lint\n\n", 'react-refresh@0.10.0', 'Support nesting of startTransition and flushSync (alt) (#21149)\n\n\nSupport nesting of startTransition and flushSync\n\n\nUnset transition before entering any special execution contexts\n\n\nCo-authored-by: Andrew Clark git@andrewclark.io', 'Flush discrete passive effects before paint (#21150)\nIf a discrete render results in passive effects, we should flush them\nsynchronously at the end of the current task so that the result is\nimmediately observable. For example, if a passive effect adds an event\nlistener, the listener will be added before the next input.\nWe don\'t need to do this for effects that don\'t have discrete/sync\npriority, because we assume they are not order-dependent and do not\nneed to be observed by external systems.\nFor legacy mode, we will maintain the existing behavior, since it hasn\'t\nbeen reported as an issue, and we\'d have to do additional work to\ndistinguish "legacy default sync" from "discrete sync" to prevent all\npassive effects from being treated this way.', 'Remove my deadname from AUTHORS (#21152)', "[Fizz] Implement all the DOM attributes and special cases (#21153)\n\n\nImplement DOM format config structure\n\n\nStyles\n\n\nInput warnings\n\n\nTextarea special cases\n\n\nSelect special cases\n\n\nOption special cases\n\n\nWe read the currently selected value from the FormatContext.\n\nWarning for non-lower case HTML\n\nWe don't change to lower case at runtime anymore but keep the warning.\n\nPre tags innerHTML needs to be prefixed\n\nThis is because if you do the equivalent on the client using innerHTML,\nthis is the effect you'd get.\n\nExtract errors\n", "Don't lower case HTML tags in comparison for built-ins (#21155)", "Don't warn for casing if it's a custom element (#21156)\nThis replicates what we do on the client.", 'Ignore function and symbol values on custom-elements on the server (#21157)', 'Don\'t pass internals to callbacks (#21161)\nI noticed that I accidentally pass the request object to public API callbacks\nas "this".', 'Remove redundant initial of hasOwnProperty (#21134)\n\n\nremove redundant initial of hasOwnProperty\n\n\nremove redundant initial of hasOwnProperty part 2\n\n\nremove redundant initial of hasOwnProperty part 3\n\n', 'Remove redundant initial of isArray (#21163)', 'apply prettier (#21165)', 'Revert "apply prettier (#21165)"\nThis reverts commit 94fd1214d2054799485cdcca87a37d956a4240eb.', 'Revert "Remove redundant initial of isArray (#21163)"\nThis reverts commit b130a0f5cd4f29a1c3147f66e10914c42847678a.', "DevTools: useModalDismissSignal bugfix (#21173)\n\nDevTools: useModalDismissSignal bugfix\n\nMake useModalDismissSignal's manually added click/keyboard events more robust to sync flushed passive effects. (Don't let the same click event that shows a modal dialog also dismiss it.)\n\nReplaced event.timeStamp check with setTimeout\n", "[Scheduler] Fix de-opt caused by out-of-bounds access (#21147)\nScheduler's heap implementation sometimes accesses indices that are out\nof bounds (larger than the size of the array). This causes a VM de-opt.\nThis change fixes the de-opt by always checking the index before\naccessing the array. In exchange, we can remove the typecheck on the\nreturned element.\nBackground: https://v8.dev/blog/elements-kinds#avoid-reading-beyond-the-length-of-the-array\nCo-authored-by: Andrew Clark git@andrewclark.io", 'Proposed new Suspense layout effect semantics (#21079)\nThis commit contains a proposed change to layout effect semantics within Suspense subtrees: If a component mounts within a Suspense boundary and is later hidden (because of something else suspending) React will cleanup that component’s layout effects (including React-managed refs).\nThis change will hopefully fix existing bugs that occur because of things like reading layout in a hidden tree and will also enable a point at which to e.g. pause videos and hide user-managed portals. After the suspended boundary resolves, React will setup the component’s layout effects again (including React-managed refs).\nThe scenario described above is not common. The useTransition API should ensure that Suspense does not revert to its fallback state after being mounted.\nNote that these changes are primarily written in terms of the (as of yet internal) Offscreen API as we intend to provide similar effects semantics within recently shown/hidden Offscreen trees in the future. (More to follow.)\n(Note that all changes in this PR are behind a new feature flag, enableSuspenseLayoutEffectSemantics, which is disabled for now.)', 'Update build-for-devtools script to prepare unit tests too (#21182)', "Bumped DevTools Chrome and Firefox versions in Babel config (#21185)\nWe have been building DevTools to target Chrome 49 and Firefox 54. These are super old browser versions and they did not have full ES6 support, so the generated build is more bloated than it needs to be.\nDevTools uses most modern language features. Off the top of my head, we it uses basically everything but async and generator functions.\nBased on CanIUse charts–\xa0I believe that in order to avoid unnecessary polyfill/wrapper code being generated, we'd need to target Chrome 60+ (released 2017-07-25) and Firefox 55+ (released 2017-04-18). This seems like a reasonable set of browsers to target.\nNote that we can't remove the IE 11 target from the react-devtools-core backend yet due to Hermes (React Native) ES6 support but that should be doable by the end of the year given current engineering targets. But we could update the frontend target, as well as the targets for the extensions and the react-devtools-inline package.\nThis commit increases the browser targets then for Chrome (from 49 to 60) and Firefox (from 54 to 55)", "Reland Remove redundant initial of isArray (#21188)\n\n\nRemove redundant initial of isArray (#21163)\n\n\nReapply prettier\n\n\nType the isArray function with refinement support\n\n\nThis ensures that an argument gets refined just like it does if isArray is\nused directly.\nI'm not sure how to express with just a direct reference so I added a\nfunction wrapper and confirmed that this does get inlined properly by\nclosure compiler.\n\n\nA few more\n\n\nRename unit test to internal\n\n\nThis is not testing a bundle.\nCo-authored-by: Behnam Mohammadi itten@live.com", "[Fizz] Prepare Recursive Loop for More Types (#21186)\n\nSplit out into helper functions\n\nThis is similar to the structure of beginWork in Fiber.\n\nSplit the rendering of a node from recursively rendering a node\n\nThis lets us reuse render node at the root which doesn't spawn new work.", 'Offscreen: Use JS stack to track hidden/unhidden subtree state (#21192)', 'Revert "Offscreen: Use JS stack to track hidden/unhidden subtree state" (#21194)\nThis reverts commit 1f8583de8c5e69f27a871a2069dcb5aecac02f40.', "Don't double invoke getDerivedStateFromProps for module pattern (#21193)", 'style: delete unused isHost check (#21203)', 'test: Fix "couldn\'t locate all inline snapshots" (#21205)', 'Include actual type of Profiler#id on type mismatch (#20306)', '[Fizz] Implement Classes (#21200)\n\n\nLegacy context\n\n\nPort Classes from Fiber to Fizz\n\n', "Remove unnecessary processUpdateQueue (#21199)\nWe've just initialized the update queue above this and there's no user\ncode that executes between.\nThe general API that prevents this from mattering is that you can't\ncall setState in the constructor.", 'Offscreen: Use JS stack to track hidden/unhidden subtree state (#21211)', "Fix: Passive effect updates are never sync (#21215)\nI screwed this up in #21082. Got confused by the < versus > thing again.\nThe helper functions are annoying, too, because I always forget the\nintended order of the arguments. But they're still helpful because when\nwe refactor the type we only have the change the logic in one place.\nAdded a regression test.", "DevTools: Add post-commit hook (#21183)\nI recently added UI for the Profiler's commit and post-commit durations to the DevTools, but I made two pretty silly oversights:\n1. I used the commit hook (called after mutation+layout effects) to read both the layout and passive effect durations. This is silly because passive effects may not have flushed yet git at this point.\n2. I didn't reset the values on the HostRoot node, so they accumulated with each commit.\n\nThis commitR addresses both issues:\n\n1. First it adds a new DevTools hook, onPostCommitRoot*, to be called after passive effects get flushed. This gives DevTools the opportunity to read passive effect durations (if the build of React being profiled supports it).\n2. Second the work loop resets these durations (on the HostRoot) after calling the post-commit hook so address the accumulation problem.\nI've also added a unit test to guard against this regressing in the future.\n\n* Doing this in flushPassiveEffectsImpl seemed simplest, since there are so many places we flush passive effects. Is there any potential problem with this though?\n", 'Fix typo in comment (#21214)', 'Track which fibers scheduled the current render work (#15658)\nTracked Fibers are called "updaters" and are exposed to DevTools via a \'memoizedUpdaters\' property on the ReactFiberRoot. The implementation of this feature follows a vaguely similar approach as interaction tracing, but does not require reference counting since there is no subscriptions API.\nThis change is in support of a new DevTools Profiler feature that shows which Fiber(s) scheduled the selected commit in the Profiler.\nAll changes have been gated behind a new feature flag, \'enableUpdaterTracking\', which is enabled for Profiling builds by default. We also only track updaters when DevTools has been detected, to avoid doing unnecessary work.', 'DevTools shows which fibers scheduled the current update (#21171)', 'Remove textarea special case from child fiber (#21222)', 'Prepare DevTools CHANGELOG and versions for 4.11.0 release (#21221)', "Merge isObject branches (#21226)\nWe assume that isArray and getIteratorFn are only called on objects.\nSo we shouldn't have to check that again and again, and then check a flag.\nWe can just stay in this branch.\nThere is a slight semantic breakage here because you could have an\niterator on a function, such as if it's a generator function. But that's\nnot supported and that currently only works at the root. The inner slots\ndon't support this.\nSo this just makes it consistent.", 'Support more empty types (#21225)\nUndefined errors as a direct return value.\nThis changes semantics for "true" and functions to mirror the client.', 'Make time-slicing opt-in (#21072)\n\n\nAdd enableSyncDefaultUpdates feature flag\n\n\nAdd enableSyncDefaultUpdates implementation\n\n\nFix tests\n\n\nSwitch feature flag to true by default\n\n\nFinish concurrent render whenever for non-sync lanes\n\n\nAlso return DefaultLane with eventLane\n\n\nGate interruption test\n\n\nAdd continuout native event test\n\n\nFix tests from rebasing main\n\n\nHardcode lanes, remove added export\n\n\nSync forks\n\n', '[Fizz] Fragments and Iterable support (#21228)', "Bugfix: Don't rely on finishedLanes for passive effects (#21233)\nI recently started using pendingPassiveEffectsLanes to check if there were any pending\npassive effects (530027a). pendingPassiveEffectsLanes is the value of\nroot.finishedLanes at the beginning of the commit phase. When there\nare pending passive effects, it should always be a non-zero value,\nbecause it represents the lanes used to render the effects.\nBut it turns out that root.finishedLanes isn't always correct.\nSometimes it's NoLanes even when there's a new commit.\nI found this while investigating an internal bug report. The only repro\nI could get was via a headless e2e test runner; I couldn't get one in an\nactual browser, or other interactive environment. I used the e2e test to\nbisect and confirm the fix. But I don't know yet know how to write a\nregression test for the precise underlying scenario. I can probably\nreverse engineer one by studying the code; after a quick glance\nat performConcurrentWorkOnRoot and performSyncWorkOnRoot, it's not\nhard to see how this might happen.\nIn the meantime, I'll revert the recent change that exposed the bug.\nI was surprised that this had never come up before, since the code that\nassigns root.finishedLanes is in an extremely hot path, and it hasn't\nchanged in a while. The reason is that, before 530027a,\nroot.finishedLanes was only used by the DevTools profiler, which is\nprobably why we had never noticed any issues. In addition to fixing the\ninconsistency, we might also consider making finishedLanes a\nprofiling-only field.", 'Fixed broken feature flag import for DT inline package (#21237)', "yarn test: Default to bleeding edge configuration (#21238)\nMy personal workflow is to develop against the www-modern release\nchannel, with the variant flags enabled, because it encompasses the\nlargest set of features. Then I rely on CI to run the tests against\nall the other configurations.\nSo in practice, I almost always run\nyarn test -r=www-modern --variant TEST_FILE\ninstead of\nyarn test TEST_FILE\nSo, I've updated the yarn test command to use those options\nby default.", 'Prevent reading canonical property of null (#21242)\n\n\nPrevent reading canonical property of null\n\n\nprettier\n\n', 'Add createBridge and createStore exports to react-devtools-inline (for Replay integration) (#21032)', '[Fizz] Classes Follow Up (#21253)\n\n\nPort Classes from Fiber to Fizz\n\n\nTest\n\n', 'Update code of conduct (#21251)\nWe are updating our code of conduct to include activities outside the project.\nhttps://developers.facebook.com/blog/post/2021/04/12/facebook-open-source-ally/', 'remove obsolete SharedArrayBuffer ESLint config (#21259)', 'Fixed bug in react-detools-inline frontend init method (#21265)', '[Fizz] Implement New Context (#21255)\n\nAdd NewContext module\n\nThis implements a reverse linked list tree containing the previous\ncontexts.\n\nImplement recursive algorithm\n\nThis algorithm pops the contexts back to a shared ancestor on the way down\nthe stack and then pushes new contexts in reverse order up the stack.\n\nMove isPrimaryRenderer to ServerFormatConfig\n\nThis is primarily intended to be used to support renderToString with a\nseparate build than the main one. This allows them to be nested.\n\n\nWire up more element type matchers\n\n\nWire up Context Provider type\n\n\nWire up Context Consumer\n\n\nTest\n\n\nImplement reader in class\n\n\nUpdate error codez\n\n', 'Reconciler should inject its own version into DevTools hook (#21268)', 'DevTools should use reconciler version (rather than renderer version)\nwhen available (#21269)', "[Fizz] Fix reentrancy bug (#21270)\n\n\nFix reentrancy bug\n\n\nFix another reentrancy bug\n\n\nThere's also an issue if we try to schedule something to be client\nrendered if its fallback hasn't rendered yet. So we don't do it\nin that case.", '[Fizz] Implement Hooks (#21257)\n\nImplement Fizz Hooks\n\nThis is pretty much just a copy of the partial renderer Hooks.\n\nImplement forward ref and memo\n', 'Implement useOpaqueIdentifier (#21260)\nThe format of this ID is specific to the format.', '[Fizz] Add unsupported Portal/Scope components (#21261)\n\n\nUpdate Portal error message\n\n\nAdd Scope Component\n\n', "Emit reactroot attribute on the first element we discover (#21154)\nThis may not be the first root element if the root is a fragment and the\nsecond one unsuspends first. But this tag doesn't work well for root\nfragments anyway.", 'Always insert a dummy node with an ID into fallbacks (#21272)', 'Gate a test (#21275)\nRebase error', '[Fizz] Random Fixes (#21277)', 'Fix classes (#21283)', '[Fizz] Two More Fixes (#21288)\n\n\nEmit value of option tags\n\n\nMask the legacy context passed to classes\n\n', 'DevTools error boundary: Search for pre-existing GH issues (#21279)', 'Add dynamic flags to React Native (#21291)\n\n\nAdd dynamic flags to React Native\n\n\nHardcode the setting to false instead\n\n', 'Also turn off enableSyncDefaultUpdates in RN test renderer (#21293)', 'Mark boundary as client rendered even if aborting fallback (#21294)', 'DevTools pre-filter GH issues by repo (#21292)', "DevTools fork console patching logic (#21301)\nReact has its own component stack generation code that DevTools embeds a fork of, but both of them use a shared helper for disabling console logs. This shared helper is DEV only though, because it was intended for use with React DEV-only warnings and we didn't want to unnecessarily add bytes to production builds.\nBut DevTools itself always ships as a production build– even when it's used to debug DEV bundles of product apps (with third party DEV-only warnings). That means this helper was always a noop.\nThe resolveCurrentDispatcher method was changed recently to replace the thrown error with a call to console.error. This newly logged error ended up slipping through and being user visible because of the above issue.\nThis PR updates DevTools to also fork the console patching logic (to remove the DEV-only guard).\nNote that I didn't spot this earlier because my test harness (react-devtools-shell) always runs in DEV mode. 🤡", 'DevTools version bump 4.12.1 -> 4.12.2', 'Fix DevTools test target (#21267)', "Revert expiration for retry lanes (#21300)\nRetries should be allowed to expire if they are CPU bound for too long,\nbut when I made this change it caused a spike in browser crashes. There\nmust be some other underlying bug; not super urgent but ideally should\nfigure out why and fix it. Unfortunately we don't have a repro for the\ncrashes, only detected via production metrics.", 'Update DevTools Error strings to support GitHub fuzzy search (#21314)', 'DevTools version bump 4.12.2 -> 4.12.3', 'Remove LayoutStatic check from commit phase (#21249)', 'Remove @octokit/rest dependency from DevTools (#21317)', 'DevTools version bump 4.12.3 -> 4.12.4', 'Only hide outermost host nodes when Offscreen is hidden (#21250)', 'Turn off enableSyncDefaultUpdates in test renderer (#21319)', "Remove flushDiscreteUpdates from end of event (#21223)\nWe don't need this anymore because we flush in a microtask.\nThis should allow us to remove the logic in the event system that\ntracks nested event dispatches.\nI added a test to confirm that nested event dispatches don't triggger\na synchronous flush, like they would if we wrapped them flushSync. It\nalready passed; I added it to prevent a regression.", "Fix sloppy factoring in performSyncWorkOnRoot (#21246)\n\nWarn if finishedLanes is empty in commit phase\n\nSee #21233 for context.\n\nFix sloppy factoring when assigning finishedLanes\n\nfinishedLanes is assigned in performSyncWorkOnRoot and\nperformSyncWorkOnRoot. It's meant to represent whichever lanes we\nused to render, but because of some sloppy factoring, it can sometimes\nequal NoLanes.\nThe fixes are:\n- Always check if the lanes are not NoLanes before entering the work\nloop. There was a branch where this wasn't always true.\n- In performSyncWorkOnRoot, don't assume the next lanes are sync; the\npriority may have changed, or they may have been flushed by a\nprevious task.\n- Don't re-assign the lanes variable (the one that gets assigned to\nfinishedLanes until right before we enter the work loop, so that it\nis always corresponds to the newest complete root.", 'Flip tuple order of useTransition (#20976)', 'Use performConcurrentWorkOnRoot for "sync default" (#21322)\nInstead of performSyncWorkOnRoot.\nThe conceptual model is that the only difference between sync default\nupdates (in React 18) and concurrent default updates (in a future major\nrelease) is time slicing. All other behavior should be the same\n(i.e. the stuff in finishConcurrentRender).\nGiven this, I think it makes more sense to model the implementation this\nway, too. This exposed a quirk in the previous implementation where\nnon-sync work was sometimes mistaken for sync work and flushed too\nearly. In the new implementation, performSyncWorkOnRoot is only used\nfor truly synchronous renders (i.e. SyncLane), which should make these\nmistakes less common.\nFixes most of the tests marked with TODOs from #21072.', 'Continuous updates should interrupt transitions (#21323)\nEven when updates are sync by default.\nDiscovered this quirk while working on #21322. Previously, when sync\ndefault updates are enabled, continuous updates are treated like\ndefault updates. We implemented this by assigning DefaultLane to\ncontinous updates. However, an unintended consequence of that approach\nis that continuous updates would no longer interrupt transitions,\nbecause default updates are not supposed to interrupt transitions.\nTo fix this, I changed the implementation to always assign separate\nlanes for default and continuous updates. Then I entangle the\nlanes together.', "Fix: Don't flush discrete at end of batchedUpdates (#21229)\nThe outermost batchedUpdates call flushes pending sync updates at the\nend. This was intended for legacy sync mode, but it also happens to\nflush discrete updates in concurrent mode.\nInstead, we should only flush sync updates at the end of\nbatchedUpdates for legacy roots. Discrete sync updates can wait to\nflush in the microtask.\ndiscreteUpdates has the same issue, which is how I originally noticed\nthis, but I'll change that one in a separate commit since it requires\nupdating a few (no longer relevant) internal tests.", "Don't flush sync at end of discreteUpdates (#21327)\nAll it should do is change the priority. The updates will be flushed\nby the microtask.", '[Fizz] Wire up the Fixture (#21273)\n\n\nWire up fizz to fixture\n\n\nFixed typo conditional\n\n', '[Fizz] Add FB specific streaming API and build (#21337)\nAdd FB specific streaming API and build', 'Revert "Emit reactroot attribute on the first element we discover (#21154)" (#21340)\nThis reverts commit 266c26ad45c977ecf67e9359809c37da1489ca63.', "Restore context after an error happens (#21341)\nTypically we don't need to restore the context here because we assume that\nwe'll terminate the rest of the subtree so we don't need the correct\ncontext since we're not rendering any siblings.\nHowever, after a nested suspense boundary we need to restore the context.\nThe boundary could do this but since we're already doing this in the\nsuspense branch of renderNode, we might as well do it in the error case\nwhich isn't very perf sensitive anyway.", "Delete unreferenced type (#21343)\nHad already deleted all the uses but didn't remove the type itself.", 'Expiration: Do nothing except disable time slicing (#21345)\nWe have a feature called "expiration" whose purpose is to prevent\na concurrent update from being starved by higher priority events.\nIf a lane is CPU-bound for too long, we finish the rest of the work\nsynchronously without allowing further interruptions.\nIn the current implementation, we do this in sort of a roundabout way:\nonce a lane is determined to have expired, we entangle it with SyncLane\nand switch to the synchronous work loop.\nThere are a few flaws with the approach. One is that SyncLane has a\nparticular semantic meaning besides its non-yieldiness. For example,\nflushSync will force remaining Sync work to finish; currently, that\nalso includes expired work, which isn\'t an intended behavior, but rather\nan artifact of the implementation.\nAn event worse example is that passive effects triggered by a Sync\nupdate are flushed synchronously, before paint, so that its result\nis guaranteed to be observed by the next discrete event. But expired\nwork has no such requirement: we\'re flushing expired effects before\npaint unnecessarily.\nAside from the behaviorial implications, the current implementation has\nproven to be fragile: more than once, we\'ve accidentally regressed\nperformance due to a subtle change in how expiration is handled.\nThis PR aims to radically simplify how we model starvation protection by\nscaling back the implementation as much as possible. In this new model,\nif a lane is expired, we disable time slicing. That\'s it. We don\'t\nentangle it with SyncLane. The only thing we do is skip the call to\nshouldYield in between each time slice. This is identical to how we\nmodel synchronous-by-default updates in React 18.', 'Use toMatchInlineSnapshot for dehydrated values (#20618)', 'Enable strict effects mode for React Native Facebook builds (#21354)', 'Remove unstable scheduler/tracing API (#20037)', 'Escape style values (#21356)', '[Fizz] Implement lazy components and nodes (#21355)\n\n\nImplement lazy components\n\n\nImplement lazy elements / nodes\n\n\nThis is used by Flight to encode not yet resolved nodes of any kind.', 'Switch the isPrimaryRender flag based on the stream config (#21357)', 'Fix export', 'Update supported devEngines (#21364)', 'Remove unnecessary type cast (#21363)', "Let value override defaultValue if both are specified (#21369)\nThere's a DEV warning for this case but we still test for the production\nbehavior.", 'DevTools console patching should handle Symbols without erroring (#21368)', 'DevTools: Add Bridge protocol version backend/frontend (#21331)\nAdd an explicit Bridge protocol version to the frontend and backend components as well as a check during initialization to ensure that both are compatible. If not, the frontend will display either upgrade or downgrade instructions.\nNote that only the react-devtools-core (React Native) and react-devtools-inline (Code Sandbox) packages implement this check. Browser extensions inject their own backend and so the check is unnecessary. (Arguably the react-devtools-inline check is also unlikely to be necessary but has been added as an extra guard for use cases such as Replay.io.)', 'DevTools supports multiple modal dialogs at once (#21370)', 'Updated DevTools to replace fburl.com link with fb.me link', 'Updated DevTools CHANGELOG for 4.10 releases', 'DevTools should iterate over siblings during mount (#21377)\nPreviously, DevTools recursed over both children and siblings during mount. This caused potential stack overflows when there were a lot of children (e.g. a list containing many items).\nGiven the following example component tree:\n   A\nB  C  D\nE     F\n      G\n\nA method that recurses for every child and sibling leads to a max depth of 6:\nA\nA -> B\nA -> B -> E\nA -> B -> C\nA -> B -> C -> D\nA -> B -> C -> D -> F\nA -> B -> C -> D -> F -> G\n\nThe stack gets deeper as the tree gets either deeper or wider.\nA method that recurses for every child and iterates over siblings leads to a max depth of 4:\nA\nA -> B\nA -> B -> E\nA -> C\nA -> D\nA -> D -> F\nA -> D -> F -> G\n\nThe stack gets deeper as the tree gets deeper but is resilient to wide trees (e.g. lists containing many items).', 'Removed (deleted) tracing fixture test from relesae scripts', 'Preparing DevTools 4.12.4 -> 4.13.0 release (#21378)', 'Revert "Support nesting of startTransition and flushSync (alt) (#21149)"\nThis reverts commit faa1e127f1ba755da846bc6ce299cdefaf97721f.\n\n\nSupport nesting of startTransition and flushSync\n\n\nUnset transition before entering any special execution contexts\n\n\nCo-authored-by: Andrew Clark git@andrewclark.io', 'Revert "Flush discrete passive effects before paint (#21150)"\nThis reverts commit 2e7aceeb5c8b6e5c61174c0e9731e263e956e445.\nIf a discrete render results in passive effects, we should flush them\nsynchronously at the end of the current task so that the result is\nimmediately observable. For example, if a passive effect adds an event\nlistener, the listener will be added before the next input.\nWe don\'t need to do this for effects that don\'t have discrete/sync\npriority, because we assume they are not order-dependent and do not\nneed to be observed by external systems.\nFor legacy mode, we will maintain the existing behavior, since it hasn\'t\nbeen reported as an issue, and we\'d have to do additional work to\ndistinguish "legacy default sync" from "discrete sync" to prevent all\npassive effects from being treated this way.', 'Revert "Fix: flushSync changes priority inside effect (#21122)"\nThis reverts commit 0e3c7e1d62efb6238b69e5295d45b9bd2dcf9181.\nWhen called from inside an effect, flushSync cannot synchronously flush\nits updates because React is already working. So we fire a warning.\nHowever, we should still change the priority of the updates to sync so\nthat they flush at the end of the current task.\nThis only affects useEffect because updates inside useLayoutEffect (and\nthe rest of the commit phase, like ref callbacks) are already sync.', 'Revert "Delete LanePriority type (#21090)"\nThis reverts commit 26ddc63f2dcc8e7dcbacf498237a2bb1e28a7d23.\nNo longer using LanePriority anywhere, so this deletes the\nremaining references.', 'Revert "Clean up host pointers in level 2 of clean-up flag (#21112)"\nThis reverts commit 8ed0c85bf174ce6e501be62d9ccec1889bbdbce1.\nThe host tree is a cyclical structure. Leaking a single DOM node can\nretain a large amount of memory. React-managed DOM nodes also point\nback to a fiber tree.\nPerf testing suggests that disconnecting these fields has a big memory\nimpact. That suggests leaks in non-React code but since it\'s hard to\ncompletely eliminate those, it may still be worth the extra work to\nclear these fields.\nI\'m moving this to level 2 to confirm whether this alone is responsible\nfor the memory savings, or if there are other fields that are retaining\nlarge amounts of memory.\nIn our plan for removing the alternate model, DOM nodes would not be\nconnected to fibers, except at the root of the whole tree, which is\neasy to disconnect on deletion. So in that world, we likely won\'t have\nto do any additional work.', 'Revert "Use highest priority lane to detect interruptions (#21088)"\nThis reverts commit b4044f8a07323bcad7d55cbaedc35c35b4acf7e0.\nInstead of LanePriority.\nI\'m removing all uses of LanePriority so I can delete it.', 'Add unstable_concurrentUpdatesByDefault (#21227)', 'DevTools refactor Profiler commit tree reconstruction to be iterative (#21383)', 'subtreeFlag warning: Fix legacy suspense false positive (#21388)\nLegacy Suspense is weird. We intentionally commit a suspended fiber in\nan inconsistent state. If the fiber suspended before it mounted any\neffects, then the fiber won\'t have a PassiveStatic effect flag, which\nwill trigger the "missing expected subtreeFlag" warning.\nTo avoid the false positive, we\'d need to mark fibers that commit in an\nincomplete state, somehow. For now I\'ll disable the warning in legacy\nmode, with the assumption that most of the bugs that would trigger it\nare either exclusive to concurrent mode or exist in both.', 'Added test fixture for scheduling profiler (#21397)', 'Update time-slicing demo (#21401)', 'Re-land "Use highest priority lane to detect interruptions (#21088)""\nThis re-lands commit b4044f8a07323bcad7d55cbaedc35c35b4acf7e0.', 'Re-land "Clean up host pointers in level 2 of clean-up flag (#21112)"\nThis re-lands commit 8ed0c85bf174ce6e501be62d9ccec1889bbdbce1.', 'Re-land "Delete LanePriority type (#21090)"\nThis re-lands commit 26ddc63f2dcc8e7dcbacf498237a2bb1e28a7d23.', 'Re-land "Fix: flushSync changes priority inside effect (#21122)"\nThis re-lands commit 0e3c7e1d62efb6238b69e5295d45b9bd2dcf9181.', 'Re-land "Flush discrete passive effects before paint (#21150)"\nThis re-lands commit 2e7aceeb5c8b6e5c61174c0e9731e263e956e445.', 'Re-land "Support nesting of startTransition and flushSync (alt) (#21149)"\nThis re-lands commit faa1e127f1ba755da846bc6ce299cdefaf97721f.', 'createRoot API is no longer strict by default (#21417)', 'Improve DevTools bug template text (#21413)', 'Add GitHub API query to bug report template (#21421)\nThis may help debug why sometimes the GitHub API search seems to not find a match when it should.', 'StrictMode includes strict effects by default (#21418)\nRemoved "unstable_level" attribute support for the time being.', 'Allow dangerouslySetInnerHTML in  (#21373)', 'DevTools Store emits errors before throwing (#21426)\nThe Store should never throw an Error without also emitting an event. Otherwise Store errors will be invisible to users, but the downstream errors they cause will be reported as bugs. (For example, github.com/facebook/react/issues/21402)\nEmitting an error event allows the ErrorBoundary to show the original error.\nThrowing is still valuable for local development and for unit testing the Store itself.', 'Unify React.memo and React.forwardRef display name logic (#21392)\nCo-authored-by: iChenLei 2470828450@qq.com', 'Add back root override for strict mode (#21428)\n\n\nAdd back root override for strict mode\n\n\nSwitch flag to boolean\n\n\nFix flow\n\n', 'Fix DevTools bug with Suspense+LegacyHidden component (#21432)', 'Prepare DevTools 4.13.1 release', 'Allow complex objects as children of option only if value is provided (#21431)', 'fix: version in nvmrc (#21430)', "[Fizz] Make some tests more resilient to implementation details (#21438)\n\nMake some tests resilient against changing the specifics of the HTML\n\nThis ensures that for example flipping order of attributes doesn't matter.\n\nUse getVisibleChildren approach for more resilient tests\n", 'Convert emulated-Fizz PartialHydration tests to Fizz tests (#21437)', 'Enable setJSResponder/setIsJSResponder for React Native Fabric (#21439)\n\n\nEnable setJSResponder/setIsJSResponder for React Native\n\n\nyarn prettier\n\n\nadd types to react-native-host-hooks\n\n\nyarn prettier\n\n\nmock setIsJSResponder\n\n', 'Renamed function in error log issue #21446 (#21449)', 'Added new GitHub issue form for React DevTools bug reports (#21450)\nAdded a new bug report template built with GitHub issue forms:\nhttps://gh-community.github.io/issue-template-feedback/structured/\nAnd updated DevTools bug report link to send information formatted for this new template.', 'Update devtools_bug_report.yml', 'DevTools 4.13.1 -> 4.13.2', 'Updated release scripts to work around GitHub / Circle CI integration problems (#21434)', 'Update devtools_bug_report.yml\nTweaked label to include emoji characters.', 'Update devtools_bug_report.yml', '[React Native] Set allowConcurrentByDefault = true (#21491)', 'Update entry point exports (#21488)\nThe following APIs have been added to the react stable entry point:\n* SuspenseList\n* startTransition\n* unstable_createMutableSource\n* unstable_useMutableSource\n* useDeferredValue\n* useTransition\nThe following APIs have been added or removed from the react-dom stable entry point:\n* createRoot\n* unstable_createPortal (removed)\nThe following APIs have been added to the react-is stable entry point:\n* SuspenseList\n* isSuspenseList\nThe following feature flags have been changed from experimental to true:\n* enableLazyElements\n* enableSelectiveHydration\n* enableSuspenseServerRenderer', 'lint-build: Infer format from artifact filename (#21489)\nUses the layout of the build artifact directory to infer the format\nof a given file, and which lint rules to apply.\nThis has the effect of decoupling the lint build job from the existing\nRollup script, so that if we ever add additional post-processing, or\nif we replace Rollup, it will still work.\nBut the immediate motivation is to replace the separate "stable" and\n"experimental" lint-build jobs with a single combined job.', '[Bugfix] Prevent already-committed setState callback from firing again during a rebase (#21498)\n\nFailing test: Class callback fired multiple times\n\nHappens during a rebase (low priority update followed by high priority\nupdate). The high priority callback gets fired twice.\n\nPrevent setState callback firing during rebase\n\nBefore enqueueing the effect, adds a guard to check if the update was\nalready committed.', "Remove data-reactroot from server rendering and hydration heuristic (#20996)\nThis was used to implicitly hydrate if you call ReactDOM.render.\nWe've had a warning to explicitly use ReactDOM.hydrate(...) instead of\nReactDOM.render(...). We can now remove this from the generated markup.\n(And avoid adding it to Fizz.)\nThis is a little strange to do now since we're trying hard to make the\nroot API work the same.\nBut if we kept it, we'd need to keep it in the generated output which adds\nunnecessary bytes. It also risks people relying on it, in the Fizz world\nwhere as this is an opportunity to create that clean state.\nWe could possibly only keep it in the old server rendering APIs but then\nthat creates an implicit dependency between which server API and which\nclient API that you use. Currently you can really mix and match either way.", 'DevTools: Fixed version range NPM syntax', 'Tweaked DevTools error template title to match issue form template', "Clean up Scheduler forks (#20915)\n\n\nClean up Scheduler forks\n\n\nUn-shadow variables\n\n\nUse timer globals directly, add a test for overrides\n\n\nRemove more window references\n\n\nDon't crash for undefined globals + tests\n\n\nUpdate lint config globals\n\n\nFix test by using async act\n\n\nAdd test fixture\n\n\nDelete test fixture\n\n", 'Make StrictMode double rendering flag static for FB/www (#21517)', 'Errors thrown by Store can be dismissed in boundary (#21520)', 'DevTools: Reload all roots after Fast Refresh force remount (#21516)\nWorks around the corrupted Store state by detecting a broken Fast Refresh remount and forcefully dropping the root and re-mounting the entire tree. This prevents Fibers from getting duplicated in the Store (and in the Components tree). The benefit of this approach is that it doesn\'t rely on an update or change in behavior to Fast Refresh. (This workaround is pretty dirty, but since it\'s a DEV-only code path, it\'s probably okay.)\nNote that this change doesn\'t fix all of the reported issues (see #21442 (comment)) but it does fix some of them.\nThis commit also slightly refactors the way DevTools assigns and manages unique IDs for Fibers in the backend by removing the indirection of a "primary Fiber" and instead mapping both the primary and alternate.\nIt also removes the previous cache-on-read behavior of getFiberID and splits the method into three separate functions for different use cases:\n* getOrGenerateFiberID – Like the previous function, this method returns an ID or generates and caches a new one if the Fiber hasn\'t been seen before.\n* getFiberIDUnsafe – This function returns an ID if one has already been generated or null if not. (It can be used to e.g. log a message about a Fiber without potentially causing it to leak.)\n* getFiberIDThrows – This function returns an ID if one has already been generated or it throws. (It can be used to guarantee expected behavior rather than to silently cause a leak.)', 'Fixed another Symbol concatenation issue with DevTools format() util (#21521)', 'Preparing DevTools 4.13.2 -> 4.13.3 for release', 'Added React entry-points change to DevTools changelog', 'DevTools bugfix for useState() with hasOwnProperty key (#21524)', "Account for another DevTools + Fast Refresh edge case (#21523)\nDevTools now 'untrack' Fibers (cleans up the ID-to-Fiber mapping) after a slight delay in order to support a Fast Refresh edge case:\n1. Component type is updated and Fast Refresh schedules an update+remount.\n2. flushPendingErrorsAndWarningsAfterDelay() runs, sees the old Fiber is no longer mounted (it's been disconnected by Fast Refresh), and calls untrackFiberID() to clear it from the Map.\n3. React flushes pending passive effects before it runs the next render, which logs an error or warning, which causes a new ID to be generated for this Fiber.\n4. DevTools now tries to unmount the old Component with the new ID.\nThe underlying problem here is the premature clearing of the Fiber ID, but DevTools has no way to detect that a given Fiber has been scheduled for Fast Refresh. (The '_debugNeedsRemount' flag won't necessarily be set.)\nThe best we can do is to delay untracking by a small amount, and give React time to process the Fast Refresh delay.", 'Updated DevTools CHANGELOG for 4.13.3 release', 'Improve error boundary in inspected elements panel (#21531)\nShow more info about the error as well as the option to report it to GitHub.', 'Add key to inspected-element error boundary (#21535)\nThis way changing the selected element also recreates/resets the boundary automatically.', "Fix edge-case Fast Refresh bug that caused Fibers with warnings/errors to be untracked prematurely (#21536)\nRefactor error/warning count tracking to avoid pre-allocating an ID for Fibers that aren't yet mounted. Instead, we store a temporary reference to the Fiber itself and later check to see if it successfully mounted before merging pending error/warning counts.\nThis avoids a problematic edge case where a force-remounted Fiber (from Fast Refresh) caused us to untrack a Fiber that was still mounted, resulting in a DevTools error if that Fiber was inspected in the Components tab.", 'DevTools 4.13.3 -> 4.13.4', 'Update devtools_bug_report.yml', 'Update devtools_bug_report.yml', 'DevTools: Revert force deep re-mount when Fast Refresh detected (#21539)\nThis reverts the most expensive part of 1e3383a41 (which seems to no longer be necessary after subsequent changes).', 'DevTools: Add 4.10.4 to CHANGELOG', 'DevTools: Add 4.13.4 changelog', 'Add GitHub action to check for bug repro (#21542)', 'Add flag concurrent root to Fabric render function (#21552)\n\n\nAdd flag concurrent root to Fabric render function\n\n\nLint\n\n', 'Turn on enableSyncDefaultUpdates everywhere (#21548)', 'DevTools: Support an element mounting before its owner (#21562)', 'DevTools 4.13.4 -> 4.13.5', 'Enabled Profiling feature flags for OSS release (#21565)\n\nEnabled Profiling feature flags for OSS release\n\nenableProfilerCommitHooks and enableProfilerNestedUpdatePhase', 'Enable the updater-tracking feature flag in more builds (#21567)', 'Fixed localhost URL check\nNoticed that it missed 21568 because of a leading "/"', 'Removed _debugID field from Fiber - Issue #21558 (#21570)\n\nRemoved _debugID field from Fiber\nUpdate ReactFunctionComponent-test.js\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Updated DevTools bug Workflow\nWorkflow now auto-assigns issues needing more information to the person who reported them', 'Update jest to v26 (#21574)\n\n\nInstall jest 26\n\n\njsdom env now uses 16 by default\n\n\nrequire.requireActual -> jest.requireActual\n\n\ndeduplicate added deps\n\n', 'DevTools: Format error message (#21580)\nTo support GitHub API fuzzy issue search', 'Disable strict effects for legacy roots (again) (#21591)', 'Fix Fizz exported types (#21596)', 'Define global WWW = true flag during www tests (#21504)\n\nDefine global WWW = true flag during www tests\n\nWe already do that for PERSISTENT.\n\nUse @gate www in ReactSuspenseCallback\n\nThis allows it to not be internal anymore. We test it against the www build.', 'OSS feature flag updates (#21597)\nCo-authored-by: Dan Abramov dan.abramov@me.com', "[Offscreen] Mount/unmount layout effects (#21386)\n\n[Offscreen] Mount/unmount layout effects\n\nExposes the Offscreen component type and implements basic support for\nmount/unmounting layout effects when the visibility is toggled.\nMostly it works the same way as hidden Suspense trees, which use the\nsame internal fiber type. I had to add an extra bailout, though, that\ndoesn't apply to the Suspense case but does apply to Offscreen\ncomponents: a hidden Offscreen tree will eventually render at low\npriority, and when we it does, its subtreeTag will have effects\nscheduled on it. So I added a check to the layout phase where, if the\nsubtree is hidden, we skip over the subtree entirely. An alternate\ndesign would be to clear the subtree flags in the render phase, but I\nprefer doing it this way since it's harder to mess up.\nWe also need an API to enable the same thing for passive effects. This\nis not yet implemented.\n\nAdd test starting from hidden\n\nCo-authored-by: Rick Hanlon rickhanlonii@gmail.com", 'Expose Fizz in stable builds (#21602)', 'Delete an unused field (#21415)', "Disable deferRenderPhaseUpdateToNextBatch by default (#21605)\nWe're still experimenting with this and it causes a breaking behavior\nfor setState in componentWillMount/componentWillReceiveProps atm.", 'Convert ES6/TypeScript/CoffeeScript Tests to createRoot + act (#21598)\n\n\nConvert ES6/TypeScript CoffeeScript Tests to createRoot + act\n\n\nChange expectation for WWW+VARIANT because the deferRenderPhaseUpdateToNextBatch flag breaks this behavior\n\n', "Resolve the true entry point during tests (#21505)\n\nResolve the entry point for tests the same way builds do\n\nThis way the source tests, test the same entry point configuration.\n\nGate test selectors on www\n\nThese are currently only exposed in www builds\n\nGate createEventHandle / useFocus on www\n\nThese are enabled in both www variants but not OSS experimental.\n\nTemporarily disable www-modern entry point\n\nUse the main one that has all the exports until we fix more tests.\n\n\nRemove enableCache override that's no longer correct\n\n\nOpen gates for www\n\n\nThese used to not be covered because they used Cache which wasn't exposed.", 'Add single source of truth for package versions (#21608)\nThe versioning scheme for @next releases does not include semver\ninformation. Like @experimental, the versions are based only on the\nhash, i.e. 0.0.0-<commit_sha>. The reason we do this is to prevent\nthe use of a tilde (~) or caret (^) to match a range of\nprerelease versions.\nFor @experimental, I think this rationale still makes sense — those\nreleases are very unstable, with frequent breaking changes. But @next\nis not as volatile. It represents the next stable release. So, I think\nwe can afford to include an actual verison number at the beginning of\nthe string instead of 0.0.0.\nWe can also add a label that indicates readiness of the upcoming\nrelease, like "alpha", "beta", "rc", etc.\nTo prepare for this the new versioning scheme, I updated the build\nscript. However, this PR does not enable the new versioning scheme\nyet. I left a TODO above the line that we\'ll change once we\'re ready.\nWe need to specify the expected next version numbers for each package,\nsomewhere. These aren\'t encoded anywhere today — we don\'t specify\nversion numbers until right before publishing to @latest, using an\ninteractive script: prepare-release-from-npm.\nInstead, what we can do is track these version numbers in a module. I\nadded ReactVersions.js that acts as the single source of truth for\nevery package\'s version. The build script uses this module to build the\n@next packages.\nIn the future, I want to start building the @latest packages the same\nway we do @next and @experimental. (What we do now is download a\n@next release from npm and swap out its version numbers.) Then we\ncould run automated tests in CI to confirm the packages are releasable,\ninstead of waiting to verify that right before publish.', 'Fix reference to wrong variable\nFollow-up to #21608', 'Fix  check of defaultValue/value type (#21611)', 'Devtools: add feature to trigger an error boundary (#21583)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Use ReactVersions module as package allowlist (#21613)\nInstead of keeping a separate allowlist in sync, we use ReactVersions.js\nas the source of truth for which packages get published.', "Prepare semver (@latest) releases in CI (#21615)\nNow that we track package versions in source, @latest builds should\nbe fully reproducible for a given commit. We can prepare the packages in\nCI and store them as artifacts, the same way we do for @next and\n@experimental.\nEventually this can replace the interactive script that we currently\nuse to swap out the version numbers.\nThe other nice thing about this approach is that we can run tests in CI\nto verify that the packages are releasable, instead of waiting until\nright before publish.\nI named the output directory oss-stable-semver, to distinguish from\nthe @next prereleases that are located at oss-stable. I don't love\nthis naming. I'd prefer to use the name of the corresponding npm dist\ntag. I'll do that in a follow-up, though, since the oss-stable name is\nreferenced in a handful of places.\nCurrent naming (after this PR):\n\noss-experimental → @experimental\noss-stable → @next\noss-stable-semver → @latest\n\nProposed naming (not yet implemented, requires more work):\n\noss-experimental → @experimental\noss-next → @next\noss-latest → @latest\n", "Support @latest in prepare-release-from-ci (#21616)\nSince we track these versions in source, we can build @latest\nreleases in CI and store them as artifacts.\nThen when it's time to release, and the build has been verified, we use\nprepare-release-from-ci (the same script we use for @next and\n@experimental) to fetch the already built and versioned packages.", 'Make enableSuspenseLayoutEffectSemantics static for www (#21617)\nThis has been ramped up to 80% GK so the next step is to just turn it on for 100%', "[Fizz] Implement Component Stacks in DEV for warnings (#21610)\n\nImplement component stacks\n\nThis uses a reverse linked list in DEV-only to keep track of where we're\ncurrently executing.\n\nFix bug that wasn't picking up the right stack at suspended boundaries\n\nThis makes it more explicit which stack we pass in to be retained by the\ntask.", '[Fizz] Minor Fixes for Warning Parity (#21618)', 'Fix typo in bridge.js (#21621)', '[Fizz] Always call flush() if it exists (#21625)', '[Fizz] Add another fixture (#21627)', 'Tweak fixture', 'Fix CSS', 'fix comments: expiration time -> lanes (#21551)', 'Fix typo in comment (satsify → satisfy) (#21629)', 'Fix typo in comment (environement → environment) (#21635)', 'Fix typo in comment (accumlated → accumulated) (#21637)\nCo-authored-by: HuJiajie hujj@firstgrid.cn', "Fix Issue with Undefined Lazy Imports By Refactoring Lazy Initialization Order (#21642)\n\n\nAdd a DEV warning for common case\n\n\nDon't set Pending flag before we know it's a promise\n\n\nMove default exports extraction to render phase\n\n\nThis is really where most unwrapping happen. The resolved promise is the\nmodule object and then we read things from it.\nThis way it lines up a bit closer with the Promise model too since the\npromise resolving to React gets passed this same value.\nIf this throws, then it throws during render so it's caught properly and\nyou can break on it and even see it on the right stack.\n\nCheck if the default is in the module object instead of if it's undefined\n\nNormally we'd just check if something is undefined but in this case it's\nvalid to have an undefined value in the export but if you don't have a\nproperty then you're probably importing the wrong kind of object.\n\nWe need to check if it's uninitialized for sync resolution\n\nCo-authored-by: Dan Abramov dan.abramov@me.com", 'Update next React version (#21647)\nThis does not mean that a release of 18.0 is imminent, only that the\nmain branch includes breaking changes.\nAlso updates the versioning scheme of the @next channel to include\nthe upcoming semver number, as well as the word "alpha" to indicate the\nstability of the release.\n\nBefore:       0.0.0-e0d9b28999\nAfter:        18.0.0-alpha-e0d9b28999\n', 'Allow alpha tags', 'Remove space from tag arguments', 'Fix tag validation', '[React Native] Fabric get current event priority (#21553)\n\nCall into Fabric to get current event priority\n\nFix flow errors\n\n\nPrettier\n\n\nBetter handle null and undefined cases\n\n\nRemove optional chaining and use ?? operator\n\n\nprettier-all\n\n\nUse conditional ternary operator\n\n\nprettier\n\n', "Deprecate ReactDOM.render and ReactDOM.hydrate (#21652)\n\nUse existing test warning filter for server tests\n\nWe have a warning filter for our internal tests to ignore warnings\nthat are too noisy or that we haven't removed from our test suite yet:\nshouldIgnoreConsoleError.\nMany of our server rendering tests don't use this filter, though,\nbecause it has its own special of asserting warnings.\nSo I added the warning filter to the server tests, too.\n\nDeprecate ReactDOM.render and ReactDOM.hydrate\n\nThese are no longer supported in React 18. They are replaced by the\ncreateRoot API.\nThe warning includes a link to documentation of the new API. Currently\nit redirects to the corresponding working group post. Here's the PR to\nset up the redirect: https://github.com/reactjs/reactjs.org/pull/3730\nMany of our tests still use ReactDOM.render. We will need to gradually\nmigrate them over to createRoot.\nIn the meantime, I added the warnings to our internal warning filter.", 'Add concurrentRoot property to ReactNativeTypes (#21648)\n\n\nAdd concurrentRoot property to ReactNativeTypes\n\n\nAdd concurrentRoot to ReactNativeType\n\n\nUse ReactFabricType instead of ReactNativeType\n\n', 'Revert "Make enableSuspenseLayoutEffectSemantics static for www (#21617)" (#21656)\nThis reverts commit 39f00748922cf40e06cd08d0c81f8b28fc8503fa.', 'Export React Native AttributeType Types (#21661)', 'DevTools can inspect Proxies that return broken iterator functions (#21660)', 'Added React 18 issue template', 'Update react_18.md', 'Update react_18.md', 'Update react_18.md', 'Update react_18.md', 'Wrap eventhandle-specific logic in a flag (#21657)', 'Set deletedTreeCleanUpLevel to 3 (#21679)', "[Fizz] Implement Legacy renderToString and renderToNodeStream on top of Fizz (#21276)\n\n\nWire up DOM legacy build\n\n\nHack to filter extra comments for testing purposes\n\n\nUse string concat in renderToString\n\n\nI think this might be faster. We could probably use a combination of this\ntechnique in the stream too to lower the overhead.\n\nError if we can't complete the root synchronously\n\nMaybe this should always error but in the async forms we can just delay\nthe stream until it resolves so it does have some useful semantics.\nIn the synchronous form it's never useful though. I'm mostly adding the\nerror because we're testing this behavior for renderToString specifically.\n\nGate memory leak tests of internals\n\nThese tests don't translate as is to the new implementation and have been\nported to the Fizz tests separately.\n\n\nEnable Fizz legacy mode in stable\n\n\nAdd wrapper around the ServerFormatConfig for legacy mode\n\n\nThis ensures that we can inject custom overrides without negatively\naffecting the new implementation.\nThis adds another field for static mark up for example.\n\n\nWrap pushTextInstance to avoid emitting comments for text in static markup\n\n\nDon't emit static mark up for completed suspense boundaries\n\n\nCompleted and client rendered boundaries are only marked for the client\nto take over.\nPending boundaries are still supported in case you stream non-hydratable\nmark up.\n\n\nWire up generateStaticMarkup to static API entry points\n\n\nMark as renderer for stable\n\n\nThis shouldn't affect the FB one ideally but it's done with the same build\nso let's hope this works.", 'Remove invokeGuardedCallback from commit phase (#21666)\n\n\nRemove invokeGuardedCallback from commit phase\n\n\nSync fork\n\n', "Add a DOCTYPE to the stream if the  tag is rendered (#21680)\nThis makes it a lot easier to render the whole document using React without\nneeding to patch into the stream.\nWe expect that currently people will still have to patch into the stream\nto do advanced things but eventually the goal is that you shouldn't\nneed to.", "[Fizz/Flight] Don't use default args (#21681)\n\n\nDon't use default args\n\n\nHoist out creation for better inlining\n\n\nThe closures prevent inlining otherwise.", "Clean up partial renderer entry points (#21682)\n\nClean up partial renderer entry points\n\nI made a mistake by leaving server.browser.stable in which is the partial\nrenderer for the browser build of stable. That should use the legacy fizz\none.\nSince the only usage of the partial renderer now is at FB and we don't use\nit with Node, I removed the Node build of partial renderer too.\n\nRemove GC test\n\nNo code is running this path anymore. Ideally this should be ported to\na Fizz form.", "Use the server src files as entry points for the builds/tests (#21683)\n\nUse the server src files as entry points for the builds/tests\n\nWe need one top level entry point to target two builds so we can't have\nthe top level one be the entry point for the builds.\n\nSame thing but with the modern entry point\n", 'Merge /unstable-fizz entry point into /server (#21684)', "createRoot(..., {hydrate:true}) -> hydrateRoot(...) (#21687)\nThis adds a new top level API for hydrating a root. It takes the initial\nchildren as part of its constructor. These are unlike other render calls\nin that they have to represent what the server sent and they can't be\nbatched with other updates.\nI also changed the options to move the hydrationOptions to the top level\nsince now these options are all hydration options.\nI kept the createRoot one just temporarily to make it easier to codemod\ninternally but I'm doing a follow up to delete.\nAs part of this I un-dried a couple of paths. ReactDOMLegacy was intended\nto be built on top of the new API but it didn't actually use those root\nAPIs because there are special paths. It also doesn't actually use most of\nthe commmon paths since all the options are ignored. It also made it hard\nto add only warnings for legacy only or new only code paths.\nI also forked the create/hydrate paths because they're subtly different\nsince now the options are different. The containers are also different\nbecause I now error for comment nodes during hydration which just doesn't\nwork at all but eventually we'll error for all createRoot calls.\nAfter some iteration it might make sense to break out some common paths but\nfor now it's easier to iterate on the duplicates.", '[SSR2 Fixture] Update APIs (#21688)', 'Use npm lockfile for fixture', 'Remove unused variable', 'Add missing package lock', 'Fix fixture lockfile manually', 'Throw when act is used in production (#21686)\nUpgrades the deprecation warning to a runtime error.\nI did it this way instead of removing the export so the type is the same\nin both builds. It will get dead code eliminated regardless.', 'Fix for failed Suspense layout semantics (#21694)\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'Fix failing test (#21697)', 'Remove unstable_createRoot from internal builds (#21698)\nThese callsites were already removed as far as I can tell.', "Delete test-utils implementation of act (#21703)\n\nDelete test-utils implementation of act\n\nSince it's dev-only now, we can use the one provided by the reconciler.\n\nMove act related stuff out of EventInternals\n", 'act should work without mock Scheduler (#21714)\nCurrently, in a React 18 root, act only works if you mock the\nScheduler package. This was because we didn\'t want to add additional\nchecks at runtime.\nBut now that the act testing API is dev-only, we can simplify its\nimplementation.\nNow when an update is wrapped with act, React will bypass Scheduler\nentirely and push its tasks onto a special internal queue. Then, when\nthe outermost act scope exists, we\'ll flush that queue.\nI also removed the "wrong act" warning, because the plan is to move\nact to an isomorphic entry point, simlar to startTransition. That\'s\nnot directly related to this PR, but I didn\'t want to bother\nre-implementing that warning only to immediately remove it.\nI\'ll add the isomorphic API in a follow up.\nNote that the internal version of act that we use in our own tests\nstill depends on mocking the Scheduler package, because it needs to work\nin production. I\'m planning to move that implementation to a shared\n(internal) module, too.', "Remove internal act builds from public modules (#21721)\n\nMove internal version of act to shared module\n\nNo reason to have three different copies of this anymore.\nI've left the the renderer-specific act entry points because legacy\nmode tests need to also be wrapped in batchedUpdates. Next, I'll update\nthe tests to use batchedUpdates manually when needed.\n\nMigrates tests to use internal module directly\n\nInstead of the unstable_concurrentAct exports. Now we can drop those\nfrom the public builds.\nI put it in the jest-react package since that's where we put our other\ntesting utilities (like toFlushAndYield). Not so much so it can be\nconsumed publicly (nobody uses that package except us), but so it works\nwith our build tests.\n\nRemove unused internal fields\n\nThese were used by the old act implementation. No longer needed.", 'Next/experimental release versions include commit date (#21700)\nChange format of @next and @experimental release versions from - to -- to make them more human readable. This format still preserves the ability for us to easily map a version number to the changes it contains, while also being able to more easily know at a glance how recent a release is.', 'Add tests for invokeGuardedCallback (#21734)\n\n\nAdd tests for invokeGuardedCallback\n\n\nAdd skipped failing tests\n\n\nCheck next render works\n\n\nMirror tests for createRoot\n\n\nMove comments around\n\n', 'Pass Jest useStderr flag when debugging (#21741)\nThis prevents it from buffering adn suppressing all console logs until a test has completed running (When debugging in Chrome).', 'act: Bypass microtask for "default sync" updates (#21740)\nWhen wrapping an update in act, instead of scheduling a microtask,\nwe can add the task to our internal queue.\nThe benefit is that the user doesn\'t have to await the act call. We can\nflush the work synchronously. This doesn\'t account for microtasks that\nare scheduled in userspace, of course, but it at least covers\nReact\'s usage.', "Log and show error overlay for commit phase errors (#21723)\n\n\nEnable skipped tests from #21723\n\n\nReport uncaught errors in DEV\n\n\nClear caught error\n\n\nThis is not necessary (as proven by tests) because next invokeGuardedCallback clears it anyway. But I'll keep it for consistency with other calls.", 'DevTools: Fix Settings dialog scroll/size bug in Firefox (#21747)', 'Always keep disabled logs in the second pass (#21739)\n\n\nAdd tests for disabled logs\n\n\nAlways keep disabled logs in the second pass\n\n\nJest nit\n\n\nAlways use the second result\n\n', 'Move error logging to update callback (#21737)\n\nMove error logging to update callback\n\nThis prevents double logging for gDSFE boundaries with createRoot.\n\nAdd an explanation for the rest of duplicates\n', 'DevTools: Update tests to fix warnings/errors (#21748)\nSome new ones had slipped in (e.g. deprecated ReactDOM.render message from 18)', 'act: Add test for bypassing queueMicrotask (#21743)\nTest for fix added in #21740', "act: Resolve to return value of scope function (#21759)\nWhen migrating some internal tests I found it annoying that I couldn't\nreturn anything from the act scope. You would have to declare the\nvariable on the outside then assign to it. But this doesn't play well\nwith type systems — when you use the variable, you have to check\nthe type.\nBefore:\n```js\nlet renderer;\nact(() => {\n  renderer = ReactTestRenderer.create();\n})\n// Type system can't tell that renderer is never undefined\nrenderer?.root.findByType(Component);\n```\nAfter:\njs\nconst renderer = await act(() => {\n  return ReactTestRenderer.create(<App />);\n})\nrenderer.root.findByType(Component);", 'Updated scripts and config to replace "master" with "main" branch (#21768)', 'Bump ecstatic from 2.2.1 to 2.2.2 in /scripts/bench (#20468)\nBumps ecstatic from 2.2.1 to 2.2.2.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'Bump ws from 6.1.2 to 6.2.2 in /scripts/release (#21628)\nBumps ws from 6.1.2 to 6.2.2.\n- Release notes\n- Commits\n\nupdated-dependencies:\n- dependency-name: ws\n  dependency-type: indirect\n...\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'chore: Ignore build2/ when linting (#21204)', 'fix: maxYieldInterval should not compare with currentTime directly in Scheduler-shouldYieldToHost', 'Simplify discreteUpdates (#21773)\nNow that discrete updates are flushed synchronously in a microtask,\nthe discreteUpdates method used by our event system is only a\noptimization to save us from having to check window.event.type on\nevery update. So we should be able to remove the extra logic.\nAssuming this lands successfully, we can remove batchedEventUpdates\nand probably inline discreteUpdates into the renderer, like we do\nfor continuous updates.', 'Delete batchedEventUpdates (#21774)\nNo longer used anywhere.', 'Install nested packages from Yarn cache before running build tests (#21779)', 'ReactDebugHooks optionally includes fileName, and line/column numbers (#21781)', 'DevTools: Show hook names based on variable usage (#21641)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com\nCo-authored-by: Saphal Patro saphal1998@gmail.com\nCo-authored-by: VibhorCodecianGupta vibhordelgupta@gmail.com', "Replace flushDiscreteUpdates with flushSync (#21775)\n\nReplace flushDiscreteUpdates with flushSync\n\nflushDiscreteUpdates is almost the same as flushSync. It forces passive\neffects to fire, because of an outdated heuristic, which isn't ideal but\nnot that important.\nBesides that, the only remaining difference between flushDiscreteUpdates\nand flushSync is that flushDiscreteUpdates does not warn if you call it\nfrom inside an effect/lifecycle. This is because it might get triggered\nby a nested event dispatch, like el.focus().\nSo I added a new method, flushSyncWithWarningIfAlreadyRendering, which\nis used for the public flushSync API. It includes the warning. And I\nremoved the warning from flushSync, so the event system can call that\none. In production, flushSyncWithWarningIfAlreadyRendering gets inlined\nto flushSync, so the behavior is identical.\nAnother way of thinking about this PR is that I renamed flushSync to\nflushSyncWithWarningIfAlreadyRendering and flushDiscreteUpdates to\nflushSync (and fixed the passive effects thing). The point is to prevent\nthese from subtly diverging in the future.\n\nInvert so the one with the warning is the default one\n\nTo make Seb happy", "Replace unbatchedUpdates with flushSync (#21776)\nThere's a weird quirk leftover from the old Stack (pre-Fiber)\nimplementation where the initial mount of a leagcy (ReactDOM.render)\nroot is flushed synchronously even inside batchedUpdates.\nThe original workaround for this was an internal method called\nunbatchedUpdates. We've since added another API that works almost the\nsame way, flushSync.\nThe only difference is that unbatchedUpdates would not cause other\npending updates to flush too, only the newly mounted root. flushSync\nflushes all pending sync work across all roots. This was to preserve\nthe exact behavior of the Stack implementation.\nBut since it's close enough, let's just use flushSync. It's unlikely\nanyone's app accidentally relies on this subtle difference, and the\nlegacy API is deprecated in 18, anyway.", "[WIP] DevTools: Support named hooks for >1 module in a bundle (#21790)\n\n\nAdd named hooks test case built with Rollup\n\n\nFix prepareStackTrace unpatching, remove sourceURL\n\n\nPrettier\n\n\nResolve source map URL/path relative to the script\n\n\nAdd failing tests for multi-module bundle\n\n\nParse hook names from multiple modules in a bundle\n\n\nCreate a HookSourceData per location key (file, line, column).\n\nCache the source map per runtime URL ( = file part of location key).\nDon't store sourceMapContents - only store a consumer instance.\nLook up original source URLs in the source map correctly.\nCache the code + AST per original URL.\nFix off-by-one column number lookup.\nSome naming and typing tweaks related to the above.\n\nStop storing the consumer outside the with() callback, which is a bug.\n\n\nLint fix for 8d8dd25\n\n\nAdded devDependencies to react-devtools-extensions package.json\n\n\nAdded some debug logging and TODO comments\n\n\nAdded additional DEBUG logging to hook names cache\n\n\nCo-authored-by: Brian Vaughn bvaughn@fb.com", "DevTooks: Don't dehydrate hook source fileNames (#21814)", 'DevTools named hooks: Support FLow syntax (#21815)\nDetect Flow pragma (@flow) and use Flow plug-in instead of TypeScript (default)', 'Reverting recent flushSync changes (#21816)', 'DevTools show error icon when hook name parsing fails (#21820)', '[SSR2 Fixture] Delete duplicate DOCTYPE (#21824)', "DevTool: hook names cache no longer loses entries between selection (#21831)\nMade several changes to the hooks name cache to avoid losing cached data between selected elements:\n1. No longer use React-managed cache. This had the unfortunate side effect of the inspected element cache also clearing the hook names cache. For now, instead, a module-level WeakMap cache is used. This isn't great but we can revisit it later.\n2. Hooks are no longer the cache keys (since hook objects get recreated between element inspections). Instead a hook key string made of fileName + line number + column number is used.\n3. If hook names have already been loaded for a component, skip showing the load button and just show the hook names by default when selecting the component.", 'Reset inspected element cache in the event of an error (#21821)', 'Added DevTools CONTRIBUTING guide', 'Update CONTRIBUTING.md', 'Update CONTRIBUTING.md', 'DevTools: Update named hooks match to use column number also (#21833)\nThis prevents edge cases where AST nodes are incorrectly matched.', "DevTools: Don't load source files contaning only unnamed hooks (#21835)\nThis wastes CPU cycles.", 'Update CONTRIBUTING.md', 'Use act() in ReactFabric tests (#21839)', 'Revert "Use act() in ReactFabric tests (#21839)" (#21840)\nThis reverts commit 59d3aca68638319c88d685ce22cac76a03cfe493.', 'Guard against reused fibers in React Native commands (#21837)', 'Use act() in ReactFabric tests (#21839) (#21841)\nCo-authored-by: Timothy Yung yungsters@fb.com', 'Add test for #21837 (#21842)\nTaken from https://github.com/facebook/react/pull/21837#issuecomment-876788973\nCo-Authored-By: Timothy Yung yungsters@fb.com\nCo-authored-by: Timothy Yung yungsters@fb.com', "Bugfix: Flush legacy sync passive effects at beginning of event (#21846)\n\nRe-land recent flushSync changes\n\nAdds back #21776 and #21775, which were removed due to an internal\ne2e test failure.\nWill attempt to fix in subsequent commits.\n\nFailing test: Legacy mode sync passive effects\n\nIn concurrent roots, if a render is synchronous, we flush its passive\neffects synchronously. In legacy roots, we don't do this because all\nupdates are synchronous — so we need to flush at the beginning of the\nnext event. This is how discreteUpdates worked.\n\nFlush legacy passive effects at beginning of event\n\nFixes test added in previous commit.", "Check if already rendering before flushing\nForgot to stage this before committing 54e88ed12\nI don't think is currently observable but should include the guard to\nprotect against regressions (though this whole block will be deleted\nalong with legacy mode, anyway).", "Inline discreteUpdates (#21784)\nThis API is only used by the event system, to set the event priority for\nthe scope of a function. We don't need it anymore because we can modify\nthe priority directly, like we already do for continuous input events.", 'Capture suspense boundaries with undefined fallbacks (#21854)', "act: Batch updates, even in legacy roots (#21797)\nIn legacy roots, if an update originates outside of batchedUpdates,\ncheck if it's inside an act scope; if so, treat it as if it were\nbatched. This is only necessary in legacy roots because in concurrent\nroots, updates are batched by default.\nWith this change, the Test Utils and Test Renderer versions of act are\nnothing more than aliases of the isomorphic API (still not exposed, but\nwill likely be the recommended API that replaces the others).", 'Restore DevTools console message (#21864)', "Fix link to fbjs (#21863)\nfbjs doesn't have the main branch and it is master", 'Update link to flow (#21862)\nmain branch does not exist in the flow project and it is master.\nCo-authored-by: Ehsan Hosseini 53467610+dh-hosseini@users.noreply.github.com', 'Adjust Error stack columns numbers by 1 (#21865)\nTo account for differences between error stacks (1-based) and ASTs (0-based). In practice this change should not make an observable difference.', 'Enable scheduling profiler flag for react-dom profiling builds (#21867)', 'Allow components to render undefined (#21869)', 'DevTools: Ignore multiple sourceMappingUrls for external source maps (#21871)\nAdded an edge case regression test and bugfix.', 'fix: restore execution context after RetryAfterError completed (#21766)\n\n\ntest: Add failing test due to executionContext not being restored\n\n\nfix: restore execution context after RetryAfterError completed\n\n\nPoke codesandbox/ci\n\n\nCompletely restore executionContext\n\n\nexpect a specific error\n\n', "Run persistent tests in more configurations in CI (#21880)\nI noticed that enableSuspenseLayoutEffectSemantics is not fully\nimplemented in persistent mode. I believe this was an oversight\nbecause we don't have a CI job that runs tests in persistent mode and\nwith experimental flags enabled.\nThis adds additional test configurations to the CI job so we don't miss\nstuff like this again. It doesn't fix the failing tests — I'll address\nthat separately.", 'Add comment support to @gate pragma (#21881)\nSo you can more easily comment on why a test is gated.', "[Bugfix] Don't hide/unhide unless visibility changes (#21875)\n\nUse Visibility flag to schedule a hide/show effect\n\nInstead of the Update flag, which is also used for other side-effects,\nlike refs.\nI originally added the Visibility flag for this purpose in #20043 but\nit got reverted last winter when we were bisecting the effects refactor.\n\nAdded failing test case\n\nCo-authored-by: Brian Vaughn bvaughn@fb.com", 'DevTools: Named hooks supports "cheap-module-source-map" (#21874)\n"cheap-module-source-map" is the default source-map generation mode used in created-react-dev mode because of speed. The major trade-off is that the source maps generated don\'t contain column numbers, so DevTools needs to be more lenient when matching AST nodes in this mode.\nIn this case, it can ignore column numbers and match nodes using line numbers only– so long as only a single node matches. If more than one match is found, treat it the same as if none were found, and fall back to no name.', 'Devtools Profiler: allow user to enter commit number (#19957)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Fix typo (#21671)', 'Cache local reference to global Promise (#21886)', 'Clear named hooks Suspense and AST cache after a Fast Refresh (#21891)', 'Remove named hooks feature flag (#21894)', 'DevTools 4.13.5 -> 4.14.0', 'Clean up flushSync flow types (#21887)', 'Refactor "reappear" logic into its own traversal (#21898)\nWhen a Suspense boundary switches to its fallback state — or similarly,\nwhen an Offscreen boundary switches from visible to hidden — we unmount\nall its layout effects. When it resolves — or when Offscreen switches\nback to visible — we mount them again. This "reappearing" logic\ncurrently happens in the same commit phase traversal where we perform\nnormal layout effects.\nI\'ve changed it so that the "reappear" logic happens in its own\nrecurisve traversal that is separate from the commit phase one.\nIn the next step, I will do the same for the "disappear" logic that\ncurrently lives in the hideOrUnhideAllChildren function.\nThere are a few reasons to model it this way, related to future\nOffscreen features that we have planned. For example, we intend to\nprovide an imperative API to "appear" and "reappear" all the effects\nwithin an Offscreen boundary. This API would be called from outside the\ncommit phase, during an arbitrary event. Which means it can\'t rely on\nthe regular commit phase — it\'s not part of a commit. This isn\'t the\nonly motivation but it illustrates why the separation makes sense.', 'Refactor "disappear" logic into its own traversal (#21901)\nSimilar to #21898, but for "disappear" logic. Previously this lived\ninside hideOrUnhideAllChildren, the function that mutates the nearest\nDOM nodes to override their display style.\nThis makes the feature work in persistent mode (Fabric); it didn\'t\nbefore because hideOrUnhideAllChildren only runs in mutation mode.', 'react-devtools: set icon on macos (#21908)', 'Update test comments with explanations (#21857)', 'Typo fix (#21729)\nemitted instead of emmitted', 'Fix global reference to Promise (#21926)\nReferencing Promise without a type check will throw in environments\nwhere Promise is not defined.\nWe will follow up with a lint rule that restricts access to all globals\nexcept in dedicated module indirections.', "Clean-up: Move Offscreen logic from Suspense fiber (#21925)\nMuch of the visibility-toggling logic is shared between the Suspense and\nOffscreen types, but there is some duplicated code that exists in both.\nSpecifically, when a Suspense fiber's state switches from suspended to\nresolved, we schedule an effect on the parent Suspense fiber, rather\nthan the inner Offscreen fiber. Then in the commit phase, the Suspense\nfiber is responsible for committing the visibility effect on Offscreen.\nThere two main reasons we implemented it this way, neither of which\napply any more:\n\nThe inner Offscreen fiber that wraps around the Suspense children used\n  to be conditionally added only when the boundary was in its fallback\n  state. So when toggling back to visible, there was no inner fiber to\n  handle the visibility effect. This is no longer the case — the\n  primary children are always wrapped in an Offscreen fiber.\nWhen the Suspense fiber is in its fallback state, the inner Offscreen\n  fiber does not have a complete phase, because we bail out of\n  rendering that tree. In the old effects list implementation, that\n  meant the Offscreen fiber did not get added to the effect list, so\n  it didn't have a commit phase. In the new recursive effects\n  implementation, there's no list to maintain. Marking a flag on the\n  inner fiber is sufficient to schedule a commit effect.\n\nGiven that these are no relevant, I was able to remove a lot of old\ncode and shift more of the logic out of the Suspense implementation\nand into the Offscreen implementation so that it is shared by both.\n(Being able to share the implementaiton like this was in fact one of\nthe reasons we stopped conditionally removing the inner\nOffscreen fiber.)\nAs a bonus, this happens to fix a TODO in the Offscreen implementation\nfor persistent (Fabric) mode, where newly inserted nodes inside an\nalready hidden tree must also be hidden. Though we'll still need to\nmake this work in mutation (DOM) mode, too.", "DevTools: Parse named source AST in a worker (#21902)\nResolves #21855\nEnded up using workerize in order to setup the worker once it allows easy imports (for babel's parse function) and exports.", "Fix: LegacyHidden should not toggle effects (#21928)\nLegacyHidden is a transitional API that we added to replace the old\n<div hidden={true} /> API that we used to use for pre-rendering. The\nplan is to replace this with the Offscreen component, once it's ready.\nThe idea is that LegacyHidden has identical behavior to Offscreen except\nthat it doesn't change the behavior of effects. (Which is basically how\n<div hidden={true} /> worked — it prerendered the hidden content in\nthe background, but nothing else.) That way, while we're rolling this\nout, we could toggle the feature behind a feature flag either for\nperformance testing or as a kill switch.\nIt looks like we accidentally enabled the effects flag for both\nOffscreen and LegacyHidden. I suppose it's a good thing that nobody\nhas complained yet, since we eventually do want to ship this\nbehavior everywhere?\nBut I do think we should remove it from LegacyHidden, and roll it out by\ngating the component type in the downstream repo. That way if there's an\nissue related to the use of LegacyHidden, we can disable that without\ndisabling the behavior for Suspense boundaries.\nIn retrospect, I might have implemented this as an unstable prop on\nOffscreen instead of a completely separate type — though at the time,\nOffscreen didn't exist. I originally added LegacyHidden to unblock the\nLanes refactor, so I could move the deprioritization logic out of the\nHostComponent implementation.\nNot a big deal since we're going to remove this soon. The implementation\nis almost the same regardless: before disconnecting or reconnecting\nthe effects, check the fiber tag. The rest of the logic is the same.", '[DRAFT] Import scheduling profiler into DevTools Profiler (#21897)', 'Removed an accidental console.log from DevTools source code', "React Native: Export getInspectorDataForInstance API (#21572)\nThis PR exports a new top-level API, getInspectorDataForInstance, for React Native (both development and production). Although this change adds a new export to the DEV bundle, it only impacts the production bundle for internal builds (not what's published to NPM).", '[DevTools] Add native events to the scheduling profiler (#21947)', "Fix: Hide new/updated nodes in already hidden tree (#21929)\nWhen a new node is added to an already hidden Offscreen tree, we need\nto schedule a visibility effect to hide it. Previously we would only\nhide when the boundary initially switches from visible to hidden, which\nmeant that newly inserted nodes would be visible.\nWe need to do the same thing for nodes that are updated, because the\nupdate might affect the DOM node's style.display property.\nThe implementation is to check the subtreeFlags for an Insertion or\nUpdate effect.\nThis only affects Offscreen, not Suspense, because Suspense boundaries\ncannot be updated while in their fallback (hidden) state.\nAnd it only affects mutation mode, because in persistent mode we\nimplement hiding by cloning the host tree during the complete phase,\nwhich already happens on every update.", "[Fabric] Use container node to toggle the visibility of Offscreen and Suspense trees (#21960)\n\nFix type of Offscreen props argument\n\nFixes an oversight from a previous refactor. The fiber that wraps\na Suspense component's children used to be a Fragment but now it's on\nOffscreen fiber, so its props type has changed. There's a special\nhydration path where I forgot to update this. This isn't observable\nbecause we don't ever end up rendering this particular fiber (because\nthe Suspense boundary is in its fallback state) but we should fix it\nanyway to avoid a potential regression in the future.\n\nExtract createOffscreenFromFiber logic\n\n...into a new method called createWorkInProgressOffscreenFiber. Just\nfor symmetry with updateWorkInProgressOffscreenFiber. Doesn't change\nany behavior.\n\n[Fabric] Use container node to hide/show tree\n\nThis changes how we hide and show the contents of Offscreen boundaries\nin the React Fabric renderer (persistent mode), and also Suspense\nboundaries which use the same feature.=\nThe way it used to work was that when a boundary is hidden, in the\ncomplete phase, instead of calling the normal cloneInstance method\ninside appendAllChildren, we would call a forked method called\ncloneHiddenInstance for each of the nearest host nodes within the\nsubtree. This design was largely based on how it works in React DOM\n(mutation mode), where instead of cloning the nearest host nodes, we\nmutate their style.display property.\nThe motivation for doing it this way in React DOM was because there's no\nbuilt-in browser API for hiding a collection of DOM nodes without\naffecting their layout.\nIn Fabric, however, there is no such limitation, so we can instead wrap\nin an extra host node and apply a hidden style.\nThe immediate motivation for this change is that Fabric on Android has a\nview pooling mechanism for instances that relies on the assumption that\na current Fiber that is cloned and replaced by a new Fiber will never\nappear in a future commit. When this assumption is broken, it may cause\ncrashes. In the current implementation, that can indeed happen when a\nnode that was previously hidden is toggled back to visible. Although\nthis change sidesteps the issue, we may introduce in other features in\nthe future that would benefit from being able to revert back to an older\nnode without cloning it again, such as animations.\nThe way I've implemented this is to insert an additional HostComponent\nfiber as the child of each OffscreenComponent. The extra fiber is not\nideal — the way I'd prefer to do it is to attach the host instance to\nthe OffscreenComponent. However, the native Fabric implementation\ncurrently expects a 1:1 correspondence between HostComponents and host\ninstances, so I've deferred that optimization to a future PR to derisk\nfixing the Fabric pooling crash. I left a TODO in the host config with a\ndescription of the remaining steps, but this alone should be sufficient\nto unblock.", 'Scheduling profiler: Improve native events UI (#21966)\nAlso highlight events that have synchronous updates inside of them. (We may want to relax this highlighting later to not warn about event handlers that are still fast enough.)', 'Fix ReactFabricHostComponent methods if detached (#21967)', 'Separate unit tests for ReactFabricHostComponent (#21969)', 'Sceduling profiler: Added custom view cursors (#21970)', 'Scheduling profiler: UX tweaks (#21971)', 'Display warnings in tooltips for native events that render sync updates (#21975)', "[Fizz] Don't add aborted segments to the completedSegments list (#21976)\n\n\nDon't add aborted segments to the completedSegments list\n\n\nUpdate error message to include aborted status\n\n", 'Devtools: Display as link if value is in specified protocols (#21964)', 'Added testing instructions to devtools contributing guide', "Tidy up early bailout logic at start of begin phase (#21852)\n\nExtract early bailout to separate function\n\nThis block is getting hard to read so I moved it to a separate function.\nI'm about to refactor the logic that wraps around this path.\nIdeally this early bailout path would happen before the begin phase\nphase. Perhaps during reconcilation of the parent fiber's children.\n\nExtract state and context check to separate function\n\nThe only reason we pass updateLanes to some begin functions is to\ncheck if we can perform an early bail out. But this is also available\nas current.lanes, so we can read it from there instead.\nI think the only reason we didn't do it this way originally is because\ncomponents that have two phases — error and Suspense boundaries —\nuse workInProgress.lanes to prevent a bail out, since during the\ninitial render there is no current. But we can check the DidCapture\nflag instead, which we use elsewhere to detect the second phase.", 'Some remaining instances of master to main (#21982)\nCo-authored-by: Shubham Pandey shubham.pandey@mfine.co', "[Fabric] Fix reparenting bug in legacy Suspense mount (#21995)\n\nAdd reparenting invariant to React Noop\n\nFabric does not allow nodes to be reparented, so I added the equivalent\ninvariant to React Noop's so we can catch regressions.\nThis causes some tests to fail, which I'll fix in the next step.\n\nFix: Use getOffscreenContainerProps\n\nThe type of these props is different per renderer. An oversight\nfrom #21960. Unfortunately wasn't caught by Flow because fiber props\nare any-typed.\n\n[Fabric] Fix reparenting in legacy Suspense mount\n\nFixes a weird case during legacy Suspense mount where the offscreen host\ncontainer of a tree that suspends during initial mount is recreated\ninstead of cloned, since there's no current fiber to clone from.\nFabric considers this a reparent even though the parent from the first\npass never committed.\nInstead we can override the props from the first pass before the\ncontainer completes. It's a bit of a hack, but no more so than the rest\nof the legacy root Suspense implementation — the hacks are designed\nto make it usable by non-strict mode-compliant trees.", 'New devtools test for named hooks verifying case when hooks are used indirectly (#21996)\nSummary\nAdds a new unit test to parseHookNames-test which verifies that we correctly give names to hooks when they are used indirectly: \ne.g.\nconst countState = useState(0);\n  const count = countState[0];\n  const setCount = countState[1]; \nShould produce count as the name.\nTest plan\nyarn test\nyarn test-build-devtools\nyarn test-build-devtools parseHookNames', 'Scheduling profiler UX changes (#21990)', '[DevTools] Optimize Images yarn command (part 2) (#21968)', 'Optimized DevTools extension images', '[DevTools] Disable sizeBot on DevTools Rull Request (#21885)\n\n[DevTools] Disable sizeBot on DevTools Rull Request\n\nBecause DevTools code doesn\'t affect production bundle size.\nMeaningless sizeBot comment give us frastration within Pull Request discussion.\n\nRevert "[DevTools] Disable sizeBot on DevTools Rull Request"\n\nThis reverts commit a43aab9207d4abc85b60c22b21a374fc54b1c6ea.\n\ncheck whether devtools package file only committed\n', 'Devtools: Refactor imperative theme code (#21950)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'DevTools: Scheduling profiler (#22006)', 'Switch on enableProfilerChangedHookIndices flag for OSS devtools builds (#22011)', '[DevTools] Fix: highlight updates with memoized components (#22008)', 'DevTools scheduling profiler: Add React component measures (#22013)', 'typos fixed (#21955)', "[Fabric] Add flex: 1 to Offscreen view container (#22019)\nWithout this style property, the layout of the children is messed up.\nThe goal is for the container view to have no layout at all. It should\nbe a completely transparent wrapper, except for when we set display:\nnone to hide its contents. On the web, the equivalent (at least in the\nspec) is display: contents.\nAfter some initial testing, this seems to be close enough to the desired\nbehavior that we can ship it. We'll try rolling it out behind a flag.", 'Re-add old Fabric Offscreen impl behind flag (#22018)\n\nRe-add old Fabric Offscreen impl behind flag\n\nThere\'s a chance that #21960 will affect layout in a way that we don\'t\nexpect, so I\'m adding back the old implementation so we can toggle the\nfeature with a flag.\nThe flag should read from the ReactNativeFeatureFlags shim so that we\ncan change it at runtime. I\'ll do that separately.\n\nImport dynamic RN flags from external module\n\nInternal feature flags that we wish to control with a GK can now be\nimported from an external module, which I\'ve called\n"ReactNativeInternalFeatureFlags".\nWe\'ll need to add this module to the downstream repo.\nWe can\'t yet use this in our tests, because we don\'t have a test\nconfiguration that runs against the React Native feature flags fork. We\nshould set up that up the same way we did for www.', 'Scheduling profiler: Added lane labels and durations to React measures (#22029)', '[DevTools] Hook names are correctly extracted when parsing nested hook calls (#22037)\nSummary\nThis commit fixes an issue where DevTools would currently not correctly extract the hook names for a hook call when the hook call was nested under another hook call, e.g.:\n```javascript\nfunction Component() {\n  const InnerComponent = useMemo(() => () => {\n    const [state, setState] = useState(0);\nreturn state;\n\n}); \n  return null;\n};\n```\nAlthough it seems pretty rare to encounter this case in actual product code, DevTools wasn\'t handling it correctly:\nExpected Names:\n- InnerComponent for the useMemo() call.\n- state for the useState() call.\nActual\n- InnerComponent for the useMemo() call.\n- InnerComponent for the useState() call.\nThe reason that we were extracting the name for the nested hook call incorrectly is that the checkNodeLocation function (which attempts to check if the location of the hook matches the location in the original source code), was too "lenient" and would return a match even if the start lines of the locations didn\'t match.\nSpecifically, for our example, it would consider that the location of the outer hook call "matched" the location of the inner hook call (even though they were on different lines), and would then return the wrong hook name.\nFix\nThe fix in this commit is to update the checkNodeLocation function to more strictly check for matching start lines. The assumption here is that if 2 locations are on different starting lines, they can\'t possibly correspond to the same hook call.\nTest Plan\n\nyarn flow\nTests still pass\nyarn test\nyarn test-build-devtools\nnew regression tests added\nnamed hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally). \n\n\n\n', 'Scheduling Profiler: Improve warnings and add unit tests (#22038)\n\n\nScheduling Profiler: Updated instructions to mentioned v18+ requirement\n\n\nMoved long-event warning to post processing\n\n\nThis lets us rule out non-React work or React work that started before the event and finished quickly during the event.\nAlso added unit tests for this warning and the various cases.\n\nMoved long-event warning to post processing\n\nThis lets us rule out non-React work or React work that started before the event and finished quickly during the event.\nAlso added unit tests for this warning and the various cases.\n\n\nUpdated nested update warning text\n\n\nUdpate warning about suspending outside of a transition\n\n\nHandle edge case where component suspends before the first commit (and label metadata) has been logged.\nAdd unit tests.\n\n\nFixed logic error in getBatchRange() with minStartTime\n\n\nPR feedback: Combined a conditional statement\n\n', 'Scheduling Profiler: Renamed a misnamed variable', 'Fix typo in parseHookNames.js (#22042)\nrepresentated -> represented', 'Enable enableSuspenseLayoutEffectSemantics flag statically for Facebook (#22050)', 'Scheduling Profiler: Misc UX and performance improvements (#22043)', 'Devtools/function context change (#22047)', 'Show a soft error when a text string or number is supplied as a child to non text wrappers (#21953)\n\n\nShow soft errors when a text string or number is supplied as a child instead of throwing an error\n\n\nbring DEV check first so that things inside get removed in prod.\n\n\nfix lint\n\n', '[DevTools] Support extended source maps with named hooks information (#22010)\nSummary\nAdds support for statically extracting names for hook calls from source code, and extending source maps with that information so that DevTools does not have to directly parse source code at runtime, which will speed up the Named Hooks feature and allow it to be enabled by default.\nSpecifically, this PR includes the following parts:\n\n[x] Adding logic to statically extract relevant hook names from the parsed source code (i.e. the babel ast). Note that this logic differs slightly from the existing logic in that the existing logic also uses runtime information from DevTools (such as whether given hooks are a custom hook) to extract names for hooks, whereas this code is meant to run entirely at build time, so it does not rely on that information.\n[x] Generating an encoded "hook map", which encodes the information about a hooks original source location, and it\'s corresponding name. This "hook map" will be used to generate extended source maps, included tentatively under an extra x_react_hook_map field. The map itself is formatted and encoded in a very similar way as how the names and mappings fields of a standard source map are encoded ( = Base64 VLQ delta coding representing offsets into a string array), and how the "function map" in Metro is encoded, as suggested in #21782. Note that this initial version uses a very basic format, and we are not implementing our own custom encoding, but reusing the encode function from sourcemap-codec.\n[x] Updating the logic in parseHookNames to check if the source maps have been extended with the hook map information, and if so use that information to extract the hook names without loading the original source code. In this PR we are manually generating extended source maps in our tests in order to test that this functionality works as expected, even though we are not actually generating the extended source maps in production.\n\nThe second stage of this work, which will likely need to occur outside this repo, is to update bundlers such as Metro to use these new primitives to actually generate source maps that DevTools can use.\nFollow-ups\n\nEnable named hooks by default when extended source maps are present\nSupport looking up hook names when column numbers are not present in source map.\nMeasure performance improvement of using extended source maps (manual testing suggests ~4 to 5x faster)\nUpdate relevant bundlers to generate extended source maps.\n\nTest Plan\n\nyarn flow\nTests still pass\nyarn test\nyarn test-build-devtools\nNamed hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, facebook).\nFor new functionality:\nNew tests for statically extracting hook names.\nNew tests for using extended source maps to look up hook names at runtime.\n', 'DevTools: Scheduling profiler: Add vertical scroll bar (#22005)\nCo-authored-by: E-Liang Tan eliang@eliangtan.com', 'Updated @reach packages to fix unmount bug (#22075)', '[DevTools] Updated source map extension format + more precise types (#22073)\nSummary\nFollow up from https://github.com/facebook/react/pull/22010.\nAs suggested by @motiz88, update the way the react sources metadata is stored within the fb sources metadata. Specifically,  instead of x_facebook_sources directly containing a hook map in the second position of the metadata tuple for a given source, it contains the react sources metadata itself, which is also a tuple of react sources metadata for a given source, and which contains the hook map in the first position. This way the react sources metadata tuple can be extended to contain more react-specific metadata without taking up more positions in the top-level facebook sources metadata.\nAs part of this change:\n- Adds more precise Flow types, mostly borrowed from Metro\n- Fixes the facebook sources field name (we were using x_fb_sources but it should be x_facebook_sources\nTest Plan\n\nyarn flow\nyarn test\nyarn test-build-devtools\n', 'DevTools 4.14.0 -> 4.15.0', 'Added taneliang and kartikcho to scheduling profiler credits', 'Add script to generate DevTools changelog text (#22077)', 'Added Scheduling Profiler notes and videos to the DevTools CHANGELOG', 'Updated DevTools CHANGELOG\nFixed header typo', 'Fixed Components tree indentation bug for Chrome extension (#22083)\nBy upgrading react-virtualized-auto-sizer to 1.0.6\nSee https://github.com/bvaughn/react-virtualized-auto-sizer/pull/39', '[DevTools] Add screenshots to Scheduling Profiler (#22088)', 'Scheduling Profiler: Inline snapshots (#22091)', "Typo: 'occured' -> 'occurred' in comment (#22094)", 'Scheduling profiler: Canvas views clip by default (#22100)', 'make parseHookNames a separate bundle (#22102)', 'DevTools 4.15.0 -> 4.16.0 (#22104)', "[Scheduler] Check for continuous input events (#22107)\n\n[Scheduler] Track start of current chunk\n\nCurrently in shouldYield, we compare the current time to a deadline\nthat is pre-computed at the beginning of the current chunk.\nHowever, since we use different deadlines depending on whether an input\nevent is pending, it makes more sense to track the start of the current\nchunk and check how much time has elapsed since then.\nDoesn't change any behavior, just refactors the logic.\n\n[Scheduler] Check for continuous input events\n\nisInputPending supports a includeContinuous option. When set to\ntrue, the method will check for pending continuous inputs, like\nmousemove, in addition to discrete ones, like click.\nWe will only check for pending continuous inputs if we've blocked the\nmain thread for a non-neglible amount of time. If we've only blocked\nthe main thread for, say, a few frames, then we'll only check for\ndiscrete inputs.\nI wrote a test for this but didn't include it because we haven't yet set\nup the gate flag infra to work with Scheduler feature flags. For now,\nI ran the test locally.\n\nReview nits\n", 'Revert "Show a soft error when a text string or number is supplied as a child to non text wrappers (#21953)" (#22108)\nThis reverts commit e9b2028b3280c15138bd92b0d27ffa066de3d5ca.', 'Show a soft error when a text string or number is supplied as a child to non text wrappers (#22109)', 'Fixed ReactSharedInternals export in UMD bundle (#22117)', 'Scheduling Profiler: Add network measures (#22112)', "[DevTools] Access metadata in source maps correctly accounting for different formats (#22096)\nSummary\nFollow up from https://github.com/facebook/react/pull/22010.\nThe initial implementation of named hooks and for looking up hook name metadata in an extended source map both assumed that the source maps would always have a sources field available, and didn't account for the source maps in the Index Map format, which contain a list of sections and don't have the source field available directly. \nIn order to properly access metadata in extended source maps, this commit:\n\nAdds a new SourceMapMetadataConsumer api, which is a fork / very similar in structure to the corresponding consumer in Metro (as specified by @motiz88 in https://github.com/facebook/react/issues/21782.\nUpdates parseHookNames to use this new api\n\nTest Plan\n\nyarn flow\nyarn test\nyarn test-build-devtools\nadded new regression tests covering the index map format\nnamed hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).\n", 'Remove the warning for setState on unmounted components (#22114)\n\n\nRemove warning for setState on unmounted components\n\n\nTrigger CI\n\n', '[DevTools] Support object destructuring pattern without runtime errors (#22128)\nSummary\nBefore this commit, if a hook returned an object and we declared a variable using object destructuring on the returned value, we would produce a runtime error. This was detected via internal testing.\nThis commit fixes that and adds regression tests.\nTest Plan\n\nyarn flow\nyarn test\nyarn test-build-devtools\nadded new regression tests \nnamed hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).\n', '[DevTools] Using array destructuring without assigning first variable does not error (#22129)\nSummary\nBefore this commit, if a hook returned an array the was destructured, but without assigning a variable to the first element in the array, this would produce an error. This was detected via internal testing.\nThis commit fixes that and adds regression tests.\nTest Plan\n\nyarn flow\nyarn test\nyarn test-build-devtools\nadded new regression tests \nnamed hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).\n', "Scheduling profiler: Fix tooltip wheel event regression (#22130)\nPanning horizontally via mouse wheel used to allow you to scrub over snapshot images. This was accidentally broken by a recent change. The core of the fix for this was to update useSmartTooltip() to remove the dependencies array so that a newly rendered tooltip is positioned even if the mouseX/mouseY coordinates don't change (as they don't when panning via wheel).\nI also cleaned a couple of unrelated things up while doing this:\n* Consolidated hover reset logic formerly split between CanvasPage and Surface into the Surface handleInteraction() function.\n* Cleaned up redundant ref setting code in EventTooltip.", 'Replace "source-map" library with "source-map-js" (#22126)', 'Set up test infra for dynamic Scheduler flags (#22139)\nI copied the set up we use for React.\nIn the www-variant test job, the Scheduler __VARIANT__ flags will be\ntrue. When writing a test, we can read the value of the flag with the\ngate pragma and method.\nNote: Since these packages are currently released in lockstep, maybe we\nshould remove SchedulerFeatureFlags and use ReactFeatureFlags for both.', "[Scheduler] Add tests for isInputPending (#22140)\nThis feature was already implemented but we didn't have any tests. So\nI wrote some.", 'DevTools: update error indices when elements are added/removed (#22144)', 'DevTools: Reset cached indices in Store after elements reordered (#22147)', '[DevTools] Add options for disabling some features (#22136)', '[DevTools] Keep query params in extracted source map urls (#22148)\nSummary\nOur current logic for extracting source map urls assumed that the url contained no query params (e.g. ?foo=bar), and when extracting the url we would cut off the query params. I noticed this during internal testing, since removing the query params would cause loading source maps to fail.\nThis commit fixes that behavior by ensuring that our regex captures the full url, including query params.\nTest Plan\n\nyarn flow\nyarn test\nyarn test-build-devtools\nadded new regression tests \nnamed hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).\n', 'Fix typo in preprocessData.js (#22150)\nFix typo:\nSUSPEND_DURING_UPATE  ->  SUSPEND_DURING_UPDATE', 'Fix a few typos (#22154)\nCo-authored-by: Bowen Li bowen31337@gmail.com', 'Yarn replace-fork should not silently error (#22156)', 'Renames master to main in fixtures/flight webpack config file (#21998)', 'add more detailed error handling if profiling data does not have any React marks (#22157)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'DevTools: Replaced WeakMap with LRU for inspected element cache (#22160)\nWe use an LRU for this rather than a WeakMap because of how the "no-change" optimization works.\nWhen the frontend polls the backend for an update on the element that\'s currently inspected, the backend will send a "no-change" message if the element hasn\'t updated (rendered) since the last time it was asked. In thid case, the frontend cache should reuse the previous (cached) value. Using a WeakMap keyed on Element generally works well for this, since Elements are mutable and stable in the Store. This doens\'t work properly though when component filters are changed, because this will cause the Store to dump all roots and re-initialize the tree (recreating the Element objects).\nSo instead we key on Element ID (which is stable in this case) and use an LRU for eviction.', 'Add feature flags for scheduler experiments (#22105)', 'Add maxYieldMs feature flag in Scheduler (#22165)', 'Automated DevTools release process (#22161)', 'React DevTools 4.16.0 -> 4.17.0', 'DevTools release script updates: (#22170)', 'Added performance timings to DevTools named hooks parsing (#22173)', 'Console Logging for StrictMode Double Rendering (#22030)\nReact currently suppress console logs in StrictMode during double rendering. However, this causes a lot of confusion. This PR moves the console suppression logic from React into React Devtools. Now by default, we no longer suppress console logs. Instead, we gray out the logs in console during double render. We also add a setting in React Devtools to allow developers to hide console logs during double render if they choose.', 'Add performance marksf or individual fetch() requests (#22176)', '[DevTools] Add utils for perfomance marks (#22180)', 'Fix a string interpolation typo in ReactHooks test (#22174)', 'Set up use-sync-external-store package (#22202)\nThis package will be a shim for the built-in useSyncExternalStore API\n(not yet implemented).', "devtools: Don't display hook index of useContext (#22200)", 'added react native feature flags (#22199)\nlunaruan commented 3 days ago • \nThis PR adds separate DevTools feature flag configurations for react-devtools-core. It also breaks the builds down into facebook specific and open source flags so we can experiment in React Native.\nTested yarn build:standalone, yarn build:backend, yarn build:standalone:fb, and yarn build:backend:fb and inspected the output to make sure each package used the correct feature flags (the first two use core-oss and the latter two use fb-oss.', '[DevTools] Throw error in console without interfering with logs (#22175)', 'Add consoleManagedByDevToolsDuringStrictMode feature flag in DevTools #22215', "DevTools: Improve named hooks network caching (#22198)\nWhile testing the recently-launched named hooks feature, I noticed that one of the two big performance bottlenecks is fetching the source file. This was unexpected since the source file has already been loaded by the page. (After all, DevTools is inspecting a component defined in that same file.)\nTo address this, I made the following changes:\n- [x] Keep CPU bound work (parsing source map and AST) in a worker so it doesn't block the main thread but move I/O bound code (fetching files) to the main thread.\n- [x] Inject a function into the page (as part of the content script) to fetch cached files for the extension. Communicate with this function using eval() (to send it messages) and chrome.runtime.sendMessage() to return its responses to the extension).\nWith the above changes in place, the extension gets cached responses from a lot of sites- but not Facebook. This seems to be due to the following:\n* Facebook's response headers include vary: 'Origin'.\n* The fetch made from the content script does not include an Origin request header.\nTo reduce the impact of cases where we can't re-use the Network cache, this PR also makes additional changes:\n- [x] Use devtools.network.onRequestFinished to (pre)cache resources as the page loads them. This allows us to avoid requesting a resource that's already been loaded in most cases.\n- [x] In case DevTools was opened after some requests were made, we also now pre-fetch (and cache in memory) source files when a component is selected (if it has hooks). If the component's hooks are later evaluated, the source map will be faster to access. (Note that in many cases, this prefetch is very fast since it is returned from the disk cache.)\nWith the above changes, we've reduced the time spent in loadSourceFiles to nearly nothing.", 'Add consoleManagedByDevToolsDuringStrictMode feature flag in React Reconciler (#22196)', 'remove dist folder in release script for standalone and inline before building (#22232)', '[DevTools] Fix Issue in release script where commits for the last DevTools release are undefined #22233', 'React DevTools 4.17.0 -> 4.18.0 (#22234)', "Initial shim of useSyncExternalStore (#22211)\nThis sets up an initial shim implementation of useSyncExternalStore,\nvia the use-sync-external-store package. It's designed to mimic the\nbehavior of the built-in API, but is backwards compatible to any version\nof React that supports hooks.\nI have not yet implemented the built-in API, but once it exists, the\nuse-sync-external-store package will always prefer that one. Library\nauthors can depend on the shim and trust that their users get the\ncorrect implementation.\nSee https://github.com/reactwg/react-18/discussions/86 for background\non the API.\nThe tests I've added here are designed to run against both the shim and\nbuilt-in implementation, using our variant test flag feature. Tests that\nonly apply to concurrent roots will live in a separate suite.", 'Fix typo in ReactDOMServerFormatConfig.js (#22203)\nFix typo:\nTOOD -> TODO', 'Bump tar from 5.0.5 to 5.0.11 (#22223)\nBumps tar from 5.0.5 to 5.0.11.\n- Release notes\n- Changelog\n- Commits\n\nupdated-dependencies:\n- dependency-name: tar\n  dependency-type: indirect\n...\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'Typo fixed (#22171)', 'Add aria-description to the list of known ARIA attributes (#22142)\n\nUpdate validAriaProperties.js\n\nhttps://w3c.github.io/aria/#aria-description is a valid aria property.\n\nSort alphabetically\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'feat(eslint-plugin-react-hooks): support ESLint 8.x (#22248)', 'Update PULL_REQUEST_TEMPLATE.md', 'Update PULL_REQUEST_TEMPLATE.md', 'feat(eslint-plugin-react-internal): support ESLint 8.x (#22249)\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'Build ReactDOMServer on CodeSandbox CI (#22255)', 'Fix typo in ReactUpdatePriority-test.js (#21958)\ncontinous -> continuous', 'break up import keyword to avoid being accidentally parsed as dynamic import statement in external code (#21918)\nCo-authored-by: zhengjianhua zhengjianhua.michael@bytedance.com', "[package:react-dom] updateREADME's Class Component to Function Component (#21829)\n\n\n[package:react-dom] updateREADME's Class Component to Function Component\n\n\nUpdate README.md\n\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com", 'Update PULL_REQUEST_TEMPLATE.md', '[DevTools] Only call originalPositionFor once (#22181)', 'Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)', "Add warning and test for useSyncExternalStore when getSnapshot isn't cached (#22262)\n\n\nadd warning and test\n\n\nWrap console error in DEV flag\n\n\nprettier\n\n", 'Wire up the native API for useSyncExternalStore (#22237)\nAdds useSyncExternalStore to the internal dispatcher, and exports\nthe native API from the React package without yet implementing it.', "Implement useSyncExternalStore in Fiber (#22239)\nThis adds an initial implementation of useSyncExternalStore to the\nfiber reconciler. It's mostly a copy-paste of the userspace\nimplementation, which is not ideal but is a good enough starting place.\nThe main change we'll want to make to this native implementation is to\nmove the tearing checks from the layout phase to an earlier, pre-commit\nphase so that code that runs in the commit phase always observes a\nconsistent tree.\nFollow-ups:\n\nImplement in Fizz\nImplement in old SSR renderer\nImplement in react-debug-hooks\n", "Remove state queue from useSyncExternalStore (#22265)\nThe userspace shim of useSyncExternalStore uses a useState hook because\nit's the only way to trigger a re-render. We don't actually use the\nqueue to store anything, because we read the current value directly\nfrom the store.\nIn the native implementation, we can schedule an update on the fiber\ndirectly, without the overhead of a queue.", 'Add useSyncExternalStore to react-debug-tools (#22240)\nAdds support for useSyncExternalStore to react-debug-tools, which in\nturn adds support for React Devtools.\nTest plan: I added a test to ReactHooksInspectionIntegration, based on\nexisting one for useMutableSource.', 'Adjust consoleManagedByDevToolsDuringStrictMode feature flag (#22253)', 'Fix #21972: Add onResize event to video elements (#21973)\n\nFix #21972: Add onResize event to video elements\n\nThis is a simple fix for #21972 that adds support for the onResize media event.\nI created a separate videoEventTypes array since I doubt anyone will want to add onResize to an audio event. It would simplify the code a bit to just add resize to the mediaEventTypes array, if that’s preferred.\nPre-commit checklist (source)\n✅ Fork the repository and create your branch from main.\n✅ Run yarn in the repository root.\n✅ If you’ve fixed a bug or added code that should be tested, add tests!\n✅ Ensure the test suite passes (yarn test). Tip: yarn test --watch TestName is helpful in development.\n✅ Run yarn test --prod to test in the production environment.\n✅ If you need a debugger, run yarn debug-test --watch TestName, open chrome://inspect, and press “Inspect”.\n✅ Format your code with prettier (yarn prettier).\n✅ Make sure your code lints (yarn lint). Tip: yarn linc to only check changed files.\n✅ Run the Flow typechecks (yarn flow).\n✅ If you haven’t already, complete the CLA.\n\nConsolidate videoEventTypes array into mediaEventTypes\n', 'Reorder VARIANT feature flags (#22266)\n\n\nMove variant tests up\n\n\nAdd a comment\n\n', 'Remove duplicate test\nAccidentally committed two copies of this test during a rebase.', 'Detect subscriptions wrapped in startTransition (#22271)\n\nDetect subscriptions wrapped in startTransition\n', 'Test bad useEffect return value with noop-renderer (#22258)\n\n\nTest bad useEffect return value with noop-renderer\n\n\nUse previous "root"-approach\n\n\nTests should now be invariant under variants\n\nAdd same test for layout effects\n', 'DevTools Suspense cache cleanup (#22275)', '[Bugfix] Prevent infinite update loop caused by a synchronous update in a passive effect (#22277)\n\nAdd test that triggers infinite update loop\n\nIn 18, passive effects are flushed synchronously if they are the\nresult of a synchronous update. We have a guard for infinite update\nloops that occur in the layout phase, but it doesn\'t currently work for\nsynchronous updates from a passive effect.\nThe reason this probably hasn\'t come up yet is because synchronous\nupdates inside the passive effect phase are relatively rare: you either\nhave to imperatively dispatch a discrete event, like el.focus, or you\nhave to call ReactDOM.flushSync, which triggers a warning. (In\ngeneral, updates inside a passive effect are not encouraged.)\nI discovered this because useSyncExternalStore does sometimes\ntrigger updates inside the passive effect phase.\nThis commit adds a failing test to prove the issue exists. I will fix\nit in the next commit.\n\nFix failing test added in previous commit\n\nThe way we detect a "nested update" is if there\'s synchronous work\nremaining at the end of the commit phase.\nCurrently this check happens before we synchronously flush the passive\neffects. I moved it to after the effects are fired, so that it detects\nwhether synchronous work was scheduled in that phase.', "Add named hooks support to react-devtools-inline (#22263)\nThis commit builds on PR #22260 and makes the following changes:\n* Adds a DevTools feature flag for named hooks support. (This allows us to disable it entirely for a build via feature flag.)\n* Adds a new Suspense cache for dynamically imported modules. (This allows a component to suspend while importing an external code chunk– like the hook names parsing code).\n* DevTools supports a hookNamesModuleLoaderFunction param to import the hook names module. I wish this could be handles as part of the react-devtools-shared package, but I'm not sure how to configure Webpack (4) to serve the chunk from react-devtools-inline. This seemed like a reasonable workaround.\nThe PR also contains an additional unrelated change:\n* Removes pre-fetch optimization (added in DevTools: Improve named hooks network caching #22198). This optimization was mostly only important for cases where sources needed to be re-downloaded, something which we can now avoid in most cases¹ thanks to using cached responses already loaded by the page. (I tested this locally on Facebook and this change has no negative performance impact. There is still some overhead from serializing the JS through the Bridge but that's constant between the two approaches.)\n¹ The case where we don't benefit from cached responses is when DevTools are opened after the page has already loaded certain scripts. This seems uncommon enough that I don't think it justified the added complexity of prefetching.", 'Revert Suspense cache Thenable.catch() change (#22280)\nReverts part of #22275 (adding .catch() to Thenables in Suspense caches) in response to #22275 (comment).\nAfter taking another look with fresh eyes, I think I see the "uncaught error" issue I initially noticed was in checkForUpdate() (which did not pass an error handler to .then)', "[DevTools] Fix react-devtools-extension build error and react-devtools-inline's package.json (#22281)", '[DevTools] Add React Devtools Extension Startup and File Structure to OVERVIEW.md (#22283)', 'update error message to include useLayoutEffect or useEffect on bad e… (#22279)\n\n\nupdate error message to include useLayoutEffect or useEffect on bad effect return\n\n\nUpdate packages/react-reconciler/src/ReactFiberCommitWork.new.js\n\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\n\nuse existing import\n\nCo-authored-by: Ricky rickhanlonii@gmail.com', "Replaced network.onRequestFinished() caching with network.getHAR() (#22285)\nReplaced network.onRequestFinished() caching with network.getHAR() so that we can avoid redundantly (pre) caching JavaScript content. In the event that the HAR log doesn't contain a match, we'll fall back to fetching from the Network (and hoping for a cache hit from that layer).\nI've tested both internally (internal Facebook DEV server) and externally (Code Sandbox) and it seems like this approach results in cache hits, so long as DevTools is opened when the page loads. (Otherwise it falls back to fetch().)", 'DevTools: Add missing param to fetchFromPage() (#22291)', 'Clean up my "hard to read" code (#22295)', 'Fix link (#22296)\nFix link (branch master was renamed to main): \nmaster -> main', "Check for store mutations before commit (#22290)\n\n[useSyncExternalStore] Remove extra hook object\n\nBecause we already track getSnapshot and value on the store\ninstance, we don't need to also track them as effect dependencies. And\nbecause the effect doesn't require any clean-up, we don't need to track\na destroy function.\nSo, we don't need to store any additional state for this effect. We can\ncall pushEffect directly, and only during renders where something\nhas changed.\nThis saves some memory, but my main motivation is because I plan to use\nthis same logic to schedule a pre-commit consistency check. (See the\ninline comments for more details.)\n\nSplit shouldTimeSlice into two separate functions\n\nLanes that are blocking (SyncLane, and DefaultLane inside a blocking-\nby-default root) are always blocking for a given root. Whereas expired\nlanes can expire while the render phase is already in progress.\nI want to check if a lane is blocking without checking whether it\nexpired, so I split shouldTimeSlice into two separate functions.\nI'll use this in the next step.\n\nCheck for store mutations before commit\n\nWhen a store is read for the first time, or when subscribe or\ngetSnapshot changes, during a concurrent render, we have to check\nat the end of the render phase whether the store was mutated by\nan concurrent event.\nIn the userspace shim, we perform this check in a layout effect, and\npatch up any inconsistencies by scheduling another render + commit.\nHowever, even though we patch them up in the next render, the parent\nlayout effects that fire in the original render will still observe an\ninconsistent tree.\nIn the native implementation, we can instead check for inconsistencies\nright after the root is completed, before entering the commit phase. If\nwe do detect a mutaiton, we can discard the tree and re-render before\nfiring any effects. The re-render is synchronous to block further\nconcurrent mutations (which is also what we do to recover from tearing\nbugs that result in an error). After the synchronous re-render, we can\nassume the tree the tree is consistent and continue with the normal\nalgorithm for finishing a completed root (i.e. either suspend\nor commit).\nThe result is that layout effects will always observe a consistent tree.", "[useSES/extra] Reuse old selection if possible (#22307)\nWhen you pass an unmemoized selector to useSyncExternalStoreExtra, we\nhave to reevaluate it on every render because we don't know whether\nit depends on new props.\nHowever, after reevalutating it, we should still compare the result\nto the previous selection with isEqual and reuse the old one if it\nhasn't changed.\nOriginally I did not implement this, because if the selector changes due\nto new props or state, the component is going to have to re-render\nanyway. However, it's still useful to return a memoized selection\nwhen possible, because it may be the input to a downstream memoization.\nIn the test I wrote, the example I chose is selecting a list of\nitems from the store, and passing the list as a prop to a memoized\ncomponent. If the list prop is memoized, we can bail out.", '[useSES shim] Import prefixed native API (#22310)\nUntil useSyncExternalStore is finalized, the shim should import the\nprefixed version (unstable_useSyncExternalStore), which is available\nin the experimental builds. That way our early testers can start\nusing it.', '[Experimental] Add useInsertionEffect (#21913)', '[DevTools] Add initial APIs for logging instrumentation events under feature flag (#22276)', '[Experiment] Warn if callback ref returns a function (#22313)', 'Fixed broken build script --unsafe-partial flag (#22324)\nThis flag was broken due to a buggy race case in the ncp() command. The fix is amittedly a hack but improves on the existing behavior (of leaving the workspace in a broken state).', 'Fixed issue for better bundles,chunks and workers name in devtools-extensions. (#22322)', '[DevTools] Fix runtime error when inspecting an element times out (#22329)', 'Scheduling profiler: Fix typo in View.js (#22337)', 'VerticalScrollView -> fixed  typos (#22341)', 'Updated the utfDecodeString() method to avoid call stack exceeded error (#22330)', '[DevTools] Enable hook names in standalone app (#22320)', 'Clear performance marks after measuring (#22345)', 'DevTools: Fix memory leak via alternate Fiber pointer (#22346)', 'Delete useMutableSource implementation (#22292)\nThis API was replaced by useSyncExternalStore', "replace-fork should not clear uncommitted changes (#22348)\nThe replace-fork script depends on ESLint to fix the reconciler imports\n— .old -> .new or vice versa. If ESLint crashes, it can leave the\nimports in an incorrect state.\nAs a convenience, @bvaughn updated the script to automatically run\ngit checkout -- . if the ESLint command fails. An unintended\nconsequence of the strategy is that if the working directory is not\nclean, then any uncommitted changes will be lost.\nWe need a better strategy for this that prevents the accidental loss of\nwork. One option is to exit early if the working directory is not clean\nbefore you run the script, though that affects the usability of\nthe script.\nAn ideal solution would reset the working directory back to whatever\nstate it was in before the script ran, perhaps by stashing all the\nchanges and restoring them if the script aborts.\nUntil we think of something better, I've commmented out the branch.", 'replace-fork: Cleanup after failure if no unstaged changes (#22364)', "Implement useSyncExternalStore on server (#22347)\nAdds a third argument called getServerSnapshot.\nOn the server, React calls this one instead of the normal getSnapshot.\nWe also call it during hydration.\nSo it represents the snapshot that is used to generate the initial,\nserver-rendered HTML. The purpose is to avoid server-client mismatches.\nWhat we render during hydration needs to match up exactly with what we\nrender on the server.\nThe pattern is for the server to send down a serialized copy of the\nstore that was used to generate the initial HTML. On the client, React\nwill call either getSnapshot or getServerSnapshot on the client as\nappropriate, depending on whether it's currently hydrating.\nThe argument is optional for fully client rendered use cases. If the\nuser does attempt to omit getServerSnapshot, and the hook is called\non the server, React will abort that subtree on the server and\nrevert to client rendering, up to the nearest Suspense boundary.\nFor the userspace shim, we will need to use a heuristic (canUseDOM)\nto determine whether we are in a server environment. I'll do that in\na follow up.", "Implement getServerSnapshot in userspace shim (#22359)\n\nConvert useSES shim tests to use React DOM\n\nIdea is that eventually we'll run these tests against an actual build of\nReact DOM 17 to test backwards compatibility.\n\nImplement getServerSnapshot in userspace shim\n\nIf the DOM is not present, we assume that we are running in a server\nenvironment and return the result of getServerSnapshot.\nThis heuristic doesn't work in React Native, so we'll need to provide\na separate native build (using the .native extension). I've left this\nfor a follow-up.\nWe can't call getServerSnapshot on the client, because in versions of\nReact before 18, there's no built-in mechanism to detect whether we're\nhydrating. To avoid a server mismatch warning, users must account for\nthis themselves and return the correct value inside getSnapshot.\nNote that none of this is relevant to the built-in API that is being\nadded in 18. This only affects the userspace shim that is provided\nfor backwards compatibility with versions 16 and 17.", 'devtools: Display actual ReactDOM API name in root type (#22363)', 'Enabled enableProfilerChangedHookIndices feature flag for all builds (#22365)', 'react-devtools\\OVERVIEW.md --> fixed typos (#22372)', 'Fix typo in types.js (react-devtools-shared) (#22299)\nFix typo:\nbecuase -> because', 'Fix links in packages/react-devtools/README.md (#22356)', '[Fizz] add avoidThisFallback support (#22318)', 'Remove Fiber fields that were used for hydrating useMutableSource (#22368)', 'Move DOM fixtures test job to main CI workflow (#22385)\nMoves the RELEASE_CHANNEL_stable_yarn_test_dom_fixtures job to our new,\ncombined CI workflow.\nAfter this, there are only two jobs remaining to be migrated. Then we\ncan delete the old workflow and build script.', 'correct typos (#22294)\nCo-authored-by: Bowen Li bowen31337@gmail.com', 'useSyncExternalStore React Native version (#22367)', 'Move lint job to new, combined CI workflow (#22386)\n\nMove lint job to new, combined CI workflow\n\nMoves the lint job our new, combined CI workflow.\nAfter this, there is only one job remaining to be migrated. Then we\ncan delete the old workflow and build script.\n\nRemove "stable" CI workflow\n\nThis workflow is now empty so we can remove it', 'Move build_devtools_and_process_artifacts (#22388)\nThis is the last CI job that needs to be migrated to the new workflow.', "Write artifacts to build instead of build2\nNow that all the CI jobs have been migrated to the new build script,\nwe can start renaming the build2 directory to build.\nSince there are lots of scripts that reference build2, including\ndownstream scripts that live outside this repo, I'm going to keep\nthe build2 directory around as a copy of build.\nThen once all the references are updated, I will delete the copy.", 'Add COMMIT_SHA to build directory', '[build2 -> build] -> download-build-artifacts', 'Delete unused CI jobs\nThese were replaced by the build_combined job.', '[build -> build2] Sizebot', "[build2 -> build] Local scripts\nUpdate all our local scripts to use build instead of build2.\nThere are still downstream scripts that depend on build2, though, so\nwe can't remove it yet.", "Delete all but one build2 reference (#22391)\nThis removes all the remaining references to the build2 directory\nexcept for the CI job that stores the artifacts. We'll keep the\nbuild2 artifact until downstream scripts are migrated to build.", "[Draft] don't patch console during first render (#22308)\nPreviously, DevTools always overrode the native console to dim or supress StrictMode double logging. It also overrode console.log (in addition to console.error and console.warn). However, this changes the location shown by the browser console, which causes a bad developer experience. There is currently a TC39 proposal that would allow us to extend console without breaking developer experience, but in the meantime this PR changes the StrictMode console override behavior so that we only patch the console during the StrictMode double render so that, during the first render, the location points to developer code rather than our DevTools console code.", "Increase polling threshold for publish-prereleases (#22392)\nThe publish-preleases command prints the URL of the publish workflow\nso that you can visit the page and follow along.\nBut it can take a few seconds before the workflow ID is available, after\nyou create the pipeline. So the script polls the workflow endpoint\nuntil it's available.\nThe current polling limit is too low so I increased it.\nI also updated the error message to provide more info.", 'Fix sizebot mistakenly detecting deleted files (#22394)', "Scrape warning messages in CI (#22393)\nThere's a downstream workflow that runs the print-warnings command. We\ncan make it faster by scraping the warnings in CI and storing the\nresult as a build artifact.", "Add back useMutableSource temporarily (#22396)\nRecoil uses useMutableSource behind a flag. I thought this was fine\nbecause Recoil isn't used in any concurrent roots, so the behavior\nwould be the same, but it turns out that it is used by concurrent\nroots in a few places.\nI'm not expecting it to be hard to migrate to useSyncExternalStore, but\nto de-risk the change I'm going to roll it out gradually with a flag. In\nthe meantime, I've added back the useMutableSource API.", "[Old server renderer] Retry error on client (#22399)\nWe're still in the process of migrating to the Fizz server renderer. In\nthe meantime, this makes the error semantics on the old server renderer\nmatch the behavior of the new one: if an error is thrown, it triggers a\nSuspense fallback, just as if it suspended (this part was already\nimplemented). Then the errored tree is retried on the client, where it\nmay recover and finish successfully.", 'Revert "[Old server renderer] Retry error on client (#22399)"\nGoing to revert this until we figure out error reporting. It looks like\nour downstream infra already supports some type of error recovery so\nwe might not need it here.', 'Update CodeSandbox to pull build artifacts from CI (#22400)\nInstead of building them from source.\nThe download-experimental-build script polls CI until the build\nhas finished.', 'DevTools: Hook names optimizations (#22403)\nThis commit dramatically improves the performance of the hook names feature by replacing the source-map-js integration with custom mapping code built on top of sourcemap-codec. Based on my own benchmarking, this makes parsing 3-4 times faster. (The bulk of these changes are in SourceMapConsumer.js.)\nWhile implementing this code, I also uncovered a problem with the way we were caching source-map metadata that was causing us to potential parse the same source-map multiple times. (I addressed this in a separate commit for easier reviewing. The bulk of these changes are in parseSourceAndMetadata.js.)\nAltogether these changes dramatically improve the performance of the hooks parsing code.\nOne additional thing we could look into if the source-map download still remains a large bottleneck would be to stream it and decode the mappings array while it streams in rather than in one synchronous chunk after the full source-map has been downloaded.', 'Never attach ping listeners in legacy Suspense (#22407)\nI noticed a weird branch where we attach a ping listener even in legacy\nmode. It\'s weird because this shouldn\'t be necessary. Fallbacks always\nsynchronously commit in legacy mode, so pings never happen. (A "ping" is\nwhen a suspended promise resolves before the fallback has committed.)\nIt took me a moment to remember why this case exists, but it\'s related\nto React.lazy.\nThere\'s a special case where we suspend while reconciling the children\nof a Suspense boundary\'s inner Offscreen wrapper fiber. This happens\nwhen a React.lazy component is a direct child of a Suspense boundary.\nSuspense boundaries are implemented as multiple fibers, but they are a\nsingle conceptual unit. The legacy mode behavior where we pretend the\nsuspended fiber committed as null won\'t work, because in this case the\n"suspended" fiber is the inner Offscreen wrapper.\nBecause the contents of the boundary haven\'t started rendering yet (i.e.\nnothing in the tree has partially rendered) we can switch to the\nregular, concurrent mode behavior: mark the boundary with ShouldCapture\nand enter the unwind phase.\nHowever, even though we\'re switching to the concurrent mode behavior, we\ndon\'t need to attach a ping listener. So I refactored the logic so that\nit doesn\'t escape back into the regular path.\nIt\'s not really a big deal that we attach an unncessary ping listener,\nsince this case is so unusual. The motivation is not performance related\n— it\'s to make the logic clearer, because I\'m about to add another case\nwhere we trigger a Suspense boundary without attaching a ping listener.', 'Update Node.js to latest v14.17.6 LTS (#22401)', "[Fizz] Remove assignID mechanism (#22410)\n\nRemove pushEmpty\n\nThis is only used to support the assignID mechanism.\n\nRemove assignID mechanism\n\nThis effectively isn't used anyway because we always insert a dummy tag\ninto the fallback.\n\nEmit the template tag with an ID directly in pending boundaries\n\nThis ensures that assigning the ID is deterministic since it's done during\nwriting.\nThis also avoids emitting it for client rendered boundaries that start as\nclient rendered since we never need to refer to them.\n\nMove lazy ID initialization to the core implementation\n\nWe never need an ID before we write a pending boundary. This also ensures\nthat ID generation is deterministic by moving it to the write phase.\n\nSimplify the inserted scripts\n\nWe can assume that there are no text nodes before the template tag so this\nsimplifies the script that finds the comment node. It should be the direct\nprevious child.", 'Update Yarn build-for-devtools script to account for build/build2 changes (#22418)', 'DevTools: Lazily parse indexed map sections (#22415)\nIndexed maps divide nested source maps into sections, annotated with a line and column offset. Since these sections are JSON and can be quickly parsed, we can easily separate them without doing the heavier base64 and VLQ decoding process. This PR updates our sourcemap parsing code to defer parsing of an indexed map section until we actually need to retrieve mappings from it.', 'Scheduling Profiler marks should include thrown Errors (#22417)\nThe scheduling profiler markComponentRenderStopped method is supposed to be called when rendering finishes or when a value is thrown (Suspense or Error). Previously we were calling this in a Suspense-only path of throwException.\nThis PR updates the code to handle errors (or non-Thenables) thrown as well.\nIt also moves the mark logic the work loop handleError method, with Suspense/Error agnostic cleanup.', 'Scheduling Profiler marks should include thrown Errors (#22419)', 'root.hydrate -> root.isDehydrated (#22420)\nI think this naming is a bit clearer. It means the root is currently\nshowing server rendered content that needs to be hydrated.\nA dehydrated root is conceptually the same as what we call dehydrated\nSuspense boundary, so this makes the naming of the root align with the\nnaming of subtrees.', "Hydration errors should force a client render (#22416)\n\nRefactor throwException control flow\n\nI'm about to add more branches to the Suspense-related logic in\nthrowException, so before I do, I split some of the steps into\nseparate functions so that later I can use them in multiple places.\nThis commit does not change any program behavior, only the control flow\nsurrounding existing code.\n\nHydration errors should force a client render\n\nIf something errors during hydration, we should try rendering again\nwithout hydrating.\nWe'll find the nearest Suspense boundary and force it to client render,\ndiscarding the server-rendered content.", 'Packages/React/src/ReactLazy ---> changing -1 to unintialized (#22421)', 'add hasOwnProperty to devTools backend (#22437)', '[Fix] Errors should not "unsuspend" a transition (#22423)\nIf an error is thrown during a transition where we would have otherwise\nsuspended without showing a fallback (i.e. during a refresh), we should\nstill suspend.\nThe current behavior is that the error will force the fallback to\nappear, even if it\'s completely unrelated to the component that errored,\nwhich breaks the contract of startTransition.', 'Improve DEV errors if string coercion throws (Temporal.*, Symbol, etc.) (#22064)\n\nRevise ESLint rules for string coercion\n\nCurrently, react uses \'\' + value to coerce mixed values to strings.\nThis code will throw for Temporal objects or symbols.\nTo make string-coercion safer and to improve user-facing error messages,\nThis commit adds a new ESLint rule called safe-string-coercion.\nThis rule has two modes: a production mode and a non-production mode.\n* If the isProductionUserAppCode option is true, then \'\' + value\n  coercions are allowed (because they\'re faster, although they may\n  throw) and String(value) coercions are disallowed. Exception:\n  when building error messages or running DEV-only code in prod\n  files, String() should be used because it won\'t throw.\n* If the isProductionUserAppCode option is false, then \'\' + value\n  coercions are disallowed (because they may throw, and in non-prod\n  code it\'s not worth the risk) and String(value) are allowed.\nProduction mode is used for all files which will be bundled with\ndevelopers\' userland apps. Non-prod mode is used for all other React\ncode: tests, DEV blocks, devtools extension, etc.\nIn production mode, in addiiton to flagging String(value) calls,\nthe rule will also flag \'\' + value or value + \'\' coercions that may\nthrow. The rule is smart enough to silence itself in the following\n"will never throw" cases:\n* When the coercion is wrapped in a typeof test that restricts to safe\n  (non-symbol, non-object) types. Example:\n    if (typeof value === \'string\' || typeof value === \'number\') {\n      thisWontReport(\'\' + value);\n    }\n* When what\'s being coerced is a unary function result, because unary\n   functions never return an object or a symbol.\n* When the coerced value is a commonly-used numeric identifier:\n  i, idx, or lineNumber.\n* When the statement immeidately before the coercion is a DEV-only\n  call to a function from shared/CheckStringCoercion.js. This call is a\n  no-op in production, but in DEV it will show a console error\n  explaining the problem, then will throw right after a long explanatory\n  code comment so that debugger users will have an idea what\'s going on.\n  The check function call must be in the following format:\n    if (DEV) {\n      checkXxxxxStringCoercion(value);\n    };\nManually disabling the rule is usually not necessary because almost all\nprod use of the \'\' + value pattern falls into one of the categories\nabove. But in the rare cases where the rule isn\'t smart enough to detect\nsafe usage (e.g. when a coercion is inside a nested ternary operator),\nmanually disabling the rule will be needed.\nThe rule should also be manually disabled in prod error handling code\nwhere String(value) should be used for coercions, because it\'d be\nbad to throw while building an error message or stack trace!\nThe prod and non-prod modes have differentiated error messages to\nexplain how to do a proper coercion in that mode.\nIf a production check call is needed but is missing or incorrect\n(e.g. not in a DEV block or not immediately before the coercion), then\na context-sensitive error message will be reported so that developers\ncan figure out what\'s wrong and how to fix the problem.\nBecause string coercions are now handled by the safe-string-coercion\nrule, the no-primitive-constructor rule no longer flags String()\nusage. It still flags new String(value) because that usage is almost\nalways a bug.\n\nAdd DEV-only string coercion check functions\n\nThis commit adds DEV-only functions to check whether coercing\nvalues to strings using the \'\' + value pattern will throw. If it will\nthrow, these functions will:\n1. Display a console error with a friendly error message describing\n   the problem and the developer can fix it.\n2. Perform the coercion, which will throw. Right before the line where\n   the throwing happens, there\'s a long code comment that will help\n   debugger users (or others looking at the exception call stack) figure\n   out what happened and how to fix the problem.\nOne of these check functions should be called before all string coercion\nof user-provided values, except when the the coercion is guaranteed not\nto throw, e.g.\n* if inside a typeof check like if (typeof value === \'string\')\n* if coercing the result of a unary function like +value or value++\n* if coercing a variable named in a whitelist of numeric identifiers:\n  i, idx, or lineNumber.\nThe new safe-string-coercion internal ESLint rule enforces that\nthese check functions are called when they are required.\nOnly use these check functions in production code that will be bundled\nwith user apps.  For non-prod code (and for production error-handling\ncode), use String(value) instead which may be a little slower but will\nnever throw.\n\nAdd failing tests for string coercion\n\nAdded failing tests to verify:\n* That input, select, and textarea elements with value and defaultValue\n  set to Temporal-like objects which will throw when coerced to string\n  using the \'\' + value pattern.\n* That text elements will throw for Temporal-like objects\n* That dangerouslySetInnerHTML will not throw for Temporal-like\n  objects because this value is not cast to a string before passing to\n  the DOM.\n* That keys that are Temporal-like objects will throw\nAll tests above validate the friendly error messages thrown.\n\nUse String(value) for coercion in non-prod files\n\nThis commit switches non-production code from \'\' + value (which\nthrows for Temporal objects and symbols) to instead use String(value)\nwhich won\'t throw for these or other future plus-phobic types.\n"Non-produciton code" includes anything not bundled into user apps:\n* Tests and test utilities. Note that I didn\'t change legacy React\n  test fixtures because I assumed it was good for those files to\n  act just like old React, including coercion behavior.\n* Build scripts\n* Dev tools package - In addition to switching to String, I also\n  removed special-case code for coercing symbols which is now\n  unnecessary.\n\nAdd DEV-only string coercion checks to prod files\n\nThis commit adds DEV-only function calls to to check if string coercion\nusing \'\' + value will throw, which it will if the value is a Temporal\nobject or a symbol because those types can\'t be added with +.\nIf it will throw, then in DEV these checks will show a console error\nto help the user undertsand what went wrong and how to fix the\nproblem. After emitting the console error, the check functions will\nretry the coercion which will throw with a call stack that\'s easy (or\nat least easier!) to troubleshoot because the exception happens right\nafter a long comment explaining the issue. So whether the user is in\na debugger, looking at the browser console, or viewing the in-browser\nDEV call stack, it should be easy to understand and fix the problem.\nIn most cases, the safe-string-coercion ESLint rule is smart enough to\ndetect when a coercion is safe. But in rare cases (e.g. when a coercion\nis inside a ternary) this rule will have to be manually disabled.\nThis commit also switches error-handling code to use String(value)\nfor coercion, because it\'s bad to crash when you\'re trying to build\nan error message or a call stack!  Because String() is usually\ndisallowed by the safe-string-coercion ESLint rule in production\ncode, the rule must be disabled when String() is used.', 'DevTools encoding supports multibyte characters (e.g. "🟩") (#22424)\nChanges our text encoding approach to properly support multibyte characters following this algorithm. Based on benchmarking, this new approach is roughly equivalent in terms of performance (sometimes slightly faster, sometimes slightly slower).\nI also considered using TextEncoder/TextDecoder for this, but it was much slower (~85%).', 'Rename onReadyToStream to onCompleteShell (#22443)', "Make root.unmount() synchronous  (#22444)\n\nMove flushSync warning to React DOM\n\nWhen you call in flushSync from an effect, React fires a warning. I've\nmoved the implementation of this warning out of the reconciler and into\nReact DOM.\nflushSync is a renderer API, not an isomorphic API, because it has\nbehavior that was designed specifically for the constraints of React\nDOM. The equivalent API in a different renderer may not be the same.\nFor example, React Native has a different threading model than the\nbrowser, so it might not make sense to expose a flushSync API to the\nJavaScript thread.\n\nMake root.unmount() synchronous\n\nWhen you unmount a root, the internal state that React stores on the\nDOM node is immediately cleared. So, we should also synchronously\ndelete the React tree. You should be able to create a new root using\nthe same container.", 'Add isArray in devTools utils (#22438)', 'prevent unused exec getCurrentValue after re-render (#22442)', 'Remove usereducer eager bailout (#22445)\n\n\nFork dispatchAction for useState/useReducer\n\n\nRemove eager bailout from forked dispatchReducerAction, update tests\n\n\nUpdate eager reducer/state logic to handle state case only\n\n\nsync reconciler fork\n\n\nrename test\n\n\ntest cases from #15198\n\n\ncomments on new test cases\n\n\ncomments on new test cases\n\n\ntest case from #21419\n\n\nminor tweak to test name to kick CI\n\n', "[Fizz/Flight] Remove reentrancy hack (#22446)\n\n\nRemove reentrant check from Fizz/Flight\n\n\nMake startFlowing explicit in Flight\n\n\nThis is already an explicit call in Fizz. This moves flowing to be explicit.\nThat way we can avoid calling it in start() for web streams and therefore\navoid the reentrant call.\n\nAdd regression test\n\nThis test doesn't actually error due to the streams polyfill not behaving\nlike Chrome but rather according to spec.\n\nUpdate the Web Streams polyfill\n\nNot that we need this but just in case there are differences that are fixed.", 'Scheduling Profiler: Show Suspense resource .displayName (#22451)', "Extract queueing logic into shared functions (#22452)\nAs a follow up to #22445, this extracts the queueing logic that is\nshared between dispatchSetState and dispatchReducerAction into\nseparate functions. It likely doesn't save any bytes since these will\nget inlined, anyway, but it does make the flow a bit easier to follow.", "[Fizz/Flight] Pass in Destination lazily to startFlowing instead of in createRequest (#22449)\n\n\nPass in Destination lazily in startFlowing instead of createRequest\n\n\nDelay fatal errors until we have a destination to forward them to\n\n\nFlow can now be inferred by whether there's a destination set\n\n\nWe can drop the destination when we're not flowing since there's nothing to\nwrite to.\nFatal errors now close once flowing starts back up again.\n\nDefer fatal errors in Flight too\n", 'Call get snapshot in useSyncExternalStore server shim (#22453)\n\n\nCall getSnapshot in shim\n\n\njust change useSyncExternalStoreServer\n\n\nremove builtInAPI Check in useSyncExternalStoreClient\n\n', 'React DevTools 4.18.0 -> 4.19.0 (#22461)', '[DevTools] Commands for internal builds all follow :fb convention (#22463)', 'Release pooled cache reference in complete/unwind (#22464)', 'Fixed Link on Documentation (#22465)', "CodeSandbox CI: Fall back to local build (#22473)\nThe download-experimental-build script has been flaky on CodeSandbox\nCI, I think because of GitHub rate limiting.\nUntil we figure out how to fix that, I've updated it to fall back to a\nlocal build.", 'DevTools: Fixed potential cache miss when insepcting elements (#22472)', '[DevTools] Extension reports logged events when feature flag is enabled (#22475)', '[DevTools] Enable logger for internal build of DevTools extensions (#22476)', '[RFC] Codemod invariant -> throw new Error (#22435)\n\nHoist error codes import to module scope\n\nWhen this code was written, the error codes map (codes.json) was\ncreated on-the-fly, so we had to lazily require from inside the visitor.\nBecause codes.json is now checked into source, we can import it a\nsingle time in module scope.\n\nMinify error constructors in production\n\nWe use a script to minify our error messages in production. Each message\nis assigned an error code, defined in scripts/error-codes/codes.json.\nThen our build script replaces the messages with a link to our\nerror decoder page, e.g. https://reactjs.org/docs/error-decoder.html/?invariant=92\nThis enables us to write helpful error messages without increasing the\nbundle size.\nRight now, the script only works for invariant calls. It does not work\nif you throw an Error object. This is an old Facebookism that we don\'t\nreally need, other than the fact that our error minification script\nrelies on it.\nSo, I\'ve updated the script to minify error constructors, too:\nInput:\n  Error(A ${adj} message that contains ${noun});\nOutput:\n  Error(formatProdErrorMessage(ERR_CODE, adj, noun));\nIt only works for constructors that are literally named Error, though we\ncould add support for other names, too.\nAs a next step, I will add a lint rule to enforce that errors written\nthis way must have a corresponding error code.\n\nMinify "no fallback UI specified" error in prod\n\nThis error message wasn\'t being minified because it doesn\'t use\ninvariant. The reason it didn\'t use invariant is because this particular\nerror is created without begin thrown — it doesn\'t need to be thrown\nbecause it\'s located inside the error handling part of the runtime.\nNow that the error minification script supports Error constructors, we\ncan minify it by assigning it a production error code in\nscripts/error-codes/codes.json.\nTo support the use of Error constructors more generally, I will add a\nlint rule that enforces each message has a corresponding error code.\n\nLint rule to detect unminified errors\n\nAdds a lint rule that detects when an Error constructor is used without\na corresponding production error code.\nWe already have this for invariant, but not for regular errors, i.e.\nthrow new Error(msg). There\'s also nothing that enforces the use of\ninvariant besides convention.\nThere are some packages where we don\'t care to minify errors. These are\npackages that run in environments where bundle size is not a concern,\nlike react-pg. I added an override in the ESLint config to ignore these.\n\nTemporarily add invariant codemod script\n\nI\'m adding this codemod to the repo temporarily, but I\'ll revert it\nin the same PR. That way we don\'t have to check it in but it\'s still\naccessible (via the PR) if we need it later.\n\n[Automated] Codemod invariant -> Error\n\nThis commit contains only automated changes:\nnpx jscodeshift -t scripts/codemod-invariant.js packages --ignore-pattern="node_modules/*/"\nyarn linc --fix\nyarn prettier\nI will do any manual touch ups in separate commits so they\'re easier\nto review.\n\nRemove temporary codemod script\n\nThis reverts the codemod script and ESLint config I added temporarily\nin order to perform the invariant codemod.\n\nManual touch ups\n\nA few manual changes I made after the codemod ran.\n\nEnable error code transform per package\n\nCurrently we\'re not consistent about which packages should have their\nerrors minified in production and which ones should.\nThis adds a field to the bundle configuration to control whether to\napply the transform. We should decide what the criteria is going\nforward. I think it\'s probably a good idea to minify any package that\ngets sent over the network. So yes to modules that run in the browser,\nand no to modules that run on the server and during development only.', '[DevTools] Log basic usage events (#22478)', 'React DevTools 4.19.0 -> 4.19.1 (#22480)', 'Show different error boundary UI for timeouts than normal errors (#22483)', 'Reopen #22481 Fixed modal closing issue (#22484)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Sync hydrate discrete events in capture phase and dont replay discrete events (#22448)', 'fix: useSyncExternalStoreExtra (#22500)\n\n\nmove setting memoizedSnapshot\n\n\nRevert "move setting memoizedSnapshot"\n\n\nThis reverts commit f01320689cebfcbc4f3a53208f879ed4a8d6613d.\n\n\nadd failed tests\n\n\nRevert "Revert "move setting memoizedSnapshot""\n\n\nThis reverts commit cb43c4fdc6b0dcab3480f27d6fbbb3137dbc47bb.', 'Add new Jest --compact-console flag for DevTools tests (#22495)', 'Remove duplicate error code (#22513)', "[Fizz/Flight] pipeToNodeWritable(..., writable).startWriting() -> renderToPipeableStream(...).pipe(writable) (#22450)\n\n\nRename pipeToNodeWritable to renderToNodePipe\n\n\nAdd startWriting API to Flight\n\n\nWe don't really need it in this case because there's way less reason to\ndelay the stream in Flight.\n\n\nPass the destination to startWriting instead of renderToNode\n\n\nRename startWriting to pipe\n\n\nThis mirrors the ReadableStream API in Node\n\n\nError codes\n\n\nRename to renderToPipeableStream\n\n\nThis mimics the renderToReadableStream API for the browser.", "Test that discrete events that aren't hydratable do not propagate (#22502)\n\n\ntest that discrete events that arent hydratable do not propagate\n\n\nlint\n\n\nfeedback\n\n\nfeedback\n\n\nlint\n\n\nbetter test\n\n\nnits\n\n\nlint\n\n", 'Added Devtools Extension link for Microsoft Edge (#22515)', '[DevTools] Register logger for standalone DevTools (#22524)', 'React DevTools 4.19.1 -> 4.19.2', '[DevTools] Update Fiber logic in backend renderer to match implementation in React (#22527)\n\n\n[DevTools] Update isMountedImpl to match implementation in React\n\n\nAlso sync findCurrentFiberUsingSlowPathById\n\n', 'duplicate value in variable (#22390)', 'Update test and stack frame code to support newer V8 stack formats (#22477)', 'Enabled scheduling profiler marks for React Native FB target (#22544)', 'Surface backend errors during inspection in the frontend UI (#22546)', 'Bugfix: Nested useOpaqueIdentifier references (#22553)\n\nHandle render phase updates explicitly\n\nWe fire a warning in development if a component is updated during\nthe render phase (with the exception of local hook updates, which have\ntheir own defined behavior).\nBecause it\'s not a supported React pattern, we don\'t have that many\ntests that trigger this path. But it is meant to have reasonable\nsemantics when it does happen, so that if it accidentally ships to\nproduction, the app doesn\'t crash unnecessarily. The behavior is not\nsuper well-defined, though.\nThere are also some internal React implementation details that\nintentionally to rely on this behavior. Most prominently, selective\nhydration and useOpaqueIdentifier.\nI need to tweak the behavior of render phase updates slightly as part\nof a fix for useOpaqueIdentifier. This shouldn\'t cause a user-facing\nchange in behavior outside of useOpaqueIdentifier, but it does require\nthat we explicitly model render phase updates.\n\nBugfix: Nested useOpaqueIdentifier calls\n\nFixes an issue where multiple useOpaqueIdentifier hooks are upgraded\nto client ids within the same render.\nThe way the upgrade works is that useOpaqueIdentifier schedules a\nrender phase update then throws an error to trigger React\'s error\nrecovery mechanism.\nThe normal error recovery mechanism is designed for errors that occur\nas a result of interleaved mutations, so we usually only retry a single\ntime, synchronously, before giving up.\nuseOpaqueIdentifier is different because the error its throws when\nupgrading is not caused by an interleaved mutation. Rather, it happens\nwhen an ID is referenced for the first time inside a client-rendered\ntree (i.e. sommething that wasn\'t part of the initial server render).\nThe fact that it relies on the error recovery mechanism is an\nimplementation detail. And a single recovery attempt may be\ninsufficient. For example, if a parent and a child component may\nreference different ids, and both are mounted as a result of the same\nclient update, that will trigger two separate error recovery attempts.\nBecause render phase updates are not allowed when triggered from\nuserspace\xa0— we log a warning in developement to prevent them —\nwe can assume that if something does update during the render phase, it\nis one of our "legit" implementation details like useOpaqueIdentifier.\nSo we can keep retrying until we succeed — up to a limit, to protect\nagainst inifite loops. I chose 50 since that\'s the limit we use for\ncommit phase updates.', 'Enable experimental Cache API in www TestRenderer (#22554)', 'Allow to use the Profiler when no client is connected in standalone DevTools (#22551)', 'Improved Workers filenames in devtools-core (#22559)', 'Prevent errors/crashing when multiple installs of DevTools are present (#22517)\nSummary\nThis commit is a proposal for handling duplicate installation of DevTools, in particular scoped to duplicates such as a dev build or the internal versions of DevTools installed alongside the Chrome Web Store extension.\nSpecifically, this commit makes it so when another instance of the DevTools extension is installed alongside the extension installed from the Chrome Web Store, we don\'t produce a stream of errors or crash Chrome, which is what would usually happen in this case. \nDetecting Duplicate Installations\n\nFirst, we check what type of installation the extension is: from the Chrome Web Store, the internal build of the extension, or a local development build.\nIf the extension is from the Chrome Web Store:\nDuring initialization, we first check if the internal or local builds of the extension have already been installed and are enabled. To do this, we send a cross-extension message to the internal and local builds of the extension using their extension IDs.  \nWe can do this because the extension ID for the internal build (and for the Chrome Web Store) is a stable ID.\nFor the local build, at build time we hardcode a key in the manifest.json which allows us to have a stable ID even for local builds.\n\n\nIf we detect that the internal or local extensions are already installed, then we skip initializing the current extension altogether so as to not conflict with the other versions. This means we don\'t initialize the frontend or the backend at all.\nIf the extension is the Internal Build:\nDuring initialization, we first check if the local builds of the extension has already been installed and is enabled. To do this, we send a cross-extension message to the local build of the extension using its extension ID.  \nWe can do this for the local build because at build time we hardcode a key in the manifest.json which allows us to have a stable ID even for local builds.\n\n\nIf we detect that the local extension is already installed, then we skip initializing the current extension altogether so as to not conflict with the that  version. This means we don\'t initialize the frontend or the backend at all.\nIf the extension is a Local Dev Build:\nSince other extensions check for the existence of this extension and disable themselves if they detect it, we don\'t need any special handling during initialization and assume that there are no duplicate extensions. This means that we will generally prefer keeping this extension enabled.\n\nThis behavior means that the order of priority for keeping an extension enabled is the following:\n\nLocal build\nInternal build\nPublic build\n\nPreventing duplicate backend initialization\nNote that the backend is injected and initialized by the content script listening to a message posted to the inspected window (via postMessage). Since the content script will be injected twice, once each by each instance of the extension, even if we initialize the extension once, both content scripts would still receive the single message posted from the single frontend, and it would then still inject and initialize the backend twice. \nIn order to prevent this, we also add the extension ID to the message for injecting the backend. That way each content script can check if the message comes from its own extension, and if not it can ignore the message and avoid double injecting the backend.\nOther approaches\n\nI considered using the chrome.management API generally to detect other installations, but that requires adding additional permissions to our production extension, which didn\'t seem ideal.\nI also considered a few options of writing a special flag to the inspected window and checking for it before initializing the extension. However, it\'s hard to avoid race conditions in that case, and it seemed more reliable to check specifically for the WebStore extension, which is realistically where we would encounter the overlap.\n\nRollout\n\nThis commit needs to be published and rolled out to the Chrome Web Store first.\nAfter this commit is published to the Chrome Web Store, any duplicate instances of the extension that are built and installed after this commit will no longer conflict with the Chrome Web Store version.\n\nNext Steps\n\nIn a subsequent PR, I will extend this code to show a warning when duplicate extensions have been detected.\n\nPart of #22486\nHow did you test this change?\nBasic Testing\n\nyarn flow\nyarn test\nyarn test-build-devtools\n\nDouble installation testing\nTesting double-installed extensions for this commit is tricky because we are relying on the extension ID of the internal and Chrome Web Store extensions, but we obviously can\'t actually test the Web Store version (since we can\'t modify the already published version).\nIn order to simulate duplicate extensions installed, I did the following process:\n\nBuilt separate extensions where I hardcoded a constant for whether the extension is internal or public (e.g. EXTENSION_INSTALLATION_TYPE = \'internal\'). Then I installed these built extensions corresponding to the "internal" and "Web Store" builds.\nBuild and run the regular development extension (with yarn build:chrome:dev && yarn test:chrome), using the extension IDs of the previously built extensions as the "internal" and "public" extension IDs.\n\nWith this set up in place, I tested the following on pages both with and without React:\n\nWhen only the local extension enabled, DevTools works normally.\nWhen only the "internal" extension enabled, DevTools works normally.\nWhen only the "public" extension enabled, DevTools works normally.\nWhen "internal" and "public" extensions are installed, "public" extension is disabled and "internal" extension works normally.\nWhen the local extension runs alongside the other extensions, other extensions disable themselves and local build works normally.\nWhen we can\'t recognize what type of build the extension corresponds to, we show an error.\nWhen all 3 extensions are installed and enabled in all different combinations, DevTools no longer produces errors or crashes Chrome, and works normally.\n', 'Enable scheduling profiler for RN FB profiling builds (#22566)', 'Reattachment of the splash page event listeners (#22558) (#22560)', 'Show warning in UI when duplicate installations of DevTools extension are detected (#22563)', 'DevTools prepare release script resets patch version when bumping minor (#22568)', 'React DevTools 4.19.2 -> 4.20.2 (#22569)', 'Only show DevTools warning about unrecognized build in Chrome (#22571)', "Support disabling spurious act warnings with a global environment flag (#22561)\n\nExtract act environment check into function\n\nact checks the environment to determine whether to fire a warning.\nWe're changing how this check works in React 18. As a first step, this\nrefactors the logic into a single function. No behavior changes yet.\n\nUse IS_REACT_ACT_ENVIRONMENT to disable warnings\n\nIf IS_REACT_ACT_ENVIRONMENT is set to false, we will suppress\nany act warnings. Otherwise, the behavior of act is the same as in\nReact 17: if jest is defined, it warns.\nIn concurrent mode, the plan is to remove the jest check and only warn\nif IS_REACT_ACT_ENVIRONMENT is true. I have not implemented that\npart yet.", 'Replace global jest heuristic with IS_REACT_ACT_ENVIRONMENT (#22562)\n\nRemove jest global check in concurrent roots\n\nIn concurrent mode, instead of checking jest, we check the new\nIS_REACT_ACT_ENVIRONMENT global. The default behavior is false.\nLegacy mode behavior is unchanged.\nReact\'s own internal test suite use a custom version of act that works\nby mocking the Scheduler — rather than the "real" act used publicly. So\nwe don\'t enable the flag in our repo.\n\nWarn if act is called in wrong environment\n\nAdds a warning if act is called but IS_REACT_ACT_ENVIRONMENT is not\nenabled. The goal is to prompt users to correctly configure their\ntesting environment, so that if they forget to use act in a different\ntest, we can detect and warn about.\nIt\'s expected that the environment flag will be configured by the\ntesting framework. For example, a Jest plugin. We will link to the\nrelevant documentation page, once it exists.\nThe warning only fires in concurrent mode. Legacy roots will keep the\nexisting behavior.', 'Enable cache in test renderer (#22580)', "Hydrate using SuspenseComponent as the parent (#22582)\n\n\nAdd a failing test for Suspense hydration\n\n\nInclude salazarm's changes to the test\n\n\nThe hydration parent of a suspense boundary should be the boundary itself\n\n\nThis eventually got set when we popped back out of its children but it\ndoesn't start out that way.\nThis fixes it so that the boundary parent is always the suspense boundary.\n\nWe now need to log errors with a suspense boundary as a parent\n\nFor now, we just log this with commentNode.parentNode as the parent for\npurposes of the error message.\n\nMake a special getFirstHydratableChildWithinSuspenseInstance\n\nWe currently call getNextHydratableSibling but conceptually it's the child\nof the boundary. It just happens to be that when we use comment nodes, we\nneed to call nextSibling in the DOM.\nThis makes this separation a bit clearer.\n\nSync old fork\n\nCo-authored-by: Dan Abramov dan.abramov@me.com", 'DevTools: Include Edge in browser name detection (#22584)', 'React DevTools 4.20.0 -> 4.20.1 (#22583)', "Upgrade useInsertionEffect to stable (#22589)\n@huozhi tried this out and says it's working as expected. I think we\ncan go ahead and move this into the stable channel, so that it is\navailable in the React 18 alpha releases.", 'DevTools: Fix passing extensionId in evaled postMessage calls (#22590)', "Clear extra nodes if there's a hydration mismatch within a suspense boundary  (#22592)\n\nClear extra nodes if there's a mismatch within a suspense boundary\n\nThis usually happens when we exit out a DOM node but a suspense boundary\nis a virtual DOM node and we didn't do it in that case because we took a\nshort cut by calling resetHydrationState directly since we know we won't\nneed to pop.\n\nTighten up the types of getFirstHydratableChild\n\nWe currently call getFirstHydratableChild to step into the children of\na suspense boundary. This can be a text node or a suspense boundary\nwhich isn't compatible with getFirstHydratableChild, and we cheat the type.\nThis accidentally works because .firstChild always returns null on those\nnodes in the DOM.\nThis just makes that explicit.", 'Support nonce option to be passed to inline scripts (#22593)', '[Fizz] Add option to inject bootstrapping script tags after the shell is injected (#22594)\n\nAdd option to inject bootstrap scripts\n\nThese are emitted right after the shell as flushed.\n\n\nUpdate ssr fixtures to use bootstrapScripts instead of manual script tag\n\n\nAdd option to FB renderer too\n\n', 'Dev Tools: Relax constraint on passing extensionId for backend init (#22597)', 'React DevTools 4.20.1 -> 4.20.2 (#22605)', 'Fix typos (#22494)', 'Scheduling Profiler: De-emphasize React internal frames (#22588)\nThis commit adds code to all React bundles to explicitly register the beginning and ending of the module. This is done by creating Error objects (which capture the file name, line number, and column number) and passing them explicitly to a DevTools hook (when present).\nNext, as the Scheduling Profiler logs metadata to the User Timing API, it prints these module ranges along with other metadata (like Lane values and profiler version number).\nLastly, the Scheduling Profiler UI compares stack frames to these ranges when drawing the flame graph and dims or de-emphasizes frames that fall within an internal module.\nThe net effect of this is that user code (and 3rd party code) stands out clearly in the flame graph while React internal modules are dimmed.\nInternal module ranges are completely optional. Older profiling samples, or ones recorded without the React DevTools extension installed, will simply not dim the internal frames.', "Scheduling Profiler: Add marks for component effects (mount and unmount) (#22578)\nDevTools (and its profilers) should not require users to be familiar with React internals. Although the scheduling profiler includes a CPU sample flame graph, it's there for advanced use cases and shouldn't be required to identify common performance issues.\nThis PR proposes adding new marks around component effects. This will enable users to identify components with slow effect create/destroy functions without requiring them to dig through the call stack. (Once #22529 lands, these new marks will also include component stacks, making them more useful still.)\nFor example, here's a profile with a long-running effect. Without this change, it's not clear why the effects phase takes so long. After this change, it's more clear why that the phase is longer because of a specific component.\nWe may consider adding similar marks around render phase hooks like useState, useReducer, useMemo. I avoided doing that in this PR because it would be a pretty pervasive change to the ReactFiberHooks file.\nNote that this change should have no effect on production bundles since everything is guarded behind a profiling feature flag.\nGoing to tag more people than I normally would for this pR, since it touches both reconciler and DevTools packages. Feel free to ignore though if you don't have strong feelings.\nNote that although this PR adds new marks to the scheduling profiler, it's done in a way that's backwards compatible for older profiles.", 'Scheduling Profiler does not warn about long transitions (#22614)', 'Initial implementation of cache cleanup (#22510)\nThis is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.\nAn overview of the high-level changes:\n\nChanges the Cache type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly "active references" to the cache instances - more below), and an AbortController.\nAdds a new public API, unstable_getCacheSignal(): AbortSignal, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the \'abort\' event on the signal, which React now triggers when a given cache instance is no longer referenced. \nNote that AbortSignal is a web standard that is supported by other platform APIs; for example a signal can be passed to fetch() to trigger cancellation of an HTTP request.\nImplements the above - triggering the \'abort\' event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.\n\nCases handled:\n* Aborted transitions: we clean up a new cache created for an aborted transition\n* Suspense: we retain a fresh cache instance until a suspended tree resolves\nFor follow-ups:\n* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.\n* If a refresh is cancelled, the fresh cache should be cleaned up.', 'Expand act warning to cover all APIs that might schedule React work (#22607)\n\nMove isActEnvironment check to function that warns\n\nI\'m about to fork the behavior in legacy roots versus concurrent roots\neven further, so I\'m lifting this up so I only have to fork once.\n\nLift mode check, too\n\nSimilar to previous commit. I only want to check this once. Not for\nperformance reasons, but so the logic is easier to follow.\n\nExpand act warning to include non-hook APIs\n\nIn a test environment, React warns if an update isn\'t wrapped with act\n— but only if the update originates from a hook API, like useState.\nWe did it this way for backwards compatibility with tests that were\nwritten before the act API was introduced. Those tests didn\'t require\nact, anyway, because in a legacy root, all tasks are synchronous except\nfor useEffect.\nHowever, in a concurrent root, nearly every task is asynchronous. Even\ntasks that are synchronous may spawn additional asynchronous work. So\nall updates need to be wrapped with act, regardless of whether they\noriginate from a hook, a class, a root, or any other type of component.\nThis commit expands the act warning to include any API that triggers\nan update.\nIt does not currently account for renders that are caused by a Suspense\npromise resolving; those are modelled slightly differently from updates.\nI\'ll fix that in the next step.\nI also removed the check for whether an update is batched. It shouldn\'t\nmatter, because even a batched update can spawn asynchronous work, which\nneeds to be flushed by act.\nThis change only affects concurrent roots. The behavior in legacy roots\nis the same.\n\nExpand act warning to include Suspense resolutions\n\nFor the same reason we warn when an update is not wrapped with act,\nwe should warn if a Suspense promise resolution is not wrapped with act.\nBoth "pings" and "retries".\nLegacy root behavior is unchanged.', 'Remove warning for dangling passive effects (#22609)\nIn legacy mode, a test can get into a situation where passive effects are\n"dangling" — an update finished, and scheduled some passive effects,\nbut the effects don\'t flush.\nThis is why React warns if you don\'t wrap updates in act. The act API is\nresponsible for flushing passive effects. But there are some cases where\nthe act API (in legacy roots) intentionally doesn\'t warn, like updates\nthat originate from roots and classes. It\'s possible those updates will\nrender children that contain useEffect. Because of this, dangling\neffects are still possible, and React doesn\'t warn about it.\nSo we implemented a second act warning for dangling effects.\nHowever, in concurrent roots, we now enforce that all APIs that schedule\nReact work must be wrapped in act. There\'s no scenario where dangling\npassive effects can happen that doesn\'t already trigger the warning for\nupdates. So the dangling effects warning is redundant.\nThe warning was never part of a public release. It was only enabled\nin concurrent roots.\nSo we can delete it.', 'chore: fix comment typo (#22615)', 'fix passing strings as chunks (#22617)', "Enable 'Reload and Start Profiling' for Microsoft Edge (#22631)", 'Revert logic for checking for duplicate installations of DevTools (#22638)\n\nRevert "Only show DevTools warning about unrecognized build in Chrome (#22571)"\n\nThis reverts commit b72dc8e9300f5ae997f7f5cfcd79b604cca3df0c.\n\nRevert "Show warning in UI when duplicate installations of DevTools extension are detected (#22563)"\n\nThis reverts commit 930c9e7eeb4c9721e1b8dee074c2eef4d1eae5dc.\n\nRevert "Prevent errors/crashing when multiple installs of DevTools are present (#22517)"\n\nThis reverts commit 545d4c2de7934a43b0c5d3ce050d77b4c3113bd3.\n\n\nRemove all references to passing extensionId in postMessage\n\n\nKeep build changes\n\n\nlint\n\n', 'DevTools supports ENV-injected version for better internal bug reports (#22635)', 'Reapply changes from #22631 (#22645)', "Follow-up improvements to error code extraction infra (#22516)\n\nOutput FIXME during build for unminified errors\n\nThe invariant Babel transform used to output a FIXME comment if it\ncould not find a matching error code. This could happen if there were\na configuration mistake that caused an unminified message to\nslip through.\nLinting the compiled bundles is the most reliable way to do it because\nthere's not a one-to-one mapping between source modules and bundles. For\nexample, the same source module may appear in multiple bundles, some\nwhich are minified and others which aren't.\nThis updates the transform to output the same messages for Error calls.\nThe source lint rule is still useful for catching mistakes during\ndevelopment, to prompt you to update the error codes map before pushing\nthe PR to CI.\n\nDon't run error transform in development\n\nWe used to run the error transform in both production and development,\nbecause in development it was used to convert invariant calls into\nthrow statements.\nNow that don't use invariant anymore, we only have to run the\ntransform for production builds.\n\nAdd ! to FIXME comment so Closure doesn't strip it\n\nDon't love this solution because Closure could change this heuristic,\nor we could switch to a differnt compiler that doesn't support it. But\nit works.\nCould add a bundle that contains an unminified error solely for the\npurpose of testing it, but that seems like overkill.\n\nAlternate extract-errors that scrapes artifacts\n\nThe build script outputs a special FIXME comment when it fails to minify\nan error message. CI will detect these comments and fail the workflow.\nThe comments also include the expected error message. So I added an\nalternate extract-errors that scrapes unminified messages from the\nbuild artifacts and updates codes.json.\nThis is nice because it works on partial builds. And you can also run it\nafter the fact, instead of needing build all over again.\n\nDisable error minification in more bundles\n\nNot worth it because the number of errors does not outweight the size\nof the formatProdErrorMessage runtime.\n\nRun extract-errors script in CI\n\nThe lint_build job already checks for unminified errors, but the output\nisn't super helpful.\nInstead I've added a new job that runs the extract-errors script and\nfails the build if codes.json changes. It also outputs the expected\ndiff so you can easily see which messages were missing from the map.\n\nReplace old extract-errors script with new one\n\nDeletes the old extract-errors in favor of extract-errors2", "Upgrade useSyncExternalStore to alpha channel (#22662)\n\nMove useSyncExternalStore shim to a nested entrypoint\n\nAlso renames useSyncExternalStoreExtra to\nuseSyncExternalStoreWithSelector.\n\n'use-sync-external-store/shim' -> A shim for useSyncExternalStore\n  that works in React 16 and 17 (any release that supports hooks). The\n  module will first check if the built-in React API exists, before\n  falling back to the shim.\n'use-sync-external-store/with-selector' -> An extended version of\n  useSyncExternalStore that also supports selector and isEqual\n  options. It does not shim use-sync-external-store; it composes the\n  built-in React API. Use this if you only support 18+.\n'use-sync-external-store/shim/with-selector' -> Same API, but it\n  composes use-sync-external-store/shim instead. Use this for\n  compatibility with 16 and 17.\n\n'use-sync-external-store' -> Re-exports React's built-in API. Not\n  meant to be used. It will warn and direct users to either the shim or\n  the built-in API.\n\n\nUpgrade useSyncExternalStore to alpha channel\n\n", 'React DevTools 4.20.2 -> 4.21.0 (#22661)', 'Pin CI to Node 14 (#22665)\nCI starting running Node 16, which breaks some of our tests because\nthe error message text for undefined property access has changed.\nWe should pin to Node 14 until we are able to update the messages.', "Re-land #22292 (remove uMS from open source build) (#22664)\nI had to revert #22292 because there are some internal callers of\nuseMutableSource that we haven't migrated yet. This removes\nuseMutableSource from the open source build but keeps it in the\ninternal one.", "useId (#22644)\n\n\nAdd useId to dispatcher\n\n\nInitial useId implementation\n\n\nIds are base 32 strings whose binary representation corresponds to the\nposition of a node in a tree.\nEvery time the tree forks into multiple children, we add additional bits\nto the left of the sequence that represent the position of the child\nwithin the current level of children.\n00101       00010001011010101\n╰─┬─╯       ╰───────┬───────╯\n\nFork 5 of 20       Parent id\nThe leading 0s are important. In the above example, you only need 3 bits\nto represent slot 5. However, you need 5 bits to represent all the forks\nat the current level, so we must account for the empty bits at the end.\nFor this same reason, slots are 1-indexed instead of 0-indexed.\nOtherwise, the zeroth id at a level would be indistinguishable from\nits parent.\nIf a node has only one child, and does not materialize an id (i.e. does\nnot contain a useId hook), then we don't need to allocate any space in\nthe sequence. It's treated as a transparent indirection. For example,\nthese two trees produce the same ids:\n<>                          <>\n   \n \n \n\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\nthat does not fork would be indistinguishable from its child id. For\nexample, this tree does not fork, but the parent and child must have\ndifferent ids.\n\n\n\nTo handle this scenario, every time we materialize an id, we allocate a\nnew level with a single slot. You can think of this as a fork with only\none prong, or an array of children with length 1.\nIt's possible for the the size of the sequence to exceed 32 bits, the\nmax size for bitwise operations. When this happens, we make more room by\nconverting the right part of the id to a string and storing it in an\noverflow variable. We use a base 32 string representation, because 32 is\nthe largest power of 2 that is supported by toString(). We want the base\nto be large so that the resulting ids are compact, and we want the base\nto be a power of 2 because every log2(base) bits corresponds to a single\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\nthe end 5 at a time without affecting the final result.\n\nIncremental hydration\n\nStores the tree context on the dehydrated Suspense boundary's state\nobject so it resume where it left off.\n\n\nAdd useId to react-debug-tools\n\n\nAdd selective hydration test\n\n\nDemonstrates that selective hydration works and ids are preserved even\nafter subsequent client updates.", 'Remove @flow pragma comment from module registration start/stop templates (#22670)', 'Remove experimental useOpaqueIdentifier API (#22672)\nuseId is the updated version of this API.', 'Upgrade useId to alpha channel (#22674)', 'Improved workers filenames in devtools-inline (#22676)', 'Fix DevTools advanced tooltip display conditional check (#22669)', "Fix useId in strict mode (#22681)\n\nFix: useId in strict mode\n\nIn strict mode, renderWithHooks is called twice to flush out\nside effects.\nModying the tree context (pushTreeId and pushTreeFork) is effectful,\nso before this fix, the tree context was allocating two slots for a\nmaterialized id instead of one.\nTo address, I lifted those calls outside of renderWithHooks. This\nis how I had originally structured it, and it's how Fizz is structured,\ntoo. The other solution would be to reset the stack in between the calls\nbut that's also a bit weird because we usually only ever reset the\nstack during unwind or complete.\n\nAdd test for render phase updates\n\nNoticed this while fixing the previous bug", '[DevTools] Add open in editor for fb (#22649)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Rename (some) "scheduling profiler" references to "timeline" (#22690)', 'Renamed packages/react-devtools-scheduling-profiler to packages/react-devtools-timeline (#22691)', 'Fix module-boundary wrappers (#22688)', 'Cleaned up remaining "scheduling profiler" references in DevTools (#22696)', 'Fix small typos (#22701)', 'devtools: Display root type for root updates in "what caused this update?" (#22599)', 'Delete unused Circle CI scripts. (#22710)', 'Timeline: Improved snapshot view (#22706)', 'fix(devtools): expose css vars to reach-ui portal components (#22716)', 'fix(devtools): accept json file in import fileinput (#22717)', 'Changelog for eslint-plugin-react-hooks@4.3.0', 'eslint-plugin-react-hooks@4.3.0', "Throw on hydration mismatch and force client rendering if boundary hasn't suspended within concurrent root (#22629)\n\n\nThrow on hydration mismatch\n\n\nremove debugger\n\n\nupdate error message\n\n\nupdate error message part2...\n\n\nfix test?\n\n\ntest? :(\n\n\ntests 4real\n\n\nremove useRefAccessWarning gating\n\n\nsplit markSuspenseBoundary and getNearestBoundary\n\n\nalso assert html is correct\n\n\nreplace-fork\n\n\nalso remove client render flag on suspend\n\n\nreplace-fork\n\n\nfix mismerge????\n\n", '[React Refresh] support typescript namespace syntax (#22621)\n\n\n[React Refresh] support typescript namespace syntax\n\n\n[React Refresh] handle nested namespace\n\n\nCo-authored-by: Wang Yilin wang_yil@worksap.co.jp', 'react-refresh@0.11.0', 'Add Scheduling Profiler GK link to Timeline UI for FB build (#22730)\nThis is a constant source of confusion for FB engineers trying to figure out why Chrome profiling data does not have any React marks.', 'Filter empty commits (all Fibers bailed out) from Profiler (#22745)', "DevTools should properly report re-renders due to (use)context changes (#22746)\nNote that this only fixes things for newer versions of React (e.g. 18 alpha). Older versions will remain broken because there's not a good way to read the most recent context value for a location in the tree after render has completed. This is because React maintains a stack of context values during render, but by the time DevTools is called– render has finished and the stack is empty.", 'Add runtime type checks around module boundary code (#22748)', 'Re-enable useMutableSource in internal RN (#22750)', "devtools: dont restore profiling data if we're profling (#22753)", 'fix typos (#22715)', 'chore: fix comment typo (#22657)', 'fix typos (#22288)', 'fix : grammatical typo for test description (#22764)\n\n\nfix : grammatical typo for test description\n\n\nfix linting issues\n\n', 'Fixed typos (#22763)\n\n\nFixed typos\n\n\nUpdate ReactFiberWorkLoop.new.js\n\n\nUpdate ReactFiberWorkLoop.old.js\n\n', "Move SuspenseList to experimental channel (#22765)\nThere's more work to be done to implement this correctly on the server,\nso we're going to wait to release it until an 18.x minor.", 'Bump 18 from alpha to beta (#22766)', 'Allow publishing with beta tag (#22768)', 'Proof of Concept for E2E tests using playwright (#22754)', 'Move unstable_scheduleHydration to ReactDOMHydrationRoot (#22455)\n\n\nmove unstable_scheduleHydration to ReactDOMHydrationRoot\n\n\nmove definition of schedule hydration\n\n\nfix test?\n\n\nprototype\n\n\nfix test\n\n\nremove gating because unstable_scheduleHydration is no longer gated through index.stable.js because its exposed through ReactDOMHydrationRoot instead of the ReactDOM package\n\n\nremove another gating\n\n', "Remove 'packages/shared/invariant.js' (#22779)", 'Remove unused react-internal/invariant-args ESLint rule. (#22778)', 'Use globalThis if possible for native fetch in browser build (#22777)', 'Add test selectors to experimental build (#22760)\nThis change adds a new "react-dom/unstable_testing" entry point but I believe its contents will exactly match "react-dom/index" for the stable build. (The experimental build will have the added new selector APIs.)', 'fix(typo): Esacpe -> Escape (#22780)', 'Flag for client render fallback behavior on hydration mismatch (#22787)\n\n\nAdd flag for new client-render fallback behavior on hydration mismatch\n\n\ngate test\n\n\ngate tests too\n\n\nfix test gating\n\n', 'Fix Node package.json ./ exports deprecation warning (#22783)', 'Migrate from CLIEngine to the new ESLint class. (#22756)\n\n\nMigrate from CLIEngine to the new ESLint class.\n\n\nfix output property\n\n', 'chore(fast-refresh): double check wasMounted (#22740)', 'Revert "Fix Node package.json ./ exports deprecation warning (#22783)" (#22792)\nThis reverts commit 8edeb787b001f1b989c812aad6ac04f9d67a41dc.', 'Ensure devtools e2e test use a compatible react-is version (#22790)\n\n\nUpdate lockfile by running yarn install\n\n\nEnsure devtools e2e test use a compatible react-is version\n\n', 'Ensure react-is version used for resolution for playwright is installed (#22813)', 'Update deprecated features in ESLint configuration files. (#22767)', 'treat empty string as null (#22807)', 'fix: document can be null, not just undefined (#22695)', "Update attribute-behavior fixture (#22522)\n\n\nFix missing key warning\n\n\nAdd build instructions\n\n\nUpdate interpretation now that React 17 is latest stable and 18 is next\n\n\nIgnore ReactDOM.render deprecation warning\n\n\nEnsure a server implementation with renderToString is used\n\n\nUpdate AttributeTableSnapshot\n\n\nEnsure Popover doesn't overflow\n\n", 'Add imageSizes and imageSrcSet to know props (#22550)\n\n\nfeat(react-dom): Add imageSrcSet\n\n\nfeat(react-dom): Add imageSizes\n\n', 'update ReactFlightWebpackPlugin to be compatiable with webpack v5 (#22739)', 'DevTools: Log version in internal logger (#22825)', 'Remove unused flag (#22854)', "Decouple dispatching from attemptToDispatchEvent (#22851)\n\n\nDecoupled dispatching from attemptToDispatchEvent\n\n\nRemove unnecessary field\n\n\nIt is unnecessary because it's only true when retval is null.", 'Fork dispatch function based on the flag (#22852)\n\n\nFork function based on a flag\n\n\nPrune false branches\n\n\nCo-authored-by: Marco Salazar salazarm@fb.com', 'Track currently replaying event (#22853)\n\nTrack currently replaying event\n\nCo-authored-by: Dan Abramov dan.abramov@me.com\n\nAdd warnings\n\nCo-authored-by: Marco Salazar salazarm@fb.com', 'Replay capture phase for continuous events (#22856)\nCo-authored-by: Dan Abramov dan.abramov@me.com\nCo-authored-by: Marco Salazar salazarm@fb.com', "Implement identifierPrefix option for useId (#22855)\nWhen an identifierPrefix option is given, React will add it to the\nbeginning of ids generated by useId.\nThe main use case is to avoid conflicts when there are multiple React\nroots on a single page.\nThe server API already supported an identifierPrefix option. It's not\nonly used by useId, but also for React-generated ids that are used to\nstitch together chunks of HTML, among other things. I added a\ncorresponding option to the client.\nYou must pass the same prefix option to both the server and client.\nEventually we may make this automatic by sending the prefix from the\nserver as part of the HTML stream.", 'Timeline search (#22799)\nRefactor SearchInput component (used in Components tree) to be generic DevTools component with two uses: ComponentSearchInput and TimelineSearchInput.\nRefactored Timeline Suspense to more closely match other, newer Suspense patterns (e.g. inspect component, named hooks) and colocated Susepnse code in timelineCache file.\nAdd search by component name functionality to the Timeline. For now, searching zooms in to the component measure and you can step through each time it rendered using the next/previous arrows.', 'enable continuous replay flag (#22863)', '[DevTools] Emit new event when DevTools connects in standalone app (#22848)', 'Test showing that a mismatch at the root recovers with client render but shows loading state (#22873)\n\n\nrm console.log\n\n\ngate test\n\n\nmove test\n\n\nshow fallback state\n\n', 'Remove hydrate option from createRoot (#22878)\n\n\nremove hydrate: true option\n\n\nremove missed comment\n\n\nlint\n\n\nwarning\n\n\ncircumvent flow\n\n', 'StyleX plug-in for resolving atomic styles to values for props.xstyle (#22808)\nAdds the concept of "plugins" to the inspected element payload. Also adds the first plugin, one that resolves StyleX atomic style names to their values and displays them as a unified style object (rather than a nested array of objects and booleans).\nSource file names are displayed first, in dim color, followed by an ordered set of resolved style values.\nFor builds with the new feature flag disabled, there is no observable change.\nA next step to build on top of this could be to make the style values editable, but change the logic such that editing one directly added an inline style to the item (rather than modifying the stylex class– which may be shared between multiple other components).', "Add CI job to check npm dependencies (#22881)\nChecks that if one React package depends on another, the current\nversion satisfies the given dependency range.\nThat way we don't forget to bump dependencies when we release a\nnew version.", "Don't override use-sync-external-store peerDeps (#22882)\nUsually the build script updates transitive React dependencies so that\nthey refer to the corresponding release version.\nFor use-sync-external-store, though, we also want to support older\nversions of React, too. So the normal behavior of the build script\nisn't sufficient.\nFor now, to unblock, I hardcoded a special case, but we should consider\na better way to handle this in the future.", 'Fix peer deps for use-sync-external-store\nMerged last PR too quickly', "Fix: Don't skip writing updated package.json\nAnother fix to previous commit. The special case for\nuse-sync-external-store still needs to write out the updated\npackage.json, because we also use that branch to update the\nversion field.", 'Add custom element property support behind a flag (#22184)\n\n\ncustom element props\n\n\ncustom element events\n\n\nuse function type for on*\n\n\ntests, htmlFor\n\n\nclassName\n\n\nfix ReactDOMComponent-test\n\n\nstarted on adding feature flag\n\n\nadded feature flag to all feature flag files\n\n\neverything passes\n\n\ntried to fix getPropertyInfo\n\n\nused @gate and experimental\n\n\nremove flag gating for test which already passes\n\n\nfix onClick test\n\n\nadd EXPERIMENTAL to www flags, rename eventProxy\n\n\nAdd innerText and textContent to reservedProps\n\n\nEmit warning when assigning to read only properties in client\n\n\nRevert "Emit warning when assigning to read only properties in client"\n\n\nThis reverts commit 1a093e584ce50e2e634aa743e04f9cb8fc2b3f7d.\n\n\nEmit warning when assigning to read only properties during hydration\n\n\nyarn prettier-all\n\n\nGate hydration warning test on flag\n\n\nFix gating in hydration warning test\n\n\nFix assignment to boolean properties\n\n\nReplace _listeners with random suffix matching\n\n\nImprove gating for hydration warning test\n\n\nAdd outerText and outerHTML to server warning properties\n\n\nremove nameLower logic\n\n\nfix capture event listener test\n\n\nAdd coverage for changing custom event listeners\n\n\nyarn prettier-all\n\n\nyarn lint --fix\n\n\nreplace getCustomElementEventHandlersFromNode with getFiberCurrentPropsFromNode\n\n\nRemove previous value when adding event listener\n\n\nflow, lint, prettier\n\n\nAdd dispatchEvent to make sure nothing crashes\n\n\nAdd state change to reserved attribute tests\n\n\nAdd missing feature flag test gate\n\n\nReimplement SSR changes in ReactDOMServerFormatConfig\n\n\nTest hydration for objects and functions\n\n\nadd missing test gate\n\n\nremove extraneous comment\n\n\nAdd attribute->property test\n\n', 'Bump beta -> rc', "Use next as prerelease label\nInstead of rc, which is redundant since it's in the next version\nnumber already.", 'Remove unstableAvoidThisFallback from OSS (#22884)\n\n\navoidThisFallbackFlag\n\n\navoidThisFallback flag\n\n\nmissed a spot\n\n\nrm gating\n\n', 'DevTools should inject itself for XHTML pages too (not just HTML) (#22932)', "Advocate for StrictMode usage within Components tree (#22886)\nAdds the concept of subtree modes to DevTools to bridge protocol as follows:\n1. Add-root messages get two new attributes: one specifying whether the root is running in strict mode and another specifying whether the root (really the root's renderer) supports the concept of strict mode.\n2. A new backend message type (TREE_OPERATION_SET_SUBTREE_MODE). This type specifies a subtree root (id) and a mode (bitmask). For now, the only mode this message deals with is strict mode.\nThe DevTools frontend has been updated as well to highlight non-StrictMode compliant components.\nThe changes to the bridge protocol require incrementing the bridge protocol version number, which will also require updating the version of react-devtools-core backend that is shipped with React Native.", '[DevTools] Log errors occurring or reported to the frontend (#22948)', 'DevTools: Correctly log errors reported from the store (#22950)', 'DevTools: Support mulitple DevTools instances per page (#22949)\nThis is being done so that we can embed DevTools within the new React (beta) docs.\nThe primary changes here are to react-devtools-inline/backend:\n* Add a new createBridge API\n* Add an option to the activate method to support passing in the custom bridge object.\nThe react-devtools-inline README has been updated to include these new methods.\nTo verify these changes, this commit also updates the test shell to add a new entry-point for multiple DevTools.\nThis commit also replaces two direct calls to window.postMessage() with bridge.send() (and adds the related Flow types).', 'React DevTools 4.21.0 -> 4.22.0 (#22951)', 'Updated DevTools changelog', "Build both a partial renderer and fizz renderer of the legacy API for FB (#22933)\nThis lets us test how the new architecture performs without comparing it to\nother infra changes related to streaming.\nI renamed the streaming one to ReactDOMServerStreaming so the references\nin www need to be updated.\nI'll open an adhoc sync with just those files.", 'Re-added deleted files array to react-devtools package.json (#22960)', 'Revert changes to react-devtools-inline Webpack config from PR #22760 (#22961)', 'React DevTools 4.22.0 -> 4.22.1 (#22962)', 'react-devtools-inline README updates (#22967)', 'Refactored DevTools test shell for e2e (#22968)\nFixes a regression in the e2e target and makes things easier (hopefully) going forward when adding new e2e tests.', "Remove unnecessary clearContainer call (#22979)\nThis was added when we added error recovery for hydration errors. However,\nwhen the fix up pass happens later on, it'll still call clearContainer in\nthe commit phase. So this call is unnecessary.", "Use ReactDOM Test Selector API in DevTools e2e tests (#22978)\nBuilds on top of the existing Playwright tests to plug in the test selector API: https://gist.github.com/bvaughn/d3c8b8842faf2ac2439bb11773a19cec\nMy goals in doing this are to...\n1. Experiment with the new API to see what works and what doesn't.\n2. Add some test selector attributes (and remove DOM-structure based selectors).\n3. Focus the tests on DevTools itself (rather than the test app).\nI also took this opportunity to add a few new test cases– like named hooks, editable props, component search, and profiling- just to play around more with the Playwright API.\nRelates to issue #22646", '22988 - Fix Bug: @license header in React 18 bundles contains vundefined (#23004)\n\nFix Bug: @license header in React 18 bundles contains vundefined\nRemove React version from the header comment\n', 'DevTools: Only show StrictMode badge on root elements (#23012)\n\nDevTools: Only show StrictMode badge on root elements\n\nShowing an inline non-compliance badge for every element in the tree is noisy. This commit changes it so that we only show inline icons for root elements (although we continue to show an icon for inspected elements regardless).', 'Made the variable name more meaningful (#23017)', 'Fix variable name (#23021)', 'fix: parseExportNamesInto specifiers typo (#22537)', 'Run DevTools e2e tests on Circle CI (#23019)', 'Correct typing errors detected in several files (#22965)\n\nCorrect spelling errors in several files\nCorrect typos in devtools-shared package files\n', 'Console message fixed for devtools (#23067)', 'Update package.json (#22954)', 'add enableTransitionTracing feature flag (#23079)\nThis PR adds the enableTransitionTracing feature flag', "Add exports field to react-refresh's package.json (#23087)\n\n\nAdd exports field to react-refresh's package.json\n\n\nUpdate package.json\n\n\nAdd runtime to exports\n\n", 'Add --no-show-signature to "git show" commands (#23038)\n\nAdd --no-show-signature to "git show" commands.\n\nThis fixes errors if the user has configured the following in their ~/.gitconfig:\n[log]\nshowSignature = true\n\nyarn prettier-all\n', "Allow functions to be passed to custom element setters (#23042)\nThis is part of the new custom element features that were implemented\nhere:\nhttps://github.com/facebook/react/commit/24dd07bd269590ee5024b7f0f1906887d256ea86\nWhen a custom element has a setter for a property and passes the in\nheuristic, the value passed to the react property should be assigned\ndirectly to the custom element's property, regardless of the type of the\nvalue. However, it was discovered that this isn't working with\nfunctions. This patch makes it work with functions.\nFixes https://github.com/facebook/react/issues/23041", 'Add RN_FB bundles for react-is (#23101)\n\n\nAdd RN_FB bundles for react-is\n\n\nUpdate packaging.js\n\n\nAdd ReactNativeInternalFeatureFlags to externals\n\n', 'Refactored how React/DevTools log Timeline performance data (#23102)\nUntil now, DEV and PROFILING builds of React recorded Timeline profiling data using the User Timing API. This commit changes things so that React records this data by calling methods on the DevTools hook. (For now, DevTools still records that data using the User Timing API, to match previous behavior.)\nThis commit is large but most of it is just moving things around:\n\nNew methods have been added to the DevTools hook (in "backend/profilingHooks") for recording the Timeline performance events.\nReconciler\'s "ReactFiberDevToolsHook" has been updated to call these new methods (when they\'re present).\nUser Timing method calls in "SchedulingProfiler" have been moved to DevTools "backend/profilingHooks" (to match previous behavior, for now).\nThe old reconciler tests, "SchedulingProfiler-test" and "SchedulingProfilerLabels-test", have been moved into DevTools "TimelineProfiler-test" to ensure behavior didn\'t change unexpectedly.\nTwo new methods have been added to the injected renderer interface: injectProfilingHooks() and getLaneLabelMap().\n\nRelates to #22529.', 'Fix setState ignored in Safari when iframe is added to DOM in the same commit (#23111)\n\n\nFix setState being ignored in Safari\n\n\nAdd a regression test\n\n\nAdd comment\n\n', 'Enable scheduling profiler flag in react-dom/testing builds (#23142)', "Fix context propagation for offscreen/fallback trees (#23095)\n\nFailing test for Context.Consumer in suspended Suspense\n\nSee issue #19701.\n\n\nFix context propagation for offscreen trees\n\n\nAddress nits\n\n\nSpecify propagation root for Suspense too\n\n\nPass correct propagation root\n\n\nHarden test coverage\n\n\nThis test will fail if we remove propagation, or if we propagate with a root node like fiber.return or fiber.return.return. The additional DEV-only error helps detect a different kind of mistake, like if the thing being passed hasn't actually been encountered on the way up. However, we still leave the actual production loop to check against null so that there is no way we loop forever if the propagation root is wrong.\n\nRemove superfluous warning\n\nCo-authored-by: overlookmotel theoverlookmotel@gmail.com", 'Fix change events for custom elements (#22938)\n\n\nBypass react event system for custom elements\n\n\nGoing to try fixing react event system instead\n\n\nfinally got it to call onChange, but perhaps too many times\n\n\nupdate test\n\n\nRemoved ReactDOMComponent changes, now works but still doubles for bubbles\n\n\nMaybe i should only support bubbling events\n\n\nremoved some old stuff\n\n\ncleaned up changeeventplugin stuff\n\n\nprettier, lint\n\n\nremoved changeeventplugin stuff\n\n\nremove unneeded gate for onInput test\n\n\nGo back to using ChangeEventPlugin\n\n\nAdd input+change test\n\n\nlint\n\n\nMove logic to shouldUseChangeEvent\n\n\nuse memoizedProps instead of pendingProps\n\n\nRun form control behavior before custom element behavior\n\n\nadd bubbling test\n\n\nforgot to append container to body\n\n\nadd child event target test\n\n\nexpand  test expectations\n\n\nMake tests more realistic\n\n\nAdd extra test\n\n\nAdd missing gating\n\n\nActually fix gating\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'Warn when a callback ref returns a function (#23145)', 'Include other build types when building for CodeSandbox CI (#23152)', 'Fix production-only updateSyncExternalStore() crash when doing setState in render (#23150)\n\n\nUpdate ReactFiberHooks.new.js\n\n\nAdd regression test + replace-fork\n\n\nPrettier\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com', "Don't inject timeline hooks unless React supports profiling (#23151)\nThis gives DevTools a way to detect whether the current React renderer supports Timeline profiling. (Version alone isn't enough to detect this, neither is general profiling support– since these two are controlled by different feature flags.)", 'DevTools: Add Jest snapshot serializer for number formatting (#23139)\nNumbers in JavaScript can have precision issues due to how they are encoded. This shows up in snapshot tests sometimes with values like 0.0009999999999999992, which makes the tests hard to read and visually diff.\nThis PR adds a new snapshot serializers which clamps numbers at 3 decimal points (e.g. the above number 0.0009999999999999992 is serialized as 0.001). This new serializer does not impact non-numeric values, integers, and special numbers like NaN and Infinity.', "Filter out deleted components that are added to the updaters list (#23156)\nThere was a bug that occurred when a destroy effect is called that causes an update. The update would be added to the updaters list even though the fiber that was calling the destroy effect was unmounted and no longer exists. This PR:\n\nAdds a patch to Devtools to filter out all in the update list that aren't in the fiberToIDMap (which contains all fibers currently on screen)\n", 'styles: replace Array.isArray with module isArray (#23154)', 'Prettier', 'DevTools should not crawl unmounted subtrees when profiling starts (#23162)\nPreviously we crawled all subtrees, even not-yet-mounted ones, to initialize context values. This was not only unecessary, but it also caused an error to be thrown. This commit adds a test and fixes that behavior.', 'React DevTools 4.22.1 -> 4.23.0', 'Fix context providers in SSR when handling multiple requests (#23171)\n\n\nadd failing test for renderToPipeableStream\n\n\nFix context providers in SSR when handling multiple requests. Closes #23089\n\n\nAdd sibling regression test\n\n\nCo-authored-by: zhuyi01 zhuyi01@ke.com\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'Gracefully handle empty "xstyle" prop values (#23190)', 'Suppress act() warnings in DevTools tests (#23192)\nThese warnings are not useful for DevTools tests– and sometimes may mask other, important warnings. This commit disables them.', 'Readme fixes (#23187)\n\nreadme: fix contributing guide links\n', 'DevTools: Timeline profiler refactor\nRefactor DevTools to record Timeline data (in memory) while profiling. Updated the Profiler UI to import/export Timeline data along with legacy profiler data.\nRelates to issue #22529', '[Hydration] Fallback to client render if server rendered extra nodes (#23176)\n\n\nrename\n\n\nrename\n\n\nreplace-fork\n\n\nrename\n\n\nwarn in a loop\n\n', 'Remove main from scheduler index.js', 'Revert 4f5449', 'Disable avoidThisFallback support in Fizz  (#23224)\n\n\ndisable fizz avoidThisFallback support\n\n\ntrue\n\n', 'Remove logic for multiple error recovery attempts (#23227)\nThis deletes some internal behavior that was only used by\nuseOpaqueIdentifier, as an implementation detail: if an update is\nscheduled during the render phase, and something threw an error, we\nwould try rendering again, either until there were no more errors or\nuntil there were no more render phase updates. This was not a publicly\ndefined behavior — regular render phase updates are accompanied by\na warning.\nBecause useOpaqueIdentifier has been replaced by useId, and does not\nrely on this implementation detail, we can delete this code.', "Add onRecoverableError option to hydrateRoot, createRoot (#23207)\n\n[RFC] Add onHydrationError option to hydrateRoot\n\nThis is not the final API but I'm pushing it for discussion purposes.\nWhen an error is thrown during hydration, we fallback to client\nrendering, without triggering an error boundary. This is good because,\nin many cases, the UI will recover and the user won't even notice that\nsomething has gone wrong behind the scenes.\nHowever, we shouldn't recover from these errors silently, because the\nunderlying cause might be pretty serious. Server-client mismatches are\nnot supposed to happen, even if UI doesn't break from the users\nperspective. Ignoring them could lead to worse problems later. De-opting\nfrom server to client rendering could also be a significant performance\nregression, depending on the scope of the UI it affects.\nSo we need a way to log when hydration errors occur.\nThis adds a new option for hydrateRoot called onHydrationError. It's\nsymmetrical to the server renderer's onError option, and serves the\nsame purpose.\nWhen no option is provided, the default behavior is to schedule a\nbrowser task and rethrow the error. This will trigger the normal browser\nbehavior for errors, including dispatching an error event. If the app\nalready has error monitoring, this likely will just work as expected\nwithout additional configuration.\nHowever, we can also expose additional metadata about these errors, like\nwhich Suspense boundaries were affected by the de-opt to client\nrendering. (I have not exposed any metadata in this commit; API needs\nmore design work.)\nThere are other situations besides hydration where we recover from an\nerror without surfacing it to the user, or notifying an error boundary.\nFor example, if an error occurs during a concurrent render, it could be\ndue to a data race, so we try again synchronously in case that fixes it.\nWe should probably expose a way to log these types of errors, too. (Also\nnot implemented in this commit.)\n\nLog all recoverable errors\n\nThis expands the scope of onHydrationError to include all errors that\nare not surfaced to the UI (an error boundary). In addition to errors\nthat occur during hydration, this also includes errors that recoverable\nby de-opting to synchronous rendering. Typically (or really, by\ndefinition) these errors are the result of a concurrent data race;\nblocking the main thread fixes them by prevents subsequent races.\nThe logic for de-opting to synchronous rendering already existed. The\nonly thing that has changed is that we now log the errors instead of\nsilently proceeding.\nThe logging API has been renamed from onHydrationError\nto onRecoverableError.\n\nDon't log recoverable errors until commit phase\n\nIf the render is interrupted and restarts, we don't want to log the\nerrors multiple times.\nThis change only affects errors that are recovered by de-opting to\nsynchronous rendering; we'll have to do something else for errors\nduring hydration, since they use a different recovery path.\n\nOnly log hydration error if client render succeeds\n\nSimilar to previous step.\nWhen an error occurs during hydration, we only want to log it if falling\nback to client rendering succeeds. If client rendering fails,\nthe error will get reported to the nearest error boundary, so there's\nno need for a duplicate log.\nTo implement this, I added a list of errors to the hydration context.\nIf the Suspense boundary successfully completes, they are added to\nthe main recoverable errors queue (the one I added in the\nprevious step.)\n\nLog error with queueMicrotask instead of Scheduler\n\nIf onRecoverableError is not provided, we default to rethrowing the\nerror in a separate task. Originally, I scheduled the task with\nidle priority, but @sebmarkbage made the good point that if there are\nmultiple errors logs, we want to preserve the original order. So I've\nswitched it to a microtask. The priority can be lowered in userspace\nby scheduling an additional task inside onRecoverableError.\n\nOnly use host config method for default behavior\n\nRedefines the contract of the host config's logRecoverableError method\nto be a default implementation for onRecoverableError if a user-provided\none is not provided when the root is created.\n\nLog with reportError instead of rethrowing\n\nIn modern browsers, reportError will dispatch an error event, emulating\nan uncaught JavaScript error. We can do this instead of rethrowing\nrecoverable errors in a microtask, which is nice because it avoids any\nsubtle ordering issues.\nIn older browsers and test environments, we'll fall back\nto console.error.\n\nNaming nits\n\nqueueRecoverableHydrationErrors -> upgradeHydrationErrorsToRecoverable", 'update node.js version for CI (#23236)', 'Revert "update node.js version for CI (#23236)" (#23239)\nThis reverts commit 1d7728bf9daebb7e04f13fc13bb595c12caae46d.', 'Add back warning with component stack on Hydration mismatch (#23241)\n\n\nadd back warning\n\n\nwrapper errorMock in DEV flag\n\n\nlint\n\n', 'React Native raw event EventEmitter - intended for app-specific perf listeners and debugging (#23232)\n\n\nRawEventEmitter: new event perf profiling mechanism outside of Pressability to capture all touch events, and other event types\n\n\nsync\n\n\nconcise notation\n\n\nMove event telemetry event emitter call from Plugin to ReactFabricEventEmitter, to reduce reliance on the plugin system and move the emit call further into the core\n\n\nBackout changes to ReactNativeEventPluginOrder\n\n\nProperly flow typing event emitter, and emit event to two channels: named and catchall\n\n\nfix typing for event name string\n\n\nfix typing for event name string\n\n\nfix flow\n\n\nAdd more comments about how the event telemetry system works\n\n\nAdd more comments about how the event telemetry system works\n\n\nrename to RawEventTelemetryEventEmitterOffByDefault\n\n\nyarn prettier-all\n\n\nrename event\n\n\ncomments\n\n\nimprove flow types\n\n\nrenamed file\n\n', 'Add exports field to react-dom (#23252)\nThis configures the exports field for react-dom.\nNotably there are some conditions for the /server entry point where we pick\nthe export based on environments. Most environments now support Web Streams\nwhich is preferred in those environments.\nWe already do this using the "browser" field so the "browser" condition\napplies here too.\nI don\'t think it\'s necessary, but I also specified "worker" explicitly\nsince this is for Service Workers and those are often targeted with\nWeb Pack\'s "webworker" target, which is also what Cloudflare currently\nrecommends.\nI also added "deno" but deno is a bit special because this only works if\nyou run with the node compatibility since otherwise you have to specify\nabsolute URLs for the imports.', "Update the exports field (#23257)\n\nAdd .browser and .node explicit entry points\n\nThis can be useful when the automatic selection doesn't work properly.\n\nRemove react/index\n\nI'm not sure why I added this in the first place. Perhaps due to how our\nbuilds work somehow.\n\nRemove build-info.json from files field\n", "Add onErrorShell Callback (#23247)\nThis indicates that an error has happened before the shell completed and\nthere's no point in emitting the result of this stream.\nThis is not quite the same as other fatal errors that can happen even\nafter streaming as started.\nIt's also not quite the same as onError before onCompleteShell because\nonError can be called for an error inside a Suspense boundary before the\nshell completes.\nImplement shell error handling in Node SSR fixtures\nInstead of hanging indefinitely.\nUpdate Browser Fixture\nExpose onErrorShell to the Node build\nThis API is not Promisified so it's just a separate callback instead.\nPromisify the Browser Fizz API\nIt's now a Promise of a readable stream. The Promise resolves when the\nshell completes. If the shell errors, the Promise is rejected.", "Exclude react-dom/unstable_testing entry point from stable releases (#23258)\n\n\nUse consistent naming for unstable_testing entry point\n\n\nExclude the testing build from non-experimental builds except at FB\n\n\nFB builds shouldn't contribute to whether we include the npm files\n\n\nExclude exports fields if we delete the files entry\n\n\nMove test to no longer be internal so we can test against the build\n\n\nUpdate the bundle artifact names since they've now changed\n\n\nGate import since it doesn't exist\n\n", "Remove path resolution from internal forks plugin (#23255)\nAlternative to #23254\nOur build script has a custom plugin to resolve internal module forks.\nCurrently, it uses require.resolve to resolve the path to a real file\non disk.\nInstead, I've updated all the forked module paths to match their\nlocation on disk, relative to the project root, to remove the need to\nresolve them in the build script's runtime.\nThe main motivation is because require.resolve doesn't work with ESM\nmodules, but aside from that, hardcoding the relative paths is more\npredictable — the Node module resolution algorithm is complicated, and\nwe don't really need its features for this purpose.", 'Remove deprecated wildcard folder mapping (#23256)\n\nRemove deprecated folder mapping\n\nNode v16 deprecated the use of trailing "/" to define subpath folder\nmappings in the "exports" field of package.json.\nThe recommendation is to explicitly list all our exports. We already do\nthat for all our public modules. I believe the only reason we have a\nwildcard pattern is because our package.json files are also used at\nbuild time (by Rollup) to resolve internal source modules that don\'t\nappear in the final npm artifact.\nChanging trailing "/" to "/*" fixes the warnings. See\nhttps://nodejs.org/api/packages.html#subpath-patterns for more info.\nSince the wildcard pattern only exists so our build script has access to\ninternal at build time, I\'ve scoped the wildcard to "/src/*". Because\nour public modules are located outside the "src" directory, this means\ndeep imports of our modules will no longer work: only packages that are\nlisted in the "exports" field.\nThe only two affected packages are react-dom and react. We need to be\nsure that all our public modules are still reachable. I audited the\nexports by comparing the entries to the "files" field in package.json,\nwhich represents a complete list of the files that are included in the\nfinal release artifact.\nAt some point, we should add an e2e packaging test to prevent\nregressions; for now, we should have decent coverage because in CI we\nrun our Jest test suite against the release artifacts.\n\nRemove umd from exports\n\nOur expectation is that if you\'re using the UMD builds, you\'re not\nloading them through a normal module system like require or import.\nInstead you\'re probably copying the files directly or loading them from\na CDN like unpkg.', "Fix wrong context argument to apply\nThe context argument should be the array, not null.\nI wrote a test that I'll include in the next PR.", 'Resolve default onRecoverableError at root init (#23264)\nMinor follow up to initial onRecoverableError PR.\nWhen onRecoverableError is not provided to createRoot, the\nrenderer falls back to a default implementation. Originally I\nimplemented this with a host config method, but what we can do instead\nis pass the default implementation the root constructor as if it were\na user provided one.', 'Fix: Multiple hydration errors in same render (#23273)\nI made a minor mistake in the original onRecoverableError PR that\nonly surfaces if there are hydration errors in two different Suspense\nboundaries in the same render. This fixes it and adds a unit test.', "Allow suspending outside a Suspense boundary (#23267)\n(If the update is wrapped in startTransition)\nCurrently you're not allowed to suspend outside of a Suspense boundary.\nWe throw an error:\n\nA React component suspended while rendering, but no fallback UI\nwas specified\n\nWe treat this case like an error because discrete renders are expected\nto finish synchronously to maintain consistency with external state.\nHowever, during a concurrent transition (startTransition), what we can\ndo instead is treat this case like a refresh transition: suspend the\ncommit without showing a fallback.\nThe behavior is roughly as if there were a built-in Suspense boundary\nat the root of the app with unstable_avoidThisFallback enabled.\nConceptually it's very similar because during hydration you're already\nshowing server-rendered UI; there's no need to replace that with\na fallback when something suspends.", 'add  component boilerplate (#23275)\n\nAdd Tracing Marker component type to React exports\nAdd reconciler work tag\nAdd devtools work tag\nAdd boilerplate for the cache to render children\n\nNo functionality yet', '[Devtools][Transition Tracing] Add Transition callbacks to createRoot (#23276)\n\nAdd the type of transition tracing callbacks\nAdd transition tracing callbacks as an option to createRoot\nAdd transition tracing callbacks on the root\nAdd option to pass transition tracing callbacks to createReactNoop\n', 'Gracefully handle empty "xstyle" prop values (Part 2) (#23279)\n23190 misses if entry is undefined or null. This fixes this issue.', 'Simplify cache pool contexts (#23280)\nThe pooledCache variable always points to either root.pooledCache\nor the stack cursor that is used to track caches that were resumed from\na previous render. We can get rid of it by reading from those instead.\nThis simplifies the code a lot and is harder to mess up, I think.', "Allow suspending in the shell during hydration (#23304)\n\nAllow suspending in the shell during hydration\n\nBuilds on behavior added in #23267.\nInitial hydration should be allowed to suspend in the shell. In\npractice, this happens because the code for the outer shell hasn't\nloaded yet.\nCurrently if you try to do this, it errors because it expects there to\nbe a parent Suspense boundary, because without a fallback we can't\nproduce a consistent tree. However, for non-sync updates, we don't need\nto produce a consistent tree immediately — we can delay the commit\nuntil the data resolves.\nIn #23267, I added support for suspending without a parent boundary if\nthe update was wrapped with startTransition. Here, I've expanded this\nto include hydration, too.\nI wonder if we should expand this even further to include all non-sync/\ndiscrete updates.\n\nAllow suspending in shell for all non-sync updates\n\nInstead of erroring, we can delay the commit.\nThe only time we'll continue to error when there's no parent Suspense\nboundary is during sync/discrete updates, because those are expected to\nproduce a complete tree synchronously to maintain consistency with\nexternal state.", "Switch to client rendering if root receives update (#23309)\nIf a hydration root receives an update before the outermost shell has\nfinished hydrating, we should give up hydrating and switch to\nclient rendering.\nSince the shell is expected to commit quickly, this doesn't happen that\noften. The most common sequence is something in the shell suspends, and\nthen the user quickly navigates to a different screen, triggering a\ntop-level update.\nInstead of immediately switching to client rendering, we could first\nattempt to hydration at higher priority, like we do for updates that\noccur inside nested dehydrated trees.\nBut since this case is expected to be rare, and mainly only happens when\nthe shell is suspended, an attempt at higher priority would likely end\nup suspending again anyway, so it would be wasted effort. Implementing\nit this way would also require us to add a new lane especially for root\nhydration. For simplicity's sake, we'll immediately switch to client\nrendering. In the future, if we find another use case for a root\nhydration lane, we'll reconsider.", "Delete vestigial RetryAfterError logic (#23312)\nThis code was originally added to force a client render after receiving\nan error during hydration. Later we added the ForceClientRender to\nimplement the same behavior, but scoped to an individual Suspense\nboundary instead of all the boundaries in the entire root. So it's\nnow redudant.\nWe had some test coverage already but I added another test specifically\nfor the case of throwing a recoverable hydration error in the shell.", 'Log a recoverable error whenever hydration fails (#23319)\nThere are several cases where hydration fails, server-rendered HTML is\ndiscarded, and we fall back to client rendering. Whenever this happens,\nwe will now log an error with onRecoverableError, with a message\nexplaining why.\nIn some of these scenarios, this is not the only recoverable error that\nis logged. For example, an error during hydration will cause hydration\nto fail, which is itself an error. So we end up logging two separate\nerrors: the original error, and one that explains why hydration failed.\nI\'ve made sure that the original error always gets logged first, to\npreserve the causal sequence.\nAnother thing we could do is aggregate the errors with the Error "cause"\nfeature and AggregateError. Since these are new-ish features in\nJavaScript, we\'d need a fallback behavior. I\'ll leave this for a\nfollow up.', "change ReactBatchConfig.transition\nPreviously, ReactBatchConfig.transition was an number (1 = there is a transition, 0 = there isn't one). This PR changes this to a transition object (object = there is a transition, null = there isn't one) in preparation for transition tracing changes.", 'Disallow comments as DOM containers for createRoot (#23321)\nThis is an old feature that we no longer support. hydrateRoot already\nthrows if you pass a comment node; this change makes createRoot\nthrow, too.\nStill enabled in the Facebook build until we migrate the callers.', 'Land skipUnmountedBoundaries experiment (#23322)\nThis has been rolled out to 10% of Facebook users for months without\nany issues.', 'Enable enableCache on Test Renderer native (#23314)\nCo-authored-by: Dave McCabe davemccabe@fb.com', "Remove dependency on Offscreen Fiber updateQueue for React Cache (#23229)\nWe need to use the Offscreen Fiber's update queue for interaction tracing. This PR removes the optimization that React Cache uses to not need to push and pop the cache in special circumstances and defaults to always pushing and popping the cache as long as there was a previous cache.", "fix getSnapshot warning when a selector returns NaN (#23333)\n\nfix getSnapshot warning when a selector returns NaN\n\nuseSyncExternalStoreWithSelector delegate a selector as\ngetSnapshot of useSyncExternalStore.\n\n\nFiber's use sync external store has a same issue\n\n\nSmall nits\n\n\nWe use Object.is to check whether the snapshot value has been updated,\nso we should also use it to check whether the value is cached.\nCo-authored-by: Andrew Clark git@andrewclark.io", 'Remove public export for unstable-shared-subset.js (#23261)\nThe unstable-shared-subset.js file is not a public module — it\'s a\nprivate module that the "react" package maps to when it\'s accessed from\nthe "react-server" package.\nWe originally added it because it was required to make our Rollup\nconfiguration work, because at the time only "public" modules could act\nas the entry point for a build artifact — that\'s why it\'s prefixed with\n"unstable". We\'ve since updated our Rollup config to support private\nentry points, so we can remove the extra indirection.', "Remove ./src/* export from public build (#23262)\nWe only export the source directory so Jest and Rollup can access them\nduring local development and at build time. The files don't exist in the\npublic builds, so we don't need the export entry, either.", "Re-add reentrancy avoidance (#23342)\n\n\ntests: add failing test to demonstrate bug in ReadableStream implementation\n\n\nRe-add reentrancy avoidance\n\n\nI removed the equivalency of this in #22446. However, I didn't fully\nunderstand the intended semantics of the spec but I understand this better\nnow.\nThe spec is not actually recursive. It won't call pull again inside of a\npull. It might not call it inside startWork neither which the original\nissue avoided. However, it will call pull if you enqueue to the controller\nwithout filling up the desired size outside any call.\nWe could avoid that by returning a Promise from pull that we wait to\nresolve until we've performed all our pending tasks. That would be the\nmore idiomatic solution. That's a bit more involved but since we know\nunderstand it, we can readd the reentrancy hack since we have an easy place\nto detect it. If anything, it should probably throw or log here otherwise.\nI believe this fixes #22772.\nThis includes the test from #22889 but should ideally have one for Fizz.\nCo-authored-by: Josh Larson josh.larson@shopify.com", "Split writeChunk into void and return value (#23343)\nThis function was modeled after Node streams where write returns a boolean\nwhether to keep writing or not. I think we should probably switch this\nup and read desired size explicitly in appropriate places.\nHowever, in the meantime, we don't have to return a value where we're\nnot going to use it. So I split this so that we call writeChunkAndReturn\nif we're going to return the boolean.\nThis should help with the compilation so that they can be inlined.", "Remove Numeric Fallback of Symbols (#23348)\nThis was already defeating the XSS issue that Symbols was meant to protect\nagainst. So you were already supposed to use a polyfill for security.\nWe rely on real Symbol.for in Flight for Server Components so those require\nreal symbols anyway.\nWe also don't really support IE without additional polyfills anyway.", 'Remove createMutableSource from stable exports (#23352)\nI removed useMutableSource in a previous PR but forgot this one.\nWe still export it in the FB builds until we can migrate the internal\ncallers (Recoil).', "Re-arrange main ReactFeatureFlags module (#23350)\n@sebmarkbage and I audited the feature flags file to review the status\nof each feature or experiment. Based on that, I've added some more\ncomments to the main ReactFeatureFlags module and rearranged them\ninto groups.\nI haven't changed the value of any flags, yet. There are a few we're\ngoing to land but I'll do them as separate PRs.", "Land warnOnSubscriptionInsideStartTransition flag (#23353)\nWe're including this in 18. The feature was already enabled — this just\nremoves the flag.", "Remove object-assign polyfill (#23351)\n\nRemove object-assign polyfill\n\nWe really rely on a more modern environment where this is typically\npolyfilled anyway and we don't officially support IE with more extensive\npolyfilling anyway. So all environments should have the native version\nby now.\n\nUse shared/assign instead of Object.assign in code\n\nThis is so that we have one cached local instance in the bundle.\nIdeally we should have a compile do this for us but we already follow\nthis pattern with hasOwnProperty, isArray, Object.is etc.\n\nTransform Object.assign to now use shared/assign\n\nWe need this to use the shared instance when Object.spread is used.", "Revert to client render on text mismatch (#23354)\n\nRefactor warnForTextDifference\n\nWe're going to fork the behavior of this function between concurrent\nroots and legacy roots.\nThe legacy behavior is to warn in dev when the text mismatches during\nhydration. In concurrent roots, we'll log a recoverable error and revert\nto client rendering. That means this is no longer a development-only\nfunction — it affects the prod behavior, too.\nI haven't changed any behavior in this commit. I only rearranged the\ncode slightly so that the dev environment check is inside the body\ninstead of around the function call. I also threaded through an\nisConcurrentMode argument.\n\nRevert to client render on text content mismatch\n\nExpands the behavior of enableClientRenderFallbackOnHydrationMismatch to\ncheck text content, too.\nIf the text is different from what was rendered on the server, we will\nrecover the UI by falling back to client rendering, up to the nearest\nSuspense boundary.", 'Warn if renderSubtreeIntoContainer is called (#23355)\nWe already warn for all the other legacy APIs. Forgot to enable\nthis one.', "Add warnings for common root API mistakes (#23356)\nFor createRoot, a common mistake is to pass JSX as the second argument,\ninstead of calling root.render.\nFor hydrateRoot, a common mistake is to forget to pass children as\nthe second argument.\nThe type system will enforce correct usage, but since not everyone uses\ntypes we'll log a helpful warning, too.", 'Add more warnings for second argument to root.render. (#23358)\nWe already had one for callbacks but containers is also an easy mistake.', "[DevTools][Transition Tracing] onTransitionComplete and onTransitionStart implmentation (#23313)\n\nadd transition name to startTransition\n\nAdd a transitionName to start transition, store the transition start time and name in the batch config, and pass it to the root on render\n\n\nTransition Tracing Types and Consts\n\n\nRoot begin work\n\n\nThe root operates as a tracing marker that has all transitions on it. This PR only tested the root with one transition so far\n\n\nStore transitions in memoizedState. Do this in updateHostRoot AND attemptEarlyBailoutIfNoScheduledUpdate. We need to do this in the latter part because even if the root itself doesn't have an update, it could still have new transitions in its transitionLanes map that we need to process.\n\n\nTransition Tracing commit phase\n\n\nadds a module scoped pending transition callbacks object that contains all transition callbacks that have not yet been processed. This  contains all callbacks before the next paint occurs.\n\nAdd code in the mutation phase to:\n        * For the root, if there are transitions that were initialized during this commit in the root transition lanes map, add a transition start call to the pending transition callbacks object. Then, remove the transitions from the root transition lanes map.\n        * For roots, in the commit phase, add a transition complete call\n\nWe add this code in the mutation phase because we can't add it to the passive phase because then the paint might have occurred before we even know which callbacks to call\n\nProcess Callbacks after paint\n\nAt the end of the commit phase, call scheduleTransitionCallbacks to schedule all pending transition callbacks to be called after paint. Then clear the callbacks", 'Add : to beginning and end of every useId (#23360)\nThe ids generated by useId are unique per React root. You can create\nadditional ids by concatenating them with locally unique strings.\nTo support this pattern, no id will ever be a subset of another id. We\nachieve this by adding a special character to the beginning and end.\nWe use a colon (":") because it\'s uncommon — even if you don\'t prefix\nthe ids using the identifierPrefix option, collisions are unlikely.\nOne downside of a colon is that it\'s not a valid character in DOM\nselectors, like querySelectorAll. We think this is probably\nfine because it\'s not a common use case in React, and there are\nworkarounds or alternative solutions. But we\'re open to reconsidering\nthis in the future if there\'s a compelling argument.', "Deprecate renderToNodeStream (and fix textarea bug) (#23359)\n\n\nDeprecate renderToNodeStream\n\n\nUse renderToPipeableStream in tests instead of renderToNodeStream\n\n\nThis is the equivalent API. This means that we have way less test coverage\nof this API but I feel like that's fine since it has a deprecation warning\nin it and we have coverage on renderToString that is mostly the same.\n\nFix textarea bug\n\nThe test changes revealed a bug with textarea. It happens because we\ncurrently always insert trailing comment nodes. We should optimize that\naway. However, we also don't really support complex children so we\nshould toString it anyway which is what partial renderer used to do.\n\nUpdate tests that assert number of nodes\n\nThese tests are unnecessarily specific about number of nodes.\nI special case these, which these tests already do, because they're good\ntests to test that the optimization actually works later when we do\nfix it.", 'Update error message for suspending at sync priority (#23361)\nInstead of adding a new Suspense boundary, the default recommendation\nis to wrap the suspending update with startTransition.', 'Bump versions to prepare for rc.1 (#23362)', "useId: Use 'H' to separate main id from hook index (#23363)\nNo id should be a subset of any other id. Currently, this is not true\nwhen there are multiple hooks in the same component. We append the\nhook index to the end of the id, except for the first one. So you get\nthis pattern.\nBefore this change:\n\n1st hook's id: :R0:\n2nd hook's id: :R0:1:\n\nThe first hook's id is a subset of all the other ids in the\nsame component.\nThe fix for this is to use a different character to separate the main\nid from the hook index. I've chosen a captial 'H' for this because\ncapital letters are not part of the base 32 character set when encoding\nwith toString(32).\nAfter this change:\n\n1st hook's id: :R0:\n2nd hook's id: :R0H1:\n", "Fix false positive hydration warnings (#23364)\n\n\nFailing test for react#23331\n\n\nDon't warn on hydration mismatch if suspended\n\n\nWhen something suspends during hydration, we continue rendering the\nsiblings to warm up the cache and fire off any lazy network requests.\nHowever, if there are any mismatches while rendering the siblings, it's\nlikely a false positive caused by the earlier suspended component. So\nwe should suppress any hydration warnings until the tree no\nlonger suspends.\nFixes #23332\nCo-authored-by: Marcel Laverdet marcel@laverdet.com", "Add back skipUnmountedBoundaries flag only for www (#23383)\nThere are a few internal tests that still need to be updated, so I'm\nadding this flag back for www only.\nThe desired behavior rolled out to 10% public, so we're confident there\nare no issues.\nThe open source behavior remains (skipUnmountedBoundaries = true).", "Remove flushControlled from experimental releases (#23384)\nThis brings the exports on npm to parity which simplifies things a bit.\nWe also don't plan to release this. It is used by Draft.js but that caller\nwill need to switch to flushSync.", 're-trigger load events for img elements on commit (#23316)\nearly load events will be missed by onLoad handlers if they trigger before the tree is committed\nto avoid this we reset the src property on the img element to cause the browser to re-load\nthe img.\nCo-authored-by: Josh Story story@hey.com', 'Remove hacky stream.locked check, declare as byte stream instead (#23387)\nWe used to check for stream.locked in pull to see if we\'ve been passed to\nsomething that reads yet.\nThis was a bad hack because it won\'t actually call pull again if that changes.\nThe source of this is because the default for "highWaterMark" is 1 on some\nstreams. So it always wants to add one "chunk" (of size 1).\nIf we leave our high water mark as 0, we won\'t fill up any buffers unless we\'re\nasked for more.\nThis web API is somewhat odd because it would be way more efficient if it\njust told us how much the recipient wants instead of calling us once per\nchunk.\nAnyway, I turns out that if we define ourselves as a "bytes" type of\nstream, the default also happens to be a high water mark of 0 so we can\njust use that instead.', 'Move createRoot/hydrateRoot to react-dom/client (#23385)\n\nMove createRoot/hydrateRoot to /client\n\nWe want these APIs ideally to be imported separately from things you\nmight use in arbitrary components (like flushSync). Those other methods\nare "isomorphic" to how the ReactDOM tree is rendered. Similar to hooks.\nE.g. importing flushSync into a component that only uses it on the client\nshould ideally not also pull in the entry client implementation on the\nserver.\nThis also creates a nicer parity with /server where the roots are in a\nseparate entry point.\nUnfortunately, I can\'t quite do this yet because we have some legacy APIs\nthat we plan on removing (like findDOMNode) and we also haven\'t implemented\nflushSync using a flag like startTransition does yet.\nAnother problem is that we currently encourage these APIs to be aliased by\n/profiling (or unstable_testing). In the future you don\'t have to alias\nthem because you can just change your roots to just import those APIs and\nthey\'ll still work with the isomorphic forms. Although we might also just\nuse export conditions for them.\nFor that all to work, I went with a different strategy for now where the\nreal API is in / but it comes with a warning if you use it. If you instead\nimport /client it disables the warning in a wrapper. That means that if you\nalias / then import /client that will inturn import the alias and it\'ll\njust work.\nIn a future breaking changes (likely when we switch to ESM) we can just\nremove createRoot/hydrateRoot from / and move away from the aliasing\nstrategy.\n\n\nUpdate tests to import from react-dom/client\n\n\nFix fixtures\n\n\nUpdate warnings\n\n\nAdd test for the warning\n\n\nUpdate devtools\n\n\nChange order of react-dom, react-dom/client alias\n\n\nI think the order matters here. The first one takes precedence.\n\nRequire react-dom through client so it can be aliased\n\nCo-authored-by: Andrew Clark git@andrewclark.io', 'Refactor Cache Code (#23393)\nThis PR refactors the cache code by moving it out of ReactFiberCacheComponent to ReactFiberTransitionPool in anticipation of it being reused by multiple stacks (ie. transition tracing)', 'reassign src from props not the dom element src property (#23395)\nThe src property on the dom element will return a fully qualified name and this does not match the dom\nsrc attribute or the props provided to react. instead of reading from the element and re-assigning the property we\nassign the property from props which is how it was initially assigned during the render\nCo-authored-by: Josh Story story@hey.com', 'Show DevTools backend and frontend versions in UI (#23399)\nThis information can help with bug investigation for renderers (like React Native) that embed the DevTools backend into their source (separately from the DevTools frontend, which gets run by the user).\nIf the DevTools backend is too old to report a version, or if the version reported is the same as the frontend (as will be the case with the browser extension) then only a single version string will be shown, as before. If a different version is reported, then both will be shown separately.', 'React DevTools 4.23.0 -> 4.24.0 (#23400)\n\n\nReact DevTools 4.23.0 -> 4.24.0\n\n\nFixed CHANGELOG header format\n\n\nAdd separator line beween header version numbers\n\n', 'Added unit Tests in the ReactART, increasing the code coverage (#23195)', "Fabric HostComponent as EventEmitter: support add/removeEventListener (unstable only) (#23386)\n\n\nImplement addEventListener and removeEventListener on Fabric HostComponent\n\n\nadd files\n\n\nre-add CustomEvent\n\n\nfix flow\n\n\nNeed to get CustomEvent from an import since it won't exist on the global scope by default\n\n\nyarn prettier-all\n\n\nuse a mangled name consistently to refer to imperatively registered event handlers\n\n\nyarn prettier-all\n\n\nfuzzy null check\n\n\nfix capture phase event listener logic\n\n\nearly exit from getEventListeners more often\n\n\nmake some optimizations to getEventListeners and the bridge plugin\n\n\nfix accumulateInto logic\n\n\nfix accumulateInto\n\n\nSimplifying getListeners at the expense of perf for the non-hot path\n\n\nfeedback\n\n\nfix impl of getListeners to correctly remove function\n\n\npass all args in to event listeners\n\n", '[Fizz] Export debug function for FB (#24024)\n\n\nexport debug function for FB\n\n\nsilence flow\n\n', "Move onCompleteAll to .allReady Promise (#24025)\n\nMove onCompleteAll to .allReady Promise\n\nThe onCompleteAll callback can sometimes resolve before the promise that\nreturns the stream which is tough to coordinate. A more idiomatic API\nfor a one shot event is a Promise.\nThat way the way you render for SEO or SSG is:\nconst stream = await renderToReadableStream(...);\nawait stream.readyAll;\nrespondWith(stream);\nIdeally this should be a sub-class of ReadableStream but we don't yet\ncompile these to ES6 and they'd had to be to native class to subclass\na native stream.\nI have other ideas for overriding the .tee() method in a subclass anyway.\nSo this is inline with that strategy.\n\nReject the Promise on fatal errors\n", 'Rename Node SSR Callbacks to onShellReady/onAllReady and Other Fixes (#24030)\n\nI forgot to call onFatalError\n\nI can\'t figure out how to write a test for this because it only happens\nwhen there is a bug in React itself which would then be fixed if we found\nit.\nWe\'re also covered by the protection of ReadableStream which doesn\'t leak\nother errors to us.\n\nAbort requests if the reader cancels\n\nNo need to continue computing at this point.\n\nAbort requests if node streams get destroyed\n\nThis is if the downstream cancels is for example.\n\nRename Node APIs for Parity with allReady\n\nThe "Complete" terminology is a little misleading because not everything\nhas been written yet. It\'s just "Ready" to be written now.\nonShellReady\nonShellError\nonAllReady\n\n\'close\' should be enough\n', "[Fizz] write chunks to a buffer with no re-use (#24034)\n\nwrite chunks to a buffer with no re-use\n\nchunks were previously enqueued to a ReadableStream as they were written. We now write them to a view over an ArrayBuffer\nand enqueue them only when writing has completed or the buffer's size is exceeded. In addition this copy now ensures\nwe don't attempt to re-send buffers that have already been transferred.\n\nrefactor writeChunk to be more defensive and efficient\n\nWe now defend against overflows using the next views length instead of the current one. this protects us against a future where we use byobRequest and we get longer initial views than we might create after overflowing the first time. Additionally we add in an optimization when we have completely filled up the currentView where we avoid creating subarrays of the chunk to write since it lands exactly on a view boundary. Finally we move the view creation to beginWriting to avoid a runtime check on each write and because we want to reset the view on each beginWriting call in case a throw elsewhere in the program leaves the currentView in an unfinished state\n\nadd tests to exercise codepaths dealing with buffer overlows\n", 'Add more feature flag checks (#24037)', 'Gate unstable_expectedLoadTime on enableCPUSuspense (#24038)', '[ServerContext] Flight support for ServerContext (#23244)\n\n\nFlight side of server context\n\n\n1 more test\n\n\nrm unused function\n\n\nflow+prettier\n\n\nflow again =)\n\n\nduplicate ReactServerContext across packages\n\n\nstore default value when lazily initializing server context\n\n\n.\n\n\nbetter comment\n\n\nderp... missing import\n\n\nrm optional chaining\n\n\nmissed feature flag\n\n\nReact.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\n\n\nadd warning if non ServerContext passed into useServerContext\n\n\npass context in as array of arrays\n\n\nmake importServerContext nott pollute the global context state\n\n\nmerge main\n\n\nremove useServerContext\n\n\ndont rely on object getters in ReactServerContext and disallow JSX\n\n\nadd symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\n\n\ngate test case as experimental\n\n\nfeedback\n\n\nremove unions\n\n\nLint\n\n\nfix oopsies (tests/lint/mismatching arguments/signatures\n\n\nlint again\n\n\nreplace-fork\n\n\nremove extraneous change\n\n\nrebase\n\n\n1 more test\n\n\nrm unused function\n\n\nflow+prettier\n\n\nflow again =)\n\n\nduplicate ReactServerContext across packages\n\n\nstore default value when lazily initializing server context\n\n\n.\n\n\nbetter comment\n\n\nderp... missing import\n\n\nrm optional chaining\n\n\nmissed feature flag\n\n\nReact.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\n\n\nadd warning if non ServerContext passed into useServerContext\n\n\npass context in as array of arrays\n\n\nmake importServerContext nott pollute the global context state\n\n\nmerge main\n\n\nremove useServerContext\n\n\ndont rely on object getters in ReactServerContext and disallow JSX\n\n\nadd symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\n\n\ngate test case as experimental\n\n\nfeedback\n\n\nremove unions\n\n\nLint\n\n\nfix oopsies (tests/lint/mismatching arguments/signatures\n\n\nlint again\n\n\nreplace-fork\n\n\nremove extraneous change\n\n\nrebase\n\n\nreinline\n\n\nrebase\n\n\nadd back changes lost due to rebase being hard\n\n\nemit chunk for provider\n\n\nremove case for React provider type\n\n\nupdate type for SomeChunk\n\n\nenable flag with experimental\n\n\nadd missing types\n\n\nfix flow type\n\n\nmissing type\n\n\nt: any\n\n\nrevert extraneous type change\n\n\nbetter type\n\n\nbetter type\n\n\nfeedback\n\n\nchange import to type import\n\n\ntest?\n\n\ntest?\n\n\nremove react-dom\n\n\nremove react-native-renderer from react-server-native-relay/package.json\n\n\ngate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\n\n\ngetComponentNameFromTpe: server context type gated and use displayName if available\n\n\nfallthrough\n\n\nlint....\n\n\nPOP\n\n\nlint\n\n', 'Fizz: Prevent UnhandledPromiseRejection if shell errors (#24043)', 'Bump versions to rc.2', 'Bump versions to rc.2', "[Fizz] Don't flush empty segments (#24054)\nBefore this change, we would sometimes write segments without any content\nin them. For example for a Suspense boundary that immediately suspends\nwe might emit something like:\n\n\n\nWhere the outer div is just a temporary wrapper and the inner one is a\nplaceholder for something to be added later.\nThis serves no purpose.\nWe should ideally have a heuristic that holds back segments based on byte\nsize and time. However, this is a straight forward clear win for now.", 'Update test to reset modules instead of using private state (#24055)', 'Gate legacy hidden (#24047)\n\n\nGate legacy hidden\n\n\nGate tests\n\n\nRemove export from experimental\n\n', 'Fixed edge case bug in Profiler (#24031)', 'Better handle undefined Error stacks in DevTools error boundary (#24065)', 'React DevTools 4.23.0 -> 4.24.0 (#24066)\n\nRevert "React DevTools 4.23.0 -> 4.24.0 (#23400)"\n\nThis reverts commit f6c130f6145dbae5436625560f520957b5e27859.\n\n\nReact DevTools 4.23.0 -> 4.24.0\n\n\nAdded additional, pending bugfixes to CHANGELOG\n\n\nUpdated DevTools build and release script to fix header format\n\n', "[Flight] add support for Lazy components in Flight server (#24068)\n\n[Flight] add support for Lazy components in Flight server\n\nLazy components suspend until resolved just like in Fizz. Add tests to confirm Lazy works with Shared Components and Client Component references.\n\nSupport Lazy elements\n\nReact.Lazy can now return an element instead of a Component. This commit implements support for Lazy elements when server rendering.\n\nadd lazy initialization to resolveModelToJson\n\nadding lazying initialization toResolveModelToJson means we use attemptResolveElement's full logic on whatever the resolved type ends up being. This better aligns handling of misued Lazy types like a lazy element being used as a Component or a lazy Component being used as an element.", "Pass children to hydration root constructor\nI already made this change for the concurrent root API in #23309. This\ndoes the same thing for the legacy API.\nDoesn't change any behavior, but I will use this in the next steps.", "Add isRootDehydrated function\nCurrently this does nothing except read a boolean field, but I'm about\nto change this logic.\nSince this is accessed by React DOM, too, I put the function in a\nseparate module that can be deep imported. Previously, it was accessing\nthe FiberRoot directly. The reason it's a separate module is to break a\ncircular dependency between React DOM and the reconciler.", "Allow updates at lower pri without forcing client render\nCurrently, if a root is updated before the shell has finished hydrating\n(for example, due to a top-level navigation), we immediately revert to\nclient rendering. This is rare because the root is expected is finish\nquickly, but not exceedingly rare because the root may be suspended.\nThis adds support for updating the root without forcing a client render\nas long as the update has lower priority than the initial hydration,\ni.e. if the update is wrapped in startTransition.\nTo implement this, I had to do some refactoring. The main idea here is\nto make it closer to how we implement hydration in Suspense boundaries:\n\nI moved isDehydrated from the shared FiberRoot object to the\nHostRoot's state object.\nIn the begin phase, I check if the root has received an by comparing\nthe new children to the initial children. If they are different, we\nrevert to client rendering, and set isDehydrated to false using a\nderived state update (a la getDerivedStateFromProps).\nThere are a few places where we used to set root.isDehydrated to false\nas a way to force a client render. Instead, I set the ForceClientRender\nflag on the root work-in-progress fiber.\nWhenever we fall back to client rendering, I log a recoverable error.\n\nThe overall code structure is almost identical to the corresponding\nlogic for Suspense components.\nThe reason this works is because if the update has lower priority than\nthe initial hydration, it won't be processed during the hydration\nrender, so the children will be the same.\nWe can go even further and allow updates at higher priority (though\nnot sync) by implementing selective hydration at the root, like we do\nfor Suspense boundaries: interrupt the current render, attempt hydration\nat slightly higher priority than the update, then continue rendering the\nupdate. I haven't implemented this yet, but I've structured the code in\nanticipation of adding this later.", 'Revert accdientally merged PR (#24081)', 'Match select value against primitives to string but not undefined (#24077)', "Fix use of hydrateRoot in DevTools test (#24084)\nI noticed while working on a different PR that this test was not\nusing hydrateRoot correctly. You're meant to pass the initial children\nas the second argument.", "Don't hide console error|warn in inspectedElement-test (#24086)", 'Add skipBubbling property to dispatch config (#23366)', 'Disable unsupported Bridge protocol version dialog and add workaround for old protocol operations format (#24093)\nRationale: The only case where the unsupported dialog really matters is React Naive. That\'s the case where the frontend and backend versions are most likely to mismatch. In React Native, the backend is likely to send the bridge protocol version before sending operations– since the agent does this proactively during initialization.\nI\'ve tested the React Native starter app– after forcefully downgrading the backend version to 4.19.1 (see #23307 (comment)) and verified that this change "fixes" things. Not only does DevTools no longer throw an error that causes the UI to be hidden– it works (meaning that the Components tree can be inspected and interacted with).', 'React DevTools 4.24.0 -> 4.24.1 (#24100)', 'Update CHANGELOG.md', 'add offscreen state node (#24026)\nAdd state node on Offscreen fibers with id (in preparation for transition tracing)', "Add authorization header to artifacts request (#24106)\n\nAdd authorization header to artifacts request\n\nCircleCI's artifacts API was updated; it now errors unless you're\nlogged in. This affects any of our workflows that download\nbuild artifacts.\nTo fix, I added an authorization header to the request.\n\nUpdate sizbot to pull artifacts from public mirror\n\nWe can't use the normal download-build script in sizebot because it\ndepends on the CircleCI artifacts API, which was recently changed to\nrequire authorization. And we can't pass an authorization token\nwithout possibly leaking it to the public, since we run sizebot on\nPRs from external contributors. As a temporary workaround, this job\nwill pull the artifacts from a public mirror that I set up. But we\nshould find some other solution so we don't have to maintain\nthe mirror.", 'Flag for text hydration mismatch (#24107)\n\n\nflag for text hydration mismatch\n\n\nrm unused import\n\n', 'Update DevTools READMEs (#24105)', 'Fix dispatch config type for skipBubbling (#24109)', "Fix createRoot container signature (#24110)\nThe internal Container type represents the types of containers that React\ncan support in its internals that deal with containers.\nThis didn't include DocumentFragment which we support specifically for\nrendering into shadow roots.\nHowever, not all types makes sense to pass into the createRoot API.\nOne of those is comment nodes that is deprecated and we don't really fully\nsupport. It really only exists for FB legacy.\nFor createRoot it doesn't make sense to pass a Document since that will try\nto empty the document which removes the HTML tag which doesn't work.\nDocuments can only be passed to hydrateRoot.\nConversely I'm not sure we actually support hydrating a shadow root properly\nso I excluded DocumentFragment from hydrateRoot.", "fix inspecting an element in a nested renderer bug (#24116)\nFixes this issue, where inspecting components in nested renderers results in an error. The reason for this is because we have different fiberToIDMap instances for each renderer, and owners of a component could be in different renderers.\nThis fix moves the fiberToIDMap and idToArbitraryFiberMap out of the attach method so there's only one instance of each for all renderers.", 'Avoid conditions where control flow is sufficient (#24126)\nThis also fixes a type error since resetTextContent can only be called\non Instances.', "Allow updating dehydrated root at lower priority without forcing client render (#24082)\n\nPass children to hydration root constructor\n\nI already made this change for the concurrent root API in #23309. This\ndoes the same thing for the legacy API.\nDoesn't change any behavior, but I will use this in the next steps.\n\nAdd isRootDehydrated function\n\nCurrently this does nothing except read a boolean field, but I'm about\nto change this logic.\nSince this is accessed by React DOM, too, I put the function in a\nseparate module that can be deep imported. Previously, it was accessing\nthe FiberRoot directly. The reason it's a separate module is to break a\ncircular dependency between React DOM and the reconciler.\n\nAllow updates at lower pri without forcing client render\n\nCurrently, if a root is updated before the shell has finished hydrating\n(for example, due to a top-level navigation), we immediately revert to\nclient rendering. This is rare because the root is expected is finish\nquickly, but not exceedingly rare because the root may be suspended.\nThis adds support for updating the root without forcing a client render\nas long as the update has lower priority than the initial hydration,\ni.e. if the update is wrapped in startTransition.\nTo implement this, I had to do some refactoring. The main idea here is\nto make it closer to how we implement hydration in Suspense boundaries:\n\nI moved isDehydrated from the shared FiberRoot object to the\nHostRoot's state object.\nIn the begin phase, I check if the root has received an by comparing\nthe new children to the initial children. If they are different, we\nrevert to client rendering, and set isDehydrated to false using a\nderived state update (a la getDerivedStateFromProps).\nThere are a few places where we used to set root.isDehydrated to false\nas a way to force a client render. Instead, I set the ForceClientRender\nflag on the root work-in-progress fiber.\nWhenever we fall back to client rendering, I log a recoverable error.\n\nThe overall code structure is almost identical to the corresponding\nlogic for Suspense components.\nThe reason this works is because if the update has lower priority than\nthe initial hydration, it won't be processed during the hydration\nrender, so the children will be the same.\nWe can go even further and allow updates at higher priority (though\nnot sync) by implementing selective hydration at the root, like we do\nfor Suspense boundaries: interrupt the current render, attempt hydration\nat slightly higher priority than the update, then continue rendering the\nupdate. I haven't implemented this yet, but I've structured the code in\nanticipation of adding this later.\n\nWrap useMutableSource logic in feature flag\n", 'enableCacheElement flag (#24131)\n\n\nenableCacheElement flag\n\n\nUpdate packages/shared/forks/ReactFeatureFlags.testing.js\n\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\n\nUpdate packages/shared/forks/ReactFeatureFlags.test-renderer.js\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\n\nUpdate packages/shared/forks/ReactFeatureFlags.native-oss.js\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\n\nUpdate packages/shared/ReactFeatureFlags.js\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\nCo-authored-by: Dave McCabe davemccabe@fb.com\nCo-authored-by: Ricky rickhanlonii@gmail.com', 'Bump versions to rc.3 (#24141)', 'Fix test-build-devtools if build was generated by build-for-devtools (#24088)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Store throws a specific Error type (UnsupportedBridgeOperationError) (#24147)\nWhen this Error type is detected, DevTools shows a custom error overlay with upgrade/downgrade instructions.', 'React DevTools 4.24.1 -> 4.24.2 (#24150)', 'Add details in READMEs for react-devtools local developement (#24148)\n\n\nAdd details in READMEs for react-devtools local developement\n\n\ntypo\n\n\nupdate yarn for release script\n\n', 'Clean up Selective Hydration / Event Replay flag (#24156)\n\n\nclean up selective hydration / replay flag\n\n\ndont export return_targetInst\n\n', 'Release script prompts to stop running DEV scripts (#24154)', 'Add Node 17 to devEngines', 'DevTools imports (#24163)\n\nUpdate DevTools imports: react-dom -> react-dom/client\nSilence ReactDOM.render warning in DevTools test shell\n', 'Attach DevTools Tree keyboard events to the Tree container (not the document) (#24164)\nWe used to listen to at the document level for this event. That allowed us to listen to up/down arrow key events while another section\nof DevTools (like the search input) was focused. This was a minor UX positive.\n(We had to use ownerDocument rather than document for this, because the DevTools extension renders the Components and Profiler tabs into portals.)\nThis approach caused a problem though: it meant that a react-devtools-inline instance could steal (and prevent/block) keyboard events from other JavaScript on the page– which could even include other react-devtools-inline instances. This is a potential major UX negative.\nGiven the above trade offs, we now listen on the root of the Tree itself.', 'Fix fixture', '[fizz] Fix validateIterable call (#24166)\n\n\nfix validate iterable call\n\n\nsupports iterable\n\n\ngate test by experimental\n\n', 'DevTools bugfix: Ignore duplicate welcome "message" events (#24186)', "Fix usage of console.error to prevent transform (#24188)\nWe were suppressing the react-internals/warning-args lint rule\nfor the call to console.error in defaultOnRecoverableError.\nAs far as I could tell, the lint rule exists because on dev builds,\nwe replace all calls to console.error with this error\nfunction\nwhich expects a format string + args and nothing else. We were trying\nto pass in an Error object directly. After this commit's change,\nwe will still be passing an Error but the transform won't occur.", 'Remove rc suffix from versions (#24190)\n\n\nRemove rc suffix from versions\n\n\nBump eslint-plugin-react-hooks version\n\n\nI noticed this one was behind the latest published version', 'Profiler should only report stateful hooks that change between renders (#24189)\nThe Profiler has an advanced feature that shows why a component re-rendered. In the case of props and (class) state, it shows the names of props/state values that changed between renders. For hooks, DevTools tries to detect which ones may been related to the update by comparing prev/next internal hook structures.\nMy initial implementation tried to detect all changed hooks. In hindsight this is confusing, because only stateful hooks (e.g. useState, useReducer, and useSyncExternalStore) can schedule an update. (Other types of hooks can change between renders, but in a reactive way.) This PR changes the behavior to only report hooks that scheduled the update.', 'Update local package.jsons for 18']0.14.10 React

Backport support for the new JSX transform to 0.14.x. (@lunaruan in #18299 and @gaearon in #20024)
 ["Update ReactDebugHooks to handle composite hooks (#18130)\nThe useState hook has always composed the useReducer hook. 1:1 composition like this is fine.\nBut some more recent hooks (e.g. useTransition, useDeferredValue) compose multiple hooks internally. This breaks react-debug-tools because it causes off-by-N errors when the debug tools re-renders the function.\nFor example, if a component were to use the useTransition and useMemo hooks, the normal hooks dispatcher would create a list of first state, then callback, then memo hooks, but the debug tools package would expect a list of transition then memo. This can break user code and cause runtime errors in both the react-debug-tools package and in product code.\nThis PR fixes the currently broken hooks by updating debug tools to be aware of the composite hooks (how many times it should call nextHook essentially) and adds tests to make sure they don't get out of sync again. We'll need to add similar tests for future composite hooks (like useMutableSource #18000).", '[DevTools] Added resize support for Components panel. (#18046)\n\n\nfeat: DevTools - Added Resize Support.\n\n\nfeat: Prettier.\n\n\nfeat: DevTools - Added debug comments.\n\n\nfeat: DevTools - Removed Use Memo.\n\n\nfeat: DevTools - Added types.\n\n\nfeat: DevTools - Extracted values to constants.\n\n\nfeat: DevTools - Removed useCallback.\n\n\nfeat: DevTools - Finished refactoring.\n\n\nfeat: DevTools - Merging fixup.\n\n\nfeat: DevTools - Prettier fix.\n\n\nfeat: DevTools - Extracted code from Components fil.\n\n\nfeat: DevTools - Fixed orientation change issue.\n\n\nfeat: DevTools - Added flow types for reducer and refs.\n\n\nfeat: DevTools - Fixed orientation change on initial load.\n\n\nUpdate packages/react-devtools-shared/src/devtools/views/Components/ComponentsResizer.js\n\n\nRemoved unused orientationRef\n\n\nFix Flow ref issue\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Rearranged some DevTools Components code', 'Changelog for 16.13.0 (#18124)\n\n\nChangelog for 16.13.0\n\n\nUpdate CHANGELOG.md\n\n', 'update version numbers for 16.13 (#18143)\nalso includes a bugfix when downloading error codes from circleci.', 'Prettier', 'Fix changelog link', "Updated CHANGELOG to remove passive effects change from 16.13 release. (It wasn't part of that release.)", "Convert the rest of react-dom and react-test-renderer to Named Exports (#18145)\nNothing interesting here except that ReactShallowRenderer currently exports\na class with a static method instead of an object.\nI think the public API is probably just meant to be createRenderer but\ncurrently the whole class is exposed. So this means that we have to keep\nit as default export. We could potentially also expose a named export for\ncreateRenderer but that's going to cause compatibility issues.\nSo I'm just going to make that export default.\nUnfortunately Rollup and Babel (which powers Jest) disagree on how to\nimport this. So to make it work I had to move the jest tests to imports.\nThis doesn't work with module resetting. Some tests weren't doing that\nanyway and the rest is just testing ReactShallowRenderer so meh.", 'Remove unnecessary warnings (#18135)', 'Remove unused flag (#18132)', 'Bust Circle caches', 'Run test-prod job for experimental builds (#18152)', 'Replace ReactShallowRenderer with a dependency (#18144)\nCloses #17321.', "Don't build shallow renderer for FB (#18153)", "Convert React Native builds to named exports (#18136)\nThese don't need any forks because we always export the same things atm.", 'Remove Node shallow builds (#18157)\nThis is just a forwarding module. We can hardcode it.', "Move remaining things to named exports (#18165)\n\nMove remaining things to named exports\n\nThe interesting case here is the noop renderers. The wrappers around the\nreconciler now changed to use a local export that gets mutated.\nReactNoop and ReactNoopPersistent now have to destructure the object to\nlist out the names it's going to export. We should probably refactor\nReactNoop away from createReactNoop. Especially since it's also not Flow\ntyped.\n\nSwitch interactions to star exports\n\nThis will have esModule compatibility flag on them. They should ideally\nexport default instead.", 'Remove runtime dependency on prop-types (#18127)\n\n\nRemove runtime dep on prop-types\n\n\nFix test\n\n', '[Fabric] Fix targetAsInstance dispatchEvent "cannot read property of null" (#18156)\n\nFix Fabric targetAsInstance dispatchEvent: targetFiber stateNode is null in some cases\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'feat: add recommended config eslint rule (#14762)\n\n\nfeat: add recommended config eslint rule\n\n\nadd exhaustive-deps to recommended as well\n\n', 'Fix typo in warning text (#18103)\nMentioned in #18090.', 'Add an early invariant to debug a mystery crash (#18159)', 'react-test-renderer: improve findByType() error message (#17439)\n\n\nimprove findByType error message\n\n\nfix flow typing\n\n\nAdding a test for the "Unknown" branch when getComponentName() returns a falsy value. The error message in this case not the most descriptive but seems consistent with the getComponentName(type) || \'Unknown\' pattern seen in multiple places in this code base.\n\n', "Check in a forked version of object-assign only for UMD builds (#18180)\n\nCheck in a forked version of object-assign\n\nThis one uses ES modules so that we can inline it into UMD builds.\nWe could wait for object-assign to make an ESM export but we're going to\nremove this dependency and assume global polyfills in the next version\nanyway. However, we'd have to figure out how to keep the copyright header\nand it'll get counted in terms of byte size (even if other tooling removes\nit).\nA lot of headache when we have our own implementation anyway. So I'll just\nuse that.\nOurs is not resilient to checking certain browser bugs but those browsers\nare mostly unused anyway. (Even FB breaks on them presumably.)\nWe also don't need to be resilient to Symbols since the way React uses it\nwe shouldn't need to copy symbols\n\nDon't transpile Object.assign to object-assign in object-assign\n\nThe polyfill needs to be able to feature detect Object.assign.", 'Change ReactVersion from CJS to ES module (#18181)', '[Native] Enable and remove targetAsInstance feature flag. (#18182)', 'Update react-shallow-renderer from 16.12.0 to 16.13.0 (#18185)', 'Only use Rollup\'s CommonJS plugin for "react-art" (#18186)\n\nOnly use Rollup\'s CommonJS plugin for "react-art"\n\nWe still need it for the "art" UMD builds but nothing else should have\nCommonJS dependencies anymore.\n\nreact-debug-tools and jest-react should leave object-assign as an external dep\n\nThis avoids it being compiled into the output.', 'More event system cleanup and scaffolding (#18179)', 'Fix bug with PressLegacy blur (#18194)', 'Refine isFiberSuspenseAndTimedOut (#18184)', 'Put React.jsx and React.jsxDEV behind experimental build (#18023)\nThis PR puts the React.jsx and React.jsxDEV (enableJSXTransformAPI feature flag) in the experimental build so that we can use it to test React Native.', 'Modern Event System: add plugin handling and forked paths (#18195)', "Fix flow types (#18204)\n\n\nAdded missing @flow pragma to React.js\n\n\nFixed useContext() return type definition\n\n\nFixed previously masked Flow errors in DevTools and react-interactions packages\n\n\nAdded displayName to internal Context Flow type\n\n\nRemoved Flow generic annotations for createResponder\n\n\nThis seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so I'm being lazy for now and just adding a .", "Bugfix: Expired partial tree infinite loops (#17949)\n\n\nBugfix: Expiring a partially completed tree (#17926)\n\n\nFailing test: Expiring a partially completed tree\n\n\nWe should not throw out a partially completed tree if it expires in the\nmiddle of rendering. We should finish the rest of the tree without\nyielding, then finish any remaining expired levels in a single batch.\n\nCheck if there's a partial tree before restarting\n\nIf a partial render expires, we should stay in the concurrent path\n(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the\nbehavior remains the same.\nWe will only revert to the sync path (performSyncWorkOnRoot) when\nstarting on a new level.\nThis approach prevents partially completed concurrent work from\nbeing discarded.\n\n\nNew test: retry after error during expired render\n\n\nRegression: Expired partial tree infinite loops\n\n\nAdds regression tests that reproduce a scenario where a partially\ncompleted tree expired then fell into an infinite loop.\nThe code change that exposed this bug made the assumption that if you\ncall Scheduler's shouldYield from inside an expired task, Scheduler\nwill always return false. But in fact, Scheduler sometimes returns\ntrue in that scenario, which is a bug.\nThe reason it worked before is that once a task timed out, React would\nalways switch to a synchronous work loop without checking shouldYield.\nMy rationale for relying on shouldYield was to unify the code paths\nbetween a partially concurrent render (i.e. expires midway through) and\na fully concurrent render, as opposed to a render that was synchronous\nthe whole time. However, this bug indicates that we need a stronger\nguarantee within React for when tasks expire, given that the failure\ncase is so catastrophic. Instead of relying on the result of a dynamic\nmethod call, we should use control flow to guarantee that the work is\nsynchronously executed.\n(We should also fix the Scheduler bug so that shouldYield always\nreturns false inside an expired task, but I'll address that separately.)\n\nAlways switch to sync work loop when task expires\n\nRefactors the didTimeout check so that it always switches to the\nsynchronous work loop, like it did before the regression.\nThis breaks the error handling behavior that I added in 5f7361f (an\nerror during a partially concurrent render should retry once,\nsynchronously). I'll fix this next. I need to change that behavior,\nanyway, to support retries that occur as a result of flushSync.\n\nRetry once after error even for sync renders\n\nExcept in legacy mode.\nThis is to support the useOpaqueReference hook, which uses an error\nto trigger a retry at lower priority.\n\n\nMove partial tree check to performSyncWorkOnRoot\n\n\nFactor out render phase\n\n\nSplits the work loop and its surrounding enter/exit code into their own\nfunctions. Now we can do perform multiple render phase passes within a\nsingle call to performConcurrentWorkOnRoot or performSyncWorkOnRoot.\nThis lets us get rid of the didError field.", 'DevTools 4.4.0 -> 4.5.0', 'Updated React Native Website URL (#18207)', 'Fix instanceContainsElem bug from typo (#18213)', 'feat: honor displayName of context types (#18035)\n\ntest: Add test for current behavior of displayName\nfeat: consider displayName of context types\n', 'Modern Event System: Add support for internal FB Primer (#18210)', 'Use accumulateTwoPhaseDispatchesSingle directly (#18203)', 'Remove _ctor field from Lazy components (#18217)\n\n\nThis type is all wrong and nothing cares because it\'s all any\n\n\nRefine Flow types of Lazy Components\n\n\nWe can type each condition.\n\nRemove _ctor field from Lazy components\n\nThis field is not needed because it\'s only used before we\'ve initialized,\nand we don\'t have anything else to store before we\'ve initialized.\n\nCheck for _ctor in case it\'s an older isomorphic that created it\n\nWe try not to break across minors but it\'s no guarantee.\n\nMove types and constants from shared to isomorphic\n\nThe "react" package owns the data structure of the Lazy component. It\ncreates it and decides how any downstream renderer may use it.\n\nMove constants to shared\n\nApparently we can\'t depend on react/src/ because the whole package is\nconsidered "external" as far as rollup is concerned.', 'Modern Event System: Support nested portal/root boundaries (#18201)', 'Updated React Native home URL (#18218)', 'Modern Event System: export internal FB flag for testing (#18221)', 'Revert "feat: honor displayName of context types (#18035)" (#18223)\nThis reverts commit 45c172d948eee1a8533908267ec8be70bbb00c55.', 'feat: honor displayName of context types (#18224)\n\nRevert "Revert "feat: honor displayName of context types (#18035)" (#18223)"\n\nThis reverts commit 3ee812e6b67d52a6f262144e78721f9340c36a04.\n\n\nAdd warning of displayName is set on the consumer\n\n\ndedupe warning\n\n', 'Implemented Profiler onCommit() and onPostCommit() hooks (#17910)\n\nImplemented Profiler onCommit() and onPostCommit() hooks\nAdded enableProfilerCommitHooks feature flag for commit hooks\nMoved onCommit and onPassiveCommit behind separate feature flag\n', 'Break up require/import statements in strings (#18222)', "Add test run that uses www feature flags (#18234)\nIn CI, we run our test suite against multiple build configurations. For\nexample, we run our tests in both dev and prod, and in both the\nexperimental and stable release channels. This is to prevent accidental\ndeviations in behavior between the different builds. If there's an\nintentional deviation in behavior, the test author must account\nfor them.\nHowever, we currently don't run tests against the www builds. That's\na problem, because it's common for features to land in www before they\nland anywhere else, including the experimental release channel.\nTypically we do this so we can gradually roll out the feature behind\na flag before deciding to enable it.\nThe way we test those features today is by mutating the\nshared/ReactFeatureFlags module. There are a few downsides to this\napproach, though. The flag is only overridden for the specific tests or\ntest suites where you apply the override. But usually what you want is\nto run all tests with the flag enabled, to protect against unexpected\nregressions.\nAlso, mutating the feature flags module only works when running the\ntests against source, not against the final build artifacts, because the\nReactFeatureFlags module is inlined by the build script.\nInstead, we should run the test suite against the www configuration,\njust like we do for prod, experimental, and so on. I've added a new\ncommand, yarn test-www. It automatically runs in CI.\nSome of the www feature flags are dynamic; that is, they depend on\na runtime condition (i.e. a GK). These flags are imported from an\nexternal module that lives in www. Those flags will be enabled for some\nclients and disabled for others, so we should run the tests against\nboth modes.\nSo I've added a new global __VARIANT__, and a new test command yarn\ntest-www-variant. __VARIANT__ is set to false by default; when\nrunning test-www-variant, it's set to true.\nIf we were going for really comprehensive coverage, we would run the\ntests against every possible configuration of feature flags: 2 ^\nnumberOfFlags total combinations. That's not practical, though, so\ninstead we only run against two combinations: once with __VARIANT__\nset to true, and once with it set to false. We generally assume that\nflags can be toggled independently, so in practice this should\nbe enough.\nYou can also refer to __VARIANT__ in tests to detect which mode you're\nrunning in. Or, you can import shared/ReactFeatureFlags and read the\nspecific flag you can about. However, we should stop mutating that\nmodule going forward. Treat it as read-only.\nIn this commit, I have only setup the www tests to run against source.\nI'll leave running against build for a follow up.\nMany of our tests currently assume they run only in the default\nconfiguration, and break when certain flags are toggled. Rather than fix\nthese all up front, I've hard-coded the relevant flags to the default\nvalues. We can incrementally migrate those tests later.", 'Add a flag to disable module pattern components (#18133)', 'Fixed broken anchor tag for patch release', 'Hard-code disableModulePatternComponents (#18239)\nHard-coding this until tests are fixed, to unblock master.', "Bugfix: Dropped effects in Legacy Mode Suspense (#18238)\n\n\nFailing: Dropped effects in Legacy Mode Suspense\n\n\nTransfer mounted effects on suspend in legacy mode\n\n\nIn legacy mode, a component that suspends bails out and commit in\nits previous state. If the component previously had mounted effects,\nwe must transfer those to the work-in-progress so they don't\nget dropped.", '[Blocks] Make it possible to have lazy initialized and lazy loaded Blocks (#18220)\n\nLazify Blocks\n\nBlocks now initialize lazily.\n\nInitialize Blocks eagerly in ChildFiber\n\nThis is for the case when it\'s a new Block that hasn\'t yet initialized.\nWe need to first initialize it to see what "render function" it resolves\nto so that we can use that in our comparison.\n\nRemove extra import type line\n', 'Refactor Host Config Infra (getting rid of .inline*.js) (#18240)\n\n\nRequire deep for reconcilers\n\n\nDelete inline* files\n\n\nDelete react-reconciler/persistent\n\n\nThis no longer makes any sense because it react-reconciler takes\nsupportsMutation or supportsPersistence as options. It\'s no longer based\non feature flags.\n\n\nFix jest mocking\n\n\nFix Flow strategy\n\n\nWe now explicitly list which paths we want to be checked by a renderer.\nFor every other renderer config we ignore those paths.\nNothing is "any" typed. So if some transitive dependency isn\'t reachable\nit won\'t be accidentally "any" that leaks.', "Add Relay Flight Build (#18242)\n\n\nRename to clarify that it's client-only\n\n\nRename FizzStreamer to FizzServer for consistency\n\n\nRename react-flight to react-client/flight\n\n\nFor consistency with react-server. Currently this just includes flight\nbut it could be expanded to include the whole reconciler.\n\n\nAdd Relay Flight Build\n\n\nRename ReactServerHostConfig to ReactServerStreamConfig\n\n\nThis will be the config specifically for streaming purposes.\nThere will be other configs for other purposes.", 'Fix Flow type for AnyNativeEvent (#18266)', 'ReactDOM.useEvent add flag and entry point (#18267)', "Fix yarn warning on running 'yarn build-for-devtools' (#18232)\nfixes #18231", 'Enable enableProfilerCommitHooks flag for FB (#18230)', 'Flare: Fix listener upgrade bug (#18270)', 'ReactDOM.useEvent: Add more scaffolding for useEvent hook (#18271)', "[Flight] Split Streaming from Relay Implemenation (#18260)\n\nAdd ReactFlightServerConfig intermediate\n\nThis just forwards to the stream version of Flight which is itself forked\nbetween Node and W3C streams.\nThe dom-relay goes directly to the Relay config though which allows it to\navoid the stream part of Flight.\n\n\nSeparate streaming protocol into the Stream config\n\n\nSplit streaming parts into the ReactFlightServerConfigStream\n\n\nThis decouples it so that the Relay implementation doesn't have to encode\nthe JSON to strings. Instead it can be fed the values as JSON objects and\ndo its own encoding.\n\nSplit FlightClient into a basic part and a stream part\n\nSame split as the server.\n\nExpose lower level async hooks to Relay\n\nThis requires an external helper file that we'll wire up internally.", '[React Native] Add getInspectorDataForViewAtPoint (#18233)', 'Encode server rendered host components as array tuples (#18273)\nThis replaces the HTML renderer with instead resolving host elements into\narrays tagged with the react.element symbol. These turn into proper\nReact Elements on the client.\nThe symbol is encoded as the magical value "$". This has security implications\nso this special value needs to remain escaped for other strings.\nWe could just encode the element as {$$typeof: "$", key: key props: props}\nbut that\'s a lot more bytes. So instead I encode it as:\n["$", key, props] and then convert it back.\nIt would be nicer if React\'s reconciler could just accept these tuples.', 'Revert "[React Native] Add getInspectorDataForViewAtPoint (#18233)"\nThis reverts commit bf351089a0ee27405b3d5c0f474941a4946f2f37.', "Don't use Spread in DevTools Injection (#18277)", 'Bugfix: "Captured" updates on legacy queue (#18265)\n\nBugfix: "Captured" updates on legacy queue\n\nThis fixes a bug with error boundaries. Error boundaries have a notion\nof "captured" updates that represent errors that are thrown in its\nsubtree during the render phase. These updates are meant to be dropped\nif the render is aborted.\nThe bug happens when there\'s a concurrent update (an update from an\ninterleaved event) in between when the error is thrown and when the\nerror boundary does its second pass. The concurrent update is\ntransferred from the pending queue onto the base queue. Usually, at this\npoint the base queue is the same as the current queue. So when we\nappend the pending updates to the work-in-progress queue, it also\nappends to the current queue.\nHowever, in the case of an error boundary\'s second pass, the base queue\nhas already forked from the current queue; it includes both the\n"captured" updates and any concurrent updates. In that case, what we\nneed to do is append separately to both queues. Which we weren\'t doing.\nThat isn\'t the full story, though. You would expect that this mistake\nwould manifest as dropping the interleaved updates. But instead what\nwas happening is that the "captured" updates, the ones that are meant\nto be dropped if the render is aborted, were being added to the\ncurrent queue.\nThe reason is that the baseQueue structure is a circular linked list.\nThe motivation for this was to save memory; instead of separate first\nand last pointers, you only need to point to last.\nBut this approach does not work with structural sharing. So what was\nhappening is that the captured updates were accidentally being added\nto the current queue because of the circular link.\nTo fix this, I changed the baseQueue from a circular linked list to a\nsingly-linked list so that we can take advantage of structural sharing.\nThe "pending" queue, however, remains a circular list because it doesn\'t\nneed to be persistent.\nThis bug also affects the root fiber, which uses the same update queue\nimplementation and also acts like an error boundary.\nIt does not affect the hook update queue because they do not have any\nnotion of "captured" updates. So I\'ve left it alone for now. However,\nwhen we implement resuming, we will have to account for the same issue.\n\nEnsure base queue is a clone\n\nWhen an error boundary captures an error, we append the error update\nto the work-in-progress queue only so that if the render is aborted,\nthe error update is dropped.\nBefore appending to the queue, we need to make sure the queue is a\nwork-in-progress copy. Usually we clone the queue during\nprocessUpdateQueue; however, if the base queue has lower priority\nthan the current render, we may have bailed out on the boundary fiber\nwithout ever entering processUpdateQueue. So we need to lazily clone\nthe queue.\n\nAdd warning to protect against refactor hazard\n\nThe hook queue does not have resuming or "captured" updates, but if\nwe ever add them in the future, we\'ll need to make sure we check if the\nqueue is forked before transfering the pending updates to them.', 'ModernEventSystem: refactor accumulateTwoPhaseListeners (#18274)', 'useMutableSource hook (#18000)\nuseMutableSource hook\nuseMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.\nRFC: reactjs/rfcs#147', 'Flow type ReactDOMComponentTree (#18280)', "Empty commit to fix CI on master\nWeird GitHub bug caused CI jobs to run against master as if it was\na PR. Now it looks like master is failing, even though it isn't.\nBloop.", "Wrap Components and Profiler tabs with box-size style too (#18286)\nFor the browser extension, these views get rendered into portals and so they don't inherit the box-sizing style from the .DevTools wrapper element. This causes views like the Profiler commit selector to subtly break.", 'ReactDOM.useEvent: more scaffolding changes (#18282)', 'Remove manual feature flag overrides (#18291)\nTests now run against both versions of these flags, using the\ntest-www-variant command. So we can remove the manual overrides.', 'Set up infra for react-reconciler fork (#18285)\n\n\nReactFiberReconciler -> ReactFiberReconciler.old\n\n\nSet up infra for react-reconciler fork\n\n\nWe\'re planning to land some significant refactors of the reconciler.\nWe want to be able to gradually roll out the new implementation side-by-\nside with the existing one. So we\'ll create a short lived fork of the\nreact-reconciler package. Once the new implementation has stabilized,\nwe\'ll delete the old implementation and promote the new one.\nThis means, for as long as the fork exists, we\'ll need to maintain two\nseparate implementations. This sounds painful, but since the forks will\nstill be largely the same, most changes will not require two separate\nimplementations. In practice, you\'ll implement the change in the old\nfork and then copy paste it to the new one.\nThis commit only sets up the build and testing infrastructure. It does\nnot actually fork any modules. I\'ll do that in subsequent PRs.\nThe forked version of the reconciler will be used to build a special\nversion of React DOM. I\'ve called this build ReactDOMForked. It\'s only\nbuilt for www; there\'s no open source version.\nThe new reconciler is disabled by default. It\'s enabled in the\nyarn test-www-variant command. The reconciler fork isn\'t really\nrelated to the "variant" feature of the www builds, but I\'m piggy\nbacking on that concept to avoid having to add yet another\ntesting dimension.', 'Address feedback for accumulateTwoPhaseListeners (#18289)', 'ReactDOM.useEvent: Add DOM host event listener logic (#18292)', 'Move MS Windows build to CircleCI (#17984)\n\n\nMove MS Windows build to CircleCI\n\n\nUpdate to latest NodeJS\n\n\nCo-authored-by: Chris Lüer lueer@fb.com', 'Revert "Move MS Windows build to CircleCI (#17984)" (#18302)\nThis reverts commit 885ed469096d4da7ca038564b323e9b706f5a6d0.', 'Run ReactElementJSX-test against bundles (#18301)\n\n\nRun ReactElementJSX-test against bundles\n\n\nTry the new thing\n\n', 'Remove un-used function arg (#18303)', 'Refine event system types + pass through priority (#18305)', "Warn against state updates from useEffect destroy functions (#18307)\nDon't warn about unmounted state updates from within passive destroy function\n\nFixed test conditional. (It broke after recent variant refactor.)\nChanged warning wording for setState from within useEffect destroy callback\n", 'Replace passive effect context with boolean (#18309)', 'improve error message for cross-functional component updates (#18316)\n\n\nimprove error message for cross-functional component updates\n\n\ncorrectly use %s by quoting it\n\n\nuse workInProgress and lint\n\n\nadd test assertion\n\n\nfix test\n\n\nImprove the error message\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'Moved passive effects flag to be beside execution context (#18322)', 'ReactDOM.useEvent: wire to event system to the hook (#18304)', 'Bump react-shallow-renderer to 16.13.1 (#18187)', 'useEvent: Small tweaks and changes (#18328)', "Don't support older isomorphic React with newer renderers (#18329)\n\n\nDon't support older isomorphic React with newer renderers\n\n\nRemove the lazy hack\n\n", 'add jsx-runtime and jsx-dev-runtime (#18299)\nThis PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the "react" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the "react" module.', 'fix(react-devtools-shared): useDebugValue with complex types (#18070)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'test(getComponentName): Increase test coverage (#18149)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Don\'t fire the render phase update warning for class lifecycles (#18330)\n\nChange the warning to not say "function body"\n\nThis warning is more generic and may happen with class components too.\n\n\nDedupe by the rendering component\n\n\nDon\'t warn outside of render\n\n', 'React Event System: Refactor ElementListenerMap for upgrading (#18308)', 'Fix UMD Builds (ReactSharedInternals)\nReactCurrentBatchConfig.suspense does not exist in ReactSharedInternals.umd. This PR adds it.', "Don't use EventListener Fork in Modern WWW Builds (#18333)\n\nMove unsubscribe fork to EventListener\n\nThat way we can statically compile out more of these indirections.\n\nDon't use the EventListener fork for Modern WWW builds\n", "Fixed inconcistency with surrounding punctuation (#18339)\nThere was an inconsistency present on line 99 regarding the punctuation of the comment, all other comments found end in a period and this line had it's period omitted.", '[DevTools] Add shortcut keys for tab switching (#18248)\n\n[DevTools] Add shortcut keys for tab switching\nUse LocalStorage to remember most recently selected tab\n\nResolves #18227 and #18226\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Wire up bundler configs (#18334)\nThis allows different flight server and clients to have different configs\ndepending on bundler to serialize and resolve modules.', '[eslint-plugin-react-hooks] Disallow hooks in class components (#18341)\nPer discussion at Facebook, we think hooks have reached a tipping point where it is more valuable to lint against potential hooks in classes than to worry about false positives.\nTest plan:\n```\nrun from repo root\nyarn test --watch RuleOfHooks\n```', 'Stop exposing ReactDOMComponentTree from FB builds (#18338)', 'Modern Event System: refactor legacy FB support logic (#18336)', 'Changelog for 16.13.1', 'Update package.jsons for 16.13.1 patch relase', 'Revert accidental changes to package.json (#18348)\nThe publish script was written before we switched to running patch\nreleases out-of-band, so when updating the local package.json version\nnumbers, it accidentally reverted other changes that have landed to\nmaster since 16.13 was released.', 'ModernEventSystem: refine Flow types (#18349)', 'ModernEventSystem: fix event replaying (#18346)\n\nModernEventSystem: fix event replaying\n', "Remove error code step from publish script (#18350)\nError codes don't need to be pulled from CI anymore because the ones\nin source are already expected to match the build output.\nI noticed this when running the 16.13.1 release. Patch releases are cut\nwith the commit used to build the previous release as a base. So the\npublish script accidentally reverted the changes that had landed to\nthe error codes file since then.", "Follow ups to bundler configs (#18352)\nFollow ups from https://github.com/facebook/react/pull/18334\nI also introduced the concept of a module reference on the client too.\nWe don't need this for webpack so that gets compiled out but we need it\nfor www. Similarly I also need a difference between preload and load.", 'Empty commit to fix master.\nI accidentally did that thing again where I updated a PR branch to\nbe the same as the tip of master, which confused GitHub and caused it\nto run PR checks against master.', 'fix string ref cannot be auto converted warning for React.jsxDEV (#18354)\nThe string ref cannot be auto converted warning was using the wrong _self. This diff fixes this so it is now using the correct __self', 'ReactDOM.useEvent: support custom types (#18351)\n\nReactDOM.useEvent: support custom types\n', 'ReactDOM.useEvent: add EventTarget support (#18355)\n\nReactDOM.useEvent: add support for all EventTarget types\n', "Move some files out of /shared and rename to upper case (#18363)\n\nRename lower case isomorphic default exports modules to upper case named exports\n\nWe're somewhat inconsistent here between e.g. ReactLazy and memo.\nLet's pick one.\nThis also moves the responder, fundamental, scope creators from shared\nsince they're isomorphic and same as the other creators.\n\nMove some files that are specific to the react-reconciler from shared\n\nIndividual renderers are allowed to deep require into the reconciler.\n\nMove files specific to react-dom from shared\n\nreact-interactions is right now dom specific (it wasn't before) so we can\ntype check it together with other dom stuff. Avoids the need for\na shared ReactDOMTypes to be checked by RN for example.\n\n\nMove ReactWorkTags to the reconciler\n\n\nMove createPortal to export from reconciler\n\n\nOtherwise Noop can't access it since it's not allowed deep requires.", "Stop syncing ReactTypes to RN (#18366)\nThis is a really old one and all callers have since been codemodded away\nanyway because of problems.\nThis file is not really as rigorously maintained as the official Flow types\nbut has a few more specifics. However, the inconsistency causes problems\nwhen you try to pass files typed using the built-in Flow typing for React\nand mix it with these.\nWe just happen to get away with it because we compile out the types. If we\ndidn't we would hit those problems by even using these in our renderers.", 'Rename CI jobs after the command line equivalent (#18364)\nThis makes it easier to know what to write on your command line to replicate\na failure locally.', '[Flight] Move bundler configs to use Suspense instead of returning thenable (#18367)\n\n\nMove bundler configs to use suspense instead of returning thenable\n\n\nFix some Flow types\n\n', 'Remove unnecessary lines for hasBadMapPolyfill issue for rollup (#16231)', 'Refactor Lazy Components to use teh Suspense (and wrap Blocks in Lazy) (#18362)\n\n\nRefactor Lazy Components\n\n\nSwitch Blocks to using a Lazy component wrapper\n\n\nThen resolve to a true Block inside.\n\nTest component names of lazy Blocks\n', "Refactor React.Children to reduce indirection (#18332)\n\n\nDon't pool traversal context\n\n\nRemove traverseAllChildrenImpl indirection\n\n\nAll usages are internal so we can simply use the inner function directly.\n\n\nImplement forEach through map\n\n\nRemove second usage of traverseAllChildren\n\n\nThis isn't useful by itself but makes the layering easier to follow. traverseAllChildren is only used at the lowest layer now.\n\n\nReimplement count() and toArray() in terms of map()\n\n\nInline the only use of mapSingleChildIntoContext\n\n\nMove forEach down in the file\n\n\nUse the language\n\n\nGet rid of the traversal context. Use closures.\n\n\nMake mapIntoArray take an already escaped prefix\n\n\nMove count state out of mapIntoArray\n\n\nInline traverseAllChildren into mapIntoArray\n\n\nInline handleChild into mapIntoArray\n\n", "[Flight] Integrate Blocks into Flight (#18371)\n\nResolve Server-side Blocks instead of Components\n\nReact elements should no longer be used to extract arbitrary data but only\nfor prerendering trees.\nBlocks are used to create asynchronous behavior.\n\n\nResolve Blocks in the Client\n\n\nTests\n\n\nBug fix relay JSON traversal\n\n\nIt's supposed to pass the original object and not the new one.\n\n\nLint\n\n\nMove Noop Module Test Helpers to top level entry points\n\n\nThis module has shared state. It needs to be external from builds.\nThis lets us test the built versions of the Noop renderer.", 'ReactDOM.useEvent: add support for beforeblur/afterblur (#18370)\n\nReactDOM.useEvent: add support for beforeblur/afterblur\n', 'Revert "Upgrade to jest 25 (#17896)" (#18376)\nThis reverts commit cf0081263ced42ddebe0a0d868701890448bfd4b.\nThe changes to the test code relate to changes in JSDOM that come with Jest 25:\n\nSeveral JSDOM workarounds are no longer needed.\nSeveral tests made assertions to match incorrect JSDOM behavior (e.g. setAttribute calls) that JSDOM has now patched to match browsers.\nhttps://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh\nJSDOM no longer triggers default actions when dispatching click events.\nhttps://codesandbox.io/s/beautiful-cdn-ugn8f\nJSDOM fixed (jsdom/jsdom#2700) a bug so that calling focus() on an already focused element does not dispatch a FocusEvent.\nJSDOM now supports passive events.\nJSDOM has improved support for custom CSS properties.\nBut requires jsdom/cssstyle#112 to land to support webkit prefixed properties.\n', 'Flip the arguments of Blocks and make the query optional (#18374)\n\n\nFlip the arguments of Blocks and make the query optional\n\n\nRename Query to Load\n\n', 'Rename internal fields (#18377)', "Fix a mistake in ReactChildren refactor (#18380)\n\n\nRegression test for map() returning an array\n\n\nAdd forgotten argument\n\n\nThis fixes the bug.\n\nRemove unused arg and retval\n\nThese aren't directly observable. The arg wasn't used, it's accidental and I forgot to remove. The retval was triggering a codepath that was unnecessary (pushing to array) so I removed that too.\n\n\nFlowify ReactChildren\n\n\nTighten up types\n\n\nRename getComponentKey to getElementKey\n\n", "Inlined DevTools event emitter impl (#18378)\nDevTools previously used the NPM events package for dispatching events. This package has an unfortunate flaw though- if a listener throws during event dispatch, no subsequent listeners are called. I've replaced that event dispatcher with my own implementation that ensures all listeners are called before it re-throws an error.\nThis commit replaces that event emitter with a custom implementation that calls all listeners before re-throwing an error.", "Change .model getter to .readRoot method (#18382)\nOriginally the idea was to hide all suspending behind getters or proxies.\nHowever, this has some issues with perf on hot code like React elements.\nIt also makes it too easy to accidentally access it the first time in an\neffect or callback where things aren't allowed to suspend. Making it\nan explicit method call avoids this issue.\nAll other suspending has moved to explicit lazy blocks (and soon elements).\nThe only thing remaining is the root. We could require the root to be an\nelement or block but that creates an unfortunate indirection unnecessarily.\nInstead, I expose a readRoot method on the response. Typically we try to\navoid virtual dispatch but in this case, it's meant that you build\nabstractions on top of a Flight response so passing it a round is useful.", "Formalize the Wakeable and Thenable types (#18391)\n\nFormalize the Wakeable and Thenable types\n\nWe use two subsets of Promises throughout React APIs. This introduces\nthe smallest subset - Wakeable. It's the thing that you can throw to\nsuspend. It's something that can ping.\nI also use a shared type for Thenable in the cases where we expect a value\nso we can be a bit more rigid with our us of them.\n\nMake Chunks into Wakeables instead of using native Promises\n\nThis value is just going from here to React so we can keep it a lighter\nabstraction throughout.\n\nRenamed thenable to wakeable in variable names\n", "Add server-runtime to create Server Blocks (#18392)\nThis is equivalent to the jsx-runtime in that this is what the compiled\noutput on the server is supposed to target.\nIt's really just the same code for all the different Flights, but they\nhave different types in their arguments so each one gets their own entry\npoint. We might use this to add runtime warnings per entry point.\nUnlike the client-side React.block call this doesn't provide the factory\nfunction that curries the load function. The compiler is expected to wrap\nthis call in the currying factory.", "Pass BundlerConfig through to Relay Integration (#18393)\nI wasn't sure we needed this but looks like it'll come in handy.", 'ReactDOM.useEvent: Add support for experimental scopes API (#18375)\n\nReactDOM.useEvent: Add support for experimental scopes API\n', 'Remove "es6-symbol" package from DevTools (#18397)', 'DevTools v4.5.0 -> 4.6.0', 'ReactDOM.useEvent: enable on internal www and add inspection test (#18395)', 'eslint-plugin-react-hooks@3.0.0', '[Bugfix] Dropped updates inside a suspended tree (#18384)\n\nMinor test refactor: resolveText\n\nAdds a resolveText method as an alternative to using timers. Also\nremoves dependency on react-cache (for just this one test file; can do\nthe others later).\nTimer option is still there if you provide a ms prop.\n\nBugfix: Dropped updates in suspended tree\n\nWhen there are multiple updates at different priority levels inside\na suspended subtree, all but the highest priority one is dropped after\nthe highest one suspends.\nWe do have tests that cover this for updates that originate outside of\nthe Suspense boundary, but not for updates that originate inside.\nI\'m surprised it\'s taken us this long to find this issue, but it makes\nsense in that transition updates usually originate outside the boundary\nor "seam" of the part of the UI that is transitioning.\n\nBugfix: Suspense fragment skipped by setState\n\nFixes a bug where updates inside a suspended tree are dropped because\nthe fragment fiber we insert to wrap the hidden children is not part of\nthe return path, so it doesn\'t get marked during setState.\nAs a workaround, I recompute childExpirationTime right before deciding\nto bail out by bubbling it up from the next level of children.\nThis is something we should consider addressing when we refactor the\nFiber data structure.\n\nAdd back lastPendingTime field\n\nThis reverts commit 9a541139dfe36e8b9b02b1c6585889e2abf97389.\nI want to use this so we can check if there might be any lower priority\nupdates in a suspended tree.\nWe can remove it again during the expiration times refactor.\n\nUse lastPendingTime instead of Idle\n\nWe don\'t currently have an mechanism to check if there are lower\npriority updates in a subtree, but we can check if there are any in the\nwhole root. This still isn\'t perfect but it\'s better than using Idle,\nwhich frequently leads to redundant re-renders.\nWhen we refactor expirationTime to be a bitmask, this will no longer\nbe necessary because we\'ll know exactly which "task bits" remain.\n\nAdd a test for updating the fallback\n', 'Delete leftover assignment from #18384\nThis assignment should have been deleted in #18384. It was deleted in\nthe other branches, but I missed this one. About to open a PR that\nincludes a test that covers this branch.', "Don't show destroy function state update warning when updating ancestors (#18409)\nReact can't directly detect a memory leak, but there are some clues that warn about one. One of these clues is when an unmounted React component tries to update its state. For example, if a component forgets to remove an event listener when unmounting, that listener may be called later and try to update state, at which point React would warn about the potential leak.\nWarning signals like this are more useful if they're strong. For this reason, it's good to always avoid updating state from inside of an effect's cleanup function. Even when you know there is no potential leak, React has no way to know and so it will warn anyway.\nIn most cases we suggest moving state updates to the useEffect() body instead (to avoid triggering the warning). This works so long as the component is updating its own state (or the state of a descendant). However this will not work when a component updates its parent state in a cleanup function. If such a component is unmounted but its parent remains mounted, the state will be incorrect. For this reason, we now avoid showing the warning if a component is updating an ancestor.", 'chore: npm link more directly (#18428)', 'https link to editorconfig.org (#18421)', "Reset lastEffect when resuming SuspenseList (#18412)\nWe store an effect pointer so we can backtrack in the effect list in some\ncases. This is a stateful variable. If we interrupt a render we need to\nreset it.\nThis field was added after the optimization was added and I didn't remember\nto reset it here.\nOtherwise we end up not resetting the firstEffect so it points to a stale\nlist. As a result children don't end up inserted like we think they were.\nThen we try to remove them it errors.\nIt would be nicer to just get rid of the effect list and use the tree for\neffects instead. Maybe we still need something for deletions tho.", 'feat(StrictMode): Double-invoke render for every component (#18430)\n\n\nfeat(StrictMode): Double-invoke render for every component\n\n\nfix: Mark ReactTestRendererAsync as internal\n\n', 'Make interaction tracing on by default in all WWW builds (#18419)', "Bugfix: Do not unhide a suspended tree without finishing the suspended update (#18411)\n\nBugfix: Suspended update must finish to unhide\n\nWhen we commit a fallback, we cannot unhide the content without including\nthe level that originally suspended. That's because the work at level\noutside the boundary (i.e. everything that wasn't hidden during that\nrender) already committed.\n\nTest unblocking with a high-pri update\n", 'Add getInspectorDataForViewAtPoint (take two) (#18388)\n\n\nAdd getInspectorDataForViewAtPoint (take two)\n\n\nUpdates from review\n\n\nAdd DEV to dev-only variable\n\n\nMissed this rename\n\n', 'Remove User Timings (#18417)', "[ESLint] Check deps when callback body is outside the Hook call, too (#18435)\n\nRefactor: visit CallExpression\n\nInstead of visiting the functions and looking up to see if they're in a Hook call, visit Hook calls and look down to see if there's a callback inside. I will need this refactor so I can visit functions declared outside the call.\n\n\nCheck deps when callback body is outside the Hook call\n\n\nHandle the unknown case\n\n", 'Revert useEvent PRs (#18438)\n\nRevert "ReactDOM.useEvent: enable on internal www and add inspection test (#18395)"\n\nThis reverts commit e0ab1a429d178d86e13f073f8451d24033bc1838.\n\nRevert "ReactDOM.useEvent: Add support for experimental scopes API (#18375)"\n\nThis reverts commit a16b34974508cd23ce0844ad09a0e37a879d5591.\n\nReactDOM.useEvent: Add support for experimental scopes API\n', 'Add opt-in support for dangerous autofix (#18437)', 'Fix a warning typo (#18443)', 'Enable new passive effect behavior for FB builds (#18444)\n\nEnable new passive effect behavior for FB builds\n\nPreviously this behavior was controlled by GKs. This PR updates the flags to be enabled statically. It also enables the flags in the test builds.', 'Remove disableMapsAsChildren flag (#18445)\nChange warning to say the case is unsupported (not "will be deprecated")', 'Cleanup previous shims directories before re-copying (#18447)', 'Reset stateNode in resetWorkInProgress (#18448)\n\n\ntest(SuspenseList): Add failing test for class component\n\n\nReset stateNode when resetWorkInProgress\n\n\nThis is supposed to put the Fiber into the same state as if it was just\ncreated by child fiber reconciliation. For newly created fibers, that means\nthat stateNode is null.\nCo-authored-by: Sebastian Silbermann silbermann.sebastian@gmail.com', 'ReactDOM.useEvent: revert and add guard for null stateNode (#18441)', 'Move accumulateEventTargetListeners to its own module/function (#18407)', 'Remove ConcurrentMode and AsyncMode symbols (#18450)\nThis API was never released.', 'Disable module components dynamically for WWW (#18446)\n\n\nMake disableModulePatternComponents dynamic for WWW\n\n\nRun both flags and tests and respect the flag in SSR\n\n', 'Remove state update warning for passive effect cleanup functions (#18453)', 'Fix email cursor jump (#18379)\n\n\nadd email input fixture to show cursor jump\n\n\nfix cursor jump in email input\n\n\nCo-authored-by: Peter Potapov dr.potapoff-peter@yandex.ru\n\nadd regression tests to ensure attributes are working\n\nCo-authored-by: Peter Potapov dr.potapoff-peter@yandex.ru', 'feat(createContext): Include displayName in warning (#18386)', 'Do not warn when a controlled input has onInput handler. (#18189)\nonInput behaves the same as onChange for controlled inputs as far as I\nknow, so React should not print the following warning when onInput is\npresent.\n\nFailed prop type: You provided a value prop to a form field without an onChange handler. This will render a read-only field. If the field should be mutable use defaultValue. Otherwise, set either onChange or readOnly.\n', "Use Closure Compiler to compile to ES5 instead of Babel (#18449)\n\nUpgrade Closure\n\nThere are newer versions but they don't yet have corresponding releases\nof google-closure-compiler-osx.\n\n\nConfigure build\n\n\nRefactor ReactSymbols a bit\n\n\nProvides a little better output.", "Enable prefer-const lint rules (#18451)\n\nEnable prefer-const rule\n\nStylistically I don't like this but Closure Compiler takes advantage of\nthis information.\n\n\nAuto-fix lints\n\n\nManually fix the remaining callsites\n\n", 'Fix ESLint rule crash (#18455)', '[eslint-plugin-react-hooks] Added meta property (including docs) (#16607)\n\n\n[eslint-plugin-react-hooks] Added meta property (including docs)\n\n\n[eslint-plugin-react-hooks] Fixed typo (RuleOfHooks -> RulesOfHooks)\n\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'Don\'t close "Needs Investigation" issues (#18458)', 'Fixed race condition in release script (#18456)', "Fix: Don't read primaryChild.childExpirationTime (#18457)\nThis is a variant of the fix in 5a0f1d. We can't rely on the primary\nfiber's childExpirationTime field to be correct.\nIn this case, we can read from the Suspense boundary fiber instead.\nThis will include updates that exist in the fallback fiber, but that's\nnot a big deal; the important thing is that we don't drop updates.", 'Revert "Fix email cursor jump (#18379)" (#18459)\n\nRevert "Fix email cursor jump (#18379)"\n\nThis reverts commit 9b88b78b3d61e8fe81968d59b74592d5a53540b7.\n\nLeave fixtures be\n', 'Refactor Enter/Leave listener accumulation (#18405)\n\nRefactor Enter/Leave listener accumulation\n', 'Remove a flag for style collision warning (#18462)', 'Run more flags in VARIANT tests (#18461)\n\n\nRun more flags in VARIANT tests\n\n\nRevert enabling modern system\n\n\nFix\n\n', 'Revert: Enable new passive effect behavior for FB builds (#18467)', 'Modern Event System: refine flags and handling of enableLegacyFBSupport (#18466)', 'ReactDOM.useEvent: fix scope propagation issue (#18464)', 'Cleanup getListener and EventSystemFlags (#18469)', 'Revert "Revert: Enable new passive effect behavior for FB builds (#18467)" (#18468)\nThis reverts commit 3966081cf2ffb75cde8239399176f98338511a35.', 'Deprecate TestUtils.SimulateNative (#13407)', 'Modern Event System: Remove TestUtils.SimulateNative support (#18471)', "Remove /dist/ UMD builds (#18473)\n\nRemove /dist/ UMD builds\n\nWe publish UMDs to npm (and we're considering stopping even that).\nThis means we'll stop publishing to http://react.zpao.com/builds/master/latest/\n\nUpdate fixture paths\n", 'Add  to DOM fixtures (#18293)\n\n\nAdd  to DOM fixtures\n\n\nRemove uncontrolled\n\n', 'Update to Jest 25 (#18480)\n\nRevert "Revert "Upgrade to jest 25 (#17896)" (#18376)"\n\nThis reverts commit fc7835c65763a626e3999b2ae57e15616e61f342.\n\n\nOther fixes\n\n\nFix a broken test\n\n', 'useMutableSource: bugfix for new getSnapshot with mutation (#18297)', '[DevTools] - Highlight rendered by elements on hover. (#18479)\n\n\n[DevTools] - Highlight rendered by elements on hover.\n\n\nFixed formatting issue.\n\n\nDevTools - Extracted highlight logic to custom hook. Added highlight support for rendered by elements.\n\n\nRemoved unnecessary padding style\n\n\nRemoved unnecessary wrapper function.\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'remove jsx plugin from react (#18484)\nNow that the React JSX Babel Plugin is in Babel, remove this code from react', '[Flight] Add webpack plugin build (#18485)\n\nEject CRA from Flight\n\nWe need to eject because we\'re going to add a custom Webpack Plugin.\nWe can undo this once the plugin has upstreamed into CRA.\n\nAdd Webpack plugin build\n\nI call this entry point "webpack-plugin" instead of "plugin" even though\nthis is a webpack specific package. That\'s because there will also be a\nNode.js plugin to do the server transform.\n\n\nAdd Flight Webpack plugin to fixture\n\n\nRm UMD builds\n\n\nTransform classes\n\n\nRename webpack-plugin to plugin\n\n\nThis avoids the double webpack name. We\'re going to reuse this for both\nserver and client.', '[Flight] Lazily parse models and allow any value to suspend (#18476)\n\nLazily initialize models as they\'re read intead of eagerly when received\n\nThis ensures that we don\'t spend CPU cycles processing models that we\'re\nnot going to end up rendering.\nThis model will also allow us to suspend during this initialization if\ndata is not yet available to satisfy the model.\n\n\nRefactoring carefully to ensure bundles still compile to something optimal\n\n\nRemove generic from Response\n\n\nThe root model needs to be cast at one point or another same as othe\nchunks. So we can parameterize the read instead of the whole Response.\n\nRead roots from the 0 key of the map\n\nThe special case to read the root isn\'t worth the field and code.\n\nStore response on each Chunk\n\nInstead of storing it on the data tuple which is kind of dynamic, we store\nit on each Chunk. This uses more memory. Especially compared to just making\ninitializeBlock a closure, but overall is simpler.\n\nRename private fields to underscores\n\nResponse objects are exposed.\n\nEncode server components as delayed references\n\nThis allows us to stream in server components one after another over the\nwire. It also allows parallelizing their fetches and resuming only the\nserver component instead of the whole parent block.\nThis doesn\'t yet allow us to suspend deeper while waiting on this content\nbecause we don\'t have "lazy elements".', "Refactor Error Dialog Logging (#18487)\n\nRemove unnecessary CapturedError fields.\n\ncomponentName is not necessary and is misleading when the error is caused\nelsewhere in the stack. The stack is sufficient.\nThe many error boundary fields are unnecessary because they can be inferred\nby the boundary itself.\n\nDon't attempt to build a stack twice\n\nIf it was possible, it would've been done in createCapturedValue.\n\nPush the work needed by the works into the forks\n\nThis avoids needing this in the npm published case.", 'Add KeyboardEvent.code to synthetic event (#18287)\n\n\nAdd KeyboardEvent.code to synthetic event\n\n\nremove null to 0 transformation\n\n\nmake onKeyPress work\n\n', '[eslint] strip tailing property in assignments (#16784)\n\n\n[eslint] strip tailing property in assignments\n\n\ninline stripTailingPropInAssignment\n\n', "Don't use checkPropTypes for internals (#18488)\nWe use console.error for internal warnings.", '[eslint] Consider useRef() as ... as constant (#18496)\nSometimes you need to use casts, eg: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/28884#issuecomment-471341041. This change ignores them and allows you to still omit the ref object from the deps list.\nTest Plan: unit tests', 'Fix performance issue in react-devtools when highlight enabled (#18498)\n\n\nFix performance issue in react-devtools when highlight enabled\n\n\ngetting minimum expiration time (fix)\n\n', 'Profiler tooltip shows self duration (#18510)', 'Bump minimist from 1.2.0 to 1.2.3 (#18501)\nBumps minimist from 1.2.0 to 1.2.3.\n- Release notes\n- Commits\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'Bump minimist from 1.2.0 to 1.2.3 in /scripts/bench (#18500)\nBumps minimist from 1.2.0 to 1.2.3.\n- Release notes\n- Commits\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'React Event System: cleanup plugins + break out update batching logic (#18503)', "Refactor Component Stack Traces (#18495)\n\n\nAdd feature flag\n\n\nSplit stack from current fiber\n\n\nYou can get stack from any fiber, not just current.\n\nRefactor description of component frames\n\nThese should use fiber tags for switching. This also puts the relevant code\nbehind DEV flags.\n\nWe no longer expose StrictMode in component stacks\n\nThey're not super useful and will go away later anyway.\n\nUpdate tests\n\nContext is no longer part of SSR stacks. This was already the case on the\nclient.\nforwardRef no longer is wrapped on the stack. It's still in getComponentName\nbut it's probably just noise in stacks. Eventually we'll remove the wrapper\nso it'll go away anyway. If we use native stack frames they won't have this\nextra wrapper.\nIt also doesn't pick up displayName from the outer wrapper. We could maybe\ntransfer it but this will also be fixed by removing the wrapper.\n\nForward displayName onto the inner function for forwardRef and memo in DEV\n\nThis allows them to show up in stack traces.\nI'm not doing this for lazy because lazy is supposed to be called on the\nconsuming side so you shouldn't assign it a name on that end. Especially\nnot one that mutates the inner.\n\nUse multiple instances of the fake component\n\nWe mutate the inner component for its name so we need multiple copies.", 'Add useOpaqueIdentifier Hook (#17322)\n\nAdd useOpaqueIdentifier Hook\n\nWe currently use unique IDs in a lot of places. Examples are:\n  * <label for="ID">\n  * aria-labelledby\nThis can cause some issues:\n  1. If we server side render and then hydrate, this could cause an\n     hydration ID mismatch\n  2. If we server side render one part of the page and client side\n     render another part of the page, the ID for one part could be\n     different than the ID for another part even though they are\n     supposed to be the same\n  3. If we conditionally render something with an ID ,  this might also\n     cause an ID mismatch because the ID will be different on other\n     parts of the page\nThis PR creates a new hook useUniqueId that generates a different\nunique ID based on whether the hook was called on the server or client.\nIf the hook is called during hydration, it generates an opaque object\nthat will rerender the hook so that the IDs match.\nCo-authored-by: Andrew Clark git@andrewclark.io', 'Revert "Refactor commitPlacement to recursively insert nodes (#17996)" (#18517)\nThis reverts commit df5faddcc2ad27be5700823d4f5367e5e9ae4620.', 'Improved Profiler tooltip confusing/misleading wording (#18523)', 'Change stalebot messages (#18524)', 'Filter certain DOM attributes (e.g. src) if value is empty string (#18513)\n\nFilter certain DOM attributes (e.g. src, href) if their values are empty strings\n\nThis prevents e.g.  from making an unnecessar HTTP request for certain browsers.\n\n\nExpanded warning recommendation\n\n\nImproved error message\n\n\nFurther refined error message\n\n', 'Fix whitespace problem wiht DevTools Components search (#18527)', 'DevTools Profiler: Fix "cannot read property \'memoizedState\' of null" (#18522)', 'Export unstable_useEvent for www FB ReactDOM builds (#18532)', "Clear finished discrete updates during commit phase (#18515)\n\n\nReproduce a bug where flushDiscreteUpdates causes fallback never to be committed\n\n\nPing suspended level when canceling its timer\n\n\nMake sure the suspended level is marked as pinged so that we return back\nto it later, in case the render we're about to start gets aborted.\nGenerally we only reach this path via a ping, but we shouldn't assume\nthat will always be the case.\n\nClear finished discrete updates during commit phase\n\nIf a root is finished at a priority lower than that of the latest pending discrete\nupdates on it, these updates must have been finished so we can clear them now.\nOtherwise, a later call of flushDiscreteUpdates would start a new empty render\npass which may cause a scheduled timeout to be cancelled.\n\nAdd TODO\n\nHappened to find this while writing a test. A JSX element comparison\nfailed because one of them elements had a functional component as an\nowner, which should ever happen.\nI'll add a regression test later.\nCo-authored-by: Andrew Clark git@andrewclark.io", 'Make uncontrolled -> controlled warning clearer (#17070)\n\n\nMake uncontrolled -> controlled warning clearer\n\n\nUpdate phrasing, mirror for opposite direction\n\n\nRemove unused substitution\n\n\nUpdate warning tests\n\n\nLiterally got these backwards, womp womp\n\n\nRerere-fix tests\n\n', 'Improve detachFiber (#18536)', 'More robust fix for #18515 (#18535)\n\nAdd another test for #18515 using pings\n\nAdds a regression test for the same underlying bug as #18515 but using\npings.\nTest already passes, but I confirmed it fails if you revert the fix\nin #18515.\n\nSet nextPendingLevel after commit, too\n', "Bugfix: Render phase update causes remaining updates in same component to be dropped (#18537)\n\nBugfix: Render phase update leads to dropped work\n\nRender phase updates should not affect the fiber.expirationTime field.\nWe don't have to set anything on the fiber because we're going to\nprocess the render phase update immediately.\nWe also shouldn't reset the expirationTime field in between render\npasses because it represents the remaining work left in the update\nqueues. During the re-render, the updates that were skipped in the\noriginal pass are not processed again.\nI think my original motivation for using this field for render phase\nupdates was so I didn't have to add another module level variable.\n\nAdd repro case for #18486\n\nCo-authored-by: Dan Abramov dan.abramov@me.com", "Fix bailout broken in lazy components due to default props resolving (#18539)\n\n\nAdd failing tests for lazy components\n\n\nFix bailout broken in lazy components due to default props resolving\n\n\nWe should never compare unresolved props with resolved props. Since comparing\nresolved props by reference doesn't make sense, we use unresolved props in that\ncase. Otherwise, resolved props are used.\n\nAvoid reassigning props warning when we bailout\n", 'Revert "Revert "Refactor commitPlacement to recursively insert nodes (#17996)" (#18517)" (#18540)\nThis reverts commit e69ca310ea56b6f2f510dd463902405285953432.', 'Disable console.logs in the second render pass of DEV mode double render (#18547)\n\n\nDisable console log during the second rerender\n\n\nUse the disabled log to avoid double yielding values in scheduler mock\n\n\nReenable debugRenderPhaseSideEffectsForStrictMode in tests that can\n\n', "Don't use closures in DevTools injection (#18278)\n\nDon't use closures in DevTools injection\n\nNested closures are tricky. They're not super efficient and when they share\nscope between multiple closures they're hard for a compiler to optimize.\nIt's also unclear how many versions will be created.\nBy hoisting things out an just make it simple calls the compiler can do\na much better job.\n\nStore injected hook to work around fast refresh\n", "Port more tests to the Scheduler.unstable_yieldValue pattern and drop internal.js (#18549)\n\n\nDrop the .internal.js suffix on some files that don't need it anymore\n\n\nPort some ops patterns to scheduler yield\n\n\nFix triangle test to avoid side-effects in constructor\n\n\nMove replaying of setState updaters until after the effect\n\n\nOtherwise any warnings get silenced if they're deduped.\n\n\nDrop .internal.js in more files\n\n\nDon't check propTypes on a simple memo component unless it's lazy\n\n\nComparing the elementType doesn't work for this because it will never be\nthe same for a simple element.\nThis caused us to double validate these. This was covered up because in\ninternal tests this was deduped since they shared the prop types cache\nbut since we now inline it, it doesn't get deduped.", 'Add .old prefix to reconciler modules', "Split cross-package types from implementation\nSome of our internal reconciler types have leaked into other packages.\nUsually, these types are treated as opaque; we don't read and write\nto its fields. This is good.\nHowever, the type is often passed back to a reconciler method. For\nexample, React DOM creates a FiberRoot with createContainer, then\npasses that root to updateContainer. It doesn't do anything with the\nroot except pass it through, but because updateContainer expects a\nfull FiberRoot, React DOM is still coupled to all its fields.\nI don't know if there's an idiomatic way to handle this in Flow. Opaque\ntypes are simlar, but those only work within a single file. AFAIK,\nthere's no way to use a package as the boundary for opaqueness.\nThe immediate problem this presents is that the reconciler refactor will\ninvolve changes to our internal data structures. I don't want to have to\nfork every single package that happens to pass through a Fiber or\nFiberRoot, or access any one of its fields. So my current plan is to\nshare the same Flow type across both forks. The shared type will be a\nsuperset of each implementation's type, e.g. Fiber will have both an\nexpirationTime field and a lanes field. The implementations will\ndiverge, but not the types.\nTo do this, I lifted the type definitions into a separate module.", 'Add forked copies of reconciler modules\nAll changes in this commit were generated by the following commands.\nCopy each module that ends with .old to a new file that ends\nwith .new:\nsh\nfor f in packages/react-reconciler/src/*.old.js; do cp "$f" "$(echo "$f" | sed s/\\.old/\\.new/)"; done\nThen transform the internal imports:\nsh\ngrep -rl --include="*.new.js" \'.old\' packages/react-reconciler/src/| xargs sed -i \'\' "s/\\.old\\\'/\\.new\\\'/g"', 'Point ReactDOMForked to the new implementation\nUpdates Rollup, Jest, and Flow configuration to point to the new\nentry points.', 'Update stale.yml', 'Move plugins into their own directory (#18553)', 'Make enableLegacyFBSupport flag dynamic for www (#18551)', 'Fix fiber memory leak with runAllPassiveEffectDestroysBeforeCreates (#18554)', 'Clear more Fiber fields in detachFiber (#18556)', 'Port error boundaries test to yieldValue (#18558)', 'Script for syncing changes between forks (#18550)\nAdds command yarn merge-fork.\nsh\nyarn merge-fork --base-dir=packages/react-reconciler/src ReactFiberWorkLoop\nThis will take all the changes in ReactFiberWorkLoop.new.js and apply\nthem to ReactFiberWorkLoop.old.js.\nYou can merge multiple modules at a time:\nsh\nyarn merge-fork \\\n  --base-dir=packages/react-reconciler/src \\\n  ReactFiberWorkLoop \\\n  ReactFiberBeginWork \\\n  ReactFiberCompleteWork \\\n  ReactFiberCommitWork\nYou can provide explicit "old" and "new" file names. This only works\nfor one module at a time:\nsh\nyarn merge-fork \\\n  --base-dir=packages/react-reconciler/src \\\n  --old=ReactFiberExpirationTime.js \\\n  --new=ReactFiberLane.js\nThe default is to merge changes from the new module to the old one. To\nmerge changes in the opposite direction, use --reverse.\nsh\nyarn merge-fork \\\n  --reverse \\\n  --base-dir=packages/react-reconciler/src \\\n  ReactFiberWorkLoop\nBy default, the changes are compared to HEAD. You can use --base-ref\nto compare to any rev. For example, while working on a PR, you might\nmake multiple commits to the new fork before you\'re ready to backport\nthem to the old one. In that case, you want to compare to the merge\nbase of your PR branch:\nsh\nyarn merge-fork \\\n  --base-ref=$(git merge-base HEAD origin/master)\n  --base-dir=packages/react-reconciler/src \\\n  ReactFiberWorkLoop', 'Exclude forwardRef and memo from stack frames (#18559)\nWe can\'t patch the row. We could give these their own "built-in" stack\nframe since they\'re conceptually HoCs. However, from a debugging\nperspective this is not very useful meta data and quite noisy. So I\'m\njust going to exclude them.', 'Revert "Clear more Fiber fields in detachFiber (#18556)" (#18562)\nThis reverts commit d48dbb824985166ecb7b2959db03090a8593dce0.', 'Fork ReactFiberExpirationTime\nI had thought I wouldn\'t fork this one because the new "lanes" module\nwill be pretty different, but I need it to make some\nincremental changes.', "Decouple expiration times and transition timeouts (#17920)\nWe currently use the expiration time to represent the timeout of a\ntransition. Since we intend to stop treating work priority as a\ntimeline, we can no longer use this trick.\nIn this commit, I've changed it to store the event time on the update\nobject instead. Long term, we will store event time on the root as a map\nof transition -> event time. I'm only storing it on the update object\nas a temporary workaround to unblock the rest of the changes.", "Don't return from perform/completeUnitOfWork  (#18566)\n\n\nRemove unnecessary workInProgress line\n\n\nMutate workInProgress instead of returning\n\n\nWe were ambivalent about this before.\n\nMake handleError a void method too\n", "Bubble errors if processing the error itself errors (#18567)\nIf we've tried completing an incomplete boundary once and failed, we don't\nneed to try again.", 'ESLint rule to forbid cross fork imports (#18568)\nModules that belong to one fork should not import modules that belong to\nthe other fork.\nHelps make sure you correctly update imports when syncing changes across\nimplementations.\nAlso could help protect against code size regressions that might happen\nif one of the forks accidentally depends on two copies of the same\nmodule.', 'Overhauled release scripts and docs (#18569)\n\nOverhauled release scripts and docs\n', "Build Component Stacks from Native Stack Frames (#18561)\n\n\nImplement component stack extraction hack\n\n\nNormalize errors in tests\n\n\nThis drops the requirement to include owner to pass the test.\n\n\nSpecial case tests\n\n\nAdd destructuring to force toObject which throws before the side-effects\n\n\nThis ensures that we don't double call yieldValue or advanceTime in tests.\nIdeally we could use empty destructuring but ES lint doesn't like it.\n\nCache the result in DEV\n\nIn DEV it's somewhat likely that we'll see many logs that add component\nstacks. This could be slow so we cache the results of previous components.\n\n\nFixture\n\n\nAdd Reflect to lint\n\n\nLog if out of range.\n\n\nFix special case when the function call throws in V8\n\n\nIn V8 we need to ignore the first line. Normally we would never get there\nbecause the stacks would differ before that, but the stacks are the same if\nwe end up throwing at the same place as the control.", 'Fix Component Stacks for IE and Native Classes in Safari (#18575)\n\nAdd more edge cases to fixture\n\nAlso adjust some expectations. I think the column should ideally be 1 but varies.\nThe Example row is one line off because it throws on the hook but should ideally be the component.\nSimilarly class components with constructors may have the line in the constructor.\n\nAccount for the construct call taking a stack frame\n\nWe do this by first searching for the first different frame, then find\nthe same frames and then find the first different frame again.\n\nThrow controls\n\nOtherwise they don\'t get a stack frame associated with them in IE.\n\nProtect against generating stacks failing\n\nErrors while generating stacks will bubble to the root. Since this technique\nis a bit sketchy, we should probably protect against it.\n\nDon\'t construct the thing that throws\n\nInstead, we pass the prototype as the "this". It\'s new every time anyway.', 'Add pragma for feature testing: @gate (#18581)\n\nAdd pragma for feature testing: @gate\n\nThe @gate pragma declares under which conditions a test is expected to\npass.\nIf the gate condition passes, then the test runs normally (same as if\nthere were no pragma).\nIf the conditional fails, then the test runs and is expected to fail.\nAn alternative to it.experimental and similar proposals.\nExamples\nBasic:\njs\n// @gate enableBlocksAPI\ntest(\'passes only if Blocks API is available\', () => {/*...*/})\nNegation:\njs\n// @gate !disableLegacyContext\ntest(\'depends on a deprecated feature\', () => {/*...*/})\nMultiple flags:\njs\n// @gate enableNewReconciler\n// @gate experimental\ntest(\'needs both useEvent and Blocks\', () => {/*...*/})\nLogical operators (yes, I\'m sorry):\njs\n// @gate experimental && (enableNewReconciler || disableSchedulerTimeoutBasedOnReactExpirationTime)\ntest(\'concurrent mode, doesn\\\'t work in old fork unless Scheduler timeout flag is disabled\', () => {/*...*/})\nStrings, and comparion operators\nNo use case yet but I figure eventually we\'d use this to gate on\ndifferent release channels:\njs\n// @gate channel ===  "experimental" || channel === "modern"\ntest(\'works in OSS experimental or www modern\', () => {/*...*/})\nHow does it work?\nI\'m guessing those last two examples might be controversial. Supporting\nthose cases did require implementing a mini-parser.\nThe output of the transform is very straightforward, though.\nInput:\njs\n// @gate a && (b || c)\ntest(\'some test\', () => {/*...*/})\nOutput:\njs\n_test_gate(ctx => ctx.a && (ctx.b || ctx.c, \'some test\'), () => {/*...*/});\nIt also works  with it, it.only, and fit. It leaves it.skip and\nxit alone because those tests are disabled anyway.\n_test_gate is a global method that I set up in our Jest config. It\nworks about the same as the existing it.experimental helper.\nThe context (ctx) argument is whatever we want it to be. I set it up\nso that it throws if you try to access a flag that doesn\'t exist. I also\nadded some shortcuts for common gating conditions, like old\nand new:\n```js\n// @gate experimental\ntest(\'experimental feature\', () => {/.../})\n// @gate new\ntest(\'only passes in new reconciler\', () => {/.../})\n```\nWhy implement this as a pragma instead of a runtime API?\n\nDoesn\'t require monkey patching built-in Jest methods. Instead it\n  compiles to a runtime function that composes Jest\'s API.\nWill be easy to upgrade if Jest ever overhauls their API or we switch\n  to a different testing framework (unlikely but who knows).\n\nIt feels lightweight so hopefully people won\'t feel gross using it.\n  For example, adding or removing a gate pragma will never affect the\n  indentation of the test, unlike if you wrapped the test in a\n  conditional block.\n\n\nCompatibility with console error/warning tracking\n\n\nWe patch console.error and console.warning to track unexpected calls\nin our tests. If there\'s an unexpected call, we usually throw inside\nan afterEach hook. However, that\'s too late for tests that we\nexpect to fail, because our _test_gate runtime can\'t capture the\nerror. So I also check for unexpected calls inside _test_gate.\n\nMove test flags to dedicated file\n\nAdded some instructions for how the flags are set up and how to\nuse them.\n\nAdd dynamic version of gate API\n\nReceives same flags as the pragma.\nIf we ever decide to revert the pragma, we can codemod them to use\nthis instead.', 'Codemod it.experimental to gate pragma (#18582)\n\nCodemod it.experimental to gate pragma\n\nFind-and-replace followed by Prettier\n\nDelete it.experimental\n\nRemoves the API from our test setup script', 'Fix "missing flag" error for non-boolean types (#18592)\nNot all test flags are booleans, e.g. the build type', 'DevTools: Switch between "Rendered At" renders using keyboard arrow keys (#18586)\n\nAdd keyboard navigation to fibre info sidebar\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Migrate conditional tests to gate pragma (#18585)\n\nMigrate conditional tests to gate pragma\n\nI searched through the codebase for this pattern:\n```js\ndescribe(\'test suite\', () => {\n  if (!EXPERIMENTAL) { // or some other condition\n    test("empty test so Jest doesn\'t complain", () => {});\n    return;\n  }\n// Unless we\'re in experimental mode, none of the tests in this block\n  // will run.\n})\n```\nand converted them to the @gate pragma instead.\nThe reason this pattern isn\'t preferred is because you end up disabling\nmore tests than you need to.\n\nAdd flag for www release channels\n\nUsing a heuristic where I check a flag that is known to only be enabled\nin www. I left a TODO to instead set the release channel explicitly in\neach test config.', "Fix www tests not running in prod (#18593)\nI made a mistake when setting these up a while ago. Setting the NODE_ENV\nin the CircleCI config doesn't work because it's also set in the node\nscript command.\nThe number of test commands is getting out of control. Might need to fix\nit at some point. Not today for me.", 'Delete flushSuspenseFallbacksInTests flag (#18596)\n\n\nMove renderer act to work loop\n\n\nDelete flushSuspenseFallbacksInTests\n\n\nThis was meant to be a temporary hack to unblock the act work, but it\nquickly spread throughout our tests.\nWhat it\'s meant to do is force fallbacks to flush inside act even in\nConcurrent Mode. It does this by wrapping the setTimeout call in a\ncheck to see if it\'s in an act context. If so, it skips the delay and\nimmediately commits the fallback.\nReally this is only meant for our internal React tests that need to\nincrementally render. Nobody outside our team (and Relay) needs to do\nthat, yet. Even if/when we do support that, it may or may not be with\nthe same flushAndYield pattern we use internally.\nHowever, even for our internal purposes, the behavior isn\'t right\nbecause a really common reason we flush work incrementally is to make\nassertions on the "suspended" state, before the fallback has committed.\nThere\'s no way to do that from inside act with the behavior of this\nflag, because it causes the fallback to immediately commit. This has led\nus to not use act in a lot of our tests, or to write code that\ndoesn\'t match what would actually happen in a real environment.\nWhat we really want is for the fallbacks to be flushed at the *endof\ntheact` scope. Not within it.\nThis only affects the noop and test renderer versions of act, which\nare implemented inside the reconciler. Whereas ReactTestUtils.act is\nimplemented in "userspace" for backwards compatibility. This is fine\nbecause we didn\'t have any DOM Suspense tests that relied on this flag;\nthey all use test renderer or noop.\nIn the future, we\'ll probably want to move always use the reconciler\nimplementation of act. It will not affect the prod bundle, because we\ncurrently only plan to support act in dev. Though we still haven\'t\ncompletely figured that out. However, regardless of whether we support a\nproduction act for users, we\'ll still need to write internal React\ntests in production mode. For that use case, we\'ll likely add our own\ninternal version of act that assumes a mock Scheduler and might rely\non hacks that don\'t 100% align up with the public one.', 'remove unnecessary variable comparation (#18598)\nSince it will continue when the props are equal in line 767, there is no need to compare whether they are not equal.', 'Remove .internal from more test suites (#18597)', 'Move beforeblur phase to prepareForCommit (#18609)', 'ReactDOM.useEvent: add useEvent interaction hook (#18604)', 'Fix typo in TestFlags\nCopypasta when setting up old and new aliases. old should mean\nthat enableNewReconciler is off.', 'Delete mutableSourceFirstPendingUpdateTime (#18613)', 'Update nvmrc to the same one used in CI (#18623)', 'Add experimental DebugTracing logger for internal use (#18531)', 'Fix wrong command in config.yml (#18624)', 'Fix CI (#18626)', 'ADD: disableRemotePlayback attribute for HTML5 videos (#18619)\n\n\nAdd support for disableremoteplayback\n\n\nOrder attributes alphabetically\n\n\nCo-authored-by: Tom Brown Thomas.Brown-CIC-UK@ibm.com', 'Fix requiring timers module with non standard require (#18632)\nfixes #18589', "Run error replay test again new reconciler (#18628)\nThis is one of our few tests of an internal function. Need to import\nthe module that corresponds to the reconciler that's being tested.", 'Create copy of Legacy event plugins for Modern system (#18637)', 'Revert legacy plugin modules (#18638)', 'Unify Flare FocusWithin responder with useFocusWithin (#18636)', 'Statically disable factory components for WWW (#18641)', 'Clean up modern plugins to remove dead code (#18639)', 'Bump https-proxy-agent from 2.2.2 to 2.2.4 (#18643)\nBumps https-proxy-agent from 2.2.2 to 2.2.4.\n- Release notes\n- Commits\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'Bump https-proxy-agent from 2.2.1 to 2.2.4 in /scripts/release (#18642)\nBumps https-proxy-agent from 2.2.1 to 2.2.4.\n- Release notes\n- Commits\nSigned-off-by: dependabot[bot] support@github.com\nCo-authored-by: dependabot[bot] 49699333+dependabot[bot]@users.noreply.github.com', 'Fixed DevTools extension build:dev command (#18648)', 'Further cleanup to before/after blur (#18649)', 'Revert focus event PRs (#18655)\n\nRevert "Further cleanup to before/after blur (#18649)"\n\nThis reverts commit e2ccbf0358fafc8eb4470a45f5bca1cb97a4bba2.\n\nRevert "Unify Flare FocusWithin responder with useFocusWithin (#18636)"\n\nThis reverts commit f24a9e70980c2b1d0eb8309eb751315ff39f96bd.', "Remove redundant expiration time comparisons (#18620)\nI'm going through all the expiration times comparisons as part of my\nrefactor and I noticed this one has a redundancy.", 'Revise isFiberInsideHiddenOrRemovedTree (#18662)', "Fix for #18657 (#18663)\n\n\nFailing test for #18657\n\n\nRemove incorrect priority check\n\n\nI think this was just poor factoring on my part in #18411. Honestly it\ndoesn't make much sense to me, but my best guess is that I must have\nthought that when baseTime > currentChildExpirationTime, the function\nwould fall through to the\ncurrentChildExpirationTime < renderExpirationTime branch below.\nReally I think just made an oopsie.\nRegardless, this logic is galaxy brainéd. A goal of the Lanes refactor\nI'm working on is to make these types of checks -- is there remaining\nwork in this tree? -- a lot easier to think about. Hopefully.", "Make Flow work with your editor (#18664)\nWe typecheck the reconciler against each one of our host configs.\nyarn flow dom checks it against the DOM renderer, yarn flow native\nchecks it against the native renderer, and so on.\nTo do this, we generate separate flowconfig files.\nCurrently, there is no root-level host config, so running Flow\ndirectly via flow CLI doesn't work. You have to use the yarn flow\ncommand and pick a specific renderer.\nA drawback of this design, though, is that our Flow setup doesn't work\nwith other tooling. Namely, editor integrations.\nI think the intent of this was maybe so you don't run Flow against a\nrenderer than you intended, see it pass, and wrongly think you fixed\nall the errors. However, since they all run in CI, I don't think this\nis a big deal. In practice, I nearly always run Flow against the same\nrenderer (DOM), and I'm guessing that's the most common workflow for\nothers, too.\nSo what I've done in this commit is modify the yarn flow command to\ncopy the generated .flowconfig file into the root directory. The\neditor integration will pick this up and show Flow information for\nwhatever was the last renderer you checked.\nEverything else about the setup is the same, and all the renderers will\ncontinue to be checked by CI.", "Fix incorrect unmounted state update warning (#18617)\n\nFix incorrect unmounted state update warning\n\nWe detach fibers (which nulls the  field) when we commit a deletion, so any state updates scheduled between that point and when we eventually flush passive effect destroys won't have a way to check if there is a pending passive unmount effect scheduled for its alternate unless we also explicitly track this for both the current and the alternate.\nThis commit adds a new DEV-only effect type, PendingPassiveUnmountDev, to handle this case.", 'ReactDOM: remove unstable-native-dependencies bundle (#18483)\nThis is only used by react-native-web and will be replaced by a user-space\nimplementation. See: https://github.com/necolas/react-native-web/issues/1568', 'Revert "Revert focus event PRs (#18655)" (#18671)\nThis reverts commit 58c895e59cd2822a9a7a67606d5fe7da5e09ba2a.', "fix: skip dangerouslySetInnerHtml hydration warning if it's undefined (#18676)\n\n\ntest: Add failing case for dangerouslySetInnerHtml=undefined\n\n\nfix: skip dangerouslySetInnerHtml warning if it's undefined\n\n\ntest: add similar test that should trigger the warning\n\n\nchore: Remove redundant nullish check\n\n\nPoke yarn_test_www_variant which timed out\n\n\ntest: Add smaller test for innerHTML=string to innerHTML=undefined\n\n", 'chore: Build react-dom/server in codesandbox CI (#18679)', 'Refine the heuristics around beforeblur/afterblur (#18668)\n\nRefine the heuristics around beforeblur/afterblur\n', 'Modern event system: fix selectionchange bug (#18680)', 'Pressable click fix (#18625)\n\n\nUpdate press-legacy to use native click events\n\n\nupdate tests for pressable change\n\n\nfix formatting issue\n\n\nAddress comments. Bring back some tests, remove others. Cleanup\n\n\nFix flow and lint errors\n\n\nformatting fix missed by yarn lint\n\n', 'Upgrade fbjs-scripts (#18684)\n\nUpgrade fbjs-scripts\n\nThis script takes into account the NODE_ENV as part of jest cache keys.\nThis avoids flaky tests since we depend on different transforms in prod\nand dev.\n\nUpgrade Fresh test to Babel 7 transform\n', 'Remove null sibling (#18687)', 'Revert "Pressable click fix (#18625)" (#18688)\nThis reverts commit 5f7b175b35fa6faccb0da14e897dcda9c13d6031.', 'Remove ReactDOM.useEvent and associated types+tests (#18689)', "Avoid passing custom stacks to console.error (#18685)\n\n\nDetect double stacks in the new format in tests\n\n\nRemove unnecessary uses of getStackByFiberInDevAndProd\n\n\nThese all execute in the right execution context already.\n\n\nSet the debug fiber around the cases that don't have an execution context\n\n\nRemove stack detection in our console log overrides\n\n\nWe never pass custom stacks as part of the args anymore.\n\nBonus: Don't append getStackAddendum to invariants\n\nWe print component stacks for every error anyway so this is just duplicate\ninformation.", 'DevTools: Improved "native" component stacks (#18656)\n\nDevTools console override handles new component stack format\n\nDevTools does not attempt to mimic the default browser console format for its component stacks but it does properly detect the new format for Chrome, Firefox, and Safari.', 'Pin RNW to canary (#18692)\nThis unbreaks DevTools shell with the latest ReactDOM in master.', 'Fix mistyped script arbitrary code execution vulnerability (#18660)\n\n\nadd test to trustedTypes-test.internal.js\n\n\nfix mistyped script arbitrary code execution\n\n\nRemoved redundant .toLowerCase() call\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Nit: add suffix _TIMEOUT consistently in scheduler (#18696)', "Temporarily Remove DebugTracing from the New Reconciler (#18697)\n\n\nRemove priority field from tracing\n\n\nRemove DebugTracing mode from new reconciler (temporarily)\n\n\nRun DebugTracing tests in the other variant so it's no on for new reconciler\n\n", "Don't dedupe using the stack (#18693)\nWe currently use the stack to dedupe warnings in a couple of places.\nThis is a very heavy weight way of computing that a warning doesn't need\nto be fired.\nThis uses parent component name as a heuristic for deduping. It's not\nperfect but as soon as you fix one you'll uncover the next. It might be a\nlittle annoying but having many logs is also annoying.\nWe now have no special cases for stacks. The only thing that uses stacks in\ndev is the console.error and dev tools. This means that we could\nexternalize this completely to an console.error patching module and drop\nit from being built-in to react.\nThe only prod/dev behavior is the one we pass to error boundaries or the\nerror we throw if you don't have an error boundary.", 'DevTools temporarily disable prepareStackTrace before creating custom component stacks (#18717)', "Disable prepareStackTrace while we're generating stacks (#18708)\nThis could be used to do custom formatting of the stack trace in a way\nthat isn't compatible with how we use it. So we disable it while we use\nit.\nIn theory we could call this ourselves with the result of our stack.\nIt would be a lot of extra production code though. My personal opinion\nis that this should always be done server side instead of on the client.\nWe could expose a custom parser that converts it and passes it through\nprepareStackTrace as structured data. That way it's external and doesn't\nhave to be built-in to React.", 'Remove unnecessary stack (#18707)', 'ReactDOMEventListener: clean up module (#18713)', 'Modern Event System: register onMouseEnter for portals (#18720)', "[ESLint] Extend isHook to recognize those under PascalCase's namespace (#18722)\n\n\nExtend Namespace to PascalCase\n\n\nAdd valid case for jest.useFakeTimer\n\n\nformat\n\n\nformat :(\n\n\nfix nits\n\n", 'Make ExpirationTime an opaque type (#18732)\n\nAdd LanePriority type\n\nReact\'s internal scheduler has more priority levels than the external\nScheduler package. Let\'s use React as the source of truth for tracking\nthe priority of updates so we have more control. We\'ll still fall back\nto Scheduler in the default case. In the future, we should consider\nremoving runWithPriority from Scheduler and replacing the valid use\ncases with React-specific APIs.\nThis commit adds a new type, called a LanePriority to disambiguate from\nthe Scheduler one.\n("Lane" refers to another type that I\'m planning. It roughly translates\nto "thread." Each lane will have a priority associated with it.)\nI\'m not actually using the lane anywhere, yet. Only setting stuff up.\n\nRemove expiration times train model\n\nIn the old reconciler, expiration times are computed by applying an\noffset to the current system time. This has the effect of increasing\nthe priority of updates as time progresses. Because we also use\nexpiration times as a kind of "thread" identifier, it turns out this\nis quite limiting because we can only flush work sequentially along\nthe timeline.\nThe new model will use a bitmask to represent parallel threads that\ncan be worked on in any combination and in any order.\nIn this commit, expiration times and the linear timeline are still in\nplace, but they are no longer based on a timestamp. Effectively, they\nare constants based on their priority level.\n\nStop using ExpirationTime to represent timestamps\n\nFollow up to the previous commit. This converts the remaining places\nwhere we were using the ExpirationTime type to represent a timestamp,\nlike Suspense timeouts.\n\nFork Dependencies and PendingInteractionMap types\n\nThese contain expiration times\n\nMake ExpirationTime an opaque type\n\nExpirationTime is currently just an alias for the number type, for a\nfew reasons. One is that it predates Flow\'s opaque type feature. Another\nis that making it opaque means we have to move all our comparisons and\nnumber math to the ExpirationTime module, and use utility functions\neverywhere else.\nHowever, this is actually what we want in the new system, because the\nLanes type that will replace ExpirationTime is a bitmask with a\nparticular layout, and performing operations on it will involve more\nthan just number comparisions and artihmetic. I don\'t want this logic to\nspread ad hoc around the whole codebase.\nThe utility functions get inlined by Closure so it doesn\'t matter\nperformance-wise.\nI automated most of the changes with JSCodeshift, with only a few manual\ntweaks to stuff like imports. My goal was to port the logic exactly to\nprevent subtle mistakes, without trying to simplify anything in the\nprocess. I\'ll likely need to audit many of these sites again when I\nreplace them with the new type, though, especially the ones\nin ReactFiberRoot.\nI added the codemods I used to the scripts directory. I won\'t merge\nthese to master. I\'ll remove them in a subsequent commit. I\'m only\ncommitting them here so they show up in the PR for future reference.\nI had a lot of trouble getting Flow to pass. Somehow it was not\ninferring the correct type of the constants exported from the\nExpirationTime module, despite being annotated correctly.\nI tried converting them them to constructor functions — NoWork\nbecomes NoWork() — and that made it work. I used that to unblock me,\nand fixed all the other type errors. Once there were no more type\nerrors, I tried converting the constructors back to constants. Started\ngetting errors again.\nThen I added a type constraint everywhere a constant was referenced.\nThat fixed it. I also figured out that you only have to add a constraint\nwhen the constant is passed to another function, even if the function is\nannotated. So this indicates to me that it\'s probably a Flow bug. I\'ll\nfile an issue with Flow.\n\nDelete temporary codemods used in previous commit\n\nI only added these to the previous commit so that I can easily run it\nagain when rebasing. When the stack is squashed, it will be as if they\nnever existed.', 'Always wrap Suspense children in fragment (#18711)\nChanges the internal fiber structure of the Suspense component. When a\nSuspense boundary can\'t finish rendering and switches to a fallback, we\nwrap the "primary" tree in a Fragment fiber and hide all its DOM nodes.\nThen we mount the fallback tree into a separate Fragment fiber. Both\ntrees will render into the same parent DOM node (since React fragments\naren\'t part of the host tree), but the wrappers ensure that the children\nin each tree are reconciled separately.\nThe old implementation would try to be clever and only add the fragment\nwrapper when the fallback was in place, to save memory. This "worked"\nbut was prone to regressions, since this is the only such place in the\ncodebase where we wrap existing nodes in a new node. (In other words,\nit\'s a form of reparenting, which we don\'t implement elsewhere).\nSince the original implementation, we\'ve also added lots of additional\nrequirements to the Suspense component that have led to an explosion in\ncomplexity, like limited support in Legacy Mode (with very different\nsemantics) and progressive hydration.\nWe\'re planning to add even more features to the Suspense boundary, so\nwe\'re going to sacrifice a bit more memory for a simpler implementation\nthat is less prone to regressions.\nThis ended up removing a lot of weird hacks and edge cases, but there\nare still plenty left over. Most of the remaining complexity is related\nto Legacy mode. That\'s the next thing we should aim to drop support for.\nBecause this is a risky change, I\'ve only changed this in the new\nreconciler. It blocks some other features, but as of now we\'re not\nplanning to implement those in the old reconciler. If that changes, this\nshould cherry-pick to the other implementation without much effort.', "Add Offscreen component type\nDoesn't do anything special in this initial commit. Just acts like a\nfragment.", 'Wrap primary tree in Offscreen fiber type\nStill just acts like a fragment. Next step is to move the hide/unhide\nlogic to the Offscreen implementation.', 'Move hide/unhide logic to Offscreen component\nThe Offscreen component is not a public type, yet, but once it is, it\nwill share the same hide/unhide logic as Suspense children.', "SuspenseList: Reschedule at same priority (#18738)\nSuspenseList progressively renders items even if the list is CPU bound,\ni.e. it isn't waiting for missing data. It does this by showing a\nfallback for the remaining items, committing the items in that have\nalready finished, then starting a new render to continue working on\nthe rest.\nWhen it schedules that subsequent render, it uses a slightly lower\npriority than the current render: renderExpirationTime - 1.\nThis commit changes it to reschedule at renderExpirationTime instead.\nI don't know what the original motivation was for bumping the expiration\ntime slightly lower. The comment says that the priorities of the two\nrenders are the same (which makes sense to me) so I imagine it was\nmotivated by some implementation detail. I don't think it's necessary\nanymore, though perhaps it was when it was originally written. If it is\nstill necessary, we should write a test case that illustrates why.", 'Allow flushSync to noop in life cycles but with a warning (#18759)', 'Allow Node 14.x (#18755)', "Root API should clear non-empty roots before mounting (#18730)\n\nRoot API should clear non-empty roots before mounting\n\nLegacy render-into-subtree API removes children from a container before rendering into it. The root API did not do this previously, but just left the children around in the document.\nThis commit adds a new FiberRoot flag to clear a container's contents before mounting. This is done during the commit phase, to avoid multiple, observable mutations.", 'Refactor ElementListenerMap (#18766)', '[Blocks] Add Client Fixture (#18773)\n\n\n[Blocks] Add Client Fixture\n\n\nAdd more TODOs\n\n', "[Blocks] Initial implementation of cache and data/fetch (#18774)\n\nRename ReactCache -> ReactCacheOld\n\nWe still use it in some tests so I'm going to leave it for now. I'll start making the new one in parallel in the react package.\n\n\nAdd react/unstable-cache entry point\n\n\nAdd react-data entry point\n\n\nInitial implementation of cache and data/fetch\n\n\nAddress review\n\n", 'Consistent useCallback implementation in ReactDOMServer (#18783)', '[Blocks] Use native fetch (#18784)\n\n\n[Blocks] Use native fetch\n\n\nUse the prototype\n\n\nSupport arrayBuffer() and blob()\n\n\nctor\n\n\nSimplify\n\n\nUse an expando\n\n\nKeep a map of formats\n\n\nUnused\n\n\nRemove unnecessary second property read\n\n\nKeep it simple\n\n\nStore the original thenable\n\n', '[Blocks] Add preload to fetch (#18785)', 'Update react-refresh README', "Prevent stale legacy root from clearing a container (DRAFT) (#18792)\n\n\nDon't clear a container because of a stale legacy root\n\n\nAdded test repro for FB error\n\n", 'Move legacy hidden API to new internal Fiber type (#18782)\n\nUnhide Suspense trees without entanglement\n\nWhen a Suspense boundary is in its fallback state, you cannot switch\nback to the main content without also finishing any updates inside the\ntree that might have been skipped. That would be a form of tearing.\nBefore we fixed this in #18411, the way this bug manifested was that a\nboundary was suspended by an update that originated from a child\ncomponent (as opposed to props from a parent). While the fallback was\nshowing, it received another update, this time at high priority. React\nwould render the high priority update without also including the\noriginal update. That would cause the fallback to switch back to the\nmain content, since the update that caused the tree to suspend was no\nlonger part of the render. But then, React would immediately try to\nrender the original update, which would again suspend and show the\nfallback, leading to a momentary flicker in the UI.\nThe approach added in #18411 is, when receiving a high priority update\nto a Suspense tree that\'s in its fallback state is to bail out, keep\nshowing the fallback and finish the update in the rest of the tree.\nAfter that commits, render again at the original priority. Because low\npriority expiration times are inclusive of higher priority expiration\ntimes, this ensures that all the updates are committed together.\nThe new approach in this commit is to turn renderExpirationTime into a\ncontext-like value that lives on the stack. Then, when unhiding the\nSuspense boundary, we can push a new renderExpirationTime that is\ninclusive of both the high pri update and the original update that\nsuspended. Then the boundary can be unblocked in a single render pass.\nAn advantage of the old approach is that by deferring the work of\nunhiding, there\'s less work to do in the high priority update.\nThe key advantage of the new approach is that it solves the consistency\nproblem without having to entangle the entire root.\n\nCreate internal LegacyHidden type\n\nThis only exists so we can clean up the internal implementation of\n<div hidden={isHidden} />, which is not a stable feature. The goal\nis to move everything to the new Offscreen type instead. However,\nOffscreen has different semantics, so before we can remove the legacy\nAPI, we have to migrate our internal usage at Facebook. So we\'ll need\nto maintain both temporarily.\nIn this initial commit, I\'ve only added the type. It\'s not used\nanywhere. The next step is to use it to implement hidden.\n\nUse LegacyHidden to implement old hidden API\n\nIf a host component receives a hidden prop, we wrap its children in\nan Offscreen fiber. This is similar to what we do for Suspense children.\nThe LegacyHidden type happens to share the same implementation as the\nnew Offscreen type, for now, but using separate types allows us to fork\nthe behavior later when we implement our planned changes to the\nOffscreen API.\nThere are two subtle semantic changes here. One is that the children of\nthe host component will have their visibility toggled using the same\nmechanism we use for Offscreen and Suspense: find the nearest host node\nchildren and give them a style of display: none. We didn\'t used to do\nthis in the old API, because the hidden DOM attribute on the parent\nalready hides them. So with this change, we\'re actually "overhiding" the\nchildren. I considered addressing this, but I figure I\'ll leave it as-is\nin case we want to expose the LegacyHidden component type temporarily\nto ease migration of Facebook\'s internal callers to the Offscreen type.\nThe other subtle semantic change is that, because of the extra fiber\nthat wraps around the children, this pattern will cause the children\nto lose state:\njs\nreturn isHidden ? <div hidden={true} /> : <div />;\nThe reason is that I didn\'t want to wrap every single host component\nin an extra fiber. So I only wrap them if a hidden prop exists. In\nthe above example, that means the children are conditionally wrapped\nin an extra fiber, so they don\'t line up during reconciliation, so\nthey get remounted every time isHidden changes.\nThe fix is to rewrite to:\njs\nreturn <div hidden={isHidden} />;\nI don\'t anticipate this will be a problem at Facebook, especially since\nwe\'re only supposed to use hidden via a userspace wrapper component.\n(And since the bad pattern isn\'t very React-y, anyway.)\nAgain, the eventual goal is to delete this completely and replace it\nwith Offscreen.', '[react-refresh/babel] Always insert registrations after var (#18794)\nPreviously, we transformed\nlet Foo = styled.div``;\nto\nlet Foo = _c1 = styled.div``;\nand then babel-plugin-styled-components would infer _c1 as the display name. Widen the existing case that applies to function expressions to apply to any type of variable declaration.', 'Update bundle configs to not build some packages (#18800)\n\n\nStop building old ReactCache for FB\n\n\nUpdate other bundle configs\n\n', "Don't build react-data for WWW", 'react-refresh@0.8.2', 'Don\'t "schedule" discrete work if we\'re scheduling sync work (#18797)', 'Build Flight runtime for WWW (revert part of earlier change)', 'Feature: Add support to exhaustive-deps rule for any hook ending with Effect (#18580)\n\n\nAdd test cases for support exhaustive deps ending in Effect\n\n\nApply the exhaustive deps lint rule to any hook ending with Effect\n\n\nAdd another test for supporting linting useXEffect hooks\n\n\nCo-authored-by: Aaron Pettengill aaron.pettengill@echoman.com', 'Add changelog for eslint-plugin-react-hooks (#18801)', 'eslint-plugin-react-hooks@4.0.0', 'Refine experimental Scopes API (#18778)\n\nRefine experimental Scopes API\n', 'Remove hint to post feedback about exhaustive-deps rule (#18712)\nThe thread is closed and locked.', 'Give unresolved lazy() a name in component stack (#16104)\n\n\nGive unresolved lazy() a name in component stack\n\n\nNormalize stack in tests\n\n\nCo-authored-by: Sebastian Markbage sema@fb.com', "Initial Lanes implementation (#18796)\nSee PR #18796 for more information.\nAll of the changes I've made in this commit are behind the\nenableNewReconciler flag. Merging this to master will not affect the\nopen source builds or the build that we ship to Facebook.\nThe only build that is affected is the ReactDOMForked build, which is\ndeployed to Facebook behind an experimental flag (currently disabled\nfor all users). We will use this flag to gradually roll out the new\nreconciler, and quickly roll it back if we find any problems.\nBecause we have those protections in place, what I'm aiming for with\nthis initial PR is the smallest possible atomic change that lands\ncleanly and doesn't rely on too many hacks. The goal has not been to\nget every single test or feature passing, and it definitely is not to\nimplement all the features that we intend to build on top of the new\nmodel. When possible, I have chosen to preserve existing semantics and\ndefer changes to follow-up steps. (Listed in the section below.)\n(I did not end up having to disable any tests, although if I had, that\nshould not have necessarily been a merge blocker.)\nFor example, even though one of the primary goals of this project is to\nimprove our model for parallel Suspense transitions, in this initial\nimplementation, I have chosen to keep the same core heuristics for\nsequencing and flushing that existed in the ExpirationTimes model: low\npriority updates cannot finish without also finishing high priority\nones.\nDespite all these precautions, because the scope of this refactor is\ninherently large, I do expect we will find regressions. The flip side\nis that I also expect the new model to improve the stability of the\ncodebase and make it easier to fix bugs when they arise.", 'Rename Flight to Transport (#18808)\n\nRename Flight to Transport\n\nFlight is still the codename for the implementation details (like Fiber).\nHowever, now the public package is react-transport-... which is only\nintended to be used directly by integrators.\n\nRename names\n', '[Blocks] Fix stale data on updates (#18810)\n\n\n[Blocks] Failing test for nested load\n\n\nSimplify the test\n\n\nAdd a similar test that fails in PROD\n\n\nCopy .type when cloning work in progress\n\n', '[Blocks] Add Shell to Fixture (#18803)\n\n\n[Blocks] Add Feed page to fixture\n\n\nAdd minimal routing\n\n\nAlways show post with comments\n\n', '[RN] Remove debugging invariant (#18813)', 'Modern Event System: improve dispatching queue (#18799)', 'Remove old CM exports (#18710)', "Add unstable prefix to experimental APIs (#18825)\nWe've been shipping unprefixed experimental APIs (like createRoot and\nuseTransition) to the Experimental release channel, with the rationale\nthat because these APIs do not appear in any stable release, we're free\nto change or remove them later without breaking any downstream projects.\nWhat we didn't consider is that downstream projects might be tempted to\nuse feature detection:\njs\nconst useTransition = React.useTransition || fallbackUseTransition;\nThis pattern assumes that the version of useTransition that exists in\nthe Experimental channel today has the same API contract as the final\nuseTransition API that we'll eventually ship to stable.\nTo discourage feature detection, I've added an unstable_ prefix to\nall of our unstable APIs.\nThe Facebook builds still have the unprefixed APIs, though. We will\ncontinue to support those; if we make any breaking changes, we'll\nmigrate the internal callers like we usually do. To make testing easier,\nI added the unstable_-prefixed APIs to the www builds, too. That way\nour tests can always use the prefixed ones without gating on the\nrelease channel.", '[Blocks Fixture] Misc updates (#18811)\n\n\n[Blocks Fixture] Update navigation buttons immediately\n\n\nAdd more profile links\n\n\nMinor refactor\n\n\nAdd subroutes to Profile\n\n', 'Modern Event System: ensure target ancestors are only host nodes (#18827)', 'eslint-plugin-react-hooks: allow OptionalMemberExpression in deps (#18819) (#18820)\n\n\neslint-plugin-react-hooks: allow OptionalMemberExpression in deps (#18819)\n\n\nadd test case for #18819\n\n\nfix test\n\n\nrun prettier\n\n', 'Fix Blocks fixture', 'Experimental test selector API (#18607)\nAdds several new experimental APIs to aid with automated testing.\nEach of the methods below accepts an array of "selectors" that identifies a path (or paths) through a React tree. There are four basic selector types:\n\nComponent: Matches Fibers with the specified React component type\nRole: Matches Host Instances matching the (explicit or implicit) accessibility role.\nTest name: Matches Host Instances with a data-testname attribute.\nText: Matches Host Instances that directly contain the specified text.\nThere is also a special lookahead selector type that enables further matching within a path (without actually including the path in the result). This selector type was inspired by the :has() CSS pseudo-class. It enables e.g. matching a  that contained a specific header text, then finding a like button within that .\n\nAPI\n* findAllNodes(): Finds all Host Instances (e.g. HTMLElement) within a host subtree that match the specified selector criteria.\n* getFindAllNodesFailureDescription(): Returns an error string describing the matched and unmatched portions of the selector query.\n* findBoundingRects(): For all React components within a host subtree that match the specified selector criteria, return a set of bounding boxes that covers the bounds of the nearest (shallowed) Host Instances within those trees.\n* observeVisibleRects(): For all React components within a host subtree that match the specified selector criteria, observe if it’s bounding rect is visible in the viewport and is not occluded.\n* focusWithin(): For all React components within a host subtree that match the specified selector criteria, set focus within the first focusable Host Instance (as if you started before this component in the tree and moved focus forwards one step).', 'wrap SuspenseInstanceRetry callback so scheduler waits for it (#18805)', 'Modern Event System: fix EnterLeave plugin logic (#18830)', '[Blocks Fixture] Drop the Blocks (#18837)\n\n\n[Blocks Fixture] Add a tiny router\n\n\nAdd a way to load nested entrypoint\n\n\nOnly expose URL params to nested routers\n\n\nAdd keys to route definitions\n\n\n[Blocks Fixture] Drop the Blocks\n\n', '[Blocks Fixture] Remove remaining Blocks (#18840)', "Warn if calling setState outside of render but before commit (#18838)\n\nDon't attempt to render the children of a dehydrated Suspense boundary\n\nThe DehydratedFragment tag doesn't exist so doing so throws.\nThis can happen if we schedule childExpirationTime on the boundary and\nbail out.\n\nWarn if scheduling work on a component before it is committed\n", '[Release] Follow redirect when downloading tarball (#18845)\nAdds -L option to curl command.\nSee: https://curl.haxx.se/docs/manpage.html#-L', 'Updated DevTools unstable_ API references (#18847)', 'Modern Event System: fix bug in EnterLeave (#18849)', 'Put render phase update change behind a flag (#18850)\nIn the new reconciler, I made a change to how render phase updates\nwork. (By render phase updates, I mean when a component updates\nanother component during its render phase. Or when a class component\nupdates itself during the render phase. It does not include when\na hook updates its own component during the render phase. Those have\ntheir own semantics. So really I mean anything triggers the "setState\nin render" warning.)\nThe old behavior is to give the update the same "thread" (expiration\ntime) as whatever is currently rendering. So if you call setState on a\ncomponent that happens later in the same render, it will flush during\nthat render. Ideally, we want to remove the special case and treat them\nas if they came from an interleaved event.\nRegardless, this pattern is not officially supported. This behavior is\nonly a fallback. The flag only exists until we can roll out the\nsetState warnning, since existing code might accidentally rely on the\ncurrent behavior.', 'Disable setState before mount in legacy mode (#18851)\nWe kind of "support" this pattern in legacy mode. It\'s only deprecated in\nConcurrent Mode.', "Don't cut off the tail of a SuspenseList if hydrating (#18854)", 'Disable Webpack setImmediate polyfill for DevTools (#18860)\n\n\nUpgrade Webpack deps to latet\n\n\nDisable Webpack setImmediate polyfill\n\n', 'Disable Profiler commit filtering (#18862)\n\nDisable Profiler commit filtering\n\nWe used to filter "empty" DevTools commits, but it was error prone (see #18798). A commit may appear to be empty (no actual durations) because of component filters, but filtering these empty commits causes interaction commit indices to be off by N. This not only corrupts the resulting data, but also potentially causes runtime errors.\nFor that matter, hiding "empty" commits might cause confusion too. A commit did happen even if none of the components the Profiler is showing were involved.\n\nRestart flaky CI\n', "add new IDs for each each server renderer instance and prefixes to distinguish between each server render (#18576)\nThere is a worry that useOpaqueIdentifier might run out of unique IDs if running for long enough. This PR moves the unique ID counter so it's generated per server renderer object instead. For people who render different subtrees, this PR adds a prefix option to renderToString, renderToStaticMarkup, renderToNodeStream, and renderToStaticNodeStream so identifiers can be differentiated for each individual subtree.", '[DevTools] Allow to continue dragging when leaving profiler picker (#18852)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', "Detect and prevent render starvation, per lane (#18864)\n\nDetect and prevent render starvation, per lane\n\nIf an update is CPU-bound for longer than expected according to its\npriority, we assume it's being starved by other work on the main thread.\nTo detect this, we keep track of the elapsed time using a fixed-size\narray where each slot corresponds to a lane. What we actually store is\nthe event time when the lane first became CPU-bound.\nThen, when receiving a new update or yielding to the main thread, we\ncheck how long each lane has been pending. If the time exceeds a\nthreshold constant corresponding to its priority, we mark it as expired\nto force it to synchronously finish.\nWe don't want to mistake time elapsed while an update is IO-bound\n(waiting for data to resolve) for time when it is CPU-bound. So when a\nlane suspends, we clear its associated event time from the array. When\nit receives a signal to try again, either a ping or an update, we assign\na new event time to restart the clock.\n\nStore as expiration time, not start time\n\nI originally stored the start time because I thought I could use this\nin the future to also measure Suspense timeouts. (Event times are\ncurrently stored on each update object for this purpose.) But that\nwon't work because in the case of expiration times, we reset the clock\nwhenever the update becomes IO-bound. So to replace the per-update\nfield, I'm going to have to track those on the room separately from\nexpiration times.", 'Hard code enableComponentStacks in www (#18869)\nThis is now fully rolled out.', "Don't cut off effects at end of list if hydrating (#18872)", 'Added clear message for functional component starting with lowercase (#18881)', 'Devtools: Show inspectedElement key in right pane (#18737)\n\n\nStart MVP for showing inspected element key\n\n\nAdd key in other places\n\n\nAdd key from backend\n\n\nRemove unnecessary hydrateHelper call\n\n\nHide copy button when no label\n\n\nMove above props\n\n\nRevert changes to InspectedElementTree.js\n\n\nMove key to left of component name\n\n\nUpdated CSS\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Modern Event System: revise ancestor logic (#18886)', 'Revert "Hard code enableComponentStacks in www (#18869)" (#18890)\nThis reverts commit fd696df4729fb68cf5c3f1a8125524299a5892fc.', 'Expose LegacyHidden type and disable  API in new fork (#18891)\n\nExpose LegacyHidden type\n\nI will use this internally at Facebook to migrate away from\n\n. The end goal is to migrate to the Offscreen type, but\nthat has different semantics. This is an incremental step.\n\nDisable  API in new fork\n\nMigrates to the unstable_LegacyHidden type instead. The old fork does\nnot support the new component type, so I updated the tests to use an\nindirection that picks the correct API. I will remove this once the\nLegacyHidden (and/or Offscreen) type has landed in both implementations.\n\nAdd gated warning for <div hidden /> API\n\nOnly exists so we can detect callers in www and migrate them to the new\nAPI. Should not visible to anyone outside React Core team.', 'feat(eslint-plugin-react-hooks): Support ESLint 7.x (#18878)', 'Add item to ESLint Hooks plugin changelog', '[Blocks] Scaffolding react-fetch + first pass at node implementation (#18863)\n\nFirst pass at scaffolding out the Node implementation of react-data.\n\nWhile incomplete, this patch contains some changes to the react-data\npackage in order to start adding support for Node.\nThe first part of this change accounts for splitting react-data/fetch\ninto two discrete entries, adding (and defaulting to) the Node\nimplementation.\nThe second part is sketching out a rough approximation of fetch for\nNode. This implementation is not complete by any means, but provides a\nstarting point.\n\n\nRemove NodeFetch module and put it directly into ReactDataFetchNode.\n\n\nReplaced react-data with react-fetch.\n\n\nThis patch shuffles around some of the scaffolding that was in\nreact-data in favor of react-fetch. It also removes the additional\n"fetch" package in favor of something flatter.\n\n\nTweak package organization\n\n\nSimplify and add a test\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'eslint-plugin-react-hooks@4.0.1', 'deps: update ESLint version to v7 (#18897)', 'Modern Event System: Add scaffolding for createEventHandle (#18898)', 'Add missing changelog item', 'Revert "deps: update ESLint version to v7 (#18897)" (#18899)\nThis reverts commit 039ad34a059981b1ba972e205cea8347462cf492.', 'Add experimental ReactDOM.createEventHandle (#18756)', 'Fix Profiler root change error (#18880)', 'React Flare: fix PressLegacy preventDefault issue (#18904)', "[eslint-plugin-react-hooks] useWithoutEffectSuffix fix (#18902) (#18907)\n\n[eslint-plugin-react-hooks] reproduce bug with a test and fix it (#18902)\n\nSince we only reserve -Effect suffix, react-hooks/exhaustive-deps is\nexpected to succeed without warning on a custom hook which contains -Effect- in\nthe middle of it's name (but does NOT contain it as a suffix).\n\n[eslint-plugin-react-hooks] reproduced bug with a test and fix it\n\nSince we only reserve -Effect suffix, react-hooks/exhaustive-deps is expected\nto succeed without warning on a render helper which contains -use- in the middle\nof it's name (but does NOT contain it as a prefix, since that would violate hook\nnaming convetion).\nCo-authored-by: Boris Sergeyev boris.sergeyev@quolab.com", 'Update changelog', 'eslint-plugin-react-hooks@4.0.2', 'useMutableSource: "Entangle" instead of expiring (#18889)\n\nuseMutableSource: "Entangle" instead of expiring\n\nA lane is said to be entangled with another when it\'s not allowed to\nrender in a batch that does not also include the other lane.\nThis commit implements entanglement for useMutableSource. If a source\nis mutated in between when it\'s read in the render phase, but before\nit\'s subscribed to in the commit phase, we must account for whether the\nsame source has pending mutations elsewhere. The old subscriptions must\nnot be allowed to re-render without also including the new subscription\n(and vice versa), to prevent tearing.\nIn the old reconciler, we did this by synchronously flushing all the\npending subscription updates. This works, but isn\'t ideal. The new\nreconciler can entangle the updates without de-opting to sync.\nIn the future, we plan to use this same mechanism for other features,\nlike skipping over intermediate useTransition states.\n\nUse clz instead of ctrz to pick an arbitrary lane\n\nShould be slightly faster since most engines have built-in support.', 'Fix useMutableSource tearing bug (#18912)\n\nFailing useMutableSource test\n\nIf a source is mutated after initial read but before subscription is set\nup, it should still entangle all pending mutations even if snapshot of\nnew subscription happens to match.\nTest case illustrates how not doing this can lead to tearing.\n\nFix useMutableSource tearing bug\n\nFix is to move the entanglement call outside of the block that checks\nif the snapshot has changed.', 'Add expando prop to disabledLog function (#18914)\nThis will enable it to be identified by Facebook infra even if the function name is mangled during DevTools build process.', 'Disable  API in old fork, too (#18917)\nThe motivation for doing this is to make it impossible for additional\nuses of pre-rendering to sneak into www without going through the\nLegacyHidden abstraction. Since this feature was already disabled in\nthe new fork, this brings the two closer to parity.\nThe LegacyHidden abstraction itself still needs to opt into\npre-rendering somehow, so rather than totally disabling the feature, I\nupdated the hidden prop check to be obnoxiously specific. Before, you\ncould set it to any truthy value; now, you must set it to the string\n"unstable-do-not-use-legacy-hidden".\nThe node will still be hidden in the DOM, since any truthy value will\ncause the browser to apply a style of display: none.\nI will have to update the LegacyHidden component in www to use the\nobnoxious string prop. This doesn\'t block merge, though, since the\nbehavior is gated by a dynamic flag. I will update the component before\nI enable the flag.', 'Add LegacyHidden to server renderer (#18919)\n\nAdd LegacyHidden to server renderer\n\nWhen the tree is hidden, the server renderer renders nothing. The\ncontents will be completely client rendered.\nWhen the tree is visible it acts like a fragment.\nThe future streaming server renderer may want to pre-render these trees\nand send them down in chunks, as with Suspense boundaries.\n\nForce client render, even at Offscreen pri\n', 'Simplify logic for mutable workInProgressSources (#18920)\nisPrimaryRenderer is always constant for a given React build, so these two arrays do nothing.', 'Update inaccurate mapChildren comment (#18931)\nThe function you provide will only be passed a child and an index. It will not be passed a key. This is confirmed in the source, the Flow types, and the jsdoc comments.', '[DevTools] Improve HOC search UX (#18802)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Profiler: Skip reading element for imported data (#18913)\n\n\nskip reading element for imported data\n\n\nrename nodes & enable store lookup for components tab\n\n\nreplace names\n\n\nAdded some more test coverage; reverted rename\n\n\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Updated DevTools CHANGELOG for upcoming changes', 'Add MIT license to use-subscription package (#18927)\nThis package is missing the license attribute (or a license file).\nBeing a sub-package of React, it should get the same license, however, none was specified.\nA scan with license_checker would recognize this as UNKNOWN.', 'Add test for displayName on React.memo components (#18925)\n\n\nAdd test for displayName on React.memo components\n\n\nAdded extra memo displayName test\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', '[DevTools] enable Electron interactions on Linux & auto copy script tags (#18772)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', '[DevTools] Add Component Highlighting to Profiler (#18745)\nCo-authored-by: Moji Izadmehr m.eezadmehr@gmail.com\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'DevTools 4.6.0 -> 4.7.0', 'remove an unused ISSUE_TEMPLATE.md (#18953)', 'DevTools editable props tweaks (#18954)\n\nMade non-editable prop text higher contrast (easier to read)\nAlso makes it stand out as different from dimmer placeholder text for "new prop"\n', 'LegacyHidden: mode that defers without hiding (#18958)\nNeed this to unblock www. Not sure yet how we\'ll support this properly\nlong term.\nWhile adding this, I noticed that the normal "hidden" mode of\nLegacyHidden doesn\'t work properly because it doesn\'t toggle the\nvisibility of newly inserted nodes. This is fine for now since we only\nuse it via a userspace abstraction that wraps the children in an\nadditional node. But implementing this correctly is required for us\nto start using it like a fragment, without the wrapper node.', 'Bugfix: Missing mode check in resetChildLanes (#18961)\nDeferring a hidden tree is only supported in Concurrent Mode.\nThe missing check leads to an infinite loop when an update is scheduled\ninside a hidden tree, because the pending work never gets reset.\nThis "accidentally" worked in the old reconciler because the heurstic\nwe used to detect offscreen trees was if childExpirationTime\nwas Never.\nIn the new reconciler, we check the tag instead. Which means we also\nneed to check the mode, like we do in the begin phase.\nWe should move this check out of the hot path. It shouldn\'t have been\nin the hot path of the old reconciler, either.\nProbably by moving resetChildLanes into the switch statement\nin ReactFiberCompleteWork.', 'Transfer actualDuration only once for SuspenseList (#18959)', 'Remove disableHiddenPropDeprioritization flag (#18964)\nThis is rolled out to 100% public, so we can remove it.', "Profiler: Don't count timed out (hidden) subtrees in base duration (#18966)", 'Remove event pooling in the modern system (#18969)', 'Add `unstable_isNewReconciler export to FB builds (#18974)\nShould check this at runtime instead of the GK', 'DevTools: Fix highlight updates Canvas side problem (#18973)', 'Clear fiber.sibling field when clearing nextEffect (#18970)\n\nClear fiber.sibling field when clearing nextEffect\n', 'DevTools: Improve error boundary (#18956)\n\nAdd support for dark mode\nAdd retry option for case where Profiler data is corrupted\n', 'Add unstable_isNewReconciler to dispatcher (#18975)\nThis is a bit gross but I need to be able to access it without importing\nthe renderer.\nThere might be a better way but I need this to unblock internal bugfix.', 'DevTools: Add root and renderer version to inspected props panel (#18963)\n\nDevTools: Add root and renderer version to inspected props panel\nRemoved redundant .length check\n', 'useMutableSource hydration support (#18771)\n\n\nuseMutableSource hydration support\n\n\nRemove unnecessary ReactMutableSource fork\n\n\nReplaced root.registerMutableSourceForHydration() with mutableSources option\n\n\nResponse to PR feedback:\n\n\nMoved mutableSources root option to hydrationOptions object\n\nOnly initialize root mutableSourceEagerHydrationData if supportsHydration config is true\nLazily initialize mutableSourceEagerHydrationData on root object\n', "Warn if MutableSource snapshot is a function (#18933)\n\nWarn if MutableSource snapshot is a function\n\nuseMutableSource does not properly support snapshots that are functions. In part this is because of how it is implemented internally (the function gets mistaken for a state updater function). To fix this we could just wrap another function around the returned snapshot, but this pattern seems problematic to begin with- because the function that gets returned might itself close over mutable values, which would defeat the purpose of using the hook in the first place.\nThis PR proposes adding a new DEV warning if the snapshot returned is a function. It does not change the behavior (meaning that a function could still work in some cases- but at least the current behavior prevents passing around a closure that may later become stale unless you're really intentional about it e.g. () => () => {...}).\n\nReplaced .warn with .error\n", 'Resolve an edge case where ref.node can be falsy (#18984)\nCo-authored-by: Jimmy Cann jimmy.cann@ironstar.io', 'react-refresh@0.8.3', "Make LegacyHidden match semantics of old fork (#18998)\nFacebook currently relies on being able to hydrate hidden HTML. So\nskipping those trees is a regression.\nWe don't have a proper solution for this in the new API yet. So I'm\nreverting it to match the old behavior.\nNow the server renderer will treat LegacyHidden the same as a fragment,\nwith no other special behavior. We can only get away with this because\nwe assume that every instance of LegacyHidden is accompanied by a host\ncomponent wrapper. In the hidden mode, the host component is given a\nhidden attribute, which ensures that the initial HTML is not visible.\nTo support the use of LegacyHidden as a true fragment, without an extra\nDOM node, we will have to hide the initial HTML in some other way.", 'Revert "Feature: Add support to exhaustive-deps rule for any hook ending with Effect (#18580)" (#19004)\nThis reverts commit 5ac9ca72dfb73a06157bb177cd695f6b77fc900e.', 'eslint-plugin-react-hooks@4.0.3', 'Move isCustomComponent() function call outside of loop (#19007)', 'fix(eslint-plugin-react-hooks): Added matching for nullish coalescing and optional chaining of dependencies, relates to #18985 (#19008)', '[eslint-plugin-react-hooks] Prefer recommended eslint configuration (#18951)\n\n\n[eslint-plugin-react-hooks] Prefer recommended eslint configuration\n\n\nUpdate README.md\n\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'Fix rollup validate script (#18900)\n\nRevert "Revert "deps: update ESLint version to v7 (#18897)" (#18899)"\n\nThis reverts commit 84fd4b853fd64651abf0b84f4ca879a9e43a106a.\n\nfix rollup validate script\n', 'Disable DevTools build job to unblock master (#19012)', "Bug: Spawning hydration in response to Idle update (#19011)\n\nBug: Spawning hydration in response to Idle update\n\nAdds a test that fails in the new fork.\n\nFix typos related to Idle priority\n\nThese are just silly mistakes that weren't caught by any of our tests.\nThere's a lot of duplication in the Lanes module right now. It's also\nnot super stable as we continue to refine our heuristics. Hopefully the\nfinal state is simpler and less prone to these types of mistakes.", 'eslint-plugin-react-hooks@4.0.4', 'Document additionalHooks option (#19005)\n\n\nDocument additionalHooks option\n\n\nUpdate README.md\n\n\nCo-authored-by: Aaron Pettengill aaron.pettengill@echoman.com\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', "Only prepare extra stack frames if needed (#19014)\nWe currently prepare an extra stack frame before they're needed.\nParticularly for propTypes. This causes problems as they can have\nside-effects with the new component stacks and it's slow.\nThis moves it to be lazy.", 'Revert "Fix mistyped script arbitrary code execution vulnerability (#18660)" (#19018)\nThis reverts commit e5cc1462b3e7be78306a1f6961ce82d942eb36d2.', 'Lint classic www build (#19023)', "Remove regenerator from noop (#19024)\nThis isn't used and it wouldn't work anyway.", "Remove unstable-fire from package.json (#19026)\nThis hasn't existed for a while now.", "Delete Entries without Build Output from package.json and the build directory (#19029)\n\n\nGate test\n\n\nDelete entrypoints without Build Outputs from package.json and build output\n\n\nIf an entry point exists in bundles.js but doesn't have any bundleTypes,\nI delete that entry point file from the build directory. I also remove it\nfrom the files field in package.json if it exists.\nThis allows us to remove bundles from being built in the stable release\nchannel.", "Remove ReactComponentTreeHook from internals (#19032)\nWe don't really support mixing minor versions anymore anyway. But seems\nsafe to remove in 17.", 'Cleaned up passive effects experimental flags (#19021)', "Rename 17 to 18 in warnings (#19031)\nWe're not really supposed to refer to future versions by numbers.\nThese will all slip so these numbers don't make sense anymore.", "Add Lazy Elements Behind a Flag (#19033)\nWe really needed this for Flight before as well but we got away with it\nbecause Blocks were lazy but with the removal of Blocks, we'll need this\nto ensure that we can lazily stream in part of the content.\nLuckily LazyComponent isn't really just a Component. It's just a generic\ntype that can resolve into anything kind of like a Promise.\nSo we can use that to resolve elements just like we can components.\nThis allows keys and props to become lazy as well.\nTo accomplish this, we suspend during reconciliation. This causes us to\nnot be able to render siblings because we don't know if the keys will\nreconcile. For initial render we could probably special case this and\njust render a lazy component fiber.\nThrowing in reconciliation didn't work correctly with direct nested\nsiblings of a Suspense boundary before but it does now so it depends\non new reconciler.", "Lint bundles using the bundle config instead of scanning for files (#19025)\n\nLint bundles using the bundle config instead of scanning for files\n\nThis ensures that we look for all the files that we expect to see there.\nIf something doesn't get built we wouldn't detect it.\nHowever, this doesn't find files that aren't part of our builds such as\nindirection files in the root. This will need to change with ESM anyway\nsince indirection files doesn't work. Everything should be built anyway.\nThis ensures that we can use the bundles.js config to determine special\ncases instead of relying on file system conventions.\n\nRun lint with flag\n", "Add simple Node build (#19022)\nThe webpack plugin doesn't really need a separate prod and dev build.\nIt also needs to be ES2015 otherwise we can't extend native classes.", "Remove www builds of fetch (#19038)\nI don't think we'll ever use this just because we have such a unique set up\nfor network delivery so we'll use something custom for this case.\nAlso, we don't need a profiling build for this since it doesn't have an\nentry point.", 'Prettier wants me to change this (#19039)', "Revert autofix lint (#19040)\nI accidentally committed this since I had it on locally so I didn't have\nto manually convert things to const.\nHowever, this causes things to always pass lint since CI also runs this.", 'Upgrade Closure Compiler (#19041)\nThe Symbol bug has now been fixed so we can remove the hack that renames\nthe global variable.', 'Remove unnecessary throw catch (#19044)\nThis was originally added so you could use "break on caught exceptions"\nbut that feature is pretty useless these days since it\'s used for feature\ndetection and Suspense.\nThe better pattern is to use the stack trace, jump to source and set a\nbreak point here.\nSince DevTools injects its own console.error, we could inject a "debugger"\nstatement in there. Conditionally. E.g. React DevTools could have a flag\nto toggle "break on warnings".', 'Enable component stack locations in www (#19047)', 'DevTools: Add break-on-warn feature (#19048)\nThis commit adds a new tab to the Settings modal: Debugging\nThis new tab has the append component stacks feature and a new one: break on warn\nThis new feature adds a debugger statement into the console override', "Build FB specific Isomorphic Bundles (#19049)\nWe need this so we can version them separately and use different\nfeature flags than we use for OSS RN.\nI put them in a separate facebook-react-native folder which won't go\ninto the RN GH repo. I plan on moving the renderers there too but not yet.", "Bugfix: Infinite loop in beforeblur event (#19053)\n\nFailing test: Infinite loop in beforeblur event\n\nIf the focused node is hidden by a Suspense boundary, we fire the\nbeforeblur event. Our check for whether a tree is being hidden isn't\nspecific enough. It should only fire when the tree is initially hidden,\nbut it's being fired for updates, too.\n\nOnly fire beforeblur on visible -> hidden\n\nShould only beforeblur fire if the node was previously visible. Not\nduring updates to an already hidden tree.\nTo optimize this, we should use a dedicated effect tag and mark it in\nthe render phase. I've left this for a follow-up, though. Maybe can\nrevisit after the planned refactor of the commit phase.\n\nMove logic to commit phase\n\nisFiberSuspenseAndTimedOut is used elsewhere, so I inlined the commit\nlogic into the commit phase itself.", 'Remove synamic modern event system flag for FB (#19059)\n\nRemove synamic modern event system flag for FB\n', 'Enable component stacks everywhere except RN (#19120)\nThis would still affect test renderer and isomorphic in RN.', "Land Lanes implementation in old fork (#19108)\n\n\nAdd autofix to cross-fork lint rule\n\n\nreplace-fork: Replaces old fork contents with new\n\n\nFor each file in the new fork, copies the contents into the\ncorresponding file of the old fork, replacing what was already there.\nIn contrast to merge-fork, which performs a three-way merge.\n\nReplace old fork contents with new fork\n\nFirst I ran  yarn replace-fork.\nThen I ran yarn lint with autofix enabled. There's currently no way to\ndo that from the command line (we should fix that), so I had to edit the\nlint script file.\n\nManual fix-ups\n\nRemoves dead branches, removes prefixes from internal fields.  Stuff\nlike that.\n\nFix DevTools tests\n\nDevTools tests only run against the old fork, which is why I didn't\ncatch these earlier.\nThere is one test that is still failing. I'm fairly certain it's related\nto the layout of the Suspense fiber: we no longer conditionally wrap the\nprimary children. They are always wrapped in an extra fiber.\nSince this has been running in www for weeks without major issues, I'll\ndefer fixing the remaining test to a follow up.", 'Remove shouldDeprioritizeSubtree from host config (#19124)\nNo longer being used.', 'Clarifications\nCo-authored-by: shengxinjing 316783812@qq.com', 'Fix spelling errors and typos (#19138)', 'Fix spelling (#19084)', "Re-enabled DebugTracing feature for old reconciler fork (#19142)\nIt was temporarily removed by @sebmarkbage via PR #18697. Newly re-added tracing is simplified, since the lane(s) data type does not require the (lossy) conversion between priority and expiration time values.\n@sebmarkbage mentioned that he removed this because it might get in the way of his planned discrete/sync refactor. I'm not sure if that concern still applies, but just in case- I have only re-added it to the old reconciler fork for now.", '[eslint-plugin-react-hooks]: handling sparse array when no-inline callback (#19145)', 'Revert "Re-enabled DebugTracing feature for old reconciler fork (#19142)" (#19159)\nThis reverts commit cc7c1aece46a6b69b41958d731e0fd27c94bfc6c.', 'Bugfix: Legacy Mode + DevTools "force fallback" (#19164)\nDevTools has a feature to force a Suspense boundary to show a fallback.\nThis feature causes us to skip the first render pass (where we render\nthe primary children) and go straight to rendering the fallback.\nThere\'s a Legacy Mode-only codepath that failed to take this scenario\ninto account, instead assuming that whenever a fallback is being\nrendered, it was preceded by an attempt to render the primary children.\nSuspenseList can also cause us to skip the first pass, but the relevant\nbranch is Legacy Mode-only, and SuspenseList is not supported in\nLegacy Mode.\nFixes a test that I had temporarily disabled when upstreaming the Lanes\nimplementation in #19108.', 'fix: use define property to overwrite console, close #19099 (#19123)\n\n\nfix: use define property to overwrite console, close #19099\n\n\nfix: lint error\n\n', 'Shutdown DevTools Bridge synchronously when unmounting (#19180)', 'Updates the DevTools test script to make it easier to test other URLs. (#19179)', "Re-enabled DebugTracing feature for old reconciler fork (#19161)\n\nRe-enabled DebugTracing feature for old reconciler fork\n\nIt was temporarily removed by @sebmarkbage via PR #18697. Newly re-added tracing is simplified, since the lane(s) data type does not require the (lossy) conversion between priority and expiration time values.\n@sebmarkbage mentioned that he removed this because it might get in the way of his planned discrete/sync refactor. I'm not sure if that concern still applies, but just in case- I have only re-added it to the old reconciler fork for now.\n\nForce Code Sandbox CI to re-run\n", 'use NoTimestamp instead of -1 (#19182)', 'Remove unnecessary tag end from CommitRanked view (#19195)', 'Fix react-runtime main field (#19193)\nThe "main" field in this package points to a non-existent file. This fixes it.', 'Add new test cli (#19184)\n\n\nAdd new test cli\n\n\nRemove --variant accidentally added to test-persist\n\n\ns/test/tests\n\n\nUpdates from review\n\n\nUpdate package.json tests\n\n\nMissed a release channel in circle.yaml\n\n\nUpdate config.yml to use just run: with test commands\n\n\nUpdate release-channel options and add build dir checks\n\n\nUpdate test args to use the new release-channel options\n\n\nFix error in circle config.yml\n\n\nFix a wrong condition for the --variant check\n\n\nFix a wrong condition for the --persistent check\n\n\nPrettier\n\n\nRequire build check for devtool tests as well\n\n', 'Move TOP_BEFORE_BLUR to bubble phase (#19197)', 'Fixed test script handling of unknown/additional args (#19209)', 'Add regression test for #18497 (#18538)', 'fix(eslint-plugin-react-hooks): Support optional chaining when accessing prototype method inside useCallback and useMemo #19061 (#19062)\n\n\nfix(eslint-plugin-react-hooks): Support optional chaining when accessing prototype method #19061\n\n\nrun prettier\n\n\nAdd fix for #19043\n\n', 'eslint-plugin-react-hooks@4.0.5', 'Add regression tests where sync render causes later concurrent render to expire soon (#18608)\n\n\nAdd a failing test for #17911\n\n\nAdd more test cases where sync render causes later concurrent render to expire soon\n\n', 'make link https (#19147)', 'Revert "Add regression test for #18497 (#18538)" (#19215)\nThis reverts commit e9c1445ba09ac0ae73465f28514f9aa45074b7c7.', 'Added warning to  in case no value prop is provided (#19054)\n\n\nadded warning to context.provider in case no value prop\n\n\nupdate message\n\n\nupdated message and pass undefined\n\n', "Don't bailout after Suspending in Legacy Mode (#19216)\n\n\nAdd a failing test for legacy Suspense blocking context updates in memo\n\n\nAdd more test case coverage for variations of #17356\n\n\nDon't bailout after Suspending in Legacy Mode\n\n\nCo-authored-by: Tharuka Devendra tsdevendra1@gmail.com", 'Fix development mode hang when iframe is removed (#19220)\n\n\nFix development mode hang when iframe is removed\n\n\nAlso fix #16734\n\n', 'Remove React Flare Keyboard responder (#19222)', 'Run ReactBrowserEventEmitter test on bundles (#19225)\n\n\nRun ReactBrowserEventEmitter test on bundles\n\n\nRm bad tests\n\n', 'Move responder tests and remove dead code (#19226)', 'Fix responder logic in ReactDOMServerSelectiveHydration-test (#19227)', 'Fork legacy-events folder into react-dom and react-native (#19228)', 'Enable modern event system and delete dead code (#19230)', 'Remove dead code from modern event system (#19233)\n\n\nRemove dead code from modern event system\n\n\nRemove SSR dependency on EventPluginRegistry\n\n', 'Add Flow to ModernChangeEventPlugin (#19232)', 'Make event plugin injection statically resolvable (#19234)\n\n\nMake plugins ESM\n\n\nResolve extractEvents statically\n\n\nResolve eventTypes statically\n\n\nFix flow types and inconsistent naming\n\n\nMove injection into the plugin system itself\n\n\nFix Flow\n\n', 'Remove TestUtils dependency on event registry (#19235)', 'Make event config an implementation detail of each plugin (#19236)\n\n\nMerge two variables with same purpose\n\n\nReplace dispatchConfig with _reactName on event object\n\n', 'Remove event config (#19237)', 'Add some type detection (#19239)', 'Fix Flow from #19239 (#19242)', 'Add SSL support to React devtools standalone (#19191)\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Refine event registration + event signatures (#19244)\n\n\nRefine event registration + event signatures\n\n\nAddress feedback\n\n', 'Enable createEventHandle API for wWW test builds (#19262)', "Fix ExhaustiveDeps ESLint rule throwing with optional chaining (#19260)\nCertain code patterns using optional chaining syntax causes\neslint-plugin-react-hooks to throw an error.\nWe can avoid the throw by adding some guards. I didn't read through the\ncode to understand how it works, I just added a guard to every place\nwhere it threw, so maybe there is a better fix closer to the root cause\nthan what I have here.\nIn my test case, I noticed that the optional chaining that was used in\nthe code was not included in the suggestions description or output,\nbut it seems like it should be. This might make a nice future\nimprovement on top of this fix, so I left a TODO comment to that effect.\nFixes #19243", 'Handle test-cli failure case for CI (#19265)', 'Fix master tests (#19267)', "Decouple update priority tracking from Scheduler package (#19121)\n\n\nInitial currentLanePriority implementation\n\n\nMinor updates from review\n\n\nFix typos and enable flag\n\n\nFix feature flags and lint\n\n\nFix simple event tests by switching to withSuspenseConfig\n\n\nDon't lower the priority of setPending in startTransition below InputContinuous\n\n\nMove currentUpdateLanePriority in commit root into the first effect block\n\n\nRefactor requestUpdateLane to log for priority mismatches\n\n\nAlso verifies that the update lane priority matches the scheduler lane priority before using it\n\n\nFix four tests by adding ReactDOM.unstable_runWithPriority\n\n\nFix partial hydration when using update lane priority\n\n\nFix partial hydration when using update lane priority\n\n\nRename feature flag and only log for now\n\n\nMove unstable_runWithPriority to ReactFiberReconciler\n\n\nAdd unstable_runWithPriority to ReactNoopPersistent too\n\n\nBug fixes and performance improvements\n\n\nInitial currentLanePriority implementation\n\n\nMinor updates from review\n\n\nFix typos and enable flag\n\n\nRemove higherLanePriority from ReactDOMEventReplaying.js\n\n\nChange warning implementation and startTransition update lane priority\n\n\nInject reconciler functions to avoid importing src/\n\n\nFix feature flags and lint\n\n\nFix simple event tests by switching to withSuspenseConfig\n\n\nDon't lower the priority of setPending in startTransition below InputContinuous\n\n\nMove currentUpdateLanePriority in commit root into the first effect block\n\n\nRefactor requestUpdateLane to log for priority mismatches\n\n\nAlso verifies that the update lane priority matches the scheduler lane priority before using it\n\n\nFix four tests by adding ReactDOM.unstable_runWithPriority\n\n\nFix partial hydration when using update lane priority\n\n\nFix partial hydration when using update lane priority\n\n\nRename feature flag and only log for now\n\n\nMove unstable_runWithPriority to ReactFiberReconciler\n\n\nBug fixes and performance improvements\n\n\nRemove higherLanePriority from ReactDOMEventReplaying.js\n\n\nChange warning implementation and startTransition update lane priority\n\n\nInject reconciler functions to avoid importing src/\n\n\nFixes from bad rebase\n\n", 'Fix event replaying logic (#19269)', 'Refactor createEventHandle signature (#19174)', 'Update useEvent implementation (#19271)', '[ESLint] Consistently treat optional chaining as regular chaining (#19273)\n\nRevert "Fix ExhaustiveDeps ESLint rule throwing with optional chaining (#19260)"\n\nThis reverts commit 0f84b0f02b5579d780a9f54497007c4c84aaebb7.\n\n\nRe-add a test from #19260\n\n\nRemove all code for optional chaining support\n\n\nConsistently treat optional chaining as regular chaining\n\n\nThis is not ideal because our suggestions use normal chaining. But it gets rid of all current edge cases.\n\n\nAdd more tests\n\n\nMore consistency in treating normal and optional expressions\n\n\nAdd regression tests for every occurrence of Optional*\n\n', 'Allow decoupleUpdatePriorityFromScheduler to be set (#19272)', '[ESLint] Handle optional member chains (#19275)\n\nRename internal variables\n\nThis disambiguates "optional"/"required" because that terminology is taken by optional chaining.\n\n\nHandle optional member chains\n\n\nUpdate comment\n\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\nCo-authored-by: Ricky rickhanlonii@gmail.com', 'eslint-plugin-react-hooks@4.0.6', 'Fix state leaking when a function component throws on server render (#19212)\n\n\nadd unit test asserting internal hooks state is reset\n\n\nReset internal hooks state before rendering\n\n\nreset hooks state on error\n\n\nUse expect...toThrow instead of try/catch in test\n\n\nreset dev-only hooks state inside resetHooksState\n\n\nreset currentlyRenderingComponent to null\n\n', "Add user timing marks for scheduling profiler tool (#19223)\nHigh level breakdown of this commit:\n\nAdd a enableSchedulingProfiling feature flag.\nAdd functions that call User Timing APIs to a new SchedulingProfiler file. The file follows DebugTracing's structure.\nAdd user timing marks to places where DebugTracing logs.\nAdd user timing marks to most other places where @bvaughn's original draft DebugTracing branch marks.\nTests added\nMore context (and discussions with @bvaughn) available at our internal PR MLH-Fellowship#11 and issue MLH-Fellowship#5.\n\nSimilar to DebugTracing, we've only added scheduling profiling calls to the old reconciler fork.\nCo-authored-by: Kartik Choudhary kartik.c918@gmail.com\nCo-authored-by: Kartik Choudhary kartikc.918@gmail.com\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com", 'Text improvement (#19167)\ntext improvement in README.md', 'Modern Event System: make on*Capture events use capture phase (#19221)', 'Add console group methods to dev disabled groups (#19069)\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'Update README.md', 'Improve readability of isValidElementType (#19251)\n\n\nimprove readability\n\n\nreplace condition by switch/case\n\n\nreplace condition by switch/case\n\n\nremove unnecessary braces\n\n\nreplace switch/case to ifs\n\n\nreplace switch/case to ifs\n\n\nfix by multiline if statements\n\n\nfix multiple if statements\n\n', 'Add regression test for #19269 (#19282)', 'Use a custom jsdom fork (#19284)', 'Move Scope API ref resolution to mutation phase (#19264)\n\nMove Scope API ref resolution to mutation phase\n', 'Add dedicated LanePriority for Suspense retries (#19287)\nA "retry" is a special type of update that attempts to flip a Suspense\nboundary from its placeholder state back to its primary/resolved state.\nCurrently, retries are given default priority, using the same algorithm\nas normal updates and occupying range of lanes.\nThis adds a new range of lanes dedicated specifically to retries, and\ngives them lower priority than normal updates.\nA couple of existing tests were affected because retries are no longer\nbatched with normal updates; they commit in separate batches.\nNot totally satisfied with this design, but I think things will snap more\ninto place once the rest of the Lanes changes (like how we handle\nparallel Suspense transitions) have settled.', 'Fix typo in Overview doc for react-devtools (#19289)', 'Updates Electron version for react-devtools (#19280)', 'Fixed test script for DevTools build config (#19295)', 'DevTools 4.7.0 -> 4.8.0 (#19297)', 'Refactor algorithm for next Lanes to work on (#19302)\nSome clean up to make the Lanes type easier to maintain.\nI removed the "start" and "end" range markers; they don\'t provide any\ninformation that isn\'t already encoded in the bitmask for each range,\nand there\'s no computation saved compared to the\npickArbitraryLane function.\nThe overall algorithm is largely the same but I did tweak some of the\ndetails. For example, if the lanes for a given priority are already\nbeing worked on, the previous algorithm would assign to the next\navailable lane, including the dedicated hydration lanes that exist\nin between each priority.\nThe updated algorithm skips over the hydration lanes and goes to the\nnext priority level. In the rare instance when all the non-Idle update\nlanes are occupied, it will pick an abitrary default lane. This will\nhave the effect of invalidating the current work-in-progress, and\nindicates a starvation scenario.\nEventually, if there are too many interruptions, the expiration time\nmechanism will kick in and force the update to synchronously finish.', 'DevTools: Make break-on-warn off by default (#19309)', 'React DevTools 4.8.1', 'Tweak wording', "Use lanes to check if a render is a Suspense retry (#19307)\nNow that Suspense retries have their own dedicated set of lanes\n(#19287), we can determine if a render includes only retries by checking\nif its lanes are a subset of the retry lanes.\nPreviously we inferred this by checking\nworkInProgressRootLatestProcessedEventTime. If it's not set, that\nimplies that no updates were processed in the current render, which\nimplies it must be a Suspense retry. The eventual plan is to get rid of\nworkInProgressRootLatestProcessedEventTime and instead track event\ntimes on the root; this change is one the steps toward that goal.\nThe relevant tests were originally added in #15769.", '[DevTools] Show HOC names in profiler (#19283)\n\n\nshow hoc names in profiler\n\n\nAdded hocDisplayNames.length check\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Revise useFocus/useFocusWithin (#19310)', 'Updated DevTools test snapshots', '[ESLint] Fix a bug causing a too coarse dependency suggestion (#19313)\n\n\nAdd regression test for ESLint rule\n\n\nFix the issue\n\n', 'eslint-plugin-react-hooks@4.0.7', 'Extract some of the tidy up changes from 19278 (#19315)', 'chore: Build react-dom/test-utils in codesandbox deploy (#19321)', 'Bubble onSubmit/onReset behind a feature flag (#19333)', 'reference not add to dependencies if only its type is used as typeof arg (#19316)\n\n\nreference not add to dependencies if only its type is used as typeof arg\n\n\nAdd a few more tests\n\n', 'eslint-plugin-react-hooks@4.0.8', 'Use RetryLanes instead of event time (follow up) (#19335)\nSame logic as #19307. Uses RetryLanes instead of event time to\ndetermine if a render includes new updates.', 'Fix DevTools handling of empty Suspense tag for legacy renderer versions (#19337)', 'fix mistake in React devtools (#19336)\nCo-authored-by: Пономаренко Богдан b.ponomarenko@tinkoff.ru', 'Scheduling profiler updates (#19334)\n\n\nMake enableSchedulingProfiler static for profiling+experimental builds\n\n\nCopied debug tracing and scheduler profiling to .new fork\n\n\nUpdated test @gate conditions\n\n', 'Fix createEventHandle bug with comment containers (#19348)', 'Revert "Fix createEventHandle bug with comment containers (#19348)" (#19354)\nThis reverts commit 147179ae82039f38fa1a9a72402f578af8fb3ea3.', 'Revert "Revert "Fix createEventHandle bug with comment containers (#19348)" (#19354)" (#19365)\nThis reverts commit 566f613763d180a9bed110513c9fc453f2eca252.', 'Revert "Scheduling profiler updates (#19334)" (#19366)\nThis reverts commit 6d7555b014513125b0c229b9c6e45c903d974ff7.', 'Devtools: improve getID guard (#19364)', "Disable DevTools minification (#19369)\nDevTools isn't being downloaded like typical JavaScript, so bundle size concerns don't apply. Parsing is still a consideration (so I'm open for discussion here) but I think this change would provide a couple of benefits:\n* People are more likely to actually read non-minified source code when e.g. a breakpoint is hit (as with the recent debugger statement)\n* Component stacks will be easier to parse on bug reports", "Don't build shallow renderer UMD bundles", 'Fix Suspense-wrapping heuristic (and bump version numbers) (#19373)\n\n\nFixed suspense wrapping heuristic\n\n\nBump package numbers 16.13.1 -> 17.0.0-alpha.0 to fix DevTools Suspense heuristic\n\n', 'DevTools 4.8.1 -> 4.8.2 (and CHANGELOG)', 'Effects list refactor continued: did-bailout flag (#19322)\n\n\nEffects list rewrite\n\n\nImproved deletions approach\n\n\nProcess deletions as we traverse the tree during commit, before we process other effects. This has the result of better mimicking the previous sequencing.\n\n\nMade deletions field nullable\n\n\nRevert (no longer necessary) change to ReactNative test\n\n\nEagerly set Deletions effect on Fiber when adding child to deletions array\n\n\nInitialize deletions array to null\n\n\nNull out deletions array instead of splicing 🤡\n\n\nRemoved TODO comment\n\n\nInitial exploration on a did-bailout flag\n\n\nfixed the rest of the bugs\n\n\nRolled temporary didBailout attribute into subtreeTag\n\n\naddressed comments\n\n\nRemoved DidBailout subtree tag\n\n\nRemoved stale comment\n\n\nuse while loop instead of recursion for siblings\n\n\nmove bailout flag from while loop\n\n\nRemoved some unnecessary Deletion effectTags from children\n\n\nMove Deletion effect assignment to deletions array initialization\n\n\nCo-authored-by: Luna lunaris.ruan@gmail.com', 'Fix bug with enableLegacyFBSupport click handlers (#19378)', 'Use jest-environment-jsdom-sixteen (#19288)\n\n\nUse jest-environment-jsdom-sixteen\n\n\nUpdate yarn.lock\n\n\nDedupe new jest packages in yarn.lock\n\n\nPull upstream changes\n\n', 'Tidy up React Scope API (#19352)', 'Modern Event System: use focusin/focusout for onFocus/onBlur (#19186)', 'Remove form event delegation flag (#19395)', 'Sync scheduling profiler marks and debug tracing to new reconciler fork (#19375, #19376, #19396)\n\n\nMake enableSchedulingProfiler flag static\n\n\nCopied debug tracing and scheduler profiling to .new fork and updated feature flags\n\n\nMove profiler component stacks behind a feature flag\n\n', 'Sync latest useFocus/useFocusWithin changes (#19397)', 'Set current update lane priority for user blocking events (#19342)\n\n\nSet current update lane priority for user blocking events\n\n\nUpdate to use LanePriority and not use runWithPriority\n\n\nRemove unused imports\n\n\nFix tests, and I missed ReactDOMEventListener\n\n\nFix more tests\n\n\nAdd try/finally and hardcode lane priorities instead\n\n\nAlso hard code InputContinuousLanePriority in tests\n\n\nRemove un-needed exports\n\n\nComment rollbacks\n\n', "Track event times per lane on the root (#19387)\n\nPass event time to markRootUpdated\n\nSome minor rearranging so that eventTime gets threaded through. No\nchange in behavior.\n\nTrack event times per lane on the root\n\nPrevious strategy was to store the event time on the update object\nand accumulate the most recent one during the render phase.\nAmong other advantages, by tracking them on the root, we can read the\nevent time before the render phase has finished.\nI haven't removed the eventTime field from the update object yet,\nbecause it's still used to compute the timeout. Tracking the timeout\non the root is my next step.", 'Added the word "events" to clear ambiguousness. (#19409)', "isFBBundle should be true if it's FB for www or FB for RN (#19420)\nThis ensures that the .fb.js override files kick in for RN. Otherwise we\nwon't have FB specific exports in the isomorphic modules.", "Generate RN renderers for stable builds (#19421)\n\n\nGenerate RN renderers for experimental builds\n\n\nDon't generate FB builds for experimental channels\n\n", 'Regression test for media event bubbling (#19428)', 'Remove capturePhaseEvents and separate events by bubbling (#19278)\n\nRemove capturePhaseEvents and separate events by bubbling\n\nWIP\nRefine all logic\nRevise types\nFix\nFix conflicts\nFix flags\nFix\nFix\nFix test\nRevise\nCleanup\nRefine\nDeal with replaying\nFix\n\n\nAdd non delegated listeners unconditionally\n\n\nAdd media events\n\n\nFix a previously ignored test\n\n\nAddress feedback\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'Revise comment + add non-bubbling event test (#19432)', 'Move event things around (#19433)\n\n\nPut all synthetic events in one file\n\n\nInline other helpers\n\n\nRemove Modern from filenames\n\n', 'Fix scope issue (#19434)', 'Remove SyntheticEvent subtypes (#19436)\n\n\nRemove SyntheticEvent subtypes\n\n\nCode golf\n\n', 'Sync React Native types (#19437)', "Move Persistent Mode Optimization away from firstEffect (#19381)\nPersistent mode needs to clone a parent and add its children if a child has\nchanged.\nWe have an optimization in persistent mode where we don't do that if no\nchild could've changed. If there are no effects scheduled for any child\nthen there couldn't have been changes.\nInstead of checking for this on firstEffect, we now check this on the\nchildren's effectTag and subtreeTags.\nThis is quite unfortunate because if we could just do this check a little\nbit later we would've already gotten it transferred to the completed work's\nsubtreeTag. Now we have to loop over all the children and if any of them\nchanged, we have to loop over them again. Doing at least two loops per\nparent.", 'fix issue #19362 + test (#19412)', 'Add invalid/close events to  element (#19439)\nSupport dialog\nFix', 'Fix issue with capture phase non-bubbling events (#19452)', 'Upgrade art fixtures to babel 7 (#16235)\n\n\nchore: upgrade art fixtures to babel 7\n\n\nupgrade\n\n\nuse yarn\n\n', 'Update my mailmap entries (#19455)', 'Follow up fix to 19452 (#19454)', 'Delegated all capture events (#19463)', 'Re-added toggle event to non-delegated events (#19465)', "Don't emulate bubbling of the scroll event (#19464)\n\n\nDon't emulate bubbling of the scroll event\n\n\nPut behind a flag\n\n", 'Bail-out of attaching non-delegated listeners (#19466)\n\nBail-out of attaching non-delegated listeners\n\nRevise comment\n\n\nFix tests/add tests\n\n\nAdd onInvalid test\n\n', "Remove timeout option from scheduleCallback (#19457)\nSince the Lanes refactor landed, we no longer rely on this anywhere, so\nwe can remove it.\nThe delay option is still needed by our timer implementation\n(setTimeout polyfill). We'll keep the feature, but we'll likely change\nhow it's exposed once we figure out the proper layering between the\nvarious Scheduler APIs.", 'Remove callbackId field from FiberRoot (#19458)\nThe old expiration times implementation used this field to infer when\nthe priority of a task had changed at a more granular level than a\nScheduler priority level.\nNow that we have the LanePriority type, which is React-specific, we no\nlonger need the callbackId field.', 'feat(react-dom): Add enterKeyHint (#18634)', "Don't rely on didTimeout for SyncBatched (#19469)\nTasks with SyncBatchedPriority — used by Blocking Mode — should always\nbe rendered by the peformSyncWorkOnRoot path, not\nperformConcurrentWorkOnRoot.\nCurrently, they go through the performConcurrentWorkOnRoot callback.\nThen, we check didTimeout to see if the task expired. Since\nSyncBatchedPriority translates to ImmediatePriority in the Scheduler,\ndidTimeout is always true, so we mark it as expired. Then it exits\nand re-enters in the performSyncWorkOnRoot path.\nAside from being overly convoluted, we shouldn't rely on Scheduler to\ntell us that SyncBatchedPriority work is synchronous. We should handle\nthat ourselves.\nThis will allow us to remove the didTimeout check. And it further\ndecouples us from the Scheduler priority, so we can eventually remove\nthat, too.", 'Add SchedulerHostConfig fork for post task (#19470)', 'Add "unstable_" prefix to experimental mutable source APIs (#19472)\n\n\nAdd "unstbale_" prefix to mutable source APIs\n\n\nDebugHooks no longer calls useMutableSource() on init\n\n\nThis was causing an observable behavioral difference between experimental DEV and PROD builds.\nWe don\'t initialize stack position for other composite hooks (e.g. useDeferredValue, useTransition, useOpaqueIdentifier). If we did, it would cause the same obesrvable behavioral difference.', 'Event propagation test suite (#19483)', 'Add postTask browser scheduler implementation  (#19479)\n\n\nReduce code to necessities\n\n\nSwitch to postTask API\n\n\nAdd SchedulerPostTask tests\n\n\nUpdates from review\n\n\nFix typo from review\n\n\nGenerate build of unstable_post_task\n\n', 'Add regression tests for all events (#19485)', 'Use feature flags for React Native in the test renderer (#19486)', 'Effects list refactor continued: passive effects traversal (#19374)\n\nAdds new Passive subtree tag value.\nAdds recursive traversal for passive effects (mounts and unmounts).\nRemoves pendingPassiveHookEffectsMount and pendingPassiveHookEffectsUnmount arrays from work loop.\nRe-adds sibling and child pointer detaching (temporarily removed in previous PR).\nAddresses some minor TODO comments left over from previous PRs.\n\n\nCo-authored-by: Luna Ruan luna@fb.com', 'Fix onGot/LostPointerCapture events (#19487)', "Check PassiveStatic instead of Passive (#19489)\nSaves us from having to set a flag on current during the layout phase.\nCould result in some redundant traversal, since PassiveStatic includes\neffects that don't need clean-up. But it's worth it to remove the work\nfrom the layout phase.\nWhile I was editing this, I also re-arranged it so that we check the\neffectTag check before we check the tag, since the effectTag check\nis the one that's more likely to fail.", "Check for passive effects on the root fiber (#19488)\nThe root fiber doesn't have a parent from which we can read the\nsubtreeTag, so we need to check its effectTag directly.\nThe root fiber previously did not have any pending passive effects,\nbut it does now that deleted fibers are cleaned up in the passive phase.\nThis allows us to remove a schedulePassiveEffectCallback call from the\nsynchronous unmount path.\nCo-authored-by: Brian Vaughn bvaughn@fb.com", 'Remove event constants (#19276)\n\n\nRemove opaque event type\n\n\nRename type and merge files\n\n\nUse literals where we have Flow coverage\n\n\nFlowify some plugins\n\n\nRemove constants except necessary ones\n\n', "Move passive logic out of layout phase (#19500)\n\n\nsetCurrentFiber per fiber, instead of per effect\n\n\nRe-use safelyCallDestroy\n\n\nPart of the code in flushPassiveUnmountEffects is a duplicate of the\ncode used for unmounting layout effects. I did some minor refactoring to\nso we could use the same function in both places.\nClosure will inline anyway so it doesn't affect code size or\nperformance, just maintainability.\n\nDon't check HookHasEffect during deletion\n\nWe don't need to check HookHasEffect during a deletion; all effects are\nunmounted.\nSo we also don't have to set HookHasEffect during a deletion, either.\nThis allows us to remove the last remaining passive effect logic from\nthe synchronous layout phase.", 'Statically enable enableFilterEmptyStringAttributesDOM (#19502)', 'Revert "Statically enable enableFilterEmptyStringAttributesDOM (#19502)" (#19504)\nThis reverts commit 815ee89bf55078f2447fe49a1c68336e70c1ce44.', 'Disable onScroll bubbling statically except for WWW (#19503)', 'Allow publishing untagged releases (#19505)', 'Support untagged releases (#19507)\n\n\nSupport untagged releases\n\n\nFix\n\n', 'Revert "Support untagged releases (#19507)" (#19508)\nThis reverts commit 58b3ee7a889b62fefb9cc64962819795bebce7b8.', 'Support untagged releases (#19509)', "Add static version of Passive subtree tag (#19510)\nCreates new subtree tag, PassiveStatic, that represents whether a\ntree contains any passive effect hooks.\nIt corresponds to the PassiveStatic effect tag, which represents the\nsame concept for an individual fiber.\nThis allows us to remove the PassiveStatic effect tag from PassiveMask.\nIts presence was causing us to schedule a passive effect phase callback\non every render, instead of only when something changed. That's now\nfixed; this is reflected in the SchedulerProfiler tests.\n(The naming is getting really confusing. Need to do some bikeshedding.)", "Bugfix: Don't unmount siblings of deleted node (#19516)\n\nTest: Don't unmount siblings of deleted node\n\nAdds a failing regression test. Will fix in the next commit.\n\nRefactor to accept deleted fiber, not child list\n\nA deleted fiber is passed to\nflushPassiveUnmountEffectsInsideOfDeletedTree, but the code is written\nas if it accepts the first node of a child list. This is likely because\nthe function was based on similar functions like\nflushPassiveUnmountEffects, which do accept a child list.\nUnfortunately, types don't help here because we use the first node\nin the list to represent the whole list, so in both cases, the type\nis Fiber.\nMight be worth changing the other functions to also accept individual\nfibers instead of a child list, to help avoid confusion.\n\nAdd layout effect to regression test, just in case\n", 'Turn off new component stacks for React Native (#19521)', 'Use RN fork in default branch of feature flags (#19522)', 'fix: typo in React Release Scripts (#19524)', 'Remove the deprecated React Flare event system (#19520)', 'Remove onScroll bubbling flag (#19535)', '[Scheduler] Get current time from performance.now in non-DOM environments (#19532)\n\n\nGet current time from performance.now in non-DOM environments\n\n\nUse local references to native APIs for Date and Performance\n\n\nRefactored to read globals directly\n\n', "Fix runtime error that happens if a passive destroy function throws within an unmounted tree (#19543)\nA passive effect's cleanup function may throw after an unmount. In that event, React sometimes threw an uncaught runtime error trying to access a property on a null stateNode field. This commit fixes that (and adds a regression test).", 'Re-add discrete flushing timeStamp heuristic (behind flag) (#19540)', 'fix(react-dom): unnecesary path on DOMEventProperties (#19544)', 'Register more node types that are used later as JSXIdentifiers (#19514)', 'Remove unused argument from call to jest method (#19546)', 'Add feature flag for setting update lane priority (#19401)\n\n\nAdd feature flag for setting update lane priority\n\n\nRemove second feature flag\n\n\nRefactor feature flag locations\n\n\nAdd missing else\n\n', 'Warn about undefined return value for memo and forwardRef (#19550)', 'Nesting Fixture (#19531)\n\n\nNesting Fixture\n\n\nAdd README to nesting fixture\n\n\nApply suggestions from code review\n\n\nCo-authored-by: Ricky rickhanlonii@gmail.com\n\n\nFixes\n\n\nAdd Redux\n\n\nUse different versions\n\n\nUse Consumer API\n\n\nRename helper\n\n\nWrite docs\n\n\nUpdate README.md\n\n\nUpdate README.md\n\n\nCo-authored-by: Rick Hanlon rickhanlonii@gmail.com', 'Fix command', 'Indent a command', "Parallelize Jest in CI (#19552)\nUses CircleCI's parallelism key to split our test jobs across multiple\nprocesses, like we do for the build job.", 'Update outdated lockfile (#19568)', "fix: onFocus/onBlur/onBeforeInput have a matching event type (#19561)\n\n\ntest: Add current behavior for event types of onFocus/onBlur\n\n\nfix: onFocus/onBlur have a matching event type\n\n\nfix useFocus\n\n\nfix: don't compare native event types with react event types\n\n\nAdd FocusIn/FocusOutEventInterface\n\n\nA simpler alternative fix\n\n\nAdd regression tests\n\n\nAlways pass React event type and fix beforeinput\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com", 'Rename test files', 'Fix double-firing mouseenter (#19571)\n\n\ntest: Simulate mouseover in browser\n\n\nFix duplicate onMouseEnter event when relatedTarget is a root\n\n\nTest leave as well\n\n\nCo-authored-by: Sebastian Silbermann silbermann.sebastian@gmail.com', 'Support inner component _debugOwner in memo (#19556)\n\n\nSupport inner component _debugOwner in memo\n\n\ntest with devtool context\n\n\nremove memo test\n\n\nMerged master; tweaked test and snapshot\n\n\nPass owner to createFiber fn when creating a memo component.\n\n\nCo-authored-by: Theodore Han tqhan317@gmail.com', 'Add ReactVersion to SchedulingProfiler render scheduled marks (#19553)\n\n\nAdd ReactVersion to SchedulingProfiler render scheduled marks\n\n\nMove ReactVersion to a new --react-init-* mark\n\n\nCo-authored-by: E-Liang Tan eliang@eliangtan.com', 'Remove resolutions from test renderer package.json (#19577)', 'Speed up yarn cache in circle (#19566)', "[Scheduler] Call postTask directly (#19551)\nThis updates the experimental Scheduler postTask build to call postTask\ndirectly, instead of managing our own custom queue and work loop.\nWe still use a deadline 5ms mechanism to implement shouldYield.\nThe main thing that postTask is currently missing is the continuation\nfeature — when yielding to the main thread, the yielding task is sent\nto the back of the queue, instead of maintaining its position.\nWhile this would be nice to have, even without it, postTask may be good\nenough to replace our userspace implementation.\nWe'll run some tests to see.", 'DevTools bug fix: Proxied methods should be safely dehydrated for display', '[Scheduler] Re-throw unhandled errors (#19595)\nBecause postTask returns a promise, errors inside a postTask\ncallback result in the promise being rejected.\nIf we don\'t catch those errors, then the browser will report an\n"Unhandled promise rejection" error. This is a confusing message to see\nin the console, because the fact that postTask is a promise-based API\nis an implementation detail from the perspective of the developer.\n"Promise rejection" is a red herring.\nOn the other hand, if we do catch those errors, then we need to report\nthe error to the user in some other way.\nWhat we really want is the default error reporting behavior that a\nnormal, non-Promise browser event gets.\nSo, we\'ll re-throw inside setTimeout.', 'Remove unused argument (#19600)', 'Fix emoji character displayed in Chrome extension (#19603)', 'Move commit passive unmount/mount to CommitWork (#19599)', '[eslint-plugin-react-hooks] Report constant constructions (#19590)\n\n[eslint-plugin-react-cooks] Report constant constructions\n\nThe dependency array passed to a React hook can be thought of as a list of cache keys. On each render, if any dependency is not === its previous value, the hook will be rerun. Constructing a new object/array/function/etc directly within your render function means that the value will be referentially unique on each render. If you then use that value as a hook dependency, that hook will get a "cache miss" on every render, making the dependency array useless.\nThis can be especially dangerous since it can cascade. If a hook such as useMemo is rerun on each render, not only are we bypassing the option to avoid potentially expensive work, but the value returned by useMemo may end up being referentially unique on each render causing other downstream hooks or memoized components to become deoptimized.\n\n\nFix/remove existing tests\n\n\nDon\'t give an autofix of wrapping object declarations\n\n\nIt may not be safe to just wrap the declaration of an object, since the object may get mutated.\nOnly offer this autofix for functions which are unlikely to get mutated.\nAlso, update the message to clarify that the entire construction of the value should get wrapped.\n\n\nHandle the long tail of nodes that will be referentially unique\n\n\nCatch let/var constant constructions on initial assignment\n\n\nTrim trailing whitespace\n\n\nAddress feedback from @gaearon\n\n\nRename "assignment" to "initialization"\n\n\nAdd test for a constant construction used in multiple dependency arrays\n\n', 'fix event.relatedTarget fallback logic for firefox (#19607)\n\n\nfix event.relatedTarget fallback logic for firefox\n\n\ncheck if relatedTarget is undefined for fallback\n\n', "Remove wasteful checks from shouldYield\nshouldYield will currently return true if there's a higher priority\ntask in the Scheduler queue.\nSince we yield every 5ms anyway, this doesn't really have any practical\nbenefit. On the contrary, the extra checks on every shouldYield call\nare wasteful.", "Remove didTimeout check from work loop\nNo longer need this, since we have starvation protection in userspace.\nThis will also allow us to remove the concept from the Scheduler\npackage, which is nice because postTask doesn't currently support it.", "Permanently removed component stacks from scheduling profiler data (#19615)\nThese stacks improve the profiler data but they're expensive to generate and generating them can also cause runtime errors in larger applications (although an exact repro has been hard to nail down). Removing them for now. We can revisit adding them after this profiler has been integrated into the DevTools extension and we can generate them lazily.", "Improve error boundary handling for unmounted subtrees (#19542)\nA passive effect's cleanup function may throw after an unmount. Prior to this commit, such an error would be ignored. (React would not notify any error boundaries.) After this commit, React's behavior varies depending on which reconciler fork is being used.\nFor the old reconciler, React will call componentDidCatch for the nearest unmounted error boundary (if there is one). If there are no unmounted error boundaries, React will still swallow the error because the return pointer has been disconnected, so the normal error handling logic does not know how to traverse the tree to find the nearest still-mounted ancestor.\nFor the new reconciler, React will skip any unmounted boundaries and look for a still-mounted boundary. If one is found, it will call getDerivedStateFromError and/or componentDidCatch (depending on the type of boundary).\nTests have been added for both reconciler variants for now.", 'fix: leak strict mode with UMD builds (#19614)', 'refactor fb.me redirect link to reactjs.org/link (#19598)\n\n\nrefactor fb.me url to reactjs.org/link\n\n\nUpdate ESLintRuleExhaustiveDeps-test.js\n\n\nUpdate ReactDOMServerIntegrationUntrustedURL-test.internal.js\n\n\nUpdate createReactClassIntegration-test.js\n\n\nUpdate ReactDOMServerIntegrationUntrustedURL-test.internal.js\n\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'Update CHANGELOG.md', 'eslint-plugin-react-hooks@4.1.0', 'Fix: React cannot render in ShadowRoot (#15894)\n\n\nfix: render in shadow root\n\n\nfix: flow typing\n\n\nRemove types and turn invariant into warning\n\n\nCo-authored-by: Dan Abramov dan.abramov@me.com', 'Append text string to  error message (#19581)\n\n\nAppend text string to  error message\n\n\nTruncate text in  error message\n\n\nRegenerate codes.json\n\n', 'Always skip unmounted/unmounting error boundaries (#19627)\nThe behavior of error boundaries for passive effects that throw during cleanup was recently changed so that React ignores boundaries which are also unmounting in favor of still-mounted boundaries. This commit implements that same behavior for layout effects (useLayoutEffect, componentWillUnmount, and ref-detachment).\nThe new, skip-unmounting-boundaries behavior is behind a feature flag (skipUnmountedBoundaries).', "change destroy to safelyCallDestroy (#19605)\nWe use safelyCallDestroy for commitUnmount and passive effects unmounts but we call destroy directly in commitHookEffectListUnmount (AKA layout effects unmounts because we don't use this anywhere else). This PR changes the direct destroy call to safelyCallDestroy for consistency", 'fix: open two same tabs on firefox (#19632)\nclose #19629', 'Add missing param to safelyCallDestroy() (#19638)', 'fix: property list values should show whitespace (#19640)', 'refactor: remove unnecessary return statements (#19625)', 'provide profiling bundle for react-reconciler (#19559)', 'Add flow to SyntheticEvent (#19564)\n\n\nAdd flow to SyntheticEvent\n\n\nMinimal implementation of known and unknown synthetic events\n\n\nless casting\n\n\nUpdate EnterLeaveEventPlugin.js\n\n\nCo-authored-by: Dan Abramov dan.abramov@gmail.com', 'Keep onTouchStart, onTouchMove, and onWheel passive (#19654)\n\n\nKeep onTouchStart, onTouchMove, and onWheel passive\n\n\nPut it behind a feature flag on WWW\n\n', 'Revert "Remove onScroll bubbling flag (#19535)" (#19655)\nThis reverts commit e9721e14e4b8776c107afa3cdd7c6d664fe20c24.', 'Fix incorrect copy-paste in test (#19657)', 'Upgrade all @babel/* packages to fix DevTools builds on newer Node versions (#19647)', 'Import React Concurrent Mode Profiler (#19634)\nCo-authored-by: Brian Vaughn bvaughn@fb.com\nCo-authored-by: Kartik Choudhary kartikc.918@gmail.com', 'Visually distinguish user timing marks from React events (#19663)', 'Fix: Unspecified error for IE11 (#19530) (#19664)', "Use Global Render Timeout for CPU Suspense (#19643)\n\n\nUse Retry lane for resuming CPU suspended work\n\n\nUse a global render timeout for CPU suspense heuristics\n\n\nFix profiler test since we're now reading time more often\n\n\nSync to new reconciler\n\n\nTest synchronously rerendering should not render more rows\n\n", 'Fix DevTools crash when inspecting document.all (#19619)\n\n\nAdd html_all_collection type to correct typeof document.all\n\n\nprocess HTMLAllCollection like HTMLElement + fix flow issue\n\n\nfix lint\n\n\nmove flow fix comment\n\n\nMake it work with iframes too\n\n\noptimize how we get html_all_collection type\n\n\nuse once Object.prototype.toString.call\n\n', 'Fix movementX/Y polyfill with capture events (#19672)\n\n\nFix movementX/Y polyfill with capture events\n\n\nRemove unnecesary call for better inlining\n\n', 'Tweaked landing page styles (#19665)\n\n\nTweaked landing page styles\n\n\nUpdate GitHub link\n\n\nCo-authored-by: E-Liang Tan eliang@eliangtan.com', "Remove remaining references to effect list (#19673)\n\nRemove firstEffect null check\n\nThis is the last remaining place where the effect list has semantic\nimplications.\nI've replaced it with a check of effectTag and subtreeTag, to see\nif there are any effects in the whole tree. This matches the semantics\nof the old check. However, I think only reason this optimization exists\nis because it affects profiling. We should reconsider whether this\nis necessary.\n\nRemove remaining references to effect list\n\nWe no longer use the effect list anywhere in our implementation. It's\nbeen replaced by a recursive traversal in the commit phase.\nThis removes all references to the effect list in the new fork.", "Add a test for non-passive event handlers for events affected by the browsers' intervention (#19658)", 'Remove usage of PossiblyWeakSet from createEventHandle (#19686)', "Attach Listeners Eagerly to Roots and Portal Containers (#19659)\n\n\nFailing test for #19608\n\n\nAttach Listeners Eagerly to Roots and Portal Containers\n\n\nForbid createEventHandle with custom events\n\n\nWe can't support this without adding more complexity. It's not clear that this is even desirable, as none of our existing use cases need custom events. This API primarily exists as a deprecation strategy for Flare, so I don't think it is important to expand its support beyond what Flare replacement code currently needs. We can later revisit it with a better understanding of the eager/lazy tradeoff but for now let's remove the inconsistency.\n\nReduce risk by changing condition only under the flag\n\nCo-authored-by: koba04 koba0004@gmail.com", "Lint rule to forbid access of cross-fork fields (#19679)\n\nLint rule to forbid access of cross-fork fields\n\nWe use a shared Fiber type for both reconciler forks (old and new). It\nis a superset of all the fields used by both forks. However, there are\nsome fields that should only be used in the new fork, and others that\nshould only be used in the old fork.\nIdeally we would enforce this with separate Flow types for each fork.\nThe problem is that the Fiber type is accessed by some packages outside\nthe reconciler (like React DOM), and get passed into the reconciler as\narguments. So there's no way to fork the Fiber type without also forking\nthe packages where they are used. FiberRoot has the same issue.\nInstead, I've added a lint rule that forbids cross-fork access of\nfork-specific fields. Fields that end in _old or _new are forbidden\nfrom being used inside the new or old fork respectively. Or you can\nspecific custom fields using the ESLint plugin options.\nI used this plugin to find and remove references to the effect list\nin d2e914a.\n\nMark effect list fields as old\n\nAnd subtreeTag as new.\nI didn't mark lastEffect because that name is also used by the\nHook type. Not super important; could rename to lastEffect_old but\nidk if it's worth the effort.", 'Remove unused argument from finishConcurrentRender (#19689)', 'Add React.startTransition (#19696)\n\n\nAdd React.startTransition\n\n\nExport startTransition from index.js as well\n\n', 'Add SuspenseList to devTools (#19684)\n\n\nensure getDisplayName is only called on functions\n\n\nadd SuspenseList to Dev tools element names\n\n\nAdd SuspenseList and pass tests\n\n\nImport SuspenseList directly\n\n\nrun prettier\n\n\nRefactor tests to use real components\n\n\nrun linter\n\n', 'Disable timeoutMs argument (#19703)\n\nRemove distinction between long, short transitions\n\nWe\'re removing the timeoutMs option, so there\'s no longer any\ndistinction between "short" and "long" transitions. They\'re all treated\nthe same.\nThis commit doesn\'t remove timeoutMs yet, only combines the internal\npriority levels.\n\nDisable timeoutMs argument\n\ntl;dr\n\nWe\'re removing the timeoutMs argument from useTransition.\nTransitions will either immediately switch to a skeleton/placeholder\n  view (when loading new content) or wait indefinitely until the data\n  resolves (when refreshing stale content).\nThis commit disables the timeoutMS so that the API has the desired\n  semantics. It doesn\'t yet update the types or migrate all the test\n  callers. I\'ll do those steps in follow-up PRs.\n\nMotivation\nCurrently, transitions initiated by startTransition / useTransition\naccept a timeoutMs option. You can use this to control the maximum\namount of time that a transition is allowed to delay before we give up\nand show a placeholder.\nWhat we\'ve discovered is that, in practice, every transition falls into\none of two categories: a load or a refresh:\n\nLoading a new screen: show the next screen as soon as possible,\n  even if the data hasn\'t finished loading. Use a skeleton/placeholder\n  UI to show progress.\nRefreshing a screen that\'s already visible: keep showing the\n  current screen indefinitely, for as long as it takes to load the fresh\n  data, even if the current data is stale. Use a pending state (and\n  maybe a busy indicator) to show progress.\n\nIn other words, transitions should either delay indefinitely (for a\nrefresh) or they should show a placeholder instantly (for a load).\nThere\'s not much use for transitions that are delayed for a\nsmall-but-noticeable amount of time.\nSo, the plan is to remove the timeoutMs option. Instead, we\'ll assign\nan effective timeout of 0 for loads, and Infinity for refreshes.\nThe mechanism for distinguishing a load from a refresh already exists in\nthe current model. If a component suspends, and the nearest Suspense\nboundary hasn\'t already mounted, we treat that as a load, because\nthere\'s nothing on the screen. However, if the nearest boundary is\nmounted, we treat that as a refresh, since it\'s already showing content.\nIf you need to fix a transition to be treated as a load instead of a\nrefresh, or vice versa, the solution will involve rearranging the\nlocation of your Suspense boundaries. It may also involve adding a key.\nWe\'re still working on proper documentation for these patterns. In the\nmeantime, please reach out to us if you run into problems that you\'re\nunsure how to fix.\nWe will remove timeoutMs from useDeferredValue, too, and apply the\nsame load versus refresh semantics to the update that spawns the\ndeferred value.\nNote that there are other types of delays that are not related to\ntransitions; for example, we will still throttle the appearance of\nnested placeholders (we refer to this as the placeholder "train model"),\nand we may still apply a Just Noticeable Difference heuristic (JND) in\nsome cases. These aren\'t going anywhere. (Well, the JND heuristic might\nbut for different reasons than those discussed above.)', "Clean up timeoutMs-related implementation details (#19704)\n\nDisable busyDelayMs and busyMinDurationMs\n\nRefer to explanation in previous commit.\n\nRemove unnecessary work loop variables\n\nSince we no longer support SuspenseConfig options, we don't need to\ntrack these values.\n\nRemove unnecessary Update fields\n", '[Flight] Support more element types and Hooks for Server and Hybrid Components (#19711)\n\n\nShim support for more element types\n\n\nShim commonly used Hooks that are safe\n\n\nFlow\n\n\nOopsie\n\n', 'Enable eager listeners in open source (#19716)\n\n\nEnable eager listeners in open source\n\n\nFix tests\n\n\nEnable in all places\n\n', "Replace SuspenseConfig object with an integer (#19706)\nNow that the options in SuspenseConfig are no longer supported, the\nonly thing we use it for is to track whether an update is part of\na transition.\nI've renamed ReactCurrentBatchConfig.suspense to\nReactCurrentBatchConfig.transition, and changed the type to a number.\nThe number is always either 0 or 1. I could have made it a boolean;\nhowever, most likely this will eventually be either a Lane or an\nincrementing identifier.\nThe withSuspenseConfig export still exists until we've removed\nall the callers from www.", "Remove config argument from useTransition (#19719)\nAnd useDeferredValue.\nThe options were already disabled in previous commits, so this doesn't\nchange any behavior. I upated type signatures and cleaned up the hook\nimplementation a bit — no longer have to wrap the start method with\nuseCallback, because its only remaining dependency is a setState\nmethod, which never changes. Instead, we can store the start method\non a ref.", 'Revert "Append text string to  error message (#19581)" (#19723)\nThis reverts commit 1a41a196bcb30d456d1692c4a40cb8273fa2cb92.', 'Use gate pragma instead of if (EXPERIMENTAL) (#19722)\n\n\nUse gate pragma instead of if (EXPERIMENTAL)\n\n\nFix stream error handling in tests\n\n\nAdded an error listener so that the tests fail within their Jest scope,\ninstead of crashing the whole process.', 'Add startTransition as a known stable method (#19720)\nThe startTransition method returned from useTransition is a stable\nmethod, like dispatch or setState. You should not have to specify\nit as a hook dependency.', 'Fixes eslint warning when node type is ChainExpression (#19680)\n\n\nAdd babel parser which supports ChainExpression\n\n\nAdd and fix tests for new babel eslint parser\n\n\nextract function to mark node\n\n\nrefactor for compatibility with eslint v7.7.0+\n\n\nUpdate eslint to v7.7.0\nUpdate hook test since eslint now supports nullish coalescing\n\n', "Remove withSuspenseConfig (#19724)\nRemoves withSuspenseConfig and migrates relevant tests to\nstartTransition instead.\nWe only had one caller in www, which I've removed.", "Support Babel's envName option in React Refresh plugin (#19009)\n\n\nFix envName bug\n\n\nReplace getEnv with env\n\n", 'Fix instances of function declaration after return (#19733)\n\nAdd ESLint plugin to check for any function declare after return\nRefactor code to move function declarations before return and fix failing lint\n', 'Add ⎇ + arrow key navigation to DevTools (#19741)\n⎇ + left/right navigates between owners (similar to owners tree) and ⎇ + up/down navigations between siblings.', 'Fix typo in comment (Noticable→Noticeable) (#19737)', 'Add failing test for passive effect cleanup functions and memoized components (#19750)\n\n\nAdd failing tests for passive effects cleanup not being called for memoized components\n\n\nBubble passive static subtreeTag even after bailout\n\n\nThis prevents subsequent unmounts from skipping over any pending passive effect destroy functions', 'Add checkbox toggle for boolean values (#19714)\n\nadded a checkbox which appears to the right of a value when value is boolean\ncheckbox with toggle capability created for boolean props\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Scheduling Profiler: Add Fast Refresh (#19757)', 'Scheduling Profiler: Extract and test scroll state from horizontal pan and zoom view (#19682)\n\n\nExtract reusable scroll logic from HorizontalPanAndZoomView\n\n\nChange VerticalScrollView to use scrollState\n\n\nClarify test name\n\n', 'Revert "Revert "Remove onScroll bubbling flag (#19535)" (#19655)" (#19761)\nThis reverts commit 64ddef44c69a18038b1683e04c4558a72af1b91a.', 'Scheduling Profiler: Redesign with DevTools styling (#19707)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Scheduling Profiler: Move preprocessing to web worker and add loading indicator (#19759)\n\nMove preprocessData into a web worker\nAdd UI feedback for loading/import error states\nTerminate worker when done handling profile\nAdd display density CSS variables\n', 'Add feature flag to disable scheduler timeout in work loop (#19771)', "Decrease expiration time of input updates (#19772)\nChanges the expiration time of input updates from 1000ms to 250ms, to\nmatch the corresponding constant in Scheduler.js.\nWhen we made it larger, a product metric in www regressed, suggesting\nthere's a user interaction that's being starved by a series of\nsynchronous updates. If that theory is correct, the proper solution is\nto fix the starvation. However, this scenario supports the idea that\nexpiration times are an important safeguard when starvation does happen.\nAlso note that, in the case of user input specifically, this will soon\nno longer be an issue because we plan to make user input synchronous by\ndefault (until you enter startTransition, of course.)\nIf weren't planning to make these updates synchronous soon anyway, I\nwould probably make this number a configurable parameter.", 'Rename effect fields (#19755)\n\neffectTag -> flags\nsubtreeTag -> subtreeFlags\n', 'Combine Flags and SubtreeFlags types (#19775)\nBecause the subtreeFlags is the union of all the flags present in\na subtree, we can use the same type as flags.\nOne practical benefit is that we can bubble up the flags from the\nchildren with a single |= operator.\nStructurally, everything else about the effect algorithm is unchanged.', "Bugfix: Effect clean up when deleting suspended tree (#19752)\n\nBug: Effect clean up when deleting suspended tree\n\nAdds a failing unit test.\n\nRe-use static flags from suspended primary tree\n\nWhen switching to a Suspense boundary's fallback, we need to be sure\nto preserve static subtree flags from the primary tree.", '[Flight] Set dispatcher for duration of performWork() (#19776)', "Decouple public, internal act implementation (#19745)\nIn the next major release, we intend to drop support for using the act\ntesting helper in production. (It already fires a warning.) The\nrationale is that, in order for act to work, you must either mock the\ntesting environment or add extra logic at runtime. Mocking the testing\nenvironment isn't ideal because it requires extra set up for the user.\nExtra logic at runtime is fine only in development mode — we don't want\nto slow down the production builds.\nSince most people only run their tests in development mode, dropping\nsupport for production should be fine; if there's demand, we can add it\nback later using a special testing build that is identical to the\nproduction build except for the additional testing logic.\nOne blocker for removing production support is that we currently use\nact to test React itself. We must test React in both development and\nproduction modes.\nSo, the solution is to fork act into separate public and\ninternal implementations:\n\npublic implementation of act – exposed to users, only works in\n  development mode, uses special runtime logic, does not support partial\n  rendering\ninternal implementation of act – private, works in both\n  development and productionm modes, only used by the React Core test\n  suite, uses no special runtime logic, supports partial rendering (i.e.\n  toFlushAndYieldThrough)\n\nThe internal implementation should mostly match the public\nimplementation's behavior, but since it's a private API, it doesn't have\nto match exactly. It works by mocking the test environment: it uses a\nmock build of Scheduler to flush rendering tasks, and Jest's mock timers\nto flush Suspense placeholders.\n\nIn this first commit, I've added the internal forks of act and\nmigrated our tests to use them. The public act implementation is\nunaffected for now; I will leave refactoring/clean-up for a later step.", "Internal act: Flush timers at end of scope (#19788)\nIf there are any suspended fallbacks at the end of the act scope,\nforce them to display by running the pending timers (i.e. setTimeout).\nThe public implementation of act achieves the same behavior with an\nextra check in the work loop (shouldForceFlushFallbacks). Since our\ninternal act needs to work in both development and production, without\nadditional runtime checks, we instead rely on Jest's mock timers.\nThis doesn't not affect refresh transitions, which are meant to delay\nindefinitely, because in that case we exit the work loop without\nposting a timer.", 'Remove double space in test name (#19762)', 'Listen to onScroll during hydration (#19803)', "eslint-plugin-react-hooks: fix compatibility with @typescript-eslint/parser@4.0.0+ (#19751)\nIn addition to TSTypeQuery, dependency nodes with a TSTypeReference\nparent need to be ignored as well. Without this fix, generic type\nvariables will be listed as missing dependencies.\nExample:\nexport function useFoo<T>(): (foo: T) => boolean {\n    return useCallback((foo: T) => false, []);\n}\n\nThis will report the following issue:\nReact Hook useCallback has a missing dependency: 'T'. Either include\nit or remove the dependency array\n\nCloses: #19742", 'test(eslint-plugin-react-hooks): Run with TS parsers >= 2.x (#19792)\n\n\ntest(eslint-plugin-react-hooks): Run with TS parsers >= 2.x\n\n\nname test suites for each parser\n\n', 'Update CHANGELOG.md', 'eslint-plugin-react-hooks@4.1.1', "Don't visit passive effects during layout phase (#19809)\nRemoves the Update flag when scheduling a passive effect for\nuseEffect. The Passive flag alone is sufficient.\nThis doesn't affect any behavior, but does optimize the performance of\nthe commit phase.", 'Consider components in jsx as missing dependencies in @typescript-eslint/parser@4.x (#19815)\n\n\nRun JS tests with TS esling parser\n\n\nAdd failing test\n\n\nfix: Mark JSXIdentifier has missing dependency\n\n\nSafe isSameIdentifier\n\n', 'Update CHANGELOG.md', 'eslint-plugin-react-hooks@4.1.2', 'updates mailmap entries (#19824)', '[Events] Make passiveness and priority non-configurable (#19807)', 'React DevTools: Show symbols used as keys in state (#19786)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'DevTools: Improve browser extension iframe support (#19827)\nCo-authored-by: Joel DSouza joel.dsouza@kapturecrm.com\nCo-authored-by: Damien Maillard damien.maillard@dailymotion.com\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Fix act bundle size regression (#19832)\nAdds back the TestUtils.act implementation that I had removed\nin #19745. This version of act is implemented in "userspace" (i.e. not\nthe reconciler), so it doesn\'t add to the production bundle size.\nI had removed this in #19745 in favor of the act exported by the\nreconciler because I thought we would remove support for act in\nproduction in the impending major release. (It currently warns.)\nHowever, we\'ve since decided to continue supporting act in prod for\nnow, so that it doesn\'t block people from upgrading to v17. We\'ll drop\nsupport in a future major release.\nSo, to avoid bloating the production bundle size, we need to move the\npublic version of act back to "userspace", like it was before.\nThis doesn\'t negate the main goal of #19745, though, which was to\ndecouple the public version(s) of act from the internal one that we\nuse to test React itself.', 'Moved resetChildLanes into complete work (#19836)\nThis allows us to inline a few checks that are specific to a certain tag-type.', 'chore(docs): Removed outdated comment about fb.me link  (#19830)', 'Remove passive intervention flag (#19849)', 'Revert "DevTools: Improve browser extension iframe support (#19827)" (#19852)\nThis reverts commit ec39a5e9017dfa2c3311bc2b74a4d535ea2630a2.', 'Enable source maps for DevTools production builds (#19773)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', "Improve DevTools editing interface (#19774)\n\nImprove DevTools editing interface\n\nThis commit adds the ability to rename or delete keys in the props/state/hooks/context editor and adds tests to cover this functionality. DevTools will degrade gracefully for older versions of React that do not inject the new reconciler rename or delete methods.\nSpecifically, this commit includes the following changes:\n* Adds unit tests (for modern and legacy renderers) to cover overriding props, renaming keys, and deleting keys.\n* Refactor backend override methods to reduce redundant Bridge/Agent listeners and methods.\n* Inject new (DEV-only) methods from reconciler into DevTools to rename and delete paths.\n* Refactor 'inspected element' UI components to improve readability.\n* Improve auto-size input to better mimic Chrome's Style editor panel. (See this Code Sandbox for a proof of concept.)\nIt also contains the following code cleanup:\n* Additional unit tests have been added for modifying values as well as renaming or deleting paths.\n* Four new DEV-only methods have been added to the reconciler to be injected into the DevTools hook: overrideHookStateDeletePath, overrideHookStateRenamePath, overridePropsDeletePath, and overridePropsRenamePath. (DevTools will degrade gracefully for older renderers without these methods.)\n* I also took this as an opportunity to refactor some of the existing code in a few places:\n  * Rather than the backend implementing separate methods for editing props, state, hooks, and context– there are now three methods: deletePath, renamePath, and overrideValueAtPath that accept a type argument to differentiate between props, state, context, or hooks.\n  * The various UI components for the DevTools frontend have been refactored to remove some unnecessary repetition.\nThis commit also adds temporary support for override* commands with mismatched backend/frontend versions:\n* Add message forwarding for older backend methods (overrideContext, overrideHookState, overrideProps, and overrideState) to the new overrideValueAtPath method. This was done in both the frontend Bridge (for newer frontends passing messages to older embedded backends) and in the backend Agent (for older frontends passing messages to newer backends). We do this because React Native embeds the React DevTools backend, but cannot control which version of the frontend users use.\n* Additional unit tests have been added as well to cover the older frontend to newer backend case. Our DevTools test infra does not make it easy to write tests for the other way around.", "Use Passive flag to schedule onPostCommit (#19862)\nInstead of calling onPostCommit in a separate phase, we can fire\nthem during the same traversal as the rest of the passive effects.\nThis works because effects are executed depth-first. So by the time we\nreach a Profiler node, we'll have already executed all the effects in\nits subtree.", 'Use single quotes in getComponentName return (#19873)', "Don't trigger lazy in DEV during element creation (#19871)", 'DevTools: Drop IE 11 support (#19875)\nDevTools shared Babel config previously supported IE 11 to target Hermes (for the standalone backend that gets embedded within React Native apps). This targeting resulted in less optimal code for other DevTools targets though which did not need to support IE 11. This PR updates the shared config to remove IE 11 support by default, and only enables it for the standalone backend target.', 'Enable building of DevTools and scheduling profiler in CI (#19691)\nRe-enables building of main DevTools in CI and add new CI target for building the scheduling profiler.', 'Improved DevTools context test harness (#19878)', 'Add scheduling profiler deployment CI job (#19874)\n\nAdd vercel to scheduling profiler dev deps\nAdd vercel.json\nAdd CD job\nAdd CD setup instructions\n', 'Release script: allow preparing RC from npm', "Consolidate commit phase hook functions (#19864)\nThere were a few pairs of commit phase functions that were almost\nidentical except for one detail. I've refactored them a bit to\nconsolidate their implementations:\n\nLifted error handling logic when mounting a fiber's passive hook\neffects to surround the entire list, instead of surrounding each effect.\nLifted profiler duration tracking to surround the entire list.\n\nIn both cases, this matches the corresponding code for the layout phase.\nThe naming is still a bit of a mess but I'm not too concerned because\nmy next step is to refactor each commit sub-phase (layout, mutation)\nso that we can store values on the JS stack. So the existing function\nboundaries are about to change, anyway.", "Don't call onCommit et al if there are no effects (#19863)\n\nDon't call onCommit et al if there are no effects\n\nChecks subtreeFlags before scheduling an effect on the Profiler.\n\nFix failing Profiler tests\n\nThe change to conditionally call Profiler commit hooks only if updates were scheduled broke a few of the Profiler tests. I've fixed the tests by either:\n* Adding a no-op passive effect into the subtree or\n* Converting onPostCommit to onCommit\nWhen possible, I opted to add the no-op passive effect to the tests since that that hook is called later (during passive phase) so the test is a little broader. In a few cases, this required adding awkward act() wrappers so I opted to go with onCommit instead.\nCo-authored-by: Brian Vaughn bvaughn@fb.com", "Don't consumer iterators while inspecting (#19831)\nCo-authored-by: Brian Vaughn bvaughn@fb.com", "Profiler onRender only called when we do work (#19885)\nIf we didn't perform any work in the subtree, skip calling onRender.", 'Fixed broken Profiler test (#19894)', 'DevTools: Improve browser extension iframe support (#19854)\nCo-authored-by: Joel DSouza joel.dsouza@kapturecrm.com\nCo-authored-by: Damien Maillard damien.maillard@dailymotion.com\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'offscreen double invoke effects (#19523)\nThis PR double invokes effects in DEV mode.\nWe are thinking about unmounting layout and/or passive effects for a hidden tree. To understand potential issues with this, we want to double invoke effects. This PR changes the behavior in DEV when an effect runs from create() to create() -> destroy() -> create(). The effect cleanup function will still be called before the effect runs in both dev and prod. (Note: This change is purely for research for now as it is likely to break real code.)\nNote: The change is fully behind a flag and does not affect any of the code on npm.', 'Separate SyntheticEvent constructors to prevent deopts (#19907)\n\n\nRemove arguments from hot path\n\n\nMake SyntheticEvent subtypes monomorphic\n\n\nMaybe fix Flow?\n\n', "Remove Array.from() from hot path (#19908)\n\n\nRemove Array.from() from hot path\n\n\nFix build\n\n\nDon't declare block variables inside loops", 'Create Synthetic Events Lazily (#19909)', 'Improve wording for inline DevTools README.md (#19897)', "Remove disableSchedulerTimeoutInWorkLoop flag (#19902)\nWe found and mitigated the root cause of the regression that led us to\ntemporarily revert this change. So now I'm un-reverting it.", "Refactor layout effect methods (#19895)\nCommit phase durations (layout and passive) are stored on the nearest (ancestor) Profiler and bubble up during the commit phase. This bubbling used to be implemented by traversing the return path each time we finished working on a Profiler to find the next nearest Profiler.\nThis commit removes that traversal. Instead, we maintain a stack of nearest Profiler ancestor while recursing the tree. This stack is maintained in the work loop (since that's where the recursive functions are) and so bubbling of durations has also been moved from commit-work to the work loop.\nThis PR also refactors the methods used to recurse and apply effects in preparation for the new Offscreen component type.", 'Fix missing context to componentDidMount() when double-invoking lifecycles (#19935)', 'Suspense for CPU-bound trees (#19936)\nAdds a new prop to the Suspense component type,\nunstable_expectedLoadTime. The presence of this prop indicates that\nthe content is computationally expensive to render.\nDuring the initial mount, React will skip over expensive trees by\nrendering a placeholder — just like we do with trees that are waiting\nfor data to resolve. That will help unblock the initial skeleton for the\nnew screen. Then we will continue rendering in the next commit.\nFor now, while we experiment with the API internally, any number passed\nto unstable_expectedLoadTime will be treated as "computationally\nexpensive", no matter how large or small. So it\'s basically a boolean.\nThe reason it\'s a number is that, in the future, we may try to be clever\nwith this additional information. For example, SuspenseList could use\nit as part of its heuristic to determine whether to keep rendering\nadditional rows.\nBackground\nMuch of our early messaging and research into Suspense focused on its\nability to throttle the appearance of placeholder UIs. Our theory was\nthat, on a fast network, if everything loads quickly, excessive\nplaceholders will contribute to a janky user experience. This was backed\nup by user research and has held up in practice.\nHowever, our original demos made an even stronger assertion: not only is\nit preferable to throttle successive loading states, but up to a certain\nthreshold, it’s also preferable to remain on the previous screen; or in\nother words, to delay the transition.\nThis strategy has produced mixed results. We’ve found it works well for\ncertain transitions, but not for all them. When performing a full page\ntransition, showing an initial skeleton as soon as possible is crucial\nto making the transition feel snappy. You still want throttle the nested\nloading states as they pop in, but you need to show something on the new\nroute. Remaining on the previous screen can make the app feel\nunresponsive.\nThat’s not to say that delaying the previous screen always leads to a\nbad user experience. Especially if you can guarantee that the delay is\nsmall enough that the user won’t notice it. This threshold is a called a\nJust Noticeable Difference (JND). If we can stay under the JND, then\nit’s worth skipping the first placeholder to reduce overall thrash.\nDelays that are larger than the JND have some use cases, too. The main\none we’ve found is to refresh existing data, where it’s often preferable\nto keep stale content on screen while the new data loads in the\nbackground. It’s also useful as a fallback strategy if something\nsuspends unexpectedly, to avoid hiding parts of the UI that are already\nvisible.\nWe’re still in the process of optimizing our heuristics for the most\ncommon patterns. In general, though, we are trending toward being more\naggressive about prioritizing the initial skeleton.\nFor example, Suspense is usually thought of as a feature for displaying\nplaceholders when the UI is missing data — that is, when rendering is\nbound by pending IO.\nBut it turns out that the same principles apply to CPU-bound\ntransitions, too. It’s worth deferring a tree that’s slow to render if\ndoing so unblocks the rest of the transition — regardless of whether\nit’s slow because of missing data or because of expensive CPU work.\nWe already take advantage of this idea in a few places, such as\nhydration. Instead of hydrating server-rendered UI in a single pass,\nReact splits it into chunks. It can do this because the initial HTML\nacts as its own placeholder. React can defer hydrating a chunk of UI as\nlong as it wants until the user interacts it. The boundary we use to\nsplit the UI into chunks is the same one we use for IO-bound subtrees:\nthe  component.\nSuspenseList does something similar. When streaming in a list of items,\nit will occasionally stop to commit whatever items have already\nfinished, before continuing where it left off. It does this by showing a\nplaceholder for the remaining items, again using the same \ncomponent API, even if the item is CPU-bound.\nUnresolved questions\nThere is a concern that showing a placeholder without also loading new\ndata could be disorienting. Users are trained to believe that a\nplaceholder signals fresh content. So there are still some questions\nwe’ll need to resolve.', 'Temporarily disable Profiler commit hooks flag (#19900)\nTemporarily disable Profiler commit hooks flag to verify it does not cause a regression.', 'DevTools: Remove ReactJS.org version check "cheat" (#19939)\nRemove dead code as facebook.github.io/react always redirects to reactjs.org, which has prod version of react. so removing the "cheat" (#19939)', 'Fix(React DevTools) - prevent phishing attacks (#19934)\nWhen a link opens a URL in a new tab with target="_blank", it is very simple for the opened page to change the location of the original page because the JavaScript variable window.opener is not null and thus "window.opener.location can be set by the opened page. This exposes the user to very simple phishing attacks.', 'Fix codestyle for typeof comparison (#19928)', 'Debug tracing tests for CPU bound suspense (#19943)', 'Remove unnecessary error overriding in (#19949)', 'Revert "DevTools: Improve browser extension iframe support (#19854)" (#19959)\nThis reverts commit a99bf5c5f4840c558f5e5923fcbe4ad6cb8ade98.', "Removed skip-error-boundaries modifications from old fork (#19961)\nTechnically this change is unnecessary, since the feature is controlled by a flag, but since we decided not to ship this in v17– I'm going to remove it for now entirely.", 'Revert "Temporarily disable Profiler commit hooks flag (#19900)" (#19960)', 'Treat  tag as a normal HTML tag. (#19951)\n tag has been supported by Chrome since Chrome 62.0.\nRemove workarounds which were in place to avoid friction with\nversions before Chrome 62.\nSigned-off-by: Shivam Sandbhor shivam.sandbhor@gmail.com', 'updating the informations needed when adding a root node to a tree in react-devtools overview doc (#19979)\nCo-authored-by: Idriss AITHAFID Idriss.AITHAFID@um6p.ma', '[Flight] Add Runtime Errors for Non-serializable Values (#19980)\n\n\nError on encoding non-serializable props\n\n\nAdd DEV time warnings to enforce that values are plain objects\n\n', 'Enable eager listeners statically (#19983)', "[Flight] Don't warn for key, but error for ref (#19986)\n\n\nImprove error message by expanding the object in question\n\n\nDon't warn for key/ref getters\n\n\nError if refs are passed in server components or to client components\n\n", 'Update outdated links and fix two broken links  (#19985)\n\n\nupdate all facebook.github.io links\n\n\nfacebookincubator links : update some outdated links and fix two other broken links where they are actually the latest updated ones\n\n', 'Updated OVERVIEW.md to the new infos required when adding a new leaf node to the tree (#19981)\nCo-authored-by: Idriss AITHAFID Idriss.AITHAFID@um6p.ma', '[DevTools] Add DevTools forked Feature flags (#18994)\nAlso resolve an uncaught error in extension build (#18843).\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Fix bad null check in DevTools highlight code (#20010)', 'handled a missing suspense fiber when suspense is filtered on the profiler (#19987)\nCo-authored-by: Brian Vaughn bvaughn@fb.com', 'Deprecate old test script commands (#19893)\n\n\nDeprecate old test script commands\n\n\nUpdate PR template test script\n\n\nAdd test-stable and test-www-classic\n\n\nUpdate circle test names\n\n\nRename test-www-classic to test-classic\n\n\nMissed some job renames\n\n\nMissed some more job renames\n\n', 'DevTools always overrides the dispatcher when shallow rendering (#20011)\nThis is done so that any effects scheduled by the shallow render are thrown away.\nUnlike the code this was forked from (in ReactComponentStackFrame) DevTools should override the dispatcher even when DevTools is compiled in production mode, because the app itself may be in development mode and log errors/warnings.', 'Fixture: Legacy JSX Runtimes (#20012)\n\n\nFixture: Legacy JSX Runtimes\n\n\nAdd more comments\n\n', 'Check in old major packages', 'Copy JSX runtime bundles from the fixture', 'Bump versions', '.eslintignore', 'Remove CI check', 'Bump versions in build artifacts', 'Fix missing package']v16.13.0 React

Warn when a string ref is used in a manner that's not amenable to a future codemod (@lunaruan in #17864)
Deprecate React.createFactory() (@trueadm in #17878)

React DOM

Warn when changes in style may cause an unexpected collision (@sophiebits in #14181, #18002)
Warn when a function component is updated during another component's render phase (@acdlite in #17099)
Deprecate unstable_createPortal (@trueadm in #17880)
Fix onMouseEnter being fired on disabled buttons (@AlfredoGJ in #17675)
Call shouldComponentUpdate twice when developing in StrictMode (@bvaughn in #17942)
Add version property to ReactDOM (@ealush in #15780)
Don't call toString() of dangerouslySetInnerHTML (@sebmarkbage in #17773)
Show component stacks in more warnings (@gaearon in #17922, #17586)

Concurrent Mode (Experimental)

Warn for problematic usages of ReactDOM.createRoot() (@trueadm in #17937)
Remove ReactDOM.createRoot() callback params and added warnings on usage (@bvaughn in #17916)
Don't group Idle/Offscreen work with other work (@sebmarkbage in #17456)
Adjust SuspenseList CPU bound heuristic (@sebmarkbage in #17455)
Add missing event plugin priorities (@trueadm in #17914)
Fix isPending only being true when transitioning from inside an input event (@acdlite in #17382)
Fix React.memo components dropping updates when interrupted by a higher priority update (@acdlite in #18091) 
Don't warn when suspending at the wrong priority (@gaearon in #17971)
Fix a bug with rebasing updates (@acdlite and @sebmarkbage in #17560, #17510, #17483, #17480)

Artifacts

react: https://unpkg.com/react@16.13.0/umd/
react-art: https://unpkg.com/react-art@16.13.0/umd/
react-dom: https://unpkg.com/react-dom@16.13.0/umd/
react-is: https://unpkg.com/react-is@16.13.0/umd/
react-test-renderer: https://unpkg.com/react-test-renderer@16.13.0/umd/
scheduler: https://unpkg.com/scheduler@0.19.0/umd/
 ['[react-interactions] Refine custom active element blur logic (#17354)', '[react-interactions] Follow up active element blur logic (#17364)', '[react-interactions] Enable event system before dispatching blur (#17365)', '[Fast Refresh] Fix for intentional unmounts after an error (#17368)', 'update version numbers for 16.12', 'Changelog for 16.12', '[react-interactions] Fix unatached fiber bug (#17371)', '[react-interactions] FocusWithin beforeblur propagation fix (#17375)', "[Flight] Move Flight DOM to a Webpack Specific Package (#17372)\n\nMove Flight DOM to Webpack Specific Packagee\n\nWe'll have Webpack specific coupling so we need to ensure that it can be\nversioned separately from various Webpack versions. We'll also have builds\nfor other bundlers in the future.\n\n\nMove to peerDep\n\n\nMove DOM Flight Tests\n\n\nMerge ReactFlightIntegration into ReactFlightDOM\n\n\nThis was an integration test. We can add to it.\n\nFix fixture paths\n", 'Add Webpack as devDependency (#17379)\nThis is now used by the Flight package so it needs to be installed as a\npeer.', "[Bugfix] Pending state is always user-blocking (#17382)\nFixes a bug where isPending is only set to true if startTransition\nis called from inside an input event. That's usually the case, but\nnot always.\nNow it works regardless of where you call it.", '[eslint] Check forwardRef callbacks (#17255)\n\n\n[eslint] Check forwardRef callbacks (#17220)\n\n\n[eslint] Make tests more realistic (#17220)\n\n\n[eslint] Check anonymous callback of React.memo for rules-of-hooks (#17220)\n\n\n[eslint] Add tests for callbacks not known to be components (#17220)\n\n\n[eslint] Correct comments and add another test (#17220)\n\n', 'Forgot to mark test as experimental (#17391)', 'Update Fixtures to use new APIs (#17380)\nAlso renamed unstable-async to concurrent', '[react-interactions] Rename Flare listeners prop to DEPRECATED_flareListeners (#17394)', '[react-interactions] Refine virtual click detection for FF+JAWS/NVDA (#17422)', '[react-interactions] Fix memory leak in event responder system (#17421)', '[Fresh] Fix an infinite loop in an edge case (#17414)\n\n\n[Fresh] Fix an infinite loop in an edge case\n\n\nMake it work in IE11\n\n', 'Update release script URL (#17428)\nCircleCI API endpoint changed', '[Fresh] Make all errors recoverable (#17438)\n\n\n[Fresh] Detect root updates more reliably\n\n\n[Fresh] Use WeakMap for root elements\n\n\n[Fresh] Make initial failures recoverable too\n\n\nFix DevTools check\n\n\nFix wrong flow type\n\n', 'Remove dependency on local git checkout from build process (#17475)\n\n\nRemove dependency on local git checkout from build process\n\n\nUpdated Webpack dependencies to account for recent changes to deps for Flight\n\n', 'DevTools version bump 4.2.0 -> 4.2.1', 'Change DevTools hook warning message (#17478)', 'Fixed changelog formatting #17481 (#17487)', 'Adjust SuspenseList CPU bound heuristic (#17455)\n\nAdjust SuspenseList CPU bound heuristic\n\nIn SuspenseList we switch to rendering fallbacks (or stop rendering further\nrows in the case of tail="collapsed/hidden") if it takes more than 500ms\nto render the list. The limit of 500ms is similar to the train model and\ndesigned to be short enough to be in the not noticeable range.\nThis works well if each row is small because we time the 500ms range well.\nHowever, if we have a few large rows then we\'re likely to exceed the limit\nby a lot. E.g. two 480ms rows hits almost a second instead of 500ms.\nThis PR adjusts the heuristic to instead compute whether something has\nexpired based on the render time of the last row. I.e. if we think rendering\none more row would exceed the timeout, then we don\'t attempt.\nThis still works well for small rows and bails earlier for large rows.\nThe expiration is still based on the start of the list rather than the\nstart of the render. It should probably be based on the start of the render\nbut that\'s a bigger change and needs some thought.\n\nComment\n', "Remove case that only exists for createBatch (#17506)\nThe comment says this is only needed for createBatch().commit() which\ndoesn't exist anymore.", "Use fewer global variables in Hooks (#17480)\n\n\nWe don't need the global state for this\n\n\nMove componentUpdateQueue and sideEffectTag out of global state\n\n\nMove firstWorkInProgressHook off global state\n\n\nMove remainingExpirationTime off global state\n\n\nReset fiber to its current state if it throws\n\n\nMove rerender error check to avoid global state\n\n\nThis means that it's harder to find it since it's not in the dispatch\nfunction's stack but we can add a DEV only one for that if we really\nneed it. Alternatively, we can check it in against the renderUpdates queue.\n\n\nMove next___Hook out of global state\n\n\nAssert that currentlyRenderingFiber is always set\n\n\nWhen accessed, this should always be set. This could enforced by storing\nthis on the dispatcher for example.\n\nAdd another test just to be safe\n", "Don't group Idle/Offscreen work with other work (#17456)\nWhen we suspend we always try a lower level but we shouldn't try offscreen.", '[react-interactions] Move Flare event registration to commit phase (#17518)', 'Revert Rerender Error Check (#17519)\n\n\nAdd failing test\n\n\nRevert "Move rerender error check to avoid global state"\n\n\nThis reverts commit 3e77742d8c4e64b89f816c0b1ce0bc156f8c5f61.', 'fix: make serializable data  in react-devtools (#17233)\n\n\nfix: make serializable data for bridge in react-devtools\n\n\nfix: add bigint data type in hydration\n\n\nrefactor: remove console.log\n\n\ntest: update unit tests for bigint in react-devtools\n\n', '[react-interactions] Upgrade passive event listeners to active listeners (#17513)', "Replace wrap-warning-with-env-check with an eslint plugin (#17540)\n\n\nReplace Babel plugin with an ESLint plugin\n\n\nFix ESLint rule violations\n\n\nMove shared conditions higher\n\n\nTest formatting nits\n\n\nTweak ESLint rule\n\n\nBugfix: inside else branch, 'if' tests are not satisfactory\n\n\nUse a stricter check for exactly if (DEV)\n\n\nThis makes it easier to see what's going on and matches dominant style in the codebase.\n\nFix remaining files after stricter check\n", "[react-interactions] fix Press/Tap behavior for virtual middle clicks (#17554)\nTools like BetterTouchTool for macOS trigger middle-clicks with a 'buttons'\nvalue that doesn't correspond to the middle-mouse button. To account for this\nwe also inspect the value of 'button'.\nClose #17367", '[react-interactions] Remove Focus/FocusWithin root event types (#17555)', "Refactor Update Queues to Fix Rebasing Bug\nFixes a bug related to rebasing updates. Once an update has committed,\nit should never un-commit, even if interrupted by a higher priority\nupdate. The fix includes a refactor of how update queues work.\nThis commit is a combination of two PRs:\n\n\n17483 by @sebmarkbage refactors the hook update queue\n\n\n17510 by @acdlite refactors the class and root update queue\n\n\nLanding one without the other would cause state updates to sometimes be\ninconsistent across components, so I've combined them into a single\ncommit in case they need to be reverted.\nCo-authored-by: Sebastian Markbåge sema@fb.com\nCo-authored-by: Andrew Clark git@andrewclark.io", "Revert Update Queue Refactor\nReverts b617db3d966f678eb0b4aac6d96f7967b37a9e91.\nFound some bugs when attempting to land in www. Reverting to fix master.\nI'll land again after the change successfully land downstream.", 'Show component location for selected element in bottom/right of props panel (#17567)\n\n\nShow component location info for selected element in bottom/right of props panel\n\n\nMoved RegExp declaration into function basedon PR feedback\n\n', "Initialize update queue object on mount (#17560)\n\nRefactor Update Queues to Fix Rebasing Bug\n\nFixes a bug related to rebasing updates. Once an update has committed,\nit should never un-commit, even if interrupted by a higher priority\nupdate. The fix includes a refactor of how update queues work.\nThis commit is a combination of two PRs:\n\n\n17483 by @sebmarkbage refactors the hook update queue\n\n\n17510 by @acdlite refactors the class and root update queue\n\n\nLanding one without the other would cause state updates to sometimes be\ninconsistent across components, so I've combined them into a single\ncommit in case they need to be reverted.\nCo-authored-by: Sebastian Markbåge sema@fb.com\nCo-authored-by: Andrew Clark git@andrewclark.io\n\nInitialize update queue object on mount\n\nInstead of lazily initializing update queue objects on the first update,\nclass and host root queues are created on mount. This simplifies the\nlogic for appending new updates and matches what we do for hooks.", 'Remove the condition argument from warning() (#17568)\n\n\nprep for codemod\n\n\nprep warnings\n\n\nrename lint rules\n\n\ncodemod for ifs\n\n\nshim www functions\n\n\nHandle more cases in the transform\n\n\nThanks De Morgan\n\n\nRun the codemod\n\n\nDelete the transform\n\n\nFix up confusing conditions manually\n\n\nFix up www shims to match expected API\n\n\nAlso check for low-pri warning in the lint rule\n\n', '[react-interactions] Remove responder root event types + revert commit phase change (#17577)', 'Improved inspected element props with inline previews (#17579)\n\nImproved inspected element props with inline previews\n\nThis mimics the inline preview shown by the brower console and dramatically improves the UX when inspecting deep values. I also updated tests to add more coverage for this new functionality.\n\n\nCleaned up the DataView vs typed array check\n\n\nAdded early bailouts to DevTools when generating preview strings for iterables/objects/arrays, to avoid doing unnecessary work\n\n', "[react-interactions] Mock touchend events should use empty array for 'touches' (#17589)\nThe 'touches' value should be an empty array rather than 'null'", 'Add component stacks to (almost) all warnings (#17586)', '[react-events] Remove lastNativeEvent in favor of SystemFlags (#17585)', "Remove renderPhaseUpdates Map (#17484)\n\n\nRender phase updates can now be extracted from the pending queue\n\n\nUse a custom dispatcher for the second render pass\n\n\nDiscard render phase updates if component throws\n\n\nWhen aborting a render, we also need to throw out render phase updates.\nRemove the updates from the queues so they do not persist to the next\nrender. We already did a single pass through the whole list of hooks, so\nwe know that any pending updates must have been dispatched during the\nrender phase. The ones that were dispatched before we started rendering\nwere already transferred to the current hook's queue.", 'Use matching test command for equivalence tests (#17604)', "Use console directly instead of warning() modules (#17599)\n\n\nReplace all warning/lowPriWarning with console calls\n\n\nReplace console.warn/error with a custom wrapper at build time\n\n\nFail the build for console.error/warn() where we can't read the stack\n\n", 'Rename toWarnDev -> toErrorDev, toLowPriorityWarnDev -> toWarnDev (#17605)\n\n\nRename toWarnDev -> toErrorDev in tests\n\n\nRename toWarnDev matcher implementation to toErrorDev\n\n\nRename toLowPriorityWarnDev -> toWarnDev in tests and implementation\n\n', 'Revert "Remove renderPhaseUpdates Map (#17484)" (#17623)\nThis reverts commit 8a347ed024159a5307172ea633a4561160f4a6b9.', 'Fix release script to ignore empty package folders', 'Fix test_build_devtools CI job to run test-build-devtools (#17631)\n\nSkip abandoned project folders in Jest config\n\nThis fixes a problem that occurs after renaming a package.\n\n\nFix test_build_devtools to run test-build-devtools\n\n\nExclude console.error plugin for DevTools packages\n\n\nUse correct release channel for DevTools tests\n\n\nThis should fix the createRoot error.\n\n\nFix TZ dependent test\n\n\nChange DT job dependencies\n\n', 'Additional test infra changes for toErrorDev rename (#17632)', '[Fast Refresh] Support injecting runtime after renderer executes (#17633)', 'react-refresh@0.7.1', 'Fix missing stacks in WWW warnings (#17638)', 'Move DevTools CI job to experimental workflow (#17640)', 'Use zero-fill right shift instead of Math.floor (#17616)\nFor positive numbers, binary displacement is better.', 'Improved selection and toggling for props/hooks/state (#17588)\n\nEnable nested values to be expanded/collapsed by clicking on values as well as keys.\nEnable keys and values to be selectable (for copy-pasting purposes)\n', 'fix(dev-tools): fix show correct displayName with forwardRef in Dev Tools (#17613)\n\nfix(dev-tools): fix show correct displayName with forwardRef in Dev Tools\n\nallow set displayName after React.forwardRef(),\nmakesure Dev Tools show displayName as same as getWrappedName in shared/getComponentName.js\n\n\nRemoved a little unnecessary/redundant code.\n\n\nFixed lint error (removed unused var)\n\n', 'Build FB RN targets only in experimental mode (#17641)', 'Added more forwardRef test cases for DevTools (#17642)', '[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)', 'Add a regression test for switching from Fragment to a component (#17647)\n\n\nAdd a regression test for switching from Fragment to a component\n\n\nAdd a few more tests\n\n', "Favor fallthrough switch instead of case statements for work tags (#17648)\n\nFavor fallthrough switch instead of case statements for work tags\n\nCurrently we're inconsistently handling tags that are only relevant\nfor certain flags. We should throw if the tag is not part of the built\nfeature flags. This should also mean that the case statements can be\neliminated.\nWe can achieve this effect by putting the invariant outside of the switch\nand always early return in the switch. We already do this in beginWork.\nThis PR makes this consistent in other places.\n\nFail if fundamental/scope tags are discovered without the flag on\n", 'Make HostComponent inexact (#17412)', '[Flight] Chunks API (#17398)\n\n\nAdd feature flags\n\n\nAdd Chunk type and constructor\n\n\nWire up Chunk support in the reconciler\n\n\nUpdate reconciler to reconcile Chunks against the render method\n\n\nThis allows the query and args to be updated.\n\n\nDrop the ref. Chunks cannot have refs anyway.\n\n\nAdd Chunk checks in more missing cases\n\n\nRename secondArg\n\n\nAdd test and fix lazy chunks\n\n\nNot really a supported use case but for consistency I guess.\n\nFix fragment test\n', 'DevTools context menu (#17608)\n\n\nAdded rudimentary context menu hook and menu UI\n\n\nAdded backend support for copying a value at a specific path for the inspected element\n\n\nAdded backend support for storing a value (at a specified path) as a global variable\n\n\nAdded special casing to enable copying undefined/unserializable values to the clipboard\n\n\nAdded copy and store-as-global context menu options to selected element props panel\n\n\nStore global variables separately, with auto-incremented name (like browsers do)\n\n\nAdded tests for new copy and store-as-global backend functions\n\n\nFixed some ownerDocument/contentWindow edge cases\n\n\nRefactored context menu to support dynamic options\n\n\nUsed this mechanism to add a conditional menu option for inspecting the current value (if it\'s a function)\n\nRenamed "safeSerialize" to "serializeToString" and added inline comment\n', 'Updated DevTools changelog', 'DevTools build script enhancements (#17653)\n\n\nUpdated DevTools local development instructions to mention experimental build step\n\n\nAdded a command to download latest experimental release (for DevTools)\n\n\nUpdated build instructions for clarity\n\n\nAdded build-for-devtools package alias\n\n', "[react-interactions] Event testing library improvements (#17614)\nIntroduces a state machine around pointer events to produce more accurate mock\ntouch events. This allows multi-touch unit tests to be written entirely in\nterms of mock pointer interactions, while producing the expected\n'changedTouches', 'targetTouches', and 'touches' fields for mock touch events.", '[react-interactions] Remove batchedUpdates from responder lifecycles (#17659)', 'Create packages/dom-event-testing-library (#17660)\nMoves the unit testing library for events into the packages directory so it can more easily be used in tests for other react packages, and mirrored internally to help with testing of event hooks we prototype in www.', '[ESLint] Allow partial matches for custom Effect Hooks (#17663)', 'Null stateNode after unmount (#17666)', '[react-interactions] Rename test + fix master (#17679)', 'Disable "copy to clipboard" and "go to definition" context menu options for Firefox addon (#17668)', 'Add unit tests to dom-event-testing-library (#17680)\nUnit tests for the simple event mocks', 'DevTools v4.2.1 -> 4.3.0', '[react-dom] Refactor event priority handling to its own module (#17678)', 'Add Shift+Enter to go to previous search result (#17005)', 'Fix comments typos (#17550)\n\n\nFix comments typos\n\n\nFix comments typos\n\n\nFix more typos\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Add tooltip to interaction name in DevTools Profiler sidebar (#17689)', '[DevTools] Display RegExp values in props/state (#17690)\nPreviously, when props/state contained a regexp, it was shown as an\nempty object. This commit adds regexps as values in need of special\nrehydration (like Symbols or TypedArrays), and display them as a user\nmight expect.\nCo-authored-by: Zirak zirakertan@gmail.com', "Added missing Flow type coverage to DevTools context menu (#17733)\nThe  param should probably be a generic type, but I'm not sure how to satisfy Flow with the current top-level  Map. At least this adds basic coverage (which was missing before, oops).", 'Make DevTools check document.contentType before injecting (#17739)\nIt should only inject the global hook into HTML documents. This will avoid breaking syntax highlighting for e.g. XML documents.', 'Devtools renable copy attr context menu for firefox (#17740)\n\n\nUse exportFunction() to share clipboard copy with JS running in document/page context.\n\n\nRemove no-longer-used option to disable copy operation.\n\n', 'Fix for the standalone devtools not responding to clicks. (#17584)', 'Fix various typos (#17724)', 'Bump handlebars from 4.1.2 to 4.5.3 (#17732)\nBumps handlebars from 4.1.2 to 4.5.3.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com', 'Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/fiber-debugger (#17727)\nBumps handlebars from 4.0.6 to 4.5.3.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com', 'Bump handlebars from 4.0.10 to 4.5.3 in /fixtures/attribute-behavior (#17728)\nBumps handlebars from 4.0.10 to 4.5.3.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com', 'Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/dom (#17730)\nBumps handlebars from 4.0.6 to 4.5.3.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com', 'Bump handlebars from 4.0.11 to 4.5.3 in /fixtures/expiration (#17729)\nBumps handlebars from 4.0.11 to 4.5.3.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com', 'Updated DevTools pending CHANGELOG', 'Build and store DevTools artifacts in Circle CI (#17746)', 'Added missing guard to DevTools for Objects with null proto (#17757)\nThis prevents a runtime error from occurring when these objects are inspected.', 'Fixed CircleCI DevTools build artifact tar internal structure (#17758)', "DevTools Profiler commit selector wraps around (#17760)\nI used to disable the <- and -> buttons when you reached the beginning or end of the profiler data. This can be kind of annoying though when you just want to get to the last commit, and I don't think there's a good reason to enforce it anyway, so I backed that change out. The buttons now wrap around at the beginning or end of the list.", "Partial fix DevTools Profiler ''Could not find node…'' error (#17759)\nThe Profiler stores:\n\nA snapshot of the React tree when profiling started\nThe operations array for each commit\nProfiling metadata (e.g. durations, what changed, etc) for each commit\n\nIt uses this information (snapshot + operations diff) to reconstruct the state of the application for a given commit as it's viewed in the Profiler UI. Because of this, it's very important that the operations and metadata arrays align. If they don't align, the profiler will be unable to correctly reconstruct the tree, and it will likely throw errors (like 'Could not find node…')\n16446 tracks a long-standing bug where these two arrays get misaligned. I am still not entirely sure what causes this bug, but with PR #17253, I exacerbated things by introducing another potential way for it to happen. This PR addresses the regression at least (and adds test coverage for it).\nI will follow up this afternoon on the original #16446 issue. I think I may have a lead on what's happening at least, if not exactly an idea of how to reproduce it.", 'DevTools: Replaced unsafe hasOwnProperty() calls (#17768)\nDevTools previously called  in several places with user-defined values. This could lead to runtime errors if those values had an overriden  attribute. This commit replaces those callse with  instead.\nNew test cases have been added.', "HostText needs to copy over from current if it is unchanged in persistent  mode (#17538)\nstateNode is not one of the fields that gets copied over by createWorkInProgress.\nThis is bad for persistent mode since it's not the same instance.\nIn HostComponent we happened to always end up transferring the current stateNode when we bail.\nHowever, we didn't do this for HostText.", 'DevTools 4.3.0 -> 4.4.0', 'Scope dev tools wildcard styles within DevTools CSS class', 'Remove toString of dangerouslySetInnerHTML (#17773)\nAs far as I can tell, the toString call was added here:\nhttps://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887\nIt was never really needed. Subsequently when we added Trusted Types,\nthis needed to be changed to a special call but we really should just\nalways let it pass through.', "DevTools Profiler: Improve how empty commits are filtered (#17771)\nPreviously, DevTools filtered empty commits on the backend, while profiling, through the use of a bailout heuristic that React currently happens to use. This approach was brittle and may have exacerbated the long-standing Profiler bug #16446.\nThis PR removes that heuristic and adds as a post-processing filtering pass instead. This removes the coupling between DevTools and a React internal implementation detail that may change.\nI believe DevTools has two choices of criteria for this filtering:\n* Filter commits that have no actual duration metadata.\n* Filter commits that have no recorded operations (no mutations to the tree, no changed tree base durations).\nI chose the first option, filtering by commits that have no reported\xa0metadata. It will miss an edge case, e.g. , but we would have nothing meaningful to show in the Profiler for those cases anyway. (This particular edge case is why one of the snapshots changed with this commit.)\nThe second option, filtering by recorded operations, could potentially miss a more important edge case: where a component did render, but its  didn't change. (In that event, there would be no operations to send.)", 'DevTools: Improve function props display for inspected elements (#17789)', 'Renamed "backend.js" to "react_devtools_backend.js" (#17790)', 'Updated DevTools CHANGELOG to add pending release details', "Merge branch 'scope-devtools-styles' of https://github.com/GasimGasimzada/react into GasimGasimzada-scope-devtools-styles", 'Fixed box-sizing problem in test shell', 'Fixed padding problem in standalone shell', "Merge branch 'GasimGasimzada-scope-devtools-styles'", 'Updated DevTools CHANGELOG to add pending release details', '[react-interactions] Fix Hover issues with portals (#17765)', 'Renamed "ReactDOM-fb" imports to "ReactDOM" in www shims (#17797)\n\n\nRenamed "ReactDOM-fb" imports to "ReactDOM" in www shims\n\n\nRemoved ReactDOMComponentTree_DO_NOT_USE.js\n\n', 'Revert "Revert "Dispatch commands to both UIManagers from both renderers (#17211)" (#17232)" (#17799)\n\nRevert "Revert "Dispatch commands to both UIManagers from both renderers (#17211)" (#17232)"\n\nThis reverts commit d0fc0ba0a688950b8ab24a89f14888a19efa2444.\n\nClean up another DEV warning check\n', "Remove special casing of toString values when enableTrustedTypesIntegration (#17774)\n\nRemove toString of dangerouslySetInnerHTML\n\nAs far as I can tell, the toString call was added here:\nhttps://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887\nIt was never really needed. Subsequently when we added Trusted Types,\nthis needed to be changed to a special call but we really should just\nalways let it pass through.\n\nRemove special casing of toString values when enableTrustedTypesIntegration\n\nAs far as I can tell, we only toString in user space because of IE8/9.\nWe don't really support IE8/9 anymore and by the time this flag is on,\nwe should be able to deprecate it.\nUnless this is also an issue in IE11. I haven't tested yet.", 'Bump Prettier (#17811)\n\n\nBump Prettier\n\n\nReformat\n\n\nUse non-deprecated option\n\n', 'Update Flow to 0.84 (#17805)\n\n\nUpdate Flow to 0.84\n\n\nFix violations\n\n\nUse inexact object syntax in files from fbsource\n\n\nFix warning extraction to use a modern parser\n\n\nCodemod inexact objects to new syntax\n\n\nTighten types that can be exact\n\n\nRevert unintentional formatting changes from codemod\n\n', 'Add configuration for the "Stale" GitHub App (#17806)\nConfiguration for the bot that marks and closes stale issues and pull requests.\nhttps://probot.github.io/apps/stale/', "Add better test coverage for hooks in DevTools Profiler's change-detection (#17816)", 'Update create-react-app note for eslint-plugin-react-hooks (#16982)\neslint-plugin-react-hooks was added in react-scripts 3.0.0', 'Create SECURITY.md (#15784)\nAdds SECURITY.md as mentioned in #15722.', 'Fix message typo in printOperationsArray function (#17039)', 'Update ReactSuspenseList-test.internal.js (#17034)\nTypo', 'Add GitHub issue templates (#17815)', 'Create ReactFabric.stopSurface and use that for bridgeless mode binding (#16164)', 'Fix issue template for questions (#17817)', '[Fresh] Fix edge case with early function call (#17824)', 'react-refresh@0.7.2', 'Fix typo in TestCase description (#17077)', 'Update babel-eslint and eslint packages (#17829)', 'Update typescript package and jest preprocessor (#17839)', 'Re-enabled DevTools context menu option in Firefox to inspect function prop source (#17838)', 'Add support for Node v13 for development (#17837)', "Removed 'reactInternal' reference in DevTools overlay highlighter (#17841)", '[react-interactions] Add DO_NOT_USE to Scope methods (#17835)', 'Fix DevTools Flow error for key-sort function (#17849)', '[react-interactions] Remove deprecated Scope APIs + update Focus components/docs (#17859)', 'Remove ReactInstanceMap_DO_NOT_USE shim (#17861)', 'Allow debug-test commands to run on Windows (#17122)\nFix #17121', "Remove renderPhaseUpdates Map (#17625)\n\nRemove renderPhaseUpdates Map\n\nFollow up to #17484, which was reverted due to a bug found in www.\n\nFailing test: Dropped updates\n\nWhen resetting render phase updates after a throw, we should only clear\nthe pending queue of hooks that were already processed.\n\nFix non-render-phase updates being dropped\n\nDetects if a queue has been processed by whether the hook was cloned.\nIf we change the implementation to an array instead of a list, we'll\nneed some other mechanism to determine whether the hook was processed.\n\nRegression test: startTransition in render phase\n\nuseTransition uses the state hook as part of its implementation, so we\nneed to fork it in the dispatcher used for re-renders, too.", 'Add feature flag around React.createFactory (#17873)', 'Add disable  children flag (#17874)', "Remove FB specific build (#17875)\nI moved unstable_SuspenseList internally. We don't need the FB build.\nI plan on also removing the ReactDOM fb specific entry. We shouldn't add\nany more FB specific internals nor APIs. If they're experimental they\nshould go onto the experimental builds to avoid too many permutations.", 'Add React.createFactory() deprecation warning (#17878)', 'Add unstable_renderSubtreeIntoContainer and unstable_createPortal feature flags (#17880)', 'Remove dynamic GKs for selective/train (#17888)\nThere are shipped/shipping.', 'Update to flow-bin@0.89 (#17842)', "add warning when owner and self are different for string refs (#17864)\nWhen owner and self are different for string refs, we can't easily convert them to callback refs. This PR adds a warning for string refs when owner and self are different to tell users to manually update these refs.", 'chore: update to latest release of babel (#17897)', 'Update various monorepo dependencies (#17901)', 'Remove unused modules from legacy event responders (#17907)', 'Update to flow 0.97 (#17892)', 'Upgrade to jest 25 (#17896)\nThe changes to the test code relate to changes in JSDOM that come with Jest 25:\n\nSeveral JSDOM workarounds are no longer needed.\nSeveral tests made assertions to match incorrect JSDOM behavior (e.g. setAttribute calls) that JSDOM has now patched to match browsers.\nhttps://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh\nJSDOM no longer triggers default actions when dispatching click events.\nhttps://codesandbox.io/s/beautiful-cdn-ugn8f\nJSDOM fixed (jsdom/jsdom#2700) a bug so that calling focus() on an already focused element does not dispatch a FocusEvent.\nJSDOM now supports passive events.\nJSDOM has improved support for custom CSS properties.\nBut requires jsdom/cssstyle#112 to land to support webkit prefixed properties.\n', 'Removed Root API callback params and added warnings (#17916)', '[Concurrent Mode] Add missing event plugin priorities (#17914)', 'Add semver dependency explicitly to DevTools (#17919)', 'Fix Jest diff call (#17921)', 'Show first component stack in context warning (#17922)\n\n\nUpdate tests\n\n\nShow first component stack in context warning\n\n\nCo-authored-by: Dominic Gannaway trueadm@users.noreply.github.com', 'Use next tag for canary releases in the doc (#17923)', 'Add a note about expiring OTP codes', "Bugfix: Expiring a partially completed tree (#17926)\n\nFailing test: Expiring a partially completed tree\n\nWe should not throw out a partially completed tree if it expires in the\nmiddle of rendering. We should finish the rest of the tree without\nyielding, then finish any remaining expired levels in a single batch.\n\nCheck if there's a partial tree before restarting\n\nIf a partial render expires, we should stay in the concurrent path\n(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the\nbehavior remains the same.\nWe will only revert to the sync path (performSyncWorkOnRoot) when\nstarting on a new level.\nThis approach prevents partially completed concurrent work from\nbeing discarded.\n\nNew test: retry after error during expired render\n", 'Add ReactDOM.unstable_renderSubtreeIntoContainer warning flag (#17936)', 'Ensure createRoot warning parity with ReactDOM.render (#17937)', 'Fix Event Replaying in Flare by Eagerly Adding Active Listeners  (#17933)\n\n\nAdd test of Event Replaying using Flare\n\n\nFix Event Replaying in Flare by Eagerly Adding Active Listeners\n\n\nThis effectively reverts part of https://github.com/facebook/react/pull/17513', 'Remove root.unmount() callback from DevTools code (#17939)', 'Revert "Bugfix: Expiring a partially completed tree (#17926)" (#17941)\nThis reverts commit 01974a867c543fca6ebe9f4e612dcc3bb8f80528.\n\nFailing test: Expiring a partially completed tree\n\nWe should not throw out a partially completed tree if it expires in the\nmiddle of rendering. We should finish the rest of the tree without\nyielding, then finish any remaining expired levels in a single batch.\n\nCheck if there\'s a partial tree before restarting\n\nIf a partial render expires, we should stay in the concurrent path\n(performConcurrentWorkOnRoot); we\'ll stop yielding, but the rest of the\nbehavior remains the same.\nWe will only revert to the sync path (performSyncWorkOnRoot) when\nstarting on a new level.\nThis approach prevents partially completed concurrent work from\nbeing discarded.\n\nNew test: retry after error during expired render\n', 'StrictMode should call sCU twice in DEV (#17942)', 'Update google-closure-compiler (#17902)', 'fix: check bigint in serializeToString and change it to string (#17931)', 'Typo fix (#17946)', 'Add DevTools tests for copying complex values (#17948)', 'Fix Cannot read property \'sub\' of undefined when navigating to plain-text pages (#17848)\nUpdate various parts of DevTools to account for the fact that the global "hook" might be undefined if DevTools didn\'t inject it (due to the page\'s contentType) it (due to the page\'s contentType)', 'Add beforeRemoveInstance method to ReactNoop (#17959)', 'Add version property to ReactDOM (#15780)', "Flush useEffect clean up functions in the passive effects phase (#17925)\n\nFlush useEffect clean up functions in the passive effects phase\n\nThis is a change in behavior that may cause broken product code, so it has been added behind a killswitch (deferPassiveEffectCleanupDuringUnmount)\n\nAvoid scheduling unnecessary callbacks for cleanup effects\n\nUpdated enqueuePendingPassiveEffectDestroyFn() to check rootDoesHavePassiveEffects before scheduling a new callback. This way we'll only schedule (at most) one.\n\n\nUpdated newly added test for added clarity.\n\n\nCleaned up hooks effect tags\n\n\nWe previously used separate Mount and Unmount tags to track hooks work for each phase (snapshot, mutation, layout, and passive). This was somewhat complicated to trace through and there were man tag types we never even used (e.g. UnmountLayout, MountMutation, UnmountSnapshot). In addition to this, it left passive and layout hooks looking the same after renders without changed dependencies, which meant we were unable to reliably defer passive effect destroy functions until after the commit phase.\nThis commit reduces the effect tag types to only include Layout and Passive and differentiates between work and no-work with an HasEffect flag.\n\n\nDisabled deferred passive effects flushing in OSS builds for now\n\n\nSplit up unmount and mount effects list traversal\n\n", "Simplify Continuous Hydration Targets (#17952)\n\nSimplify Continuous Hydration Targets\n\nLet's use a constant priority for this. This helps us avoid restarting\na render when switching targets and simplifies the model.\nThe downside is that now we're not down-prioritizing the previous hover\ntarget. However, we think that's ok because it'll only do one level too\nmuch and then stop.\n\nAdd test meant to show why it's tricky to merge both hydration levels\n\nHaving both levels co-exist works. However, if we deprioritize hydration\nusing a single level, we might deprioritize the wrong thing.\nThis adds a test that catches it if we ever try a naive deprioritization\nin the future.\nIt also tests that we don't down-prioritize if we're changing the hover\nin the middle of doing continuous priority work.", "make testing builds for React/ReactDOM (#17915)\nThis PR introduces adds react/testing and react-dom/testing.\n- changes infra to generate these builds\n- exports act on ReactDOM in these testing builds\n- uses the new test builds in fixtures/dom\nIn the next PR -\n\nI'll use the new builds for all our own tests\nI'll replace usages of TestUtils.act with ReactDOM.act.\n", 'Add dom fixture for autofilled form state (#17951)', 'Fix onMouseEnter is fired on disabled buttons (#17675)', 'Remove Suspense priority warning (#17971)\n\n\nRemove Suspense priority warning\n\n\nFix tests\n\n', 'apply changes on editablevalue on blur feature implemented (#17062)\n\n\napply changes on editablevalue on blur feature implemented\n\n\nRemoved "Undo" button and unnecessary event.preventDefault()\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', "[Mock Scheduler] Mimic browser's advanceTime (#17967)\nThe mock Scheduler that we use in our tests has its own fake timer\nimplementation. The unstable_advanceTime method advances the timeline.\nCurrently, a call to unstable_advanceTime will also flush any pending\nexpired work. But that's not how it works in the browser: when a timer\nfires, the corresponding task is added to the Scheduler queue. However,\nwe will still wait until the next message event before flushing it.\nThis commit changes unstable_advanceTime to more closely resemble the\nbrowser behavior, by removing the automatic flushing of expired work.\n```js\n// Before this commit\nScheduler.unstable_advanceTime(ms);\n// Equivalent behavior after this commit\nScheduler.unstable_advanceTime(ms);\nScheduler.unstable_flushExpired();\n```\nThe general principle is to prefer separate APIs for scheduling tasks\nand flushing them.\nThis change does not affect any public APIs. unstable_advanceTime is\nonly used by our own test suite. It is not used by act.\nHowever, we may need to update tests in www, like Relay's.", 'Fix release scripts (#17972)\nCircle CI seems to have changed the reported artifact path which broke our scripts.', 'Formatting fix (Prettier) to build script', 'fix sizebot - point correctly to circleci artifact (#17975)\nsimilar to #17972, this should fix sizebot not reporting stats right now', 'Updated release script documentation and command names (#17929)\n\n\nUpdated release script documentation and command names\n\n\nUpdate scripts/release/README.md\n\n\nCo-Authored-By: Sunil Pai threepointone@oculus.com\n\nUpdated README\n\nCo-authored-by: Sunil Pai threepointone@oculus.com', 'Use babel parser rather than Babylon in extract errors (#17988)', 'Add feature flag for removing children Map support (#17990)', 'Fix Flow type for React Native (#17992)', 'dataForRoots.set duplicate removal (#17993)\ndataForRoots.set duplicate removal', 'Move React Map child check to behind flags or DEV (#17995)', 'Ignore react-native-web in Flow checks (#17999)', 'Added $FlowFixMe to DevTools shell for module we Flow-ignore (#18001)', 'Re-enable shorthand CSS property collision warning (#18002)\nOriginally added in https://github.com/facebook/react/pull/14181; disabled in https://github.com/facebook/react/pull/14245. Intention was to enable it in React 16.7 but we forgot.', 'fix: typo in test (#18005)', "Update ReactFiberExpirationTime.js (#17825)\nreplaced 'add' with 'subtract'", 'Tweak comment wording (#18007)\n\nRevert "Update ReactFiberExpirationTime.js (#17825)"\n\nThis reverts commit b63cb6f6cf18bbe28eb0a443c64fd9b87d79616d.\n\nReword\n', 'Stop exposing some internals on FB build (#18011)', 'Refactor commitPlacement to recursively insert nodes (#17996)', 'Change build from babylon to babel (#18015)', 'Remove legacy www config from Rollup build (#18016)', 'Flush all passive destroy fns before calling create fns (#17947)\n\nFlush all passive destroy fns before calling create fns\n\nPreviously we only flushed destroy functions for a single fiber.\nThe reason this is important is that interleaving destroy/create effects between sibling components might cause components to interfere with each other (e.g. a destroy function in one component may unintentionally override a ref value set by a create function in another component).\nThis PR builds on top of the recently added deferPassiveEffectCleanupDuringUnmount kill switch to separate passive effects flushing into two separate phases (similar to layout effects).\n\nChange passive effect flushing to use arrays instead of lists\n\nThis change offers a small advantage over the way we did things previous: it continues invoking destroy functions even after a previous one errored.', 'Do not export passiveBrowserEventsSupported from Focus responder (#18022)\nRemove code', 'Remove getIsHydrating (#18019)', 'remove "Unreleased" section from CHANGELOG (#18027)\nThis section is empty, and imo isn\'t really helpful in React\'s changelog. I\'m honestly not sure why this is even here? Figured I\'d start a discussion with a PR, or we can remove it right now.', "Add Modern WWW build (#18028)\n\n\nBuild both stable and experimental WWW builds\n\n\nFlip already experimental WWW flags to true\n\n\nRemove FB-specific internals from modern FB builds\n\n\nWe think we're not going to need these.\n\n\nDisable classic features in modern WWW builds\n\n\nDisable legacy ReactDOM API for modern WWW build\n\n\nDon’t include user timing in prod\n\n\nFix bad copy paste and add missing flags to test renderer\n\n\nAdd testing WWW feature flag file\n\n\nWe need it because WWW has a different meaning of experimental now.", 'Add Auto Import to Babel Plugin  (#16626)\nThis babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don\'t plan to own this code in the future, and we will upstream this to Babel at some point once we\'ve proven out the concept.\nAs per the RFC to simplify element creation, we want to add the ability to auto import "react\' directly from the babel plugin. This commit updates the babel plugin with two options:\n1.) importSource: The React module to import from. Defaults to react.\n2.) autoImport: The type of import. Defaults to none.\n- none: Does not import React. JSX compiles to React.jsx etc.\n- namespace: import * as _react from "react";. JSX compiles to _react.jsx etc.\n- default: import _default from "react"; JSX compiles to _default.jsx etc.\n- namedExports: import {jsx as _jsx} from "react"; JSX compiles to _jsx etc.\n- require: var _react = _interopRequireWildcard(require("react"));. jSX compiles to _react.jsx etc.\nnamespace, default, and namedExports can only be used when sourceType: module and require can only be used when sourceType: script.\nIt also adds two pragmas (jsxAutoImport and jsxImportSource) that allow users to specify autoImport and importSource in the docblock.', '[Native] Delete NativeComponent and NativeMethodsMixin (#18036)\n\n\n[Native] Delete NativeComponent and NativeMethodsMixin\n\n\nRemove more files\n\n', 'Refactor DOM plugin system to single module (#18025)', 'Update eslint rule exhaustive deps to use new suggestions feature (#17385)\nThis closes #16313', 'eslint-plugin-react-hooks@2.4.0', 'Fix Prettier', 'Further cleanup of plugin event system (#18056)', 'React developer tools extension for Microsoft Edge  (#18041)\n\nPort Chrome extension to Microsoft Edge\n', 'Updated Yarn lockfile', 'Update issue templates to directly link to relevant sources (#18039)\nGitHub supports linking to off-site sources for certain types of issue.', '[react-interactions] Ensure onBeforeBlur fires for hideInstance (#18064)', '[www] Disable Scheduler timeout w/ dynamic flag (#18069)\nBefore attempting to land an expiration times refactor, I want to see\nif this particular change will impact performance (either positively\nor negatively). I will test this with a GK.', 'Split recent passive effects changes into 2 flags (#18030)\n\nSplit recent passive effects changes into 2 flags\n\nSeparate flags can now be used to opt passive effects into:\n1) Deferring destroy functions on unmount to subsequent passive effects flush\n2) Running all destroy functions (for all fibers) before create functions\nThis allows us to test the less risky feature (2) separately from the more risky one.\n\ndeferPassiveEffectCleanupDuringUnmount is ignored unless runAllPassiveEffectDestroysBeforeCreates is true\n', 'Added missing feature flag', 'Re-throw errors thrown by the renderer at the root in the complete phase (#18029)\n\nRe-throw errors thrown by the renderer at the root\n\nReact treats errors thrown at the root as a fatal because there\'s no\nparent component that can capture it. (This is distinct from an\n"uncaught error" that isn\'t wrapped in an error boundary, because in\nthat case we can fall back to deleting the whole tree -- not great, but\nat least the error is contained to a single root, and React is left in a\nconsistent state.)\nIt turns out we didn\'t have a test case for this path. The only way it\ncan happen is if the renderer\'s host config throws. We had similar test\ncases for host components, but none for the host root.\nThis adds a new test case and fixes a bug where React would keep\nretrying the root because the workInProgress pointer was not advanced\nto the next fiber. (Which in this case is null, since it\'s the root.)\nWe could consider in the future trying to gracefully exit from certain\ntypes of root errors without leaving React in an inconsistent state. For\nexample, we should be able to gracefully exit from errors thrown in the\nbegin phase. For now, I\'m treating it like an internal invariant and\nimmediately exiting.\n\nAdd comment\n', 'Add modern event system flag + rename legacy plugin module (#18073)', "add no-restricted-globals to eslint config (#18076)\nOur current lint config assumes a browser environment, which means it won't warn you if you use a variable like name without declaring it earlier. This imports the same list as the one used by create-react-app, and enables it against our codebase.", 'Remove Flare bundles from build (#18077)', 'Add fiber summary tooltip to devtools profiling (#18048)\n\n\nAdd tooltip component\n\n\nSeparate logic of ProfilerWhatChanged to a component\n\n\nAdd hovered Fiber info tooltip component\n\n\nAdd flame graph chart tooltip\n\n\nAdd commit ranked list tooltip\n\n\nFix flow issues\n\n\nMinor improvement in filter\n\n\nFix flickering issue\n\n\nResolved issues on useCallbacks and mouse event listeners\n\n\nFix lints\n\n\nRemove unnecessary useCallback\n\n', "Don't build some packages for WWW (#18078)", 'Add container to event listener signature (#18075)', 'Add guard around FocusWithin responder root events (#18080)', 'Profiler tooltip tweaks (#18082)\n\n\nMoved Profiler views into Profiler folder\n\n\nTweaked Profiler tooltip CSS styles\n\n\nTweaked Tooltip positioning code\n\n', '[Native] Migrate focus/blur to call TextInputState with the host component (#18068)', 'Warn for update on different component in render (#17099)\nThis warning already exists for class components, but not for functions.\nIt does not apply to render phase updates to the same component, which\nhave special semantics that we do support.', 'Further pre-requisite changes to plugin event system (#18083)', 'Feature Flag for React.jsx` "spreading a key to jsx" warning (#18074)\nAdds a feature flag for when React.jsx warns you about spreading a key into jsx. It\'s false for all builds, except as a dynamic flag for fb/www.\nI also included the component name in the warning.', "Update Rollup version to 1.19.4 and fix breaking changes (#15037)\n\n\nupdate rollup versioni\n\n\nignore Rollup warnings for known warning codes\n\n\nadd lecacy support from elas7\n\n\nrollup 1.5\n\n\nupd to ver 1.6.0\n\n\ndon't throw error\n\n\nuse return instead of throw error\n\n\nupd code in comment\n\n\nfix getters test\n\n\nrollup 1.7\n\n\nrollup 1.7.3\n\n\nremove comments\n\n\nuse rollup 1.7.4\n\n\nupdate yarn.lock for new rollup version\n\n\nrollup version 1.9.0\n\n\nrollback to version 1.7.4\n\n\nadd globalThis to eslintrc.umd\n\n\nrollup 1.9.0\n\n\nupd rollup plugin versions to satisfied latest versions\n\n\nadd result.json update\n\n\nrollup 1.9.3\n\n\nrollup 1.10.0\n\n\nver 1.10.1\n\n\nrollup 1.11.3\n\n\nrollup ver 1.12.3\n\n\nrollup 1.13.1\n\n\nrollup 1.14.6\n\n\nrollup 1.15.6\n\n\nrollup 1.16.2\n\n\nupd tests\n\n\nprettier\n\n\nRollup 1.16.3\n\n\nupd\n\n\nshould throw when finding getters with a different syntax from the ones generated by Rollup\n\n\nadd more one test\n\n\nrollup-plugin-prettier updated changed stuff, revert them\n\n\ndon't upd all the Rollup plugins\n\n\nrollup-plugin-babel 3.0.7\n\n\nupd rollup plugin versions\n\n\nupd rollup-plugin-commonjs\n\n\nbracket spacing\n\n\nrollup 1.16.6\n\n\nrollup 1.16.7\n\n\nrename test description\n\n\nrollup 1.18.0\n\n\nuse externalLiveBindings: false\n\n\nrollup 1.19.3\n\n\nremove remove-getters\n\n\nsimplify CIRCULAR_DEPENDENCY warning\n\n\nsimplify if logic in sizes-plugin\n\n\nrollup 1.19.4\n\n\nupdate output for small optimizations\n\n\nremove globalThis\n\n\nremove results.json file\n\n\nre-add globalThis\n\n", "Bugfix: memo drops lower pri updates on bail out (#18091)\nFixes a bug where lower priority updates on a components wrapped with\nmemo are sometimes left dangling in the queue without ever being\nprocessed, if they are preceded by a higher priority bailout.\nCause\nThe pending update priority field is cleared at the beginning of\nbeginWork. If there is remaining work at a lower priority level, it's\nexpected that it will be accumulated on the work-in-progress fiber\nduring the begin phase.\nThere's an exception where this assumption doesn't hold:\nSimpleMemoComponent contains a bailout that occurs before the\ncomponent is evaluated and the update queues are processed, which means\nwe don't accumulate the next priority level. When we complete the fiber,\nthe work loop is left to believe that there's no remaining work.\nMitigation\nSince this only happens in a single case, a late bailout in\nSimpleMemoComponent, I've mitigated the bug in that code path by\nrestoring the original update priority from the current fiber.\nThis same case does not apply to MemoComponent, because MemoComponent\nfibers do not contain hooks or update queues; rather, they wrap around\nan inner fiber that may contain those. However, I've added a test case\nfor MemoComponent to protect against a possible future regression.\nPossible next steps\nWe should consider moving the update priority assignment in beginWork\nout of the common path and into each branch, to avoid similar bugs in\nthe future.", 'Remove unused arguments in the reconciler (#18092)', 'Rename Chunks API to Blocks (#18086)\nSounds like this is the name we\'re going with. This also helps us\ndistinguish it from other "chunking" implementation details.', "Change string refs in function component message (#18031)\nThis should refer to string refs specifically. The forwardRef part doesn't\nmake any sense in this case. I think this was just an oversight.", "Don't warn about unmounted updates if pending passive unmount (#18096)\nI recently landed a change to the timing of passive effect cleanup functions during unmount (see #17925). This change defers flushing of passive effects for unmounted components until later (whenever we next flush pending passive effects).\nSince this change increases the likelihood of a (not actionable) state update warning for unmounted components, I've suppressed that warning for Fibers that have scheduled passive effect unmounts pending.", 'Codemod to import * as React from "react"; (#18102)\n\nimport * as React from "react";\n\nThis is the correct way to import React from an ES module since the ES\nmodule will not have a default export. Only named exports.\n\nimport * as ReactDOM from "react-dom"\n', "Code mod import * as React from 'react' in react-window (#18105)", "runAllPassiveEffectDestroysBeforeCreates's feature flag description typo fixed (#18115)", "Move type DOMContainer to HostConfig (#18112)\nExports from ReactDOM represents React's public API. This include types\nexported by React. At some point we'll start building Flow types from\nthese files.\nThe duplicate name between DOMContainer and Container seems confusing too\nsince it was used in the same files even though they're the same.", 'Cross platform support to run yarn test:edge for Microsoft Edge dev tools extension (#18108)\n\n\nTest automation for edge dev tools extension\n\n\nLinter changes\n\n\nLoad extension automatically.\n\n\nFixed path in test command\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', '[eslint-plugin-react-hooks] Fix cyclic caching for loops containing a… (#16853)\n\n\n[eslint-plugin-react-hooks] Fix cyclic caching for loops containing a condition\n\n\n[eslint-plugin-react-hooks] prettier write\n\n\n[eslint-plugin-react-hooks] Fix set for tests\n\n\nUpdate packages/eslint-plugin-react-hooks/src/RulesOfHooks.js\n\n\nCo-Authored-By: Luke Kang kidkkr@icloud.com\nCo-authored-by: Luke Kang kidkkr@icloud.com', '[react-interactions] Ensure blur to window disengages press (#18125)', 'Add @nolint to FB bundle headers (#18126)', 'Export React as Named Exports instead of CommonJS (#18106)\n\nAdd options for forked entry points\n\nWe currently fork .fb.js entry points. This adds a few more options.\n.modern.fb.js - experimental FB builds\n.classic.fb.js - stable FB builds\n.fb.js - if no other FB build, use this for FB builds\n.experimental.js - experimental builds\n.stable.js - stable builds\n.js - used if no other override exists\nThis will be used to have different ES exports for different builds.\n\n\nSwitch React to named exports\n\n\nExport named exports from the export point itself\n\n\nWe need to re-export the Flow exported types so we can use them in our code.\nWe don\'t want to use the Flow types from upstream since it doesn\'t have the non-public APIs that we have.\nThis should be able to use export * but I don\'t know why it doesn\'t work.\nThis actually enables Flow typing of React which was just "any" before.\nThis exposed some Flow errors that needs fixing.\n\nCreate forks for the react entrypoint\n\nNone of our builds expose all exports and they all differ in at least one\nway, so we need four forks.\n\nSet esModule flag to false\n\nWe don\'t want to emit the esModule compatibility flag on our CommonJS\noutput. For now we treat our named exports as if they\'re CommonJS.\nThis is a potentially breaking change for scheduler (but all those apis\nare unstable), react-is and use-subscription. However, it seems unlikely\nthat anyone would rely on this since these only have named exports.\n\n\nRemove unused Feature Flags\n\n\nLet jest observe the stable fork for stable tests\n\n\nThis lets it do the negative test by ensuring that the right tests fail.\nHowever, this in turn will make other tests that are not behind\nEXPERIMENTAL fail. So I need to do that next.\n\nPut all tests that depend on exports behind EXPERIMENTAL\n\nSince there\'s no way to override the exports using feature flags\nin .intern.js anymore we can\'t use these APIs in stable.\nThe tradeoff here is that we can either enable the negative tests on\n"stable" that means experimental are expected to fail, or we can disable\ntests on stable. This is unfortunate since some of these APIs now run on\na "stable" config at FB instead of the experimental.\n\nSwitch ReactDOM to named exports\n\nSame strategy as React.\nI moved the ReactDOMFB runtime injection to classic.fb.js\nSince we only fork the entrypoint, the /testing entrypoint needs to\nbe forked too to re-export the same things plus act. This is a bit\nunfortunate. If it becomes a pattern we can consider forking in the\nmodule resolution deeply.\nfix flow\n\nFix ReactDOM Flow Types\n\nNow that ReactDOM is Flow type checked we need to fix up its types.\n\n\nConfigure jest to use stable entry for ReactDOM in non-experimental\n\n\nRemove additional FeatureFlags that are no longer needed\n\n\nThese are only flagging the exports and no implementation details so we\ncan control them fully through the export overrides.', 'Fixed a spelling mistake in a comment. (#18119)', "Remove /testing entry point from 'react' package (#18137)\nWe're not actually building this entry point. I can't think of a reason\nwe'd need to fork the isomorphic one. We don't really fork it for\nanything since it's so generic to work with all renderers.\nSince /profiling doesn't have this, it might confuse the story if we made\npeople alias two things for testing but not profiling.", "remove OSS testing builds (#18138)\nThe testing build versions of react-dom are included in the builds right now, but we're not ready to share them yet. This PR removes them for now (back soon for the next release)", "Update ReactDebugHooks to handle composite hooks (#18130)\nThe useState hook has always composed the useReducer hook. 1:1 composition like this is fine.\nBut some more recent hooks (e.g. useTransition, useDeferredValue) compose multiple hooks internally. This breaks react-debug-tools because it causes off-by-N errors when the debug tools re-renders the function.\nFor example, if a component were to use the useTransition and useMemo hooks, the normal hooks dispatcher would create a list of first state, then callback, then memo hooks, but the debug tools package would expect a list of transition then memo. This can break user code and cause runtime errors in both the react-debug-tools package and in product code.\nThis PR fixes the currently broken hooks by updating debug tools to be aware of the composite hooks (how many times it should call nextHook essentially) and adds tests to make sure they don't get out of sync again. We'll need to add similar tests for future composite hooks (like useMutableSource #18000).", '[DevTools] Added resize support for Components panel. (#18046)\n\n\nfeat: DevTools - Added Resize Support.\n\n\nfeat: Prettier.\n\n\nfeat: DevTools - Added debug comments.\n\n\nfeat: DevTools - Removed Use Memo.\n\n\nfeat: DevTools - Added types.\n\n\nfeat: DevTools - Extracted values to constants.\n\n\nfeat: DevTools - Removed useCallback.\n\n\nfeat: DevTools - Finished refactoring.\n\n\nfeat: DevTools - Merging fixup.\n\n\nfeat: DevTools - Prettier fix.\n\n\nfeat: DevTools - Extracted code from Components fil.\n\n\nfeat: DevTools - Fixed orientation change issue.\n\n\nfeat: DevTools - Added flow types for reducer and refs.\n\n\nfeat: DevTools - Fixed orientation change on initial load.\n\n\nUpdate packages/react-devtools-shared/src/devtools/views/Components/ComponentsResizer.js\n\n\nRemoved unused orientationRef\n\n\nFix Flow ref issue\n\n\nCo-authored-by: Brian Vaughn brian.david.vaughn@gmail.com', 'Rearranged some DevTools Components code', 'Changelog for 16.13.0 (#18124)\n\n\nChangelog for 16.13.0\n\n\nUpdate CHANGELOG.md\n\n', 'update version numbers for 16.13 (#18143)\nalso includes a bugfix when downloading error codes from circleci.']v16.12.0 React DOM

Fix passive effects (useEffect) not being fired in a multi-root app. (@acdlite in #17347)

React Is

Fix lazy and memo types considered elements instead of components (@bvaughn in #17278)

Artifacts
• react: https://unpkg.com/react@16.12.0/umd/
• react-art: https://unpkg.com/react-art@16.12.0/umd/
• react-dom: https://unpkg.com/react-dom@16.12.0/umd/
• react-is: https://unpkg.com/react-is@16.12.0/umd/
• react-test-renderer: https://unpkg.com/react-test-renderer@16.12.0/umd/
• scheduler: https://unpkg.com/scheduler@0.18.0/umd/ ['Update local package versions for 16.10 release', 'Changelog for 16.11.0', 'docs: Fixed a typo in readme.md (#17119)', 'Rename createSyncRoot to createBlockingRoot (#17165)\n\n\nRename createSyncRoot to createBlockingRoot\n\n\nFix up\n\n', 'Typo fix in comment (#17111)', 'Update .mailmap (#17177)', 'Add guard to handle modified React elements with non-string keys (#17164)', '[react-interactions] Ensure props on scope query function is always object (#17212)', 'Don\'t treat the last row in hidden as deleted if already mounted (#17206)\nAlready mounted rows that resuspend may be considered as part of a tail\nif they\'re at the end. However, for purposes of the tail="..." option\nthey don\'t get deleted. We deal with that in cutOffTailIfNeeded.\nHowever, if they\'re also the first to suspend in the "hidden" case, we have\na special case that deletes the actual rendered row. This needs to consider\nif that row was already mounted or things go wrong.', 'Add Experimental Flight Infrastructure (#16398)\n\n\nAdd Flight Build and Unify HostFormat Config between Flight and Fizz\n\n\nAdd basic resolution of models\n\n\nAdd basic Flight fixture\n\n\nDemonstrates the streaming protocol.\n\n\nRename to flight-server to distinguish from the client parts\n\n\nAdd Flight Client package and entry point\n\n\nFix fixture\n\n', 'Dispatch commands to both UIManagers from both renderers (#17211)\n\n\nDispatch commands to both UIManagers from both renderers\n\n\nMerge test files\n\n', 'Only call Profiler onRender when a descendant had work (#17223)', 'Add findHostInstance_deprecated to the React Native Renderer (#17224)', 'Rename findHostInstance_deprecated to findHostInstance_DEPRECATED (#17228)', 'Revert "Dispatch commands to both UIManagers from both renderers (#17211)" (#17232)\nThis reverts commit 8eee0eb01ce3ead0f51ade75fdcf062a748d57a7.', 'DevTools standalone shell changes: (#17213)\n\n\nDevTools standalone shell changes:\n\n\nUpdate React Native connection wording\n\n\nTweak styles slightly\n\n\nTweaked standalone DevTools error warning text\n\n', 'Add CodeSandbox CI Config (#17175)\n\n\nAdd CodeSandbox CI Config\n\n\nAdd default sandbox to build\n\n\nMake build more efficient and add scheduler\n\n\nForce build\n\n\nAdd scheduler image\n\n\nAdd scheduler/tracing to the build\n\n\nForce another build\n\n', "Codemod tests to it.experimental (#17243)\nit.experimental marks that a test only works in Experimental builds.\nIt also asserts that a test does not work in the stable builds. The\nmain benefit is that we're less likely to accidentally expose an\nexperimental API before we intend. It also forces us to un- mark an\nexperimental test once it become stable.", "[Scheduler] Delete old rAF implementation (#17252)\nWe've been using the message loop version for a while. Time to delete.", "Don't show empty (no work) commits in Profiler (#17253)", "[Flight] Add Client Infrastructure (#17234)\n\n\nChange demo to server\n\n\nExpose client in package.json\n\n\nReorganize tests\n\n\nWe don't want unit tests but instead test how both server and clients work\ntogether. So this merges server/client test files.\n\n\nFill in the client implementation a bit\n\n\nUse new client in fixture\n\n\nAdd Promise/Uint8Array to lint rule\n\n\nI'll probably end up deleting these deps later but they're here for now.", "[Flight] Move around the Server side a bit (#17251)\n\n\nRename ReactFlightStreamer -> ReactFlightServer\n\n\nUnify Browser/Node stream tests into one file and use the client reader\n\n\nDefer to the actual ReactDOM for HTML rendering for now\n\n\nThis will need to use a variant of Fizz to do inline SSR in Flight.\nHowever, I don't want to build the whole impl right now but also don't\nwant to exclude the use case yet. So I outsource it to the existing\nrenderer. Ofc, this doesn't work with Suspense atm.", 'Avoid bundling in ponyfill for Object.assign in use-subscription package (#17259)', 'Types: findHostInstance_DEPRECATED returns React.ElementRef> (#17265)\n\n\nTypes: findHostInstance_DEPRECATED returns React.ElementRef>\n\n\nPrettier\n\n', '[react-interactions] Add handleSimulateChildBlur upon DOM node removal (#17225)\n\n[react-interactions] Add handleSimulateChildBlur upon DOM node removal\n', "Remove debugRenderPhaseSideEffects flag (#17270)\nThere are two similar flags, debugRenderPhaseSideEffects and\ndebugRenderPhaseSideEffectsForStrictMode. The strict mode one is the\nonly one that is actually used. I think originally the theory is that\nwe would one day turn it on for all components, even outside strict\nmode. But what we'll do instead is migrate everyone to strict mode.\nThe only place debugRenderPhaseSideEffects was being used was in\nan internal test file. I rewrote those tests to use public APIs.", 'Fix react-is memo and lazy type checks (#17278)', 'Fix devtools displaying Anonymous for memo of ref-forwarding components (#17274)\n\n\n[react-is] return correct typeOf value of forwardRef\n\n\n[react-devtools-shared] use correct displayName of memo(forwardRef(Component))\n\n\n[react-devtools-shared] add resolveFiberType and resolve fiber type of memo recursively\n\n\nResolving the fiber type of memo recursively before passing it to getDisplayName\nwill prevent it from displaying "Anonymous" as displayName for components\nwrapped with both memo and forwardRef: memo(forwardRef(Component))\n\nrework resolveFiberType\n', '[react-interactions] Prevent duplicate onPress firing for keyboard Enter (#17266)\n\n\n[react-interactions] Prevent duplicate onPress firing for keyboard Enter\n\n\naddress feedback\n\n', 'DevTools cleanup (#17283)\n\nAdd a Store test for memo, lazy, and forwardRef components\nRemove dead code for React.lazy\nUpdate DT tests to include HOC badge names in the serialized store\n', '[Flight] Better compat with http.createServer (#17289)', '[Flight] Basic Streaming Suspense Support (#17285)\n\n\nReturn whether to keep flowing in Host config\n\n\nEmit basic chunk based streaming in the Flight server\n\n\nWhen something suspends a new chunk is created.\n\nAdd reentrancy check\n\nThe WHATWG API is designed to be pulled recursively.\nWe should refactor to favor that approach.\n\n\nBasic streaming Suspense support on the client\n\n\nAdd basic suspense in example\n\n\nAdd comment describing the protocol that the server generates\n\n', '[react-interactions] Add optional searchNodes to Scope.queryAllNodes (#17293)', '[react-interactions] Change unmount blur logic to a dedicated event (#17291)', 'Update deepDiffer usage in React Native renderer (#17282)\n\n\nAdd RN prop diffing test with function values\n\n\nUpdate RN deepDiffer mock\n\n\nExplicitly ignore functions in RN prop differ\n\n', '[RN] Hoist static deepDiffer options object (#17303)', 'Add yarn build --unsafe-partial (#17316)\n\n\nAdd yarn build --partial\n\n\nunsafe-partial\n\n', '[Flight] End-to-End Fixture (#17319)', "[Flight] Basic Integration Test (#17307)\n\n\n[Flight] Basic Integration Test\n\n\nJust act()\n\n\nLint\n\n\nRemove unnecessary acts\n\n\nUse Concurrent Mode\n\n\nit.experimental\n\n\nFix prod test by advancing time\n\n\nDon't observe initial state\n\n", 'Warn when doing createRoot twice on the same node (another approach) (#17329)\n\n\nUnify fields used for createRoot warning and event system\n\n\nWarn when doing createRoot twice on the same node\n\n\nStricter check for modern roots\n\n\nUnmark asynchronously\n\n\nFix Flow\n\n', 'Split ReactDOM entry point (#17331)\n\n\nSplit ReactDOM entry point\n\n\nBatchedRoot -> BlockingRoot\n\n', '[react-interactions] Expost host instance to Scope Query function (#17341)', 'Change legacy-events plugin nativeEventTarget to allow null (#17344)', '[Native] Add FeatureFlag to dispatch events with instance targets (#17323)\n\n\n[Native] Add FeatureFlag to dispatch events with instance targets\n\n\nPrettier\n\n', '[Native] Add FeatureFlag to dispatch events with instance currentTarget (#17345)\n\n\n[Native] Add FeatureFlag to dispatch events with instance targets\n\n\nPrettier\n\n\n[Native] Change currentTarget to be an instance behind a flag 2/2\n\n', '[Native] If statement cleanup for null targets (#17346)', '[Fresh] Add options to configure RefreshSig and RefreshReg identifiers (#17340)', '[Bugfix] Passive effects triggered by synchronous renders in a multi-root app (#17347)\n\nRegression test: Effects dropped across roots\n\nSee #17066\n\n[Bugfix] Passive effects loop\n\nThe bug\nIn a multi-root app, certain passive effects (useEffect) are never\nfired. See #17066.\nThe underlying problem\nThe implicit contract of flushPassiveEffects is that, right after\ncalling it, there should be no pending passive effects. In the normal\ncase, in concurrent mode, this is true. But the current implementation\nfails to account for the case where a passive effect schedules\nsynchronous work, which in turn schedules additional passive effects.\nThis led to rootWithPendingPassiveEffects being overwritten in the\ncommit phase, because an assignment that assumed it was replacing null\nwas actually replacing a reference to another root, which has the\nconsequence of dropping passive effects on that root.\nThe fix\nThe fix I\'ve chosen here is, at the beginning of the commit phase, keep\nflushing passive effects in a loop until there are no more.\nThis doesn\'t not change the "public" implementation of\nflushPassiveEffects, though it arguably should work this way, too. I\nsay "public" because it\'s only used by implementation layers on top of\nReact which we control: mainly, the legacy version of act that does\nnot use the mock Scheduler build. So there\'s probably still a bug\nin that act implementation.\nI will address act in a follow-up. The ideal solution is to replace\nthe legacy act with one implemented directly in the renderer, using a\nspecial testing-only build of React DOM. Since that requires a breaking\nchange, we\'ll need an interim solution. We could make the "public" act\nrecursively flush effects in a loop, as I\'ve done for the commit phase.\nHowever, I think a better solution is to stop automatically flushing the\nsynchronous update queue at the end of flushPassiveEffects, and\ninstead require the caller to explicitly call flushSyncUpdateQueue (or\nthe equivalent) if needed. This follows the same pattern we use\ninternally in the work loop, which is designed to avoid factoring\nhazards like the one that resulted in this bug.']v16.11.0 React DOM

Fix mouseenter handlers from firing twice inside nested React containers. @yuanoook in #16928
Remove unstable_createRoot and unstable_createSyncRoot experimental APIs. (These are available in the Experimental channel as createRoot and createSyncRoot.) (@acdlite in #17088)

Artifacts
• react: https://unpkg.com/react@16.11.0/umd/
• react-art: https://unpkg.com/react-art@16.11.0/umd/
• react-dom: https://unpkg.com/react-dom@16.11.0/umd/
• react-is: https://unpkg.com/react-is@16.11.0/umd/
• react-test-renderer: https://unpkg.com/react-test-renderer@16.11.0/umd/
• scheduler: https://unpkg.com/scheduler@0.17.0/umd/ ['Moving backend injection to the content script (#16900)', '[react-interactions] Add wrapping support to FocusList/FocusTable (#16903)', 'Updated DevTools CHANGELOG', 'DevTools shows unsupported renderer version dialog (#16897)\n\n\nDevTools shows unsupported renderer version dialog\n\n\nOptimistic CHANGELOG udpate\n\n', 'DevTools v4.1.0 -> v4.1.1', '[bugfix] Fix false positive render phase update (#16907)\nNeed to reset the current "debug phase" inside the catch block.\nOtherwise React thinks we\'re still in the render phase during the\nsubsequent event.', 'Add HostComponent type to ReactNative (#16898)\n\n\nAdd HostComponent type to ReactNative\n\n\nUse type alias imports instead of wildcard\n\n\nFix forgotten Object in measureLayout type\n\n', 'expose isHydrating (#16909)\nexpose isHydrating for FB', 'Update local version numbers for 16.10 release', 'Changelog for 16.10', 'Fix heading level in changelog', '[react-interactions] Fix virtual click heuristic (#16915)', 'Replaced === check with Object.is() to support values like NaN (#16934)', 'DevTools v4.1.1 -> v4.1.2', 'Fixed typo in DevTools CHANGELOG', '[Selective Hydration] Increase priority for non-synchronous discrete events and retries (#16935)\n\n\nIncrease retryTime for increased priority dehydrated boundaries\n\n\nIncreaese the priority to user blocking for every next discrete boundary\n\n', 'Remove enableUserBlockingEvents flag (#16882)\nSeems like this worked out. We can clean up the flag now.', "Allow Suspense Mismatch on the Client to Silently Proceed (#16943)\n\n\nRegression test: Suspense + hydration + legacy\n\n\nAllow Suspense Mismatch on the Client to Silently Proceed\n\n\nThis fixes but isn't actually the semantics that we want this case to have.", 'Changelog for v16.10.1', 'Update local version numbers for 16.10.1 release', 'chore: updated comment message (#16949)', '[react-interactins] FocusTable tabScope handling+tabIndex control (#16922)', '[react-interactions] Add tab handling to FocusList (#16958)', "[DevTools] postMessage target origin needs to be '*' for local files (#16953)", 'Updated DevTools CHANGELOG', 'React DevTools v4.1.2 -> v.4.1.3', "Remove IIFE wrappers from dev invariant checks (#16963)\nThe error transform works by replacing calls to invariant with\nan if statement.\nSince we're replacing a call expression with a statement, Babel wraps\nthe new statement in an immediately-invoked function expression (IIFE).\nThis wrapper is unnecessary in practice because our invariant calls\nare always part of their own expression statement.\nIn the production bundle, the function wrappers are removed by Closure.\nBut they remain in the development bundles.\nThis commit updates the transform to confirm that an invariant call\nexpression's parent node is an expression statement. (If not, it throws\na transform error.)\nThen, it replaces the expression statement instead of the expression\nitself, effectively removing the extraneous IIFE wrapper.", 'Fix mouseenter handlers fired twice (#16928)', '[react-interactions] Add allowModifiers flag to FocusList + FocusTable (#16971)', '[react-interactions] Tap cancels on second pointerdown (#16936)\nThis patch causes onTapCancel to be called whenever a second pointer interacts\nwith the responder target.', 'Move eventSystemFlags to last argument in event plugin extractors (#16978)\nFix for necolas/react-native-web#1443', 'Remove unused canonical check in fiber host component (#16914)', "[Selective Hydration] Prioritize the last continuous target (#16937)\n\nPrioritize the last continuous target\n\nThis ensures that the current focus target is always hydrated first.\nSlightly higher than the usual Never expiration time used for hydration.\nThe priority increases with each new queued item so that the last always\nwins.\n\nDon't export the moving target\n\nIt's not useful for comparison purposes anyway.", "update hideOrUnhideAllChildren to hide portals that aren't wrapped in a host component (#16992)\nCurrently, when a node suspends, if its subtree contains a portal, the portal is not hidden. This hides portals in the subtree when it's not wrapped in a host component .", '[react-interactions] Repurpose React a11y modules (#16997)', '[react-interactions] Remove context.setTimeout & context.clearTimeout (#17000)', 'Fixing grammatical errors in error message (#16973)\n\n\nFixing grammatical errors in error message\n\n\nFixing grammar error in test file\n\n', 'chore: upgrade to jest 24 (#15778)\n\n\nchore: upgrade to jest 24\n\n\ndownload react-is from npm manually\n\n', 'Added trace updates feature (DOM only) (#16989)\n\nAdded trace updates feature (DOM only)\nUpdated DevTools CHANGELOG\n', 'DevTools v4.1.3 -> v4.2.0', 'Update local version numbers for 16.10.2 release', 'Changelog for v16.10.2', '[EnterLeaveEventPlugin] Fix bug when dealing with unhandled DOM nodes (#17006)', '[Selective Hydration] ReactDOM.unstable_scheduleHydration(domNode) (#17004)\nAdds an API to explicitly prioritize hydrating the path to a particular DOM node without relying on events to do it.\nThe API uses the current scheduler priority to schedule it. For the same priority, the last one wins. This allows a similar effect as continuous events. This is useful for example to hydrate based on scroll position, or prioritize components that will upgrade to client-rendered-only content.\nI considered having an API that explicitly overrides the current target(s). However that makes it difficult to coordinate across components in an app.\nThis just hydrates one target at a time but if it is blocked on I/O we could consider increasing priority of later targets too.', 'Revert "update hideOrUnhideAllChildren to hide portals that aren\'t wrapped in a host component (#16992)" (#17011)\nThis reverts commit de2edc268db827f5110fc56cba240b7eb7301787.', '[react-interactions] Add FocusTable colSpan support (#17019)', '[react-interactions] Remove FB builds of a11y components (#17030)', '[react-interactions] Refine a11y component flow types (#17032)', "[Scheduler Profiler] Use microsecond precision (#17010)\nThe performance.now returns a timestamp in milliseconds as a float.\nThe browser has the option to adjust the precision of the float, but\nit's usually more precise than a millisecond. However, this precision\nis lost when the timestamp is logged by the Scheduler profiler, because\nwe store the numbers in an Int32Array.\nThis change multiplies the millisecond float value by 1000, giving us\nthree more degrees of precision.", "Remove dormant createBatch experiment (#17035)\n\nRemove dormant createBatch experiment\n\nIn a hybrid React app with multiple roots, createBatch is used to\ncoordinate an update to a root with its imperative container.\nWe've pivoted away from multi-root, hybrid React apps for now to focus\non single root apps.\nThis PR removes the API from the codebase. It's possible we'll add back\nsome version of this feature in the future.\n\nRemove unused export\n", 'Remove unused export\nMeant to do this in e4b21be but neglected to git add the changes.', '[react-interactions] Adds more experimental Scope API methods (#17042)', 'Stop warning about setNativeProps being deprecated (#17045)\n\n\nStop warning about setNativeProps being deprecated\n\n\nRemove ReactNative.setNativeProps\n\n\nRemove more Fabric tests\n\n', "DevTools test shell tweaks (#17054)\n\n\nUpdated DevTools shell ignore warning message to account for recent changes in warning text\n\n\nUpdate DevTools console patching to patch the parent window's console rather than the iframe, to more accurately simulate real usage environment\n\n", '[react-interactions] Add getInstanceFromNode support to TestHostRenderer (#17065)\nFix bad WeakMap key case\nFix bad WeakMap key case', 'Pass prod error messages directly to constructor (#17063)\n\nRemove "Invariant Violation" from dev errors\n\nWhen I made the change to compile invariant to throw expressions, I\nleft a small runtime to set the error\'s name property to "Invariant\nViolation" to maintain the existing behavior.\nI think we can remove it. The argument for keeping it is to preserve\ncontinuity in error logs, but this only affects development errors,\nanyway: production error messages are replaced with error codes.\n\nPass prod error messages directly to constructor\n\nUpdates the invariant transform to pass an error message string\ndirectly to the Error constructor, instead of mutating the\nmessage property.\nTurns this code:\njs\ninvariant(condition, \'A %s message that contains %s\', adj, noun);\ninto this:\njs\nif (!condition) {\n  throw Error(\n    __DEV__\n      ? `A ${adj} message that contains ${noun}`\n      : formatProdErrorMessage(ERR_CODE, adj, noun)\n  );\n}', '[SuspenseList] Fix bugs with dropped Promises (#17082)\n\nTransfer any pending promises from inner boundary to list\n\nFor non-hidden modes, this boundary should commit so this shouldn\'t be\nneeded but the nested boundary can make a second pass which forces these\nto be recreated without resuspending. In this case, the outer list assumes\nthat it can collect the inner promises to still rerender if needed.\n\nPropagate suspense "context" change to nested SuspenseLists\n\nThis means that we always rerender any nested SuspenseLists together.\nThis bug looks similar to the previous one but is not based on the lack of\nretry but that the retry only happens on the outer boundary but the inner\ndoesn\'t get a retry ping since it didn\'t know about its own promise after\nthe second pass.', "Set up experimental builds (#17071)\n\nDon't bother including unstable_ in error\n\nThe method names don't get stripped out of the production bundles\nbecause they are passed as arguments to the error decoder.\nLet's just always use the unprefixed APIs in the messages.\n\nSet up experimental builds\n\nThe experimental builds are packaged exactly like builds in the stable\nrelease channel: same file structure, entry points, and npm package\nnames. The goal is to match what will eventually be released in stable\nas closely as possible, but with additional features turned on.\nVersioning and Releasing\nThe experimental builds will be published to the same registry and\npackage names as the stable ones. However, they will be versioned using\na separate scheme. Instead of semver versions, experimental releases\nwill receive arbitrary version strings based on their content hashes.\nThe motivation is to thwart attempts to use a version range to match\nagainst future experimental releases. The only way to install or depend\non an experimental release is to refer to the specific version number.\nBuilding\nI did not use the existing feature flag infra to configure the\nexperimental builds. The reason is because feature flags are designed\nto configure a single package. They're not designed to generate multiple\nforks of the same package; for each set of feature flags, you must\ncreate a separate package configuration.\nInstead, I've added a new build dimension called the release\nchannel. By default, builds use the stable channel. There's\nalso an experimental release channel. We have the option to add more\nin the future.\nThere are now two dimensions per artifact: build type (production,\ndevelopment, or profiling), and release channel (stable or\nexperimental). These are separate dimensions because they are\ncombinatorial: there are stable and experimental production builds,\nstable and experimental developmenet builds, and so on.\nYou can add something to an experimental build by gating on\n__EXPERIMENTAL__, similar to how we use __DEV__. Anything inside\nthese branches will be excluded from the stable builds.\nThis gives us a low effort way to add experimental behavior in any\npackage without setting up feature flags or configuring a new package.", 'Update release scripts to support experimental releases (#17086)\n\nDownload correct artifacts for release channel\n\nExperimental builds should pull artifacts from the\nprocess_artifacts_experimental job.\nI think instead of two separate CI workflows, a better approach might\nbe to build stable artifacts to the build directory and the\nexperimental artifacts to a build_experimental directory, and\ngenerate both within the same workflow. This would take some work since\nlots of things assume the output directory is build, but something\nto consider in the future.\n\nPrevent experimental promotion to stable\n\nAdds a check to the prepare-stable script to prevent experimental\nbuilds from being published using stable semver versions.', 'Fixed a bug with illegal invocation for Trusted Types (#17083)\n\n\nFixed a bug with illegal invocation.\n\n\nFixed the test.\n\n', '[babel-plugin-react-jsx] Avoid duplicate "children" key in props object (#17094)\n\n\n[babel-plugin-react-jsx] Avoid duplicate "children" key in props object\n\n\nUse Object.assign approach\n\n', '[react-interactions] Modify Scope query mechanism (#17095)', 'Remove concurrent apis from stable (#17088)\n\nTests run in experimental mode by default\n\nFor local development, you usually want experiments enabled. Unless\nthe release channel is set with an environment variable, tests will\nrun with EXPERIMENTAL set to true.\n\nRemove concurrent APIs from stable builds\n\nThose who want to try concurrent mode should use the experimental\nbuilds instead.\nI\'ve left the unstable_ prefixed APIs in the Facebook build so we\ncan continue experimenting with them internally without blessing them\nfor widespread use.\n\n\nTurn on SSR flags in experimental build\n\n\nRemove prefixed concurrent APIs from www build\n\n\nInstead we\'ll use the experimental builds when syncing to www.\n\nRemove "canary" from internal React version string\n', 'Enable concurrent APIs in all experimental forks (#17102)\nForgot to update the flags in the forked modules.', "Temporary patch www fork with prefixed APIs (#17103)\nI'm doing this here instead of in the downstream repo so that if the\nsync diff gets reverted, it doesn't revert this, too.\nOnce the sync has landed, and the callers are updated in www, I will\nremove this.", 'Modify Babel React JSX Duplicate Children Fix (#17101)\nIf a JSX element has both a children prop and children (ie. {childTwo}), IE throws an Multiple definitions of a property not allowed in strict mode. This modifies the previous fix (which used an Object.assign) by making the duplicate children a sequence expression on the next prop/child instead so that ordering is preserved. For example:\n<Component children={useA()} foo={useB()} children={useC()}>{useD()}</Component>\nshould compile to\nReact.jsx(Component, {foo: (useA(), useB()), children: (useC(), useD)})', 'Separate sizebot for experimental builds (#17100)\nConfigures the sizebot to leave a second comment that tracks the\nexperimental build artifacts.', 'Change retry priority to "Never" for dehydrated boundaries (#17105)\nThis changes the "default" retryTime to NoWork which schedules at Normal\npri.\nDehydrated bouundaries normally hydrate at Never priority except when they\nretry where we accidentally increased them to Normal because Never was used\nas the default value. This changes it so NoWork is the default.\nDehydrated boundaries however get initialized to Never as the default.\nTherefore they now hydrate as Never pri unless their priority gets\nincreased by a forced rerender or selective hydration.\nThis revealed that erroring at this Never priority can cause an infinite\nrerender. So I fixed that too.', 'unstable_createRoot -> createRoot in test (#17107)\nFixes test added in #17105, which was based on an earler commit than the\none that removed the unstable_ prefix from createRoot.', '[react-interactions] Add onFocusWithin event to FocusWithin responder (#17115)', "Client render Suspense content if there's no boundary match (#16945)\nWithout the enableSuspenseServerRenderer flag there will never be a boundary match. Also when it is enabled, there might not be a boundary match if something was conditionally rendered by mistake.\nWith this PR it will now client render the content of a Suspense boundary in that case and issue a DEV only hydration warning. This is the only sound semantics for this case.\nUnfortunately, landing this will once again break #16938. It will be less bad though because at least it'll just work by client rendering the content instead of hydrating and issue a DEV only warning.\nHowever, we must land this before enabling the enableSuspenseServerRenderer flag since it does this anyway.\nI did notice that we special case fallback={undefined} due to our unfortunate semantics for that. So technically a workaround that works is actually setting the fallback to undefined on the server and during hydration. Then flip it on only after hydration. That could be a workaround if you want to be able to have a Suspense boundary work only after hydration for some reason.\nIt's kind of unfortunate but at least those semantics are internally consistent. So I added a test for that.", 'Remove prefixed concurrent APIs from www build (#17108)\nThe downstream callers have been updated, so we can remove these.', '[react-interactions] Allow event.preventDefault on LegacyPress responder (#17113)\n[react-interactions] Allow event.preventDefault on LegacyPress responder', '[react-interactions] Fix focus-visible heuristic (#17124)\nRespond to all keys not just Tab', '[SuspenseList] Store lastEffect before rendering (#17131)\n\n\nAdd a failing test for SuspenseList bug\n\n\nStore lastEffect before rendering\n\n\nWe can\'t reset the effect list to null because we don\'t rereconcile the\nchildren so we drop deletion effects if we do that.\nInstead we store the last effect as it was before we started rendering\nso we can go back to where it was when we reset it.\nWe actually already do something like this when we delete the last row\nfor the tail="hidden" mode so we had a field available for it already.', 'Update RN typings for a shim (#17138)', "Migrate useDeferredValue and useTransition (#17058)\nMigrated useDeferredValue and useTransition from Facebook's www repo into ReactFiberHooks.", 'Move SuspenseList to experimental package (#17130)\nAlso moves withSuspenseConfig', "Don't build non-experimental www bundles (#17139)\nReduces the likelihood we'll accidentally sync the wrong ones.", 'Lint experimental build artifacts (#17141)\nAdds lint_build job to the experimental workflow', 'Add experimental instructions to release README (#17143)', 'Remove unstable_ prefix in various internal uses (#17146)\n\n\nRename unstable_createRoot in DevTools\n\n\nRename createSyncRoot in warning\n\n', "SuspenseList support in DevTools (#17145)\n\nSuspenseList support in DevTools\n\nThis adds SuspenseList tags to DevTools so that the name properly shows\nup.\nIt also switches to use the tag instead of Symbol type for Suspense\ncomponents. We shouldn't rely on the type for any built-ins since that\nfield will disappear from the fibers. How the Fibers get created is an\nimplementation detail that can change e.g. with a compiler or if we\nuse instanceof checks that are faster than symbol comparisons.\n\nAdd SuspenseList test to shell app\n", 'Build script should default to experimental (#17144)\nyarn build defaults to building in experimental mode. To opt-out, set\nthe RELEASE_CHANNEL environment variable to stable. This is the same\nas what we do when running tests via yarn test, to make local\ndevelopment easier.', "Experimental test helper: it.experimental (#17149)\nSpecial version of Jest's it for experimental tests. Tests marked as\nexperimental will run both stable and experimental modes. In\nexperimental mode, they work the same as the normal Jest methods. In\nstable mode, they are expected to fail. This means we can detect\nwhen a test previously marked as experimental can be un-marked when the\nfeature becomes stable. It also reduces the chances that we accidentally\nadd experimental APIs to the stable builds before we intend.\nI added corresponding methods for the focus and skip APIs:\n\nfit -> fit.experimental\nit.only -> it.only.experimental or it.experimental.only\nxit -> xit.experimental\nit.skip -> it.skip.experimental or it.experimental.skip\n\nSince it is an alias of test, test.experimental works, too.", "Read current time without marking event start time (#17160)\n\nFailing test: DevTools hook freezes timeline\n\nThe DevTools hook calls requestCurrentTime after the commit phase has\nended, which has the accidnental consequence of freezing the start\ntime for subsequent updates. If enough time goes by, the next update\nwill instantly expire.\nI'll push a fix in the next commit.\n\nRead current time without marking event start time\n\nrequestCurrentTime is only meant to be used for updates, because\nsubsequent calls within the same event will receive the same time.\nMessing this up has bad consequences.\nI renamed it to requestCurrentTimeForUpdate and created a new\nfunction that returns the current time without the batching heuristic,\ncalled getCurrentTime.\nSwapping requestCurrentTime for getCurrentTime in the DevTools\nhook fixes the regression test added in the previous commit.", '[react-interactions] Make events non-passive to allow preventDefault (#17136)', 'Fixed a style bug in props editor (#17162)']v16.10.0 React DOM

Fix edge case where a hook update wasn't being memoized. (@sebmarkbage in #16359)
Fix heuristic for determining when to hydrate, so we don't incorrectly hydrate during an update. (@sebmarkbage in #16739)
Clear additional fiber fields during unmount to save memory. (@trueadm in #16807)
Fix bug with required text fields in Firefox. (@halvves in #16578)
Prefer Object.is instead of inline polyfill, when available. (@ku8ar in #16212)
Fix bug when mixing Suspense and error handling. (@acdlite in #16801)

Scheduler (Experimental)

Improve queue performance by switching its internal data structure to a min binary heap. (@acdlite in #16245)
Use postMessage loop with short intervals instead of attempting to align to frame boundaries with requestAnimationFrame. (@acdlite in #16214)

useSubscription

Avoid tearing issue when a mutation happens and the previous update is still in progress. (@bvaughn in #16623)

Artifacts
• react: https://unpkg.com/react@16.10.0/umd/
• react-art: https://unpkg.com/react-art@16.10.0/umd/
• react-dom: https://unpkg.com/react-dom@16.10.0/umd/
• react-is: https://unpkg.com/react-is@16.10.0/umd/
• react-test-renderer: https://unpkg.com/react-test-renderer@16.10.0/umd/
• scheduler: https://unpkg.com/scheduler@0.16.0/umd/ ['Initial commit', 'Added a super basic README', 'Throttle bridge traffic for Elements tree updates', 'Added Prettier (and formatted code)', 'Added initial Chrome/Firefox shells', "Removed throttling. It's too error prone because of mutations (Fibers). We'll optimize later by using the effects list for updates.", 'Misc updates to better handle tearing and add some future TODOs', 'Stashing partial windowing implementation', 'Replaced node objects with typed array of tree operations; windowing works in small test harness', 'Refactored bridge to support transferrables (e.g. typed array buffers) and added transferable param to postMessage for op codes', 'Fixed text wrap bug in extension panel', 'Added inline comments for types', 'Tidying up', 'Remove root from "roots" list on unmount', 'Renamed app.js to App.js for consistency', 'Fixed an Array type bug in Store', 'Reload extension on navigate', 'Tweaked error message to provide more helpful info if shown', 'Added stub search row (not connected to anythign yet)', 'Fixed potential race cases in bridge/store/backend initialization', "Don't show roots in Elements tree", 'Moved search icon into separate React component', 'Fixed small CSS bug', 'Adding tearing warning to Store', 'Tidied up devtools frontend a little', 'Added properties panel and selected element context', 'Initial pass at properties panel. Lots of TODOs remaining.', 'Fixed regression in browser shell', 'Added better context support', 'Added simple hooks support (same as in legacy DevTools for now)\nI had to add a couple of  comments because Flow was being a mysterious little shit and I got tired of trying to work around it.', 'Strip React elements from serialized data (and display  instead', 'Cleaned up style vars', 'Cleaned up property borders', 'Added $r support', 'Added search support', 'Replaced SearchContext useStates with useReducer and fixed an edge-case search bug', 'Added a clarifying comment to SearchInput', 'Fixed regexp parsing', 'Combined search and selection contexts to avoid complicated dependencies', 'Added owner tree exploration view', 'Refactored tree, search, selection, and owners contexts', 'Small refinements to Store: read-only Elements in map, added revision to guard against tearing', 'Tweaked owners breadcrumb style to batter match tree colors', 'Reverted immutable element change (for now)', 'Removed non-functioning tree arrows (for now)', "Initial stab at 'View in DOM' button", 'Cleaned up CSS vars and reduced font size a bit', 'Misc cleanup and prep for dark mode CSS', 'Added new tabs UI and theme/display-density preferences', 'Fixed NaN warning for pre-mount CSS prop read', 'Added NOW config file for dev shell', 'Initial pass at adding Settings panel to browser extension', 'Split demo app into multiple roots and fixed a multi-root bug', 'Temporarily disabled Settings panel', "Avoid NPE in Agent if renderer can't be found for an ID", 'Changed dark theme to have more React blues', 'Tweaked the owner stack exit icon', 'Re-added "Settings" panel to browser extension and (hopefully) fixed a lot of sources of error', 'Fixed edge-case display density bug', 'Style, theme, and button CSS cleanup', 'Tidied up Flow types for Bridge and Store', 'Removed some stale TODO comments', 'Fixed edge case mutation bugs in selected element and tree context', 'Fixed a potential source of duplicate key', 'Reduced tree padding (left) slightly to make larger trees easier to inspect', 'Inspectable complex hook values', 'Tab bar resizes properly for narrow screens', 'Implemented select-DOM-element button', 'Fixed overlay position bug', 'Added link to now.sh preview to README', 'Support editable props, state, and context values', "Scroll to newly selected component if it's out of view", 'Fix encoding of Unicode keys greater than U+00FF (greater than U+FFFF handled by surrogate pairs)', "Just use codepoints as it'll be copied into an Uint32Array anyway", 'Pass options to scrollIntoView', 'Merge pull request #2 from Jessidhia/fix-utf-encoding\nFix encoding of Unicode keys greater than U+00FF', 'Removed numeric key code', 'Fix hooks warnings identified by prerelease version of react-hooks ESLint plugin', 'Installed eslint-plugin-react-hooks@next and added to ESLint config', "Fixed broken 'shutdown' event that lead to CPU problems when reloading DevTools", 'Added support for editable hook values (pending facebook/react/pull/14906)', 'added basic support for Linux', 'Merge pull request #4 from mishaor/linux-support\nAdded support for Linux', 'Renamed nativeHookIndex -> index', 'Updated flow-bin from 91 -> 93 and removed unnecessary fixmes', 'Updated ESLint hooks rule', 'Updated editable hooks UI and added limited undo feature', "Merge branch 'master' of github.com:bvaughn/react-devtools-experimental", 'Fixed null input value. Tweaked useReducer test harness.', "Tweaked colors based on Andrew's feedback", 'Tweaked colors; Esc key to undo edits', 'Restore input focus after clicking reset value button', 'Split large InspectedElementTree file into separate component-files', "Re-added transferrables (after 'shutdown' evt fix) and guard against a tree mutation race", 'Fixed some small overflow/scrollbar issues', 'Added copy props/state/hooks/context button', 'Split :active and :focus styles for Button+Toggle', 'Implemented view-source button for DOM extension', 'Added (temporary) deploy scripts for pre-release extensions', 'Updated deploy scripts and pre-release template', 'Renamed overrideHook -> overrideHookState (to stay in sync with React PR)', 'Yarn upgrade', "Merge branch 'scroll-into-view' of https://github.com/Jessidhia/react-devtools-experimental into Jessidhia-scroll-into-view", 'Updated test code to include a deeply nested DIV', 'Add .vscode to .gitignore', 'Changed select-on-click to select-on-mouse-down and fixed a scrollIntoView problem', 'Disable view-source button rather than hiding it to avoid jumping when selecting new components', 'Select DOM element mode should useCapture to prevent clicks from passing through', 'Left arrow selects parent in tree', 'Maybe fixed checkbox alignment issue Dan reported?', 'Removed an unnecessary entry from add-root operation array', 'Added OVERVIEW doc', 'Disable text selection in tree', 'Add placeholders to clarify between empty string, null, and undefined', 'Improve selected node highlighting by using minWidth instead of width', 'Updated to account for facebook/react/pull/14906/commits/cdd9ba4', 'Fixed docs typo: chlid -> child', 'Added intro to OVERVIEW', 'Udpated param name in injected renderer overrideHookState type', 'Removed unnecessary relative position style from Element CSS', 'Fixed selecterd element background color being cut-off when tree scrolls\nThis required a bit of unusual CSS but seems to work well for Firefox and Chrome. We can remove it and revisit other approaches (like PR#24) in the future if needed.', 'Fixed a typo in OVERVIEW', 'Update OVERVIEW.md\nFixed the superscript reference', 'Merge pull request #27 from gaurav5430/master\nUpdate OVERVIEW.md', 'Merged master', 'Disabled transferrables for now (to avoid a Chrome runtime error)', 'Re-organized views slightly in preparation for Profiler UI', 'Added planned Profiler architecture to OVERVIEW doc to share with others', 'Changed profilerSummary messages to be lazy as well', 'Added explicit Profiler goals to OVERVIEW', 'Updated Profiler OVERVIEW', 'Refined OVERVIEW a little more', 'fix import file name', 'Merge pull request #29 from tsriram/fix-import\nFix import file name', 'Updated Profiling overview/proposal again', "Merge branch 'master' of github.com:bvaughn/react-devtools-experimental", 'Initial profiling shell added\nLots of TODOs and unfinished views here.', 'Added commit time filter', 'Added snapshot selector placeholder UI', 'Tidied up Profiler toolbar UI', 'Fixes #19 - Break the text into next line for long props', 'Moved some things from ProfilerContext reducer into (root) Store', 'Merge pull request #32 from reznord/fix/long-props-fix\nBreak the text into next line for long props', 'Added initial Suspense cache and loaded commit metadata', 'Plugged react-window into commit selector', 'Profiler CSS/layout tweaks', 'Naive pass at commit durationfiltering', 'Iterating on Profiling tab suspense. Stashing changes but planning to refactor immediately.', 'Refactored Profiler tree to better work with suspense', 'Finished iterating on commit selector UI for now', 'Added commit tree reconstruction', 'Reset commit tree cache between profiles', 'Added Ranked chart data generation; fixed some logic errors in backend tree base duration tracking', 'Implemented ranked chart', 'First pass at flame graph chart', 'Fixed mutation bug in CommitTreeBuilder', 'Added "Profiler" tab', 'Experimenting with portals', 'Refactored portaling and fixed disconnected CSS vars', 'Tweaked profiling did-not-render color to be dimmer', 'Added a few inline comments', 'Unmount and remount when main URL changes to avoid staleness problems', 'Added some inline comments about portal props', 'innerTagName -> innerElementType', 'Added profiling-not-supported message for browser extension', 'Merge pull request #33 from bvaughn/portals\nExperimenting with portals [WIP]', 'Reset selected commit and fiber between profiling sessions', 'Fixed keyboard/mouse events inside of extension by using ref.ownerDocument', 'Fixed a bug where treeBaseDurations were undefined for fibers that were unmounted during profiling', 'Handle RTE in profiler when commit does not contain selected node', 'Added placeholder Profiler sidebar views', 'Added getInteractions message', "Added suspense to TODO list and added interactions to 'Commit Info' panel", 'Added basic Interactions view (without graph for now)', 'Interaction chart with commit blocks rendering', 'Added interaction tracing test harness to shell', 'Clicking commits and interactions link to each other', 'Show commit boxes in interaxctions sidebar', 'Removed some outdated TODO comments', 'Added arrow key navigation for commits and interactions', 'Cleaned up edge cases around filtered commits', 'Moved some shared CSS vars into CSS', 'Cleaned up a no-selection state', 'Fixed a tab restoration bug in browser extension', 'Suppress horizontal scroll bars in snapshot selector', 'Webpack config injects a __DEV_ constant', 'Implemented reload-and-profile. Also fixed an couple of minor profiling bugs along the way', 'Disable reload-and-profile button if no renderers support profiling', 'Improved Profiler suspense boundary UI', 'Avoid flashing "Loading..." in right pane', 'Added export and clear buttons for Profiler, cleaned up record toggle', 'Added initial support for EventComponent/EventTarget', 'Added save profiling data button to Profiler', 'Import/export feature', 'Disable export profiling data option in Firefox. (downloads.download seems to just fail silently.)', 'Fix casing on store import', 'Merge pull request #38 from lucasecdb/patch-1\nFix casing on store import', 'Inject early on when reloading-and-profiling', 'Misc cleanup of comments and localStorage key names', 'Fixed some missing operations that could happen after reload-and-profile', 'Show is-recording indicator earlier after a reload-and-profile', 'Merge pull request #35 from bvaughn/reload-and-profile\nEagerly inject renderer (before document) to support reload-and-profile', 'Merge pull request #41 from gaearon/smoother-right-pane\nAvoid flashing "Loading..." in right pane', 'Added missing Flow annotation', 'Elements -> Components (label)', 'Elements -> Components (naming)', 'Store screenshots after each commit when profiling', 'Merge pull request #45 from gaearon/rename\nTab name: "Elements" -> "Components"', 'Revert fa317be (temporarily show previously selected element props)', 'Fixed an arrow navigation bug', 'Add a space in ', 'Merge pull request #51 from gaearon/tweak-el-display\nAdd a space in ', 'Fixed editing props for memo and forwardRef components', 'Fixed a name typo in a radio button', 'Make tree reachable by focus', 'Renamed GlobalHook content script references to injectGlobalHook to avoid confusion', 'Added option to disable screenshot capturing while profiling', 'Hardened background script against potential errors', 'Copied findCurrentFiberUsingSlowPath Suspense bug fix from recent PR https://github.com/facebook/react/pull/15312/files', 'Make owner stack reachable by keyboard', 'Move selection when typing in search field', 'Merge pull request #62 from gaearon/search-fix\nMove selection when typing in search field', 'Match search at word boundaries', "Merge branch 'tab-owner' of https://github.com/gaearon/react-devtools-experimental into gaearon-tab-owner", 'Chagned owner div to be actual button', 'Prettier', 'Fix regex', 'Fix special cases', 'Add back regex support', "Merge branch 'a11y-tree' of https://github.com/gaearon/react-devtools-experimental into gaearon-a11y-tree", 'Renamed TreeWrapper to innerElementType', "Don't crash for deeply nested Hooks", 'Add size to owner stack items', 'Stop mouseup propagation while inspecting', 'Fix it all', 'Merge pull request #66 from gaearon/dont-dismiss-menu\nStop mouseup propagation while inspecting', "Merge branch 'larger-items' of https://github.com/gaearon/react-devtools-experimental into gaearon-larger-items", 'Fixed owners header font family too', "Merge branch 'fix-nested-hooks' of https://github.com/gaearon/react-devtools-experimental into gaearon-fix-nested-hooks", 'Added truncation UI indicator for hooks. Addressed lint rule violations.', 'Renamed innerElementType -> InnerElementType to avoid confusing hooks lint rule', 'Merge pull request #63 from gaearon/smarter-search-match\nMatch search at word boundaries', 'Explicitly guard debug calls', 'Merge pull request #70 from gaearon/free-debug\nExplicitly guard debug calls', "Don't move selection unless search text increased length", "Merge pull request #72 from gaearon/search-bug\nDon't move selection unless search text increased length", 'Allow to toggle Suspense in Components pane', 'Fix highlighting timed out Suspense DOM node', 'Nits', 'Merge pull request #61 from gaearon/toggle-suspense-2\nAllow to toggle Suspense in Components pane', 'Improved keyboard UX and focus UI for Tree and OwnersStack', 'Sync selected Profiler node back to the Components tab\nAlso show element keys in Profiler charts', 'Fix double-adding fibers when traversing', 'Add error logs in DEBUG', 'Hard crash', 'Merge pull request #75 from gaearon/fix-double-add\nFix double-adding fibers when traversing', 'Fix Suspense fragment edge cases', 'Expand the test fixture', 'Rewrite the Suspense logic', 'Fix profiler and nits', 'Update the commit tree to assume operations do not repeat', 'Naming', 'Merge pull request #71 from gaearon/suspense-special\nFix Suspense fragment edge cases', 'Show owner in DOM highilght overlay', 'Nit', 'Merge pull request #81 from gaearon/overlay-owner\nShow owner in DOM highilght overlay', 'Continuously update tree selection in DOM inspection mode', 'Address review', 'Remove dead code', 'Merge pull request #84 from gaearon/dead\nRemove dead code', 'Throttle screenshots to reduce impact on performance.', 'Fixed a typo in flamegraph duration label', 'Implemented new OwnerStack UI enhancement', 'Removed unneeded min-height. Using throttle for resize function.', 'Profiler shows commit times and durations for selected fiber', 'Improved keyboard navigation for tabs, interactions, and fiber-commits', "Merge branch 'owner-stack-enhancement' of https://github.com/hristo-kanchev/react-devtools-experimental into hristo-kanchev-owner-stack-enhancement", 'Moved getElementDimensions() back into Overlay component', 'Preserve selection on exiting owner mode', 'Replaced "colon" icon with more standard 3-dot "more"', "Use 'classnames' in TabBar to simplify an attribute", 'Cleaned up an old Overlay helper function', 'Bump overscan', 'Removed some unnecessary functions', 'Replaced some passive effects with layout effects to avoid flash of overflowed owners', 'Remove tree focus ring', 'Cleaned up is-overflowing hook and dependencies', 'Pass Toggle label through', 'Merge pull request #89 from gaearon/toggle-fix\nPass Toggle label through', 'Merge pull request #88 from gaearon/remove-ring\nRemove tree focus ring', 'Removed unnecessary layout effect in favor of a setState', 'Owners stack modal behaves and looks more like a modal', "Merge branch 'hristo-kanchev-owner-stack-enhancement'", 'Fixed Toggle Flow prop types', 'Merge pull request #87 from gaearon/bump-overscan\nBump overscan to 3', 'Merge pull request #86 from gaearon/owner-stack-id\nPreserve selection on exiting owner mode', 'Fix spurious autoscroll', 'Preserve state when switching tabs', 'Rename "owner stack" label to "rendered by"', 'Merge pull request #94 from gaearon/rendered-by\nRename "owner stack" label to "rendered by"', 'Merge pull request #93 from gaearon/keep-mounted\nPreserve state when switching tabs', 'Merge pull request #91 from gaearon/fix-scroll\nFix spurious autoscroll', 'Select DOM nodes on hover', 'Add a comment', 'Address review', 'Make Flow happy', 'Merge pull request #92 from gaearon/highlight-on-hover\nSelect DOM nodes on hover', 'Refactor: split inspectElementRaw', 'Add a separate button for logging values', 'Added  for itemData', 'Updated flow-bin', "Merge branch 'inspect-log' of https://github.com/gaearon/react-devtools-experimental into gaearon-inspect-log", 'Fix missing key', 'Added export-log icon. Removed unnecessary variable assignment.', "Merge branch 'master' of github.com:bvaughn/react-devtools-experimental", "Don't re-measure owners stack sizes unnecessarily", 'Fixed an unpleasant interaction with owners modal "..." button', 'Sync DevTools Elements and Components tabs', "Merge branch 'master' into continuous-select", 'Replaced Agent setInterval with throttle+memoize', "Don't change browser selection unless React selection changed", 'Nits', 'Remove unnecessary logic', 'Keep DOM selection if last $0 resolves to same component', 'Merge pull request #99 from gaearon/sync-tabs\nSync DevTools Elements and Components tabs', 'Make DOM selection binding one-way', 'pointer-events: none to fix flicker on Overlay "tip"\nIf click-to-inspect then hover an element in just the right place, it flickers between two elements because this "tip" element catches the hover. This should fix it.', 'Use @reach MenuButton for owner stack menu', 'Merge pull request #107 from sophiebits/flicker\npointer-events: none to fix flicker on Overlay "tip"', 'Merge pull request #103 from gaearon/sad-one-way\nMake DOM selection binding one-way', 'Updated OwnersStack CSS to properly override React styles', 'Disable text selection for OwnersStack buttons', 'Tree arrow navigation respects event.defaultPrevented\nThis prevents Reach MenuButton operations from also changing the tree selection in the background', 'Added (local) fork of @reach/portal to unblock OwnersStack MenuButton PR', 'Merge pull request #108 from bvaughn/reach-ui-menubutton\nUse @reach MenuButton for owner stack menu [WIP]', 'Fixed owner stack size calculation bug that sometimes caused bad overflow', 'Remember max Tree width as new nested items are rendered', 'Tweaked owners stack CSS to fix another overflow issue', 'Fixed Tree minWidth initial case to fill 100% width', 'Send the bridge sync event lazily', 'Add check for inactive window on selected element', 'Use focus state from elements tree instead of ownerDocument', 'Format logElementToConsole() slightly', 'Put DevTools in dev shell above the inspector', 'Add missing Button titles', 'Pressing next forces search to select', 'Use heuristic suggested by @sophiebits', 'Refactor: extract a variable', 'Merge pull request #101 from gaearon/find-nit\nPressing next forces search to select', 'Added isToggled boolean to tree nodes and toggleIsCollapsed() method to Store', 'Added toggle button to Tree > Element views', 'Selected search result auto-opens collapsed nodes when necessary.\nAlso fixed an unrelated bug about when we reset search index when text changes.', 'Upgrade react-window to fix a scroll-to bug', 'Left/right arrow toggles node collapsed state as well', 'Hide toggle arrows in owners list mode', 'Renamed _numElements attribute based on PR feedback', "Reverted some unnecessary changes to TreeContext after Dan's PR 101 was merged", 'Update Store.getIndexOfElementID to take isCollapsed into account', 'Newly selected components always auto-expand their ancestors', 'Rewrote weightDelta calculation to be more readable based on PR feedback', 'Merge pull request #117 from gaearon/hide-shell\nPut DevTools in dev shell above the inspector', 'Merge pull request #118 from gaearon/required-title\nAdd missing Button titles', 'Reverted misguided index/collapsed behavior', 'Update selected index after mutation', 'Merge pull request #114 from gaearon/lazy-sync\nSend the bridge sync event lazily', 'Merge pull request #116 from bvaughn/issues/105\nAdd collapse/toggle UI to Tree', 'Merge pull request #120 from gaearon/mutation-index\nUpdate selected index after mutation', 'Prevent default on all key navigations', "Merge branch 'inactive-window' of https://github.com/lucasecdb/react-devtools-experimental into lucasecdb-inactive-window", 'Tweaked inactive CSS colors', 'Replaced nested ternary', 'Moved blur/focus up to the AutoSizer wrapper and removed an effect+ref', 'Flow fix', 'Merge pull request #122 from gaearon/prevent\nPrevent default on all key navigations', 'Picking a DOM node focuses the tree', 'Add collapsible icon for object and array types', 'Fix flow type', 'Merge pull request #123 from gaearon/focus-keyboard\nPicking a DOM node focuses the tree', 'Update opener icon and remove negative margin', 'Left and right arrows only traverse parents', 'Use button instead of div for a11y', "Merge branch 'collapse-props' of https://github.com/lucasecdb/react-devtools-experimental into lucasecdb-collapse-props", 'Added new color-expand-collapse-toggle CSS var', 'Fix a bug that caused it to jump over nodes when pressing too fast', 'Refactored KeyValue toggle so columns with toggles align better below those without', 'Double clicking on a name toggles expanded state in KeyValue', 'Editable name not text-selectable', 'Fixed horizontal alignment for collapsable hooks', 'Improve bridge batching logic\nFixes #132.', 'Merge pull request #134 from sophiebits/bridge-batch\nImprove bridge batching logic', 'Add a missing dep', 'Ignore hover when navigating with keyboard', "Merge branch 'keyboard-stuff' of https://github.com/gaearon/react-devtools-experimental", "Don't drill into owners list if no owner metadata is available", 'Merge pull request #126 from bvaughn/js-hover\nIgnore hover when navigating with keyboard', 'Added ErrorBoundary with GitHub bug link', 'Fix fiber info sidepanel not scrollable', 'Merge pull request #135 from lucasecdb/fiber-info-overflow\nFix fiber info sidepanel not scrollable', 'Enable text to wrap within error boundary stacks', 'Add Git revision to build version', 'Add Git revision to extension manifests', 'Added expand/collapse toggles to custom hooks', 'Fix small sizing issue with expand collapse toggle', 'Use :hidden attribute to collapse props/hooks', 'Initial example test. Will iterate from here.', 'Added multi-test setup logic', 'Removed unnecessary configurable Bridge batch duration', 'Added [root] indicator to Store snapshot reprensentation', 'Added separate mount+update tests', 'Updated React test utils for newer version of act()', 'Named snapshots. Tests use act() abstraction.', 'Cleaned up setup/polyfills', 'Added a simple Suspense test', 'Added expand/collapse tests; chronologically ordered snapshots', 'Moved a few vars inside of the setupTest beforeEach block', 'Moved DEV setup from setupTests to setupEnv', 'Use Circle CI to run lint, prettier, flow, and tests', 'Merge pull request #133 from bvaughn/tests\nAutomated tests [WIP]', 'Added devEngines entry to package.json', 'Circle CI config changes', 'Use smart scrolling', "Firefox only supports peristent background extensions so I've removed the persistent:false flag", "Merge branch 'smart-scroll' of https://github.com/gaearon/react-devtools-experimental into gaearon-smart-scroll", 'react-window 1.8.0', 'Auto-update Chrome extension', 'Chrome build+deploy script auto-increment a prerelease version', 'Udpated Firefox installation instructions', 'Merge pull request #145 from bvaughn/deploy-chrome-updates\nAuto-update Chrome extension', 'Added missing instruction to Chrome install steps', 'Polish some mouse interactions', 'Consistently scroll component name into view', 'Merge pull request #147 from gaearon/no-propagation\nPolish some mouse interactions', 'Track search navigation in DOM', 'Changed highlight-on-search behavior to use TreeContext', "Don't reset selected item on search mismatch or exit", 'Bump React Hooks plugin', 'Prefer to keep the start anchor visible', 'Adjust highlighting on window resize', 'View DOM button opens Elements tab', "Merge pull request #149 from gaearon/dont-reset\nDon't reset selected item on search mismatch or exit", 'Merge pull request #150 from gaearon/bump-hooks-plugin\nBump React Hooks plugin', 'Merge pull request #155 from gaearon/view-dom-inspect\nView DOM button opens Elements tab', 'Merge pull request #154 from gaearon/resize-hilite\nAdjust highlighting on window resize', 'Tweaked .eslintignore and .gitignore', 'Fixed misplaced padding in Tree', 'Tweaked an inline comment.', 'Merge pull request #148 from gaearon/scroll-consistent\nConsistently scroll component name into view', 'Temporarily disabled hooks lint failure for Tree useEffect', 'Add package commands for creating dev builds for easier debugging', 'Fixed an edge case profiling bug where the number of commits was wrong', 'Add a stress test for tree traversal', 'Use LRU for encoded strings', 'Merge pull request #159 from gaearon/l-to-the-r-to-the-u\nUse LRU for encoded strings', 'Add production mode to dev shell', 'Merge pull request #160 from gaearon/add-prod-shell\nAdd production mode to dev shell', "Don't materialize typed array until the transfer", 'Merge pull request #158 from gaearon/stress-test\nAdd a stress test for tree traversal', "Merge pull request #161 from gaearon/fast\nDon't materialize typed array until the transfer", 'Flow and lint fix', 'Add Suspense stress test', 'Merge pull request #162 from gaearon/suspense-test\nAdd Suspense stress test', 'Add stress test for reordering', "Refactor: split recordUpdate() into profiling and reorder\nThis doesn't change the actual algorithm but splits unrelated parts.", "Refactor: remove early returns from updateFiberRecursively\nThis doesn't change any logic, just the shape of the control flow.\nI want to unify some branches at the end, so it's easier if there are no early returns.", 'Propagate the need to reset children to closest visible Fiber\nThis fixes the bug.', 'When resetting Suspense children, use the fallback child set if needed\nThis fixes the bug I introduced in the previous refactor which Suspense test caught.', 'Enable part of Suspense test that was failing before\nThis PR fixes it.', 'Fix the remaining issue when primary child is null\nThis lets us unlock the rest of the Suspense test.', 'Harden the tests and fix Flow', 'Bump to canary', 'Move stress tests to their own file', 'Remove unused lines', "Bump alpha to get Andrew's fix", 'Remove unnecessary condition', 'Merge pull request #164 from gaearon/fix-lots-of-stuff\nFix reordering and Suspense logic', 'Support configurable node/tree collapsed by default behavior', 'Throw if root node is collapsed', 'Fixed some edge cases with collapsed by default. Still some bugs existing.', 'Fixed a bug with re-ordering of children within a collapsed node', 'Flow fix', 'Improve contrast for light mode', 'Merge pull request #171 from bvaughn/improve-contrast-light-mode\nImprove contrast for light mode', 'Added more inline comments', 'Expanded the reorder tests slightly', 'Merge pull request #168 from bvaughn/collapse-nodes-by-default\nConfigurable tree default collapsed/expanded behavior', 'Initial support for v15+ via new legaacy renderer', 'Added legacy (v15) tests', "Select tab when the mouse is pressed\nSelecting the tab when the mouse is pressed rather than only when it is\nreleased makes tab switching feel faster and also matches how the Chrome dev\ntools behave.\nThe previous tab selection handler which listens for the radio button's\nselection has been kept for the benefit of interaction methods which\ndon't trigger the mousedown handler.", 'Assign timeoutID to avoid multiple requests', 'Merge pull request #175 from lucasecdb/assign-timeout\nAssign timeoutID to avoid multiple requests', 'Merge pull request #174 from robertknight/mousedown-tab-select\nSelect tab when the mouse is pressed', 'Assert removal happens in the right order', 'Merge pull request #178 from gaearon/removal-integrity\nAssert removal happens in the right order', 'Move sync stress tests in their own file', 'Add failing Concurrent Mode stress tests', 'Traverse the previous current tree when switching from primary to fallback', 'Merge pull request #180 from gaearon/suspense-more-fixes\nFix unmounting in Concurrent Mode', 'Fail tests on errors in renderer', 'Fixed a Suspense toggling bug that incorrectly impacted tree weight', 'Merge pull request #182 from bvaughn/suspense-toggle\nFixed a Suspense toggling bug that incorrectly impacted tree weight', 'Fixed bug in reset-children to properly calculate new root weight', 'Update setupTests.js', 'Merge pull request #181 from gaearon/consoleerror\nFail tests on errors in renderer', 'Deploy production extension builds', 'Added a new invariant to the store (bridge operations handler)', 'Harden assertions', 'Refactor: materialize typed array in one place', 'Add failing tests for Suspense with same type', 'Fix more Suspense traversal bugs', "Optimize: don't recreate ID arrays all the time", 'Add Concurrent Mode test', 'Revert accidental change', 'Merge pull request #184 from bvaughn/harden\nHarden assertions', "Don't select search result unless user does something", 'Hardened reorder child invariants', 'Renamed TREE_OPERATION_RESET_CHILDREN -> TREE_OPERATION_REORDER_CHILDREN', "Merge pull request #188 from gaearon/humble-search\nDon't select search result unless user does something", 'Node scripts should fail if not NODE_ENV specified', "Merge branch 'master' of github.com:bvaughn/react-devtools-experimental", 'Increased contrast for selected+inactive background color', "Merge branch 'master' into more-suspensey-stuff", 'Prettier', 'Nits', 'Merge pull request #186 from gaearon/more-suspensey-stuff\nFix more Suspense issues', "Don't reorder a single child", 'No need to reorder empty children either', "Merge pull request #193 from gaearon/no-reorder\nDon't reorder a single child", 'Fixed an OVERVIEW typo', 'Filter out dehydrated Suspense nodes', 'Clear DOM overlay on shutdown', 'Merge pull request #200 from gaearon/clear-stuff\nClear DOM overlay on shutdown', 'Merge pull request #199 from gaearon/another-check\nFilter out dehydrated Suspense nodes', 'Fix scrolling to selected row in collapsed mode', 'Changed style and position of search-for-element button to more closely matchin Chrome ( based on user testing)', 'Push operations directly to the array', 'Replace WeakSet with return pointer check', 'Ignore leading edge of find-by-DOM throttle', 'Merge pull request #206 from gaearon/leading\nIgnore leading edge of find-by-DOM throttle', 'Merge pull request #204 from gaearon/no-weakset\nReplace WeakSet with return pointer check', "Merge branch 'master' into push-ops", 'Merge pull request #203 from gaearon/push-ops\nPush operations directly to the array', 'Use new @reach/tooltip', 'Tweaking focus/active colors and only showing focus rect on tab', 'Tweaked hover and focus colors. Temporarily disabled Tooltip.', 'Renamed CSS var color-text-color to color-text', 'Tidied up CSS variables', 'Fixed focus styles for OwnersStack dropdown toggle button', 'Merge pull request #205 from bvaughn/@reach/tooltip\n[BLOCKED] Use new @reach/tooltip', 'Yarn deploy sets production NODE_ENV', "Toggle method no longer emits 'mutated' event unless it mutated the store", 'Merge pull request #201 from gaearon/scroll-fix\nFix scrolling to selected row in collapsed mode', "Naive suspense implementation for selected element panel\nThis commit leaves a few major things uunresolved:\n* We aren't yet polling for updates\n* We aren't yet using the two setState pattern\n* The resource cache will grow unbounded over time because we aren't yet clearing items from it\n* The renderer interface is not smart enough to avoid resending unchanged data between requests", 'Refactored insepected element cache to use the context API', 'Adding polling and initial stab at not serializing duplicate inspected Element props', 'Tried to implement two setState pattern, but it does not feel right', 'Changed polling approach. Fixed remove event typo.', "Don't schedule an update with React unless the curent element was invalidated", 'Refactored TreeContext to use less memoization (based on feedback from Sebastian)', 'Refactored TreeContext to use less memoization (based on feedback from Sebastian)', "Merge branch 'master' into selected-element-suspense", 'Removed duplicate scheduler module', "fix: correct permissions for Firefox\nremove the background permissions as it's not used by Firefox, but activeTab is and we needed\nit.\nfix #136", 'Run first setState with explicit priority in case of non-React event handlers', 'Fixed bug with cache invalidation', 'Fixed suspense fallback issue by moving inspection message side effect before suspending render', 'Differentiate between no-change and no-element-found when inspecting element', 'Locked down canary versions', 'Added @reach/tooltip', 'Merged master (tooltip changes)', 'Updated flow-bin  to attempt  to  fix the  error', 'Fixed Flow error', 'Re-added the  selection message', 'Reverted optimization to avoid re-sending inspected fiber unless it committed', 'Reverted optimization to avoid re-sending inspected fiber unless it committed', 'Merge pull request #196 from bvaughn/selected-element-suspense\nConvert inspected element (right panel) to use Suspense', "Persist and restore selection in agent\nThis implements the infrastructure for saving and restoring renderer-specific selection state in the session storage.\nNote this doesn't actually implement the calculation and tracking of paths in the renderer. It only simulates that the renderer can do it. The actual implementation will come in a later commit.", "Keep track of root insertion order in the renderer\nNormally, Fibers have key or index which we'll use to match things up between reloads. However, roots don't have such a concept. We'll use their insertion order as an approximation. If it's consistent, we'll be able to restore the selection.", "Implement getPathForElement to serialize the selected path\nNote this doesn't restore the selection yet.", "Match Fibers to saved selection as they mount\nThis implements matching Fibers against the tracked selection path.\nThe algorithm is optimized to do as little checks as possible:\n\nWhen not trying to restore selection, we don't do anything\nWhen restoring selection, we only check .return pointers of new mounts\nOnly when .return pointers match our current deepest match, we compare the frames\n", 'Fix tests', 'Read renderer ID from operations', 'Delete stale paths', 'Read index off the Fiber', 'Merge pull request #215 from bvaughn/persist-selection\nTry to restore selection between reloads', 'Bump React versions', 'Select parent node if selection is removed', 'Merge pull request #218 from gaearon/bump-react\nBump React versions', 'Fixed minor CSS overflow issue', 'Merge pull request #220 from gaearon/removed-ids\nSelect parent node if selection is removed', 'Use a heuristic for locating roots', 'Fix broken start:prod command', 'Mutate the children array', 'Allow to set tracked path multiple times\nFixes #225. This happens when you close and reopen DevTools while on the same page.', 'Merge pull request #221 from gaearon/heuristic\nUse a heuristic for locating roots', 'Merge pull request #226 from gaearon/mutate-children\nImprove performance by mutating the children array', 'Transfer strings in a string table', 'Clarify encoding in overview', 'Let -> const', 'Remove unneeded variable', 'Merge pull request #227 from gaearon/string-table\nTransfer strings in a string table', 'Reverse direction of menu items within drop-down owners list', "Added 'back to owner' button when owners stack is collapsed", 'Moved owners list calculations into the store and added tests\nThis is being done to fix a drill-through bug, although the initial fix is perhaps not the most performant one. At least we have test coverage now and a temporary fix.', 'Refactored owners list to use cached metadata (and added more tests)', 'Merge pull request #223 from bvaughn/owners-list-intermediate-components\nOwners list view should drill through intermediate components', 'Merge pull request #213 from wldcordeiro/fix-firefox-perms\nfix: correct permissions for Firefox', "Support highlighting of all DOM elements of Fragments, not just first\nFixes https://github.com/bvaughn/react-devtools-experimental/issues/131\nUses the new function findAllCurrentHostFibers.\nRemoves dependency on React's renderer.findHostInstanceByFiber function\nwhich used to highlight only the first DOM element of a Fragment.\nReworked src/backend/views/Overlay to support highlighting\nmore than one element rectangle annotated with one tooltip.\nFixed minor issues with the tooltip position calculation.", "Changed owners back button label to say 'Up to <...>'", 'Assert empty maps when there are no roots', 'Merge pull request #230 from gaearon/assert-maps\nAssert empty maps when there are no roots', 'Start using @babel/preset-env', 'Add test coverage for nested Suspense', 'Fix typo recursivelyIniitliazeTree -> recursivelyInitializeTree', "Remove Agent addBridge: there can only be one bridge, add in constructor\nLet's make impossible states truly impossible, and fix Flow types, too.\nAll three usages of Agent called addBridge right after constructing it.\nAgent has one field _bridge which is force-typed as not-null despite\nthere's a temporary zone between the constructor end and addBridge start\nwhere _bridge is null.", 'Add Flow types for Fiber\nFixes https://github.com/bvaughn/react-devtools-experimental/issues/165', "Rename Profiler types to disambiguate which is Frontend and Backend\nFlow IDE shows the original type, not the file-scoped alias,\nso it's confusing to see incompatible variables that have types\nwith the same name.\nThis started from src/devtools/ProfilingCache.js where\nProfilingSummary was incompatible, but I decided to make a bigger\nchange for consistency and to avoid similar mistakes in the future.", 'Fix for \'Attempting to use a disconnected port object\'\nFixes https://github.com/bvaughn/react-devtools-experimental/issues/217\nThe error reproduces with any two React websites, e.g. https://reactjs.org and https://nextjs.org, by keeping the DevTools Components tab open and switching between these websites in the same browser tab.\nThere are several issues with the code that contribute to this:\n1. Bridge leaves behind a dangling timer that fires _flush after the bridge has been abandoned ("shutdown").\n2. bridge.send(\'shutdown\') is asynchronous, so the event handlers do not get unsubscribed in time.\n3. port.onDisconnect does not trigger on in-tab navigation like new URL or back/forward navigation.\n4. State management design of the code that uses shared variables and callbacks makes it hard to handle race conditions originating from the browser.\nThis commit cleans up some of the lacking symmetry when using addListener/removeListener, but the code in shells/browser/shared/src/main.js is hard to reason about with regards to race conditions, and there are many possible race conditions originating from the browser, so maybe there could be a better design paradigm (like a formal state machine) to manage the state changes in response to sequences of events than plain old event listeners, callbacks, and shared variables.\nUnrelated, but clicking Chrome Back/Forward/Back/Forward very fast makes the browser and the DevTools and the DevTools of DevTools stall and become unresponsive for some time, then recovers but the Back/Forward/Stop/Refresh button and favicon loading indicator may remain broken. Looks like a Chrome bug, some kind of a temporary deadlock in handling the browser history.', 'Merge pull request #239 from sompylasar/remove-agent-addbridge\nRemove Agent addBridge: there can only be one bridge, add in constructor', 'Merge pull request #238 from sompylasar/fix-typo-recursivelyinitializetree\nFix typo recursivelyIniitliazeTree -> recursivelyInitializeTree', "Remove Fiber type properties we don't use in DevTools", "Fix Flow failure on CircleCI due to the number of workers\nhttps://github.com/flowtype/flow-bin/issues/138#issuecomment-448416874\nhttps://github.com/flowtype/flow-bin/issues/138#issuecomment-450367472\n\nThis will stop flow from trying to consume too many virtual CPUs (which CircleCI doesn't actually provide), letting it run to completion without first running out of memory and killing its sub processes.\n\nThe log output in CircleCI was:\nhttps://circleci.com/gh/bvaughn/react-devtools-experimental/201\n```\n!/bin/bash -eo pipefail\nyarn flow\nyarn run v1.10.1\n$ /home/circleci/repo/node_modules/.bin/flow\nLaunching Flow server for /home/circleci/repo\nSpawned flow server (pid=259)\nLogs will go to /tmp/flow/zShomezScirclecizSrepo.log\nMonitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log\nLaunching Flow server for /home/circleci/repo\nSpawned flow server (pid=361)\nLogs will go to /tmp/flow/zShomezScirclecizSrepo.log\nMonitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log\nLaunching Flow server for /home/circleci/repo\nSpawned flow server (pid=464)\nLogs will go to /tmp/flow/zShomezScirclecizSrepo.log\nMonitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log\nLaunching Flow server for /home/circleci/repo\nSpawned flow server (pid=567)\nLogs will go to /tmp/flow/zShomezScirclecizSrepo.log\nMonitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log\nLost connection to the flow server (0 retries remaining): -Out of retries, exiting!\nerror Command failed with exit code 7.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\nExited with code 1\n```", 'Merge pull request #247 from sompylasar/fix-flow-on-circleci\nFix Flow failure on CircleCI due to the number of workers', 'Merge pull request #243 from sompylasar/rename-profiler-types-to-frontend-backend-to-disambiguate\nRename Profiler types to disambiguate which is Frontend and Backend', 'Merge pull request #233 from gaearon/preset-env\nStart using @babel/preset-env', 'Merge pull request #234 from gaearon/nested-suspense-test\nAdd test coverage for nested Suspense', "Merge pull request #229 from sompylasar/217-workaround-disconnected-port-error\nFix for 'Attempting to use a disconnected port object'", 'Minor Bridge code tweaks:\n\nRenamed a variable\nCoerced undefined to null\nAdded a couple of console.warn() for unexpected paths\n', "Improve Flow coverage by reducing typecasts through any\nThere are many unnecessary typecasts through any which\nbreak the Flow of types across the program.\nIt's more bulletproof to avoid lying to ourselves about types.\nAlso fixed sketchy null check where zero ID would be skipped:\ndiff\n-  } else if (selectedElementID) {\n+  } else if (selectedElementID !== null) {", 'Fix profiling screenshots data structure to map rootID to commitIndex\nPropagate rootID throughout the code for captureScreenshot.\nRename private profiling maps of store to make relations more clear.\nFix missing cleanup for screenshots data in set importedProfilingData of store.', 'Clear profiling data for root when the root is unmounted\nFixes https://github.com/bvaughn/react-devtools-experimental/issues/232', 'Use WebpackDevServer for local testing', 'Merge pull request #251 from gaearon/devserver\nUse WebpackDevServer for local testing', 'Rearranged Settings UI in prep for custom filter controls', 'Reorganized types shared between backend and frontend slightly.', 'Initial pass at adding filter-by-type Flow types and support to renderer', 'Added filter preference types and plugged into renderer partly. Lots of work to do still.', 'Refactored filter preferences a bit more to be stored in the Store', 'Filter changes are applied to the renderer without reloading', 'Removed FilterList UI for now (collapsed into Settings component)', 'Prevent filter preference changes while profiling is active', 'Fixed a path selection bug when filter pereferences are updated', 'Add support for hide-by-name and hide-by-path component filter regexps', 'Added filter UI (but with a lot of $FlowFixMe comments)', 'Added some component filtering tests', 'Removed $FlowFixMe comments', 'Renamed FilterType -> ComponentFilterType', 'Misc cleanup', 'Updated Flamechart to support multiple nodes at root', 'Merge pull request #245 from bvaughn/custom-filtering\nAdd configurable component filters', 'Merge pull request #207 from sompylasar/131-highlight-all-children\nSupport highlighting of all DOM elements of Fragments, not just first', 'Added badge for enabled filter count', 'Fixed bug in Store.getIndexOfElementID() that caused roots with multiple top-level children to return an incorrect item index', 'Fixed broken path-selection after filter changes', "Merge branch '165-add-flow-types-for-fiber' of https://github.com/sompylasar/react-devtools-experimental into sompylasar-165-add-flow-types-for-fiber", 'Removed optional_chaining from Flow config', 'Removed findCurrentFiberUsingSlowPath() in favor of findCurrentFiberUsingSlowPathById()', 'Merge pull request #242 from sompylasar/improve-flow-coverage-any\nImprove Flow coverage by reducing typecasts through any', 'Fixed deploy script', 'Right-align flame graph children', "Merge branch '232-clear-profiling-data-for-unmounted-root' of https://github.com/sompylasar/react-devtools-experimental into sompylasar-232-clear-profiling-data-for-unmounted-root", 'Renamed assertOneMap -> assertEmptyMap', 'Merge pull request #257 from bvaughn/right-align-flame-graph\nRight-align flame graph children', "Merge branch 'master' into sompylasar-232-clear-profiling-data-for-unmounted-root", 'Only clear Profiling snapshot on root-unmount', 'Store profiler snapshot data by root (and clear on root unmount)', 'Experimenting with profiler tests', 'Cleaned up tests a bit. Profiling test uses mock timers now.', 'Added a second Profiling test (for CommitDetails) and fixed some module reset prolems', 'Added remaining profiling tests. One currently fails because of a bug with act() and interaction tracing', 'Updated snapshot data after ReactDOM batch fix', 'Removed outdated TODO comment', 'Added Flow types to profiling test', 'Hardened tests to ensure expectations are flushed', 'Added profiling chart data tests', 'Added commit tree builder test', 'Update to React canary release for interaction tracing bugfix', 'Prettier', 'Merge pull request #258 from bvaughn/profiler-test-experiments\nAdded profiler tests', 'Added export+import profiling data test coverage\nAlso fixed an incomplete import feature as well as a regression in export that had gone unnoticed due to previous lack of test coverage.', 'Show import error dialog if profiling data import fails', 'Fixed a deprecated prop warning from react-window', 'Upgrade @reach UI and remove tooltip fork', 'Fixed invalid DOM nesting warning', 'Profiler: Improve labels for times that round to 0.0ms', 'Updated lint ignore for new dev shell dist folder', 'Add toggle-suspense button to all elements\nThis button is disabled if the renderer returns canToggleSuspense=false.', 'Added installation instructions to README', 'Uses FormDuration and FormTime to format times that are 0 into something more readable', 'updates snapshots and removes extra formatting from formatTime', 'Custom filters are applied by default after extension reload', 'Merge pull request #262 from submetu/enhancement/label-improvement\nProfiler: Improve labels for times that round to 0.0ms', 'Updated Profiling chart tests to cover components with duration=0', 'Fixed a Profiler memoization bug and improved test coverage', 'Tweaked REAMDE', 'Dim owners that have been filtered from the tree in rendered-by list', "Fetch owners list from renderer (using suspense)\nOwners in the list may have been filtered out of the Store, but in the owners list view- it's important to still show them. The frontend cannot do this on its own, so this list needs to come from the renderer interface.", 'Added Jest tests for OwnersListContext', 'Fixed test describe name', 'Added TreeContext tests', 'Fixed owners stack direction and added current element to stack', 'rewrite test act helpers based on react/#15591\nThis simplifies your test helpers to loop until all timers are flushed (including the ones that get queued after updates), and works in concurrent mode. I also renamed actSuspense to actAsync to be clearer.', 'pretty, witty, fine', 'reverting the rename', 'Added more tree context tests', 'Merge pull request #264 from bvaughn/filter-owners-list\nFetch owners list from renderer (using suspense)', 'Test utils actSuspense -> actAsync', 'Added basic tests for InspectedElementContext', 'Fixed build chrome not working on Windows due to rm command not existing', 'Delete package-lock.json', 'Merge pull request #268 from frankcalise/master\nFixed build chrome not working on Windows due to rm command not existing', 'Replaced adm-zip with node-archiver', 'Changes display of ForwardRef and Memo components', 'updates snapshots', 'Moved calculation of self duration to the backend/renderer\nThis enables self duration to be computed accurately despite component filters', 'Bumped Profiler export version (since self durations are now included)', 'Merge pull request #271 from tux-tn/master\nReplaced adm-zip with node-archiver', "Merge branch 'enhancement/display-change' of https://github.com/submetu/react-devtools-experimental into submetu-enhancement/display-change", 'CSS tweaks', 'Changed "Unknown" fallback displayName to "Anonymous". Added memo/forwardRef labels to Profiler charts.', 'Cleanup profile export/import data types, add export/import test\nStrengthened the I/O-boundary type conversion logic.\nFixed type inconsistencies uncovered by removing any and\nby making explicit type annotations and transformations.\nIn particular, these were likely malformed when restored from a file:\n- commitDetails\n- interactions\n- initialTreeBaseDurations\nThe mismatches were Map vs interleaved Array.', 'Minor nits', 'Improve scanning Profiler chart for deep renders', 'Fix undefined chart node when switching commits in profiler', 'Merge pull request #275 from lucasecdb/fix/undefined-chartnode\nFix undefined chart node when switching commits in profiler', 'Fixed snapshot diff', 'Show commit priority levels in Profiler UI', 'Moved priority level constants into rendeer interface', 'Updated test snapshot', 'Upgraded to canary with priority level info', 'Merge pull request #274 from bvaughn/commit-priority-level\nShow commit priority levels in Profiler UI (if available)', 'Renamed Store importedProfilingData -> profilingData', 'Massively overhauled profiling data architecture', 'Added root selector UI to Profiler', "Added export to web shell and removed 'downloads' API permission", 'Moved profiling data to ProfilerContext to fix re-import bug', 'Updated event subscriptions and getters to use new ProfilerStore', 'Cleaned up some tests', 'Bumped Profiler exported data version', 'Tweaked did-not-render text color to be slightly dimmer', 'Changed export code to (hopefully) support larger exports', 'Fixed a state cleanup issue if Profiler data is cleared', 'Add datetime to the profiling export filename', 'Merge pull request #279 from bvaughn/profiling-architecture-eager-data-push\nRefactor Profiler architecture', 'Profiler properly handles unmounted roots', 'Fixed a missing remove-event-listener in ProfilerStore', '[Flare] Ensure DOM inspection is Flare compatible', 'Tweak', 'Use @reach tooltips for TabBar, cleanup supports-profiling subscription', 'Add Tab id to Tooltip', 'Persist profiling data after navigation', 'Added ProfilerContext tests', "Merge pull request #281 from bvaughn/persiste-profiling-data-after-navigation\n[WIP] Don't erase profiler data on navigation", 'Moved profiling-supported subscription into ProfilerContext', 'Improved visual style of Profiling-disabled button', 'Update profiling-supported status each time roots change (and added tests)', 'Adds inspectable event components + props\n[Flare] Adds inspectable event components + props', 'Run prettier', 'Update snapshot tests', 'Remove snapshot', 'Tweaked event display name logic', 'Added a sanity test for Bridge shutdown', 'Tweaked Bridge shutdown sequence slightly', 'Handle HTTPS Git clone URLs', 'Fix potential RTE caused by setting (saved) profiling data while profiling is in progress', 'Cache inspected element data until it is updated', "Don't (re)serialize inspected elements either unless they have re-rendered since last inspected.", 'Reorganize inspected element state vars slightly', 'Merge pull request #289 from bvaughn/cache-inspected-element\nCache inspected element data until it is updated', 'Added section about inspecting element to OVERVIEW', 'Updated profiler overview', 'Decreased contrast of disabled button icons to look more obviously disabled', 'Merged master', 'Added another (disabled) test; refactored getChildren slightly', 'Added  and view-source support for Memo components', 'Merged master', "Updated Chrome installation\n\nRemoved auto-updates XML (since the feature doens't work for self hosted extensions)\nReplaced CRX with packed ZIP (since people are having trouble with the CRX, and auto-udpates doesn't work anyway)\n", "Merge remote-tracking branch 'upstream/master' into act-async", 'pass tests and flow', 'prettier', 'Tweaks', 'Backed out Bridge shutdown refactor as it seems to have introduced bugs', 'Added selected and hovered guidelines to Components tree', 'Turn off pointer events for guidelines', 'Fixed bad Bridge disconnections', 'Remove hover guideline in favor of showing guidelines for every nesting level', 'Show indent lines preference', 'Remove unnecessary code for host text as we skip it anyway', 'Default to showing host nodes for legacy renderer', "Remove crawling for updates\nIt doesn't seem necessary to crawl because mounts only happen in the context of updates.\nThis fixes updates to not be treated as new mounts.", 'Add some support for reordering', 'Initial POC for compressing horizontal offset for wide/deep trees', 'Re-added indent lines', 'Revert "Re-added indent lines"\nThis reverts commit 33432b037f2e539b3e7c479e594960e6fd60eaa3.', 'Lots of tweaks\nRemove selected guideline in favor of background color for selected subtree.\nAdd badges in grid format to selected elements prop panel.\nShow badges beside owners list.', 'Whoops I broke CI (updating snapshots)', 'Tweaked a few styles', 'Tweaked guideline background color style', 'Added debounce and animation for resize', 'Removed debounce+animation from indentation adjustment', 'Disable guide/group highlight in owners tree  mode', 'Added HOC badge to owners stack breadcrumbs', 'Refactored badges to share code and show +count', 'Cleaned up how we measure children and adjust indentation size', 'Fixed a typo in string truncation util', 'Fixed box drawing chars comment', 'Added HOC badge to owners list dropdown', 'Cache list rows by Element ID rather than index\nThis is important since we are caching element sizes by DOM (in a WeakMap). Toggling (as well as insertion/deletion) might otherwise break this in some cases.', 'Removed Tree padding', 'Cap indentation increase at a max', "Only shrink indentation. Don't increase it again. This avoids 'jumping'.", 'Add HOC component filter', 'Reset max indentation when entering/exiting the owner tree', 'Removed outdated comment and Eslint rule ignore', 'Renamed  to ', 'Simplified background highlight style now that corner radius has been removed from selected highlight', "Batched tweaks and bug fixes:\n\nBugfix: Hide tree grouping/background coloring when inside of collapsed subtree.\nBugfix: Don't measure and udpate indentation when Components tab is hidden.\nTweak: Lower background color for selected subtree in light theme to increase contrast for text.\nTweak: Remove FB-specific displayName check/hack since we will address that by modifying the internal require JS transform.\n", 'Decreased contrast of HOC badges in selected props panel', "Display density preference updates :root fontSize\nAs a result, paddings and sizes (e.g. tab bar heights) will also be impacted now by this preference. More importantly, Profile charts will also use the line height preference, so the 'comfortable' setting will hopefully make profiling data easier to read.", 'Add source location to debug logging info', 'Merge pull request #295 from bvaughn/horizontal-compression\nComponents tree changes to improve HOCs and browsing deep trees', 'fix: remove version_name from Firefox WebExtension manifest', 'Tweaked manifest "version_name" logic', 'Removed __source info from production builds', 'Vendored react-window', 'react-window sync flushes scroll updates', 'Changed react-window alias', 'Re-add plugin-transform-react-jsx-source plugin for tests', 'Fixed an overflow bug. Added mode-specific CSS style for Firefox.', 'Wrap all calls to localStorage/sessionStorage to avoid potential runtime errors', 'Updated reload-and-profile temp key to use sessioStorage instead of localStorage', 'Backend notifies the frontend of Storage API support. Frontend disables e.g. reload-and-profile based on this.', 'Bump js-yaml from 3.12.1 to 3.13.1\nBumps js-yaml from 3.12.1 to 3.13.1.\n- Release notes\n- Changelog\n- Commits\nSigned-off-by: dependabot[bot] support@github.com', 'Merge pull request #308 from bvaughn/dependabot/npm_and_yarn/js-yaml-3.13.1\nBump js-yaml from 3.12.1 to 3.13.1', 'Added HOC filter test', 'Added HOC badges to Jest Store serialization', 'Initial change tracking implemented\n* User profiling setting\n* Background collects changed props/state (not added/removed or hooks yet)\n* Tests updated', 'Rewrite to make it sturdier', "Merge branch 'master' into legacy", 'Fixes', 'Fix lint', 'Remove dead code', 'Added context support to change description', 'Fixed an increment bug in sidebar for fiber-commits', 'Added a test for added/removed props', 'Fixed some minor CSS issues', 'Added context changes to sidebar; fixed a initial-mount detection bug', 'Only show "rendered at" if selected Fiber committed at least once', 'Fix minor toolbar border misalignment', 'Tweaked a few inline comments', "Added an explicit 'did not render' label", 'Merge pull request #310 from bvaughn/track-changed-props\nAdd profiling option to track why a component rendered', 'Added Flow type coverage for all EventEmitter subclasses', "Merge branch 'master' into legacy", 'Fixed regression fixtures', 'Nit', 'Merge pull request #173 from bvaughn/legacy\nSupport legacy React versions', 'Fixed minor border bug in Profiling tab toolbar', 'Removed Settings panel in favor of new shared Settings modal', 'Remember last preferences tab via local storage', 'Removed console.log', 'Moved logic to only send updated filters across Bridge to the Store (and added tests)', 'Merge pull request #315 from bvaughn/settings\nSettings panel inlined', 'Make children selection lighter', 'Merge pull request #316 from gaearon/lighter\nMake children selection lighter', 'Ignore SSR mounts', 'Maintain rootID for lazily crawled trees', 'State and context are on the public instance', 'Distinguish functions and classes', 'Merge pull request #319 from gaearon/legacy-fix\nFix some legacy backend bugs', 'Fix owner tree for legacy backend', 'Merge pull request #320 from gaearon/own\nFix owner tree for legacy backend', 'Support toggling Suspense from within owners list', 'Lintfix', 'Updated hydration logic to handle custom objects', 'Updated React version check to account for older (<15) versions', "Don't send HTMLElements through the bridge when inspecting componetns", 'fix: ensure when-rendered content is never hidden', 'Initial support for hydration added to both renderer interfaces.', 'Added props/state/context inspection to KeyValue', 'Hooks hydrate/dehydrate', 'Updated the hydration test harness to cover a bit more', 'Tidied up a bit', 'Debounce inspect-element polling', 'Tidied up. Added comments. Renamed a few things.', 'Hardened the hooks dehydration check', 'Merge pull request #325 from bvaughn/hydration\nLazily send props/state/hooks across the bridge', "Merge branch 'when-render-hidden' of https://github.com/justingrant/react-devtools-experimental into justingrant-when-render-hidden", 'Tweaked overflow check', 'Fixed hydration for events meta data', "Display unnamed custom hooks as 'Anonymous'", 'Added command to build Chrome CRX', "Don't try to convert absolute paths to relative", '[Flare] Update event component displayName', 'Changed Chrome manifest version from 4.0.0.0 to 4.0.0', 'Updated @reach/tooltip to v0.2.2 for a bugfix', 'Merge pull request #331 from trueadm/flare_displayName\n[Flare] Update event component displayName', 'Mark reload-and-profile attach as configurable', 'Add comment about 3rd party integrations', 'Merge pull request #342 from marvinhagemeister/attach_configure\nFix reload-and-profile attach not configurable', "Standalone NPM packages and React Native support (#335)\n\nAdd version 4 react-devtools and react-devtools-core packages which support both React Native and e.g. Safari or iframe DOM usage.\nReplaces typed operations arrays with regular arrays in order to support Hermes. This is unfortunate, since in theory a typed array buffer could be more efficiently transferred between frontend and backend for the web extension, but this never actually worked properly in v8, only Spidermonkey, and it fails entirely in Hermes so for the time being- it's been removed.\nAdds support for React Native (paper renderer)\nAdds a style editor for react-native and react-native-web\n", 'fix to input a number value to props', 'Patch console to append component stacks (#348)\n\nPatch console.warn and console.error to auto-append owners-only component stacks.\n\nThis setting is enabled by default and will work for React Native even if no front-end DevTools shell is being used. The setting can be disabled via a new, persisted user preference though.', 'Hardened logic around when and how to patch console methods', 'Detect React Native v3 backend and show warning', 'Tweaked modal title to better fit without wrapping', 'Tweaked modal font size style', 'Make my code PRETTIER', 'Cleanup legacy backend event listener if modern backend is detected', "Merge branch 'fix-input-number-in-props' of https://github.com/koba04/react-devtools-experimental into koba04-fix-input-number-in-props", 'Slight tweak to avoid setting an invalid numeric value in props editor', 'Updating NPM packages as 4.0.0-alpha.0', 'Make console override detectable (for RN YellowBox)', "Removed reference to setDefaultThemeName() method\nThis functionality was added to v3 to support external changing of theme at runtime. This isn't supported in v4.", 'Improve Bridge Flow types (#352)\n\nUpdated local fork of react-window\nUpdated Fow 97 -> 103\nLint ignore NPM dist\nImproved Bridge Flow types\n', 'NPM packages 4.0.0-alpha.0 -> 4.0.0-alpha.1', 'Fixed a module resolution issue and a syntax error from a bad merge', 'Removed accidental log statement', 'Misc improvements based on user feedback from Tim\n\nAdded shadow to modals\nChange default "collapse new nodes" to be disabled rather than enabled\nChanged setting label "Collapse newly added components by default" to "Expand component tree by default"\nChange CSS media query for settings popup to show labels at smaller size\nHide "Inspect the matching DOM element" button (since it doesnt really serve a purpose in standalone)\nFixed small size bug for settings icon (viewbox of 20x20 instead of 24x24)\nbugfix: window.addEventListener/window.removeEventListener is not defined in Hermes.\n', '4.0.0-alpha.1 -> 4.0.0-alpha.2', 'Updated snapshot', 'Disable view-source button in standalone mode if no project roots are provided', 'Hide "style" prop if we are showing the style editor\nAlso add react-native-web to test harness', 'Make style editor inputs more obvious resemble inputs', '4.0.0-alpha.2 -> 4.0.0-alpha.3', 'Reverted style-prop hiding change because it caused a regression in the browser extension', 'Support new Flare hook, unstable_useListener', '[Flare] Remove the old EventComponent/EventTarget system (#354)', 'Flow type cleanup', 'Re-enable "view source" button for standalone shell\nBut only do this if we can verify the element file path. This hopefully avoids the case where clicking the button does nothing because of an invalid/incomplete path.', '4.0.0-alpha.3 -> 4.0.0-alpha.4', 'Re-enabled packages backend build to be production mode (whoops)', 'react-devtools-core standalone bugfix: prevent electron crash\nCSS source maps require the style-loader to use URL.createObjectURL (rather than just a ', 'NPM package versions 4.0.0-alpha.4 -> 4.0.0-alpha.5', 'Feature: tweak search behaviour (#353)\nMerge PR #353 from @fanny\nThis change changes search beahvior to initially select the result nearest the currently selected element (rather than selecting the first result in the set).', "Tweaked recent search changes\n\nCompare element indices rather than ids (since these don't necessarily correlate)\nRestored previous behaior when new search text reduces the number of results past the currently-selected element.\n", 'Reverted a Webpack config change that broke browser extension styles', 'Allow Inspecting Elements Within Iframes (#355)\nThis change adds support for element inspecting within <iframe/>s.\nThe iframes are kept in a Set so that we only append listeners once and\nclean them up properly. I’ve run a few tests and it seems to behave as\nexpected.\nThe fixture includes a cross-origin iframe to make sure we do not error\nin this case.', "Re-add try/catch inside Agent's getIDForNode()", 'Added missing Flow header', 'Added CHANGELOG', 'Add "Welcome to the new DevTools" notification\nThis dialog is shown in the browser extension the first time a user views v4. It is off by default for the standalone extension, but can be enabled via a public API.', "Removed the Profiler screenshot capture feature\nThis wasn't reliable because of browser extension API limitations and required serious throttling to avoid harming performance, so I've decided to just remove it entirely for now.", 'Added dynamic indentation to change log', "Updated CHANGELOG based on Dan's feedback", 'Updated OVERVIEW doc', 'Element keys are selectable text\nChanged truncation to be CSS-driven, and enabled double-click selection of text, so that long keys could be copied from within the tree.', 'Added CHANGELOG entries for HOC badges and no in-line props', 'NPM package versions 4.0.0-alpha.5 -> 4.0.0-alpha.6', 'Updated Flow type for DevTools tab id', "Don't let a DevTools or React internal error interfere with logging.", '[Flare] useListener -> useResponder (#362)', 'Refactor inspect/select logic so that $r contains hooks data (#364)\n\nRefactor inspect/select logic so that  var contains hooks data\nLegacy renderer resets $r to null when inspecting non class/function element\n', 'Suppress known/expected warnings and errors in local DEV shell', 'feat: match HOC display names during search (#360)\n\n\nfeat: match HOC display names during search\n\n\nchore: update tests for new search logic\n\n', 'New NPM package react-devtools-inline (#363)', 'Inline package tweaks:\n* Ignore messages from the DevTools browser extension.\n* Cleanup/clarify README', 'Fix hydration bug with nested suspense boundaries (#16288)\nThis happens in this case: <!--$!--><!--$!-->...<!--/$--><!--/$-->...\ngetNextHydratableInstanceAfterSuspenseInstance didn\'t take\nSUSPENSE_FALLBACK_START_DATA or SUSPENSE_PENDING_START_DATA into account\nso if a boundary was in one of those states, it wouldn\'t be considered to\npush the stack of boundaries. As a result the first end comment was\nconsidered the end but it really should\'ve been the second end comment.\nThe next comment then would\'ve been considered something that can be\nskipped. However, since the logic in there considered all comments as\n"hydratable", it was considered a hydratable node. Since it was considered\na node that didn\'t actually correspond to anything in the React tree it got\ndeleted.\nThe HTML is now <!--$!--><!--$!-->...<!--/$-->... and the trailing\ncontent is now hydrated since it did match something.\nNext, since this was client rendered, we\'re going to delete the suspended\nboundary by calling clearSuspenseBoundary and then inserting new content.\nHowever, clearSuspenseBoundary is aware of SUSPENSE_FALLBACK_START_DATA\nand assumes that there must be another <!--/$--> after the first one.\nAs a result it deleted the trailing content from the DOM since it should\nbe part of the boundary. However, those DOM nodes were already hydrated in\nthe React tree. So we end up in an inconsistent state.\nWhen we then try to insert the new content we throw as a result.\nI think we would have recovered correctly if clearSuspenseBoundary and\ngetNextHydratableInstanceAfterSuspenseInstance had the same bug but\nbecause they were inconsistent we ended up in a bad place.', "Handle case where :root styles aren't (yet) applied when SettingsContext mounts\nThis fixes a possible bug in the inline shell where line-heights are NaN so the Tree (react-window List) gets created with a itemSize of NaN", 'Added not about sync/batched root API being required', '[react-events] Add ContextMenu responder (#16296)\nA module for responding to contextmenu events. This functionality will be\nremoved from the Press responder in the future.', '[react-events] Separate the Focus/FocusWithin unit tests (#16298)', '4.0.0-alpha.7 -> 4.0.0-alpha.8', 'README typofix', '[Flare] Adds support for hydrating host components with listeners (#16304)', 'Warn when Using String Refs (#16217)', 'Nit: fix inconsistent spacing in a warning (#16310)', 'Ensure Fundamental flags are added to more locations (#16311)', 'Reset hydration state after reentering (#16306)\nWe might reenter a hydration state, when attempting to hydrate a boundary.\nWe need to ensure that we reset it to not hydrating once we exit it.\nOtherwise the next sibling will still be in hydration mode.', '[Fresh] Support multiple renderers at the same time (#16302)', '[Flare] Remove contextmenu logic from Press (#16322)', 'Changelog for 16.9 (#16254)\n\n\nChangelog for 16.9 (TODO: add date)\n\n\nUpdate CHANGELOG.md\n\n\nAdd date\n\n', 'Bump package.json versions', 'Prepare use-subscription v1 for publishing (#16324)', 'Bump deps in packages/**/package.json (#16325)', "[Scheduler] Store Tasks on a Min Binary Heap (#16245)\n\n[Scheduler] Store Tasks on a Min Binary Heap\n\nSwitches Scheduler's priority queue implementation (for both tasks and\ntimers) to an array-based min binary heap.\nThis replaces the naive linked-list implementation that was left over\nfrom the queue we once used to schedule React roots. A list was arguably\nfine when it was only used for roots, since the total number of roots is\nusually small, and is only 1 in the common case of a single-page app.\nSince Scheduler is now used for many types of JavaScript tasks (e.g.\nincluding timers), the total number of tasks can be much larger.\nBinary heaps are the standard way to implement priority queues.\nInsertion is O(1) in the average case (append to the end) and O(log n)\nin the worst. Deletion is O(log n). Peek is O(1).\n\nSophie nits\n", "Babel 7 (#16297)\nUpgraded from Babel 6 to Babel 7.\nThe only significant change seems to be the way @babel/plugin-transform-classes handles classes differently from babel-plugin-transform-es2015-classes. In regular mode, the former injects a _createClass function that increases the bundle size, and in the latter it removes the safeguard checks. However, this is okay because we don't all classes in new features, and we want to deprecate class usage in the future in the react repo.\nCo-authored-by: Luna Ruan luna@fb.com\nCo-authored-by: Abdul Rauf abdulraufmujahid@gmail.com\nCo-authored-by: Maksim Markelov maks-markel@mail.ru", 'Add use-subscription to Rollup bundle config (#16326)', 'use a different link in the UNSAFE_ component warnings (#16321)\nWhen React detects a deprectated/unsafe lifecycle method, the warning points to a page with more details on the why/what of the warning. However, the actual link (https://fb.me/react-async-component-lifecycle-hooks) uses the phrase "lifecycle-hooks" which is confusing since it doesn\'t have anything to do with hooks. This PR changes the link to something less confusing - https://fb.me/react-unsafe-component-lifecycles.', "[act] remove obsolete container element (#16312)\nIn a previous version of act(), we used a dummy dom element to flush effects. This doesn't need to exist anymore, and this PR removes it. The warning doesn't need to be there either (React will fire a wrong renderer act warning if needed).", "fix some missing assertions (#16336)\nThese were discovered by @SimenB in https://github.com/facebook/react/pull/16332. We weren't making actual assertions on some values. This PR makes the assertions, and fixes the tests.", "[react-events] Refactor unit tests for Hover (#16320)\nProblem\nThe existing responders listen to pointer events by default and add fallback events if PointerEvent is not supported. However, this complicates the responders and makes it easy to create a problematic unit test environment. jsdom doesn't support PointerEvent, which means that the responders end up listening to pointer events and fallback events in unit tests. This isn't a direct problem in production environments, because no browser will fire pointer events if they aren't supported. But in the unit test environment, we often dispatch event sequences taken from browsers that support pointer events. This means that what we're often testing is actually a (complex) scenario that cannot even occur in production: a responder that is listening to and receives both pointer events and fallback events. Not only does this risk making responders more complicated to implement but it could also hide bugs in implementations.\nResponse\nImplement the responders so that they're only listening to either pointer events or fallback events, never both. This should make the default pointer events implementations significantly simpler and easier to test, as well as free to rely on the complete PointerEvents API. In the future it should also make DCE easier for target environments that are known to support PointerEvents, as we can use build tools with an equivalent of the runtime check. The fallback events (touch and mouse) need to coexist and be resilient to browser emulated events. Our unit tests should express a suite of high-level interactions that can be run in environments with and without PointerEvents support.", 'Mark spawned work for client-rendered suspense boundary (#16341)\nCurrently this is getting marked as Never which is the normal continuation\nfor a dehydrated boundary, but if it is client-rendered it has a higher\npriority. That causes us to drop the interaction tracing for that render.\nThis colocates the marking where we actually set the expiration time.', "Upgrade ESLint so we can use JSX Fragment syntax (#16328)\nNow that we're using Babel 7, this is the last blocker.", 'Release script supports publishing a subset of packages (#16338)\nRelease script supports publishing a subset of packages (#16338)', "[Scheduler] Temporarily remove wrapper function (#16345)\nThis code is being compiled incorrectly by something in the Facebook\nbuild pipeline. I'm removing it temporarily to unblock the sync while\nwe investigate.", 'Make SchedulerMinHeap flow strict (#16351)\n@acdlite while browsing Twitter, I saw an opportunity to do\nsomething more productive than browsing Twitter.\nTest plan:\nyarn flow-ci, yarn test-prod, yarn lint', 'Fixed a couple of edge case styling and layout issues I noticed while testing the inline target', 'Fixed raw-loader + Jest problem', '[react-events] Focus/FocusWithin responders with fallbacks (#16343)\nSeparate the PointerEvent and fallback implementations.\nFix the unit tests to cover both PointerEvent and non-PointerEvent environments.\nFix the focus-visible related callbacks to get called when keys other than "Tab" are used.', 'Fixed a selection-sync edge case for Elements/Components tabs', 'Misc. Profiler tweaks\n\nDisabled (with a follow up TODO) the  call in the reload-and-profile toggle.\nDisabled reload-and-profile in Firefox extension for now, since it was triggering a disconnected port error.\nFixed Safari layout bug that caused profiler charts to be hidden.\n', '4.0.0-alpha.8 -> 4.0.0-alpha.9', '[react-events] Fix keyboard responder test (#16368)', "Reset didReceiveUpdate in beginWork (#16359)\nThis is a bad bug. It means that we sometimes inherit\ndidReceiveUpdate from a previous component's begin.\nEffectively this only means that we're overrendering in some cases.\nWe should refactor to get rid of this as a global flag.", 'Remove flag that reverts #15650 (#16372)\nThe change in #15650 has fully rolled out, so we can remove the flag\nthat reverts it.', "Remove unused import\nThat's why you wait for the lint job to finish, Andrew!!!!!!", 'Fix typo in error code map (#16373)\n"responer" -> "responder"\nI also removed an unused error code that never shipped.', "Refactor Partial Hydration (#16346)\n\nMove dehydrated to be child of regular SuspenseComponent\n\nWe now store the comment node on SuspenseState instead and that indicates\nthat this SuspenseComponent is still dehydrated.\nWe also store a child but that is only used to represent the DOM node for\ndeletions and getNextHostSibling.\n\nMove logic from DehydratedSuspenseComponent to SuspenseComponent\n\nForked based on SuspenseState.dehydrated instead.\n\nRetry logic for dehydrated boundary\n\nWe can now simplify the logic for retrying dehydrated boundaries without\nhydrating. This is becomes simply a reconciliation against the dehydrated\nfragment which gets deleted, and the new children gets inserted.\n\nRemove dehydrated from throw\n\nInstead we use the regular Suspense path. To save code, we attach retry\nlisteners in the commit phase even though technically we don't have to.\n\nPop to nearest Suspense\n\nI think this is right...?\n\n\nPopping hydration state should skip past the dehydrated instance\n\n\nSplit mount from update and special case suspended second pass\n\n\nThe DidCapture flag isn't used consistently in the same way. We need\nfurther refactor for this.\n\nReorganize update path\n\nIf we remove the dehydration status in the first pass and then do a second\npass because we suspended, then we need to continue as if it didn't\npreviously suspend. Since there is no fragment child etc.\nHowever, we must readd the deletion.\n\n\nSchedule context work on the boundary and not the child\n\n\nWarn for Suspense hydration in legacy mode\n\n\nIt does a two pass render that client renders the content.\n\nRename DehydratedSuspenseComponent -> DehydratedFragment\n\nThis now doesn't represent a suspense boundary itself. Its parent does.\nThis Fiber represents the fragment around the dehydrated content.\n\nRefactor returns\n\nAvoids the temporary mutable variables. I kept losing track of them.\n\nAdd a comment explaining the type.\n\nPlacing it in the type since that's the central point as opposed to spread\nout.", "Dehydrated suspense boundaries in suspense list (#16369)\nIf we get an insertion after a boundary, that has not yet been hydrated,\nwe take our best guess at which state the HTML is showing.\nisSuspenseInstancePending means that we're still waiting for more server\nHTML before we can hydrate. This should mean that we're showing the\nfallback state.\nisSuspenseInstanceFallback means that we want to client render something.\nThat most likely means that the server was unable to render and is\ndisplaying a fallback state in this slot.\nAdds tests to ensure that dehydrated components don't consider the force\nflag.", 'Add test case for #16359 (#16371)', 'Initializing empty merge repo', 'Merging DevTools fork', 'Reorganized to avoid merge conflicts with React repo folder structure', "Merge remote-tracking branch 'devtools-merge/master' into devtools-v4-merge", 'Moved dev shell into fixtures/devtools', 'Updated yarn.lock file', 'Reorganized fixtures', 'Reorganized things again into packages', "[CI] Disable coverage (#16380)\nLooks like it's broken. Don't know if this will work to disable it while we figure out why?", 'Cleanup Babel PR (ReactFreshPlugin) (#16340)\n\n\nfix babel 7 issues\n\n\nfix babel 7 issues\n\n', 'Remove "Waiting for async callback" User Timing measurement (#16379)\n\n\nRemove "Waiting for async callback" User Timing measurement\n\n\nFix User Timing in PROD mode\n\n', 'Make component stack last argument for deprecation warnings (#16384)', 'Reorganized folders into packages/*', 'Misc Flow and import fixes\n\nFixed all reported Flow errors\nAdded a few missing package declarations\nDeleted ReactDebugHooks fork in favor of react-debug-tools\n', 'Prettier', 'Moved shell fixture into packages/react-devtools-shell', 'Prettier', "[Partial Hydration] Attempt hydration at a higher pri first if props/context changes (#16352)\n\n\nTest that we can suspend updates while waiting to hydrate\n\n\nAttempt hydration at a higher pri first if props/context changes\n\n\nRetrying a dehydrated boundary pings at the earliest forced time\n\n\nThis might quickly become an already expired time.\n\nMark the render as delayed if we have to retry\n\nThis allows the suspense config to kick in and we can wait for much longer\nbefore we're forced to give up on hydrating.", "Partial support for React.lazy() in server renderer. (#16383)\nProvides partial support for React.lazy() components from the existing PartialRenderer server-side renderer.\nLazy components which are already resolved (or rejected), perhaps with something like react-ssr-prepass, can be continued into synchronously. If they have not yet been initialized, they'll be initialized before checking, opening the possibility to exploit this capability with a babel transform. If they're pending (which will typically be the case for a just initialized async ctor) then the existing invariant continues to be thrown.", "[Scheduler] Profiling features (#16145)\n\n[Scheduler] Mark user-timing events\n\nMarks when Scheduler starts and stops running a task. Also marks when\na task is initially scheduled, and when Scheduler is waiting for a\ncallback, which can't be inferred from a sample-based JavaScript CPU\nprofile alone.\nThe plan is to use the user-timing events to build a Scheduler profiler\nthat shows how the lifetime of tasks interact with each other and\nwith unscheduled main thread work.\nThe test suite works by printing an text representation of a\nScheduler flamegraph.\n\nExpose shared array buffer with profiling info\n\nArray contains\n\nthe priority Scheduler is currently running\nthe size of the queue\n\nthe id of the currently running task\n\n\nReplace user-timing calls with event log\n\n\nEvents are written to an array buffer using a custom instruction format.\nFor now, this is only meant to be used during page start up, before the\nprofiler worker has a chance to start up. Once the worker is ready, call\nstopLoggingProfilerEvents to return the log up to that point, then\nsend the array buffer to the worker.\nThen switch to the sampling based approach.\n\nRecord the current run ID\n\nEach synchronous block of Scheduler work is given a unique run ID. This\nis different than a task ID because a single task will have more than\none run if it yields with a continuation.", 'Fixed a bunch of Lint issues', 'Moved CHANGELOG', 'Moved OVERVIEW', 'Cleaned up some extnesions build script stuff', "chore: add eslint-plugin-jest's valid-expect rule (#16332)\n\n\nchore: add eslint-plugin-jest's valid-expect rule\n\n\nupdate assertion\n\n", 'chore: make tests compatible with Jest 24 (#15779)\n\n\nchore: make tests compatible with Jest 24\n\n\nremove fake rafs\n\n\nrollback jsdom for localstorage compat\n\n\nApply suggestions from code review\n\n\nCo-Authored-By: Sunil Pai threepointone@oculus.com\n\nchore: cleanup lockfile\n', '[eslint-plugin-react-hooks] Fixed crash when referencing arguments in arrow functions. (#16356)\n\n\nFixed issue with def being undefined while referencing arguments.\n\n\nRemoved todo comment.\n\n\nSkip exhaustive deps check if def is null.\n\n\nFixed code formatting in ExhaustiveDeps.\n\n\nRemoved unneeded comment in ExhaustiveDeps.\n\n', 'Rename legacy "events" package to "legacy-events" (#16388)\n\nRenamed \'events\' package to \'legacy-events\'\nUpdated \'events\' references to point to \'legacy-events\'\n', 'Merged master (with events -> legacy-events package rename)', 'Iterated on Webpack configs until I got the inline and shell packages seemingly working', 'Fixed web extensions', 'Patched up react-devtools-core Webpack configs', "Update react-devtools-inline to embed react-debug-tools since it's not published yet", 'Add build-info.json to package files array for non-private DT packages', 'Removed (no longer necessary) node->node-events mapping', 'Revert "[Scheduler] Profiling features (#16145)" (#16392)\nThis reverts commit a34ca7bce69c2f321daef0b8650ad6e7cfce366a.', 'Added better error reporting for print-warnings errors (#16394)', "Merge branch 'master' into devtools-v4-merge", 'print-warnings script should ignore DevTools packages', 'Add explicit MIT license file (previously only in package.json)', 'Removed unused TEST files', 'Disable @babel/plugin-transform-block-scoping "throwIfClosureRequired" option for tests', 'Made some incremental progress on Jest tests', 'Added CHANGELOG and READMEs for DevTools v4 NPM packages (#16404)', 'Add DevTools package placeholder package.json', "Merge branch 'master' into devtools-v4-merge", "[react-events] Press: improve test coverage (#16397)\n\nRun the tests in both an environment without PointerEvent and one with PointerEvent.\nImprove test coverage to include both mouse and touch pointers.\nChange 'Press' so that it only listens to either pointer events or fallbacks events.\n", 'Added release date to DevTools CHANGELOG', 'Updated all GitHub links to point to React repo', 'Added OVERVIEW.md and updated CHANGELOG to point to it (#16405)', '4.0.0-alpha.9 -> 4.0.0-alpha.10', 'Bumped all versions to 4.0.0', 'Changed version name string to show version and date. Moved commit number into description string.', '[DevTools Changelog] Add a note about restoring selection (#16409)\nAlso a tiny nit, "inline" spelling seems more common in this context. My eyes stumbled at it on every read.', 'Removed some unnecessary manifest permissions', '4.0.0 -> 4.0.1', 'Refactored to remove need for new webNavigation permission', '4.0.1 -> 4.0.2', '[DevTools Changelog] Add a note on 4.0.2', "Added Set+Map to dev shell, even though we don't support deep inspecting them yet", 'Prettier', "Multi-renderer profiling improvements\nAdd support for mixed v15/v16 renderers that previously caused profiling to fail with 'profiling not supported by this renderer' type errors", 'Display hook values for components that only use context', 'Improved editing props demo experience for TODO list', 'Support single-quote strings in style editor', 'Added explicit (empty) label next to empty arrays and objects', 'Caps lock bug template request for repro steps :)', 'Added support for unserializable types (e.g. Set/Map, Immutable)', 'Unserializable data type fix for standalone shell', '4.0.2 -> 4.0.3', 'Added 4.0.1, 4.0.2, and 4.0.3 changelog entries (#16438)\n\nAdded 4.0.1, 4.0.2, and 4.0.3 changelog entries\nAdded entry about Map/Set/Immutable\n', 'Fixed standalone bug that prevented backend from being served over localhost:8097', 'Updated DevTools CHANLOGE to add an unreleased change', 'Profiler bugfix for filtering out all commits after selecting a fiber', '4.0.3 -> 4.0.4', 'Added DevTools 4.0.4 CHANGELOG entry', 'Resolved Yarn conflict for object-assign', 'Fixed standalone target not properly serving backend over localhost:8097', 'Alpha-sort props/state/context keys', "[react-events] DOM event testing library (#16433)\nThis patch formalizes the mock native events and event sequences used in unit tests.\nThe createEventTarget function returns an object that can be used to dispatch native event sequences on the target without having to manually do so across all the scenarios we need to account for. Unit tests can be written as if we were only working with PointerEvent, but they will dispatch realistic native event sequences based on the execution environment (e.g., is PointerEvent supported?) and pointer type.\n```\ndescribe.each(environments)('Suite', (hasPointerEvents) => {\n  beforeEach(() => {\n    // setup\n  });\ntest.each(pointerTypes)('Test', (pointerType) => {\n    const target = createEventTarget(node);\n    target.pointerdown({pointerType});\n    expect(callback).toBeCalled();\n  });\n});\n```\nEvery native event that is dispatched now includes a complete object by default. The properties of the events can be customized. Properties that shouldn't be relied on in responder implementations are excluded from the mock native events to ensure tests will fail. Equivalent properties are normalized across different event types, e.g., 'pointerId' is converted to 'identifier' before a TouchEvent is dispatched.", '4.0.4 -> 4.0.5', 'Updated React DevTools changelog for 4.0.5', '[Flare] Rework the responder dispatching/batching mechanism (#16334)', 'Throw on unhandled SSR suspending (#16460)\n\n\nThrow on unhandled SSR suspending\n\n\nAdd a nicer message when the flag is off\n\n\nTweak internal refinement error message\n\n', '[ESLint] Forbid top-level use*() calls (#16455)\n\n\nAdd a way to skip/only tests to RulesOfHooks test\n\n\n[ESLint] Forbid top-level use*() calls\n\n\nAdd a regression test for logical expressions\n\n\nThis is not a change. Just adding more coverage.', "Fix message loop behavior when host callback is cancelled (#16407)\n\n\nAdd a regression test for cancelCallback with message loop\n\n\nIf there's nothing scheduled, we're not running\n\n\nAdd more tests from #16271\n\n", 'Add "hydrationOptions" behind the enableSuspenseCallback flag (#16434)\nThis gets invoked when a boundary is either hydrated or if it is deleted\nbecause it updated or got deleted before it mounted.', 'Improved GitHub issue repro instructions prompt', 'Fixed invalid object-assign version (4.0.4 -> 4.0.1)', 'Fix spelling in react-devtools CHANGELOG.md (#16448)', 'fix typo in CHNAGELOG.md (#16447)', 'Update CHANGELOG.md (#16439)\n\nUpdate CHANGELOG.md\n\nFixed typo', "Merge branch 'master' into devtools-v4-merge", "Merge branch 'source' of github.com:bvaughn/react-devtools-experimental", 'Merged changes from 4.0.0 -> 4.0.5 from DevTools fork', 'Moved DevTools custom Flow definitions', 'Add custom DevTools Flow definitions to shared flowconfig', 'Flow fixes', 'Revert "[ESLint] Forbid top-level use*() calls (#16455)" (#16522)\nThis reverts commit 96eb703bbff49b7d52ad7d41ea18074dc8e7857a.', 'Revert "Revert "[ESLint] Forbid top-level use*() calls (#16455)"" (#16525)\n\nRevert "Revert "[ESLint] Forbid top-level use*() calls (#16455)" (#16522)"\n\nThis reverts commit 507f0fb372705c4c6ac5288db3651019b1d0927b.\n\nUpdate RulesOfHooks.js\n', "[react-events] Rely on 'buttons' rather than 'button' (#16479)\nThe semantics of 'button' on events differs between PointerEvent and\nMouseEvent, whereas they are the same for 'buttons'. Furthermore, 'buttons'\nallows developers to determine when multiple buttons are pressed as the same\ntime.\nhttps://w3c.github.io/pointerevents/#the-button-property", 'Bump ESLint plugin to 2.0 (#16528)', 'Clear canceled task node early (#16403)', 'eslint-plugin-react-hooks@2.0.1', 'Renamed DevTools Jest config to be more concistent with others', 'Remove emoji prefix from Firefox extension tab labels\nFirefox adds these already for React, so the extra emoji character was confusing. For now, we still prepend it for Chrome', 'Fixed outdated extension popup wording', '[Partial Hydration] Dispatching events should not work until hydration commits (#16532)\n\n\nRefactor a bit to use less property access\n\n\nAdd test for invoking an event before mount\n\n\nAdd Hydration effect tag\n\n\nThis is equivalent to a "Placement" effect in that it\'s a new insertion\nto the tree but it doesn\'t need an actual mutation.\nIt is only used to determine if a subtree has actually mounted yet.\n\nUse the Hydration flag for Roots\n\nPrevious roots had a Placement flag on them as a hack for this case but\nsince we have a special flag for it now, we can just use that.\n\nAdd Flare test\n', 'Only warn in case the fourth argument is a function (#16543)', "[react-events] Fix middle-click for Press (#16546)\nBrowsers always report 'buttons' as 0 when a pointer is released.", "[react-events] Rename hook exports (#16533)\nFor example, 'useHoverResponder' becomes 'useHover'", '[Scheduler] Profiler Features (second try) (#16542)\n\nRevert "Revert "[Scheduler] Profiling features (#16145)" (#16392)"\n\nThis reverts commit 4ba1412305be3c77b625a70e3c0b9a8638626bd0.\n\n\nFix copy paste mistake\n\n\nRemove init path dependency on ArrayBuffer\n\n\nAdd a regression test for cancelling multiple tasks\n\n\nPrevent deopt from adding isQueued later\n\n\nRemove pop() calls that were added for profiling\n\n\nVerify that Suspend/Unsuspend events match up in tests\n\n\nThis currently breaks tests.\n\nTreat Suspend and Resume as exiting and entering work loop\n\nTheir definitions used to be more fuzzy. For example, Suspend didn\'t always fire on exit, and sometimes fired when we did not exit (such as at task enqueue).\nI chatted to Boone, and he\'s saying treating Suspend and Resume as strictly exiting and entering the loop is fine for their use case.\n\nRevert "Prevent deopt from adding isQueued later"\n\nThis reverts commit 9c30b0b695d81e9c43b296ab93d895e4416ef713.\nUnnecessary because GCC\n\n\nStart counter with 1\n\n\nGroup exports into unstable_Profiling namespace\n\n\nNo catch in PROD codepath\n\n\nNo label TODO\n\n\nNo null checks\n\n', '[react-events] Ensure updateEventListeners updates in commit phase (#16540)', 'Polyfill Symbol usage', 'Added a null check around memoizedProps', '4.0.5 -> 4.0.6', 'React DevTools CHANGELOG entry for 4.0.6', "Merge branch 'master' into devtools-v4-merge", 'Configured CI to run DevTools tests. Updated other test configs not to include DevTools tests.', "Merge branch 'source' of github.com:bvaughn/react-devtools-experimental", 'Merged changes from 4.0.5 -> 4.0.6 from DevTools fork', 'Fixed flushing problem with tests', 'Iterating on DevTools tests: Trying to run tests against pre-build react-dom and react-test-renderers', 'Updated DevTools test setup to no longer mock test renerer', 'Fix Console patching test by resetting modules', 'Fixed remaining DevTools broken tests by fixing a hydration/spread bug', 'Disabled DevTools tests from yarn-build target', '[react-events] Support screen reader virtual clicks (#16584)', 'CI runs DevTools tests against built source', 'Removed outdated snapshot', 'Removed forked DevTools Flow types', 'Suppress act/renderer warning for DevTools tests', 'Added FB copyright header', 'Removed unused Chrome Flow types', "Merge branch 'master' into devtools-v4-merge", 'Fixed a StyleEditor variable resolution regression', 'Updated README docs, example screenshots, etc', '[react-events] Improve mock event object accuracy (#16590)\n\nBetter simulation for pointercancel\nFix pressure values for different pointers\nAdd describe/test helpers for pointer events\n', "Babel Transform JSX to React.jsx/React.jsxDEV Plugin (#16432)\nThis babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don't plan to own this code in the future, and we will upstream this to Babel at some point once we've proven out the concept.\nAs per the RFC to simplify element creation, we want to change the JSX transform from targeting React.createElement(type, props, children) to React.jsx(type, props, key). This modifies the existing @babel/plugin-transform-react-jsx (and helper) babel plugin to support React.jsx and React.jsxDEV.\nThe main differences between React.jsx/React.jsxDEV and React.createElement are:\n1.) key is now passed as an explicit argument rather than through props\n3.) children are now passed through props rather than as an explicit argument\n4.) props must always be an object\n5.) __source and and __self are now passed as separate arguments into React.jsxDEV rather than through props\nPart of the rationale for this change is that we want to deprecate key spread through props because this is an expensive dynamic comparison operation. We want users instead always explicitly pass key as a prop. However, in the interim, we need a way to distinguish between  and . Therefore, until we completely deprecate key spreading, we will use React.createElement to transform  and React.jsx to transform everything else.", "Merge branch 'master' into devtools-v4-merge", 'Updated DT regression fixture path', 'Removed an unnecessary/unused DT Flow type', 'Import React DevTools v4\nImports the entire React DevTools v4 git repository (with history).', 'Revert "Import React DevTools v4"\nThis reverts commit b438699d3620bff236282b049204e1221b3689e9.', "Merge branch 'devtools-v4-merge'", 'Fix link on error-codes/README.md (#16595)', "Don't ignore dependencies for render phase update (#16574)", '[react-events] Ensure screen reader virtual clicks support preventDefault (#16600)', 'Updated DevTools extension build script to work when run remotely (#16603)', '[react-core] Add experimental React Scope component API (#16587)', 'chore: upgrade to danger 9 (#16602)', 'add ,  to table > tr warning (#16535)', 'Remove duplicate character in regex group (#16572)', 'rephrase comment (#16559)', 'Use renderToStaticMarkup for tests (#16516)', '[react-events] Split out mixed event responder tests (#16608)', 'chore: Update nvmrc with latest lts (#16610)', 'add integrity field in yarn.lock (#16601)', 'Updated extensions build-from-source instructions in README', "Adopt Contributor Covenant (#16613)\nIn order to foster healthy open source communities, we're adopting the\nContributor Covenant. It has been\nbuilt by open source community members and represents a shared understanding of\nwhat is expected from a healthy community.", '[react-core] Add more support for experimental React Scope API (#16621)', 'fix typo: oncurrent - concurrent (#16633)', '[DevTools] [Profiler]: Save profile now working in Firefox (#16612)\n\nAdded anchor dom element in order to successfully download profiling data.\nReworked downloadFile to accept a DOMElement in order for FF to successfully download profiling data.\nPrettify downloadFile changes.\n', 'Updated pending CHANGELOG for DevTools', '[react-events] Adds preventKeys support to Keyboard responder (#16642)', '[react-events] Various core tweaks for event responder system (#16654)', '[react-events] Keyboard responder propagation handling (#16657)', '[react-events] Fix Scope listener issue (#16658)', '[react-events] Refactor getCurrentTarget to getResponderNode (#16660)', '[react-events] Refine executeUserEventHandler (#16662)', '[react-events] Tap responder (#16628)\nThis is a partial replacement for the \'Press\' responder:\n\n\nuseTap is scoped to pointers (no keyboard support). Our current thinking is\nthat "responders" should be limited to working with pointers, and that they can\nbe combined with \'useKeyboard\' in user-space. For example, we might create a\n\'usePress\' hook in user-space that combines \'useTap\' with \'useKeyboard\' to react\nto both pointers and keyboard interactions.\n\n\nuseTap cancels the gesture once the pointer moves over an element that is\nnot within the responder target\'s subtree. This differs from usePress (and\nReact Native), where the gesture remains active after the pointer exits the\ntarget\'s subtree and is restarted once the pointer reenters. One of the\ndrawbacks with the usePress behavior is that it requires repeatedly measuring\nDOM elements (which can cause jank) to perform hit region tests. useTap avoids\ndoing this and relies on document.elementFromPoint only to support the\nTouchEvent fallbacks.\n\n\nuseTap calls onTapUpdate when the active gesture\'s state changes,\nonTapEnd when the gesture successfully completes. and onTapCancel when it\nfails. There is no onTap callback. usePress did not explicitly report back\nwhen the gesture failed, and product developers were confused about the\ndifference between onPress and onPressEnd.\n\n\nuseTap explicitly separates the PointerEvent implementation from the\nMouseEvent/TouchEvent fallback.\n\n\nuseTap has better unit test coverage . All pointer types and the fallback\nenvironment are tested. The shape of the gesture state object is also defined\nand tested.\n\n', "[Partial Hydration] Don't invoke listeners on parent of dehydrated event target (#16591)\n\n\nDon't invoke listeners on parent of dehydrated event target\n\n\nMove Suspense boundary check to getClosestInstanceFromNode\n\n\nNow getClosestInstanceFromNode can return either a host component,\nhost text component or suspense component when the suspense\ncomponent is dehydrated.\nWe then use that to ignore events on a suspense component.\n\nAttach the HostRoot fiber to the DOM container\n\nThis lets us detect if an event happens on this root's subtree before it\nhas rendered something.\n\nAdd todo\n\nThe approach of checking isFiberMounted answers if we might be in an\nin-progress hydration but it doesn't answer which root or boundary\nmight be in-progress so we don't know what to wait for.\nThis needs some refactoring.\n\nRefactor isFiberMountedImpl to getNearestMountedFiber\n\nWe'll need the nearest boundary for event replaying so this prepares for\nthat.\nThis surfaced an issue that we attach Hydrating tag on the root but normally\nthis (and Placement) is attached on the child. This surfaced an issue\nthat this can lead to both Placement and Hydrating effects which is not\nsupported so we need to ensure that we only ever use one or the other.\n\n\nAdd todo for bug I spotted\n\n\nCache tags\n\n\nCheck the ContainerInstanceKey before the InstanceKey\n\n\nThe container is inside the instance, so we must find it before the\ninstance, since otherwise we'll miss it.", 'updated flags from false to dicated on www (#16647)', 'use-subscription tearing fix (#16623)\n\nAdd (failing) subscription tearing test and bugfix\nAdded more inline comments to test\nSimplified tearing test case slightly\n', 'Enable MessageLoop implementation by default (#16408)', "[react-events] Fix isTargetWithinNode type (#16671)\nisTargetWithinNode passes the childTarget to getClosestInstanceFromNode which\ndoes not account for a null value of 'node'.", 'Remove experimental scheduler flags (#16672)', "Check for Suspense boundary in a root Container (#16673)\nIf we find a Container that might mean that we're on a node that is inside\na Suspense boundary that is directly inside the Container root.\nImagine the div is a Container and the span is a dehydrated instance:\n```\n\n\n\n\n\n```\nThere's no way to tests this yet since I'm not actually utilizing\nthe return value yet.\nThe solution is to just use the same path to check for a Suspense boundary\nas if we find a parent instance.", 'Fix typo: wnless -> unless (#16680)', 'fix typos on react-devtools comments (#16681)', 'Add FreshRuntime WWW bundle, remove ESLint (#16684)', '[Fresh] Fix a crash with implicit arrow return (#16687)', 'react-refresh@0.4.1', '[Fresh] Add skipEnvCheck option to Babel plugin (#16688)', 'Remove wrong copy-paste code in test (#16695)', '[react-events] Keyboard: fix callback return types (#16693)', '[react-events] Tap: change order of events (#16694)\nBefore:\nstart -> change -> update -> end (cancel) -> change\nNow:\nstart -> change -> update -> change -> end (cancel)', 'Schedule passive callbacks before layout effects are invoked (#16713)', "Let's schedule the passive effects even earlier (#16714)\nIt turns out I needed to schedule mine in the mutation phase and there\nare also clean up life-cycles there.", 'Remove console.log from copyWithSet (#16716)', 'Fixed font family issue in FF. (#16701)', 'Fix typo in commet (#16727)', '[react-events] Remove stopPropagation (Press) + use document for delegation (#16730)', '[Fresh] Hash signatures (#16738)', 'react-refresh@0.4.2', '[react-events] Tap: add maximumDistance prop (#16689)\nA prop for configuring the maximum distance that the active pointer can move before the tap is cancelled.', 'Correct link for troubleshooting react-dev-tools (#16690) (#16708)\n\nCorrect link for troubleshooting react-dev-tools (#16690)\n\nAs pointed out in #16690 - the link for \'React Tab Doesn\'t Show Up\' points to the empty README.MD.\nThis points it to that section in the v3 version README.MD - until an updated section will be added to the new dev-tools.\n\nAdd a "The React Tab Doesn\'t Show Up" section\n\nAdd the troubleshooting section to the react dev tools readme\n\npoint to the correct section in react-dev-tools readme\n\nAfter adding the troubleshooting section to the readme - this will point to the correct place\n\n\nMoved README file to GitHub\n\n\nUpdate new issue link to include DevTools label\n\n', '[DevTools] [Context] Legacy Context (#16617)\n\n\nAdded hasLegacyContext check.\n\n\nPassed hasLegacyContext as prop to SelectedElement\n\n\nChanging context labels based on hasLegacyContext\n\n\nFixed flow types.\n\n\nFixed typos.\n\n\nAdded tests for hasLegacyContext.\n\n\nRenamed test.\n\n\nRemoved test imports.\n\n', '[DevTools] Support for adding props | Improved state/props value editing  (#16700)\n\n\nExtracted sanitizeForParse\n\n\nAdded canAddEntries flag to InspectedElementTree\n\n\nAdded EditableKey component.\n\n\nAdded support to add an additional entry.\n\n\nAdded support to add more complex data structures in the EditableValue component. Added support to change the dataType of the value that is being changed.\n\n\nFixed flow error.\n\n\nRemoved unneeded fragment.\n\n\nRenamed EditableKey -> EditableName\n\n\nRemoved unneeded dependency\n\n\nRemoved problematic props to state hook.\n\n\nPrettified changes.\n\n\nRemoved unused import.\n\n\nFixed shouldStringify check.\n\n\nRemoved testing props from EditableProps.\n\n\nMade some inline tweaks\n\n', 'Added upcoming changes to DevTools CHANGELOG', "DevTools: Props editing interface tweaks (#16740)\n\nFix DevTools new prop input size\nDon't allow adding new values unless an overridePropsFn function has been provided.\nDo not show empty 'none' label ablve a new prop input\n", 'Moved backend injection logic to content script', 'Moved backend injection logic to content script', 'Moved injection logic to content script', 'Formatting changes', 'remove ability to inject arbitrary scripts', "Handle SuspenseListComponent getting retried (#16745)\nThis happens for example when a deleted boundary transfers its pending\npromises to the list so that the list can be retried.\nThis wasn't caught by unit tests because this flag wasn't on in those\ntests.", 'Mark root as already hydrated after committing (#16739)\n\n\nMark root as already hydrated after committing\n\n\nRemove current/child check for hydration and rely on the root flag instead\n\n', 'Re-arrange slightly to prevent refactor hazard (#16743)\n\nTrack "pending" and "suspended" ranges\n\nA FiberRoot can have pending work at many distinct priorities. (Note: we\nrefer to these levels as "expiration times" to distinguish the concept\nfrom Scheduler\'s notion of priority levels, which represent broad\ncategories of work. React expiration times are more granualar. They\'re\nmore like a concurrent thread ID, which also happens to correspond to a\nmoment on a timeline. It\'s an overloaded concept and I\'m handwaving over\nsome of the details.)\nGiven a root, there\'s no convenient way to read all the pending levels\nin the entire tree, i.e. there\'s no single queue-like structure that\ntracks all the levels, because that granularity of information is not\nneeded by our algorithms. Instead we track the subset of information\nthat we actually need — most importantly, the highest priority level\nthat exists in the entire tree.\nAside from that, the other information we track includes the range of\npending levels that are known to be suspended, and therefore should not\nbe worked on.\nThis is a refactor of how that information is tracked, and what each\nfield represents:\n\nA pending level is work that is unfinished, or not yet committed.\n  This includes work that is suspended from committing.\n  firstPendingTime and lastPendingTime represent the range of\n  pending work. (Previously, "pending" was the same as "not suspended.")\nA suspended level is work that did not complete because data was\n  missing. firstSuspendedTime and lastSuspendedTime represent the\n  range of suspended work. It is a subset of the pending range. (These\n  fields are new to this commit.)\nnextAfterSuspendedTime represents the next known level that comes\n  after the suspended range.\n\nThis commit doesn\'t change much in terms of observable behavior. The one\nchange is that, when a level is suspended, React will continue working\non the next known level instead of jumping straight to the last pending\nlevel. Subsequent commits will use this new structure for a more\nsubstantial refactor for how tasks are scheduled per root.\n\nGet next expiration time from FiberRoot\n\nGiven a FiberRoot, we should be able to determine the next expiration\ntime that needs to be worked on, taking into account the levels that\nare pending, suspended, pinged, and so on.\nThis removes the expirationTime argument from\nscheduleCallbackForRoot, and renames it to ensureRootIsScheduled to\nreflect the new signature. The expiration time is instead read from the\nroot using a new function, getNextExpirationTimeToWorkOn.\nThe next step will be to remove the expirationTime argument from\nrenderRoot, too.\n\nDon\'t bind expiration time to render callback\n\nThis is a fragile pattern because there\'s only meant to be a single\ntask per root, running at a single expiration time. Instead of binding\nthe expiration time to the render task, or closing over it, we should\ndetermine the correct expiration time to work on using fields we\nstore on the root object itself.\nThis removes the "return a continuation" pattern from the\nrenderRoot function. Continuation handling is now handled by\nthe wrapper function, which I\'ve renamed from runRootCallback to\nperformWorkOnRoot. That function is merely an entry point to\nrenderRoot, so I\'ve also removed the callback argument.\nSo to sum up, at at the beginning of each task, performWorkOnRoot\ndetermines which expiration time to work on, then calls renderRoot.\nAnd before exiting, it checks if it needs to schedule another task.\n\n\nUpdate error recovery test to match new semantics\n\n\nRemove lastPendingTime field\n\n\nIt\'s no longer used anywhere\n\nRestart on update to already suspended root\n\nIf the work-in-progress root already suspended with a delay, then the\ncurrent render definitely won\'t finish. We should interrupt the render\nand switch to the incoming update.\n\nRestart on suspend if return path has an update\n\nSimilar to the previous commit, if we suspend with a delay, and\nsomething in the return path has a pending update, we should abort\nthe current render and switch to the update instead.\n\nTrack the next unprocessed level globally\n\nInstead of backtracking the return path. The main advantage over the\nbacktracking approach is that we don\'t have to backtrack from the source\nfiber. (The main disadvantages are that it requires another module-level\nvariable, and that it could include updates from unrelated\nsibling paths.)\n\nRe-arrange slightly to prevent refactor hazard\n\nIt should not be possible to perform any work on a root without\ncalling ensureRootIsScheduled before exiting. Otherwise, we could\nfail to schedule a callback for pending work and the app could freeze.\nTo help prevent a future refactor from introducing such a bug, this\nchange makes it so that renderRoot is always wrapped in try-finally,\nand the finally block calls ensureRootIsScheduled.\n\nRemove recursive calls to renderRoot.\n\nThere are a few leftover cases where renderRoot is called recursively.\nAll of them are related to synchronously flushing work before its\nexpiration time.\nWe can remove these calls by tracking the last expired level on the\nroot, similar to what we do for other types of pending work, like pings.\n\nRemove argument from performSyncWorkOnRoot\n\nRead the expiration time from the root, like we do\nin performConcurrentWorkOnRoot.', '[react-interactions] Add TabFocusContainer and TabbableScope UI components (#16732)', 'Change trackedTouchCount console.error to warn (#16750)', 'Removed done(), added some comments explaining the change', '[react-events] Use context.objectAssign in Tap responder (#16748)', 'Lint fixes', 'Moved inline comment.', "Merge branch 'tt-compat' of https://github.com/onionymous/react into onionymous-tt-compat", "Removed DT inject() script since it's no longer being used", 'Moved backend injection to the content script (#16752)\n\n\nMoved backend injection logic to content script\n\n\nMoved backend injection logic to content script\n\n\nMoved injection logic to content script\n\n\nFormatting changes\n\n\nremove ability to inject arbitrary scripts\n\n\nRemoved done(), added some comments explaining the change\n\n\nLint fixes\n\n\nMoved inline comment.\n\n\nDeleted inject() script since it was no longer being used\n\n', "[Scheduler][www] Put profiling feature behind flag (#16757)\nOur infra currently doesn't support loading a separate profiling\nbuild of Scheduler. Until that's fixed, the recommendation is to load\na single build and gate the profiling feature behind a flag.\nAlternative to #16659", '[react-interactions] More Tab Focus control handling (#16751)', '[react-events] Ensure we restore currentInstance + currentTimers (#16758)', 'fix: inspect ClassComponent.render instead of constructor, fixes #16749 (#16759)', 'Added upcoming changes to DevTools CHANGELOG', '[react-interactions] Refactor TabFocusController (#16768)', 'Revert "Re-arrange slightly to prevent refactor hazard (#16743)" (#16769)\nThis reverts commit ab4951fc03750a726e412b90126e0737fbd04014.\n\nTrack "pending" and "suspended" ranges\n\nA FiberRoot can have pending work at many distinct priorities. (Note: we\nrefer to these levels as "expiration times" to distinguish the concept\nfrom Scheduler\'s notion of priority levels, which represent broad\ncategories of work. React expiration times are more granualar. They\'re\nmore like a concurrent thread ID, which also happens to correspond to a\nmoment on a timeline. It\'s an overloaded concept and I\'m handwaving over\nsome of the details.)\nGiven a root, there\'s no convenient way to read all the pending levels\nin the entire tree, i.e. there\'s no single queue-like structure that\ntracks all the levels, because that granularity of information is not\nneeded by our algorithms. Instead we track the subset of information\nthat we actually need — most importantly, the highest priority level\nthat exists in the entire tree.\nAside from that, the other information we track includes the range of\npending levels that are known to be suspended, and therefore should not\nbe worked on.\nThis is a refactor of how that information is tracked, and what each\nfield represents:\n\nA pending level is work that is unfinished, or not yet committed.\n  This includes work that is suspended from committing.\n  firstPendingTime and lastPendingTime represent the range of\n  pending work. (Previously, "pending" was the same as "not suspended.")\nA suspended level is work that did not complete because data was\n  missing. firstSuspendedTime and lastSuspendedTime represent the\n  range of suspended work. It is a subset of the pending range. (These\n  fields are new to this commit.)\nnextAfterSuspendedTime represents the next known level that comes\n  after the suspended range.\n\nThis commit doesn\'t change much in terms of observable behavior. The one\nchange is that, when a level is suspended, React will continue working\non the next known level instead of jumping straight to the last pending\nlevel. Subsequent commits will use this new structure for a more\nsubstantial refactor for how tasks are scheduled per root.\n\nGet next expiration time from FiberRoot\n\nGiven a FiberRoot, we should be able to determine the next expiration\ntime that needs to be worked on, taking into account the levels that\nare pending, suspended, pinged, and so on.\nThis removes the expirationTime argument from\nscheduleCallbackForRoot, and renames it to ensureRootIsScheduled to\nreflect the new signature. The expiration time is instead read from the\nroot using a new function, getNextExpirationTimeToWorkOn.\nThe next step will be to remove the expirationTime argument from\nrenderRoot, too.\n\nDon\'t bind expiration time to render callback\n\nThis is a fragile pattern because there\'s only meant to be a single\ntask per root, running at a single expiration time. Instead of binding\nthe expiration time to the render task, or closing over it, we should\ndetermine the correct expiration time to work on using fields we\nstore on the root object itself.\nThis removes the "return a continuation" pattern from the\nrenderRoot function. Continuation handling is now handled by\nthe wrapper function, which I\'ve renamed from runRootCallback to\nperformWorkOnRoot. That function is merely an entry point to\nrenderRoot, so I\'ve also removed the callback argument.\nSo to sum up, at at the beginning of each task, performWorkOnRoot\ndetermines which expiration time to work on, then calls renderRoot.\nAnd before exiting, it checks if it needs to schedule another task.\n\n\nUpdate error recovery test to match new semantics\n\n\nRemove lastPendingTime field\n\n\nIt\'s no longer used anywhere\n\nRestart on update to already suspended root\n\nIf the work-in-progress root already suspended with a delay, then the\ncurrent render definitely won\'t finish. We should interrupt the render\nand switch to the incoming update.\n\nRestart on suspend if return path has an update\n\nSimilar to the previous commit, if we suspend with a delay, and\nsomething in the return path has a pending update, we should abort\nthe current render and switch to the update instead.\n\nTrack the next unprocessed level globally\n\nInstead of backtracking the return path. The main advantage over the\nbacktracking approach is that we don\'t have to backtrack from the source\nfiber. (The main disadvantages are that it requires another module-level\nvariable, and that it could include updates from unrelated\nsibling paths.)\n\nRe-arrange slightly to prevent refactor hazard\n\nIt should not be possible to perform any work on a root without\ncalling ensureRootIsScheduled before exiting. Otherwise, we could\nfail to schedule a callback for pending work and the app could freeze.\nTo help prevent a future refactor from introducing such a bug, this\nchange makes it so that renderRoot is always wrapped in try-finally,\nand the finally block calls ensureRootIsScheduled.\n\nRemove recursive calls to renderRoot.\n\nThere are a few leftover cases where renderRoot is called recursively.\nAll of them are related to synchronously flushing work before its\nexpiration time.\nWe can remove these calls by tracking the last expired level on the\nroot, similar to what we do for other types of pending work, like pings.\n\nRemove argument from performSyncWorkOnRoot\n\nRead the expiration time from the root, like we do\nin performConcurrentWorkOnRoot.', '[react-interactions] Add experimental FocusGrid API (#16766)', "Support disabling interaction tracing for suspense promises (#16776)\n\nSupport disabling interaction tracing for suspense promises\n\nIf a thrown Promise has the __reactDoNotTraceInteractions attribute, React will not wrapped its callbacks to continue tracing any current interaction(s).\n\nAdded optional '__reactDoNotTraceInteractions' attribute to Flow Thenable type\n", 'Re-enable risky work loop changes (#16771)\nThe stack of PRs in #16743 was reverted. This adds them back.', 'Remove unnecessary interaction tracing ping wrapper (#16777)', "[react-events] Keyboard calls preventDefault on 'click' events (#16779)\nMake sure to call preventDefault for any 'click' events that follow a 'keydown'\nevent that matches 'preventKeys'", "[Scheduler] Prevent event log from growing unbounded (#16781)\nIf a Scheduler profile runs without stopping, the event log will grow\nunbounded. Eventually it will run out of memory and the VM will throw\nan error.\nTo prevent this from happening, let's automatically stop the profiler\nonce the log exceeds a certain limit. We'll also print a warning with\nadvice to call stopLoggingProfilingEvents explicitly.", 'Spelling is fundamental (#16782)', 'fix typo inteval -> interval & continutation -> continuation (#16760)\n\n\nfix typo alterate -> alternate\n\n\nfix typo interal -> interval & continutation -> continuation\n\n', 'Add trusted types to react on client side (#16157)\n\n\nAdd trusted types to react on client side\n\n\nImplement changes according to review\n\n\nRemove support for trusted URLs, change TrustedTypes to trustedTypes\n\n\nAdd support for deprecated trusted URLs\n\n\nApply PR suggesstions\n\n\nWarn only once, remove forgotten check, put it behind a flag\n\n\nMove comment\n\n\nFix PR comments\n\n\nFix html toString concatenation\n\n\nFix forgotten else branch\n\n\nFix PR comments\n\n', '[react-events] Keyboard support for virtual clicks (#16780)\nThis accounts for all clicks that are natively dispatched following relevant\nkeyboard interactions (e.g., key is "Enter"), as well as programmatic clicks,\nand screen-reader virtual clicks.', '[react-ui] Move experimental event+a11y work to react-ui package (#16794)', "[react-ui] usePress from useKeyboard and useTap (#16772)\nThis implements 'usePress' in user-space as a combination of 'useKeyboard' and 'useTap'.  The existing 'usePress' API is preserved for now. The previous 'usePress' implementation is moved to 'PressLegacy'.", 'Follow-up to initial Trusted Types support (#16795)\n\n\nFollow-up to initial Trusted Types support\n\n\nFast-path both strings and numbers\n\n\nMove shared objects out of every test\n\n', '[react-core] Clear more properties in detachFiber (#16807)', '[react-ui] FocusGrid -> ReactFocusTable + tweaks and fixes (#16806)', '[scheduler][profiler] Start time of delayed tasks (#16809)\nFixes a bug in the Scheduler profiler where the start time of a delayed\ntasks is always 0.', '[react-a11y] Add react-ui/accessibility to bundle build (#16804)', '[react-ui] Fix bundle name [hotfix] (#16811)', 'Release script filters DevTools NPM pakcages (#16810)', 'Updated pending CHANGELOG for DevTools', '[react-devtools-shared] Added string type check for object name prop in getDisplayName function (#16798)\n\n\n[react-devtools-shared] Added string type check for object name prop in getDisplayName function from utils.js file; tests included;\n\n\nRe-added empty string check to getDisplayName()\n\n\nTweaked tests to use real functions\n\n\nThis more closely simulates how the utility is being used in production, and would catch cases like anonymous functions (with empty string names).', 'Optimize objectIs (#16212)', '[react-core] Do not null fiber.sibling in detachFiber (#16820)', '[React Native] Fix for view config registrations (#16821)', '[Fresh] Always remount classes (#16823)', "prevent firefox marking required textareas invalid (#16578)\n\nprevent firefox marking required textareas invalid\n\nBug was caused by an IE10/IE11 bugfix dealing with the placeholder attribute and textContent. Solved by avoiding the IE bugfix when textContent was empty.\nCloses #16402\n\nmore explicit conditional check for textContent\n\nre: @philipp-spiess code review\n\nclarify textarea test fixture's expected result\n\nbetter describe the behavior we are testing for\nre: @philipp-spiess code review", '[react-ui] Remove event object warnings (#16822)', '[DevTools] Remove Welcome dialog (#16834)', '[react-ui/events] Tap responder API changes (#16827)\nThis patch limits the onTap* callbacks to the primary pointer button.\nAuxiliary button and modified primary button interactions call\nonAuxiliaryTap, cancel any active tap, and preserve the native behavior.', "Exclude react-dom when flow checking other builds (#16737)\nThis is because the HostConfig can't be guaranteed to be consistent with\nother code such as code that touches the DOM directly.\nIdeally we'd have a more systemic solution to this since it will pop\nup for other packages later too.", 'React DevTools version bump 4.0.6 -> 4.1.0', 'Added React DevTools v4.1.0 release date to CHANGELOG', '[react-ui] Add preventDefault+stopPropagation to Keyboard + update Focus components (#16833)', 'Rename experimental react-ui => react-interactions (#16842)', '[react-interactions] Fix typo in FocusTable (#16860)', '[react-interaction] Tweak Focus Table component (#16862)', '[react-interactions] Improve consistency of Tap responder (#16837)\nMakes sure that touch events with modifier keys behave the same way as other\npointer types (i.e., does not call onTapStart if the gesture begins with a\nmodifier key held down)', "[work loop] Prevent work loop from being inlined (#16865)\nUses Closure Compiler's @noinline directive.\nSee https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#noinline", 'Event Replaying (#16725)\n\n\nAdd Event Replaying Infra\n\n\nWire up Roots and Suspense boundaries, to retry events, after they commit\n\n\nReplay discrete events in order in a separate scheduler callback\n\n\nAdd continuous events\n\n\nThese events only replay their last target if the target is not yet\nhydrated. That way we don\'t have to wait for a previously hovered\nboundary before invoking the current target.\n\nEnable tests from before\n\nThese tests were written with replaying in mind and now we can properly\nenable them.\n\n\nUnify replaying and dispatching\n\n\nMark system flags as a replay and pass to legacy events\n\n\nThat way we can check if this is a replay and therefore needs a special\ncase. One such special case is "mouseover" where we check the\nrelatedTarget.\n\nEagerly listen to all replayable events\n\nTo minimize breakages in a minor, I only do this for the new root APIs\nsince replaying only matters there anyway. Only if hydrating.\nFor Flare, I have to attach all active listeners since the current\nsystem has one DOM listener for each. In a follow up I plan on optimizing\nthat by only attaching one if there\'s at least one active listener\nwhich would allow us to start with only passive and then upgrade.\n\n\nDesperate attempt to save bytese\n\n\nAdd test for mouseover replaying\n\n\nWe need to check if the "relatedTarget" is mounted due to how the old\nevent system dispatches from the "out" event.\n\nFix for nested boundaries and suspense in root container\n\nThis is a follow up to #16673 which didn\'t have a test because it wasn\'t\nobservable yet. This shows that it had a bug.\n\nRename RESPONDER_EVENT_SYSTEM to PLUGIN_EVENT_SYSTEM\n', '[suspense][error handling] Inline renderRoot and fix error handling bug (#16801)\n\nOutline push/pop logic in renderRoot\n\nI want to get rid of the the isSync argument to renderRoot, and\ninstead use separate functions for concurrent and synchronous render.\nAs a first step, this extracts the push/pop logic that happens before\nand after the render phase into helper functions.\n\nExtract catch block into helper function\n\nSimilar to previous commit. Extract error handling logic into\na separate function so it can be reused.\n\nFork renderRoot for sync and concurrent\n\nRemoves isSync argument in favor of separate functions.\n\nExtra "root completion" logic to separate function\n\nMoving this out to avoid an accidental early return, which would\nbypass the call to ensureRootIsScheduled and freeze the UI.\n\nInline renderRoot\n\nInlines renderRoot into performConcurrentWorkOnRoot and\nperformSyncWorkOnRoot. This lets me remove the isSync argument\nand also get rid of a redundant try-catch wrapper.\n\n[suspense][error handling] Add failing unit test\n\nCovers an edge case where an error is thrown inside the complete phase\nof a component that is in the return path of a component that suspends.\nThe second error should also be handled (i.e. able to be captured by\nan error boundary.\nThe test is currently failing because there\'s a call to\ncompleteUnitOfWork inside the main render phase catch block. That\ncall is not itself wrapped in try-catch, so anything that throws is\ntreated as a fatal/unhandled error.\nI believe this bug is only observable if something in the host config\nthrows; and, only in legacy mode, because in concurrent/batched mode,\ncompleteUnitOfWork on fiber that throws follows the "unwind" path\nonly, not the "complete" path, and the "unwind" path does not call\nany host config methods.\n\n[scheduler][profiler] Start time of delayed tasks\n\nFixes a bug in the Scheduler profiler where the start time of a delayed\ntasks is always 0.\n\nRemove ad hoc throw\n\nFatal errors (errors that are not captured by an error boundary) are\ncurrently rethrown from directly inside the render phase\'s catch\nblock. This is a refactor hazard because the code in this branch has\nto mirror the code that happens at the end of the function, when exiting\nthe render phase in the normal case.\nThis commit moves the throw to the end, using a new root exit status.\n\nHandle errors that occur on unwind\n', '[react-interactions] Add no-op stopPropagation + preventDefault to Press (#16868)\nFix', '[react-interaction] Refactor a11y components more (#16866)', 'Fix DevTools v4.1 editable hook regression (#16867)\n\n\nFixed a regression in hooks editor from a recent EditableValue change\n\n\nFixed a reset/state bug in useEditableValue() hook and removed unnecessary useMemo()\n\n', "Revert change to backend injection method from PR #16752 (#16864)\nPR #16752 changed how we were injecting the backend script to be done by the content script in order to work around Trusted Type limitations with our previous approach. This may have caused a regression (see #16840) so I'm backing it out to verify.", 'DevTools CHANGELOG update', '[react-interactions] Press with useRef instead of useState (#16870)\nWe only need to read and modify the value for the lifetime of the hook', 'Idle updates should not be blocked by hidden work (#16871)\n\nIdle updates should not be blocked by hidden work\n\nUse the special Idle expiration time for updates that are triggered at\nScheduler\'s IdlePriority, instead of Never.\nThe key difference between Idle and Never¹ is that Never work can be\ncommitted in an inconsistent state without tearing the UI. The main\nexample is offscreen content, like a hidden subtree.\n¹ "Never" isn\'t the best name. I originally called it that because it\n"never" expires, but neither does Idle. Since it\'s mostly used for\noffscreen subtrees, we could call it "Offscreen." However, it\'s also\nused for dehydrated Suspense boundaries, which are inconsistent in the\nsense that they haven\'t finished yet, but aren\'t visibly inconsistent\nbecause the server rendered HTML matches what the hydrated tree would\nlook like.\n\n\nReset as early as possible using local variable\n\n\nUpdates in a hidden effect should be Idle\n\n\nI had made them Never to avoid an extra render when a hidden effect\nupdates the hidden component -- if they are Idle, we have to render once\nat Idle, which bails out on the hidden subtree, then again at Never to\nactually process the update -- but the problem of needing an extra\nrender pass to bail out hidden updates already exists and we should fix\nthat properly instead of adding yet another special case.', 'Warning system refactoring (part 1) (#16799)\n\nRename lowPriorityWarning to lowPriorityWarningWithoutStack\n\nThis maintains parity with the other warning-like functions.\n\n\nDuplicate the toWarnDev tests to test toLowPriorityWarnDev\n\n\nMake a lowPriorityWarning version of warning.js\n\n\nExtract both variants in print-warning\n\n\nAvoids parsing lowPriorityWarning.js itself as the way it forwards the\ncall to lowPriorityWarningWithoutStack is not analyzable.', '[react-interactions] Add FocusList component (#16875)', '[react-interactions] Make FocusList bundle (#16876)', '[react-interactions] TabFocus -> FocusManager (#16874)', '[React Native] Improve errors for invalid ViewConfig getter functions (#16879)\n\n\n[React Native] Improve logging for missing view configs and invalid view config getter functions\n\n\n[React Native] Improve logging for missing view configs and invalid view config getter functions\n\n', '[react-interactions] Add initial docs explaining React Scopes (#16892)', '[react-interactions] Add Portal propagation configuration (#16889)', "These flags are hard coded in our internal config (#16883)\nBy hard coding them here they can get properly DCE and don't have to be\nsent to users. The internal config should only have dynamic flags.", 'Include tag in begin/complete invariant (#16881)', '[react-interactions] Add more documentation for a11y components (#16894)', '[devtools] Add support for React Scope symbol/number (#16893)', 'Update useEditableValue hook to sync external value changes (#16878)\n\nUpdate useEditableValue to mirror value cahnges\n\nPreviously, the hook initialized local state (in useState) to mirror the prop/state value. Updates to the value were ignored though. (Once the state was initialized, it was never updated.) The new hook updates the local/editable state to mirror the external value unless there are already pending, local edits being made.\n\n\nOptimistic CHANGELOG update\n\n\nAdded additional useEditableValue() unit test cases\n\n', '[react-interactions] FocusTable key press bound propgataion (#16895)', 'Selective Hydration (#16880)\n\n\nAdd Feature Flag for Selective Hydration\n\n\nEnable Synchronous Hydration of Discrete Events\n\n\nResolve cyclic dependency\n\n']v16.9.0-rc.0 This is a release candidate for React v16.9.0.
Changelog is available in https://github.com/facebook/react/pull/16254.
UMD builds
• react: https://unpkg.com/react@16.9.0-rc.0/umd/
• react-art: https://unpkg.com/react-art@16.9.0-rc.0/umd/
• react-dom: https://unpkg.com/react-dom@16.9.0-rc.0/umd/
• react-is: https://unpkg.com/react-is@16.9.0-rc.0/umd/
• react-test-renderer: https://unpkg.com/react-test-renderer@16.9.0-rc.0/umd/
• scheduler: https://unpkg.com/scheduler@0.15.0-rc.0/umd/ ["Fix feature flags react-dom/unstable-new-scheduler (#15309)\nI forgot to account for the CommonJS builds. (I had this change in\nmy local checkout but accidentally didn't commit it.)", "Expose extra internals in FB build of react-dom/unstable-new-scheduler (#15311)\nThe Facebook build of React DOM uses a forked entry point that exposes\nadditional secret internals. I didn't account for this when I added\nthe react-dom/unstable-new-scheduler build, so the extra internals\nare currently missing. This commit adds them.", 'Fix a crash in Suspense with findDOMNode', "Alternate fix for #14198\nThis doesn't rely on checking the tag. When the alternate of a parent\nis missing, it assumes it's a fragment indirection and moves onto the\nnext parent fiber.", "Store entire build directory as CI artifacts (#15310)\n\nStore FB bundles as CI artifacts\n\nUpdates the Circle CI config to store Facebook bundles as build\nartifacts. We already do this for our npm packages.\n\n\nMight as well store everything in build/\n\n\nStore build directory as a tarball\n\n\nSo it's easy to download", 'update gcc version (#15034)', 'Allow DevTools to toggle Suspense fallbacks (#15232)\n\n\nAllow DevTools to toggle Suspense state\n\n\nChange API to overrideSuspense\n\n\nThis lets detect support for overriding Suspense from DevTools.\n\n\nAdd ConcurrentMode test\n\n\nNewlines\n\n\nRemove unnecessary change\n\n\nNaming changes\n\n', 'React events: keyboard press, types, tests (#15314)\n\nAdd HoverProps type\nAdd more Hover event module tests\nAdd more Press event module tests\nChange default longPress delay from 1000 to 500\nRename dispatchPressEvent -> dispatchEvent\nConsolidate state updates in Press event module\nAdd keyboard support for Press events\nAdd FocusProps type and unit tests\n', 'Experimental event API: refactor responder modules for lifecycle inclusion (#15322)', "[New Scheduler] Fix: Suspending an expired update (#15326)\nWhen an async update expires, React renders at the expiration time that\ncorresponds to the current time, not at the original update's expiration\ntime. That way, all the expired work in the tree is flushed in a\nsingle batch.\nThis is implemented inside renderRoot by comparing the next render\nexpiration time to the current time. If the current time is later,\nrenderRoot will restart at the later time.\nBecause of poor factoring, the check is currently performed right before\nentering the work loop. But the work loop is usually entered multiple\ntimes in a single callback: each time a component throws or suspends.\nThis led to an infinite loop where React would detect that an update\nexpired, restart at the current time, make a bit of progress, suspend,\ncheck for expired work again, and start the loop again.\nI fixed this by moving the expired work check to the beginning of\nrenderRoot, so that it is not performed every time something suspends.\nThis isn't ideal, because you could technically still fall into a loop\nif more than 10ms lapse in between exiting renderRoot and entering it\nagain. The proper fix is to lift the check outside of renderRoot\nentirely so that the function can restart without checking for expired\nwork again. Since this is exceedingly unlikely (and this whole thing is\nstill behind a flag), I'll do the better fix in an already-planned\nfollow up to fork renderRoot into separate functions for sync and\nasync work.", 'Add Hover,Focus,Press docs to REAMDE (#15328)', 'Add delay props to Hover event module (#15325)', 'Add full TouchHitTarget hit slop (experimental event API) to ReactDOM (#15308)', 'Experimental event API: Support EventComponent onUnmount responder callback (#15335)', 'React events: add delay props to Press module (#15340)\n\nAdd delay props to Press event module\nMinor naming changes to Hover events\nAdd examples to react-events README\n', 'Provide new jsx transform target for reactjs/rfcs#107 (#15141)\n\n\nadding jsx function\n\n\nadd more feature flag defaults\n\n\nflip ReactElement order back\n\n', 'Move EventComponent state creation to complete phase + tests (#15352)', 'Fix areHookInputsEqual method  warning params order (#15345)\n\n\nFix areHookInputsEqual method  warning params order\n\n\nFIX areHookInputsEqual test\n\n', "Fix: Measure expiration times relative to module initialization (#15357)\nWe use bitwise operations to compute expiration times, which means they\nneed to be smaller than 31 bits. So we measure times relative to module\ninitialization, similar to performance.now.\nThis was already working in the old fiber scheduler, but we didn't have\na test for it.", 'Refactor EventComponent logic + add onOwnershipChange callback (#15354)', "[React Native] Add tests to paper renderer for measure, measureLayout (#15323)\n\n\n[React Native] Add tests to paper renderer for measure, measureLayout\n\n\nUpdate tests\n\n\nShouldn't have removed UIManager import\n\n", "[React Native] measure calls will now call FabricUIManager (#15324)\n\n\n[React Native] Add tests to paper renderer for measure, measureLayout\n\n\n[React Native] measure calls will now call FabricUIManager\n\n\nThe Fabric renderer was previously calling the paper UIManager's measure calls and passing the react tag. This PR changes the renderer to now call FabricUIManager passing the node instead.\nOne of the parts of this that feels more controversial is making NativeMethodsMixin and ReactNative.NativeComponent warn when calling measureLayout in Fabric. As Seb and I decided in https://github.com/facebook/react/pull/15126, it doesn't make sense for a component created with one of these methods to require a native ref but not work the other way around. For example: a.measureLayout(b) might work but b.measureLayout(a) wouldn't. We figure we should keep these consistent and continue migrating things off of NativeMethodsMixin and NativeComponent.\nIf this becomes problematic for the Fabric rollout then we should revisit this.\n\n\nFixing Flow\n\n\nAdd FabricUIManager to externals for paper renderer\n\n\nimport * as FabricUIManager from 'FabricUIManager';\n\n\nUpdate tests\n\n\nShouldn't have removed UIManager import\n\n\nUpdate with the new tests\n\n", 'Include full error messages in React Native build (#15363)\nThe React Native build does not minify error messages in production,\nbut it still needs to run the error messages transform to compile\ninvariant calls to ReactError. To do this, I added a noMinify\noption to the Babel plugin. I also renamed it from\nminify-error-messages to the more generic transform-error-messages.', "Track Event Time as the Start Time for Suspense (#15358)\n\nTrack the earliest event time in this render\n\nRebase\n\nTrack the time of the fallback being shown as an event time\n\nWhen we switch back from fallback to content, we made progress and we track\nthe time from when we showed the fallback in the first place as the\nlast time we made progress.\n\n\nDon't retry if synchronous\n\n\nOnly suspend when we switch to fallback mode\n\n\nThis ensures that we don't resuspend unnecessarily if we're just retrying\nthe same exact boundary again. We can still unnecessarily suspend\nfor nested boundaries.\n\n\nRename timedOutAt to fallbackExpirationTime\n\n\nAccount for suspense in devtools suspense test\n\n", 'Move EventTypes to ReactTypes (#15364)', 'Experimental Event API: Add targets and responder utility method for finding targets (#15372)', 'React events: add onPressMove and pressRetentionOffset to Press (#15374)\nThis implementation differs from equivalents in React Native in the following ways:\n\nA move during a press will not cancel onLongPress.\nA move to outside the retention target will cancel the press and not\nreactivate when moved back within the retention target.\n', 'Fixes a Flow type merge conflict (#15378)', 'Apply the Just Noticeable Difference to suspense timeouts (#15367)\n\n\nApply the Just Noticeable Difference boundary\n\n\nClamp suspense timeout to expiration time\n\n', 'Experimental Event API: preventDefault handling for anchors (#15383)', 'Remove TouchHitTarget SSR logic to prevent issues with mouse events (#15381)', 'Experimental Event API: adds stopPropagation by default to Press (#15384)', "React events: Press event fixes (#15386)\n\nFix hiding context menu for longpress via touch.\nFix scrolling of viewport for longpress via spacebar key.\nAdd tests for anchor-related behaviour and preventDefault.\nAdd a deactivation delay for forced activation\nAdd pointerType to Press events.\n\nNOTE: this currently extends pointerType to include keyboard.\nNOTE: React Native doesn't have a deactivation delay for forced activation, but this is possibly because of the async bridge meaning that the events aren't dispatched sync.", 'Bump scheduler version to 0.14.0\nReleasing this early for React Native', 'Fix CI (#15393)\n\nRevert "Bump scheduler version to 0.14.0"\n\nThis reverts commit 687e4fb6f7dcb13ca3c668bf5f3df4c0b281f58c.\n\nStore results.json as CI build artifact\n', 'Fix path to results.json', 'React events: add onHoverMove support (#15388)', "Replace old Fiber Scheduler with new one (#15387)\nThe new Fiber Scheduler has been running in Facebook for several days\nwithout issues. Let's switch to it.", 'Better message when CI for base commit is pending', 'Experimental Event API: Remove "listener" from event objects (#15391)', 'React events: add unmounting to Focus (#15396)', 'Experimental Event API: Add Hover onUnmount support (#15394)', 'Stop tracking bundle sizes (#15404)\n\n[sizebot] Fail gracefully if CI returns invalid response\n\nMoves the response.json() call into the catch block.\n\nStop tracking bundle sizes\n', 'React events: ignore device buttons that aren\'t for primary interactions (#15402)\nThe Pointer Events spec mentions that the value of button in a nativeEvent\ncan be anything between 0 and 5 for "down" events. We only care about those\nwith a value of 0.', 'act() tests - Reuse and properly unmount containers (#14974)', 'Experimental Event API: Redesign event responder propagation (#15408)\n\nEvent API: Redesign event instance propagation\n', "Cancel pending commit before starting on root\nMoves the cancelTimeout call to right before creating a new work-in-\nprogress root. Fixes a class of bugs where a pending commit is not\ncancelled, causing an incomplete tree to accidentally commit.\nIn the interest of fixing downstream bugs quickly, I'm landing this\nwithout a test case; I'll add one in a follow up.", "React events: make nested Focus work as expected (#15421)\nThis patch makes a change to the Focus module so that it only reports\nfocus/blur on the host node that's a direct child of the event component. This\nbrings the expected behaviour in line with the browser default of focus/blur\nevents not bubbling for Pressable.", 'React events: fix nested Hover components error (#15428)\n\nAdd failing test for nested Hover\nFix error caused by nested Hover event components\n', 'Include rootEventTypes in DOMEventResponderSystem stopPropagation tests (#15433)', 'React events: extract common helper functions (#15449)', 'React events: consolidate logic of Hover event component (#15450)\nMinor refactor of Hover and additional regression coverage.', 'React Events: consolidate logic for Press event component (#15451)\nRefactor of Press and additional regression coverage.\nThe logic for "start", "move", "end", and "cancel" events is consolidated into a single block to reduce duplication and improve consistency of the UX across input-types. Also reduces code size.\nThe bailout logic for anchor tags is removed since we preventDefault for click by default. We can discuss scenarios where it makes sense to limit functionality around interactions on anchor tags.\nThe logic for ignoring emulated events is simplified and improved. Pointer events can produce emulated touch (immediately after pointer) and mouse events (delayed) which is now accounted for and tested.', 'React events: use passive events where possible (#15454)', 'React events: README update types and remove stopPropagation prop (#15456)', 'React events: add a test for focusable descendants (#15457)', 'React events: initial implementation of disabled prop (#15458)', 'Experimental event API: rework the propagation system for event components (#15462)', 'Experimental Event API: add rootEventTypes support to event responders (#15475)\n\nAdds rootEventTypes\n', 'Use stricter equality check (#15474)', "Remove timeout from performance flamegraph (#15477)\nThe implementation is wrong, but also it's not that useful for\ndebugging. Implementing it properly would involve tracking more\ninformation than we do currently. Perhaps including the priority\nof the callback in the message would be helpful, but not sure. For now\nI'll just remove it.", "Measure callback timeout relative to current time (#15479)\nFixes a bug where the timeout passed to scheduleCallback represented\nan absolute timestamp, instead of the amount of time until that\ntimestamp is reached. The solution is to subtract the current time\nfrom the expiration.\nThe bug wasn't caught by other tests because we use virtual times that\ndefault to 0, and most tests don't advance time.\nI also moved the initialTimeMs offset to the\nSchedulerWithReactIntegration module so that we don't have to remember\nto subtract the offset every time. (We should consider upstreaming this\nto the Scheduler package.)", 'Fix priority inference of next level of work (#15478)\nBugfix for inferPriorityFromExpirationTime function. It happened to\nwork in our existing tests because we use virtual time.\nFlow would have caught this if expiration times were an opaque type. We\nshould consider that in the future. (The downside of opaque types is\nthat all operations would have to go through helper functions, which may\nor may not get inlined by Closure.)', 'Experimental Event API: add event component mount phase callback (#15480)', 'Experimental event API: adds context.isTargetDirectlyWithinEventComponent (#15481)', 'Add missing word to code comment for clarity (#15443)', 'Event API: various bug fixes (#15485)', 'Event API: Add FocusScope surface (#15487)', 'typo fix (#15493)\nchanged ReactResponderContext.dispatchEvent otpions keys to options.', "give  canUseDOM with a possibility to be a constant (#14194)\nhttps://webpack.js.org/plugins/define-plugin/\nWebpack's DefinePlugin has the ability to replace typeof expr to a constant in compile-time, which should lead to better dead-code-elimination.", 'ADD: disablePictureInPicture attribute for HTML5 videos (#15334)\n\n\nADD: disablePictureInPicture attribute for HTML5 videos\n\n\nADD: disablePictureInPicture as DOMProperty and attribute\n\n\nUpdate: Replace camelCase with lowercase and vice-versa\n\n\nFIX: Missing comma on attribute (prettier)\n\n', 'React Native: Allow Views to be nested inside of Text (#15464)\nThis feature is now supported on both iOS and Android. The Android feature was merged a couple of weeks ago: https://github.com/facebook/react-native/pull/23195.', "test(accumulate): add test suite for accumulate function (#15159)\n\n\nrefactor(typo): remove typo 'be'\n\n\ntest(accumulate): add test suite for accumulate function\n\n", 'test(eslint-plugin-react-hooks): add coverage for unused custom hook (#15130)', 'add --watch mode to "yarn build" (#15116)\n\n\nwip: add --watch mode to "yarn build"\n\n\nfix: handle error events\n\n', 'Minor code structure adjustments to the bundles.js file (#15079)\n\n\nsimplify\n\n\nfix error\n\n\nuse deepFreeze\n\n\nmove comments\n\n', 'Event API: follow up fixes for FocusScope + context changes (#15496)', 'React events: fix press end event dispatching (#15500)\nThis patch fixes an issue related to determining whether the end event occurs\nwithin the responder region. Previously we only checked if the event target was\nwithin the responder region for moves, otherwise we checked if the target was\nwithin the event component. Since the dimensions of the child element can\nchange after activation, we need to recalculate the responder region before\ndeactivation as well if the target is not within the event component.', 'React events: remove unused types (#15503)', 'Event API: ensure event keys are unique + add validation (#15501)', 'React Events: core API documentation (#15505)', 'Event API: Fix bug where Press root events were not being cleared (#15507)', 'Update TopLevelEventTypes.js (#15511)\nFix grammar of code comment.', 'React Events: core API documentation followup (#15506)', 'Event API: responder event types should not re-register on EventComponent update (#15514)', 'React Events: FocusScope tweaks and docs (#15515)\n\nFocusScope: rename trap to contain.\nFocusScope: avoid potential for el.focus() errors.\nFocusScope: add docs.\nUpdate docs formatting.\n', 'React Events: add onFocusVisibleChange to Focus (#15516)\nCalled when focus visibility changes. Focus is only considered visible if a\nfocus event occurs after keyboard navigation. This provides a way for people to\nprovide visual focus styles for keyboard accessible UIs without those styles\nappearing if focus is triggered by mouse, touch, pen.', '[React Native] Inline calls to FabricUIManager in shared code (#15490)\n\n\n[React Native] Inline calls to FabricUIManager in shared code\n\n\nCall global.nativeFabricUIManager directly as short term fix\n\n\nAdd flow types\n\n\nAdd nativeFabricUIManager global to eslint config\n\n\nAdding eslint global to bundle validation script\n\n', "Fixed potential interaction tracing leak in Suspense thennable memoization (#15531)\nAudited the other places we call unstable_wrap() in React DOM and verified that they didn't have this similar problem.", 'Add method for forcing a lower framerate', 'Use lowercase entry points for event modules (#15535)\nMatches npm convention', 'Bump scheduler version to 0.14.0 (#15395)', 'Event API: use capture for all event listeners using experimental responder system (#15526)', 'Follow up to 15535 (#15536)', 'Delete duplicate Press.js (#15538)\nThis file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.', 'Delete duplicate Drag.js (#15537)\nThis file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.', 'Delete duplicate Swipe.js (#15541)\nThis file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.', 'Delete duplicate Hover.js (#15539)\nThis file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.', 'Delete duplicate Focus.js (#15540)\nThis file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.', 'Event API: remove isTargetDirectlyWithinEventComponent (#15546)', 'Event API: Support press reentry for pointer events (#15560)', "React Events: cancel onLongPress for large enough moves (#15562)\nImplements the behaviour from React Native's Pressability.", 'React Events: fix cancel events for Press (#15563)\n\nFixes a bug in the cancellation logic. The cancel events are now correctly listened to on the root.\nFixes cancellation in Safari by using the dragstart event as a proxy for cancellation (i.e., the event dispatched when move-during-press occurs on an anchor tag)\n', 'Ensure TouchHitTarget element is server side rendered with hit slop (#15385)\n\n\nFollow up to 15381\n\n\nAdd back in hit slop properties\n\n\nPrettier\n\n\nFix lint\n\n\nmove hydration update out of DEV block\n\n\nRemove pointer-events:auto\n\n', 'Fix interaction tracing for batched update mounts (#15567)\n\nAdded failing test for act+interaction tracing\nMark pending interactions on root for legacy unbatched phase\n', 'Add React.unstable_createEventComponent (#15580)\nAPI for creating event components from event responders.', 'Warn when suspending at wrong priority (#15492)\n\nWarn when suspending at wrong priority\n\nAdds a warning when a user-blocking update is suspended.\nIdeally, all we would need to do is check the current priority level.\nBut we currently have no rigorous way to distinguish work that was\nscheduled at user- blocking priority from work that expired a bit and\nwas "upgraded" to a higher priority. That\'s because we don\'t schedule\nseparate callbacks for every level, only the highest priority level per\nroot. The priority of subsequent levels is inferred from the expiration\ntime, but this is an imprecise heuristic.\nHowever, we do store the last discrete pending update per root. So we\ncan reliably compare to that one. (If we broaden this warning to include\nhigh pri updates that aren\'t discrete, then this won\'t be sufficient.)\nMy rationale is that it\'s better for this warning to have false\nnegatives than false positives.\nPotential follow-ups:\n- Bikeshed more on the message. I don\'t like what I landed on that much\nbut I think it\'s good enough to start.\n- Include the names of the components that updated. (The ideal place to\nfire the warning is during the setState call but we don\'t know if\nsomething will suspend until the next update. Maybe we could be clever\nand warn during a subsequent update to the same component?)\n\nMove Suspense priority check to throwException\n', 'Add Suspense Boundary Context (and unstable_avoidThisFallback) (#15578)\n\n\nAvoidable suspense boundaries\n\n\nMove the context out of SuspenseComponent\n\n\nUse setDefaultShallowSuspenseContext instead of passing 0\n\n', 'Ensure touch events are properly handled for pageX and pageY (#15587)', 'Experimental Event API: reduce code size of event modules (#15590)', 'Experimental Event API: Press event properties (#15586)', 'Event API: add more warnings for responder based events (#15597)', 'Event API: normalize event timeStamp property to be in event system (#15598)', 'Event API: ensure we pop context for event system fibers (#15599)', 'Event API: add key modifiers to Press events (#15611)', 'Event API: add follow up event unwind test (#15612)', 'Don\'t consider "Never" expiration as part of most recent event time (#15606)\n\nDon\'t consider "Never" expiration as part of most recent event time\n\nThis doesn\'t happen with deprioritization since those are not "updates"\nby themselves so they don\'t go into this accounting.\nHowever, they are real updates if they were scheduled as Idle pri using\nthe scheduler explicitly. It\'s unclear what suspense should do for these\nupdates. For offscreen work, we probably want them to commit immediately.\nNo point in delay them since they\'re offscreen anyway. However if this is\nan explicit but very low priority update that might not make sense.\nSo maybe this means that these should have different expiration times?\nIn this PR I just set the suspense to the lowest JND.\nHowever, we don\'t want is for these things to commit earlier in case\nthey got batched in with other work so I also ensured that they\'re not\naccounted for in in the workInProgressRootMostRecentEventTime calculation\nat all. This makes them commit immediately if they\'re by themselves, or\nafter the JND of whatever they were batched in with.\nUltimately, I think that we should probably never schedule anything at\nNever that isn\'t truly offscreen so this should never happen.\nHowever, that begs the question what happens with very low pri work that\nsuspends. Do we always work at that level first?\n\nAdjust test to account for the new shorter suspense time\n', 'Remove scheduler from React package dependencies (#15616)\nScheduler is used by the renderers, but not the isomorphic package.', 'Update test to fix CI', 'Fork ReactSharedInternals for UMD builds (#15617)', 'Event API: ensure preventDefault works for nested targets (#15633)', "Add Batched Mode (#15502)\n\nAdd Batched Mode\n\nReact has an unfortunate quirk where updates are sometimes synchronous\n-- where React starts rendering immediately within the call stack of\nsetState — and sometimes batched, where updates are flushed at the\nend of the current event. Any update that originates within the call\nstack of the React event system is batched. This encompasses most\nupdates, since most updates originate from an event handler like\nonClick or onChange. It also includes updates triggered by lifecycle\nmethods or effects. But there are also updates that originate outside\nReact's event system, like timer events, network events, and microtasks\n(promise resolution handlers). These are not batched, which results in\nboth worse performance (multiple render passes instead of single one)\nand confusing semantics.\nIdeally all updates would be batched by default. Unfortunately, it's\neasy for components to accidentally rely on this behavior, so changing\nit could break existing apps in subtle ways.\nOne way to move to a batched-by-default model is to opt into Concurrent\nMode (still experimental). But Concurrent Mode introduces additional\nsemantic changes that apps may not be ready to adopt.\nThis commit introduces an additional mode called Batched Mode. Batched\nMode enables a batched-by-default model that defers all updates to the\nnext React event. Once it begins rendering, React will not yield to\nthe browser until the entire render is finished.\nBatched Mode is superset of Strict Mode. It fires all the same warnings.\nIt also drops the forked Suspense behavior used by Legacy Mode, in favor\nof the proper semantics used by Concurrent Mode.\nI have not added any public APIs that expose the new mode yet. I'll do\nthat in subsequent commits.\n\nSuspense in Batched Mode\n\nShould have same semantics as Concurrent Mode.\n\nUse RootTag field to configure type of root\n\nThere are three types of roots: Legacy, Batched, and Concurrent.\n\nflushSync should not flush batched work\n\nTreat Sync and Batched expiration times separately. Only Sync updates\nare pushed to our internal queue of synchronous callbacks.\nRenamed flushImmediateQueue to flushSyncCallbackQueue for clarity.", 'Add ReactDOM.unstable_createSyncRoot (#15504)\n\n\nAdd ReactDOM.unstable_createSyncRoot\n\n\nReactDOM.unstable_createRoot creates a Concurrent Mode root.\n\nReactDOM.unstable_createSyncRoot creates a Batched Mode root. It\ndoes not support createBatch.\n\nReactDOM.render creates a Legacy Mode root. It will eventually be\ndeprecated and possibly moved to a separate entry point, like\nreact-dom/legacy.\n\n\nRename internal ReactRoot types\n\n', 'Remove  (#15532)\nUse createSyncRoot instead.', "Invariant that throws when committing wrong tree (#15517)\nIf React finishes rendering a tree, delays committing it (e.g.\nSuspense), then subsequently starts over or renders a new tree, the\npending tree is no longer valid. That's because rendering a new work-in\nprogress mutates the old one in place.\nThe current structure of the work loop makes this hard to reason about\nbecause, although renderRoot and commitRoot are separate functions,\nthey can't be interleaved. If they are interleaved by accident, it\neither results in inconsistent render output or invariant violations\nthat are hard to debug.\nThis commit adds an invariant that throws if the new tree is the same as\nthe old one. This won't prevent all bugs of this class, but it should\ncatch the most common kind.\nTo implement the invariant, I store the finished tree on a field on the\nroot. We already had a field for this, but it was only being used for\nthe unstable createBatch feature.\nA more rigorous way to address this type of problem could be to unify\nrenderRoot and commitRoot into a single function, so that it's\nharder to accidentally interleave the two phases. I plan to do something\nlike this in a follow-up.", 'Event API: adds pointerType to Focus events (#15645)', 'Add test for nested avoided boundaries (#15636)\n\n\nAdd test for nested avoided boundaries\n\n\nAdd test for top level avoided boundaries\n\n', 'Event API: ensure getFocusableElementsInScope handles suspended trees (#15651)', "Fix serial passive effects (#15650)\n\n\nFailing test for false positive warning\n\n\nFlush passive effects before discrete events\n\n\nCurrently, we check for pending passive effects inside the setState\nmethod before we add additional updates to the queue, in case those\npending effects also add things to the queue.\nHowever, the setState method is too late, because the event that\ncaused the update might not have ever fired had the passive effects\nflushed before we got there.\nThis is the same as the discrete/serial events problem. When a serial\nupdate comes in, and there's already a pending serial update, we have to\ndo it before we call the user-provided event handlers. Because the event\nhandlers themselves might change as a result of the pending update.\nThis commit moves the flushPassiveEffects call to before the discrete\nevent handlers are called, and removes it from the setState method.\nNon-discrete events will not cause passive effects to flush, which is\nfine, since by definition they are not order dependent.", "Feature flag to revert #15650 (#15659)\nPR #15650 is a bugfix but it's technically a semantic change that could\ncause regressions. I don't think it will be an issue, since the\nprevious behavior was both broken and incoherent, but out of an\nabundance of caution, let's wrap it in a flag so we can easily revert\nit if necessary.", "Use dynamic flag in test renderer in www (#15662)\nUses a dynamic flag in www's test renderer build so we can condtionally\ndisable the passive effects bugfix. Matches the dynamic flag used in\nthe www React DOM build.", 'Always flushPassiveEffects before rendering\nI  mistakenly wrapped this in the revertPassiveEffectsChange feature\nflag. It should flush regardless of the flag.', 'Fix  not triggering onLoad (#15614)', 'Bail out of updates in offscreen trees (#15666)\n\n\nBail out of updates in offscreen trees\n\n\nAddress review\n\n', 'Event API: ensure calculateResponderRegion accounts for page offset (#15671)', "act() - s / flushPassiveEffects / Scheduler.unstable_flushWithoutYielding (#15591)\n\ns/flushPassiveEffects/unstable_flushWithoutYielding\n\na first crack at flushing the scheduler manually from inside act(). uses unstable_flushWithoutYielding(). The tests that changed, mostly replaced toFlushAndYield(...) with toHaveYielded(). For some tests that tested the state of the tree before flushing effects (but still after updates), I replaced act() with bacthedUpdates().\n\n\nugh lint\n\n\npass build, flushPassiveEffects returns nothing now\n\n\npass test-fire\n\n\nflush all work (not just effects), add a compatibility mode\n\n\nof note, unstable_flushWithoutYielding now returns a boolean much like flushPassiveEffects\n\n\numd build for scheduler/unstable_mock, pass the fixture with it\n\n\nadd a comment to Shcduler.umd.js for why we're exporting unstable_flushWithoutYielding\n\n\nrun testsutilsact tests in both sync/concurrent modes\n\n\naugh lint\n\n\nuse a feature flag for the missing mock scheduler warning\n\n\nI also tried writing a test for it, but couldn't get the scheduler to unmock. included the failing test.\n\n\nUpdate ReactTestUtilsAct-test.js\n\n\npass the mock scheduler warning test,\n\nrewrite some tests to use Scheduler.yieldValue\n\nstructure concurrent/legacy suites neatly\n\n\npass failing tests in batchedmode-test\n\n\nfix pretty/lint/import errors\n\n\npass test-build\n\n\nnit: pull .create(null) out of the act() call\n\n", 'Event API: isTargetWithinEventResponderScope on unmounted event components (#15672)', 'Event API: Add responder allowMultipleHostChildren flag (#15646)', 'Add withSuspenseConfig API (#15593)\n\nAdd suspendIfNeeded API and a global scope to track it\n\nAdds a "current" suspense config that gets applied to all updates scheduled\nduring the current scope.\nI suspect we might want to add other types of configurations to the "batch"\nso I called it the "batch config".\nThis works across renderers/roots but they won\'t actually necessarily go\ninto the same batch.\n\n\nAdd the suspenseConfig to all updates created during this scope\n\n\nCompute expiration time based on the timeout of the suspense config\n\n\nTrack if there was a processed suspenseConfig this render pass\n\n\nWe\'ll use this info to suspend a commit for longer when necessary.\n\nMark suspended states that should be avoided as a separate flag\n\nThis lets us track which renders we want to suspend for a short time vs\na longer time if possible.\n\n\nSuspend until the full expiration time if something asked to suspend\n\n\nReenable an old test that we can now repro again\n\n\nSuspend the commit even if it is complete if there is a minimum delay\n\n\nThis can be used to implement spinners that don\'t flicker if the data\nand rendering is really fast.\n\nDefault timeoutMs to low pri expiration if not provided\n\nThis is a required argument in the type signature but people may not\nsupply it and this is a user facing object.\n\nRename to withSuspenseConfig and drop the default config\n\nThis allow opting out of suspending in some nested scope.\nA lot of time when you use this function you\'ll use it with high level\nhelpers. Those helpers often want to accept some additional configuration\nfor suspense and if it should suspend at all. The easiest way is to just\nhave the api accept null or a suspense config and pass it through. However,\nthen you have to remember that calling suspendIfNeeded has a default.\nIt gets simpler by just saying tat you can pass the config. You can have\nyour own default in user space.\n\nTrack the largest suspense config expiration separately\n\nThis ensures that if we\'ve scheduled lower pri work that doesn\'t have a\nsuspenseConfig, we don\'t consider its expiration as the timeout.\n\n\nAdd basic tests for functionality using each update mechanism\n\n\nFix issue when newly created avoided boundary doesn\'t suspend with delay\n\n\nAdd test for loading indicator with minLoadingDurationMs option\n\n', '[Fresh] Set up initial scaffolding (#15619)\n\n\nAdd a minimal failing test for hot reload\n\n\nSet up scaffolding for React Fresh\n\n\nConsider type family when comparing elementType\n\n\nRendering an element with stale type should not cause it to remount.\nWe only do this for FunctionComponent tag since checking is unnecessary for classes or host components.\n\nAdd support for forwardRef()\n\nInitially I thought I would compare families of inner .render functions.\nHowever, there is a corner case where this can create false positives. Such as when you forwardRef(X) the same X twice. Those are supposed to be distinct. But if we compare .render functions, we wouldn\'t be able to distinguish them after first reload.\nIt seems safer to rely on explicit registration for those. This should be easy when forwardRef() call is in the same file, and usually it would be. For cases like HOCs and style.div... factories that return forwardRef(), we could have the register helper itself "dig deeper" and register the inner function.\n\nShow how forwardRef inner identity can be inferred\n\nThe register implementation can read the inner identity itself.\n\n\nAdd missing DEV to tests\n\n\nAdd support for memo() (without fixing bailouts)\n\n\nThis adds rudimentary support for memo components. However, we don\'t actually skip bailouts yet, so this is not very useful by itself alone. Tests have TODOs that we need to remove after bailout skipping is done.\n\n\nRefactor type comparison for clarity\n\n\nHot update shouldn\'t re-render ancestor components unnecessarily\n\n\nMy code had a bug where it checked for a wrong thing in a wrong set, leading us to always re-render.\nThis fixes the checks so that we only schedule updates for things that were actually edited.\n\n\nAdd test coverage for memo(fn, areEqual)\n\n\nExplicitly skip bailouts for hot reloading fibers\n\n\nThis forces even memo() with shallow comparison to re-render on hot update.\n\n\nRefactor scheduling update to reduce duplication\n\n\nRemove unused variable in test\n\n\nDon\'t check presence in a set while not hot reloading\n\n\nMake scheduleHotUpdate() take named arguments\n\n\nDon\'t keep unedited component types in the type => family map\n\n\nIt\'s unnecessary because if they haven\'t been edited, there\'s no special reconciliation logic.\n\nAdd signatures that force remounting\n\nSignatures let us force a remount of a type even if from React\'s point of view, type is the same.\nA type has one current signature. If that signature changes during next hot update, all Fibers with that type should be deleted and remounted.\nWe do this by mutating elementType scheduling a parent.\nThis will be handy to force remount of mismatching Hooks, as well as failed error boundaries.\nFor this to fully work, we\'ll need to add a way to skip built-in bailouts for all Fiber types. This will be the most invasive and annoying change. I did it for HostRoot in this PR but there\'s more. I\'ll add an automated test case that catches the missing bailout bailouts.\n\nSupport forced remounting for all component types\n\nThis teaches all parent component types to remount their child if necessary.\nIt also adds tests for them.\n\nRemount effects while preserving state for hot reloaded components\n\nThis makes sure that changes to code always propagate.\nIt can break components that aren\'t resilient to useEffect over-firing, but that seems like a good constraint since you might need to add a dependency later anyway, and this helps avoid coding yourself into the corner.\n\n\nAdd missing DEV blocks to tests\n\n\nFix unused variables in tests\n\n\nRemove outdated TODO\n\n\nExpose scheduleHotUpdate directly\n\n\nInline isCompatibleType\n\n\nRun one check per component for invalidating deps\n\n\nThis also makes the bailouts more targeted--no need to remount useEffect for a parent component of remounted fiber.\n\nResolve .type early\n\nThis moves resolving to set up the right .type early instead of doing this before render.\nA bit more future-proof in case we want to restructure the begin phase later.\nForwardRef is special because its type is a wrapper but it can be hot reloaded by itself.\nSo we have a special overload for it that reconstucts the wrapper type if needed.\n\n\nAdd a Suspense todo\n\n\nUse current.type !== workInProgress.type for ignoring deps\n\n\nThis gets rid of one of the sets.\n\nUse workInProgress.type !== current.type check for force re-render\n\nWe still use a set for forced remount though.\n\nUse wip.type !== current.type check in more places\n\nThis also disables the remounting tests. They need a separate approach.\n\n\nUse a dedicated remount mechanism\n\n\nAdd a test for offscreen trees\n\n\nIt has a TODO because it seems like offscreen updates are incorrectly applied too soon.\n\n\nEnable offscreen test now that it is fixed\n\n\nFix corner cases in the new remounting mechanism\n\n\nRemount failed error boundaries on hot reload\n\n\nFix test now that act() flushes\n\n\nThis test is manual so I don\'t actually want act here.\n\n\nNits\n\n\nAdd comments\n\n', '[Fresh] Support lazy() and add Suspense tests (#15681)\n\n\nTest that state is not leaked between components\n\n\nSupport lazy and add Suspense tests\n\n\nNits\n\n', "[Fresh] Don't traverse remounted trees (#15685)\n\nDon't traverse children when hot reloading needs a remount\n\nIf we're gonna remount that tree anyway, there is no use in traversing its children beforehand.\n\nAdd a test verifying hot reload batches updates\n\nOtherwise there is a risk of it being super slow due to cascades.", '[Fresh] Support re-rendering lazy() without losing state (#15686)\n\n\nSupport re-rendering lazy() without losing state\n\n\nClearer naming\n\n', 'Inform DevTools of commit priority level (#15664)\n\nPass inferred priority level to DevTools commit hook in PROFILE mode\n', 'flush only on exiting outermost act() (#15682)', 'Flare: update invalid accessor warnings + add no-ops (#15693)', 'Flare: simplify dispatchEvent discrete argument (#15694)', '[Fresh] Set up infra for runtime and Babel plugin (#15698)\n\n\nAdd a stub for React Fresh Babel plugin package\n\n\nMove ReactFresh-test into ReactFresh top level directory\n\n\nAdd a stub for React Fresh Runtime entry point\n\n\nExtract Fresh runtime from tests into its entry point\n\n', '[Flare] Update interactiveUpdates flushing heuristics (#15687)', 'Rename "loading" to "busy" in SuspenseConfig API (#15699)\nloadingDelayMs -> busyDelayMs\nminLoadingDurationMs -> busyMinDurationMs', "Fix missing return pointer assignment (#15700)\n\nFix missing return pointer assignment\n\nI found a bug using the fuzz tester that manifested as incorrect\nordering of children in the host tree, but whose root cause was a\nmissing return pointer assignment on a work-in-progress fiber.\nUsually return pointers are set during reconciliation\n(reconcileChildFibers) but this particular assignment happens inside\nthe custom reconciliation implementation used by Suspense boundaries.\nI would not be surprised if there were similar bugs related to incorrect\nreturn pointers. You're supposed to update the return pointer\nwhenever a work-in-progress fiber is created, but there's nothing in\nthe contract of the createFiber or createWorkInProgress function\nthat implies this. I propose that we update their signatures to accept\nthe return fiber as an argument. I will do this in a follow-up.\nIn this commit, I rearranged updateSuspenseComponent slightly so that\nevery call to createWorkInProgress or a createFiber* function is\nimmediately followed by a return pointer assignment.\nI hardcoded the fuzz test case that surfaced the bug.\n\nUpdate all progressed children in list\n\nprogressedPrimaryChild is a list, not a single fiber. Need to iterate\nthrough every child and update their return pointers.", 'Flare: change flushDiscreteUpdates invariant to warning (#15702)', 'Fix ReactFiberNewContext spelling (#15692)', "Parallelize CircleCI jobs using workflows (#15704)\nUpdates the CircleCI config to use the workflows features to run jobs in\nparallel, instead of the parallelism option. This change alone doesn't\nimprove the overall build time much, since almost all of the total time\nis spent running the Rollup script, which runs entirely sequentially.\nBut it does improve reporting, and should make it easier to add\nadditional parallel jobs in the future.", '[Flare] Account for fixed elements in getAbsoluteBoundingClientRect (#15707)', '[Flare] update getEventCurrentTarget to use fiber tree (#15708)', 'Fix Flow (#15710)', 'Always run yarn after restoring modules cache (#15712)', 'Remove redundant test run (#15713)', "[Fresh] Initial Babel plugin implementation (#15711)\n\n\nAdd initial Babel plugin implementation\n\n\nRegister exported functions\n\n\nFix missing declarations\n\n\nAlways declare them at the bottom and rely on hoisting.\n\n\nRemove unused code\n\n\nDon't pass filename to tests\n\n\nI've decided for now that the plugin doesn't need filename, and it will be handled by module runtime integration instead.\n\n\nFix bugs\n\n\nCoalesce variable declarations\n\n", "Update sizebot to match name of CircleCI build job (#15714)\nThe sizebot scrapes the GitHub /statuses endpoint to get the lastest\nCircleCI build number for master, in order to fetch the bundle size\ninfo for that build, which are stored as build artifacts. (There's gotta\nbe a better way to do this, but that's what we have for now.) This\nupdates the script to match the name of the updated CircleCI job that\ngenerates the bundle sizes.", '[Flare] event component displayName is now mandatory (#15717)', '[react-native] Use path-based imports instead of Haste for the RN renderer (#15604)\n\n[react-native] Use path-based imports instead of Haste for the RN renderer\n\nTo move React Native to standard path-based imports instead of Haste, the RN renderer that is generated from the code in this repo needs to use path-based imports as well since the generated code is vendored by RN. This commit makes it so the interface between the generated renderers and RN does not rely on Haste and instead uses a private interface explicitly defined by RN. This inverts control of the abstraction so that RN decides the internals to export rather than React deciding what to import.\nOn RN\'s side, a new module named react-native/Libraries/ReactPrivate/ReactNativePrivateInterface explicitly exports the modules used by the renderers in this repo. (There is also a private module for InitializeCore so that we can import it just for the side effects.) On React\'s side, the various renderer modules access RN internals through the explicit private interface.\nThe Rollup configuration becomes slimmer since the only external package is now react-native, and the individual modules are instead listed out in ReactNativePrivateInterface.\nTask description: https://github.com/facebook/react-native/issues/24770\nSister RN PR (needs to land before this one): https://github.com/facebook/react-native/pull/24782\nTest Plan: Ran unit tests and Flow in this repo. Generated the renderers and manually copied them over to the RN repo. Ran the RN tests and launched the RNTester app.\n\nAccess natively defined "nativeFabricUIManager" instead of importing it\n\nSome places in the Fabric renderers access nativeFabricUIManager (a natively defined global) instead of importing UIManager. While this is coupling across repos that depends on the timing of events, it is necessary until we have a way to defer top-level imports to run after nativeFabricUIManager is defined. So for consistency we use nativeFabricUIManager everywhere (see the comment in https://github.com/facebook/react/pull/15604#pullrequestreview-236842223 for more context).', '[Flare] Ensure getAbsoluteBoundingClientRect aligns with offsetParent (#15720)', 'Set up cron job to run fuzz tester (#15718)\nSets up a CircleCI workflow to run the fuzz tests with a randomly\ngenerated seed. The workflow runs on an hourly schedule.', "Rename ReactFiberScheduler -> ReactFiberWorkLoop and extract throwException from Unwind (#15725)\n\nRename ReactFiberScheduler to ReactFiberWorkLoop\n\nThe scheduling part is mostly extracted out to the scheduler package.\nWhat's remaining is mostly around the loop around each section of work.\nI name it something with Work in it because it's very related to the\nBeginWork, CompleteWork and UnwindWork sections.\n\nExtract throwException from UnwindWork\n\nOur throwing works more like algebraic effects in that it's a separate\nphase where we find a handler and we later unwind.", 'Typo in CircleCI config', "[Fresh] Babel plugin now handles HOCs + add integration tests (#15724)\n\n\nRefactor component search to prepare for deeper traversals\n\n\nRegister HOCs with intermediate results\n\n\nRegister components that are used as JSX types\n\n\nAdd integration test skeleton\n\n\nThe integration test combines testing runtime together with the Babel plugin. It's a bit harder to debug because multiple things can go wrong, but it helps us build confidence that specific scenarios work well.\n\n\nAdd HOC integration test and fix conflict with JSX transform\n\n\nInfer usage from createElement too\n\n\nThis helps us avoid dependency on the plugin order.\n\n\nRemove outdated comments\n\n\nWrap tests in DEV\n\n\nSupport export default hoc(...) for anonymous functions\n\n\nFix test indentation\n\n\nFix comment typo\n\n\nUse named function for test as this case is more important\n\n", 'Remove sizebot race condition (#15735)\nSometimes the status of the build job is not in the first page of\nthe /statuses endpoint. The combined /status endpoint consolidates\nthe entries, though, so it always appears there.', '[Flare] More fixes for getAbsoluteBoundingClientRect (#15746)', '[Flare] Deeply prevent default on anchor elements (#15750)', 'Adds test for #15732. (#15747)', 'Fix double spaces. (#15641)', '[Suspense] Add Batched Mode variant to fuzz tester (#15734)', "Clean up (#15755)\nexpirationTime has already been checked if it's sync.\ntimeout can now be longer than 5 seconds when a suspense config is used.\nWe might want to adjust the heuristics but it's not internally consistent\nwithout this.", "[Fresh] Generate signatures for Hooks (#15733)\n\nGenerate signatures for Hooks\n\nThis currently only works one level deep. For custom Hooks, we'll need to add some way to compose signatures.\n\nBe more resilient to plugin conflicts\n\nThis prevents a class of problems where other plugins cause our visitor to re-run.\nIt's a standard Babel practice, e.g.:\nhttps://github.com/babel/babel/blob/8c7d4b55c99ff34cb9d493d452472e59b5ed1e70/packages/babel-plugin-transform-react-constant-elements/src/index.js#L85-L86\n\n\nRemove unnecessary stuff from debugging\n\n\nInclude Foo.useHookName() calls into the signature\n\n\nAdd an integration test for adding/removing an effect\n\n\nAdd integration test for changing custom Hook order\n\n\nInclude custom Hooks into the signatures\n\n\nFix inferred names for function expressions\n\n\nSupport export default hoc(Foo) when Foo is defined separately\n\n\nAdd more built-in Hooks\n\n", '[Flare] Adds onContextMenu and fixes some contextmenu related issues (#15761)', 'Lint rule for unminified errors (#15757)\n\nLint rule for unminified errors\n\nAdd a lint rule that fails if an invariant message is not part of the\nerror code map.\nThe goal is to be more disciplined about adding and modifiying\nproduction error codes. Error codes should be consistent across releases\neven if their wording changes, for continuity in logs.\nCurrently, error codes are added to the error code map via an automated\nscript that runs right before release. The problem with this approach is\nthat if someone modifies an error message in the source, but neglects to\nmodify the corresponding message in the error code map, then the message\nwill be assigned a new error code, instead of reusing the existing one.\nBecause the error extraction script only runs before a release, people\nrarely modify the error code map in practice. By moving the extraction\nstep to the PR stage, it forces the author to consider whether the\nmessage should be assigned a new error code. It also allows the reviewer\nto review the changes.\nThe trade off is that it requires more effort and context to land new\nerror messages, or to modify existing ones, particular for new\ncontributors who are not familiar with our processes.\nSince we already expect users to lint their code, I would argue the\nadditional burden is marginal. Even if they forget to run the lint\ncommand locally, they will get quick feedback from the CI lint job,\nwhich typically finishes within 2-3 minutes.\n\nAdd unreleased error messages to map\n', "Don't extract errors in CI (#15758)\nRemoves --extract-errors argument from CI build script command.\nInstead, the author is expected to run yarn extract-errors locally\nor manually edit the error code map.\nThe lint rule should be sufficient to catch unminified errors, but\nas an extra precaution, I added a post-build step that greps the\nproduction bundles. The post-build step works even if someone disables\nthe lint rule for a specific line or file.", "Parallelizes the build script across multiple processes (#15716)\n\nWrite size info to separate file per bundle\n\nbundle-sizes.json contains the combined size information for every\nbuild. This makes it easier to store and process, but it prevents us\nfrom parallelizing the build script, because each process would need to\nwrite to the same file.\nSo I've updated the Rollup script to output individual files per build.\nA downstream CI job consolidates them into a single file.\nI have not parallelized the Rollup script yet. I'll do that next.\n\nParallelize the build script\n\nUses CircleCI's parallelism config option to spin up multiple build\nprocesses.", 'Update name of CI job in sizebot (#15767)\nSame as #15714. I moved the artifacts step to a different job, so I\nneed to update the name in the sizebot script to match.', "using the wrong renderer's act() should warn (#15756)\n\nwarn when using the wrong renderer's act around another renderer's updates\n\nlike it says. it uses a real object as the sigil (instead of just a boolean). specifically, it uses a renderer's flushPassiveEffects as the sigil. We also run tests for this separate from our main suite (which doesn't allow loading multiple renderers in a suite), but makes sure to run this in CI as well.\n\n\nunneeded (and wrong) comment\n\n\nrun the dom fixture on CI\n\n\nupdate the sigil only in DEV\n\n\nremove the obnoxious comment\n\n\nuse an explicit export for the sigil\n\n", 'React Events: support legacy browser Spacebar key value (#15766)', 'Move fixtures test to its own CI job\nRunning it in parallel to the other post-build jobs shaves ~30 seconds\noff the total CI time.', 'React Events: check window before using navigator (#15768)', 'Fix sizebot (#15771)\nThe previous naming scheme used the name of the resulting bundle file.\nHowever, there are cases where multiple bundles have the same filename.\nThis meant whichever bundle finishes last overwrites the previous ones\nwith the same name.\nThe updated naming scheme is bundle-sizes-<CI_NODE_INDEX>.json.\nInstead of generating a separate info file per bundle, it now creates\none per process.', "[Suspense] Change Suspending and Restarting Heuristics (#15769)\n\nTrack most recent commit time of a fallback globally\n\nThis value is going to be used to avoid committing too many fallback\nstates in quick succession. It doesn't really matter where in the tree\nthat happened.\nThis means that we now don't really need the concept of SuspenseState\nother than has a flag. It could be made cheaper/simpler.\n\nChange suspense heuristic\n\nThis now eagerly commits non-delayed suspended trees, unless they're\nonly retries in which case they're throttled to 500ms.\n\n\nRestart early if we're going to suspend later\n\n\nUse the local variable where appropriate\n\n\nMake ReactLazy tests less specific on asserting intermediate states\n\n\nThey're not testing the exact states of the suspense boundaries, only\nthe result. I keep assertions that they're not already resolved early.\n\n\nAdjust Profiler tests to the new heuristics\n\n\nUpdate snapshot tests for user timing tests\n\n\nI also added a blank initial render to ensuree that we cover the suspended\ncase.\n\nAdjust Suspense tests to account for new heuristics\n\nMostly this just means render the Suspense boundary first so that it\nbecomes an update instead of initial mount.\n\nTrack whether we have a ping on the currently rendering level\n\nIf we get a ping on this level but have not yet suspended, we might\nstill suspend later. In that case we should still restart.\n\nAdd comment about moving markers\n\nWe should add this to throwException so we get these markers earlier.\nI've had to rewrite tests that test restarting to account for the delayed\nrestarting heuristic.\nIdeally, we should also be able to restart from within throwException if\nwe're already ready to restart. Right now we wait until the next yield.\n\n\nAdd test for restarting during throttled retry\n\n\nAdd test that we don't restart for initial render\n\n\nAdd Suspense Heuristics as a comment in Throw\n\n", 'React Events: allow Tab+Alt on Mac in Focus responder (#15679)\n\nFix issue with Tab+alt not being considered as isGlobalFocusVisible candidate on Mac\nAdd test for Tab+alt on Mac setting pointerType: "keyboard" on a focus event\n', '[Flare] Remove deprecated keypress event (#15795)\nkeypress is a deprecated event.', 'WorkPhase -> ExecutionContext\nWorkPhase is an enum that represents the currently executing phase of\nthe React update -> render -> commit cycle. However, in practice, it\'s\nhard to use because different "phases" can be nested inside each other.\nFor example, the commit phase can be nested inside the\n"batched phase."\nThis replaces WorkPhase with a different concept: ExecutionContext.\nExecutionContext is a bitmask instead of an enum. It represents a stack\nof React entry points. For example, when batchedUpdates is called\nfrom inside an effect, the ExecutionContext is\nBatchedContext | CommitContext.', 'Switch to "discrete" and "continuous" terminology\nEvents were previously described as "interactive" or "non-interactive".', 'Fix casing of shouldflushDiscreteUpdates\nshouldflushDiscreteUpdates -> shouldFlushDiscreteUpdates', "[Events] Nested discrete events across systems\nIf an event in the old system is dispatched synchronously within an\nevent from the new system, or vice versa, and the inner event is a\ndiscrete update, React should not flush pending discrete updates before\nfiring the inner event's handlers, even if the outer event is not\ndiscrete.\nAnother way of saying this is that nested events should never force\nReact to flush discrete updates.\nArguably, if the outer event is not a discrete event, then the inner\nevent should flush the pending events. However, that would be a\nbreaking change. I would argue this isn't so bad, however, given that\nnested events are pretty rare. They don't fit nicely into our event\nmodel regardless, since we don't support nested React renders. In the\nfuture we should consider warning when events are nested.", "[ESLint] don't warn for Flow type variables (#15804)\nIn Exhaustive Deps check for react-hooks don't warn if the dependency is\na Flow type variable.", "[react-native] Rewrite Haste imports in RN shims and add .fb.js extension (#15786)\nThis commit is a follow-up to https://github.com/facebook/react/pull/15604, which explains more of the rationale behind moving React Native to path-based imports and the work needed in the React repository. In that linked PR, the generated renderers were updated but not the shims; this commit updates the shims.\nThe problem is that FB needs a different copy of the built renderers than the OSS versions so we need a way for FB code to import different modules than in OSS. This was previously done with Haste, but with the removal of Haste from RN, we need another mechanism. Talking with cpojer, we are using a .fb.js extension that Metro can be configured to prioritize over .js.\nThis commit generates FB's renderers with the .fb.js extension and OSS renderers with just .js. This way, FB can internally configure Metro to use the .fb.js implementations and OSS will use the .js ones, letting us swap out which implementation gets bundled.\nTest Plan: Generated the renderers and shims with yarn build and then verified that the generated shims don't contain any Haste-style imports. Copied the renderers and shims into RN manually and launched the RNTester app to verify it loads end-to-end. Added .fb.js to the extensions in metro.config.js and verified that the FB-specific bundles loaded.", 'chore: use jest-serializer-raw for react-fresh snapshots (#15806)', '[Flare] Ignore keyboard interactions on text input children (#15810)', "[Flare] Fix isPressWithinResponderRegion logic (#15808)\nCompare the viewport-relative coordinates of getBoundingClientRect with those\nof the event's client{X,Y} values. This fixes press within scrollable nodes.", 'Updated release script to be Workflow aware (#15809)', '[Flare] Add event position properties to Hover responder (#15819)', '[Flare] Fix nativeEvent.x/y for older browsers (#15820)', 'Use Circle CI API v2 to get artifacts job ID (#15821)', "[Events] Add support for events that are both user-blocking and continuous (#15811)\n\n[Events] Add EventPriority enum\n\nReact DOM's DispatchConfig for synthetic events has an isDiscrete\nfield that affects how updates triggered by an event are scheduled.\nEvents are either discrete or continuous.\nThis commit adds an additional type of configuration where an event\nhas user-blocking priority, but is not discrete. E.g. updates triggered\nby hover are more important than the default, but they don't need to\nbe processed serially. Because there are now three types of event\npriority instead of two, I've replaced the isDiscrete boolean with an\nenum: eventPriority.\nThis commit implements the new enum value but does not change any\nbehavior. I'll enable it behind a feature flag in the next commit.\nI've only implemented this in the legacy event system. I'll leave Flare\nfor a follow-up.\n\nenableUserBlockingEvents feature flag\n\nAdds a feature flag to increase the priority of events like mouseover,\nwithout making them discrete.", '[Flare] Fix isTouchEvent (#15824)', 'nit: a quick copy edit for an act() message/comment (#15805)', "[Flare] EventPriority enum (#15823)\n\nSame as previous commit, but for Flare\n\nI don't know what the public API for setting the event priority should\nbe. Right now it accepts a numeric enum, but is this what we want?\nMaybe it should be a string enum? I've punted on this for now.\n\nAdd test for hover events\n", '[React Native] Remove eventTypes from ReactNativeBridgeEventPlugin (#15802)', 'Rename ReactFeatureFlags to remove the .fb suffix. (#15826)', '[Flare] Small Swipe/Drag fixes (#15825)', '[Flare] Add basic Scroll event responder module (#15827)', "[Fresh] Support classes by force-remounting them on edit (#15801)\n\n\nRemount classes during hot reload\n\n\nFix a crash when Hook isn't in scope inside the signature\n\n\nMinor tweaks\n\n\nSupport a comment annotation to force state reset\n\n\nRefactoring: pass a function instead of WeakMap\n\n\nThis hides the implementation a little bit and reduces how much React knows about the underlying mechanism.\n\nRefactor: use forceReset to remount unknown Hooks\n\nWe already have the logic to reset a component, so let's just reuse it instead of that special case.", '[Flare] Fix ES6 issues with IE11 (#15834)', "[Fresh] Capture Hook signatures lazily on first render (#15832)\n\nSplit the signature call into two calls\n\nThis adds a render-time signature call by making signature curried. We need both calls. The init time tells us which type has which signature. The render time call says when's a good time to capture the lazy Hooks tree. This is necessary for supporting inline requires. I will do that in next commit.\n\nLazily compute Hook list on first render\n\nThis ensures inline requires don't break comparisons between Hook signatures of previous and next versions by caching Hook list at the time of first render.\n\nRefactor computing Hook signature keys\n\nInstead of a traversal during the comparison, explicitly compute full keys. This makes it easier to debug mismatches.", '[Flare] Improve runtime performance of hit target intersection (#15836)', '[Flare] Listen to document.body + add stopPropagation to Press (#15853)', '[Flare] Move Press root event removal till click phase (#15854)', "[Fresh] Implement missing features (#15860)\n\nFix existing test\n\nThis test included a change in variable name. It wasn't needed, and distracts from the actual thing being tested (the annotation).\n\n\nReset state on edits to initial state argument\n\n\nAdd a way to check whether there are hot updates\n\n\nprepareUpdate() now returns null if there are none.\n\nAdd a way to query host nodes for families\n", "[Suspense] Use !important to hide Suspended nodes (#15861)\nSuspended nodes are hidden using an inline display: none style. We do\nthis instead of removing the nodes from the DOM so that their state is\npreserved when they are shown again.\nInline styles have the greatest specificity, but they are superseded by\n!important. To prevent an external style from overriding React's, this\ncommit changes the hidden style to display: none !important.\nMaYBE AnDREw sHOulD JusT LEArn Css\nI attempted to write a unit test using getComputedStyle but JSDOM\ndoesn't respect !important. I think our existing tests are sufficient\nbut if we were to decide we need something more robust, I would set up\nan e2e test.", '[Flare] Unsure root events are removed on contextmenu (#15862)', '[React Native] Replace touch discrepancy errors to warnings (#15866)', 'Remove disableYielding feature flag (#15654)\nObviated by Batched Mode.', 'Fix fuzz test environment variable', "[Suspense] Use style.setProperty to set display (#15882)\nFollow up to #15861.\nTurns out you can't set !important using a normal property assignment.\nYou have to use style.setProperty.\nMaybe Andrew should just learn CSS.\nIE9 doesn't support style.setProperty so we'll fall back to setting\ndisplay: none without important, like we did before #15861 Our\nadvice for apps that need to support IE9 will be to avoid using\n!important. Which seems like good advice in general, but IANACSSE.\nTested on FB and using our Suspense DOM fixture.", '[Fresh] Make transform resilient to plugin order (#15883)\n\nRun Fresh tests in two modes: with and without destructuring\n\nDestructuring transform messes up the way we collect signatures for Hooks. This adds failing tests.\n\nExtract collecting calls to Hooks into a separate visitor\n\nThis introduces a bit of a perf penalty but makes our plugin resilient to presence of destructuring transform and their order. Fixes new tests.\n\nInline some logic into the call visitor\n', '[Flare] Refactor of Press to fix various issues (#15878)', '[Flare] remove stopLocalPropagation option + modify responder ownership (#15889)', '[Suspense] Fix bad loading state not being delayed (#15891)\nFixes a bug where a bad loading state is initially suspended, but a\nsubsequent update with the same expiration time causes it to\ncommit immediately.', 'Fix outdated test comments (#15892)\nComments for this unit test are confusing because they refer to an\nearlier version of the same test.', 'Interaction tracing works across hidden and SSR hydration boundaries (#15872)\n\nInteraction tracing works across hidden and SSR hydration boundaries\n', '[Fresh] react-fresh => react-refresh (#15888)', 'Remove outdated test renderer comments (#15898)', '[Fresh] Rename findHostNodesForHotUpdate to findHostInstancesForHotUpdate (#15904)', '[Fresh] Fall back to Map/Set if Weak equivalents are not available (#15907)\n\n\nFall back to Map/Set if Weak equivalents are not available\n\n\nFix Prettier vs Flow fighting\n\n', '[Flare] add disableContextMenu to Press (#15909)', 'Construct Error at invariant call site for clearer stack traces (#15877)', '[Flare] Move unstable_createEventComponent to ReactDOM (#15890)', "Remove mention of Prepack (#15922)\nWe aren't shipping Prepack anytime soon. FB-only: see D15585102.", '[Flare] Add RN build step for ReactTypes (#15926)', '[Flare] Press events include defaultPrevented (#15916)\n\nRename disableContextMenu to preventContextMenu\nChange the behaviour of preventContextMenu so that onContextMenu is still called when the native context menu is prevented.\n', '[Flare] Rename createEventComponent -> createEvent (#15929)', "[Scheduler] Use continuation pattern for posting host callback (#15910)\n\n[scheduler] Internal rename: Callback -> Task\n\nRename Callback type to Task. Does not affect the public API, only\ninternal names, though eventually we'll probably want to align with the\nWICG Main-thread Scheduling proposal\n(https://github.com/WICG/main-thread-scheduling).\n\n[scheduler] flushFirstTask() -> flushTask(task)\n\nPass task as an argument to flushTask instead of using a module-\nlevel variable.\n\n[scheduler] Add startTime field\n\nThis does not change any semantics, but in the future startTime may\nrepresent a future time, to support delayed tasks.\n\n[Scheduler] Use continuation pattern for host cb\n\nAs I prepare to implement integrated timers, I noticed some\npeculiarities in the Scheduler implementation that could afford to be\ncleaned up.\nThis is a refactor and shouldn't affect any observable behavior; mostly\nit removes some concepts that existed in earlier iterations of Scheduler\nand are no longer needed.\nThe main change is to how the DOM implementation schedules an additional\ncallback before yielding to the main thread. It used to follow the same\ncode path for scheduling task; now it has its own branch directly\ninside the message event handler. The special case for error handling\n— where we call postMessage immediately without waiting for rAF —\nhas similarly been localized inside the catch block of the message\nevent handler.", "[Scheduler] Integrated timers (#15911)\nAdds a delay option to scheduleCallback. When specified, the task is\nnot scheduled until after the delay has elapsed.\nDelayed tasks are scheduled on a timer queue maintained by Scheduler,\ninstead of directly with the browser. The main benefit is to reduce the\nnumber of native browser timers that Scheduler's message event handler\nhas to contend with; so, after yielding to the browser at the end of the\nframe, Scheduler will more quickly regain control of the main thread.\nBecause we're able to flush the timer queue without yielding to browser\ntimer events, there's also less task switching overhead (though in the\nabsence of isInputPending, this is mostly a theoretical win since we\nyield every frame regardless).\nIf the queue of non-delayed tasks is non-empty — that is, if there is\npending CPU bound work — Scheduler is able to avoid a browser timer\nentirely by periodically checking its own timer queue while flushing\ntasks (inside the message event handler). Once the CPU-bound work is\ncomplete, if there are still pending delayed tasks, Scheduler will\nschedule a single browser timer that fires once the earliest delay\nhas elapsed.", "[Fresh] Track mounted roots via DevTools Hook (#15928)\n\n\nTrack mounted roots via DevTools Hook\n\n\nAdd helper utilities to the runtime\n\n\nThese utilities will likely be needed by all module systems, so let's just put them here.\n\n\nWrap more things in DEV\n\n\nFix tests to also be DEV-only\n\n", 'Add SuspenseList Component (#15902)\n\n\nAdd SuspenseList component type\n\n\nPush SuspenseContext for SuspenseList\n\n\nForce Suspense boundaries into their fallback state\n\n\nIn the "together" mode, we do a second render pass that forces the\nfallbacks to stay in place, if not all can unsuspend at once.\n\n\nAdd test\n\n\nTransfer thennables to the SuspenseList\n\n\nThis way, we end up retrying the SuspenseList in case the nested boundary\nthat just suspended doesn\'t actually get mounted with this set of\nthennables. This happens when the second pass renders the fallback\ndirectly without first attempting to render the content.\n\n\nAdd warning for unsupported displayOrder\n\n\nAdd tests for nested sibling boundaries and nested lists\n\n\nFix nested SuspenseList forwarding thennables\n\n\nRename displayOrder to revealOrder\n\n\nDisplay order has some "display list" connotations making it sound like\na z-index thing.\nReveal indicates that this isn\'t really about when something gets rendered\nor is ready to be rendered. It\'s about when content that is already there\ngets to be revealed.\n\n\nAdd test for avoided boundaries\n\n\nMake SuspenseList a noop in legacy mode\n\n\nUse an explicit suspense list state object\n\n\nThis will be used for more things in the directional case.', '[Flare] Fix Press retention state regression (#15936)', "[act] reset scope depth on synchronous errors (#15937)\n\nreset scope depth on synchronous errors\n\nwe weren't resetting the acting scope depth on sync errors thrown in the callback. this fixes that.\n\n\ntypos\n\n\nadd a test to make sure sync error propagate\n\n", '[Fresh] Throw in prod and change annotation (#15939)\n\n\nDisable React Refresh Babel transform in prod\n\n\nThrow early if React Refresh runtime is imported in production\n\n\n@hot reset -> @refresh reset\n\n', "Don't consider require-like calls to be likely HOCs (#15940)", '[Flare] Fix keyboard keyup regression (#15938)', 'Add forwards and backwards options to SuspenseList (#15918)\n\n\nAdd forwards option\n\n\nAdd backwards option\n\n\nAdd comment\n\n\nAdd customized warning messages for case and typos\n\n\nAdd some more tests for insertions and updates in start/middle/end\n\n', 'Make global names more obscure (#15941)', "[Flare] Press: fix stale deactivation region state (#15931)\nThe responder region calculation logic wasn't updating the deactivation region\nduring the lifetime of an event instance, causing incorrect behaviour when the\ncurrent press ends outside the press target and if the press target has moved\nsince the last time the first-and-only time the deactivation region was\nmeasured.", '[Flare] Add useEvent hook implementation (#15927)\n\n[Flare] Add useEvent hook implementation\n\nValidate hooks have decendent event components\nFew fixes and displayName changes\nFix more responder bugs\nUpdate error codes\n\n\nAdd another test\n\n\nAddress feedback\n\n', 'Lazily initialize dependencies object (#15944)\nMost fibers do not have events or context, so we save memory lazily\ninitializing this container node.\nFollow-up from #15927', '[Flare] Move createEvent back to React object (#15943)', '[Flare] Refine flow type annotations (#15950)', '[Flare] Guard against stateNode being null (#15952)', '[Fiber] Clear down dependencies during detachFiber (#15947)', '[Flare] Refinements to useEvent hook (#15955)', "Expire rendering the tail of SuspenseList after a timeout (#15946)\n\nExpire rendering the tail of SuspenseList after a timeout\n\nThis is the first Suspense feature that isn't actually dependent on IO.\nThe thinking here is that it's normal for a SuspenseList to show loading\nstates, and it'll be designed to handle it one at a time.\nHowever, sometimes there are lists with really big items that take a long\ntime to CPU render. Since data can become available as we do that, it is\nlikely that we have all the data and become CPU bound.\nIn that case, the list would naively just render until the end and then\ndisplay all items at once. I think that's actually what you want for fast\nlists. However, for slow ones (like News Feed), you're better off showing\na few rows at a time.\nIt's not necessarily one at a time because if you can do many in a short\nperiod of time and fit them all on the screen, then it's better to do them\nall at once than pop them in one at a time very quickly.\nTherefore, I use a heuristic of trying to render as many rows as I can in\n500ms before giving up.\nThis timer starts before the first row of the tail and we only check it\nafter. This ensures that we always make a little progress each attempt.\nAn alternative approach could be to start the time before doing the head\nof the list but we don't want that being slow prevent us from making\nfurther progress.\nCurrently, I disable this optimization at Never priority because there's\nnothing intermediate that becomes visible anyway.\n\nFix tracing through a SuspenseList\n\nThis ensures that we can spawn new work during render through arbitrary\npriorities.\nWe'll need this for other features too.\nSince each priority can commit separately we need to use an array to\ninclude the current interactions on each priority.", "[Scheduler] Yield less if there's no pending input (#15959)\nAt the end of each frame, Scheduler yields control of the main thread so\nthe browser can execute important tasks; most importantly, painting the\nscreen and responding to user input. There's some overhead involved in\nregaining control of the main thread, so we'd like to yield as\ninfrequently as possible to keep the UI responsive.\nThe reason we yield on every frame is because there's no way for us to\nknow whether we're blocking user input.\nisInputPending is an experimental browser API that gives us this\ninformation. It tells us whether there's a pending user input, which\nalso means it tells us if there's not a pending user input. We can use\nthis signal to decide whether it's OK not to yield.\nThere's a max frame length after which we'll yield regardless, as a\nprecaution against blocking non-input tasks that we don't know about.", "[Scheduler] requestPaint (#15960)\n\n[Scheduler] requestPaint\n\nSignals to Scheduler that the browser needs to paint the screen. React\nwill call it in the commit phase. Scheduler will yield at the end of\nthe current frame, even if there is no pending input.\nWhen isInputPending is not available, this has no effect, because we\nyield at the end of every frame regardless.\nReact will call requestPaint in the commit phase as long as there's at\nleast one effect. We could choose not to call it if none of the effects\nare DOM mutations, but this is so rare that it doesn't seem worthwhile\nto bother checking.\n\nFall back gracefully if requestPaint is missing\n", '[scheduler] Put isPendingInput behind a flag (#15962)', '[Scheduler] Fix navigator.isInputPending call\nMust be called as a method.', '[Scheduler] Increase max frame length to 300\nForgot to apply this change before merging.\nhttps://github.com/facebook/react/pull/15959#discussion_r296429705', 'Use function expression for custom Hook signature argument (#15956)', 'Report refreshed families to the caller (#15957)', "warn if passive effects get queued outside of an act() call. (#15763)\n\nwarn if passive effects get queued outside of an act() call\n\nWhile the code itself isn't much (it adds the warning to mountEffect() and updateEffect() in ReactFiberHooks), it does change a lot of our tests. We follow a bad-ish pattern here, which is doing asserts inside act() scopes, but it makes sense for us because we're testing intermediate states, and we're manually flush/yield what we need in these tests.\nThis commit has one last failing test. Working on it.\n\n\npass lint\n\n\npass failing test, fixes another\n\n\na test was failing in ReactDOMServerIntegrationHooks while testing an effect; the behaviour of yields was different from browser and server when wrapped with act(). further, because of how we initialized modules, act() around renders wasn't working corrrectly. solved by passing in ReactTestUtils in initModules, and checking on the finally yielded values in the specific test.\n\n\nin ReactUpdates, while testing an infinite recursion detection, the test needed to be wrapped in an act(), which would have caused the recusrsion error to throw. solived by rethrowing the error from inside the act().\n\n\npass ReactDOMServerSuspense\n\n\nstray todo\n\n\na better message, consistent with the state update one.\n\n", 'followup to #15763, fix failing test in ReactDOMTracing-test (#15972)\n\nfollowup to #15763, failing tests in ReactDOMTracing-test\n\nIt was me. I broke the build.\n\n[ignore] add a newline to trigger a build\n', "[Fresh] Retry failed roots on refresh (#15966)\n\n\nRetry failed roots on refresh\n\n\nDon't prevent retry after error -> render(null) special case\n\n\nThe check wasn't very resilient because in Concurrent Mode it looks like we can get further follow-up commits even if we captured an error. So we can't reliably distinguish the case where after an error you manually rendered null.\nRetrying on an edit after a tree failed and you rendered null in the same tree seems fine. It's also very unlikely a pattern like this actually exists in the wild.", '[Flare] Ensure Press event hook does not execute side-effects (#15976)', "don't fire missing act() warnings for react-art (#15975)\n\nuse toWarnDev for dom fixture tests\n\nforks toWarnDev from root into fixture/dom, updates tes tests to use it\n\n\ndisable act() warnings for react-art()\n\n\nFor 'secondary' renderers like react-act, we don't want to fire missing act() warnings; the wrapping renderer will fire warnings anyway, and when it flushes, it flushes effects across renderers.\n\n\nI could have used isPrimaryRenderer as the flag, but this is marked as false for react-test-renderer, and we do want the warning to fire for it. Hence a new flag.\n\n\nadd missing dependency art to fixtures/dom\n\n", "Add explicit support for ESLint 6.0.0 (#15974)\nPreemptively update tests wrt 'parser' requiring an absolute\npath rather than a package name, even though the project is\nstill using ESLint 4.\nFixes #15971", 'eslint-plugin-react-hooks@1.6.1', 'Rename StatelessComponent to FunctionComponent in react-is/README.md (#15963)', '[Flare] Move all event responders to dom directory (#15981)', '[Flare] Fix Press scroll cancellation handling (#15983)', "Fix error logging in getDerivedStateFromProps (#15797)\n\n\nFix error logging in getDerivedStateFromProps\n\n\nUpdate tests, don't log for both error boundary methods\n\n\nRe-add change lost in rebase\n\n", '[Flare] Add Hooks to event modules (#15953)', 'Prefix mock Scheduler APIs with _unstable (#15999)\nFor now this is only meant to be consumed via act.', '[Flare] Move click handling back into target phase (#15993)', '[Flare] Fix issues with touch + pointer interactions (#15997)', 'Slightly improve performance of hydration. (#15998)\n\nSlightly improve performance of hydration.\n\nAvoid loading nodeType and data couple times from the same node in a row,\nbut instead load them only once, which will help engines to run this code\nfaster, especially during startup of the application. The general approach\nis still not ideal, since hydrating this way forces the browser engine\nto materialize JavaScript wrapper objects for all DOM nodes, even if they\nare not interesting to hydration itself.\n\n\nFix condition for COMMENT_NODEs.\n\n\nImprove general code readability\n\n', 'Handle changes at module boundaries (#16002)', '[Flare] Remove event targets including TouchHitTarget (#16011)', '[Flare] Re-label Flare flag (#16014)', '[Flare] Bring Flare support to React Native Fabric (#15887)', 'fix word async -> concurrent (#15844)', 'SuspenseList Optimizations (#16005)\n\nAdd a bunch of optimizations to SuspenseList\n\nWe now are able to bail out of reconciliation and splitting out the tail\nduring deep updates that hasn\'t changed the child props. This only\nworks while the list wasn\'t suspended before.\nI also moved the second render of the "head" to the complete phase. This\ncleans it up a bit for the tail collapsing PR.\nFor this second pass I also use a new technique of resetting the child\nFibers for the second pass. This is effectively a fast path to avoid\nreconciling the children against props again.\n\nMove to didSuspend from SuspenseListState to the effectTag\n\nThe effectTag now tracks whether the previous commit was suspended.\nThis frees up SuspenseListState to be render-phase only state.\nWe use null to mean the default "independent" mode.\n\n\nRename to SuspenseListState to SuspenseListRenderState\n\n\nReuse SuspenseListRenderState across render passes\n\n\nAdd optimization to bail out of scanning children if they can\'t be suspended\n\n\nThis optimized the deep update case or initial render without anything\nsuspending.\nWe have some information available to us that tell us if nothing has\nsuspended in the past and nothing has suspended this render pass.\nThis also fixes a bug where we didn\'t tag the previous render as having\nsuspended boundaries if we didn\'t need to force a rerender.\n\nrm printChildren\n\noops', 'Flush sync bug (#16027)\n\n\nadded flush sync test\n\n\nadded code to run flushSync with ImmediatePriority\n\n\nadded code to run flushSync with ImmediatePriority\n\n\nfixed flow error\n\n\nfixed flow error\n\n', 'Add tail="collapsed" option to SuspenseList (#16007)\n\n\nAdd tail="collapsed" option\n\n\nFix issue with tail exceeding the CPU time limit\n\n\nWe used to assume that this didn\'t suspend but this branch happens in\nboth cases. This fixes it so that we first check if we suspended.\nNow we can fix the tail so that it always render an additional fallback\nin this scenario.', '[Flare] Do not block mouse presses on scroll (#16033)', 'Clone a custom hook node before use (#16019)', 'allow nested act()s from different renderers (#16039)\n\nallow nested act()s from different renderers\n\nThere are usecases where multiple renderers need to oprate inside an act() scope\n- ReactDOM.render being used inside another component tree. The parent component will be rendered using ReactTestRenderer.create for a snapshot test or something.\n- a ReactDOM instance interacting with a ReactTestRenderer instance (like for the new devtools)\nThis PR changes the way the acting sigils operate to allow for this. It keeps 2 booleans, one attached to React, one attached to the renderer. act() changes these values, and the workloop reads them to decide what warning to trigger.\nI also renamed shouldWarnUnactedUpdates to warnsIfNotActing\n\ns/ReactIsActing/IsSomeRendererActing and s/ReactRendererIsActing/IsThisRendererActing\n', '[Flare] Add more functionality to Scroll event resonder (#16036)', '[fail] Only warn on unacted effects for strict / non sync modes (#16041)\n\nonly warn on unacted effects for strict / non sync modes\n\n(basically, when fiber.mode !== 0b0000)\nWarnings on unacted effects may be too noisy, especially for legacy apps. This PR fires the warning only when in a non sync mode (concurrent/batched), or when in strict mode. This should make updating easier.\nI also added batched mode tests to the act() suite.\n\nexplicitly check for modes before warning, explicit tests for all modes\n', "[fail] reset IsThisRendererActing correctly (#16042)\n\n[fail] reset IsThisRendererActing correctly\n\nI missed this in https://github.com/facebook/react/pull/16039. I'd pointed at the wrong previous state, corrupting it in further use. This PR fixes that, and adds a test to make sure it doesn't happen again.\n\nwarn for unacted effects only in strict mode\n", '[Fire] Remove unused React fire fork (#16046)', '[Flare] Cleanup ReactFiberEvents-test (#16047)', '[Flare] Remove dead event target code (#16063)', '[Flare] createInitialState -> getInitialState (#16051)', '[Flare] Remove capture phase Flare events (#16054)', '[Flare] Clear pressStart timeout on pointercancel (#16067)', 'fix spelling error: resoltion ->  resolution (#16055)', '[Flare] Add currentTarget and unify RN and DOM codepaths (#16066)', 'Fix typos (#16076)', '[Flare] Revise responder event types (#16081)', '[Flare] Switch from currentTarget model to responderTarget model (#16082)', '[Fabric] Add dispatchCommand to React Native renderers (#16085)\n\n\nAdd dispatchCommand to the public export of the React Native renderers\n\n\nFixup invalid check\n\n\nPrettier\n\n\nPrettier\n\n', '[Flare] Remove responder flags to simplify logic (#16084)', "[Flare] Press includes button type (#16100)\n\nAllow auxillary button clicks (i.e., middle mouse button) to trigger 'onPressStart' and 'onPressEnd', but never 'onPress'.\nReport the button type – 'primary' or 'auxillary' – on the press event.\n", 'Add warning when single item or nested arrays are used with SuspenseList (#16094)', '[Scheduler] Support inferring priority from stack (#16105)\nWhen executing a task, wraps the callback in an extra function whose\nname includes the current priority level. Profiling tools with access\nto function names can use this to determine the priority of the task.', "Use Map instead of object as map in ReactNativeComponentTree (#16107)\nReal Maps should now be used in RN JS engines. In theory this should\nbe faster (but might not actually be in practice), and it avoids hitting\nupper bounds of property max counts.\nWe don't use these types of Maps in Fabric.", 'expose act() sigil correctly for umd builds (#16110)\nafter https://github.com/facebook/react/pull/16039, act was broken for umd builds. This PR fixes it.', '[Flare] Press: fix middle-click handling (#16114)\nMake sure the root events are removed after middle-click completes', '.watchmanconfig must be valid json (#16118)\nfaceworldproblems?', 'Remove React.error and React.warn (#16126)\n\nRemove React.error/React.warn with React.getComponentStack\n', 'Add tail="hidden" option to SuspenseList (#16024)\n\n\nMove misaligned comment\n\n\nAdd tail="hidden" option\n\n\nisShowingAnyFallbacks -> findFirstSuspended\n\n\nWe can\'t reset Placement tags or we\'ll forget to insert them\n\n\nDelete hasSuspendedChildrenAndNewContent optimization\n\n', 'Inject ReactDebugCurrentFrame into DevTools so it can append component stacks to warnings in DEV mode (#16127)', 'Inject getCurrentFiber() function to DevTools (#16133)\nThis returns the current value of ReactCurrentFiber and enables DevTools to append a custom (owner-only) component stack to warnings and errors in DEV mode.', 'unify deprecated/unsafe lifecycle warnings, pass tests (#16103)\n\nredoes #15431 from scratch, taking on the feedback there\nunifies the messaging between "deprecated" and UNSAFE_ lifecycle messages. It reorganizes ReactStrictModeWarnings.js to capture and flush all the lifecycle warnings in one procedure each.\nmatches the warning from ReactPartialRenderer to match the above change\npasses all the tests\nthis also turns on warnAboutDeprecatedLifecycles for the test renderer. I think we missed doing so it previously. In a future PR, I\'ll remove the feature flag altogether.\nthis DOES NOT do the same treatment for context warnings, I\'ll do that in another PR too\n', 'Move ReactFiberErrorDialog RN fork into RN itself (#16141)', 'useSubscription hook (#15022)\n\nAdded use-subscription package with README\n', '[Flare] Add Input event responder surface (#16148)', '[Flare] Add FocusWithin responder (#16152)\nFocusWithin is implemented as a separate responder, which keeps both focus\nresponders simple and allows for easier composition of behaviours.', 'clean up nextEffect pointers (#16115)', 'Adds experimental fundamental interface (#16049)', '[Flare] Ensure mouse events can use target to validate press (#16172)', '[Scheduler] Bugfix: Cancelling a continuation (#16151)\nCancelling the original task should also cancel its continuation.', "[WIP][Scheduler] Use rIC to post first callback (#16166)\nScheduler uses requestAnimationFrame to post tasks to the browser.\nIf this happens at the beginning of a frame, the callback might not\nfire until the subsequent frame, even if the main thread is idle.\nOur theory was that this wouldn't be an issue in practice, because once\nthe first rAF fires, we schedule the next rAF as early as possible in\nthat frame. Combined with our heuristic for computing frame deadlines,\nwe shouldn't get any idle time in between frames — only before the\nfirst frame.\nThis reasoning holds true when you have a small number of large tasks,\nsuch as the ones posted by React. The idle time before the task starts\nis negligible relative to the lifetime of the entire task.\nHowever, it does not hold if you have many small tasks posted over a\nspan of time, perhaps spawned by a flurry of IO events. In this case,\ninstead of single, contiguous rAF loop preceded by an idle frame, you\nget many rAF loops preceded by many idle frames. Our new theory is that\nthis is contributing to poor main thread utilization during page loads.\nTo try to reclaim as much idle time as possible, this PR adds two\nexperimental flags. The first one adds a requestIdleCallback call to\nstart the rAF loop, which will fire before rAF if there's idle time left\nin the frame. (We still call rAF in case there isn't. We start working\nin whichever event fires first.)\nThe second flag tries a similar strategy using setTimeout(fn, 0). If\nthe timer fires before rAF, we'll assume that the main thread is idle.\nIf either requestIdleCallback or setTimeout fires before rAF, we'll\nimmediately peform some work. Since we don't have a real frame time that\nwe can use to compute the frame deadline, we'll do an entire frame\nlength of work. This will probably push us past the vsync, but this is\nfine because we can catch up during the next frame, by which point a\nreal rAF will have fired and the loop can proceed the same way it\ndoes today.\nTest plan: Try this on Facebook to see if it improves load times", 'Update Suspense Priority Warning to Include Component that Triggered Update (#16030)\nImproved warning whenever lower priority events (ex. data fetching, page load) happen during a high priority update (ex. hover/click events) to include:\n1.) Name of component that triggered the high priority update or\n2.) Information that the update was triggered on the root', '[Flare] Press: fix keyboard interactions (#16179)\nPrevents Spacebar from scrolling the window.\nPrevents Enter from triggering a navigation if preventDefault is true.\nFixes the emulated mouse events test.', '[Fresh] Track unrecoverable errors (#16183)\n\n\n[Fresh] Track unrecoverable errors\n\n\nOnly initial errors set the flag\n\n', 'Enable profiler+tracing for test renderer (#16178)\nThis commit just brings the feature flags to parity with other renderers.', '[Scheduler][Bugfix] Multiple rAFs in same frame (#16184)\nAlways sets isRAFLoopRunning back to false when an animation frame is\nscheduled. Fixes a bug where two rAFs fire in the same frame, but the\nsecond one exits and fails to schedule a new rAF.\nFixes bug observed in Safari.', "[Scheduler] Add names to inline functions (#16180)\nNoticed when looking at the performance profiler with Luna that it's\nhard to tell which event causes performWorkUntilDeadline to fire\nbecause these functions are anonymous.", '[Flare] Redesign core event system (#16163)', "flush work on exiting outermost act(), with nested act()s from different renderers (#16181)\nGiven this snippet:\njsx\n    TestRenderer.act(() => {\n      TestUtils.act(() => {\n        TestRenderer.create(<Effecty />);\n      });\n    });\nWe want to make sure that all work is only flushed on exiting the outermost act().\nNow, naively doing this based on actingScopeDepth would work with a mocked scheduler, where flushAll() would flush all work across renderers.\nThis doesn't work without mocking the scheduler though; and where flushing work only works per renderer. So we disable this behaviour for a non-mocked scenario. This seems like an ok tradeoff.", "Add suspenseCallback feature for runtime tracing of loading states (#16134)\nThis adds a 'SuspenseCallback' feature flag. When the property is set on\na suspense component it will be called during the commit phase with a\nset of the immediate thenable for this component. This will allow user\ncode to build runtime tracing of the cause for a suspense boundary.", "Edit Suspense Priority Warning Message (#16186)\n\n\nmove 'component that triggered the update' in suspense priority warning message to the beginning of the message\n\n\nrenamed warnings\n\n", '[Flare] Ensure Flare components are no-ops for TestRenderer (#16192)', 'Fix suspenseCallback type warning, add a test (#16194)', 'Add guard to ensure Profiler onRender prop is function before calling (#16197)', "update legacy context warning message (#16196)\nThe link in the legacy context message doesn't point to anything context related. This changes the link to point to https://fb.me/react-legacy-context, which points to https://reactjs.org/docs/context.html#legacy-api. Also adds a line that it'll probably be gone later.", '[Flare] Remove references to EventComponent (#16206)', '[Flare] Adds useListener implementation to ReactDebugHooks (#16205)', '[Flare] Adds Keyboard event responder (#16204)', 'Warn when Using DefaultProps on Function Components (#16210)\nAs part of the process to deprecate defaultProps on function components (as per a larger proposal outlined in (https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md)), add a warning whenever someone does this.', '[Scheduler] Test browser implementation details (#16198)\nThe Scheduler implementation uses browser APIs like MessageChannel,\nrequestAnimationFrame, and setTimeout to schedule work on the main\nthread. Most of our tests treat these as implementation details;\nhowever, the sequence and timing of these APIs are not precisely\nspecified, and can vary wildly across browsers.\nTo prevent regressions, we need the ability to simulate specific edge\ncases that we may encounter in various browsers.\nThis adds a new test suite that mocks all browser methods used in our\nimplementation. It assumes as little as possible about the order and\ntiming of events. The only thing it assumes is that\nrequestAnimationFrame is passed a frame time that is equal to or less\nthan the time returned by performance.now. Everything else can be\ncontrolled at will.\nIt also includes Scheduler-specific invariants, e.g. only one rAF\ncallback can be scheduled at a time.\nIt overlaps slightly with the existing SchedulerDOM-test suite, which\nalso mocks the browser APIs, but exposes a higher-level set of testing\nprimitives. I will consolidate the two suites in a follow-up.', 'Update use-subscription README (#16216)\nIt was a little confusing that the question asked when NOT to use this package, then the answer says when to use it. I think this is a little better.', "[act] flush work correctly without a mocked scheduler (#16223)\nNot returning the value of flushPassiveEffects() in flushWork() meant that with async act, we wouldn't flush all work with cascading effects. This PR fixes that oversight, and adds some tests to catch this in the future.", "Don't hyphenate custom CSS properties for ReactDOMServer (#16167)\n\n\nDo not hyphenate custom CSS property\n\n\nMove check into the processStyleName fn\n\n\nFormatting\n\n\nadd test\n\n\nPut isCustomProperty check after conditional return\n\n\nadd test to ReactDOMServerIntegration and supress warning\n\n\nDon't indexOf twice\n\n\nSimpler fix\n\n", '[Bugfix] Check tag before calling hook effects (#16215)\n\nAdd failing test for #16215\n\nNext commit fixes it.\n\n[Bugfix] Check tag before calling hook effects\n\nTODO: Test that triggers this', '[Flare] Fix SSR issue with serializing responders prop (#16227)', "[scheduler] Yield many times per frame, no rAF (#16214)\nAdds experimental flag to yield many times per frame using a message\nevent loop, instead of the current approach of guessing the next vsync\nand yielding at the end of the frame.\nThis new approach forgoes a requestAnimationFrame entirely. It posts a\nmessage event and performs a small amount of work (5ms) before yielding\nto the browser, regardless of where it might be in the vsync cycle. At\nthe end of the event, if there's work left over, it posts another\nmessage event.\nThis should keep the main thread responsive even for really high frame\nrates. It also shouldn't matter if the hardware frame rate changes after\npage load (our current heuristic only detects if the frame rate\nincreases, not decreases).\nThe main risk is that yielding more often will exacerbate main thread\ncontention with other browser tasks.\nLet's try it and see.", '[Fresh] Transfer refs when remounting (#16241)\n\n\nAdd a failing test for refs and remounting\n\n\nTransfer ref when remounting\n\n', '[Flare] Remove longpress from press responder (#16242)\nLong press will move to a separate responder.', '[Flare] Ensure we check for bad polyfill when creating responders (#16243)', '[Flare] Remove delay props from Press (#16247)\nMoving working with delays into user-space.', '[Flare] Remove delay props from Hover (#16248)\nMoving working with delays into user-space.', "Warn when rendering tests in concurrent/batched mode without a mocked scheduler (#16207)\nConcurrent/Batched mode tests should always be run with a mocked scheduler (v17 or not). This PR adds a warning for the same. I'll put up a separate PR to the docs with a page detailing how to mock the scheduler.", "flush fallbacks in tests (#16240)\nIn this PR, for tests (specifically, code inside an act() scope), we immediately trigger work that would have otherwise required a timeout. This makes it simpler to tests loading/spinner states, and makes tests resilient to changes in React.\nFor some of our tests(specifically, ReactSuspenseWithNoopRenderer-test.internal), we don't want fallbacks to immediately trigger, because we're testing intermediate states and such. Added a feature flag flushSuspenseFallbacksInTests to disable this behaviour on a per case basis.", "Bugfix:  Effects should never have higher than normal priority (#16257)\n\nBugfix: Priority when effects are flushed early\n\nThe priority of passive effects is supposed to be the same as the\npriority of the render. This fixes a bug where the priority is sometimes\nwrong if the effects are flushed early.\nBut the priority should really never be higher than Normal Priority.\nI'll change that in the next commit.\n\nEffects never have higher than normal priority\n\nEffects currently have the same priority as the render that spawns them.\nThis changes the behavior so that effects always have normal priority,\nor lower if the render priority is lower (e.g. offscreen prerendering).\nThe implementation is a bit awkward because of the way renderRoot,\ncommitRoot, and flushPassiveEffects are split. This is a known\nfactoring problem that I'm planning to address once 16.9 is released.", "[act] Wrap IsThisRendererActing in DEV check (#16259)\n\n[act] Wrap IsThisRendererActing in DEV check\n\nSo that it doesn't leak into the production bundle. Follow-up to #16240.\n\nDisable Suspense fallback test in prod\n", "Add missing check to unmocked Scheduler warning (#16261)\nThe unmocked Scheduler warning doesn't actually check if Scheduler\nis mocked.", 'Remove FocusScope (#16267)', '[Flare] Tweaks to Flare system design and API (#16264)', 'Add test of scheduler overhead (#16260)', 'Add a feature flag to disable legacy context (#16269)\n\n\nAdd a feature flag to disable legacy context\n\n\nAddress review\n\n\ninvariant -> warning\n\n\nMake this.context and context argument actually undefined\n\n\nIncrease test coverage for lifecycles\n\n\nAlso disable it on the server is flag is on\n\n\nMake this.context {} when disabled, but function context is undefined\n\n\nMove checks inside\n\n', "[SuspenseList] Bug fix: Reset renderState when bailing out (#16278)\nIf there are adjacent updates we bail out of rendering the suspense list\nat all but we may still complete the node. We need to reset the render\nstate in that case.\nI restructured so that this is in the same code path so we don't forget it\nin the future.", 'Fix priority of clean-up function on deletion (#16277)\nThe clean-up function of a passive effect (useEffect) usually fires\nin a post-commit task, after the browser has painted. However, there is\nan exception when the component (or its parent) is deleted from the\ntree. In that case, we fire the clean-up function during the\nsynchronous commit phase, the same phase we use for layout effects.\nThis is a concession to implementation complexity. Calling it in the\npassive effect phase would require either traversing the children of the\ndeleted fiber again, or including unmount effects as part of the fiber\neffect list.\nBecause the functions are called during the sync phase in this case,\nthe Scheduler priority is Immediate (the one used for layout) instead\nof Normal. We may want to reconsider this trade off later.', "BugFix: Suspense priority warning firing when not supposed to (#16256)\nPreviously, the suspense priority warning was fired even if the Root wasn't suspended. Changed the warning to fire only when the root is suspended.\nAlso refactored the suspense priority warning so it's easier to read.", "Rendering tasks should not jump the queue (#16284)\nWhen React schedules a rendering task, it passes a timeout option\nbased on its expiration time. This is intended to avoid starvation\nby other React updates. However, it also affects the relative priority\nof React tasks and other Scheduler tasks at the same level, like\ndata processing.\nThis adds a feature flag to disable passing a timeout option to\nScheduler. React tasks will always append themselves to the end of\nthe queue, without jumping ahead of already scheduled tasks.\nThis does not affect the order in which React updates within a single\nroot are processed, but it could affect updates across multiple roots.\nThis also doesn't remove the expiration from Scheduler. It only means\nthat React tasks are not given special treatment.", 'chore: remove outdated comment about gcc (#16232)', "warn if you try to use act() in prod (#16282)\nWe have behaviour divergence for act() between prod and dev (specifically, act() + concurrent mode does not flush fallbacks in prod. This doesn't affect anyone in OSS yet)\nWe also don't have a good story for writing tests in prod (and what from what I gather, nobody really writes tests in prod mode).\nWe could have wiped out act() in prod builds, except that we ourselves use act() for our tests when we run them in prod mode.\nThis PR is a compromise to all of this. We will log a warning if you try to use act() in prod mode, and we silence it in our test suites."]v16.9.0-alpha.0 v16.9.0-alpha.0 (April 3, 2019)

(await act(async () => ...) (@threepointone in #14853)

Artifacts

react: https://unpkg.com/react@16.9.0-alpha.0/umd/
react-art: https://unpkg.com/react-art@16.9.0-alpha.0/umd/
react-dom: https://unpkg.com/react-dom@16.9.0-alpha.0/umd/
react-is: https://unpkg.com/react-is@16.9.0-alpha.0/umd/
react-test-renderer: https://unpkg.com/react-test-renderer@16.9.0-alpha.0/umd/
scheduler: https://unpkg.com/scheduler@0.14.0-alpha.0/umd/
 ['Fix react-dom/server context leaks when render stream destroyed early (#14706)\n\n\nFix react-dom/server context memory retention\n\n\nTest for pollution of later renders\n\n\nInline loop\n\n\nMore tests\n\n', 'Release scripts documentation (#14863)\n\nImprove release script process documentation\nImproved pre-publish instructions/message based on feedback\nAdded reminder to attach build artifacts to GitHub release\n', 'Prompt to include UMD build artifact links in GitHub release (#14864)', "Don't discard render phase state updates with the eager reducer optimization (#14852)\n\n\nAdd test cases for setState(fn) + render phase updates\n\n\nUpdate eager state and reducer for render phase updates\n\n\nFix a newly firing warning\n\n", "Deal with fallback content in Partial Hydration (#14884)\n\n\nReplace SSR fallback content with new suspense content\n\n\nThe three states of a Dehydrated Suspense\n\n\nThis introduces three states for dehydrated suspense boundaries\nPending - This means that the tree is still waiting for additional data or\nto be populated with its final content.\nFallback - This means that the tree has entered a permanent fallback state\nand no more data from the server is to be expected. This means that the\nclient should take over and try to render instead. The fallback nodes will\nbe deleted.\nNormal - The node has entered its final content and is now ready to be\nhydrated.\n\nRename retryTimedOutBoundary to resolveRetryThenable\n\nThis doesn't just retry. It assumes that resolving a thenable means that\nit is ok to clear it from the thenable cache.\nWe'll reuse the retryTimedOutBoundary logic separately.\n\nRegister a callback to be fired when a boundary changes away from pending\n\nIt's now possible to switch from a pending state to either hydrating\nor replacing the content.", 'Deleted empty App.css (#14149)', "Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies (#14636)\n\n\nAdd ESLint rule for useEffect/useCallback/useMemo Hook dependencies\n\n\nFix ReactiveDependencies rule\n\n\nfix lint errors\n\n\nSupport useLayoutEffect\n\n\nAdd some failing tests and comments\n\n\nGather dependencies in child scopes too\n\n\nIf we don't find foo.bar.baz in deps, try foo.bar, then foo\n\n\nfoo is enough for both foo.bar and foo.baz\n\n\nShorter rule name\n\n\nAdd fixable meta\n\n\nRemove a bunch of code and start from scratch\n\n\n[WIP] Only report errors from dependency array\n\n\nThis results in nicer editing experience. Also has autofix.\n\n\nFix typo\n\n\n[Temp] Skip all tests\n\n\nFix the first test\n\n\nRevamp the test suite\n\n\nFix [foo] to include foo.bar\n\n\nDon't suggest call expressions\n\n\nSpecial case 'current' for refs\n\n\nDon't complain about known static deps\n\n\nSupport useImperativeHandle\n\n\nBetter punctuation and formatting\n\n\nMore uniform message format\n\n\nTreat React.useRef/useState/useReducer as static too\n\n\nAdd special message for ref.current\n\n\nAdd a TODO case\n\n\nAlphabetize the autofix\n\n\nOnly alphabetize if it already was\n\n\nDon't add static deps by default\n\n\nAdd an undefined variable case\n\n\nTweak wording\n\n\nRename to exhaustive-deps\n\n\nClean up / refactor a little bit\n\n", "Use the canonical nativeTag for Fabric's setNativeProps (#14900)\n\n\nUse the canonical nativeTag for Fabric's setNativeProps\n\n\nFix prettier\n\n", 'Adding setNativeProps tests for NativeMethodsMixin (#14901)', "Adding ReactNative.setNativeProps that takes a ref (#14907)\n\n\nAdding ReactNative.setNativeProps that takes a ref\n\n\nAdding test for components rendered with Fabric with Paper's setNativeProps\n\n\nFixing flow types\n\n\nFix prettier\n\n\nRename ReactNativeSetNativeProps.js to be more general\n\n", 'Fix warning message for new setNativeProps method. on -> with (#14909)', 'Updating copyright headers, dropping the year (#14893)\n\nUpdating copyright headers, dropping the year\nUpdate copyright in ReactDOMHooks-test and react-cache LRU.js\n', 'Fix UMD builds by re-exporting the scheduler priorities (#14914)', 'Release 16.8.3', 'Fix tracing fixture (#14917)', '[ESLint] Warn against assignments from inside Hooks (#14916)\n\n\n[ESLint] Warn against assignments from inside Hooks\n\n\nInclude variable name\n\n\nAdd a test for the legit case\n\n', 'Release eslint-plugin-react-hooks@1.2.0', 'Fix sample ESLint configuration (#14926)\nSee ESLint docs', 'Improve pactch release process docs (#14923)', 'Release script clarifies which test fixture failed (#14922)', "[scheduler] Pass didTimeout argument to callbacks (#14931)\nAs I prepare to refactor the Fiber scheduler, I've noticed some quirks\nin our implementation. This PR addressed one of them.\n\nThere's no reason for a timed out Scheduler callback to check\nshouldYield, because the value will always be false until the work\nhas completed. The didTimeout argument provides this information to\nthe callback so it can avoid the redundant checks.\nReact's existing check for whether a callback has timed out didn't make\nany sense, but happened to work anyway. I don't think the wrongness of\nthe old implementation is observable via React APIs but it's\nincoherent regardless.", 'Remove ReactNoop.flushDeferredPri and flushUnitsOfWork (#14934)\n\nRemove ReactNoop.flushDeferredPri and flushUnitsOfWork\n\nSome of our older tests worked by counting how many times React checked\nwhether it should yield to the main thread, instead of something\npublicly observable like how many times a component is rendered.\nOur newer tests have converged on a style where we push into a log and\nmake assertions on the log. This pattern is less coupled to the\nimplementation while still being sufficient to test performance\noptimizations, like resuming (whenever we add that back).\nThis commit removes flushDeferredPri and flushUnitsOfWork and upgrades\nthe affected tests.\n\nRemove shouldYieldToRenderer indirection\n\nThis wrapper is no longer necessary.', 'Fixed typo (#14943)', 'fix(eslint-plugin-react-hooks): node engine updated to version 7 because of object.entries (#14951)', '[ESLint] Add more cases to exhaustive-deps rule (#14930)\n\n\nAdd better message for literal dependencies\n\n\nWarn about ref.current in cleanup phase\n\n\nFix wrong comment\n\n\nTweak wording\n\n', 'eslint-plugin-react-hooks@1.3.0', 'Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps (#14912)\n\n\nDeprecate ref.setNativeProps in favor of ReactNative.setNativeProps\n\n\nUsing a feature flag for the setNativeProps warning\n\n\nRemoving extra line breaks\n\n\nSet the FB native feature flag to true\n\n\nPrettier\n\n', "Unify noop and test renderer assertion APIs (#14952)\n\nThrow in tests if work is done before emptying log\n\nTest renderer already does this. Makes it harder to miss unexpected\nbehavior by forcing you to assert on every logged value.\n\nConvert ReactNoop tests to use jest matchers\n\nThe matchers warn if work is flushed while the log is empty. This is\nthe pattern we already follow for test renderer. I've used the same APIs\nas test renderer, so it should be easy to switch between the two.", 'Allow omitting constant primitive deps (#14959)', 'Fixed incompatibility between react-debug-tools and useContext() (#14940)\n\nRefactor hook ordering check to use DEV-only data structure. This enables us to warn about more cases (e.g. useContext, useDebugValue) withou the need to add any overhead to production bundles.\n', "Add new mock build of Scheduler with flush, yield API (#14964)\n\nAdd new mock build of Scheduler with flush, yield API\n\nTest environments need a way to take control of the Scheduler queue and\nincrementally flush work. Our current tests accomplish this either using\ndynamic injection, or by using Jest's fake timers feature. Both of these\noptions are fragile and rely too much on implementation details.\nIn this new approach, we have a separate build of Scheduler that is\nspecifically designed for test environments. We mock the default\nimplementation like we would any other module; in our case, via Jest.\nThis special build has methods like flushAll and yieldValue that\ncontrol when work is flushed. These methods are based on equivalent\nmethods we've been using to write incremental React tests. Eventually\nwe may want to migrate the React tests to interact with the mock\nScheduler directly, instead of going through the host config like we\ncurrently do.\nFor now, I'm using our custom static injection infrastructure to create\nthe two builds of Scheduler — a default build for DOM (which falls back\nto a naive timer based implementation), and the new mock build. I did it\nthis way because it allows me to share most of the implementation, which\nisn't specific to a host environment — e.g. everything related to the\npriority queue. It may be better to duplicate the shared code instead,\nespecially considering that future environments (like React Native) may\nhave entirely forked implementations. I'd prefer to wait until the\nimplementation stabilizes before worrying about that, but I'm open to\nchanging this now if we decide it's important enough.\n\n\nMock Scheduler in bundle tests, too\n\n\nRemove special case by making regex more restrictive\n\n", 'Allow extraneous effect dependencies (#14967)\nThis makes cases like\nuseEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\nnot warn.\nHowever, it still warns for unused useCallback/useMemo deps.', "Replace noop's fake Scheduler implementation with mock Scheduler build (#14969)\n\nReplace noop's fake Scheduler implementation with mock Scheduler build\n\nThe noop renderer has its own mock implementation of the Scheduler\ninterface, with the ability to partially render work in tests. Now that\nthis functionality has been lifted into a proper mock Scheduler build,\nwe can use that instead.\nMost of the existing noop tests were unaffected, but I did have to make\nsome changes. The biggest one involved passive effects: previously, they\nwere scheduled on a separate queue from the queue that handles\nrendering. After this change, both rendering and effects are scheduled\nin the Scheduler queue. I think this is a better approach because tests\nno longer have to worry about the difference; if you call flushAll,\nall the work is flushed, both rendering and effects. But for those few\ntests that do care to flush the rendering without the effects, that's\nstill possible using the yieldValue API.\nFollow-up: Do the same for test renderer.\n\nFix import to scheduler/unstable_mock\n", "Replace test renderer's fake Scheduler implementation with mock build (#14970)\n\nReplace test renderer's fake Scheduler implementation with mock build\n\nThe test renderer has its own mock implementation of the Scheduler\ninterface, with the ability to partially render work in tests. Now that\nthis functionality has been lifted into a proper mock Scheduler build,\nwe can use that instead.\n\nFix Profiler tests in prod\n", "Swap expect(ReactNoop) for expect(Scheduler) (#14971)\n\nSwap expect(ReactNoop) for expect(Scheduler)\n\nIn the previous commits, I upgraded our custom Jest matchers for the\nnoop and test renderers to use Scheduler under the hood.\nNow that all these matchers are using Scheduler, we can drop\nsupport for passing ReactNoop and test roots and always pass\nScheduler directly.\n\nExternalize Scheduler in noop and test bundles\n\nI also noticed we don't need to regenerator runtime in noop anymore.", 'Support editable useState hooks in DevTools (#14906)\n\nReactDebugHooks identifies State and Reducer hooks as editable\nInject overrideHookState() method to DevTools to support editing in DEV builds\nAdded an integration test for React DevTools, react-debug-tools, and overrideHookState\n', 'Avoid dynamic dispatch for scheduler calls (#14968)', '[ESLint] Deduplicate suggested dependencies (#14982)\n\n\nDeduplicate suggested dependencies\n\n\nTweak test cases\n\n', 'Warn about dependencies outside of render scope (#14990)', '[ESLint] Suggest to destructure props when they are only used as members (#14993)\n\n\nSuggest to destructure props when they are only used as members\n\n\nAdd more tests\n\n\nFix a bug\n\n', 'eslint-plugin-react-hooks@1.4.0', "Revert #14756 changes to ReactFiberScheduler (#14992)\n\nRevert #14756 changes to ReactFiberScheduler\n\nThis PR introduced some bugs in concurrent mode during internal testing.\nUntil we figure out a proper solution, I'm going to try reverting it.\nNot totally certain this is sufficient to unbreak the bugs we found, but\nI'm using this branch to determine that.\n\nAdd back commented out Scheduler import\n\nWith a note not to use named imports next time we import Scheduler\nin this module.", "ReactNoop.yield -> Scheduler.yieldValue (#15008)\nThese used to be different things, but now ReactNoop.yield merely\nre-exports Scheduler.yieldValue, so let's get rid of it.", 'Prettier', 'fix(auto-version-update): update root package version while publishing (#15005)\n\n\nfix(auto-version-update): update root package version while publishing\n\n\nfix(remove-version): remove version field from package json\n\n', "Warn on mount when deps are not an array (#15018)\n\n\nWarn on mount when deps are not an array\n\n\nCheck other Hooks\n\n\nI can't figure out how to fix error/warning nesting lint\n\n\nBut it doesn't really matter much because we test other cases in the other test.", "[ESLint] Treat functions that don't capture anything as static (#14996)\n\n\nTreat functions that don't capture anything as static\n\n\nFix comment\n\n", 'Fix heading in changelog', '16.8.4 and changelog', 'Enforce deps array in useMemo and useCallback (#15025)', "Import Scheduler directly, not via host config (#14984)\n\nImport Scheduler directly, not via host config\n\nWe currently schedule asynchronous tasks via the host config. (The host\nconfig is a static/build-time dependency injection system that varies\nacross different renderers — DOM, native, test, and so on.) Instead of\ncalling platform APIs like requestIdleCallback directly, each renderer\nimplements a method called scheduleDeferredCallback.\nWe've since discovered that when scheduling tasks, it's crucial that\nReact work is placed in the same queue as other, non-React work on the\nmain thread. Otherwise, you easily end up in a starvation scenario where\nrendering is constantly interrupted by less important tasks. You need a\ncentralized coordinator that is used both by React and by other\nframeworks and application code. This coordinator must also have a\nconsistent API across all the different host environments, for\nconvention's sake and so product code is portable — e.g. so the same\ncomponent can work in both React Native and React Native Web.\nThis turned into the Scheduler package. We will have different builds of\nScheduler for each of our target platforms. With this approach, we treat\nScheduler like a built-in platform primitive that exists wherever React\nis supported.\nNow that we have this consistent interface, the indirection of the host\nconfig no longer makes sense for the purpose of scheduling tasks. In\nfact, we explicitly do not want renderers to scheduled task via any\nsystem except the Scheduler package.\nSo, this PR removes scheduleDeferredCallback and its associated\nmethods from the host config in favor of directly importing Scheduler.\n\nMissed an extraneous export\n", '[ESLint] Suggest moving inside a Hook or useCallback when bare function is a dependency (#15026)\n\n\nWarn about bare function deps and suggest moving or useCallback\n\n\nClearer wording\n\n', 'Fix ESLint rule crash (#15044)', '[ESLint] Add more hints to lint messages (#15046)\n\n\nA clearer message for props destructuring where applicable\n\n\nAdd line number to the "move function" message\n\n\nAdd a hint for how to fix callbacks from props\n\n\nSimplify code and harden tests\n\n\nCollect all dependency references for better warnings\n\n\nSuggest updater or reducer where appropriate\n\n', 'More concise messages (#15053)', '[ESLint] Tweak setState updater message and add useEffect(async) warning (#15055)\n\nUse first letter in setCount(c => ...) suggestion\n\nIn-person testing showed using original variable name confuses people.\n\nWarn about async effects\n', 'eslint-plugin-react-hooks@1.5.0', 'Run Placeholder tests in persistent mode, too (#15013)\n\nConvert ReactSuspensePlaceholder tests to use noop\n\nInstead of the test renderer, since test renderer does not support\nrunning in persistent mode.\n\n\nRun Placeholder tests in persistent mode, too\n\n\nFix Flow and lint\n\n\nHidden text instances should have correct host context\n\n\nAdds a test for a subtle edge case that only occurs in persistent mode.\n\ncreateHiddenTextInstance -> cloneHiddenTextInstance\n\nThis sidesteps the problem where createHiddenTextInstance needs access\nto the host context.', 'Run persistent mode tests in CI (#15029)\n\n\nAdd command to run tests in persistent mode\n\n\nConvert Suspense fuzz tester to use noop renderer\n\n\nSo we can run it in persistent mode, too.\n\nDon\'t mutate stateNode in appendAllChildren\n\nWe can\'t mutate the stateNode in appendAllChildren because the children\ncould be current.\nThis is a bit weird because now the child that we append is different\nfrom the one on the fiber stateNode. I think this makes conceptual\nsense, but I suspect this likely breaks an assumption in Fabric.\nWith this approach, we no longer need to clone to unhide the children,\nso I removed those host config methods.\nFixes bug surfaced by fuzz tester. (The test case that failed was the\none that\'s already hard coded.)\n\nIn persistent mode, disable test that reads a ref\n\nRefs behave differently in persistent mode. I added a TODO to write\na persistent mode version of this test.\n\n\nRun persistent mode tests in CI\n\n\ntest-persistent should skip files without noop\n\n\nIf a file doesn\'t reference react-noop-renderer, we shouldn\'t bother\nrunning it in persistent mode, since the results will be identical to\nthe normal test run.\n\nRemove module constructor from placeholder tests\n\nWe don\'t need this now that we have the ability to run any test file in\neither mutation or persistent mode.\n\nRevert "test-persistent should skip files without noop"\n\nSeb objected to adding shelljs as a dep and I\'m too lazy to worry about\nWindows support so whatever I\'ll just revert this.\n\nDelete duplicate file\n', 'Test suspended children are hidden before layout in persistent mode (#15030)\nRefs behave differently in persistent mode, so instead of a ref, the\npersistent mode version of this test asserts on the output of the\nhost tree.', '[Partial Hydration] Render client-only content at normal priority (#15061)\n\nSplit props changing from permanent fallback state\n\nThese will need different logic. In this commit, no logic has changed,\nonly moved.\n\nDelete terminal fallback content in first pass\n\nIf the dehydrated suspense boundary\'s fallback content is terminal there\nis nothing to show. We need to get actual content on the screen soon.\nIf we deprioritize that work to offscreen, then the timeout heuristics will\nbe wrong.\nTherefore, if we have no current and we\'re already at terminal fallback\nstate we\'ll immediately schedule a deletion and upgrade to real suspense.\n\n\nShow failing case when there is another wrapper boundary\n\n\nRevert "Delete terminal fallback content in first pass"\n\n\nThis reverts commit ad67ba8928c23f5d9ba22d7e5c202bf27d0e49d3.\n\nUse the new approach of leaving work at normal pri to replace fallback\n', "Warn for javascript: URLs in DOM sinks (#15047)\n\n\nPrevent javascript protocol URLs\n\n\nJust warn when disableJavaScriptURLs is false\n\n\nThis avoids a breaking change.\n\n\nAllow framesets\n\n\nAllow  to be used in integration tests\n\n\nFull document renders requires server rendering so the client path\njust uses the hydration path in this case to simplify writing these tests.\n\nDetect leading and intermediate characters and test mixed case\n\nThese are considered valid javascript urls by browser so they must be\nincluded in the filter.\nThis is an exact match according to the spec but maybe we should include\na super set to be safer?\n\n\nTest updates to ensure we have coverage there too\n\n\nFix toString invocation and Flow types\n\n\nRight now we invoke toString twice when we hydrate (three times\nwith the flag off). Ideally we should only do it once even in this case\nbut the code structure doesn't really allow for that right now.\n\n\ns/itRejects/itRejectsRendering\n\n\nDedupe warning and add the unsafe URL to the warning message\n\n\nAdd test that fails if g is added to the sanitizer\n\n\nThis only affects the prod version since the warning is deduped anyway.\n\nFix prod test\n", 'Improve async useEffect warning (#15104)', '[eslint] Wording tweaks (#15078)\n\n[eslint] Wording tweaks\n\nI think these are a little clearer.\n\nfix tests\n', "Improve hydration fixture, support older versions of React (#14118)\n\nHydration Fixture: Only load ReactDOMServer if it exists\n\nFixes an issue where the hydration fixture would try to load in\nReactDOMServer below version 14. In version 13, string markup methods\nexist on the React namespace.\n\nDOM Fixtures: Use class component for App.js\n\nThis was breaking React 0.13.0.\n\nHydration Fixture: better findDOMNode compatibility\n\nThis commit fixes an issue where the Hydration DOM fixture was\nunusable in React 0.13.0 or lower because of newer API usage.\nIt fixes that by avoiding the use of refs to get the textarea\nreference in the code editor component, using various versions of\nfindDOMNode as required.\n\nHydration Fixture: Do not show dropdown for single-line errors\n\nIf an error showed for the hydration fixture, a detail element was\nused even if no additional lines could display. In that case, this\ncommit changes the component such that it returns a div.\n\nDeeper React version support for hydration fixture\n\nThis commit adds support for versions 0.4.0 of React and higher for\nthe hydration fixture.\nThe DOM test fixtures themselves do not support down to React 0.4.0,\nwhich would be exhaustive. Instead, the Hydration fixture can pick a\nversion to use for its own purposes. By default, this is the version\nof React used by the fixtures.\nIn the process of doing this, I had to make some updates to the\nrenderer.html document associated with the hydration fixture, and I've\nadded some comments to better document the history of API changes.", 'Adds experimental event API scaffolding (#15108)\n\nAdds experimental event API scaffolding\n', 'eslint-plugin-react-hooks@1.5.1', "Don't set the first option as selected in select tag with size attribute  (#14242)\n\n\nSet 'size' attribute to select tag if it occurs before appending options\n\n\nAdd comment about why size is assigned on select create. Tests\n\n\nI added some more clarification for why size must be set on select\nelement creation:\n\nIn the source code\nIn the DOM test fixture\n\nIn a unit test\n\n\nUse let, not const in select tag stub assignment\n\n", 'Add infrastructure for passive/non-passive event support for future API exploration (#15036)\n\nAdd infrastructure for passive/non-passive event support for future event API experimentation\n', "Don't suggest a function as its own dep (#15115)", 'Fix shallow renderer not allowing hooks in forwardRef render functions (#15100)\n\n\ntest: Add test for shallow + forwardRef + hook\n\n\nfix(react-test-renderer): shallow forwardRef hooks\n\n', 'Remove facts tracker (#15111)\n\n\nRemoved Travis references\n\n\nRemove used facts tracker\n\n', 'Use same example code for async effect warning (#15118)', 'Support React.memo in ReactShallowRenderer (#14816)\n\nSupport React.memo in ReactShallowRenderer\n\nReactShallowRenderer uses element.type frequently, but with React.memo\nelements the actual type is element.type.type. This updates\nReactShallowRenderer so it uses the correct element type for Memo\ncomponents and also validates the inner props for the wrapped\ncomponents.\n\n\nAllow Rect.memo to prevent re-renders\n\n\nSupport memo(forwardRef())\n\n\nDont call memo comparison function on initial render\n\n\nFix test\n\n\nSmall tweaks\n\n', 'Change passive checker to use defineProperty (#15121)', "[Shallow] Implement setState for Hooks and remount on type change (#15120)\n\nThrow away old shallow renderer state on type change\n\nThis worked in function components but was broken for classes. It incorrectly retained the old instance even if the type was different.\n\nRemove _previousComponentIdentity\n\nWe only needed this because we didn't correctly reset based on type. Now we do so this can go away.\n\n\nUse _reset when unmounting\n\n\nUse arbitrary componentIdentity\n\n\nThere was no particular reason it was set to element.type. We just wanted to check if something is a render phase update.\n\nSupport Hook state updates in shallow renderer\n", 'Add feature flag to disable yielding (#15119)', 'Eager bailout optimization should always compare to latest reducer (#15124)\n\n\nEager bailout optimization should always compare to latest reducer\n\n\nqueue.eagerReducer -> queue.lastRenderedReducer\n\n\nThis name is a bit more descriptive.\n\nAdd test case that uses preceding render phase update\n', 'Add more info to invalid hook call error message (#15139)\n\n\nAdd more info to invalid hook call error message\n\n\nUpdate other renderers + change call to action\n\n\nUpdate related tests for new hooks error message\n\n\nFix lint errors\n\n', 'Warn for Context.Consumer with contextType (#14831)', 'Compile invariant directly to throw expressions (#15071)\n\nTransform invariant to custom error type\n\nThis transforms calls to the invariant module:\njs\ninvariant(condition, \'A %s message that contains %s\', adj, noun);\nInto throw statements:\njs\nif (!condition) {\n  if (__DEV__) {\n    throw ReactError(`A ${adj} message that contains ${noun}`);\n  } else {\n    throw ReactErrorProd(ERR_CODE, adj, noun);\n  }\n}\nThe only thing ReactError does is return an error whose name is set\nto "Invariant Violation" to match the existing behavior.\nReactErrorProd is a special version used in production that throws\na minified error code, with a link to see to expanded form. This\nreplaces the reactProdInvariant module.\nAs a next step, I would like to replace our use of the invariant module\nfor user facing errors by transforming normal Error constructors to\nReactError and ReactErrorProd. (We can continue using invariant for\ninternal React errors that are meant to be unreachable, which was the\noriginal purpose of invariant.)\n\n\nUse numbers instead of strings for error codes\n\n\nUse arguments instead of an array\n\n\nI wasn\'t sure about this part so I asked Sebastian, and his rationale\nwas that using arguments will make ReactErrorProd slightly slower, but\nusing an array will likely make all the functions that throw slightly\nslower to compile, so it\'s hard to say which way is better. But since\nReactErrorProd is in an error path, and fewer bytes is generally better,\nno array is good.\n\nCasing nit\n', "Test that we don't suspend when disabling yielding (#15143)", "Improve warning for invalid class contextType (#15142)\n\n\nImprove warning for invalid class contextType\n\n\nDon't warn for null\n\n\nGrammar\n\n", 'Adds react-events package for internal testing (#15150)\n\nAdds react-events package for internal testing\n', 'Deprecate module pattern (factory) components (#15145)', 'Follow up to 15150 (#15152)', 'Adds more scaffolding for experimental event API (#15112)\n\nAdds more scaffolding for experimental event API\n', 'fix(react-dom): access iframe contentWindow instead of contentDocument (#15099)\nMDN has a list of methods for obtaining the window reference of an\niframe:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Syntax\nfix(react-dom): check if iframe belongs to the same origin\nAccessing the contentDocument of a HTMLIframeElement can cause the browser\nto throw, e.g. if it has a cross-origin src attribute.\nSafari will show an error in the console when the access results in "Blocked a frame with origin". e.g:\n```javascript\ntry {\n $0.contentDocument.defaultView\n} catch (err) {\n  console.log(\'err\', err)\n}\n\nBlocked a frame with origin X from accessing a frame with origin Y. Protocols, domains, and ports must match.\nerr – TypeError: null is not an object (evaluating \'$0.contentDocument.defaultView\')\n```\n\nA safety way is to access one of the cross origin properties: Window or Location\nWhich might result in "SecurityError" DOM Exception and it is compatible to Safari.\n```javascript\ntry {\n $0.contentWindow.location.href\n} catch (err) {\n console.log(\'err\', err)\n}\n\nerr – SecurityError: Blocked a frame with origin "http://localhost:3001" from accessing a cross-origin frame. Protocols, domains, and ports must match.\n```\n\nhttps://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl', 'Link to useLayoutEffect gist in a warning (#15158)', 'ReactFiberScheduler -> ReactFiberScheduler.old\nDoing this in its own commit so history and blame are preserved.', "Fork ReactFiberScheduler with feature flag\nAdds a feature flag enableNewScheduler that toggles between two\nimplementations of ReactFiberScheduler. This will let us land changes in\nmaster while preserving the ability to quickly rollback.\nIdeally this will be a short-lived fork. Once we've tested the new\nscheduler for a week or so without issues, we will get rid of it. Until\nthen, we'll need to maintain two parallel implementations and run tests\nagainst both of them. We rarely land changes to ReactFiberScheduler, so\nI don't expect this will be a huge burden.\nThis commit does not implement anything new. The flag is still off and\ntests run against the existing implementation.\nUse yarn test-new-scheduler to run tests against the new one.", 'Add internal logic for listening to event responders (#15168)\n\nAdd the logic for listening to event responders\n', "Strengthen nested update counter test coverage (#15166)\n\nIsolate ReactUpdates-test cases\n\nThis ensures their behavior is consistent when run in isolation, and that they actually test the cases they're describing.\n\nAdd coverage for cases where we reset nestedUpdateCounter\n\nThese cases explicitly verify that we reset the counter in right places.\n\n\nAdd a mutually recursive test case\n\n\nAdd test coverage for useLayoutEffect loop\n\n", 'unstable_Profiler -> Profiler (#15172)', 'Fork performWork instead of using boolean flag (#15169)\nI inline it into performAsyncWork instead.\nCode that was only relevant to the async callback had leaked into the\nperformWork call which is an indication that this was a bad abstraction\nand therefore the wrong place to DRY.\nBy inlining I also discovered that minExpirationTime is actually irrelevant\nin the yieldy case so we can clean that up.', 'Validate useEffect without deps too (#15183)', 'React.warn() and React.error() (#15170)', 'Flip event passive logic on passiveBrowserEventsSupported (#15190)', 'Warn about setState directly in dep-less useEffect (#15184)', 'eslint-plugin-react-hooks@1.6.0', 'Add 16.8.5 changelog', 'Update CHANGELOG.md', 'Changelog', 'Release 16.8.5', 'Warn about async infinite useEffect loop (#15180)\n\n\nWarn about async infinite useEffect loop\n\n\nMake tests sync\n\n', 'Remove coverage badge from README (#15216)', 'Fix tracing fixture', 'Add part of the event responder system for experimental event API (#15179)\n\nAdd part of the event responder system\n', 'Enabled warnAboutDeprecatedLifecycles flag by default (#15186)', 'Adds experimental event component responder surfaces (#15228)\n\nAdds Press and Hover event modules + more features to the Event Responder System\n', 'Fix circular module imports causing file size increase (#15231)\n\nFix circular module imports causing file size increase\n', 'Changelog', 'Update versions for 16.8.6', 'Disable JS urls at build level for www (#15230)\nThis will be on by default in open source for the next major.', 'Adds React event component and React event target support to SSR renderer (#15242)\n\nAdds React event component and React event target support to SSR renderer\n', 'Allow for null targetFiber for root event handling (#15247)', "Fix longpress in experimental Press event module (#15246)\nThe 'longpress' event is dispatched during a press interaction, rather than\nafter it has ended.\nThe 'longPressCancelsPress' prop can be used to prevent 'press' being\ndispatched if 'longpress' has already been dispatched.", 'Add additional event API responder surfaces (#15248)\n\nAdd rest of event modules + small fixes\n', 'Fix on(Long)PressChange events in experimental press event API (#15256)\nMake sure that onPressChange is only called if longPressCancelsPress is false.\nAnd make sure that onLongPressChange is called when a long press ends.', "Fix Press module in experimental event API (#15262)\nNote: this is for an experimental event API that we're testing out internally at Facebook.\nFixes a regression in f4625f51823dd7faa02bba95ae731249ce07246c", 'Make setNativeProps a no-op with Fabric renderer (#15094)\n\n\nMake setNativeProps a no-op with Fabric renderer\n\n\nRemove unnecessary DEV check\n\n', "ReactNative's ref.measureLayout now takes a ref (#15126)\n\n\nReactNative's ref.measureLayout now takes a ref\n\n\nUse Object as the additional param type\n\n\nRemove unnecessary whitespace\n\n\nNot supporting ref in mixin or subclass\n\n", "Rename press props in experimental event API (#15263)\nNote: this is for an experimental event API that we're testing out internally at Facebook.\n\nonPressIn -> onPressStart\nonPressOut -> onPressEnd\nlongPressCancelsPress -> onLongPressShouldCancelPress\n", "Delete Suspense Fixture (#15273)\nAs far as I can tell this build is broken. Let's fix or delete. If I can't\ntest, I can't patch it up when I break it.", 'Warn on nested EventTragets in experimental event API (#15287)', 'Rename hover props in experimental event API and write unit tests (#15283)\n\nRename hover props in experimental event API and write unit tests\n', 'Fix host context issues around EventComponents and EventTargets (#15284)', 'Add Press event prop types and fix a check in Safari (#15288)\n\n\nAdd PressProps type to event module\n\n\nMove default Press event delays to constants\n\n\nFix right-click press check for Safari\n\n\nPrettier and Linter\n\n\nUse event.key in press responder\n\n\nevent.keyCode is a deprecated API\n\nRemove unused props from Press event module\n', "Add tests for Press responder event module (#15290)\n\nAdd Press responder event tests\n\nBehavior being tested takes cues from React Native's Pressability.\nA couple of these tests fail and require the Press implementation to be patched.", 'Experimental event API: loosen EventTarget constraints and warnings (#15292)\n\n\nRemove warning for event targets being direct children of event component\n\n\nAddressed feedback and added more test coverage + warnings\n\n', 'Refactor event object creation for the experimental event API (#15295)\n\nRefactor event object creation for the experimental event API\n', 'Remove maxDuration from tests (#15272)\nWe instead assume a 150ms duration.', "await act(async () => ...) (#14853)\nThis took a while, but I'm happy I went through it. Some key moments - recursively flushing effects, flushing microtasks on each async turn, and my team's uncompromising philosophy on code reuse. Really happy with this. I still want to expand test coverage, and I have some more small related todos, but this is good to land. On to the next one. \nSoundtrack to landing this - https://open.spotify.com/track/0MF8I8OUo8kytiOo8aSHYq?si=gSWqUheKQbiQDXzptCXHTg\n\n\nhacked up act(async () => {...})\n\n\nmove stuff around\n\n\nmerge changes\n\n\nabstract .act warnings and stuff. all renderers. pass all tests.\n\n\nmove testutils.act back into testutils\n\n\nmove into scheduler, rename some bits\n\n\nsmaller bundle\n\n\na comment for why we don't do typeof === 'function'\n\n\nfix test\n\n\npass tests - fire, prod\n\n\nlose actContainerElement\n\n\ntighter\n\n\nwrite a test for TestRenderer\n\n\nit's an odd one, because not only does sync act not flush effects correctly, but the async one does (wut). verified it's fine with the dom version.\n\n\nlint\n\n\nrewrote to move flushing logic closer to the renderer\n\n\nthe scheduler's flushPassiveEffects didn't work as expected for the test renderer, so I decided to go back to the hack (rendering a dumb container) This also makes reactdom not as heavy (by a few bytes, but still).\n\n\nmove it around so the delta isn't too bad\n\n\ncleanups\n\n\nfix promise chaining\npropagate errors correctly\ntest for thenable the 'right' way\nmore tests!\ntidier!\nponies!\n\n\nStray comment\n\n\nrecursively flush effects\n\n\nfixed tests\n\n\nlint, move noop.act into react-reconciler\n\n\nmicrotasks when checking if called, s/called/calledLog, cleanup\n\n\npass fb lint\n\n\nwe could have globally changed our eslint config to assume Promise is available, but that means we expect a promise polyfill on the page, and we don't yet. this code is triggered only in jest anyway, and we're fairly certain Promise will be available there. hence, the once-off disable for the check\n\n\nshorter timers, fix a test, test for Promise\n\n\nuse global.Promise for existence check\n\n\nflush microtasks\n\n\na version that works in browsers (that support postMessage)\n\n\nI also added a sanity fixture inside fixtures/dom/ mostly for me.\n\n\nhoist flushEffectsAndMicroTasks\n\n\npull out tick logic from ReactFiberScheduler\n\n\nfix await act (...sync) hanging\n\n\nfix a hang when awaiting sync logic\n\n\na better async/await test for test renderer\n\n\nfeedback changes\n\n\nuse node's setImmediate if available\n\na warning if MessageChannel isn't available\n\nrename some functions\n\n\npass lint/flow checks (without requiring a Promise polyfill/exclusion)\n\n\nprettier\n\n\nthe prettiest, even.\n\n\nuse globalPromise for the missed await warning\n\n\nDEV check for didWarnAboutMessageChannel\n\n\nthenables and callbacks instead of promises, pass flow/lint\n\n\ntinier. better.\n\n\npulled most bits out of FiberScheduler\n\n\nactedUpdates uses callbacks now\n\n\npass build validation\n\n\naugh prettier\n\n\ngolfing 7 more chars\n\n\nTest that effects are not flushed without also flushing microtasks\n\n\nexport doesHavePendingPassiveEffects, nits\n\n\ncreateAct()\n\n\ndead code\n\n\nmissed in merge?\n\n\nlose the preflushing bits\n\n\nugh prettier\n\n\nremoved actedUpdates(), created shared/actingUpdatesScopeDepth\n\n\nrearrange imports so builds work, remove the hack versions of flushPassiveEffects\n\n\nrepresent actingUpdatesScopeDepth as a tuple [number]\n\n\nuse a shared flag on React.__SECRET...\n\n\nremove createAct, setup act for all relevant renderers\n\n\nreview feedback\n\n\nshared/enqueueTask\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nsimpler act() internals\nReactSharedInternals.ReactShouldWarnActingUpdates\n\n\nmove act() implementation into createReactNoop\n\n\nwarnIfNotCurrentlyActingUpdatesInDev condition check order\n\n", "Rewrite ReactFiberScheduler for better integration with Scheduler package (#15151)\n\nRewrite ReactFiberScheduler\n\nAdds a new implementation of ReactFiberScheduler behind a feature flag.\nWe will maintain both implementations in parallel until the new one\nis proven stable enough to replace the old one.\nThe main difference between the implementations is that the new one is\nintegrated with the Scheduler package's priority levels.\n\nConditionally add fields to FiberRoot\n\nSome fields only used by the old scheduler, and some by the new.\n\n\nAdd separate build that enables new scheduler\n\n\nRe-enable skipped test\n\n\nIf synchronous updates are scheduled by a passive effect, that work\nshould be flushed synchronously, even if flushPassiveEffects is\ncalled inside batchedUpdates.\n\n\nPassive effects have same priority as render\n\n\nRevert ability to cancel the current callback\n\n\nReact doesn't need this anyway because it never schedules callbacks if\nit's already rendering.\n\nRevert change to FiberDebugPerf\n\nTurns out this isn't neccessary.\n\nFix ReactFiberScheduler dead code elimination\n\nShould initialize to nothing, then assign the exports conditionally,\ninstead of initializing to the old exports and then reassigning to the\nnew ones.\n\n\nDon't yield before commit during sync error retry\n\n\nCall Scheduler.flushAll unconditionally in tests\n\n\nInstead of wrapping in enableNewScheduler flag.", 'Experiemental event API - wrap async dispatched events (#15299)', 'Add test for async event dispatching (#15300)\nVerified that a variant of this test fails as follows when the\ncontext.withAsyncDispatching function is excluded (i.e., reproduces the\nissue).\nExpected value to equal:\n  ["press", "longpress", "longpresschange"]\nReceived:\n  ["press", "longpress", "longpress", "longpresschange"]\n', 'Adds displayName to EventComponent and EventTarget (#15268)\n\nAdds displayName to EventComponent and EventTarget\n', 'writing unit tests in experimental event Drag API (#15297)\n\n\nwriting unit tests in experimental event Drag API\n\n\nadd onDragMove unit test\n\n\nfix dragstart event type\n\n', 'Prevent bundling of Node polyfills when importing TestUtils/TestRenderer (#15305)', 'mark react-events as private so we publish script skips it for now (#15307)']v16.8.5 16.8.5 (March 22, 2019)
React DOM

Don't set the first option as selected in select tag with size attribute. (@kulek1 in #14242)
Improve the useEffect(async () => ...) warning message. (@gaearon in #15118)
Improve the error message sometimes caused by duplicate React. (@jaredpalmer in #15139)

React DOM Server

Improve the useLayoutEffect warning message when server rendering. (@gaearon in #15158)

React Shallow Renderer

Fix setState in shallow renderer to work with Hooks. (@gaearon in #15120)
Fix shallow renderer to support React.memo. (@aweary in #14816)
Fix shallow renderer to support Hooks inside forwardRef. (@eps1lon in #15100)

Artifacts

react: https://unpkg.com/react@16.8.5/umd/
react-art: https://unpkg.com/react-art@16.8.5/umd/
react-dom: https://unpkg.com/react-dom@16.8.5/umd/
react-is: https://unpkg.com/react-is@16.8.5/umd/
react-test-renderer: https://unpkg.com/react-test-renderer@16.8.5/umd/
scheduler: https://unpkg.com/scheduler@0.13.5/umd/
 ['Improve async useEffect warning (#15104)', "Don't set the first option as selected in select tag with size attribute  (#14242)\n\n\nSet 'size' attribute to select tag if it occurs before appending options\n\n\nAdd comment about why size is assigned on select create. Tests\n\n\nI added some more clarification for why size must be set on select\nelement creation:\n\nIn the source code\nIn the DOM test fixture\n\nIn a unit test\n\n\nUse let, not const in select tag stub assignment\n\n", 'Fix shallow renderer not allowing hooks in forwardRef render functions (#15100)\n\n\ntest: Add test for shallow + forwardRef + hook\n\n\nfix(react-test-renderer): shallow forwardRef hooks\n\n', 'Use same example code for async effect warning (#15118)', 'Support React.memo in ReactShallowRenderer (#14816)\n\nSupport React.memo in ReactShallowRenderer\n\nReactShallowRenderer uses element.type frequently, but with React.memo\nelements the actual type is element.type.type. This updates\nReactShallowRenderer so it uses the correct element type for Memo\ncomponents and also validates the inner props for the wrapped\ncomponents.\n\n\nAllow Rect.memo to prevent re-renders\n\n\nSupport memo(forwardRef())\n\n\nDont call memo comparison function on initial render\n\n\nFix test\n\n\nSmall tweaks\n\n', "[Shallow] Implement setState for Hooks and remount on type change (#15120)\n\nThrow away old shallow renderer state on type change\n\nThis worked in function components but was broken for classes. It incorrectly retained the old instance even if the type was different.\n\nRemove _previousComponentIdentity\n\nWe only needed this because we didn't correctly reset based on type. Now we do so this can go away.\n\n\nUse _reset when unmounting\n\n\nUse arbitrary componentIdentity\n\n\nThere was no particular reason it was set to element.type. We just wanted to check if something is a render phase update.\n\nSupport Hook state updates in shallow renderer\n", 'Link to useLayoutEffect gist in a warning (#15158)', 'Add 16.8.5 changelog', 'Update CHANGELOG.md', 'Add more info to invalid hook call error message (#15139)\n\n\nAdd more info to invalid hook call error message\n\n\nUpdate other renderers + change call to action\n\n\nUpdate related tests for new hooks error message\n\n\nFix lint errors\n\n', 'Changelog']v16.8.2 16.8.2 (February 14, 2019)
React DOM

Fix ReactDOM.render being ignored inside useEffect. (@gaearon in #14799)
Fix a crash when unmounting empty portals. (@gaearon in #14820)
Fix useImperativeHandle to work correctly when no deps are specified. (@gaearon in #14801)
Fix crossOrigin attribute to work in SVG image elements. (@aweary in #14832)
Fix a false positive warning when using Suspense with Hooks. (@gaearon in #14821)

React Test Utils and React Test Renderer

Include component stack into the act() warning. (@threepointone in #14855)

Artifacts

react: https://unpkg.com/react@16.8.2/umd/
react-art: https://unpkg.com/react-art@16.8.2/umd/
react-dom: https://unpkg.com/react-dom@16.8.2/umd/
react-is: https://unpkg.com/react-is@16.8.2/umd/
react-test-renderer: https://unpkg.com/react-test-renderer@16.8.2/umd/
scheduler: https://unpkg.com/scheduler@0.13.2/umd/
 ['Add 16.8.1 changelog', '16.8.1 packages', 'Tweaked publish canary message to show newly published version', "Fix hydration with createRoot warning (#14808)\nIt's suggesting an API that doesn't exist. Fixed it to reference the actual\nAPI.", 'Typo fix in comment (#14787)', 'fix spelling mistakes (#14805)', 'use functional component as a first example in readme (#14819)', 'Fix crash unmounting an empty Portal (#14820)\n\n\nAdds failing test for https://github.com/facebook/react/issues/14811\n\n\nFix removeChild() crash when removing an empty Portal\n\n', 'Fix useImperativeHandle to have no deps by default (#14801)\n\n\nFix useImperativeHandle to have no deps by default\n\n\nSave a byte?\n\n\nNit: null\n\n', "Partial Hydration (#14717)\n\n\nBasic partial hydration test\n\n\nRender comments around Suspense components\n\n\nWe need this to be able to identify how far to skip ahead if we're not\ngoing to hydrate this subtree yet.\n\nAdd DehydratedSuspenseComponent type of work\n\nWill be used for Suspense boundaries that are left with their server\nrendered content intact.\n\n\nAdd comment node as hydratable instance type as placeholder for suspense\n\n\nSkip past nodes within the Suspense boundary\n\n\nThis lets us continue hydrating sibling nodes.\n\n\nA dehydrated suspense boundary comment should be considered a sibling\n\n\nRetry hydrating at offscreen pri or after ping if suspended\n\n\nEnter hydration state when retrying dehydrated suspense boundary\n\n\nDelete all children within a dehydrated suspense boundary when it's deleted\n\n\nDelete server rendered content when props change before hydration completes\n\n\nMake test internal\n\n\nWrap in act\n\n\nChange SSR Fixture to use Partial Hydration\n\n\nThis requires the enableSuspenseServerRenderer flag to be manually enabled\nfor the build to work.\n\nChanges to any parent Context forces clearing dehydrated content\n\nWe mark dehydrated boundaries as having child work, since they might have\ncomponents that read from the changed context.\nWe check this in beginWork and if it does we treat it as if the input\nhas changed (same as if props changes).\n\n\nWrap in feature flag\n\n\nTreat Suspense boundaries without fallbacks as if not-boundaries\n\n\nThese don't come into play for purposes of hydration.\n\n\nFix clearing of nested suspense boundaries\n\n\nping -> retry\n\n\nCo-Authored-By: sebmarkbage sebastian@calyptus.eu\n\nTypo\n\nCo-Authored-By: sebmarkbage sebastian@calyptus.eu\n\n\nUse didReceiveUpdate instead of manually comparing props\n\n\nLeave comment for why it's ok to ignore the timeout\n\n", 'Fix ignored sync work in passive effects (#14799)\n\n\nFix ignored sync work in passive effects\n\n\nFix batching\n\n', 'Remove false positive warning and add TODOs about current being non-null (#14821)\n\n\nFailing test for false positive warning\n\n\nAdd tests for forwardRef too\n\n\nRemove the warning and add TODOs\n\n', 'Special case crossOrigin for SVG image elements (#14832)', '[ShallowRenderer] Queue/rerender on dispatched action after render component with hooks (#14802)\n\n[shallow-renderer] Rerender on dispatched action out of render\n', 'Revert "[ShallowRenderer] Queue/rerender on dispatched action after render component with hooks (#14802)" (#14839)\nThis reverts commit 6d4038f0a638d82e9e528f02cc5a86afb410cf11.', "Statically enable suspense/partial hydration flag in www (#14842)\nIt doesn't hurt to have this always on since it is only when we use\nSuspense that it matters. This saves some code/checks.", 'Fix typo in code comment (#14836)', 'Add React 16.8.2 changelog (#14851)', "Include component stack in 'act(...)' warning (#14855)\n\n\nadd a component stack trace to the act() warning\n\n\npass tests\n\n\nnit\n\n", 'Include another change in 16.8.2']v16.8.0 React

Add Hooks — a way to use state and other React features without writing a class. (@acdlite et al. in #13968)
Improve the useReducer Hook lazy initialization API. (@acdlite in #14723)

React DOM

Bail out of rendering on identical values for useState and useReducer Hooks. (@acdlite in #14569)
Use Object.is algorithm for comparing useState and useReducer values. (@Jessidhia in #14752)
Don’t compare the first argument passed to useEffect/useMemo/useCallback Hooks. (@acdlite in #14594)
Support synchronous thenables passed to React.lazy(). (@gaearon in #14626)
Render components with Hooks twice in Strict Mode (DEV-only) to match class behavior. (@gaearon in #14654)
Warn about mismatching Hook order in development. (@threepointone in #14585 and @acdlite in #14591)
Effect clean-up functions must return either undefined or a function. All other values, including null, are not allowed. @acdlite in #14119

React Test Renderer and Test Utils

Support Hooks in the shallow renderer. (@trueadm in #14567)
Fix wrong state in shouldComponentUpdate in the presence of getDerivedStateFromProps for Shallow Renderer. (@chenesan in #14613)
Add ReactTestRenderer.act() and ReactTestUtils.act() for batching updates so that tests more closely match real behavior. (@threepointone in #14744)

ESLint Plugin: React Hooks

Initial release. (@calebmer in #13968)
Fix reporting after encountering a loop. (@calebmer and @Yurickh in #14661)
Don't consider throwing to be a rule violation. (@sophiebits in #14040)

Artifacts

react: https://unpkg.com/react@16.8.0/umd/
react-art: https://unpkg.com/react-art@16.8.0/umd/
react-dom: https://unpkg.com/react-dom@16.8.0/umd/
react-is: https://unpkg.com/react-is@16.8.0/umd/
react-test-renderer: https://unpkg.com/react-test-renderer@16.8.0/umd/
scheduler: https://unpkg.com/scheduler@0.13.0/umd/
 ['Make scheduler debugging feature flag static', 'Create separate SchedulerFeatureFlags instead of using ReactFeatureFlags (#14455)', 'Move SchedulerFeatureFlags fork to src directory to fix lint', 'React v16.7.0', 'Update CHANGELOG for 16.7', 'Update ReactFiberScheduler.js (#14477)\nFixed typo', 'Allow node 11 as devEngine (#14450)\nUsing node 11 throws incompatibility error. This fixes it. Only test I performed was to run yarn build -- --type=RN_OSS everything seemed ok.', 'Update ReactUpdateQueue.js (#14521)\nFix comment typo', 'Simplify wording of key warning (#14503)\nI don\'t think "array or iterator" is adding anything, and it may well be confusing, especially since this is one of the first and most common warnings that devs see.', 'Separate Object.is polyfill (#14334)\n\nSeparate_Object_Is_Polyfill\n', 'Separate current owner and dispatcher (#14548)', 'Inject ReactCurrentDispatcher ref to DevTools (#14550)', 'rename useImperativeMethods -> useImperativeHandle (#14565)', 'react-debug-tools accepts currentDispatcher ref as param (#14556)\n\n\nreact-debug-tools accepts currentDispatcher ref as param\n\n\nReactDebugHooks injected dispatcher ref is optional\n\n', 'Fix typo (#14576)', 'make a fork for ReactCurrentDispatcher (#14588)', 'Support configurable labels for custom hooks (#14559)\n\n\nreact-debug-tools accepts currentDispatcher ref as param\n\n\nReactDebugHooks injected dispatcher ref is optional\n\n\nSupport custom values for custom hooks\n\n\nPR feedback:\n\n\nRenamed useDebugValueLabel hook to useDebugValue\n\n\nWrapped useDebugValue internals in if-DEV so that it could be removed from production builds.\n\n\nPR feedback:\n\n\nFixed some minor typos\n\nAdded inline comment explaining the purpose of  rollupDebugValues()\nRefactored rollupDebugValues() to use a for loop rather than filter()\nImprove check for useDebugValue hook to lessen the chance of a false positive\n\nAdded optional formatter function param to useDebugValue\n\n\nNitpick renamed a method\n\n', "Avoid new Set([iterable]) for thenables (#14592)\nFixes https://github.com/facebook/react/issues/14583\nUsing new Set([iterable]) does not work with IE11's non-compliant Set\nimplementation. By avoiding this pattern we don't need to require a Set\npolyfill for IE11", 'Tweak to avoid property read (#14593)', 'Rename release script fixture test scheduler->tracing (#14590)', 'Add noop useDebugValue hook to partial/server renderer (#14597)', 'useDebugValue should throw if used in a class component (#14601)', 'Added Flow type to keep hooks dispatchers in-sync (#14599)\n\nAdded Flow type to keep hooks dispatchers in-sync\n', 'Add ESLint rule playground (#14609)\n\n\nAdd ESLint rule playground\n\n\nUpdate index.js\n\n\nUpdate index.js\n\n', "Allow useReducer to bail out of rendering by returning previous state (#14569)\n\nAllow useReducer to bail out of rendering by returning previous state\n\nThis is conceptually similar to shouldComponentUpdate, except because\nthere could be multiple useReducer (or useState) Hooks in a single\ncomponent, we can only bail out if none of the Hooks produce a new\nvalue. We also can't bail out if any the other types of inputs — state\nand context — have changed.\nThese optimizations rely on the constraint that components are pure\nfunctions of props, state, and context.\nIn some cases, we can bail out without entering the render phase by\neagerly computing the next state and comparing it to the current one.\nThis only works if we are absolutely certain that the queue is empty at\nthe time of the update. In concurrent mode, this is difficult to\ndetermine, because there could be multiple copies of the queue and we\ndon't know which one is current without doing lots of extra work, which\nwould defeat the purpose of the optimization. However, in our\nimplementation, there are at most only two copies of the queue, and if\nboth are empty then we know that the current queue must be.\n\nAdd test for context consumers inside hidden subtree\n\nShould not bail out during subsequent update. (This isn't directly\nrelated to this PR because we should have had this test, anyway.)\n\n\nRefactor to use module-level variable instead of effect bit\n\n\nAdd test combining state bailout and props bailout (memo)\n\n", "Warn if number of hooks increases (#14591)\nEventually, we'll likely support adding hooks to the end (to enable\nprogressive enhancement), but let's warn until we figure out how it\nshould work.", 'Don\'t bother comparing constructor when deps are not provided (#14594)\n\nDon\'t bother comparing constructor when deps are not provided\n\nWhen no dependencies are passed to an effect hook, what we used to do is\ncompare the effect constructor. If there was no change, then we would\nskip firing the effect. In practice, this is a useless optimization\nbecause the constructor will always be different when you pass an inline\nclosure. And if you don\'t pass an inline closure, then you can\'t access\nany props or state.\nThere are some edge cases where an effect that doesn\'t close over props\nor state could be useful, like reference counting the number of mounted\ncomponents. But those are rare and can be addressed by passing an empty\narray of dependencies.\nBy removing this "optimization," we can avoid retaining the constructor\nin the majority of cases where it\'s a closure that changes on\nevery render.\nI made corresponding changes to the other hooks that accept\ndependencies, too (useMemo, useCallback, and useImperativeHandle).\n\nImprove hook dependencies warning\n\nIt now includes the name of the hook in the message.\n\nNits\n', 'Add hooks support to ReactShallowRenderer (#14567)\n\nAdd hook support to ReactShallowRenderer\n', 'Prune NPM metadata fields from packages before re-publishing (#14617)', "Warn when mixing createRoot() and old APIs (#14615)\n\n\nWarn when mixing createRoot() and old APIs\n\n\nMove container checks to entry points\n\n\nThis way further warning check doesn't crash on bad inputs.\n\n\nFix Flow\n\n\nRename flag to be clearer\n\n\nmanaged by -> passed to\n\n\nRevert accidental change\n\n\nFix Fire shim to match\n\n", 'Small tweaks to SSR to match #14594 (#14618)\n\n\nSmall tweaks to SSR to match #14594\n\n\nRemove unnecessary comparison\n\n', "Throw an error when using hooks inside useMemo/useState/useReducer, or .memo's comparator (#14608)\n\n\nhooks inside useMemo/.memo - failing tests\n\n\nthrow an error when using hooks inside useMemo\n\n\nthrow when using hooks inside .memo's compare fn\n\n\nfaster/better/stronger\n\n\nsame logic for useReducer, tests for the server, etc\n\n\nUpdate ReactDOMServerIntegrationHooks-test.internal.js\n\n\nack lint\n\n\nnits\n\n\nwhitespace\n\n\nwhitespace\n\n\nstray semi\n\n\nTweak comment\n\n\nstray unmatched fiber reset\n\n\nnit\n\n", 'Fix shallow renderer set instance state after gDSFP before calling sCU (#14613)\n\n\nFix shallow renderer set instance state after gDSFP before calling sCU\n\n\nUpdate ReactShallowRenderer.js\n\n\nUnwind abstraction\n\n\nFewer names\n\n', 'Use public context.report interface in eslint rules (#14623)', 'Warn when second callback is passed to setState/dispatch in Hooks (#14625)', 'Tidy up NPM checkout process (#14631)', 'Add directory details to the package.json of all packages (#14628)\nSpecifying the directory as part of the repository field in a package.json\nallows third party tools to provide better support when working with monorepos.\nFor example, it allows them to correctly construct a commit diff for a specific\npackage.\nThis format was accepted by npm in https://github.com/npm/rfcs/pull/19.', "Support sync thenables for lazy() (#14626)\n\n\nSupport sync thenables for lazy()\n\n\nDon't commit twice\n\n", 'Move lazy._result assignment (#14632)', 'Fix synchronous thenable rejection (#14633)\n\nFix handling of sync rejection\n\nReverts #14632 and adds a regression test.\n\nHandle rejection synchronously too\n\nFewer footguns and seems like nicer behavior anyway.', "Double-render function components with Hooks in DEV in StrictMode (#14643)\n\n\nDouble-render functions in strict mode\n\n\nDouble-invoke first function component render too\n\n\nMark TestRendererAsync test as internal and revert changes to it\n\n\nTestRenderer is built with strict mode doublerender off.\nWe could change that but I'm not sure we want to. So I'll just flip the flag off for this test.\n\n\nOnly double-invoke components using Hooks\n\n\nRevert unintentional change\n\n", 'Mention forwardRef() in  errors and warnings (#14644)', 'fix typo (#14316)', 'Fix typo (#14560)\nfix typo', 'Warn about refs on lazy function components (#14645)', 'Disallow reading context during useMemo etc (#14648)\n\n\nDisallow reading context during useMemo etc\n\n\nContinue allowing readContext() in classes and context consumers\n\n\nThe previous commit check was too broad and incorrectly restricted classes from calling readContext(). This check is more precise and only targets components that are Hook-capable. It exploits the fact that renderExpirationTime is never NoWork after renderWithHooks -- something we already rely on.', 'Warn about incorrect use of useImperativeHandle() (#14647)', "Add test coverage for readContext() on the server (#14649)\n\nRename context variables\n\nI just spent half an hour debugging why readContext(PurpleContext) doesn't work.\n\nAdd test coverage for readContext() on the server\n", 'Revert "Disallow reading context during useMemo etc" (#14651)\n\nRevert "Add test coverage for readContext() on the server (#14649)"\n\nThis reverts commit fe2ecd276e9b9e57a49ddf2d86ff01677b69b493.\n\nRevert "Warn about incorrect use of useImperativeHandle() (#14647)"\n\nThis reverts commit 8f45a7fdc469c6d88ca5ca105095b03dd4e862e1.\n\nRevert "Disallow reading context during useMemo etc (#14648)"\n\nThis reverts commit 1fcbd22431d97e404c1f684744dc543b6c22b076.', 'Revert "Double-render function components with Hooks in DEV in StrictMode" (#14652)\n\nRevert "Revert "Disallow reading context during useMemo etc" (#14651)"\n\nThis reverts commit 5fce6488ce1dc97e31515a47ff409d32ab722d65.\n\nRevert "Add test coverage for readContext() on the server (#14649)"\n\nThis reverts commit fe2ecd276e9b9e57a49ddf2d86ff01677b69b493.\n\nRevert "Warn about incorrect use of useImperativeHandle() (#14647)"\n\nThis reverts commit 8f45a7fdc469c6d88ca5ca105095b03dd4e862e1.\n\nRevert "Disallow reading context during useMemo etc (#14648)"\n\nThis reverts commit 1fcbd22431d97e404c1f684744dc543b6c22b076.\n\nRevert "Warn about refs on lazy function components (#14645)"\n\nThis reverts commit 2a084f51a94df30e3bffd42bf3a04ce3da231512.\n\nRevert "Fix typo (#14560)"\n\nThis reverts commit b5a3df6e8894ebf2334179e445b0803f6819aa9f.\n\nRevert "fix typo (#14316)"\n\nThis reverts commit 9c146e675174a523f90f630c87f62f55812bacea.\n\nRevert "Mention forwardRef() in  errors and warnings (#14644)"\n\nThis reverts commit baa6d40fc856c65e1d74ddf4fa038d7a65a787ed.\n\nRevert "Double-render function components with Hooks in DEV in StrictMode (#14643)"\n\nThis reverts commit a1414e8949915c006bba411fa2949b304dd044ae.', "RFC: warn when returning different hooks on subsequent renders (#14585)\n\nwarn when returning different hooks on next render\n\nlike it says. adds a field to Hook to track effect 'type', and compares when cloning subsequently.\n\n\nlint\n\n\nreview changes\n\n\nnumbered enum for hook types\n\ns/hookType/_debugType\n\nbetter dce\n\n\ncleaner detection location\n\n\nredundant comments\n\n\ndifferent EffectHook / LayoutEffectHook\n\n\nprettier\n\n\ntop level currentHookType\n\n\nnulling currentHookType\n\n\nneed to verify dce still works\n\n\nsmall enhancements\n\n\nhook order checks for useContext/useImperative\n\n\nprettier\n\n\nstray whitespace\n\n\nmove some bits around\n\n\nbetter errors\n\n\npass tests\n\n\nlint, flow\n\n\nshow a before - after diff\n\n\nan error stack in the warning\n\n\nlose currentHookMatches, fix a test\n\n\ntidy\n\n\nclear the mismatch only in dev\n\n\npass flow\n\n\nside by side diff\n\n\ntweak warning\n\n\npass flow\n\n\ndedupe warnings per fiber, nits\n\n\nbetter format\n\n\nnit\n\n\nfix bad merge, pass flow\n\n\nlint\n\n\nmissing hooktype enum\n\n\nmerge currentHookType/currentHookNameInDev, fix nits\n\n\nlint\n\n\nfinal nits\n\n", 'Importing React for the first example. (#14346)', '--save is no longer needed (#14302)\n--save is on by default as of npm 5. npm install create-subscription is equivalent to npm install --save create-subscription now', 'Bump GCC (#14657)', 'Add unit tests for concurrent mode event dispatching (#14415)', 'Disallow reading context during useMemo etc (#14653)\n\nRevert "Revert "Double-render function components with Hooks in DEV in StrictMode" (#14652)"\n\nThis reverts commit 3fbebb2a0b3b806f428c4154700af8e75e561895.\n\nRevert "Revert "Disallow reading context during useMemo etc" (#14651)"\n\nThis reverts commit 5fce6488ce1dc97e31515a47ff409d32ab722d65.\n\nAdd extra passing test for an edge case\n\nMentioned by @acdlite to watch out for\n\n\nMore convoluted test\n\n\nDon\'t rely on expirationTime\n\n\nAddresses @acdlite\'s concerns\n\nEdge case: forbid readContext() during eager reducer\n', 'Tweak context invariant message (#14671)', 'Put DEV-only code into DEV blocks (#14673)', 'Revert "Revert "Double-render function components with Hooks in DEV in StrictMode" (#14652)" (#14654)\nThis reverts commit 3fbebb2a0b3b806f428c4154700af8e75e561895.', "Enable hooks! (#14679)\n\nTurned enableHooks feature flag on everywhere\nRemoved useHooks feature flag from tests (now that it's on by default)\nRemove useHooks feature flag entirely\n", 'Make all readContext() and Hook-in-a-Hook checks DEV-only (#14677)\n\n\nMake readContext() in Hooks DEV-only warning\n\n\nWarn about readContext() during class render-phase setState()\n\n\nWarn on readContext() in SSR inside useMemo and useReducer\n\n\nMake all Hooks-in-Hooks warnings DEV-only\n\n\nRename stashContextDependencies\n\n\nClean up warning state on errors\n\n', 'Fix typo in code comment (#14696)', 'State update bug in concurrent mode (#14698)\n\n\nState update bug in concurrent mode\n\n\nFix bug introduced by double-rendering Functions using hooks\n\n', 'Fix issue with multiple code branches in hooks linter (#14661)\n\n\nFix issue with multiple code branches\n\n\nAdd solution by @calebmer\n\n\nAdd performance test\n\n\nUndo unrelated change\n\n', 'change codeofconduct link (#14711)', 'Spelling abitrarily -> arbitrarily (#14710)', "Phased dispatcher (#14701)\n\nMove DEV-only function right above where it's used\n\nI don't like looking at this top-level function #petty\n\nUse different dispatchers for functions & classes\n\nClasses support readContext, but not any of the other dispatcher\nmethods. Function support all methods.\nThis is a more robust version of our previous strategy of checking\nwhether currentlyRenderingFiber is null.\nAs a next step, we can use a separate dispatcher for each phase of the\nrender cycle (mount versus update).\n\n\nUse separate dispatchers for mount and update\n\n\nRemove mount code from update path\n\n\nDeletes mount-specific code from the update path, since it should be\nunreachable. To continue supporting progressive enhancement (mounting\nnew hooks at the end of the list), we detect when there are no more\ncurrent hooks and switch back to the mount dispatcher. Progressive\nenhancement isn't officially supported yet, so it will continue to warn.\n\n\nFactoring nits\n\n\nFix Flow\n\n\nHad to cheat more than I would like\n\n\nMore Flow nits\n\n\nSwitch back to using a special dispatcher for nested hooks in DEV\n\n\nIn order for this strategy to work, I had to revert progressive\nenhancement support (appending hooks to the end). It was previously a\nwarning but now it results in an error. We'll reconsider later.\n\nAlways pass args to updateState and updateReducer\n\nEven though the extra args are only used on mount, to ensure\ntype consistency.", "Improve Reducer Hook's lazy init API (#14723)\n\n\nImprove Reducer Hook's lazy init API\n\n\nUse generic type for initilizer input\n\n\nStill requires an any cast in the case where init function is\nnot provided.", 'Move Hook mismatch warning to first mismatch site (#14720)\n\nMove Hook mismatch warning to first mismatch site\n\nAllows us to localize the warning logic in one place.\n\nNit\n', 'Warn when second argument is passed to useCallback (#14729)', 'Restrict effect return type to a function or nothing (#14119)\n\nRestrict effect return type to a function or nothing\n\nWe already warn in dev if the wrong type is returned. This updates the\nFlow type.\n\n\nRestrict return type further\n\n\nAssume Effect hook returns either a function or undefined\n\n\nTweak warning message\n\n', 'Typo in comment (#14739)\n"synchronously" instead of "syncrhonously".', 'Tweak invalid Hook warning and error (#14747)', 'Update the version with Hooks proposal in README (#14751)', 'Use SameValue instead of === to check for dispatchAction equivalence (#14752)', 'Add missing 16.6.1 changelog entry', "Avoid importing Scheduler directly (#14757)\n\nAvoid importing Scheduler directly\n\nThe reconciler should not depend directly on Scheduler. This adds it to\nthe host config for the renderer instead.\n(Except for scheduler/tracing imports, which are used only by the\nprofiling build. I've left those imports as-is, though I'm open to\ndirecting those through the host config, too.)\n\nMake throwaway root id longer to appease Brian\n", 'expose TestUtils.act() for batching actions in tests (#14744)\n\n\nexpose unstable_interact for batching actions in tests\n\n\nmove to TestUtils\n\n\nmove it all into testutils\n\n\ns/interact/act\n\n\nwarn when calling hook-like setState outside batching mode\n\n\npass tests\n\n\nmerge-temp\n\n\nmove jsdom test to callsite\n\n\nmark failing tests\n\n\npass most tests (except one)\n\n\naugh IE\n\n\npass fuzz tests\n\n\nbetter warning, expose the right batchedUpdates on TestRenderer for www\n\n\nmove it into hooks, test for dom\n\n\nexpose a flag on the host config, move stuff around\n\n\nrename, pass flow\n\n\npass flow... again\n\n\ntweak .act() type\n\n\nenable for all jest environments/renderers; pass (most) tests.\n\n\npass all tests\n\n\nexpose just the warning from the scheduler\n\n\ndon\'t return values\n\n\na bunch of changes.\n\n\ncan\'t return values from .act\ndon\'t try to await .act calls\npass tests\n\n\nfixes and nits\n\n\n"fire events that udpates state"\n\n\nnit\n\n\n🙄\n\n\nmy bad\n\n\nhi andrew\n\n\n(prettier fix)', '[TestUtils.act] fix return result checking  (#14758)\n\n\nfix .act return value testing when result === null\n\n\nnit\n\n']v16.7.0 React DOM

Fix performance of React.lazy for large numbers of lazily-loaded components. (@acdlite in #14429)
Clear fields on unmount to avoid memory leaks. (@trueadm in #14276)
Fix bug with SSR and context when mixing react-dom/server@16.6 and react@<16.6. (@gaearon in #14291)
Fix a performance regression in profiling mode. (@bvaughn in #14383)

Scheduler (Experimental)

Post to MessageChannel instead of window. (@acdlite in #14234)
Reduce serialization overhead. (@developit in #14249)
Fix fallback to setTimeout in testing environments. (@bvaughn in #14358)
Add methods for debugging. (@mrkev in #14053)

Artifacts

react: https://unpkg.com/react@16.7.0/umd/
react-art: https://unpkg.com/react-art@16.7.0/umd/
react-dom: https://unpkg.com/react-dom@16.7.0/umd/
react-is: https://unpkg.com/react-is@16.7.0/umd/
react-test-renderer: https://unpkg.com/react-test-renderer@16.7.0/umd/
scheduler: https://unpkg.com/scheduler@0.12.0/umd/
 ["Warn about conflicting style values during updates (#14181)\nThis is one of the most insidious quirks of React DOM that people run into. Now we warn when we think an update is dangerous.\nWe still allow rendering {background, backgroundSize} with unchanging values, for example. But once you remove either one or change background (without changing backgroundSize at the same time), that's bad news. So we warn.\nFixes #6348.", 'SimpleMemoComponent should warn if a ref is given (#14178)\nFixes #13964.', 'Use unique thread ID for each partial render to access Context (#14182)\n\nBUG: ReactPartialRenderer / New Context polutes mutable global state\n\nThe new context API stores the provided values on the shared context instance. When used in a synchronous context, this is not an issue. However when used in an concurrent context this can cause a "push provider" from one react render to have an effect on an unrelated concurrent react render.\nI\'ve encountered this bug in production when using renderToNodeStream, which asks ReactPartialRenderer for bytes up to a high water mark before yielding. If two Node Streams are created and read from in parallel, the state of one can polute the other.\nI wrote a failing test to illustrate the conditions under which this happens.\nI\'m also concerned that the experimental concurrent/async React rendering on the client could suffer from the same issue.\n\nUse unique thread ID for each partial render to access Context\n\nThis first adds an allocator that keeps track of a unique ThreadID index\nfor each currently executing partial renderer. IDs are not just growing\nbut are reused as streams are destroyed.\nThis ensures that IDs are kept nice and compact.\nThis lets us use an "array" for each Context object to store the current\nvalues. The look up for these are fast because they\'re just looking up\nan offset in a tightly packed "array".\nI don\'t use an actual Array object to store the values. Instead, I rely\non that VMs (notably V8) treat storage of numeric index property access\nas a separate "elements" allocation.\nThis lets us avoid an extra indirection.\nHowever, we must ensure that these arrays are not holey to preserve this\nfeature.\nTo do that I store the _threadCount on each context (effectively it takes\nthe place of the .length property on an array).\nThis lets us first validate that the context has enough slots before we\naccess the slot. If not, we fill in the slots with the default value.', 'fix typo', "Simplify CSS shorthand property warning (#14183)\nI figured out a simpler way to do #14181. It does allocate some but I think that's OK. Time complexity might even be better since we avoid the nested loops the old one had.", 'Update Readme (#14176)\nReplace core with react, dom-client with react-dom', 'Add regression test for #14188 (#14197)', 'Save CI-built node_modules as build artifacts (#14205)\n\nStore node_modules generated by CI script as an artifact\nNPM pack artifacts before archiving\n', 'Update error codes', 'Add 16.6.3 Changelog (#14223)\n\n\nAdd 16.6.3 Changelog\n\n\nRemove unreleased fix\n\n\nDrop another unreleased fix\n\n', "[scheduler] Post to MessageChannel instead of window (#14234)\nScheduler needs to schedule a task that fires after paint. To do this,\nit currently posts a message event to window. This happens on every\nframe until the queue is empty. An unfortunate consequence is that every\nother message event handler also gets called on every frame; even if\nthey exit immediately, this adds up to significant per-frame overhead.\nInstead, we'll create a MessageChannel and post to that, with a\nfallback to the old behavior if MessageChannel does not exist.", "[scheduler] Remove window.postMessage fallback\nEvery browser we can about supports MessageChannel. The ones we don't\ncare about will fallback to the setTimeout implementation.", 'Add a checkbox to fixtures UI to choose React production build (#13786)\n\n\nAdd a checkbox to fixtures UI to choose React production build\n\n\nAssign header__label class name to label directly, instead of using a separate span\n\n\ncenter the production checkbox vertically\n\n', "Wrap shorthand CSS property collision warning in feature flag (#14245)\nDisables the recently introduced (#14181) warning for shorthand\nCSS property collisions by wrapping in a feature flag. Let's hold off\nshipping this until at least the next minor.", 'Reduce scheduler serialization overhead (#14249)\nIn the process of switching to MessageChannel, it seems the postMessage call was modified to pass "*" (originally the target origin value from window.postMessage). This actually ends up triggering serialization, whereas passing undefined bypasses.\nTo save some investigation, passing a Number like 0 still incurs serialization overhead - undefined has special behavior.', 'Clear memoizedState on unmount of fiber to avoid memory leak (#14218)\n\nClear properties on unmount of fiber to ensure objects are not retained\n', 'Revert "Clear memoizedState on unmount of fiber to avoid memory leak (#14218)" (#14275)\nThis reverts commit 9b2fb24f99ebed9af2c092de7a5f31c38f8af97a.', 'Clear fields on unmount of fiber to avoid memory leak (#14276)\n\nClear fields on unmount of fiber to avoid memory leak\n', 'Fix SSR useCallback in render phase (#14279)', "Remove import * as pattern from the codebase (#14282)\nWhenever we do this, Rollup needs to materialize this as an object.\nThis causes it to also add the Babel compatibility property which is\nunnecessary bloat. However, since when we use these, we leak the object\nthis often also deopts any compiler optimizations.\nIf we really need an object we should export default an object.\nCurrently there is an exception for DOMTopLevelEventTypes since\nlisting out the imports is a PITA and it doesn't escape so it should\nget properly inlined. We should probably move to a different pattern\nto avoid this for consistency though.", 'Fix support for mixing react-dom/server@16.6 and react@<16.6 (#14291)', "Warn about reassigning this.props (#14277)\n\n\nWarn about reassigning this.props\n\n\nImprove the warning\n\n\nDon't show the spammy bug warning if we suspect it's a component bug\n\n", 'fix spelling error: Here\'s -> Here (#14307)\n"Here\'s" should be changed to "Here" in the given sentence.', 'List ignored types instead of included types in the stack (#14308)', 'Use |0 to coerce to number (#14297)', 'Add more test coverage for nested memo() (#14311)', 'Fix resolution of outer props with React.memo() (#14312)\n\n\nAdd failing test for defaultProps between lazy() and memo()\n\n\nAdd another regression test for defaultProps resolution order\n\n\nResolve outer props for MemoComponent\n\n', 'Prevent deopts from modifying exports object in stable builds (#14309)', 'Publish a local release (canary or stable) to NPM (#14260)\nNew release scripts.\nLearn more at https://github.com/facebook/react/blob/master/scripts/release/README.md', 'Add basic release script snapshot test (#14280)\nAdded regression test for release scripts', 'update fixtures/packaging/README.md (#14320)\nI had some confusion yesterday with this, figured this reads a little better.  Ran these steps locally to verify they work.', 'Add progress bars to longer running async release tasks (#14322)\n\nAdd progress bars to longer running async release tasks\nUpdated to 0.2 progress estimator version\n', 'Remove usage of fbjs/lib/invariant in ReactNativeViewConfigRegistry. (#14330)', 'Fix regression: Errors not emitted in streams (#14314)\nRegression introduced in #14182 resulted in errors no longer being emitted on streams, breaking many consumers.\nCo-authored-by: Elliot Jalgard elliot.j@live.se', 'Make useEffect(async) warning more verbose (#14327)\n\n\nMake useEffect(async) warning more verbose\n\n\nNit\n\n', 'Add a null type test for memo (#14325)', "Remove useMutationEffect (#14336)\nuseMutationEffect has problems (namely, refs aren't attached at the time that it runs) and we're not positive it's necessary. useLayoutEffect runs at the same time as componentDidMount/Update so it's sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, let's delete it.", 'Adding isMemo check to react-is package (#14313)', 'Release script auto-determine the latest Canary build if none specified (#14339)\n\nRelease script auto-determine the latest Canary build if none specified\n', 'Validate propTypes for lazy() and memo() and warn about invalid patterns (#14298)\n\n\nAdd a test for current defaultProps behavior in lazy\n\n\nAdd a warning against definining defaultProps on the outer wrapper\n\n\nWarn about setting propTypes too\n\n\nRemove redundant async\n\n\nValidate propTypes for resolved lazy types\n\n\nNote this only works for elements created after resolving. So it\'s not ideal. But it provides the best stack trace for those cases.\n\n\nAdd a test for lazy(forwardRef()) propTypes check\n\n\nValidate memo() inner propTypes and warn about shadowing\n\n\nAdd test verifying nested lazy is unsupported\n\n\nChange error wording to remove "Promise elements"\n\n\nImprove error message for nested lazy() and add tests\n\n\nValidate propTypes for memo in the reconciler when necessary\n\n\nAdd comments for why we\'re calling checkPropTypes\n\n\nFix Flow and lint\n\n\nUndo unintentional formatting changes\n\n\nRemove unnecessary case (it is handled by function code path)\n\n\nAdd test coverage for memo(fn.defaultProps).propTypes\n\n\nTest should be agnostic of where resolving happens\n\n\nThat\'s an implementation detail and we might want to change it later. Let\'s keep it easy by making tests just check that validation happened, not at which stage.\n\nUnify traversal logic in createElement\n\nThis moves all type traversal into createElement. When lazy resolves, we call createElement once to re-check.\n\n\nMatch prod behavior for propTypes/defaultProps shims closer\n\n\nRevert "Unify traversal logic in createElement"\n\n\nThis reverts commit 2e77ca47fe80ebe6595333542a8c5c138c68643f.\nSee https://github.com/facebook/react/pull/14298#issuecomment-442687775\n\nUndo unnecessary change to getComponentName\n', '[Fire] Add initial build infrastructure (#14359)', 'Fix bug in cloneHook (#14364)\n\nFixes #14360 and adds a test for mixed priority dispatches.\n\nIt was broken because cloneHook assigned memoizedState instead of\nbaseState from the original hook to baseState of the clone.\n\ntweak comments\n', "[Fizz] New Server Rendering Infra (#14144)\n\n[Fizz] Add Flow/Jest/Rollup build infra\n\nAdd a new package for react-stream which allows for custom server renderer\noutputs. I picked the name because it's a reasonable name but also\nbecause the npm name is currently owned by a friend of the project.\nThe react-dom build has its own inlined server renderer under the\nname react-dom/fizz.\nThere is also a noop renderer to be used for testing. At some point\nwe might add a public one to test-renderer but for now I don't want to have\nto think about public API design for the tests.\n\nAdd FormatConfig too\n\nWe need to separate the format (DOM, React Native, etc) from the host\nrunning the server (Node, Browser, etc).\n\nBasic wiring between Node, Noop and DOM configs\n\nThe Node DOM API is pipeToNodeStream which accepts a writable stream.\n\nMerge host and format config in dynamic react-stream entry point\n\nSimpler API this way but also avoids having to fork the wrapper config.\nFixes noop builds.\n\nAdd setImmediate/Buffer globals to lint config\n\nUsed by the server renderer\n\nProperly include fizz.node.js\n\nAlso use forwarding to it from fizz.js in builds so that tests covers\nthis.\n\nMake react-stream private since we're not ready to publish\n\nor even name it yet\n\n\nRename Renderer -> Streamer\n\n\nPrefix react-dom/fizz with react-dom/unstable-fizz\n\n\nAdd Fizz Browser host config\n\n\nThis lets Fizz render to WHATWG streams. E.g. for rendering in a\nService Worker.\nI added react-dom/unstable-fizz.browser as the entry point for this.\nSince we now have two configurations of DOM. I had to add another\ninlinedHostConfigs configuration called dom-browser. The reconciler\ntreats this configuration the same as dom. For stream it checks\nagainst the ReactFizzHostConfigBrowser instead of the Node one.\n\nAdd Fizz Browser Fixture\n\nThis is for testing server rendering - on the client.\n\nLower version number to detach it from react-reconciler version\n", 'Fixed scheduler setTimeout fallback (#14358)\n\nFixed scheduler setTimeout fallback\nMoved unit-test-specific setTimeout code into a new NPM package, jest-mock-scheduler.\n', 'Removed unnecessary externals from Jest bundles (#14372)', 'Automated fixture tests (#14370)\n\nRenamed snapshot test from test.js to snapshot-test.js\nAutomate fixtures tests\n', "Don't prompt to tag or create GitHub release for canary releases (#14376)", 'Prevent a v8 deopt when profiling (#14383)', 'Fix scheduler setTimeout() re-entrancy check (#14384)', 'fix spelling error: differen -> different (#14378)', 'Tweaked wording for v8 "performance cliff" issue', 'Enable hooks in fabric (#14301)\nbecause hooks are awesome.', 'TestRenderer toJSON should not expose the Array wrapper Suspense uses for hidden trees (#14392)', 'Added ErrorBoundary tests for useEffect and useLayoutEffect (#14401)', 'Implement pauseExecution, continueExecution, dumpQueue for Scheduler (#14053)\n\n\nImplement pauseExecution, continueExecution, dumpQueue\n\n\nExpose firstCallbackNode. Fix tests. Revert results.json\n\n\nPut scheduler pausing behind a feature flag\n\n', 'Dangerfile exits early if build failed (#14400)\n\nDangerfile exits early (without leaving an error comment) if build failed\n', 'Updated version incrementing suggestion in release script based on team discussion (#14389)', 'Remove redundant argument of getPlugins function (#14419)', 'Add support for Suspense & lazy() to the react-is package (#14423)\n\nAdd support for lazy & Suspense to react-is\n', 'Inject overrideProps() fn to DevTools (#14427)\n\nInject overrideProps() fn to DevTools\n\nThis function will enable editing props for function components, host nodes, and special types like memo and forwardRef.', 'Enable hooks by default for FB React Native renderer (#14435)\n\nEnable hooks by default for FB React Native renderer\nUpdated RN+FB feature flags to make some of the dynamic ones static\n', 'Removed Fabric-specific feature flag files and updated Rollup to use the (non-Fabric) React Native flag files. (#14437)', 'Memoize promise listeners to prevent exponential growth (#14429)\n\nMemoize promise listeners to prevent exponential growth\n\nPreviously, React would attach a new listener every time a promise is\nthrown, regardless of whether the same listener was already attached\nduring a previous render. Because React attempts to render every time\na promise resolves, the number of listeners grows quickly.\nThis was especially bad in synchronous mode because the renders that\nhappen when the promise pings are not batched together. So if a single\npromise has multiple listeners for the same root, there will be multiple\nrenders, which in turn results in more listeners being added to the\nremaining unresolved promises. This results in exponential growth in\nthe number of listeners with respect to the number of IO-bound\ncomponents in a single render.\nFixes #14220\n\n\nMemoize on the root and Suspense fiber instead of on the promise\n\n\nAdd TODO to fix persistent mode tests\n\n']v16.6.3 16.6.3 (November 12, 2018)
React DOM

Fix bugs in Suspense and lazy. (@acdlite in #14133, #14157, and #14164)
Fix highlighting of React.memo updates in React DevTools. (@bvaughn in #14141)
Fix interaction of Suspense with the React Profiler. (@bvaughn in #14065)
Fix a false positive warning when using Suspense. (@acdlite in #14158)

React DOM Server

Fix incorrect sharing of context state between renderToNodeStream() calls. (@sebmarkbage in #14182)
Add a warning about incorrect usage of the context API. (@trueadm in #14033)
 ['Updating CHANGELOG.md for 16.6.1 release', 'Make react-debug-tools a private package', 'Show deprecated context object warnings usage in ReactDOM server (#14033)\n\nApplies context object warnings to ReactDOM server\n', "[Synchronous Suspense] Reuse deletions from primary tree (#14133)\nFixes a bug where deletion effects in the primary tree were dropped\nbefore entering the second render pass.\nBecause we no longer reset the effect list after the first render pass,\nI've also moved the deletion of the fallback children to the complete\nphase, after the tree successfully renders without suspending.\nWill need to revisit this heuristic when we implement resuming.", 'Release script supports interleaved stable and alpha releases (#14138)', 'Tag MemoComponent with PerformedWork effectTag for DevTools Profiler (#14141)', 'Invalid actualDuration+treeBaseDuration for hidden+suspended trees (#14065)\n\nFixed treeBaseDuration by propagating its value from the suspended tree to the Fragment React temporarily wraps around it when showing the fallback UI.\nFixed actualDuration by recording elapsed profiler time in the event of an error.\nFixed actualDuration in concurrent mode by propagating the time spent rendering the suspending component to its parent.\n\nAlso updated ReactSuspensePlaceholder-test.internal to cover these new cases.', 'Use Entry in yarn build ... Instead of Label (#14148)\n\nParse build script type and package names\n\nThis ensures that yarn build core dom includes DOM.\nIt also ensures that spaces like yarn build "core, dom" doesn\'t build EVERYTHING.\n\nGet rid of label in bundles config\n\nInstead we just use the name from entry using fuzzy search.\nThere is one special case. If you put in /index or /index.js.\nThat allows to build things like react/index to only build isomorphic\nwhere as react would build everything. Or react-dom/index to exclude\nthe server renderers.\n\nInstead of matching /index.js just append it to the search string\n\nThat way things like yarn build react/ works too.', 'Refactor ESLint configuration to enable better IDE integration (#13914)\n\n\nRefactor ESLint configuration to enable better IDE integration\n\n\nMinor tweaks\n\n', 'Adding logger pri (#14155)', "[Synchronous Suspense] Don't delete children of suspended component (#14157)\nVestigial behavior that should have been removed in #13823.\nFound using the Suspense fuzz tester in #14147.", "Don't warn if an unmounted component is pinged (#14158)\n\nAdd failing test for ping on unmounted component\n\nWe had a test for this, but not outside of concurrent mode :)\n\nDon't warn if an unmounted component is pinged\n", "Suspense fuzz tester (#14147)\n\n\nDon't warn if an unmounted component is pinged\n\n\nSuspense fuzz tester\n\n\nThe fuzzer works by generating a random tree of React elements. The tree\ntwo types of custom components:\n\nA Text component suspends rendering on initial mount for a fuzzy\n  duration of time. It may update a fuzzy number of times; each update\n  supsends for a fuzzy duration of time.\nA Container component wraps some children. It may remount its children\n  a fuzzy number of times, by updating its key.\n\nThe tree may also include nested Suspense components.\nAfter this tree is generated, the tester sets a flag to temporarily\ndisable Text components from suspending. The tree is rendered\nsynchronously. The output of this render is the expected output.\nThen the tester flips the flag back to enable suspending. It renders the\ntree again. This time the Text components will suspend for the amount of\ntime configured by the props. The tester waits until everything has\nresolved. The resolved output is then compared to the expected output\ngenerated in the previous step.\nFinally, we render once more, but this time in concurrent mode. Once\nagain, the resolved output is compared to the expected output.\nI tested by commenting out various parts of the Suspense implementation\nto see if broke in the expected way. I also confirmed that it would have\ncaught #14133, a recent bug related to deletions.\n\n\nWhen a generated test case fails, log its input\n\n\nMoar fuzziness\n\n\nAdds more fuzziness to the generated tests. Specifcally, introduces\nnested Suspense cases, where the fallback of a Suspense component\nalso suspends.\nThis flushed out a bug (yay!) whose test case I've hard coded.\n\nUse seeded random number generator\n\nSo if there's a failure, we can bisect.", "Remove errant return assignment (#14164)\nOopsie!\nThis could have been avoided if our types were modeled correctly with\nFlow (using a disjoint union).\nFuzz tester didn't catch it because it does not generate cases where\na Suspense component mounts with no children. I'll update it.", 'Improved suspense support in ReactDOMServer (#14161)', 'Add fb build of ESLint plugin (#14165)', 'Add global to ESLint plugin bundle config', 'Fix comment typo (#14156)', 'Fix typos (#14124)', "Don't run danger on bad build (#14143)\nsizebot comments can be confusing when not based on reality.\nIf results.json doesn't exist, danger will fail. This is what we want.", 'ESlint -> ESLint', 'Renamed outdated schedule/tracing referecnes (#14177)', 'Use unique thread ID for each partial render to access Context (#14182)\n\nBUG: ReactPartialRenderer / New Context polutes mutable global state\n\nThe new context API stores the provided values on the shared context instance. When used in a synchronous context, this is not an issue. However when used in an concurrent context this can cause a "push provider" from one react render to have an effect on an unrelated concurrent react render.\nI\'ve encountered this bug in production when using renderToNodeStream, which asks ReactPartialRenderer for bytes up to a high water mark before yielding. If two Node Streams are created and read from in parallel, the state of one can polute the other.\nI wrote a failing test to illustrate the conditions under which this happens.\nI\'m also concerned that the experimental concurrent/async React rendering on the client could suffer from the same issue.\n\nUse unique thread ID for each partial render to access Context\n\nThis first adds an allocator that keeps track of a unique ThreadID index\nfor each currently executing partial renderer. IDs are not just growing\nbut are reused as streams are destroyed.\nThis ensures that IDs are kept nice and compact.\nThis lets us use an "array" for each Context object to store the current\nvalues. The look up for these are fast because they\'re just looking up\nan offset in a tightly packed "array".\nI don\'t use an actual Array object to store the values. Instead, I rely\non that VMs (notably V8) treat storage of numeric index property access\nas a separate "elements" allocation.\nThis lets us avoid an extra indirection.\nHowever, we must ensure that these arrays are not holey to preserve this\nfeature.\nTo do that I store the _threadCount on each context (effectively it takes\nthe place of the .length property on an array).\nThis lets us first validate that the context has enough slots before we\naccess the slot. If not, we fill in the slots with the default value.', 'fix typo', 'Update error codes']v16.6.1 16.6.1 (November 6, 2018)
React DOM

Fallback should not remount every time a promise resolves. (@acdlite in #14083)
Fix bug where Suspense keeps showing fallback even after everything finishes loading. (@acdlite in #14083)
Fix a crash when Suspense finishes loading in IE11. (@sophiebits in #14126)
Fix unresolved default props in lifecycle methods of a lazy component. (@gaearon in #14112)
Fix bug when recovering from an error thrown during complete phase. (@gaearon in #14104)

Scheduler (Experimental)

Switch from deadline object to shouldYield API. (@acdlite in #14025)
 ['Fix scheduler fixture', "It's Concurrent", 'Enable stable concurrent APIs flag for 16.7 alpha (#13928)\n\n\nAdd enableStableConcurrentModeAPIs feature flag\n\n\nConditionally name concurrent API based on enableStableConcurrentModeAPIs flag\n\n', 'Updated comment for getEventModifierState (#13918)', 'fix typo (#13955)', 'Remove extraneous CSS selector (#13996)', 'Update createRoot warning message based on enableStableConcurrentModeAPIs (#14017)', 'Initial hooks implementation\nIncludes:\n- useState\n- useContext\n- useEffect\n- useRef\n- useReducer\n- useCallback\n- useMemo\n- useAPI', 'Put hooks behind feature flag', 'Defer useEffect until after paint\nEffects scheduled by useEffect should not fire until after the browser\nhas had a chance to paint. However, they should be fired before any\nsubsequent mutations.\nAlso adds useMutationEffect and useLayoutEffect. useMutationEffect fires\nduring the host update phase. useLayoutEffect fires during the post-\nupdate phase (the same phase as componentDidMount\nand componentDidUpdate).', 'Add support for hooks to ReactDOMServer\nCo-authored-by: Alex Taylor alexmckenley@gmail.com\nCo-authored-by: Andrew Clark acdlite@fb.com', "Make sure deletions don't stop passive effects\nBefore the fix, the passive effect in the test is never executed.\nWe were previously waiting until the next commit phase to run effects. Now, we run them before scheduling work.", 'Warn for Hook set-state on unmounted component', '"functional component" -> "function component" in hooks error messages', 'The Lost Effect, chapter 2\nPreviously, flushPassiveEffects (called by scheduling work) would overwrite rootWithPendingPassiveEffects before we had a chance to schedule the work.', 'memo supports Hooks', 'The Lost Effect, chapter 3\nwow, writing code is hard', 'Make effects actually work with memo\nBug fix.', 'Test useContext in pure, forwardRef, and PureComponent', 'Warn about useContext(Consumer|Provider)', 'Add readContext to ReactPartialRendererHooks', "Skip updating effect tag when skipping effect\nFor example, if you have useEffect(..., []), there's no need to set .effectTag to Update | Passive on updates.", 'Disable hook update callback (2nd arg to setState/dispatch)\nI put the feature behind a feature flag, along with a warning, so\nwe can phase it out in www.', "Clear effect tags from a fiber that suspends in non-concurrent mode\nEven though we commit the fiber in an incomplete state, we shouldn't\nfire any lifecycles or effects.\nWe already did this for classes, but now with useEffect, the same is\nneeded for other types of work, too.", 'Add ESLint rule for React Hooks', 'Swap order of function member in hook union types', 'Prettier', "Rename ReactHooks test suite\nNew tests should use React Test Renderer. We'll put existing tests in\nthis module and new tests in a new module.", "Warn about variable number of dependencies\nWe don't check this in prod, since best practice is to always pass\nthese inline. But we should still warn in dev.", "[scheduler] Deadline object -> shouldYield (#14025)\n\n[scheduler] Deadline object -> shouldYield\n\nInstead of using a requestIdleCallback-style deadline object, expose a\nmethod Scheduler.shouldYield that returns true if there's a higher\npriority event in the queue.\n\nNits\n", "[Hooks] Remove dispatch callbacks (#14037)\nRemoves the enableDispatchCallback feature flag and deletes the\nassociated code. An earlier version of the Hooks proposal included this\nfeature but we've since decided to remove it.", 'Flip expiration times (#13912)\nSee https://github.com/facebook/react/pull/13912 commit messages for how this was done.', "Don't lint against Hooks after conditional throw (#14040)\nSeems like this should be OK. Fixes #14038.\nNow when tracking paths, we completely ignore segments that end in a throw.", 'Fix react-cache UMD build (#14047)', '[react-is] add back proper AsyncMode symbol, for back compat (#13959)\n\nPartial revert of #13732\nFixes #13958.\n', 'Simplify imports in react reconciler (#13718)\n\nSimplify imports in ReactChildFiber\nImport type first in ReactCurrentFiber\nSimplify imports in ReactFiberBeginWork\nSimplify imports in ReactFiberScheduler\nSimplify import in ReactFiberTreeReflection\nSimplify import in ReactFiberUnwindWork\nRemove repeated import\nFix imports from ReactFiberExpirationTime\nMaster imports in ReactFiberBeginWork\n', 'Remove duplicate import declarations (#14062)', 'Tweak error message for missing fallback (#14068)', 'Warn for forwardRef(memo(...)) (#14070)\nPeople are probably gonna do this all the time.', 'Rename inputsAreEqual to areHookInputsEqual & move it to shared (#14036)', "Warn for bad useEffect return value (#14069)\nMostly to catch this:\njs\nuseEffect(async () => {\n  // ...\n  return cleanup;\n});\nIs this too restrictive? Not sure if you would want to do like\njs\nuseEffect(() => ref.current.style.color = 'red');\nwhich would give a false positive here. We can always relax it to only warn on Promises if people complain.", "chore(tests): don't rely on jest fake timers scheduling real timers (#14003)\n\n\nchore: don't rely on jest fake timers scheduling real timers\n\n\nre-add one part not working with Jest 23\n\n", 'Bugfix: Add back early return in setOffsets which was removed between 16.4.2 and 16.5.0. Fails in Edge in some scenarios. (#14095)', "react-reconciler: Update README.md (#13953)\nReplaced 'var' with 'const'", 'update the benchmark script (#13994)', 'fix(react-dom): Fix crash during server render (#14103)\nCheck for existence of setTimeout and clearTimeout in the runtime\nbefore using them, to ensure runtimes without them (like .NET ClearScript)\ndo not crash just by importing react-dom.', "Add Debug Tools Package for Introspection of Hooks (#14085)\n\n\nAdd debug tools package\n\n\nAdd basic implementation\n\n\nImplement inspection of the current state of hooks using the fiber tree\n\n\nSupport useContext hooks inspection by backtracking from the Fiber\n\n\nI'm not sure this is safe because the return fibers may not be current\nbut close enough and it's fast.\nWe use this to set up the current values of the providers.\n\n\nrm copypasta\n\n\nUse lastIndexOf\n\n\nJust in case. I don't know of any scenario where this can happen.\n\n\nSupport ForwardRef\n\n\nAdd test for memo and custom hooks\n\n\nSupport defaultProps resolution\n\n", 'Use Function.prototype.apply in warningWithoutStack (#14107)\nconsole.error.apply() fails in IE9, but I verified this works (and it works everywhere else too). :)', "Rename .internal tests that aren't using internals (#14109)", 'DCE hooks code when flag is off (#14111)', "Implement {,un}hideInstance on RN renderer (#14115)\nThis is required to use lazy.\nTest Plan:\n* Verified lazy works on a real world use case (shows spinner, shows real content).\n* Verified that if I change the primary content's styles to have display: 'none' then it never appears (i.e., the code in unhide reads the styles successfully)", "[suspense] Avoid double commit by re-rendering immediately and reusing primary children (#14083)\n\nAvoid double commit by re-rendering immediately and reusing children\n\nTo support Suspense outside of concurrent mode, any component that\nstarts rendering must commit synchronously without being interrupted.\nThis means normal path, where we unwind the stack and try again from the\nnearest Suspense boundary, won't work.\nWe used to have a special case where we commit the suspended tree in an\nincomplete state. Then, in a subsequent commit, we re-render using the\nfallback.\nThe first part — committing an incomplete tree — hasn't changed with\nthis PR. But I've changed the second part — now we render the fallback\nchildren immediately, within the same commit.\n\n\nAdd a failing test for remounting fallback in sync mode\n\n\nAdd failing test for stuck Suspense fallback\n\n\nToggle visibility of Suspense children in mutation phase, not layout\n\n\nIf parent reads visibility of children in a lifecycle, they should have\nalready updated.", 'Restore the Hooks dispatcher after using SSR (#14105)', "Enable hooks in www build (#14116)\nThe enableHooks feature flag used to only control whether the API\nwas exposed on the React package. But now it also determines if the\ndispatcher and implementation are included in the bundle.\nWe're using hooks in www, so I've switched the feature flag to true\nin the www build.\n(Alternatively, we could have two feature flags: one for the\nimplementation and dispatcher, and one for exposing the API on the\nReact package.)", 'Enable hooks in www test renderer, too', "Fix unhiding in IE11 (#14126)\nSetting to null isn't correct; setting to '' is. I opted to use dangerousStyleValue for consistency with the main path that we set things.\nFixes #14114.\nTest Plan:\nVerified setting to '' works in Chrome and IE11. (Setting to null works in Chrome but not in IE11.)", "Fix lazy() with defaultProps (#14112)\n\n\nResolve defaultProps for Lazy components\n\n\nMake test fail again\n\n\nUndo the partial fix\n\n\nMake test output more compact\n\n\nAdd a separate failing test for sync mode\n\n\nClean up tests\n\n\nAdd another update to both tests\n\n\nResolve props for commit phase lifecycles\n\n\nResolve prevProps for begin phase lifecycles\n\n\nResolve prevProps for pre-commit lifecycles\n\n\nOnly resolve props if element type differs\n\n\nFix Flow\n\n\nDon't set instance.props/state during commit phase\n\n\nThis is an optimization. I'm not sure it's entirely safe. It's probably worth running internal tests and see if we can ever trigger a case where they're different.\nThis can mess with resuming.\n\nKeep setting instance.props/state before unmounting\n\nThis reverts part of the previous commit. It broke a test that verifies we use current props in componentWillUnmount if the fiber unmounts due to an error.", 'Add DEV-only checks for assumption about instance properties (#14128)', 'Check correct commit phase props in fuzz tester (#14129)\nAdds a check to the existing fuzz tester to confirm that the props are\nset to the latest values in the commit phase. Only checks\ncomponentDidUpdate; we already have unit tests for the other lifecycles,\nso I think this is good enough. This is only a redundancy.', 'Recover from errors with a boundary in completion phase (#14104)\n\n\nRecover from errors with a boundary in completion phase\n\n\nUse a separate field for completing unit of work\n\n\nUse a simpler fix with one boolean\n\n\nReoder conditions\n\n\nClarify which paths are DEV-only\n\n\nMove duplicated line out\n\n\nMake it clearer this code is DEV-only\n\n', 'Remove unused simulated flag parameter (#14127)', '"functional component" -> "function component" (#14123)', 'Make react-debug-tools a private package', 'Update changelog with unreleased features', 'Updating yarn.lock file for 16.6.1 release', 'Updating package versions for release 16.6.1', 'Update error codes for 16.6.1 release', 'Update bundle sizes for 16.6.1 release']v16.6.0 16.6.0 (October 23, 2018)
React

Add React.memo() as an alternative to PureComponent for functions. (@acdlite in #13748)
Add React.lazy() for code splitting components. (@acdlite in #13885)
React.StrictMode now warns about legacy context API. (@bvaughn in #13760)
React.StrictMode now warns about findDOMNode. (@sebmarkbage in #13841)
Rename unstable_AsyncMode to unstable_ConcurrentMode. (@trueadm in #13732)
Rename unstable_Placeholder to Suspense, and delayMs to maxDuration. (@gaearon in #13799 and @sebmarkbage in #13922)

React DOM

Add contextType as a more ergonomic way to subscribe to context from a class. (@bvaughn in #13728)
Add getDerivedStateFromError lifecycle method for catching errors in a future asynchronous server-side renderer. (@bvaughn in #13746)
Warn when <Context> is used instead of <Context.Consumer>. (@trueadm in #13829)
Fix gray overlay on iOS Safari. (@philipp-spiess in #13778)
Fix a bug caused by overwriting window.event in development. (@sergei-startsev in #13697)

React DOM Server

Add support for React.memo(). (@alexmckenley in #13855)
Add support for contextType. (@alexmckenley and @sebmarkbage in #13889)

Scheduler (Experimental)

Rename the package to scheduler. (@gaearon in #13683)
Support priority levels, continuations, and wrapped callbacks. (@acdlite in #13720 and #13842)
Improve the fallback mechanism in non-DOM environments. (@acdlite in #13740)
Schedule requestAnimationFrame earlier. (@acdlite in #13785)
Fix the DOM detection to be more thorough. (@trueadm in #13731)
Fix bugs with interaction tracing. (@bvaughn in #13590)
Add the envify transform to the package. (@mridgway in #13766)
 ['16.5.2 CHANGELOG', "Rename 'Schedule' header -> 'Schedule (Experimental)'", 'Added another bullet to the CHANGELOG', 'Rename schedule to scheduler (#13683)', 'Remove some old files from stats', 'Clarify comment (#13684)\n\n\nfix comment typo\n\n\nUpdate Scheduler.js\n\n', 'Fix circular dependency in TracingSubscriptions (#13689)', 'Add closing parenthesis (#13712)\nI’ve first seen it in the releases view and fixed it there as well.', 'Remove redundant logic (#13502)', 'Restore global window.event after event dispatching (#13688) (#13697)', 'Interaction tracking ref-counting bug fixes (WIP) (#13590)\n\nAdded new (failing) suspense+interaction tests\nAdd new tracing+suspense test harness fixture\nRefactored interaction tracing to fix ref counting bug\n', 'Bump babel-eslint and remove flow supressions (#13727)', '[scheduler] Priority levels, continuations, and wrapped callbacks (#13720)\nAll of these features are based on features of React\'s internal\nscheduler. The eventual goal is to lift as much as possible out of the\nReact internals into the Scheduler package.\nIncludes some renaming of existing methods.\n\nscheduleWork is now scheduleCallback\ncancelScheduledWork is now cancelCallback\n\nPriority levels\nAdds the ability to schedule callbacks at different priority levels.\nThe current levels are (final names TBD):\n\nImmediate priority. Fires at the end of the outermost currently\nexecuting (similar to a microtask).\nInteractive priority. Fires within a few hundred milliseconds. This\nshould only be used to provide quick feedback to the user as a result\nof an interaction.\nNormal priority. This is the default. Fires within several seconds.\n"Maybe" priority. Only fires if there\'s nothing else to do. Used for\nprerendering or warming a cache.\n\nThe priority is changed using runWithPriority:\njs\nrunWithPriority(InteractivePriority, () => {\n  scheduleCallback(callback);\n});\nContinuations\nAdds the ability for a callback to yield without losing its place\nin the queue, by returning a continuation. The continuation will have\nthe same expiration as the callback that yielded.\nWrapped callbacks\nAdds the ability to wrap a callback so that, when it is called, it\nreceives the priority of the current execution context.', 'Support class component static contextType attribute (#13728)\n\nSupport class component static contextType attribute\n', 'Added a PureComponent contextType test (#13729)', 'Ensure "addEventListener" exists on "window" for "scheduler" package (#13731)\n\nEnsure addEventListener exists on "window"\n', 'Rename AsyncMode -> ConcurrentMode (#13732)\n\nRename AsyncMode -> ConcurrentMode\n', 'Revise AttributeType React Native Flow Type (#13737)', "[scheduler] Improve naive fallback version used in non-DOM environments\nAdded some tests for the non-DOM version of Scheduler that is used\nas a fallback, e.g. Jest. The tests use Jest's fake timers API:\n\njest.runAllTimers(ms) flushes all scheduled work, as expected\njest.advanceTimersByTime(ms) flushes only callbacks that expire\nwithin the given milliseconds.\n\nThese capabilities should be sufficient for most product tests. Because\njest's fake timers do not override performance.now or Date.now, we\nassume time is constant. This means Scheduler's internal time will not\nbe aligned with other code that reads from performance.now. For finer\ncontrol, the user can override window._sched like we do in our tests.\nWe will likely publish a Jest package that has this built in.", 'pure (#13748)\n\npure\n\nA higher-order component version of the React.PureComponent class.\nDuring an update, the previous props are compared to the new props. If\nthey are the same, React will skip rendering the component and\nits children.\nUnlike userspace implementations, pure will not add an additional\nfiber to the tree.\nThe first argument must be a functional component; it does not work\nwith classes.\npure uses shallow comparison by default, like React.PureComponent.\nA custom comparison can be passed as the second argument.\nCo-authored-by: Andrew Clark acdlite@fb.com\nCo-authored-by: Sophie Alpert sophiebits@fb.com\n\nWarn if first argument is not a functional component\n', 'Enable getDerivedStateFromError (#13746)\n\nRemoved the enableGetDerivedStateFromCatch feature flag (aka permanently enabled the feature)\nForked/copied ReactErrorBoundaries to ReactLegacyErrorBoundaries for testing componentDidCatch\nUpdated error boundaries tests to apply to getDerivedStateFromCatch\nRenamed getDerivedStateFromCatch -> getDerivedStateFromError\nWarn if boundary with only componentDidCatch swallows error\nFixed a subtle reconciliation bug with render phase error boundary\n', 'Removed extra typeof checks for contextType.unstable_read (#13736)', 'Rename simple-cache-provider to react-cache (#13755)', '--save is no longer needed (#13756)\n--save is on by default as of npm 5, and npm install aphrodite is functionally equivalent to npm install --save aphrodite now', 'Fix simple-cache-provider import that I missed', 'UMD react-cache build (#13761)', 'Always warn about legacy context within StrictMode tree (#13760)', 'Remove unreachable code (#13762)', "Jest + test renderer helpers for concurrent mode (#13751)\n\nJest + test renderer helpers for concurrent mode\n\nMost of our concurrent React tests use the noop renderer. But most\nof those tests don't test the renderer API, and could instead be\nwritten with the test renderer. We should switch to using the test\nrenderer whenever possible, because that's what we expect product devs\nand library authors to do. If test renderer is sufficient for writing\nmost React core tests, it should be sufficient for others, too. (The\nconverse isn't true but we should aim to dogfood test renderer as much\nas possible.)\nThis PR adds a new package, jest-react (thanks @cpojer). I've moved\nour existing Jest matchers into that package and added some new ones.\nI'm not expecting to figure out the final API in this PR. My goal is\nto land something good enough that we can start dogfooding in www.\nTODO: Continue migrating Suspense tests, decide on better API names\n\n\nAdd additional invariants to prevent common errors\n\n\nErrors if user attempts to flush when log of yields is not empty\n\n\nThrows if argument passed to toClearYields is not ReactTestRenderer\n\n\nBetter method names\n\n\ntoFlushAll -> toFlushAndYield\n\ntoFlushAndYieldThrough ->\ntoClearYields -> toHaveYielded\n\nAlso added toFlushWithoutYielding\n\n\nFix jest-react exports\n\n\nTweak README\n\n", 'Rename ReactSuspense-test -> ReactSuspenseWithNoopRenderer-test\nDoing this in its own commit to preserve history', 'Rename ReactSuspenseWithTestRenderer-test -> ReactSuspense-test', 'fix - small misspelling (#13768)\nlonger term needs a hyphen.', 'Restart from root if promise pings before end of render phase (#13774)\n\n\nRestart from root if promise pings before end of render phase\n\n\nTest that placeholder resolves successfully even if fallback render is pending\n\n', 'Add envify transform to scheduler package (#13766)\nThis package uses process.env.NODE_ENV but does not transform its usage during bundling like the rest of the React libraries do. This causes issues when process is not defined globally.', 'Terminology: Functional -> Function Component (#13775)\n\n\nTerminology: Functional -> Function Component\n\n\nDrop the "stateless" (functions are already stateless, right?)\n\n', "Wrap retrySuspendedRoot using SchedulerTracing (#13776)\nPreviously, we were emptying root.pendingInteractionMap and permanently losing those interactions when applying an unrelated update to a tree that has no scheduled work that is waiting on promise resolution. (That is, one that is showing a fallback and waiting for the suspended content to resolve.)\nThe logic I'm leaving untouched with nextRenderIncludesTimedOutPlaceholder is not correct -- what we want is instead to know if any placeholder anywhere in the tree is showing its fallback -- but we don't currently have a better replacement, and this should unblock tracing with suspense again.", '[scheduler]\xa0add a test documenting current behavior (#13687)\n\n\n[scheduler]\xa0add a test documenting current behavior\n\n\nUpdate with latest changes from master and confirm fixed behavior\n\n', "[scheduler] Eagerly schedule rAF at beginning of frame (#13785)\n\n[scheduler] Eagerly schedule rAF at beginning of frame\n\nEagerly schedule the next animation callback at the beginning of the\nframe. If the scheduler queue is not empty at the end of the frame, it\nwill continue flushing inside that callback. If the queue is empty,\nthen it will exit immediately. Posting the callback at the start of the\nframe ensures it's fired within the earliest possible frame. If we\nwaited until the end of the frame to post the callback, we risk the\nbrowser skipping a frame and not firing the callback until the frame\nafter that.\n\nRe-name scheduledCallback -> scheduledHostCallback\n", "Don’t add onclick listener to React root (#13778)\nFixes #13777\nAs part of #11927 we introduced a regression by adding onclick handler\nto the React root. This causes the whole React tree to flash when tapped\non iOS devices (for reasons I outlined in\nhttps://github.com/facebook/react/issues/12989#issuecomment-414266839).\nTo fix this, we should only apply onclick listeners to portal roots. I\nverified that my proposed fix indeed works by checking out our DOM\nfixtures and adding regression tests.\nStrangely, I had to make changes to the DOM fixtures to see the behavior\nin the first place. This seems to be caused by our normal sites (and \nthus their React root) being bigger than the viewport:\n\nAn alternative approach to finding out if we're appending to a React\nroot would be to add a third parameter to appendChildToContainer based\non the tag of the parent fiber.", 'Enable Suspense + rename Placeholder (#13799)\n\n\nEnable Suspense\n\n\n => \n\n\nUpdate suspense fixture\n\n', 'comment out temporarily', 'Updating package versions for release 16.6.0-alpha.8af6728', 'Updating dependencies for react-noop-renderer', 'Update error codes for 16.6.0-alpha.8af6728 release', 'Update bundle sizes for 16.6.0-alpha.8af6728 release', 'Revert "comment out temporarily"\nThis reverts commit 9abb9cd50a769d07ae3f87bc8802a3e483c69c2b.', "React.pure automatically forwards ref (#13822)\nWe're not planning to encourage legacy context, and without this change, it's difficult to use pure+forwardRef together. We could special-case pure(forwardRef(...)) but this is hopefully simpler.\njs\nReact.pure(function(props, ref) {\n  // ...\n});", 'Renamed 4 Internal React Modules', 'Renamed 4 Internal React Modules', "Merge branch 'master' of github.com:facebook/react\nFixed my own author name and email", 'Fix User Timing oddities with Suspense, pure, and lazy (#13833)\n\n\nShow pure components in fiber timings with name\n\n\nFix Suspense and lazy user timings\n\n\nTweak message and type name\n\n\nFix Flow\n\n', 'Use React.lazy in Suspense fixture (#13834)', 'Error gracefully for unsupported SSR features (#13839)', 'Deprecate context object as a consumer and add a warning message (#13829)\n\nDeprecate context object as a consumer and add various warning messages for unsupported usage.\n', '[scheduler] Rename priority levels (#13842)\n\n"Interactive" -> "user-blocking"\n"Whenever" -> "Idle"\n\nThese are the terms used by @spanicker in their main-thread scheduling\nproposal: https://github.com/spanicker/main-thread-scheduling#api-sketch\nThat proposal also uses "microtask" instead of "immediate" and "default"\ninstead of "normal." Not sure about "microtask" because I don\'t think\nmost people know what that is. And our implementation isn\'t a proper\nmicrotask, though you could use it to implement microtasks if you made\nsure to wrap every entry point. I don\'t really have a preference between\n"default" and "normal."\nThese aren\'t necessarily the final names. Still prefixed by unstable_.', "Deprecate findDOMNode in StrictMode (#13841)\n\nDeprecate findDOMNode in StrictMode\n\nThere are two scenarios. One is that we pass a component instance that is\nalready in strict mode or the node that we find is in strict mode if\nan outer component renders into strict mode.\nI use a separate method findHostInstanceWithWarning for this so that\na) I can pass the method name (findDOMNode/findNodeHandle).\nb) Can ignore this warning in React Native mixins/NativeComponent that use this helper.\nI don't want to expose the fiber to the renderers themselves.", 'Fix false positive context warning when using an old React (#13850)', '[schedule] Call ensureHostCallbackIsScheduled without args (#13852)\nensureHostCallbackIsScheduled reads firstCallbackNode from global scope\nand need not be passed in function call', 'Remove unstable_read() in favor of direct dispatcher call (#13861)\n\n\nRemove unstable_read() in favor of direct dispatcher call\n\n\nThis no longer throws immediately\n\n', 'Replacement of old links, by the new ones of the documentation. (#13871)', 'Hide timed-out children instead of deleting them so their state is preserved (#13823)\n\nStore the start time on updateQueue instead of stateNode\n\nOriginally I did this to free the stateNode field to store a second\nset of children. I don\'t we\'ll need this anymore, since we use fragment\nfibers instead. But I still think using updateQueue makes more sense\nso I\'ll leave this in.\n\nUse fragment fibers to keep the primary and fallback children separate\n\nIf the children timeout, we switch to showing the fallback children in\nplace of the "primary" children. However, we don\'t want to delete the\nprimary children because then their state will be lost (both the React\nstate and the host state, e.g. uncontrolled form inputs). Instead we\nkeep them mounted and hide them. Both the fallback children AND the\nprimary children are rendered at the same time. Once the primary\nchildren are un-suspended, we can delete the fallback children — don\'t\nneed to preserve their state.\nThe two sets of children are siblings in the host environment, but\nsemantically, for purposes of reconciliation, they are two separate\nsets. So we store them using two fragment fibers.\nHowever, we want to avoid allocating extra fibers for every placeholder.\nThey\'re only necessary when the children time out, because that\'s the\nonly time when both sets are mounted.\nSo, the extra fragment fibers are only used if the children time out.\nOtherwise, we render the primary children directly. This requires some\ncustom reconciliation logic to preserve the state of the primary\nchildren. It\'s essentially a very basic form of re-parenting.\n\nUse memoizedState to store various pieces of SuspenseComponent\'s state\n\nSuspenseComponent has three pieces of state:\n\nalreadyCaptured: Whether a component in the child subtree already\nsuspended. If true, subsequent suspends should bubble up to the\nnext boundary.\ndidTimeout: Whether the boundary renders the primary or fallback\nchildren. This is separate from alreadyCaptured because outside of\nstrict mode, when a boundary times out, the first commit renders the\nprimary children in an incomplete state, then performs a second commit\nto switch the fallback. In that first commit, alreadyCaptured is\nfalse and didTimeout is true.\ntimedOutAt: The time at which the boundary timed out. This is separate\nfrom didTimeout because it\'s not set unless the boundary\nactually commits.\n\nThese were previously spread across several fields.\nThis happens to make the non-strict case a bit less hacky; the logic for\nthat special case is now mostly localized to the UnwindWork module.\n\nHide timed-out Suspense children\n\nWhen a subtree takes too long to load, we swap its contents out for\na fallback to unblock the rest of the tree. Because we don\'t want\nto lose the state of the timed out view, we shouldn\'t actually delete\nthe nodes from the tree. Instead, we\'ll keep them mounted and hide\nthem visually. When the subtree is unblocked, we un-hide it, having\npreserved the existing state.\nAdds additional host config methods. For mutation mode:\n\nhideInstance\nhideTextInstance\nunhideInstance\nunhideTextInstance\n\nFor persistent mode:\n\ncloneHiddenInstance\ncloneUnhiddenInstance\ncreateHiddenTextInstance\n\nI\'ve only implemented the new methods in the noop and test renderers.\nI\'ll implement them in the other renderers in subsequent commits.\n\nInclude hidden prop in noop renderer\'s output\n\nThis will be used in subsequent commits to test that timed-out children\nare properly hidden.\nAlso adds getChildrenAsJSX() method as an alternative to using\ngetChildren(). (Ideally all our tests would use test renderer #oneday.)\n\nImplement hide/unhide host config methods for DOM renderer\n\nFor DOM nodes, we hide using el.style.display = \'none\'.\nText nodes don\'t have style, so we hide using text.textContent = \'\'.\n\n\nImplement hide/unhide host config methods for Art renderer\n\n\nCreate DOM fixture that tests state preservation of timed out content\n\n\nAccount for class components that suspend outside concurrent mode\n\n\nNeed to distinguish mount from update. An unfortunate edge case :(\n\n\nFork appendAllChildren between persistent and mutation mode\n\n\nRemove redundant check for existence of el.style\n\n\nSchedule placement effect on indeterminate components\n\n\nIn non-concurrent mode, indeterminate fibers may commit in an\ninconsistent state. But when they update, we should throw out the\nold fiber and start fresh. Which means the new fiber needs a\nplacement effect.\n\nPass null instead of current everywhere in mountIndeterminateComponent\n', "Strict mode and default mode should have same Suspense semantics (#13882)\nIn the default mode, Suspense has special semantics where, in\naddition to timing out immediately, we don't unwind the stack before\nrendering the fallback. Instead, we commit the tree in an inconsistent\nstate, then synchronous render again to switch to the fallback. This\nis slower but is less likely to cause issues with older components that\nperform side effects in the render phase (e.g. componentWillMount,\ncomponentWillUpdate, and componentWillReceiveProps).\nWe should do this in strict mode, too, so that there are no semantic\ndifferences (in prod, at least) between default mode and strict mode.\nThe rationale is that it makes it easier to wrap a tree in strict mode\nand start migrating components incrementally without worrying about new\nbugs in production.", 'Remove render prop option from Suspense (#13880)\nThis was the original, lower-level API before we landed on fallback\ninstead. (We might add a different lower-level API in the future, likely\nalongside a new API for catching errors).', 'Suspense component does not capture if fallback is not defined (#13879)\n\nSuspense component does not capture if fallback is not defined\n\nA missing fallback prop means the exception should propagate to the next\nparent (like a rethrow). That way a Suspense component can specify other\nprops like maxDuration without needing to provide a fallback, too.\nCloses #13864\n\nChange order of checks\n', 'Fix lint', 'Prettier :(', 'Revert "React.pure automatically forwards ref" (#13887)\nReverts #13822. We\'re not sure we want to do this.', "Lazy components must use React.lazy (#13885)\nRemoves support for using arbitrary promises as the type of a React\nelement. Instead, promises must be wrapped in React.lazy. This gives us\nflexibility later if we need to change the protocol.\nThe reason is that promises do not provide a way to call their\nconstructor multiple times. For example:\nconst promiseForA = new Promise(resolve => {\n  fetchA(a => resolve(a));\n});\nGiven a reference to promiseForA, there's no way to call fetchA\nagain. Calling then on the promise doesn't run the constructor again;\nit only attaches another listener.\nIn the future we will likely introduce an API like React.eager that\nis similar to lazy but eagerly calls the constructor. That gives us\nthe ability to call the constructor multiple times. E.g. to increase\nthe priority, or to retry if the first operation failed.", "React.lazy constructor must return result of a dynamic import (#13886)\nWe may want to change the protocol later, so until then we'll be\nrestrictive. Heuristic is to check for existence of default.", 'Add readContext to SSR (#13888)\nWill be used by react-cache.', 'SSR support for class contextType (#13889)', 'Bugfix for #13886 (#13896)\nFixes a bug where a lazy component does not cache the result of\nits constructor.', 'Class component can suspend without losing state outside concurrent mode (#13899)\nOutside of concurrent mode, schedules a force update on a suspended\nclass component to force it to prevent it from bailing out and\nreusing the current fiber, which we know to be inconsistent.', "Centralize props memoization (#13900)\n\nMove memoizedProps to after beginWork remove memoizeProps helper\n\nWe always call this at the end. This is now enforced to line up since\nwe do the equality check in the beginning of beginWork. So we can't\nhave special cases.\n\nInline the one caller of memoizeState\n", "Always bail out timed out children even if they receive an update (#13901)\n\nAlways bail out timed out children even if they receive an update\n\nThe fragment that wraps timed-out children should always have an\nexpiration time of NoWork.\n\nDon't need to set expirationTime, only childExpirationTime\n", "Unfork Lazy Component Branches (#13902)\n\nIntroduce elementType field\n\nThis will be used to store the wrapped type of an element. E.g. pure and\nlazy.\nThe existing type field will be used for the unwrapped type within them.\n\n\nStore the unwrapped type on the type field of lazy components\n\n\nUse the raw tags for lazy components\n\n\nInstead, we check if the elementType and type are equal to test if\nwe need to resolve props. This is slightly slower in the normal case\nbut will yield less code and branching.\n\n\nClean up lazy branches\n\n\nCollapse work tag numbering\n\n\nSplit IndeterminateComponent out from Lazy\n\n\nThis way we don't have to check the type in a hacky way in the\nindeterminate path. Also, lets us deal with lazy that resolves to\nindeterminate and such.\n\nMissing clean up in rebase\n", 'Add back accidentally deleted break to prevent fallthrough', "Allow arbitrary types to be wrapped in pure (#13903)\n\nAllow arbitrary types to be wrapped in pure\n\nThis creates an outer fiber that container the pure check and an inner\nfiber that represents which ever type of component.\n\nAdd optimized fast path for simple pure function components\n\nSpecial cased when there are no defaultProps and it's a simple function\ncomponent instead of class. This doesn't require an extra fiber.\nWe could make it so that this also works with custom comparer but that\nmeans we have to go through one extra indirection to get to it.\nMaybe it's worth it, donno.", "Add support for React.pure in ReactDOMServer (#13855)\n\n\nAdd support for React.pure in ReactDOMServer\n\n\nUnwrap pure wrappers by creating an additional element as a single child\n\n\nThis is very slow but meh. We're rewriting this whole thing anyway.", 'pure -> memo (#13905)', 'Bump version to 16.6.0-beta.0 (#13906)\n\n\nBump version to 16.6.0-beta.0\n\n\nRoot too\n\n', 'Add use strict to .prettierrc.js (#13787)', 'Fix failing async tests in Node 10\nDunno why they happened to work in Node 8 but whatever. Tested on both.', 'Fix babel-preset-fbjs configure link in comment (#13666)', '[minor bugfix] fix minor bug with handleReset in suspense fixture (#13843)\n\nfix minor bug with handleReset in suspense fixture\n\notherwise resetting the cache in debugger throws an error \nreported here\nhttps://www.reddit.com/r/reactjs/comments/9n9nfo/react_166_canary/\n\n\nfix singlequote/doublequote\n\n\nswitch to performance.now()\n\n', 'Add flow types in getNodeForCharacterOffset (#13908)', 'Add flow types in getEventModifierState (#13909)', 'Add flow types in ReactControlledComponent (#13669)', '[reconciler] ReactFiberNewContext import maxSigned31BitInt twice (#13857)\n\n\n[reconciler] ReactFiberNewContext import maxSigned31BitInt twice\n\n\nrename maxSigned31BitInt to MAX_SIGNED_31_BIT_INT\n\n', "Try rendering again if a timed out tree receives an update (#13921)\nFound a bug related to suspending inside an already mounted tree. While\ninvestigating this I noticed we really don't have much coverage of\nsuspended updates. I think this would greatly benefit from some fuzz\ntesting; still haven't thought of a good test case, though.", 'Remove redundant word "the" (#13919)', "Remove unstable_ prefix from Suspense (#13922)\nWe are using it with lazy and the combination Suspense + lazy seems pretty\nstable. maxDuration is not but that's only enabled when you're in\nConcurrentMode which is still unstable.", 'Fix lint (#13923)', "[Synchronous Suspense] Suspending a class outside concurrent mode (#13926)\n\n[Synchronous Suspense] Suspending a class outside concurrent mode\n\nWhen a class component suspends during mount outside concurrent mode,\nchange the tag so it's not mistaken for a completed component. For\nexample, we should not call componentWillUnmount if it is deleted.\n\nPR nits\n", 'Add 16.6.0 changelog (#13927)\n\n\nAdd 16.6.0 changelog\n\n\nUpdate CHANGELOG.md\n\n', 'Tweak changelog credits', 'Fix Markdown', 'Add "unstable_" prefix to react-cache and jest-react (#13929)\n\nAdd "unstable_" prefix to react-cache createResource and jest-react matchers\nReverted accidental change to error-codes JSON\nRemove unstable_ prefix from internal React tests for jest-test\n', 'Removed react-cache from the bundle list for now (#13930)\n\n\nRemoved react-cache from the bundle list for now\n\n\nRe-add react-cache bundle, but mark as private to avoid NPM publishing\n\n', 'Revert accidentally committed existence check (#13931)', "[react-cache] Remove cache as argument to read (#13865)\n\n[react-cache] Remove cache as argument to read\n\nUpdated is API is Resource.read(key) instead of\nResource.read(cache, key).\nThe cache is read from context using readContext.\nThis also removes cache invalidation entirely (other than the default\nLRU mechanism), as well as the ability to have multiple caches. We'll\nadd it back once Context.write lands and we can implement it the\nright way.\nSince there's now only a single cache (the global one), we don't\nactually need to use context yet, but I've added a dummy context\nanyway so the user gets an error if they attempt to read outside the\nrender phase.\n\n\nnits\n\n\nAdd test for thenables that resolve multiple times\n\n", 'Fix Suspense fixture (#13932)', 'Add skipCI flag to release script (#13933)', 'Prettier', 'Revert "Updating dependencies for react-noop-renderer"\nThis reverts commit 1a57dc66891a3747f2c5039803654b48871f451c.', 'Revert "Revert "Updating dependencies for react-noop-renderer""\nThis reverts commit 3e8b4a5b8b0630f2d0d4bf6afc2ef64e60c812a0.', 'Bump versions to beta.0', "Revert all package versions to 16.5.2 state\nOur release script is getting really confused so I'm resetting to last working state.", 'Updating package versions for release 16.6.0', 'Update error codes for 16.6.0 release', 'Update bundle sizes for 16.6.0 release']v16.5.2 React DOM

Fixed a recent <iframe> regression (@JSteunou in #13650)
Fix updateWrapper so that <textarea>s no longer re-render when data is unchanged (@joelbarbosa in #13643)

Schedule (Experimental)

Renaming "tracking" API to "tracing" (@bvaughn in #13641)
Add UMD production+profiling entry points (@bvaughn in #13642)
Refactored schedule to remove some React-isms and improve performance for when deferred updates time out (@acdlite in #13582)
 ['Add 16.5.1 changelog (#13638)', 'Updating package versions for release 16.5.1', 'Update error codes for 16.5.1 release', 'Update bundle sizes for 16.5.1 release', 'Fix packaging fixtures', 'Rename "tracking" API to "tracing" (#13641)\n\nReplaced "tracking" with "tracing" in all directory and file names\nGlobal rename of track/tracking/tracked to trace/tracing/traced\n', 'Fix test comment typo (#13568)', 'Add UMD production+profiling entry points (#13642)\n\nAdded UMD_PROFILING type to react-dom and scheduling package. Added UMD shim to schedule package.\nAdded new schedule umd prod+prof bundle to API test\n', 'Fix some iframe edge cases (#13650)\nShould fix #13648 by fallback on window when document.defaultView does not exists anymore', "[schedule] Refactor Schedule, remove React-isms (#13582)\n\nRefactor Schedule, remove React-isms\n\nOnce the API stabilizes, we will move Schedule this into a separate\nrepo. To promote adoption, especially by projects outside the React\necosystem, we'll remove all React-isms from the source and keep it as\nsimple as possible:\n\nNo build step.\nNo static types.\nEverything is in a single file.\n\nIf we end up needing to support multiple targets, like CommonJS and ESM,\nwe can still avoid a build step by maintaining two copies of the same\nfile, but with different exports.\nThis commit also refactors the implementation to split out the DOM-\nspecific parts (essentially a requestIdleCallback polyfill). Aside from\nthe architectural benefits, this also makes it possible to write host-\nagnostic tests. If/when we publish a version of Schedule that targets\nother environments, like React Native, we can run these same tests\nacross all implementations.\n\nEdits in response to Dan's PR feedback\n", 'Do not bind topLevelType to dispatch (#13618)\n\nDo not bind topLevelType to dispatch\n\nA previous change made it such that all top level event types\ncorrespond to their associated native event string values. This commit\neliminates the .bind attached to dispatch and fixes a related flow\ntype.\n\n\nAdd note about why casting event.type to a topLevelType is safe\n\n\nMove interactiveUpdates comment to point of assignment\n\n', 'Resubmit: Fix updateWrapper causing re-render textarea, even though their data (#13643)\n\n\nfix updateWrapper causing re-render textarea, even though their data has not changed\n\n\nfix updateWrapper causing re-render textarea, even though their data, prettier-all\n\n\nminor changes to updateWrapper, add test\n\n', 'remove flow typings from Schedule.js (#13662)', 'docs(changelog): Fix misspelling (#13663)\ndangerouslySetInnerHTML was misspelled dangerousSetInnerHTML', 'Revert "Do not bind topLevelType to dispatch" (#13674)\n\nRevert "Do not bind topLevelType to dispatch (#13618)"\n\nThis reverts commit 0c9c591bfb4c280d69bc9c1dd692ab0028bb0f8e.', 'Updating package versions for release 16.6.0-alpha.0', 'Updating dependencies for react-noop-renderer', 'Update error codes for 16.6.0-alpha.0 release', 'Update bundle sizes for 16.6.0-alpha.0 release', 'Kepp calling peformWork consistent (#13596)', 'Revert "Update bundle sizes for 16.6.0-alpha.0 release"\nThis reverts commit 42d12317a794b4ba89a6a6d16302f66cb370be91.', 'Revert "Update error codes for 16.6.0-alpha.0 release"\nThis reverts commit 21ceb19ea09439dc2c32cd9ec4360e95f143b2e7.', 'Revert "Updating dependencies for react-noop-renderer"\nThis reverts commit 489614c4fc95877d2155b35cf23d76237785cdbd.', 'Revert "Updating package versions for release 16.6.0-alpha.0"\nThis reverts commit 351c9015c8f6a0169fd33965a2afe93ad12675c1.', 'Updating package versions for release 16.5.2', 'Update error codes for 16.5.2 release', 'Update bundle sizes for 16.5.2 release']v16.5.1 16.5.1 (September 13, 2018)
React

Improve the warning when React.forwardRef receives an unexpected number of arguments. (@andresroberto in #13636)

React DOM

Fix a regression in unstable exports used by React Native Web. (@aweary in #13598)
Fix a crash when component defines a method called isReactComponent. (@gaearon in #13608)
Fix a crash in development mode in IE9 when printing a warning. (@link-alex in #13620)
Provide a better error message when running react-dom/profiling with schedule/tracking. (@bvaughn in #13605)
If a ForwardRef component defines a displayName, use it in warnings. (@probablyup in #13615)

Schedule (Experimental)

Add a separate profiling entry point at schedule/tracking-profiling. (@bvaughn in #13605)
 ['Add 2fa OTP code to npm dist-tag command too', 'Update ReactNativeViewConfigRegistry Flow Types (#13579)', 'Updated 16.5 changelog', 'Fixed small CHANGELOG error (#13583)', 'Build schedule which is required for time slicing demo (#13588)\n\n\nBuild schedule which is required for time slicing demo\n\n\nUpdate suspense demo README too\n\n\nUpdate README.md\n\n\nUpdate README.md\n\n\nUpdate README.md\n\n', 'chore: remove duplicate when (#13587)', 'Drop the year from Facebook copyright headers and the LICENSE file. (#13593)', 'Break up ReactDOMServerIntegrationForm-test (#13600)\nIn https://github.com/facebook/react/pull/13394, I encountered an\nissue where the ReactDOMServerIntegrationForm test suite consumed\nsufficient memory to crash CircleCI. Breaking up this test suite by\nform element type resolved the issue.\nThis commit performs that change separate from the Symbol/Function\nstringification changes in #13394.', "Remove injectComponentTree from unstable-native-dependencies, add EventPluginHub (#13598)\n\nRemove injectComponentTree from unstable-native-dependencies, add\nEventPluginHub\n\ninjectComponentTree was exposed for react-native-web, but wasn't\nactually being used by the project. They were using EventPluginHub\nthrough ReactDOM's secret internals, but that was removed in https://github.com/facebook/react/pull/13539\nThis removes the unused injectComponentTree export, refactors the\nResponderEventPlugin test so it doesn't depend on it, and also adds\nEventPluginHub to the exports to unbreak react-native-web\n\nRe-export injectEventPluginsByName from ReactDOM internals\n", 'Use clearer wording\nFixes #13604', 'Enable no-use-before-define rule (#13606)', 'Improve DX when combining react-dom/profiling and schedule/tracking (#13605)\n\nAdded blessed production+profiling entry point for schedule/tracking\nAdd invariant when profiling renderer is used with non-profiling schedule/tracking\n', 'Fix a regression related to isReactComponent prototype check (#13608)', "Fix host bailout for the persistent mode (#13611)\n\n\nAdd regression test for persistent bailout bug\n\n\nFork more logic into updateHostComponent\n\n\nThis is mostly copy paste. But I added a bailout only to mutation mode. Persistent mode doesn't have that props equality bailout anymore, so the Fabric test now passes.\n\n\nAdd failing test for persistence host minimalism\n\n\nAdd bailouts to the persistent host updates\n\n", 'Manually update schedule dep in react-native-renderer (#13609)', 'Release script updates private package dependencies also (#13612)', 'Hydration DOM Fixture (#13521)\n\nAdd home component. Async load fixtures.\n\nThis commit adds a homepage to the DOM fixtures that includes browser\ntesting information and asynchronously loads fixtures.\nThis should make it easier to find DOM testing information and keep\nthe payload size in check as we add more components to the fixtures.\n\nAdds experimental hydration fixture\n\nThis commit adds a first pass at a fixture that makes it easier to\ndebug the process of hydrating static markup. This is not complete:\n\nIt needs to be verified across multiple browsers\nIt needs to render with the current version of react\n\nStill, it at least demonstrates the idea. A fixture like this will\nalso be helpful for debugging change events for hydrated inputs, which\npresently do not fire if the user changes an input\'s text before\nhydration.\n\n\nTweak select width\n\n\nManually join extra attributes in warning\n\n\nThis prevents a bug where Chrome reports Array(n) where n is the\nsize of the array.\n\n\nTransform with buble\n\n\nEliminate dependencies\n\n\nPull in react-live for better editing\n\n\nHandle encoding errors, pass react version\n\n\nLoad the correct version of React\n\n\nTweaks\n\n\nRevert style change\n\n\nRevert warning update\n\n\nProperly handle script errors. Fix dom-server CDN loading\n\n\nFix 15.x releases\n\n\nUse postMessage to reduce latency, support older browsers\n\n\nThis commit makes a few tweaks to support older browsers and updates\nthe code transition process to use window.postMessage. This avoids\nloading React on every single change.\n\n\nFix fixture renamespacing bug\n\n\nGracefully fallback to textarea in React 14\n\n\nReplace buble with babel, react-live with codemirror\n\n\nSimplify layout to resolve production code-mirror issues\n\n\nTweak height rules for code-mirror\n\n\nUpdate theme to paraiso\n\n\nFormat Code.js\n\n\nAdjust viewport to fix CodeMirror resize issue in production build\n\n\nEliminate react-code-mirror\n\n\nImprove error state. Make full stack collapsable\n\n\nAdd link to license in codemirror stylesheet\n\n\nMake code example more concise\n\n\nReplace "Hydrate" with "Auto-hydrate" for clarity\n\n\nRemove border below hydration header\n\n\nRename query function in render.js\n\n\nUse Function(code) to evaluate hydration fixture\n\n\nFor clarity, and so that the Fixture component does not need to be\nassigned to the window, this commit changes the way code is executed\nsuch that it evaluates using a Function constructor.\n\nExtend hydration fixture to fill width. Design adjustments\n\nThis commit extends the hydration fixture such that it takes up the\nfull screen view. To accomplish this, the container that wraps all\nfixtures has been moved to the FixtureSet component, utilized by all\nother fixtures.\n\n\nImprove error scroll state\n\n\nLazy load CodeMirror together before executing\n\n\nThis commit fixes an issue where CodeMirror wouldn\'t layout correctly\nin production builds because the editor executes before the stylesheet\nloaded. CodeMirror needs layout information, and was rendering\noff-screen without correct CSS layout measurements.\n\n\nFix indentation on error message\n\n\nDo not highlight errors from Babel. Add setPrototypeOf polyfill\n\n\nThis commit fixes an error in Safari 7.1 where Chalk highlighted Babel\nerrors caused a crash when setPrototypeOf was called within the\nlibrary.\nThis is also an issue on IE9, however this fix does not resolve issues\nin that browser.\n\n\nIncrease resilience to bad errors in Hydration fixture\n\n\nReverts highlighting change. Polyfilling Safari 7.1 is sufficient\n\nDo not render a details tag in IE9\n', "honor displayName set on ForwardRef if available (#13615)\n\n\nadd failing test\n\n\nhonor displayName set on ForwardRef if available\n\n\nSince React.forwardRef returns a component object, some users\n(including styled-components and react-native) are starting to\ndecorate them with various statics including displayName.\nThis adjusts React's various name-getters to honor this if set and\nsurface the name in warnings and hopefully DevTools.\n\n\nfix typing\n\n\nRefine later\n\n", 'Switch to @sizebot token (#13622)', "Fix warning without stack for ie9 (#13620)\n\nFix warning without stack for ie9\n\nWhere console methods like log, error etc. don't have 'apply' method.\nBecause of the lot of tests already expect that exactly console['method']\nwill be called - had to reapply references for console.error method\nhttps://github.com/facebook/react/issues/13610\n\n\npass parameters explicitly to avoid using .apply\nwhich is not supported for console methods in ie9\n\n\nMinor tweaks\n\n", 'Fix IE version in comment', 'Run tests for Fire feature flags (#13628)\n\n\nRun tests for Fire feature flags\n\n\nOnly run ReactDOM tests for Fire\n\n', 'Allow reading default feature flags from bundle tests (#13629)', '🔥 Stop syncing the value attribute on inputs (behind a feature flag) (#13526)\n\n\n:fire: Stop syncing the value attribute on inputs\n\n\nEliminate some additional checks\n\n\nRemove initialValue and initialWrapper from wrapperState flow type\n\n\nUpdate tests with new sync logic, reduce some operations\n\n\nUpdate tests, add some caveats for SSR mismatches\n\n\nRevert newline change\n\n\nRemove unused type\n\n\nCall toString to safely type string values\n\n\nAdd disableInputAttributeSyncing feature flag\n\n\nReverts tests to original state, adds attribute sync feature flag,\nthen moves all affected tests to ReactFire-test.js.\n\n\nRevert position of types in toStringValues\n\n\nInvert flag on number input blur\n\n\nAdd clarification why double blur is necessary\n\n\nUpdate ReactFire number cases to be more explicite about blur\n\n\nMove comments to reduce diff size\n\n\nAdd comments to clarify behavior in each branch\n\n\nThere is no need to assign a different checked behavior in Fire\n\n\nUse checked reference\n\n\nFormat\n\n\nAvoid precomputing stringable values\n\n\nRevert getToStringValue comment\n\n\nRevert placement of undefined in getToStringValue\n\n\nDo not eagerly stringify value\n\n\nUnify Fire test cases with normal ones\n\n\nRevert toString change. Only assign unsynced values when not nully\n\n', 'Delete TapEventPlugin (#13630)', "Enhance dev warnings for forwardRef render function (#13627) (#13636)\n\n\nEnhance dev warnings for forwardRef render function\n\n\nFor 0 parameters: Do not warn because it may be due to usage of the\n  arguments object.\n\n\nFor 1 parameter: Warn about missing the 'ref' parameter.\n\n\nFor 2 parameters: This is the ideal. Do not warn.\n\n\nFor more than 2 parameters: Warn about undefined parameters.\n\n\nMake test cases for forwardRef warnings more realistic\n\n\nAdd period to warning sentence\n\n", 'Updating package versions for release 16.5.1', 'Update error codes for 16.5.1 release', 'Update bundle sizes for 16.5.1 release']v16.5.0 16.5.0 (September 5, 2018)
React

Add a warning if React.forwardRef render function doesn't take exactly two arguments (@bvaughn in #13168)
Improve the error message when passing an element to createElement by mistake (@DCtheTall in #13131)
Don't call profiler onRender until after mutations (@bvaughn in #13572)

React DOM

Add support for React DevTools Profiler (@bvaughn in #13058)
Add react-dom/profiling entry point alias for profiling in production (@bvaughn in #13570)
Add onAuxClick event for browsers that support it (@jquense in #11571)
Add movementX and movementY fields to mouse events (@jasonwilliams in #9018)
Add tangentialPressure and twist fields to pointer events (@motiz88 in #13374)
Minimally support iframes (nested browsing contexts) in selection event handling (@acusti in #12037)
Support passing booleans to the focusable SVG attribute (@gaearon in #13339)
Ignore <noscript> on the client when when hydrating (@Ephem in #13537)
Fix gridArea to be treated as a unitless CSS property (@mgol in #13550)
Fix incorrect data in compositionend event when typing Korean on IE11 (@crux153 in #12563)
Fix a crash when using dynamic children in the <option> tag (@Slowyn in #13261, @gaearon in #13465)
Fix the checked attribute not getting initially set on the input (@dilidili in #13114)
Fix hydration of dangerouslySetInnerHTML when __html is not a string (@gaearon in #13353) 
Fix a warning about missing controlled onChange to fire on falsy values too (@nicolevy in #12628)
Fix submit and reset buttons getting an empty label (@ellsclytn in #12780)
Fix the onSelect event not being triggered after drag and drop (@gaearon in #13422)
Fix the onClick event not working inside a portal on iOS (@aweary in #11927)
Fix a performance issue when thousands of roots are re-rendered (@gaearon in #13335)
Fix a performance regression that also caused onChange to not fire in some cases (@gaearon in #13423)
Handle errors in more edge cases gracefully (@gaearon in #13237 and @acdlite in #13269)
Don't use proxies for synthetic events in development (@gaearon in #12171)
Warn when "false" or "true" is the value of a boolean DOM prop (@motiz88 in #13372)
Warn when this.state is initialized to props (@veekas in #11658)
Don't compare style on hydration in IE due to noisy false positives (@mgol in #13534)
Include StrictMode in the component stack (@gaearon in #13240)
Don't overwrite window.event in IE (@ConradIrwin in #11696)
Improve component stack for the folder/index.js naming convention (@gaearon in #12059)
Improve a warning when using getDerivedStateFromProps without initialized state (@flxwu in #13317)
Improve a warning about invalid textarea usage (@raunofreiberg in #13361)
Treat invalid Symbol and function values more consistently (@raunofreiberg in #13362 and #13389)
Allow Electron <webview> tag without warnings (@philipp-spiess in #13301)
Don't show the uncaught error addendum if e.preventDefault() was called (@gaearon in #13384)
Warn about rendering Generators (@gaearon in #13312)
Remove irrelevant suggestion of a legacy method from a warning (@zx6658 in #13169)
Remove unstable_deferredUpdates in favor of unstable_scheduleWork from schedule (@gaearon in #13488)
Fix unstable asynchronous mode from doing unnecessary work when an update takes too long (@acdlite in #13503)

React DOM Server

Fix crash with nullish children when using dangerouslySetInnerHtml in a selected <option> (@mridgway in #13078)
Fix crash when setTimeout is missing (@dustinsoftware in #13088)

React Test Renderer and Test Utils

Fix this in a functional component for shallow renderer to be undefined (@koba04 in #13144)
Deprecate a Jest-specific ReactTestUtils.mockComponent() helper (@bvaughn in #13193)
Warn about ReactDOM.createPortal usage within the test renderer (@bvaughn in #12895)
Improve a confusing error message (@gaearon in #13351)

React ART

Add support for DevTools (@yunchancho in #13173)

Schedule (Experimental)

New package for cooperatively scheduling work in a browser environment. It's used by React internally, but its public API is not finalized yet. (@flarnie in #12624)
 ['Update changelog for 16.4.1', "Retry on error if there's lower priority pending work (#12957)\n\nRemove enableSuspense flag from PendingPriority module\n\nWe're going to use this for suspending on error, too.\n\nRetry on error if there's lower priority pending work\n\nIf an error is thrown, and there's lower priority work, it's possible\nthe lower priority work will fix the error. Retry at the lower priority.\nIf an error is thrown and there's no more work to try, handle the error\nlike we normally do (trigger the nearest error boundary).", "Remove rAF fork (#12980)\n\nRemove rAF fork\n\nwhat is the change?:\nUndid https://github.com/facebook/react/pull/12837\nwhy make this change?:\nWe originally forked rAF because we needed to pull in a particular\nversion of rAF internally at Facebook, to avoid grabbing the default\npolyfilled version.\nThe longer term solution, until we can get rid of the global polyfill\nbehavior, is to initialize 'schedule' before the polyfilling happens.\nNow that we have landed and synced\nhttps://github.com/facebook/react/pull/12900 successfully, we can\ninitialize 'schedule' before the polyfill runs.\nSo we can remove the rAF fork. Here is how it will work:\n\nLand this PR on Github.\nFlarnie will quickly run a sync getting this change into www.\nWe delete the internal forked version of\n   'requestAnimationFrameForReact'.\nWe require 'schedule' in the polyfill file itself, before the\n   polyfilling happens.\n\ntest plan:\nFlarnie will manually try the above steps locally and verify that things\nwork.\nissue:\nInternal task T29442940\n\n\nfix nits\n\n\nfix tests, fix changes from rebasing\n\n\nfix lint\n\n", 'Extract Fabric event handlers from canonical props (#13024)\nWe need a different "component tree" thingy for Fabric.\nA lot of this doesn\'t really make much sense in a persistent world but\ncurrently we can\'t dispatch events to memoizedProps on a Fiber since\nthey\'re pooled. Also, it\'s unclear what the semantics should be when we\ndispatch an event that happened when the old props were in effect but now\nwe have new props already.\nThis implementation tries to use the last committed props but also fails\nat that because we don\'t have a commit hook in the persistent mode.\nHowever, at least it doesn\'t crash when dispatching. :)', 'setJSResponder in Fabric renderer (#13031)', 'Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\n\n\nAdd isUsingKoreanIME function to check if a composition event was triggered by Korean IME\n\n\nAdd Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\n\n', "Suspended high pri work forces lower priority work to expire early  (#12965)\n\nonFatal, onComplete, onSuspend, onYield\n\nFor every call to renderRoot, one of onFatal, onComplete, onSuspend,\nand onYield is called upon exiting. We use these in lieu of returning a\ntuple. I've also chosen not to inline them into renderRoot because these\nwill eventually be lifted into the renderer.\n\nSuspended high pri work forces lower priority work to expire early\n\nIf an error is thrown, and there is lower priority pending work, we\nretry at the lower priority. The lower priority work should expire\nat the same time at which the high priority work would have expired.\nEffectively, this increases the priority of the low priority work.\nSimple example: If an error is thrown during a synchronous render, and\nthere's an async update, the async update should flush synchronously in\ncase it's able to fix the error. I've added a unit test for\nthis scenario.\nUser provided timeouts should have the same behavior, but I'll leave\nthat for a future PR.", "Synchronously restart when an error is thrown during async rendering (#13041)\nIn async mode, events are interleaved with rendering. If one of those\nevents mutates state that is later accessed during render, it can lead\nto inconsistencies/tearing.\nRestarting the render from the root is often sufficient to fix the\ninconsistency. We'll flush the restart synchronously to prevent yet\nanother mutation from happening during an interleaved event.\nWe'll only restart during an async render. Sync renders are already\nsync, so there's no benefit in restarting. (Unless a mutation happens\nduring the render phase, but we don't support that.)", 'Adding movementX and movementY to synthenticMouseEvent fixes #6723 (#9018)\n\n\nadding movementX and movementY into syntheticMouseEvent\n\n\nfixing case mistake\n\n\nAdd test fixture for movementX/Y fields\n\n', 'Remove or inline some fbjs dependencies (#13046)', 'Inline fbjs/lib/emptyFunction (#13054)', 'Inline fbjs/lib/emptyObject (#13055)\n\n\nInline fbjs/lib/emptyObject\n\n\nExplicit naming\n\n\nCompare to undefined\n\n\nAnother approach for detecting whether we can mutate\n\n\nEach renderer would have its own local LegacyRefsObject function.\nWhile in general we don\'t want instanceof, here it lets us do a simple check: did we create the refs object?\nThen we can mutate it.\nIf the check didn\'t pass, either we\'re attaching ref for the first time (so we know to use the constructor),\nor (unlikely) we\'re attaching a ref to a component owned by another renderer. In this case, to avoid "losing"\nrefs, we assign them onto the new object. Even in that case it shouldn\'t "hop" between renderers anymore.\n\n\nClearer naming\n\n\nAdd test case for strings refs across renderers\n\n\nUse a shared empty object for refs by reading it from React\n\n\nRemove string refs from ReactART test\n\n\nIt\'s not currently possible to resetModules() between several renderers\nwithout also resetting the React module. However, that leads to losing\nthe referential identity of the empty ref object, and thus subsequent\nchecks in the renderers for whether it is pooled fail (and cause assignments\nto a frozen object).\nThis has always been the case, but we used to work around it by shimming\nfbjs/lib/emptyObject in tests and preserving its referential identity.\nThis won\'t work anymore because we\'ve inlined it. And preserving referential\nidentity of React itself wouldn\'t be great because it could be confusing during\ntesting (although we might want to revisit this in the future by moving its\nstateful parts into a separate package).\nFor now, I\'m removing string ref usage from this test because only this is\nthe only place in our tests where we hit this problem, and it\'s only\nrelated to string refs, and not just ref mechanism in general.\n\nSimplify the condition\n', 'Remove fbjs dependency (#13069)\n\n\nInline fbjs/lib/invariant\n\n\nInline fbjs/lib/warning\n\n\nRemove remaining usage of fbjs in packages/*.js\n\n\nFix lint\n\n\nRemove fbjs from dependencies\n\n\nProtect against accidental fbjs imports\n\n\nFix broken test mocks\n\n\nAllow transitive deps on fbjs/ for UMD bundles\n\n\nRemove fbjs from release script\n\n', 'Remove transitive dependency on fbjs (#13075)', 'Always batch updates of like priority within the same event (#13071)\nExpiration times are computed by adding to the current time (the start\ntime). However, if two updates are scheduled within the same event, we\nshould treat their start times as simultaneous, even if the actual clock\ntime has advanced between the first and second call.\nIn other words, because expiration times determine how updates are\nbatched, we want all updates of like priority that occur within the same\nevent to receive the same expiration time. Otherwise we get tearing.\nWe keep track of two separate times: the current "renderer" time and the\ncurrent "scheduler" time. The renderer time can be updated whenever; it\nonly exists to minimize the calls performance.now.\nBut the scheduler time can only be updated if there\'s no pending work,\nor if we know for certain that we\'re not in the middle of an event.', "Do not add additional work to a batch that is already rendering (#13072)\n\nDo not add additional work to a batch that is already rendering.\n\nOtherwise, the part of the tree that hasn't rendered yet will receive\nthe latest state, but the already rendered part will show the state\nas it was before the intervening update.\n\nReduce non-helpfulness of comments\n", 'Add a link to custom renderer intro article', 'remove some redundant lines (#13077)\n\n\nremove another couple of redundant lines\n\n\na few more\n\n', 'Automatically Profile roots when DevTools is present (#13058)\n\nreact-test-renderer injects itself into DevTools if present\nFibers are always opted into ProfileMode if DevTools is present\nAdded simple test for DevTools + always profiling behavior\n', 'setting a flag, so that the first movement will have the correct value (#13082)', 'eliminate unnecessary do-while loop in renderRoot() (#13087)', 'Fixes children when using dangerouslySetInnerHtml in a selected  (#13078)\n\nFixes children when using dangerouslySetInnerHtml in a selected \n\nThis fixes an inadvertent cast of undefined children to an empty string when creating an option tag that will be selected:\n<select defaultValue="test">\n    <option value=\'test\' dangerouslySetInnerHTML={{ __html: \'&rlm; test\'}} />\n  </select>\nThis causes an invariant error because both children and dangerouslySetInnerHTML are set.\n\n\nPR fix and new ReactDOMServerIntegrationForms test\n\n\nAccount for null case\n\n\nCombine test cases into single test\n\n\nAdd tests for failure cases\n\n\nFix lint\n\n', "Fall back to 'setTimeout' when 'requestAnimationFrame' is not called (#13091)\n\nAdd fixture test for schedule running when tab is backgrounded\n\nwhat is the change?:\nJust adding a test to the fixture, where we can easily see whether\nscheduled callbacks are called after switching away from the fixture\ntab.\nwhy make this change?:\nWe are about to fix the schedule module so that it still runs even when\nthe tab is in the backround.\ntest plan:\nManually tested the fixture, verified that it works as expected and\nright now callbacks are not called when the tab is in the background.\nissue:\nInternal task T30754186\n\nFall back to 'setTimeout' when 'requestAnimationFrame' is not called\n\nwhat is the change?:\nIf 'requestAnimationFrame' is not called for 100ms we fall back to\n'setTimeout' to schedule the postmessage.\nwhy make this change?:\nWhen you start loading a page, and then switch tabs,\n'requestAnimationFrame' is throttled or not called until you come back\nto that tab. That means React's rendering, any any other scheduled work,\nare paused.\nUsers expect the page to continue loading, and rendering is part of the\npage load in a React app. So we need to continue calling callbacks.\ntest plan:\nManually tested using the new fixture test, observed that the callbacks\nwere called while switched to another tab. They were called more\nslowly, but that seems like a reasonable thing.\nissue:\nInternal task T30754186\n\nmake arguments more explicit\n", 'Fix crash during server render in react 16.4.1. (#13088)\n\nFix crash during server render.\n\nsetTimeout and clearTimeout may not be available in some server-render environments (such as ChakraCore in React.NET), and loading ReactScheduler.js will cause a crash unless the existence of the variables are checked via a typeof comparison.\nhttps://github.com/reactjs/React.NET/issues/555\nThe crash did not occur in 16.4.0, and the change appears to have been introduced here: https://github.com/facebook/react/pull/12931/files#diff-bbebc3357e1fb99ab13ad796e04b69a6L47\nI tested this by using yarn link and running it with a local copy of React.NET. I am unsure the best way to unit test this change, since assigning null to setTimeout causes an immediate crash within the Node REPL.\n\n\nFix flow errors and log warning if setTimeout / clearTimeout are\nnot defined / not a function.\n\n\nUse invariant to assert setTimeout / clearTimeout are functions\n\n\nRemove use of invariant\n\n\nExplain\n\n', 'adding check for mousemove (#13090)\n\n\nadding check for mousemove\n\n\nadding unit test for SyntheticMouseEvent\n\n\nchanging test to start with 2, removing comments\n\n', 'Update links', 'Fix README typo (#13110)', 'Add link to another article about React renderers', 'Add PROFILE bundles for www+DOM and fbsource+RN/RF (#13112)', 'Tweak links in README', 'Just remove this sentence', 'Reorder sections', 'More links', "Updated url to Code of Conduct page (#13126)\nurl is not working. Did a search on code.fb.com that returned the page I've put in the commit.", 'Fix Flow type that event target can be null (#13124)\nWe pass null sometimes when the event target has disappeared. E.g. when\ntouches fires on a deleted node.', 'Update README.md (#13085)\nFix grammatical error via addition of comma.', 'Fix this in a functional component for ShallowRenderer (#13144)', 'Prepare placeholders before timing out (#13092)\n\nPrepare placeholders before timing out\n\nWhile a tree is suspended, prepare for the timeout by pre-rendering the\nplaceholder state.\nThis simplifies the implementation a bit because every render now\nresults in a completed tree.\n\nSuspend inside an already timed out Placeholder\n\nA component should be able to suspend inside an already timed out\nplaceholder. The time at which the placeholder committed is used as \nthe start time for a subsequent suspend.\nSo, if a placeholder times out after 3 seconds, and an inner\nplaceholder has a threshold of 2 seconds, the inner placeholder will\nnot time out until 5 seconds total have elapsed.', "Suspending outside of strict trees and async trees (#13098)\nWe can support components that suspend outside of an async mode tree\nby immediately committing their placeholders.\nIn strict mode, the Timeout acts effectively like an error boundary.\nWithin a single render pass, we unwind to the nearest Timeout and\nre-render the placeholder view.\nOutside of strict mode, it's not safe to unwind and re-render the\nsiblings without committing. (Technically, this is true of error\nboundaries, too, though probably not a huge deal, since we don't support\nusing error boundaries for control flow (yet, at least)). We need to be\nclever. What we do is pretend the suspended component rendered null.*\nThere's no unwinding. The siblings commit like normal.\nThen, in the commit phase, schedule an update on the Timeout to\nsynchronously re-render the placeholder. Although this requires an extra\ncommit, it will not be observable. And because the siblings were not\nblocked from committing, they don't have to be strict mode compatible.\nAnother caveat is that if a component suspends during an async render,\nbut it's captured by a non-async Timeout, we need to revert to sync\nmode. In other words, if any non-async component renders, the entire\ntree must complete and commit without yielding.\n\nThe downside of rendering null is that the existing children will be\ndeleted. We should hide them instead. I'll work on this in a follow-up.\n", "React.Timeout -> React.Placeholder (#13105)\nChanged the API to match what we've been using in our latest discussions.\nOur tentative plans are for  to automatically hide the timed-out\nchildren, instead of removing them, so their state is not lost. This part is\nnot yet implemented. We'll likely have a lower level API that does not include\nthe hiding behavior. This is also not yet implemented.", 'Drop handling for ms and O prefixes for CSS transition and animation events. (#13133)\nInternet Explorer never needed the prefix and Opera 11.5 is no longer supported by React.', 'Fix - issue #12765 / the checked attribute is not initially set on the input (#13114)', 'Reset profiler timer correctly after errors (#13123)\n\n\nReset ReactProfilerTimer\'s DEV-only Fiber stack after an error\n\n\nAdded ReactNoop functionality to error during "complete" phase\n\n\nAdded failing profiler stack unwinding test\n\n\nPotential fix for unwinding time bug\n\n\nRenamed test\n\n\nDon\'t record time until complete phase succeeds. Simplifies unwinding.\n\n\nExpanded ReactProfilerDevToolsIntegration-test coverage a bit\n\n\nAdded unstable_flushWithoutCommitting method to noop renderer\n\n\nAdded failing multi-root/batch test to ReactProfiler-test\n\n\nBeefed up tests a bit and added some TODOs\n\n\nProfiler timer differentiates between batched commits and in-progress async work\n\n\nThis was a two-part change:\n1) Don\'t count time spent working on a batched commit against yielded async work.\n2) Don\'t assert an empty stack after processing a batched commit (because there may be yielded async work)\nThis is kind of a hacky solution, and may have problems that I haven\'t thought of yet. I need to commit this so I can mentally clock out for a bit without worrying about it. I will think about it more when I\'m back from PTO. In the meanwhile, input is welcome.\n\n\nRemoved TODO\n\n\nReplaced FiberRoot map with boolean\n\n\nRemoved unnecessary whitespace edit\n\n', 'Run server rendering test on bundles (#13153)', "Fix ReferenceError when requestAnimationFrame isn't defined (#13152)\n\n\nMake the test fail\n\n\nFix rAF detection to avoid a ReferenceError\n\n", 'Renamed selfBaseTime/treeBaseTime Fiber attributes to selfBaseDuration/treeBaseDuration (#13156)\nThis is an unobservable change to all but the (under development) DevTools Profiler plugin. It is being done so that the plugin can safely feature detect a version of React that supports it. The profiler API has existed since the 16.4.0 release, but it did not support the DevTools plugin prior to PR #13058.\nSide note: I am not a big fan of the term "base duration". Both it and "actual duration" are kind of awkward and vague. If anyone has suggestions for better names– this is the best time to bikeshed about them.', 'Run react-dom SSR import test in jsdom-less environment (#13157)', 'create a new FeatureFlags file for test renderer on www (#13159)', 'Fix nested update bug (#13160)\nA recent change to the scheduler caused a regression when scheduling\nmany updates within a single batch. Added a test case that would\nhave caught this.', 'Decrease nested update limit from 1000 to 50 (#13163)\nAn infinite update loop can occur when an update is scheduled inside a\nlifecycle method, which causes a re-render, which schedules another\nupdate, and so on. Before the Fiber rewrite, this scenario resulted in a\nstack overflow.\nBecause Fiber does not use the JavaScript stack, we maintain our own\ncounter to track the number of nested, synchronous updates. We throw an\nerror if the limit is exceeded.\nThe nested update limit is currently 1000. I chose this number\narbitrarily, certain that there was no valid reason for a component to\nschedule so many synchronous re-renders.\nI think we can go much lower. This commit decreases the limit to 50. I\nbelieve this is still comfortably above the reasonable number of\nsynchronous re-renders a component may perform.\nThis will make it easier for developers to debug infinite update bugs\nwhen they occur.', 'Configure react-test-renderer as a secondary (#13164)', 'Refactor stack handling (no functional changes) (#13165)\n\nRefactor ReactDebugCurrentFiber to use named exports\n\nThis makes the difference between it and ReactFiberCurrentFrame a bit clearer.\nReactDebugCurrentFiber is Fiber\'s own implementation.\nReactFiberCurrentFrame is the thing that holds a reference to the current implementation and delegates to it.\n\nUnify ReactFiberComponentTreeHook and ReactDebugCurrentFiber\n\nConceptually they\'re very related.\nReactFiberComponentTreeHook contains implementation details of reading Fiber\'s stack (both in DEV and PROD).\nReactDebugCurrentFiber contained a reference to the current fiber, and used the above utility.\nIt was confusing when to use which one. Colocating them makes it clearer what you could do with each method.\nIn the future, the plan is to stop using these methods explicitly in most places, and instead delegate to a warning system that includes stacks automatically. This change makes future refactorings simpler by colocating related logic.\n\nRename methods to better reflect their meanings\n\nClarify which are DEV or PROD-only.\nClarify which can return null.\nI believe the "work in progress only" was a mistake. I introduced it because I wasn\'t sure what guarantees we have around .return. But we know for sure that following a .return chain gives us an accurate stack even if we get into WIP trees because we don\'t have reparenting. So it\'s fine to relax that naming.\n\nRename ReactDebugCurrentFiber -> ReactCurrentFiber\n\nIt\'s not completely DEV-only anymore.\nIndividual methods already specify whether they work in DEV or PROD in their names.', "Add DEV warning if forwardRef function doesn't use the ref param (#13168)\n\nAdd DEV warning if forwardRef function doesn't use the ref param\nFixed a forwardRef arity warning in another test\n", 'Fix concatenation of null to a warning message (#13166)', 'Add a test for SSR stack traces (#13180)', 'Test renderer flushAll method verifies an array of expected yields (#13174)', 'Link create-subscription doc to GH issue with de-opt explanation (#13187)', 'update devEngines to include nodejs 10.x (#13190)', 'Deprecate ReactTestUtils.mockComponent() (#13193)\nDeprecate ReactTestUtils.mockComponent()', 'Add support for re-entrant SSR stacks (#13181)\n\n\nAdd failing tests\n\n\nFix re-entrancy in ReactDOMServer\n\n', 'Deprecate test utils mock component follow up (#13194)\n\n\nDe-duplicate the mockComponent deprecation warning\n\n\nAdded fb.me link to mockComponent\n\n', 'Correct type of ref in forwardRef render() (#13100)\nReact$ElementRef<T> is the type of the ref instance for a component of type T, whereas React$Ref<T> is the type of the ref prop for a component of type T, which seems to be the intended type here.', 'docs: update comments (#13043)', "Remove event simulation of onChange events (#13176)\n\nRemove event simulation of onChange events\n\nIt’s time to get rid of even more ReactTestUtils.Simulates. In this PR\nwe remove the event simulation from all onChange tests. To do this, we\nhave to get a setter to the untracked value/checked props.\nAll remaining ReactTestUtils.Simulate calls are either testing\nReactTestUtils or assert that they do/don't throw.\n\nUse input instead of change event for all but checkbox, radio, and select\n", "Remove ad-hoc forks of getComponentName() and fix it (#13197)\n\n\nFix getComponentName() for types with nested $$typeof\n\n\nTemporarily remove Profiler ID from messages\n\n\nChange getComponentName() signature to take just type\n\n\nIt doesn't actually need the whole Fiber.\n\n\nRemove getComponentName() forks in isomorphic and SSR\n\n\nRemove unnecessary .type access where we already have a type\n\n\nRemove unused type\n\n", 'Use ReactDebugCurrentFrame.getStackAddendum() in element validator (#13198)\nInstead of wrapping ReactDebugCurrentFrame.getStackAddendum() call into a custom wrapper inside ReactElementValidator, "teach" the main ReactDebugCurrentFrame.getStackAddendum() to take currently validating element into account.', 'Added SSR/hydration tests for modes, forwardRef, and Profiler (#13195)\n\nAdded more SSR tests for modes, profiler, and forward-ref\n', 'Reorganize how shared internals are accessed (#13201)\n\n\nReorganize how shared internals are accessed\n\n\nUpdate forks.js\n\n', "Suspending inside a constructor outside of strict mode (#13200)\n\nSuspending inside a constructor outside of strict mode\n\nOutside of strict mode, suspended components commit in an incomplete\nstate, then are synchronously deleted in a subsequent commit. If a\ncomponent suspends inside the constructor, it mounts without\nan instance.\nThis breaks at least one invariant: during deletion, we assume that\nevery mounted component has an instance, and check the instance for\nthe existence of componentWillUnmount.\nRather than add a redundant check to the deletion of every class\ncomponent, components that suspend inside their constructor and outside\nof strict mode are turned into empty functional components before they\nare mounted. This is a bit weird, but it's an edge case, and the empty\ncomponent will be synchronously unmounted regardless.\n\nDo not fire lifecycles of a suspended component\n\nIn non-strict mode, suspended components commit, but their lifecycles\nshould not fire.", 'Enforce presence or absence of component stack in tests (#13215)\n\n\nEnforce presence or absence of stack in tests\n\n\nRename expectNoStack to withoutStack\n\n\nFix lint\n\n\nAdd some tests for toWarnDev()\n\n', 'Fix matcher tests to be DEV-only', 'Change warning() to automatically inject the stack, and add warningWithoutStack() as opt-out (#13161)\n\n\nUse %s in the console calls\n\n\nAdd shared/warningWithStack\n\n\nConvert some warning callsites to warningWithStack\n\n\nUse warningInStack in shared utilities and remove unnecessary checks\n\n\nReplace more warning() calls with warningWithStack()\n\n\nFixes after rebase + use warningWithStack in react\n\n\nMake warning have stack by default; warningWithoutStack opts out\n\n\nForbid builds that may not use internals\n\n\nRevert newly added stacks\n\n\nI changed my mind and want to keep this PR without functional changes. So we won\'t "fix" any warnings that are already missing stacks. We\'ll do it in follow-ups instead.\n\n\nFix silly find/replace mistake\n\n\nReorder imports\n\n\nAdd protection against warning argument count mismatches\n\n\nAddress review\n\n', "Protect against passing component stack twice\nThis is a leftover from #13161 that I forgot to include.\nIt ensures we don't accidentally write code in the old way and end up passing the stack twice.", 'Set current fiber during before-mutation traversal (#13219)', 'Fix a portal unmounting crash for renderers with distinct Instance and Container (#13220)\n\nFix Portal unmount\n\nBefore that change, currentParent is not set as a container even if it should so it break on react-native and probably other custom renderers\n\n\nAssert that *ToContainer() methods receive containers\n\n\nAdd regression tests\n\n\nAdd comments\n\n', 'Add component stacks to some warnings (#13218)', 'Remove unnecessary typeof checks (#13196)\nThis aligns with #10351 which removed extra check on injectInternals.', 'Update prettier (#13205)\n\n\nUpdate Prettier to 1.13.7\n\n\nApply Prettier changes\n\n\nPin prettier version\n\n\nEOL\n\n', 'fixed a typo in commentout in ReactFiberUnwindWork.js (#13172)', 'Fix “no onChange handler” warning to fire on falsy values ("", 0, false) too (#12628)\n\n\nthrow warning for falsey value prop\n\n\nadd nop onChange handler to tests for value prop\n\n\nprettier\n\n\ncheck for falsey checked\n\n\nfix tests for checked prop\n\n\nnew tests for value prop\n\n\ntest formatting\n\n\nforgot 0 (:\n\n\ntest for falsey checked prop\n\n\nadd null check\n\n\nUpdate ReactDOMInput-test.js\n\n\nrevert unneeded change\n\n\nprettier\n\n\nUpdate DOMPropertyOperations-test.js\n\n\nUpdate ReactDOMInput-test.js\n\n\nUpdate ReactDOMSelect-test.js\n\n\nFixes and tests\n\n\nRemove unnecessary changes\n\n', "Remove the use of proxies for synthetic events in DEV (#13225)\n\n\nRevert #5947 and disable the test\n\n\nFix isDefaultPrevented and isPropagationStopped to not get nulled\n\n\nThis was a bug introduced by #5947. It's very confusing that they become nulled while stopPropagation/preventDefault don't.\n\n\nAdd a comment\n\n\nRun Prettier\n\n\nFix grammar\n\n", 'Fail tests if toWarnDev() does not wrap warnings in array (#13227)\n\n\nFail tests if toWarn() does not wrap warnings in array\n\n\nFix newly failing tests\n\n\nAnother fix\n\n', 'Removed unused state argument in unsubscribe method of  (#13233)', "Move unstable_yield to main export (#13232)\nThe yield method isn't tied to any specific root. Putting this\non the main export enables test components that are not within scope\nto yield even if they don't have access to the currently rendering\nroot instance. This follows the pattern established by ReactNoop.\nAdded a clearYields method, too, for reading values that were yielded\nout of band. This is also based on ReactNoop.", 'Add more flexibility in testing errors in begin/complete phases (#13235)\n\n\nAdd more flexibility in testing errors in begin/complete phases\n\n\nUpdate too\n\n', 'Fix unwinding starting with a wrong Fiber on error in the complete phase (#13237)\n\nAdd a repro case for profiler unwinding\n\nThis currently fails the tests due to an unexpected warning.\n\n\nAdd a regression test for context stack\n\n\nSimplify the first test case\n\n\nUpdate nextUnitOfWork inside completeUnitOfWork()\n\n\nThe bug was caused by a structure like this:\n</Provider>\n\n\n\nWe forgot to update nextUnitOfWork so it was still pointing at Provider when errorInCompletePhase threw. As a result, we would try to unwind from Provider (rather than from errorInCompletePhase), and thus pop the Provider twice.', 'Format messages in unexpected console.error() test failure', 'Fix warning extraction script', "[react-test-renderer] Jest matchers for async tests (#13236)\nAdds custom Jest matchers that help with writing async tests:\n\ntoFlushThrough\ntoFlushAll\ntoFlushAndThrow\ntoClearYields\n\nEach one accepts an array of expected yielded values, to prevent\nfalse negatives.\nEventually I imagine we'll want to publish this on npm.", "Include Modes in the component stack (#13240)\n\nAdd a test that StrictMode shows up in the component stack\n\nThe SSR test passes. The client one doesn't.\n\n\nInclude Modes in component stack\n\n\nUpdate other tests to include modes\n\n", 'Update www warning shim (#13244)', "[Experimental] API for reading context from within any render phase function (#13139)\n\nStore list of contexts on the fiber\n\nCurrently, context can only be read by a special type of component,\nContextConsumer. We want to add support to all fibers, including\nclasses and functional components.\nEach fiber may read from one or more contexts. To enable quick, mono-\nmorphic access of this list, we'll store them on a fiber property.\n\nContext.unstable_read\n\nunstable_read can be called anywhere within the render phase. That\nincludes the render method, getDerivedStateFromProps, constructors,\nfunctional components, and context consumer render props.\nIf it's called outside the render phase, an error is thrown.\n\nRemove vestigial context cursor\n\nWasn't being used.\n\nSplit fiber.expirationTime into two separate fields\n\nCurrently, the expirationTime field represents the pending work of\nboth the fiber itself — including new props, state, and context — and of\nany updates in that fiber's subtree.\nThis commit adds a second field called childExpirationTime. Now\nexpirationTime only represents the pending work of the fiber itself.\nThe subtree's pending work is represented by childExpirationTime.\nThe biggest advantage is it requires fewer checks to bailout on already\nfinished work. For most types of work, if the expirationTime does not\nmatch the render expiration time, we can bailout immediately without\nany further checks. This won't work for fibers that have\nshouldComponentUpdate semantics (class components), for which we still\nneed to check for props and state changes explicitly.\n\nPerformance nits\n\nOptimize readContext for most common case", 'Optimize readContext for Subsequent Reads of All Bits (#13248)\nThis is likely the common case because individual component authors\nwill casually call read on common contexts like the cache, or cache\nprovider.\nWhere as libraries like Relay only call read once per fragment and pass\nall observed bits at once.', 'Add regression test for Placeholder fallbacks with lifecycle methods (#13254)\nFound by @rhagigi\nCo-authored-by: Royi Hagigi rhagigi@gmail.com\nCo-authored-by: Andrew Clark acdlite@me.com', 'Add @flow directive to findDOMNode shim (#13265)\n\nAdd @flow directive to findDOMNode shim\n', "Remove 'warning' module from the JS scheduler (#13264)\n\nRemove 'warning' module from the JS scheduler\n\nwhat is the change?:\nSee title\nwhy make this change?:\nInternally the 'warning' module has some dependencies which we want to\navoid pulling in during the very early stages of initial pageload. It is\ncreating a cyclical dependency.\nAnd we wanted to remove this dependency anyway, because this module\nshould be kept small and decoupled.\ntest plan:\n- Tested the exact same change internally in Facebook.com\n- Ran unit tests\n- Tried out the fixture\nissue:\nInternal task T31831021\n\n\ncheck for console existence before calling console.error\n\n\nMove DEV check into separate block\n\n", 'Handle errors thrown in gDSFP of a module-style context provider (#13269)\nContext should be pushed before calling any user code, so if it errors\nthe stack unwinds correctly.', 'Add an invariant to createRoot() to validate containers (#13279)', 'Remove unnecessary branching from updateContextProvider (#13282)\nThis code had gotten unnecessarily complex after some recent changes.\nCleaned it up a bit.', "Fix a crash when using dynamic children in  tag (#13261)\n\nMake option children a text content by default\n\nfix #11911\n\n\nApply requested changes\n\n\nRemove meaningless comments\n\n\nrevert scripts/rollup/results.json\n\n\nremove empty row\n\n\nUpdate comment\n\n\nAdd a simple unit-test\n\n\n[WIP: no flow] Pass through hostContext\n\n\n[WIP: no flow] Give better description for test\n\n\nFixes\n\n\nDon't pass hostContext through\n\n\nIt ended up being more complicated than I thought.\n\nAlso warn on hydration\n", 'Allow Electrons  tag (#13301)\nFixes #13299\nAdds Electrons  tag to the attribute whitelist.', 'Refactor validateDOMNesting a bit (#13300)', 'More helpful message when passing an element to createElement() (#13131)\n\n\n[#13130] Add a more helpful message when passing an element to createElement()\n\n\nbetter conditional flow\n\n\nupdate after review\n\n\nmove last condition inside last else clause\n\n\nAdded test case\n\n\ncompare 25132typeof to REACT_ELEMENT_TYPE\n\n\nruns prettier\n\n\nremove unrelated changes\n\n\nTweak the message\n\n', 'Sanitize unknown attribute names for SSR (#13302)', 'Fix SSR crash on a hasOwnProperty attribute (#13303)', 'Add 16.4.2 and other releases to changelog', 'Fix incorrect changelog entry for 16.3.3', '[WIP] Add suspense fixtures for IO and CPU demo (#13295)\nAdd suspense fixtures for IO and CPU demo', 'Move async fixtures (#13304)', 'Fix time slicing fixture (#13305)\n\n\nFix time slicing fixture\n\n\nRemove unused option\n\n', 'add nodejs 10 to windows test (#13241)\n\n\nadd nodejs 10 to windows test\n\n\nremove node 8 for better build speed\n\n', 'Tweak fixture instructions', 'Tweak other fixture instructions', 'Remove irrelevant suggestion of a legacy method from a warning (#13169)\n\n\nEdit warn message what use deprecated lifecycle method\n\n\ndelete setState warn message about prescriptive and deprecated life cycle\n\n\nfix lint\n\n\nPrettier\n\n\nFormatting\n\n', 'Fix Prettier', "Remove extraneous condition\nIt's covered by a check below.", 'Add a regression test for #11602', 'Inject react-art renderer into react-devtools (#13173)\n\nInject react-art renderer into react-devtools\n\nThis commit makes react-art renderer to be injected to react-devtools,\nso that component tree of the renderer is presented on debug panel of browser.\n\nUpdate ReactART.js\n', 'Replace console.error() with a throw in setTimeout() as last resort exception logging (#13310)\n\n\nAdd a regression test for #13188\n\n\nReplace console.error() with a throw in setTimeout() as last resort\n\n\nFix lint and comment\n\n\nFix tests to check we throw after all\n\n\nFix build tests\n\n', 'Warn about rendering Generators (#13312)\n\n\nWarn about rendering Generators\n\n\nFix Flow\n\n\nAdd an explicit test for iterable\n\n\nMoar test coverage\n\n', "Minimally support iframes (nested browsing contexts) in selection event handling (#12037)\n\n\nPrefer node’s window and document over globals\n\n\nSupport active elements in nested browsing contexts\n\n\nAvoid invoking defaultView getter unnecessarily\n\n\nPrefer node’s window and document over globals\n\n\nSupport active elements in nested browsing contexts\n\n\nAvoid invoking defaultView getter unnecessarily\n\n\nImplement selection event fixtures\n\n\nPrefer node’s window and document over globals\n\n\nAvoid invoking defaultView getter unnecessarily\n\n\nFix react-scripts to work with alphas after 16.0.0\n\n\nThe current logic just checks if the version is an alpha with a major version of 16 to account for weirdness with the 16 RC releases, but now we have alphas for newer minor releases that don't have weirdness\n\n\nRun prettier on new selection events fixtures\n\n\nAdd fixture for onSelect in iframes, remove DraftJS fixture\n\n\nThe DraftJs fixture wasn't really working in all supported browsers anyways, so just drop it and try to cover our bases without using it directly\n\n\nPurge remnants of draft.js from fixtures\n\n\nUse prop-types import instead of window global\n\n\nMake fixtures’ Iframe component Firefox-compatible\n\n\nFix switch case for SelectionEventsFixture\n\n\nRemove draft.js / immutable.js dependencies\n\n\nCache owner doc as var to avoid reading it twice\n\n\nAdd documentation for getActiveElementDeep to explain try/catch\n\n\nAdd documentation for getActiveElementDeep to explain try/catch\n\n\nEnsure getActiveElement always returns DOM element\n\n\nTighten up isNode and isTextNode\n\n\nRemove ie8 compatibility\n\n\nSpecify cross-origin example in getActiveElementDeep\n\n\nRevert back to returning null if document is not defined\n\n", 'Update fixture instructions', 'add flowtype to function signature (#13285)', 'Fix ambiguity in doc comment for isValidElement (#12826)\nisValidElement(object) checks if object is a ReactElement.\n@return {boolean} True ifobjectis a valid component. leading to confusion which was described in several blog posts:\n- https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\n- https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62', "Suspense fixture placeholder styling improvement (#13314)\nVertically and horizontally center 'large' placeholder spinner in suspense demo\nas per @gaearon's tweet:\nhttps://twitter.com/dan_abramov/status/1025190261784289280", 'Fix lint', 'Enhance get derived state from props state warning - #12670 (#13317)\n\n\nEnhance warning message for missing state with getDerivedStateFromProps\n\n\nAdapt tests\n\n\nstyle fix\n\n\nTweak da message\n\n\nFix test\n\n', 'Make sure that select has multiple attribute set to appropriate state before appending options (#13270)\n\n\nMake sure that select has multiple attribute set to appropriate state before appending options\nfixes #13222\n\n\nAdd dom test fixture to test long multiple select scrolling to the first selected option\nfixes #13222\n\n\ntypo fix\n\n\nupdate comment\nremove redundant conversion to bool type\n\n\nchange a way of assigning property to domElement\n\n\nRemove unused ref on select fixture form\n\n', 'Add a regression test for #12200 (#12242)\n\n\nfix selectedIndex in postMountWrapper in ReactDOMFiberSelected\n\n\ncomment in ReactDomFiberSelect in postMountWrapper for selectedIndex fix\n\n\ntest for selectedIndex fix\n\n\nset boolean value for multiple\n\n\nRevert the fix which has been fixed on master\n\n', 'Add support for auxclick event (#11571)\n\n\nAdd support for auxclick event\n\n\nAdd to simpleEventPLugin\n\n\nAdd auxclick as interactive event type in SimpleEventPlugin\n\n\nUpdate ReactTestUtils fixture to include auxClick\n\n', 'Suspense/Spinner: class -> className (#13319)', 'Suspense/UserPage: id -> name (#13320)\n\n\nSuspense/UserPage: id -> name\n\n\nSuspense/UserPage: review -> repo\n\n', 'refactor: remove promise on checkModule (#13318)\n\nrefactor: remove promise on checkModule\nrefactor: use forEach instead of map for checkModule\n', 'Fix Prettier "No parser" warning while building (#13323)', 'Fix undefined variable on suspense fixture (#13325)', "Don't search beyond Sync roots for highest priority work (#13335)", "Remove unused dependencies from workspace root. (#13340)\nRemove 'async', 'bundle-collapser', 'del', 'derequire', 'escape-string-regexp', 'git-branch', 'gzip-js',\n'merge-stream', 'platform', 'run-sequence' & 'yargs'.\nMost of them were used in the old Grunt build system.\nThis ends up removing 32 packages, according to yarn.lock.", 'Update attribute table (#13343)\n\n\nUpdate table for React 16.3\n\n\nUpdate table for master\n\n\nRe-run the table with recent Chrome\n\n', 'Treat focusable as enumerated boolean SVG attribute (#13339)\n\n\nTreat focusable as enumerated boolean attribute\n\n\nUpdate attribute table\n\n', 'Bump "fbjs-scripts" to remove Babel 5 from dependencies (#13344)', 'Profiler actualDuration bugfix (#13313)\n\nSimplified profiler actualDuration timing\n\nWhile testing the new DevTools profiler, I noticed that sometimes– in larger, more complicated applications– the actualDuration value was incorrect (either too large, or sometimes negative). I was not able to reproduce this in a smaller application or test (which sucks) but I assume it has something to do with the way I was tracking render times across priorities/roots. So this PR replaces the previous approach with a simpler one.\n\n\nChanged bubbling logic after chatting out of band with Andrew\n\n\nReplaced PROFILE with feature-flag conditionals in test\n\n\nUpdated test comment\n\n', 'Improve display of filenames in component stack (#12059)\n\n\nImprove display of filenames in component stack\n\n\nAdd explanatory comment\n\n\ntests: add tests for component stack trace displaying\n\n\nTweak test\n\n\nRewrite test and revert implementation\n\n\nExtract a variable\n\n\nRewrite implementation\n\n', 'Make nicer stacks DEV-only\nNo need to spend production bytes on this.', 'Improve scry() error message for bad first argument (#13351)', 'Fix hydration of non-string dangerousSetInnerHTML.__html (#13353)\n\n\nConsistently handle non-string dangerousSetInnerHTML.__html in SSR\n\n\nAdd another test\n\n', 'Fix typos detected by github.com/client9/misspell (#13349)', 'fix typo on inline comment (#13364)', 'Rely on bubbling for submit and reset events (#13358)\n\nBring back onSubmit bubble test\n\nI found a test that was written more than 5 years ago and probably never\nrun until now. The behavior still works, although the API changed quite\na bit over the years.\nSeems like this was part of the initial public release already:\nhttps://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4#diff-1bf5126edab96f3b7fea034cd3b0c742R31\n\n\nRely on bubbling for submit and reset events\n\n\nUpdate dom fixture lockfile\n\n\nRevet rollup results\n\n\nWhoopsie.', "Support tangentialPressure and twist fields of pointer events (#13374)\nWhile working on https://github.com/facebook/flow/pull/6728 I noticed React's recently-added SyntheticPointerEvent was missing the tangentialPressure and twist fields. I couldn't find any reason for their omission in https://github.com/facebook/react/pull/12507 (nor in the spec) so I assume they were meant to be included, like the rest of PointerEvent. This PR adds these two fields to SyntheticPointerEvent.", 'Improve soundness of ReactDOMFiberInput typings (#13367)\n\nImprove soundness of ReactDOMFiberInput typings\n\nThis is an attempt in improving the soundness for the safe value cast\nthat was added in #11741. We want this to avoid situations like this\none\nwhere we need to remember why we have certain type casts. Additionally\nwe can be sure that we only cast safe values to string.\nThe problem was getSafeValue(). It used the (deprecated) * type to\ninfer the type which resulted in a passing-through of the implicit any\nof the props Object. So getSafeValue() was effectively returning\nany.\nOnce I fixed this, I found out that Flow does not allow concatenating\nall possible types to a string (e.g "" + false fails in Flow). To\nfix this as well, I\'ve opted into making the SafeValue type opaque and\nadded a function that can be used to get the string value. This is sound\nbecause we know that SafeValue is already checked.\nI\'ve verified that the interim function is inlined by the compiler and\nalso looked at a diff of the compiled react-dom bundles to see if I\'ve\nregressed anything. Seems like we\'re good.\n\nFix typo\n', 'Fix fixture title (#13377)\nabout time I made a significant commit to the react project directly', 'Rename SafeValue to ToStringValue (#13376)\nFollowing up on the changes I made in #13367, @gaearon suggest that\n"safe" could be read as necessary for security. To avoid misleading a\nreader, I\'m changing the name.\nA few names where discussed in the previous PR. I think ToStringValue\nmakes sense since the value itself is not a string yet but an opaque\ntype that can be cast to a string. For the actual string concatenation,\nI\'ve used toString now to avoid confusion: toStringValueToString\nis super weird and it\'s namespaced anyhow.\nDefinitely open for suggestions here. :) I\'ll wait until we wrap up\n13362 and take care of rebase afterwards.', 'Fixtures nits (#13375)\n\n\nfix: PropTypes failing in textarea fixtures\n\n\nfix: Iframe title attribute in fixtures\n\n\nMake description a optional prop in FixtureSet\n\n', 'Provide component reference in ReactDOMFiberTextarea warnings (#13361)\n\n\nProvide component reference if possible in ReactDOMFiberTextarea.js warning\n\n\nNits\n\n', 'Allow the user to opt out of seeing "The above error..." addendum (#13384)\n\nRemove e.suppressReactErrorLogging check before last resort throw\n\nIt\'s unnecessary here. It was here because this method called console.error().\nBut we now rethrow with a clean stack, and that\'s worth doing regardless of whether the logging is silenced.\n\n\nDon\'t print error addendum if \'error\' event got preventDefault()\n\n\nAdd fixtures\n\n\nUse an expando property instead of a WeakSet\n\n\nMake it a bit less fragile\n\n\nClarify comments\n\n', 'Ensure arguments are coerced to strings in warnings (#13385)\n\nManually join extra attributes in warning\n\nThis prevents a bug where Chrome reports Array(n) where n is the\nsize of the array.\n\n\nPrettier\n\n\nStringify all %s replaced symbols in warning\n\n\nEliminate extra string coercion\n\n\nPass args through with spread, convert all arguments to strings\n\n\nRename strings to stringArgs\n\n', 'Fix passing symbols and functions to textarea (#13362)\n\n\nrefactor: move getSafeValue to separate file\n\n\nfix(?): ReactDOMFiberTextarea sanitization for symbols and functions\n\n\ntests: add TODOs for warnings\n\n\nfix: restore accidentally removed test\n\n\nfix: remove redundant logic for initialValue\n\n\nrefactor: integrate SafeValue typings into textarea\n\n\nfix: restore stringified newValue for equality check\n\n\nfix: remove getSafeValue from hostProps\n\n\nrefactor: SafeValue -> ToStringValue\n\n\nrefactor: update TODO comment in test file\n\n\nrefactor: no need to convert children to ToStringValue\n\n', 'DOM fixture updates (#13368)\n\nAdd home component. Async load fixtures.\n\nThis commit adds a homepage to the DOM fixtures that includes browser\ntesting information and asynchronously loads fixtures.\nThis should make it easier to find DOM testing information and keep\nthe payload size in check as we add more components to the fixtures.\n\n\nUpdate browser support fields\n\n\nTweak select width\n\n\nFix typo\n\n\nReport actual error when fixture fails to load\n\n\nUpdate browser information\n\n\nUpdate browserstack subscription info\n\n\nEnglish\n\n\nSwitch let for const in fixture loader\n\n', 'Ignore symbols and functions in select tag (#13389)\n\n\nwip: ignore symbols and functions in select tag\n\n\nfix: Use ToStringValue as a maybe type\n\n\nrefactor: remove unnecessary test\n\n\nrefactor: remove implicit return from tests\n\n', "Remove 'flow-coverage-report' script. (#13395)\nflow-coverage-report stopped working after Flow was set to run for each renderer separately (#12846). As discussed in #13393, this is hard to fix without adding complexity to .flowconfig's generation.", 'Warn when "false" or "true" is the value of a boolean DOM prop (#13372)\n\n\nWarn when the string "false" is the value of a boolean DOM prop\n\n\nOnly warn on exact case match for "false" in DOM boolean props\n\n\nWarn on string "true" as well as "false" in DOM boolean props\n\n\nClarify warnings on "true" / "false" values in DOM boolean props\n\n', "Fix typo in a comment (#13373)\n\n\nTypo\n\n\nChanged to use rest parameter\n\n\n'Bugfix'\n\n\nTypo fix\n\n", 'Ability to access window.event in development (#11687) (#11696)\nBefore this change in development window.event was overridden\nin invokeGuardedCallback.\nAfter this change window.event is preserved in the browsers that\nsupport it.', "Don't suppress jsdom error reporting in our tests (#13401)\n\n\nDon't suppress jsdom error reporting\n\n\nAddress review\n\n", 'Improve bad ref invariant (#13408)', 'Refactor ReactErrorUtils (#13406)\n\n\nRefactor ReactErrorUtils\n\n\nRemove unnecessary assignments\n\n', "Don't stop context traversal at matching consumers (#13391)\n\nDon't stop context traversal at matching consumers\n\nOriginally, the idea was to time slice the traversal. This worked when\nthere was only a single context type per consumer.\nNow that each fiber may have a list of context dependencies, including\nduplicate entries, that optimization no longer makes sense – we could\nend up scanning the same subtree multiple times.\n\nRemove changedBits from context object and stack\n\nDon't need it anymore, yay", 'De-duplicate commitUpdateQueue effect commit (#13403)', 'Provide a better error message (#12421)', 'Avoid setting empty value on reset & submit inputs (#12780)\n\n\nAvoid setting empty value on reset & submit inputs\n\n\nUpdate ReactDOMFiberInput.js\n\n\nMore test coverage\n\n', 'remove unused state initialValue from ReactDOMFiberSelect (#13412)', 'fix: do not reconcile children that are iterable functions (#13416)\n\n\nfix: do not reconcile children that are iterable functions\n\n\nfix: remove fit\n\n\nRefactor comparison to exclude anything that isnt an object\n\n\nRemove redundant undefined check\n\n', "Accept promise as element type (#13397)\n\nAccept promise as element type\n\nOn the initial render, the element will suspend as if a promise were\nthrown from inside the body of the unresolved component. Siblings should\ncontinue rendering and if the parent is a Placeholder, the promise\nshould be captured by that Placeholder.\nWhen the promise resolves, rendering resumes. If the resolved value\nhas a default property, it is assumed to be the default export of\nan ES module, and we use that as the component type. If it does not have\na default property, we use the resolved value itself.\nThe resolved value is stored as an expando on the promise/thenable.\n\nUse special types of work for lazy components\n\nBecause reconciliation is a hot path, this adds ClassComponentLazy,\nFunctionalComponentLazy, and ForwardRefLazy as special types of work.\nThe other types are not supported, but wouldn't be placed into a\nseparate module regardless.\n\n\nResolve defaultProps for lazy types\n\n\nRemove some calls to isContextProvider\n\n\nisContextProvider checks the fiber tag, but it's typically called after\nwe've already refined the type of work. We should get rid of it. I\nremoved some of them in the previous commit, and deleted a few more\nin this one. I left a few behind because the remaining ones would\nrequire additional refactoring that feels outside the scope of this PR.\n\n\nRemove getLazyComponentTypeIfResolved\n\n\nReturn baseProps instead of null\n\n\nThe caller compares the result to baseProps to see if anything changed.\n\n\nAvoid redundant checks by inlining getFiberTagFromObjectType\n\n\nMove tag resolution to ReactFiber module\n\n\nPass next props to update* functions\n\n\nWe should do this with all types of work in the future.\n\nRefine component type before pushing/popping context\n\nRemoves unnecessary checks.\n\n\nReplace all occurrences of _reactResult with helper\n\n\nMove shared thenable logic to shared package\n\n\nCheck type of wrapper object before resolving to default export\n\n\nReturn resolved tag instead of reassigning\n\n", 'Fix wrong Flow return type', "React.lazy (#13398)\nLazily starts loading a component the first time it's rendered. The\nimplementation is fairly simple and could be left to userspace, but since\nthis is an important use case, there's value in standardization.", "Don't pass instanceHandle to clones (#13125)\nWe will instead just reuse the first one.", 'Remove unused ReactCall & ReactReturn types (#13419)\nThese are no longer used after the removal of the react-call-return package.', 'Update attribute table for master (#13421)', 'Resume onSelect tracking after dragend (#13422)', 'interaction-tracking package (#13234)\nAdd new interaction-tracking package/bundle', "Don't diff memoized host components in completion phase (#13423)\n\n\nAdd a regression test for 12643#issuecomment-413727104\n\n\nDon't diff memoized host components\n\n\nAdd regression tests for noop renderer\n\n\nNo early return\n\n\nStrengthen the test for host siblings\n\n\nFlow types\n\n", 'Refactor away some namespace imports (#13427)\n\n\nReplace some namespace imports\n\n\nSimplify the controlled component injection\n\n\nSimplify the batching injection\n\n\nSimplify the component tree injection\n\n', 'Add interaction-tracking/subscriptions (#13426)\n\n\nRemoved enableInteractionTrackingObserver as a separate flag; only enableInteractionTracking is used now\n\n\nAdded interaction-tracking/subscriptions bundle and split tests\n\n\nAdded multi-subscriber support\n\n\nMoved subscriptions behind feature flag\n\n\nFixed bug with wrap() parameters and added test\n\n\nReplaced wrap arrow function\n\n', 'Trap click events for portal root (#11927)\n\n\nTrap click events for portal root\n\n\nTrap click event on container in appendChildToContainer\n\n\nAdd a comment\n\n', 'Do not toLowerCase lists of lowercase words (#13428)\n\n\nDo not toLowerCase lists of lowercase words\n\n\nAdd notes about downcasing to DOMProperty.js\n\n\nUse consistent comment breakout\n\n\nMake toLowerCase more obvious\n\n', "Remove helper object from FallbackCompositionState (#13430)\nThere's no good reason for this to be an object. This refactors it so\nthat we just use three variables instead. We can avoid the property reads/writes and also minify better, since property names don't get mangled but variables do.", 'Remove addEventListener check in isEventSupported (#13435)\n\nRemove addEventListener check in isEventSupported\n\nAll browsers we support also support addEventListener, so this check is\nunncessary\n\nRemove capture argument from isEventSupported\n', "Remove getTextContentAccessor (#13434)\nAccording to caniuse the only browsers that don't support textContent\nare <=IE8, which we no longer support.", 'Short circuit the logic for exporting a module (#13392)\n\n\nshort circuit some logic\n\n\nrevert back to ternary operator\n\n', 'Fix incorrect legacy context for factory components (#13441)\n\n\nAdd a repro case for context bug\n\n\nBe explicit about whether context has been pushed\n\n\nPut cheaper check first\n\n\nNaming\n\n', 'Fix component name for React.lazy (#13443)\n\n\nFix component name for React.lazy\n\n\nFix lint\n\n', 'Tweak ReactTypeOfWork order (#13444)', 'Fix React.lazy(forwardRef) (#13446)\n\n\nFix React.lazy(forwardRef)\n\n\nForbid bad typeof\n\n', 'Warn about ReactDOM.createPortal usage within ReactTestRenderer (#12895)', 'Update scroll restoration logic in suspense fixture (#13437)', 'Bumped version to 16.4.3-alpha.0 (#13448)\n\nBumped version to 16.4.3-alpha.0\nBump react-is peer dep version in react-test-renderer\n', 'Warn about unsafe toWarnDev() nesting in tests (#12457)\n\nAdd lint run to warn about improperly nested toWarnDev matchers\nUpdated tests to avoid invalid nesting\n', 'Change www error shim API (#13454)', 'Fix warning message', 'Revert "Rely on bubbling for submit and reset events (#13358)" (#13462)\nThis reverts commit 725e499cfb4da60da46aa5b44c4bad29cad3d08f.', "Improve test harness of submit events (#13463)\nThis PR includes a test that I've enabled in #13358 and another test that we've discussed in #13462 as well as some random cleanup while I'm at it.", 'Stringify  children (#13465)', 'Correct syntax in CHANGELOG (#13474)\nNon-breakable space was replaced with whitespace.', 'Rename ReactTypeOfWork to ReactWorkTags, ReactTypeOfSideEffect to ReactSideEffectTags (#13476)\n\nRename ReactTypeOfWork to ReactWorkTags\n\nAnd type TypeOfWork to type WorkTag.\n\nRename ReactTypeOfSideEffect too\n', 'Replace magic number 1 with ELEMENT_NODE (#13479)\n\n\nReplace magic number 1 with ELEMENT_NODE\n\n\nAdd flow pragma to HTMLNodeType\n\n', '[SSR Fixture] Update yarn.lock (#13481)\n\nUpdate yarn.lock\n', 'Rename lowestPendingInteractiveExpirationTime (#13484)\n\n\nRename lowestPendingInteractiveExpirationTime\n\n\nfix prettier\n\n', 'Add warning to prevent setting this.state to this.props referentially (#11658)\n\n\nadd test to warn if setting this.state to this.props referentially\n\n\nAvoid an extra check\n\n', 'added flow types to setInnerHTML (#13495)', "Remove buggy unstable_deferredUpdates() (#13488)\n\n\nAdd a failing test for deferredUpdates not being respected\n\n\nDon't consider deferred updates interactive\n\n\nRemove now-unnecessary setTimeout hack in the fixture\n\n\nRemove unstable_deferredUpdates\n\n", 'Profiler integration with interaction-tracking package (#13253)\n\n\nUpdated suspense fixture to use new interaction-tracking API\n\n\nIntegrated Profiler API with interaction-tracking API (and added tests)\n\n\nPass interaction Set (rather than Array) to Profiler onRender callback\n\n\nRemoved some :any casts for enableInteractionTracking fields in FiberRoot type\n\n\nRefactored threadID calculation into a helper method\n\n\nErrors thrown by interaction tracking hooks use unhandledError to rethrow more safely.\nReverted try/finally change to ReactTestRendererScheduling\n\n\nAdded a $FlowFixMe above the FiberRoot :any cast\n\n\nReduce overhead from calling work-started hook\n\n\nRemove interaction-tracking wrap() references from unwind work in favor of managing suspense/interaction continuations in the scheduler\n\n\nMoved the logic for calling work-started hook from performWorkOnRoot() to renderRoot()\n\n\nAdd interaction-tracking to bundle externals. Set feature flag to PROFILE\n\n\nRenamed the freezeInteractionCount flag and replaced one use-case with a method param\n\n\nlet -> const\n\n\nUpdated suspense fixture to handle recent API changes\n\n', 'Fix test to use AsyncMode\nAddresses one of the issues brought up by @NE-SmallTown in https://github.com/facebook/react/pull/13488#issuecomment-416805935', 'Sync React Native Flow Changes (#13513)', '[RN] Remove isMounted() false positive warning (#13511)', 'Fixed typo (#13519)', 'Fetch all tags in DOM fixtures', 'Add a more precise regression test for #6219', 'Make regression test better', 'Add regression test for #6119', 'Add SSR regression test for #6119', 'Add a regression test for #4618', 'Interaction tracking follow up (#13509)\n\nMerged interaction-tracking package into react-scheduler\nAdd tracking API to FB+www builds\nAdded Rollup plugin to strip no-side-effect imports from Rollup bundles\nRe-bundle tracking and scheduling APIs on SECRET_INTERNALS object for UMD build (and provide lazy forwarding methods)\nAdded some additional tests and fixtures\nFixed broken UMD fixture in master (#13512)\n', 'Fix a typo (#13531)', 'Added Jest test to verify UMD API-forwarding for scheduling package (#13532)\n\nAdded Jest test to verify UMD API-forwarding for scheduling package\nAdded separate dev/prod UMD bundles for scheduler package\n', 'Tidied up scheduling UMD API forwarding test (#13533)', 'Rename ReactDOMFiber to ReactDOM (#13540)', 'Remove negative lookbehind from Rollup plugin that broke Node <= v8.9 (#13538)', 'Ignore noscript content on the client (#13537)\n\n\nIgnore noscript content on the client (#11423)\n\n\nFix failing test for ignoring noscript content\n\n\nAdd a ServerIntegration test for noscript\n\n', 'Expose less internals for TestUtils (#13539)\n\n\nExpose less internals for TestUtils\n\n\nKeep EventPluginHub for www\n\n\nReorder to simplify\n\n', 'Rename "react-scheduler" package to "schedule" (#13543)\n\n\nGit moved packages/react-scheduler -> packages/schedule\n\n\nGlobal find+replace \'react-scheduler\' -> \'schedule\'\n\n\nGlobal find+replace \'ReactScheduler\' -> \'Scheduler\'\n\n\nRenamed remaining files "ReactScheduler" -> "Schedule"\n\n\nAdd thank-you note to schedule package README\n\n\nReplaced schedule package versions 0.1.0-alpha-1 -> 0.2.0\n\n\nPatched our local fixtures to work around Yarn install issue\n\n\nRemoved some fixture hacks\n\n', 'Tweak README and description', 'Secret exports: Scheduler => Schedule (#13544)', 'Remove www scheduler fork (#13545)\nRemove unused www scheduler fork', 'Document event bubble order (#13546)\nThis is documenting the current order in which events are dispatched\nwhen interacting with native document listeners and other React apps.\nFor more context, check out #12919.', 'Extract common logic (#13535)', 'Fix test', 'Revert "Extract common logic" (#13547)\n\nRevert "Fix test"\n\nThis reverts commit 17a57adde26766b8ab54c02cbd5ce013f9a659ec.\n\nRevert "Extract common logic (#13535)"\n\nThis reverts commit 605da8b420207d93c034461f44775d9296830c0c.', 'Renamed schedule UMD forwarding methods to stay in-sync with SECRET_INTERNALS change (#13549)', 'Add gridArea to unitless CSS properties (#13550)\nRef #9185', "Make IE 11 not complain about non-crucial style attribute hydration mismatch (#13534)\nIE 11 parses & normalizes the style attribute as opposed to other\nbrowsers. It adds spaces and sorts the properties in some\nnon-alphabetical order. Handling that would require sorting CSS\nproperties in the client & server versions or applying\nexpectedStyle to a temporary DOM node to read its style attribute\nnormalized. Since it only affects IE, we're skipping style warnings\nin that browser completely in favor of doing all that work.\nFixes #11807", 'Try/finally', 'Check document.documentMode once', 'Fix test file name', 'Fix import of ReactDOM in server env', 'refactor: remove emove type judgment when defining warning props (#13553)', 'Change async fixtures to use schedule', 'Fixed schedule/tracking require for www sync script (#13556)\n\n\nFixed schedule/tracking require for www sync script\n\n\nRemove unused remapped FB modules from bundle as well\n\n\nRemove www module rename plugin\n\n\nRevert unnecessary change to strip-unused-imports plugin\n\n', "Cleaned up 'schedule' API wrt interactions and subscriber ref: (#13561)\n\nRemoved 'private' ref methods from UMD forwarding API\nReplaced getters with exported constants since they were no longer referenced for UMD forwarding\n", 'test: add test for fragement props (#13565)', 'Added react-dom/profiling entry point to NPM package (#13570)', 'Add enableSuspenseServerRenderer feature flag (#13573)', 'Call Profiler onRender after mutations (#13572)', 'Changelog for 16.5.0 (#13571)', 'When a root expires, flush all expired work in a single batch (#13503)\nInstead of flushing each level one at a time.', 'Tweak react-dom README', 'Update react-dom README', 'Added a test for Profiler onRender that throws (#13575)', 'Build script correctly bumps prerelease deps (e.g. schedule) (#13576)', 'Build script correctly bumps prerelease deps (e.g. schedule) for react (#13577)', 'Updating yarn.lock file for 16.5.0 release', 'Updating package versions for release 16.5.0', 'Update error codes for 16.5.0 release', 'Update bundle sizes for 16.5.0 release']v16.4.1 16.4.1 (June 13, 2018)
React

You can now assign propTypes to components returned by React.ForwardRef. (@bvaughn in #12911)

React DOM

Fix a crash when the input type changes from some other types to text. (@spirosikmd in #12135)
Fix a crash in IE11 when restoring focus to an SVG element. (@ThaddeusJiang in #12996)
Fix a range input not updating in some cases. (@Illu in #12939)
Fix input validation triggering unnecessarily in Firefox. (@nhunzaker in #12925)
Fix an incorrect event.target value for the onChange event in IE9. (@nhunzaker in #12976)
Fix a false positive error when returning an empty <React.Fragment /> from a component. (@philipp-spiess in #12966)

React DOM Server

Fix an incorrect value being provided by new context API. (@ericsoderberghp in #12985, @gaearon in #13019)

React Test Renderer

Allow multiple root children in test renderer traversal API. (@gaearon in #13017)
Fix getDerivedStateFromProps() in the shallow renderer to not discard the pending state. (@fatfisz in #13030)
 ['Update CHANGELOG for 16.4.0', "Improve tests for 'schedule' module (#12880)\nwhat is the change?:\nRenamed some methods, and made a method to advance a frame in the test\nenvironment.\nwhy make this change?:\nWe often need to simulate a frame passing with some amount of idle time\nor lack of idle time, and the new method makes it easier to write that\nout.\ntest plan:\nRun the updated tests.\nAlso temporarily tried breaking the scheduler and verified that the\ntests will fail.\nissue:\nSee internal task T29442940", "[scheduler] 2/n Adding 'schedule' fixture (#12884)\n\nAdding 'schedule' fixture\n\nwhat is the change?:\nWe need to test the schedule module against real live browser APIs. As\na quick solution we're writing a fixture for using in manual testing.\nLater we plan on adding automated browser testing, using this or a\nsimilar fixture as the test page.\nwhy make this change?:\nTo further solidify test coverage for schedule before making further\nimprovements/refactors to the module.\ntest plan:\nopen fixtures/schedule/index.html and inspect the results. It should\nbe clear that things pass.\nWe also temporarily broke the scheduler and verified that this fixture\ndemonstrates the problems.\nissue:\nInternal task T29442940\n\nMade fixture tests display red or green border depending on pass/fail\n\nwhat is the change?:\nAdded red/green solid/dashed border for test results when using the\nschedule fixture.\nWe also tweaked the timing of the last test because it was on the line\nin terms of whether it passed or failed.\nwhy make this change?:\nTo make it faster to use the fixture - it takes more time to read\nthrough the results line by line and check that they match what is\nexpected.\ntest plan:\nLooked at the fixture, and also tried modifying a test to show what it\nlooks like when something fails.", 'Record "actual" times for all Fibers within a Profiler tree (alt) (#12910)\n\n\nMoved actual time fields from Profiler stateNode to Fiber\n\n\nRecord actual time for all Fibers within a ProfileMode tree\n\n\nChanged how profiler accumulates time\n\n\nThis change gives up on accumulating time across renders of different priority, but in exchange- simplifies how the commit phase (reset) code works, and perhaps also makes the profiling code more compatible with future resuming behavior', "TestRenderer warns if flushThrough is passed the wrong params (#12909)\nTestRenderer throws if flushThrough is passed the expected yield values that don't match actual yield values.", 'No longer expose ReactNativeComponentTree (#12904)', "[scheduler] 3/n Use a linked list instead of map and queue for callback storage (#12893)\n\n[schedule] Use linked list instead of queue and map for storing cbs\n\nNOTE: This PR depends on https://github.com/facebook/react/pull/12880\nand https://github.com/facebook/react/pull/12884\nPlease review those first, and after they land Flarnie will rebase on\ntop of them.\n\nwhat is the change?:\nSee title\nwhy make this change?:\nThis seems to make the code simpler, and potentially saves space of\nhaving an array and object around holding references to the callbacks.\ntest plan:\nRun existing tests\n\n\nminor style improvements\n\n\nrefactor conditionals in cancelScheduledWork for increased clarity\n\n\nRemove 'canUseDOM' condition and fix some flow issues w/callbackID type\n\n\nwhat is the change?:\n- Removed conditional which fell back to 'setTimeout' when the\nenvironment doesn't have DOM. This appears to be an old polyfill used\nfor test environments and we don't use it any more.\n- Fixed type definitions around the callbackID to be more accurate in\nthe scheduler itself, and more loose in the React code.\nwhy make this change?:\nTo get Flow passing, simplify the scheduler code, make things accurate.\ntest plan:\nRun tests and flow.\n\nRewrite 'cancelScheduledWork' so that Flow accepts it\n\nwhat is the change?:\nAdding verification that 'previousCallbackConfig' and\n'nextCallbackConfig' are not null before accessing properties on them.\nSlightly concerned because this implementation relies on these\nproperties being untouched and correct on the config which is passed to\n'cancelScheduledWork' but I guess we already rely heavily on that for\nthis whole approach. :\\\nwhy make this change?:\nTo get Flow passing.\nNot sure why it passed earlier and in CI, but now it's not.\ntest plan:\nyarn flow dom and other flow tests, lint, tests, etc.\n\n\nran prettier\n\n\nPut back the fallback implementation of scheduler for node environment\n\n\nwhat is the change?:\nWe had tried removing the fallback implementation of scheduler but\ntests reminded us that this is important for supporting isomorphic uses\nof React.\nLong term we will move this out of the schedule module but for now\nlet's keep things simple.\nwhy make this change?:\nKeep things working!\ntest plan:\nRan tests and flow\n\nShorten properties stored in objects by sheduler\n\nwhat is the change?:\npreviousScheduledCallback -> prev\nnextScheduledCallback -> next\nwhy make this change?:\nWe want this package to be smaller, and less letters means less code\nmeans smaller!\ntest plan:\nran existing tests\n\nfurther remove extra lines in scheduler\n", 'Use --frozen-lockfile for Yarn in CI build (#12914)\nCI builds should always use the --frozen-lockfile option. It will fail the build if the lockfile is out-of-date:\n\nIf you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\n\n(https://yarnpkg.com/en/docs/cli/install/)', 'Upgrade to Jest 23 (#12894)\n\n\nUpgrade to Jest 23 beta\n\n\nprefer .toHaveBeenCalledTimes\n\n\n23 stable\n\n', 'Do not assign node.value on input creation if no change will occur (#12925)\nThis commit fixes an issue where assigning an empty string to required\ntext inputs triggers the invalid state in Firefox (~60.0.1).\nIt does this by first comparing the initial state value to the current\nvalue property on the text element. This:\n\nPrevents the validation issue\nAvoids an extra DOM Mutation in some cases\n', 'Disable Flow on AppVeyor again\nIt runs out of memory.', 'ForwardRefs supports propTypes (#12911)\n\nMoved some internal forwardRef tests to not be internal\nForwardRef supports propTypes\n', 'Release script prompts for NPM 2FA code (#12908)\n\nRelease script prompts for NPM 2fa code\n', "[scheduler] 4/n Allow splitting out schedule in fb-www, prepare to fix polyfill issue internally (#12900)\n\nUse local references to global things inside 'scheduler'\n\nwhat is the change?:\nSee title\nwhy make this change?:\nWe want to avoid initially calling one version of an API and then later\naccessing a polyfilled version.\ntest plan:\nRun existing tests.\n\nShim ReactScheduler for www\n\nwhat is the change?:\nIn 'www' we want to reference the separate build of ReactScheduler,\nwhich allows treating it as a separate module internally.\nwhy make this change?:\nWe need to require the ReactScheduler before our rAF polyfill activates,\nin order to customize which custom behaviors we want.\nThis is also a step towards being able to experiment with using it\noutside of React.\ntest plan:\nRan tests, ran the build, and ran test-build.\n\nGenerate a bundle for fb-www\n\nwhat is the change?:\nSee title\nwhy make this change?:\nSplitting out the 'schedule' module allows us to load it before\npolyfills kick in for rAF and other APIs.\nAnd long term we want to split this into a separate module anyway, this\nis a step towards that.\ntest plan:\nI'll run the sync next week and verify that this all works. :)\n\n\nran prettier\n\n\nfix rebase issues\n\n\nChange names of variables used for holding globals\n\n", "Rename variables to remove references to 'global' global (#12931)\nwhat is the change?:\nIn a recent PR we were referencing some global variables and storing\nlocal references to them.\nTo make things more natural, we co-opted the original name of the global\nfor our local reference. To make this work with Flow, we get the\noriginal reference from 'window.requestAnimationFrame' and assign it to\n'const requestAnimationFrame'.\nSometimes React is used in an environment where 'window' is not defined\n- in that case we need to use something else, or hide the 'window'\nreference somewhere.\nWe opted to use 'global' thinking that Babel transforms would fill that\nin with the proper thing.\nBut for some of our fixtures we are not doing that transform on the\nbundle.\nwhy make this change?:\nI want to unbreak this on master and then investigate more about what we\nshould do to fix this.\ntest plan:\nrun yarn build and open the fixtures.\nissue:\nhttps://github.com/facebook/react/issues/12930", 'Extend input type check in selection capabilities (#12062) (#12135)\n\nDo not set selection when prior selection is undefined (#12062)\n\nrestoreSelection did not account for input elements that have changed\ntype after the commit phase. The new text input supported selection\nbut the old email did not and setSelection was incorrectly trying to\nrestore null selection state.\nWe also extend input type check in selection capabilities to cover cases\nwhere input type is search, tel, url, or password.\n\n\nAdd link to HTML spec for element types and selection\n\n\nAdd reset button to ReplaceEmailInput\n\n\nThis commit adds a button to restore the original state of the\nReplaceEmailInput fixture so that it can be run multiple times without\nrefreshing the page.', '[simple-cache-provider] Use LRU cache eviction (#12851)\n\n[simple-cache-provider] Use LRU cache eviction\n\nMax size is hard-coded to 500. In the future, we should make this\nconfigurable per resource.\n\nEvict PAGE_SIZE records from cache when max limit is reached\n', 'Fix for Flow issues in SimpleCacheProvider (#12942)\n\nFix for Flow issues in SimpleCacheProvider\n\nwhat is the change?:\n- Fixed some flow errors which were somehow swallowed when CI\noriginally\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\nwhy make this change?:\nTo unbreak master and unblock other changes we want to make.\ntest plan:\nFlow passes!\nissue:\nhttps://github.com/facebook/react/issues/12941\n\nFix lints\n', 'Expose unstable_interactiveUpdates on ReactDOM (#12943)', "[scheduler] 5/n Error handling in scheduler (#12920)\n\nInitial failing unit test for error handling in schedule\n\nwhat is the change?:\nsee title\nwhy make this change?:\nAdding tests for the error handling behavior we are about to add. This\ntest is failing, which gives us the chance to make it pass.\nWrote skeletons of some other tests to add.\nUnit testing this way is really hacky, and I'm also adding to the\nfixture to test this in the real browser environment.\ntest plan:\nRan new test, saw it fail!\n\nAdd fixture for testing error handling in scheduler\n\nwhat is the change?:\nAdded a fixture which does the following -\nlogs in the console to show what happens when you use\nrequestAnimationFrame to schedule a series of callbacks and some of\nthem throw errors.\nThen does the same actions with the scheduler and verifies that it\nbehaves in a similar way.\nHard to really verify the errors get thrown at the proper time without\nlooking at the console.\nwhy make this change?:\nWe want the most authentic, accurate test of how errors are handled in\nthe scheduler. That's what this fixture should be.\ntest plan:\nManually verified that this test does what I expect - right now it's\nfailing but follow up commits will fix that.\n\nHandle errors in scheduler\n\nwhat is the change?:\nWe set a flag before calling any callback, and then use a 'try/finally'\nblock to wrap it. Note that we do not catch the error, if one is\nthrown. But, we only unset the flag after the callback successfully\nfinishes.\nIf we reach the 'finally' block and the flag was not unset, then it\nmeans an error was thrown.\nIn that case we start a new postMessage callback, to finish calling any\nother pending callbacks if there is time.\nwhy make this change?:\nWe need to make sure that an error thrown from one callback doesn't stop\nother callbacks from firing, but we also don't want to catch or swallow\nthe error because we want engineers to still be able to log and debug\nerrors.\ntest plan:\nNew tests added are passing, and we verified that they fail without this\nchange.\n\nAdd more tests for error handling in scheduler\n\nwhat is the change?:\nAdded tests for more situations where error handling may come up.\nwhy make this change?:\nTo get additional protection against this being broken in the future.\ntest plan:\nRan new tests and verified that they fail when error handling fails.\n\n\ncallSafely -> callUnsafely\n\n\nFix bugs with error handling in schedule\n\n\nwhat is the change?:\n- ensure that we properly remove the callback from the linked list, even\nif it throws an error and is timed out.\n- ensure that you can call 'cancelScheduledWork' more than once and it\nis idempotent.\nwhy make this change?:\nTo fix bugs :)\ntest plan:\nExisting tests pass, and we'll add more tests in a follow up commit.\n\nUnit tests for error handling with timed out callbacks\n\nwhat is the change?:\nMore unit tests, to cover behavior which we missed; error handling of\ntimed out callbacks.\nwhy make this change?:\nTo protect the future!~\ntest plan:\nRun the new tests.\n\nAdds fixture to test timed out callbacks with scheduler\n\nwhat is the change?:\nSee title\nIn the other error handling fixture we compare 'scheduleWork' error\nhandling to 'requestAnimationFrame' and try to get as close as possible.\nThere is no 'timing out' feature with 'requestAnimationFrame' but\neffectively the 'timing out' feature changes the order in which things\nare called. So we just changed the order in the 'requestAnimationFrame'\nversion and that works well for illustrating the behavior we expect in\nthe 'scheduleWork' test.\nwhy make this change?:\nWe need more test coverage of timed out callbacks.\ntest plan:\nExecuted the fixture manually in Firefox and Chrome. Results looked\ngood.\n\n\nfix rebase problems\n\n\nmake fixture compensate for chrome JS speed\n\n\nran prettier\n\n\nRemove 'cancelled' flag on callbackConfig in scheduler, add test\n\n\nwhat is the change?:\n- Instead of using a 'cancelled' flag on the callbackConfig, it's easier\nto just check the state of the callbackConfig inside\n'cancelScheduledWork' to determine if it's already been cancelled. That\nway we don't have to remember to set the 'cancelled' flag every time we\ncall a callback or cancel it. One less thing to remember.\n- We added a test for calling 'cancelScheduledWork' more than once,\nwhich would have failed before.\nThanks @acdlite for suggesting this in code review. :)\nwhy make this change?:\nTo increase stability of the schedule module, increase test coverage.\ntest plan:\nExisting tests pass and we added a new test to cover this behavior.\n\nfix typo\n", 'Update token (#12956)', 'Set the correct initial value on input range (#12939)\n\n\nSet the correct initial value on input range\n\n\nAdd description and update value diff check for input range\n\n\nadd isHydrating argument and tests\n\n\nupdate node value according to isHydrating\n\n', 'Fix links of docs on the comment (#12795)', 'use --frozen-lockfile in AppVeyor (#12950)', 'update comment in computeAsyncExpiration() to reflect code (#12994)', "Fix jest/matchers/toWarnDev expected, actual order for jest-diff (#12285) (#12288)\ntoWarnDev calls jestDiff(a, b) which calls diffStrings(a, b) where by default a is annotated as 'Expected' (green), b as 'Received' (red).\nSo the first argument passed into jestDiff should be the expected message, the second should be the actual message.\nIt was vice versa previously.\n\nhttps://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54\nhttps://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93\nhttps://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251\n", 'Fix react-dom ReferenceError requestAnimationFrame in non-browser env (#13000) (#13001)\n\nFix react-dom ReferenceError requestAnimationFrame in non-browser env (#13000)\n\nThe https://github.com/facebook/react/pull/12931 ( https://github.com/facebook/react/commit/79a740c6e32ca300d4e7ff55ab06de172d4237fd ) broke the server-side rendering: in the fixtures/ssr the following error appeared from the server-side when localhost:3000 is requested:\nReferenceError: requestAnimationFrame is not defined\n    at /__CENSORED__/react/build/node_modules/react-dom/cjs/react-dom.development.js:5232:34\n    at Object.<anonymous> (/__CENSORED__/react/build/node_modules/react-dom/cjs/react-dom.development.js:17632:5)\n    at Module._compile (module.js:624:30)\n    at Module._extensions..js (module.js:635:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/__CENSORED__/react/fixtures/ssr/node_modules/babel-register/lib/node.js:152:7)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\nThe exception pointed to this line:\njs\n// We capture a local reference to any global, in case it gets polyfilled after\n// this module is initially evaluated.\n// We want to be using a consistent implementation.\nconst localRequestAnimationFrame = requestAnimationFrame;\nTest plan\n\nIn react repo root, yarn && yarn build.\nIn fixtures/ssr, yarn && yarn start,\nIn browser, go to http://localhost:3000.\n\nObserve the fixture page, not the exception message.\n\n\nMove the requestAnimationFrameForReact check and warning to callsites (#13000)\n\n\nAccording to the comment by @gaearon: https://github.com/facebook/react/pull/13001#issuecomment-395803076\n\nUse invariant instead of throw new Error, use the same message (#13000)\n\nAccording to the comment by @gaearon: https://github.com/facebook/react/pull/13001#discussion_r194133355', 'Update custom renderer docs', 'delete a couple of redundant lines in performWorkOnRoot() in ReactFiberScheduler.js (#13003)', "Fix an SVG focusing crash in IE11 (#12996)\n\nrevert #11800\n\nbecause #12763\n\n\nuse try/catch for SVG in IE11\n\n\nuse focusNode(element) when element.focus isn't a function.\n\n\nrevert #11800\n\n", 'Remove old reference to inst._wrapperState (#12987)\nThis commit removes a reference to inst._wrapperState, which was the\nold way of tracking input state in the stack renderer.\nThis means we no longer need to pass the instance into the associated\nfunction, allowing us to eliminate an exception for IE (and a TODO).', 'Fixed an issue with nested contexts unwinding when server rendering. Issue #12984 (#12985)\n\n\nFixed an issue with nested contexts unwinding when server rendering. GitHub issue #12984\n\n\nFixed an issue with search direction and stricter false checking\n\n\nUse decrement infix operator\n\n\nStreamlined existence checks\n\n\nStreamlined assignment. Removed redundant comment. Use null for array values\n\n\nMade prettier\n\n\nRelaxed type checking and improved comment\n\n\nImprove test coverage\n\n', 'Fallback to event.srcElement for IE9 (#12976)\nIt looks like we accidentally removed a fallback condition for the\nevent target in IE9 when we dropped some support for IE8. This commit\nadds the event target specific support code back to getEventTarget.js\nFixes #12506', 'Don’t error when returning an empty Fragment (#12966)\n\nDon’t error when returning an empty Fragment\n\nWhen a fragment is reconciled, we directly move onto it’s children.\nSince an empty <React.Fragment/> will have children of undefined,\nthis would always throw.\nTo fix this, we bail out in those cases.\n\n\nTest the update path as well\n\n\nReuse existing code path\n\n\nAn even more explicit solution that also fixes Flow\n\n', 'Allow multiple root children in test renderer traversal API (#13017)', 'Popping context is O(1) in SSR (#13019)', 'Added production profiling bundle type (#12886)\n\nAdded profiling bundle\nTurned profiling on for React Fabric OSS profiling and dev bundles\nAdded new global var "PROFILE" for profiling DCE\n', 'Scheduler depends on common packages (#13020)', "Remove feature flag around 'getDerivedStateFromProps' bug fix (#13022)\nwhat is the change?:\nBasically undoes https://github.com/facebook/react/commit/4b2e65d32e3adec7d4ef5ddd5fcb35e617e0cde6#diff-904ceabd8a1e9a07ab1d876d843d62e1\nwhy make this change?:\nWe rolled out this fix internally and in open source weeks ago, and now\nwe're cleaning up.\ntest plan:\nRan tests and lint, and really we have been testing this because the\nflag is open internally as of last week or so.\nissue:\nInternal task T29948812 has some info.", 'Call gDSFP with the right state in react-test-render (#13030)\n\n\nCall gDSFP with the right state in react-test-render\n\n\nChange the test\n\n', 'Use native event dispatching instead of Simulate or SimulateNative (#13023)\n\nUse native event dispatching instead of Simulate or SimulateNative\n\nIn #12629 @gaearon suggested that it would be better to drop usage of\nReactTestUtils.Simulate and ReactTestUtils.SimulateNative. In this\nPR I’m attempting at removing it from a lot of places with only a few\nleftovers.\nThose leftovers can be categorized into three groups:\n\nAnything that tests that SimulateNative throws. This is a property\n   that native event dispatching doesn’t have so I can’t convert that\n   easily. Affected test suites: EventPluginHub-test,\n   ReactBrowserEventEmitter-test.\nAnything that tests ReactTestUtils directly. Affected test suites:\n   ReactBrowserEventEmitter-test (this file has one test that reads\n    "should have mouse enter simulated by test utils"),\n    ReactTestUtils-test.\nAnything that dispatches a change event. The reason here goes a bit\n   deeper and is rooted in the way we shim onChange. Usually when using\n   native event dispatching, you would set the node’s .value and then\n   dispatch the event. However inside [inputValueTracking.js][] we\n   install a setter on the node’s .value that will ignore the next\n   change event (I found this article\n   from Sophie that explains that this is to avoid onChange when\n   updating the value via JavaScript).\n\nAll remaining usages of Simulate or SimulateNative can be avoided\nby mounting the containers inside the document and dispatching native\nevents.\nHere some remarks:\n\nI’m using Element#click() instead of dispatchEvent. In the jsdom\n   changelog I read that click() now properly sets the correct values\n   (you can also verify it does the same thing by looking at the\n   source).\nI had to update jsdom in order to get TouchEvent constructors\n   working (and while doing so also updated jest). There was one\n   unexpected surprise: ReactScheduler-test was relying on not having\n   window.performance available. I’ve recreated the previous\n   environment by deleting this property from the global object.\n\nI was a bit confused that ReactTestUtils.renderIntoDocument() does\n   not render into the document 🤷\u200d\n\n\nMake sure contains are unlinked from the document even if the test fails\n\n\nRemove unnecessary findDOMNode calls\n\n', 'Add unreleased changelog', 'Updating yarn.lock file for 16.4.1 release', 'Updating package versions for release 16.4.1', 'Update error codes for 16.4.1 release', 'Update bundle sizes for 16.4.1 release']v16.4.0 React

Add a new experimental React.unstable_Profiler component for measuring performance. (@bvaughn in #12745)

React DOM

Add support for the Pointer Events specification. (@philipp-spiess in #12507)
Properly call getDerivedStateFromProps() regardless of the reason for re-rendering. (@acdlite in #12600 and #12802)
Fix a bug that prevented context propagation in some cases. (@gaearon in #12708)
Fix re-rendering of components using forwardRef() on a deeper setState(). (@gaearon in #12690)
Fix some attributes incorrectly getting removed from custom element nodes. (@airamrguez in #12702)
Fix context providers to not bail out on children if there's a legacy context provider above. (@gaearon in #12586)
Add the ability to specify propTypes on a context provider component. (@nicolevy in #12658)
Fix a false positive warning when using react-lifecycles-compat in <StrictMode>. (@bvaughn in #12644)
Warn when the forwardRef() render function has propTypes or defaultProps. (@bvaughn in #12644)
Improve how forwardRef() and context consumers are displayed in the component stack. (@sophiebits in #12777)
Change internal event names. This can break third-party packages that rely on React internals in unsupported ways. (@philipp-spiess in #12629)

React Test Renderer

Fix the getDerivedStateFromProps() support to match the new React DOM behavior. (@koba04 in #12676)
Fix a testInstance.parent crash when the parent is a fragment or another special node. (@gaearon in #12813)
forwardRef() components are now discoverable by the test renderer traversal methods. (@gaearon in #12725)
Shallow renderer now ignores setState() updaters that return null or undefined. (@koba04 in #12756)

React ART

Fix reading context provided from the tree managed by React DOM. (@acdlite in #12779)

React Call Return (Experimental)

This experiment was deleted because it was affecting the bundle size and the API wasn't good enough. It's likely to come back in the future in some other form. (@gaearon in #12820)

React Reconciler (Experimental)

The new host config shape is flat and doesn't use nested objects. (@gaearon in #12792)
 ['Add 16.3.2 changelog (#12621)', 'remove duplicate code in test (#12620)', "Don't git commit noop-renderer unless package deps change (#12623)", 'Bump Prettier (#12622)', '[RN] Update Secret Types (#12635)', 'Fork React Native renderer into FB and OSS bundles (#12625)\n\nAdded new "native-fb" and "native-fabric-fb" bundles.\nSplit RN_DEV and RN_PROD bundle types into RN_OSS_DEV, RN_OSS_PROD, RN_FB_DEV, and RN_FB_PROD. (This is a bit redundant but it seemed the least intrusive way of supporting a forked feature flags file for these bundles.)\nRenamed FB_DEV and FB_PROD bundle types to be more explicitly for www (FB_WWW_DEV and FB_WWW_PROD)\nRemoved Haste @providesModule headers from the RB-specific RN renderer bundles to avoid a duplicate name conflicts.\nRemove dynamic values from OSS RN feature flags. (Leave them in FB RN feature flags.)\nUpdated the sync script(s) to account for new renderer type.\nMove ReactFeatureFlags.js shim to FB bundle only (since OSS bundle no longer needs dynamic values).\n', 'Add forwardRef DEV warning for prop-types on render function (#12644)', 'StrictMode should not warn about polyfilled getSnapshotBeforeUpdate (#12647)\n\nInstalled 3.x release of react-lifecycles-compat\nUpdated ReactComponentLifeCycle-test and ReactDOMServerLifecycles-test to cover both polyfilled lifecycles in StrictMode\nUpdated StrictMode warnings to not warn about polyfilled getSnapshotBeforeUpdate\n', 'Initial commit (#12624)\nThis is the first step - pulling the ReactDOMFrameScheduling module out\ninto a separate package.\nCo-authored-by: Brandon Dail aweary@users.noreply.github.com', 'Add server integration tests for new context (#12654)\n\n\nAdd server integration tests for new context\n\n\nPretty please\n\n\nRemove unused\n\n', 'Validate props on context providers (#12658)\n\n\ncheckPropTypes in updateContextProvider\n\n\ninvalid “prop”\n\n\ntype nottypes` .. :l\n\n\ntest\n\n\ndon’t need extra check with no spelling mistake (:\n\n\nchange error message to specifically address provider\n\n\ndon’t need class, add extra render to make sure good props go through\n\n\nnitpicky rename\n\n\nprettier\n\n\nswitch to Context.Provider\n\n\nadd stack to warning, add extra undefined check\n\n\nseparate dev check\n\n\nadd stack to test\n\n\nmore efficient\n\n\nremove unused function\n\n\nprettier\n\n\nconst to top\n\n', 'Decouple update queue from Fiber type (#12600)\n\nDecouple update queue from Fiber type\n\nThe update queue is in need of a refactor. Recent bugfixes (#12528) have\nexposed some flaws in how it\'s modeled. Upcoming features like Suspense\nand [redacted] also rely on the update queue in ways that weren\'t\nanticipated in the original design.\nMajor changes:\n\nInstead of boolean flags for isReplace and isForceUpdate, updates\nhave a tag field (like Fiber). This lowers the cost for adding new\ntypes of updates.\nRender phase updates are special cased. Updates scheduled during\nthe render phase are dropped if the work-in-progress does not commit.\nThis is used for getDerivedStateFrom{Props,Catch}.\n\ncallbackList has been replaced with a generic effect list. Aside\nfrom callbacks, this is also used for componentDidCatch.\n\n\nRemove first class UpdateQueue types and use closures instead\n\n\nI tried to avoid this at first, since we avoid it everywhere else in the Fiber\ncodebase, but since updates are not in a hot path, the trade off with file size\nseems worth it.\n\nStore captured errors on a separate part of the update queue\n\nThis way they can be reused independently of updates like\ngetDerivedStateFromProps. This will be important for resuming.\n\nRevert back to storing hasForceUpdate on the update queue\n\nInstead of using the effect tag. Ideally, this would be part of the\nreturn type of processUpdateQueue.\n\nRename UpdateQueue effect type back to Callback\n\nI don\'t love this name either, but it\'s less confusing than UpdateQueue\nI suppose. Conceptually, this is usually a callback: setState callbacks,\ncomponentDidCatch. The only case that feels a bit weird is Timeouts,\nwhich use this effect to attach a promise listener. I guess that kinda\nfits, too.\n\nCall getDerivedStateFromProps every render, even if props did not change\n\nRather than enqueue a new setState updater for every props change, we\ncan skip the update queue entirely and merge the result into state at\nthe end. This makes more sense, since "receiving props" is not an event\nthat should be observed. It\'s still a bit weird, since eventually we do\npersist the derived state (in other words, it accumulates).\n\nStore captured effects on separate list from "own" effects (callbacks)\n\nFor resuming, we need the ability to discard the "own" effects while\nreusing the captured effects.\n\nOptimize for class components\n\nChange process and callback to match the expected payload types\nfor class components. I had intended for the update queue to be reusable\nfor both class components and a future React API, but we\'ll likely have\nto fork anyway.\n\n\nOnly double-invoke render phase lifecycles functions in DEV\n\n\nUse global state to track currently processing queue in DEV\n\n', 'Exposed flushSync on the test renderer (#12672)', "Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag (#12648)\n\nRemove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag\n\nwhat is the change?:\nRemoves the feature flag 'alwaysUseRequestIdleCallbackPolyfill', such\nthat we always use the polyfill for requestIdleCallback.\nwhy make this change?:\nWe have been testing this feature flag at 100% for some time internally,\nand determined it works better for React than the native implementation.\nLooks like RN was overriding the flag to use the native when possible,\nbut since no RN products are using 'async' mode it should be safe to\nswitch this flag over for RN as well.\ntest plan:\nWe have already been testing this internally for some time.\nissue:\ninternal task t28128480\n\n\nfix mistaken conditional\n\n\nAdd mocking of rAF, postMessage, and initial test for ReactScheduler\n\n\nwhat is the change?:\n- In all tests where we previously mocked rIC or relied on native\nmocking which no longer works, we are now mocking rAF and postMessage.\n- Also adds a basic initial test for ReactScheduler.\nNOTE -> we do plan to write headless browser tests for ReactScheduler!\nThis is just an initial test, to verify that it works with the mocked\nout browser APIs as expected.\nwhy make this change?:\nWe need to mock out the browser APIs more completely for the new\n'ReactScheduler' to work in our tests. Many tests are depending on it,\nsince it's used at a low level.\nBy mocking the browser APIs rather than the 'react-scheduler' module, we\nenable testing the production bundles. This approach is trading\nisolation for accuracy. These tests will be closer to a real use.\ntest plan:\nrun the tests :)\nissue:\ninternal task T28128480", 'Revert stray console.log', 'Update bundle sizes', "Dedup conditional in ReactScheduler (#12680)\nwhat is the change?:\nWe had a condition to set either 'performance.now' or 'Date.now' as the\n'now' function.\nThen later we had another conditional checking again if\n'performance.now' was supported, and using it if so, otherwise falling\nback to 'Date.now'.\nMore efficient to just use the 'now' shortcut defined above.\nwhy make this change?:\nFewer lines, clearer code.\ntest plan:\nNow that we have tests we can run them :)", 'Remove redundant feature flag in the test due to https://github.com/facebook/react/pull/12117 (#12696)', 'forwardRef() components should not re-render on deep setState() (#12690)\n\n\nAdd a failing test for forwardRef memoization\n\n\nMemoize forwardRef props and bail out on strict equality\n\n\nBail out only when ref matches the current ref\n\n', "Don't bail on new context Provider if a legacy provider rendered above (#12586)\n\n\nDon't bail on new context Provider if a legacy provider rendered above\n\n\nAvoid an extra variable\n\n", 'Fix a context propagation bug (#12708)\n\n\nFix a context propagation bug\n\n\nAdd a regression test\n\n', 'prevent removing attributes on custom component tags (#12702)', 'Remove ES3-specific transforms (#12716)', 'Call getDerivedStateFromProps even for setState of ShallowRenderer (#12676)', 'Make React.forwardRef() components discoverable by TestRenderer traversal (#12725)', 'Add error when running jest directly (#12726)\n```\n$ jest\n FAIL  scripts/jest/dont-run-jest-directly.js\n  ● Test suite failed to run\nDon\'t run `jest` directly. Run `yarn test` instead.\n\n> 1 | throw new Error("Don\'t run `jest` directly. Run `yarn test` instead.");\n  2 |\n\n  at Object.<anonymous> (scripts/jest/dont-run-jest-directly.js:1:96)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.866s\nRan all test suites.\n```', 'Rename internal property to fix React DevTools (#12727)', "Mark context consumers with PerformedWork effect on render (#12729)\n\n\nMark new component types with PerformedWork effect\n\n\nDon't do it for ForwardRef\n\n\nSince this has some overhead and ForwardRef is likely going to be used around context, let's skip it.\nWe don't highlight ForwardRef alone in DevTools anyway.", 'setState returning null and undefined is no-op on the ShallowRenderer (#12756)', 'Minor fix params description for addPercent function (#12669)', "[schedule] Support multiple callbacks in scheduler (#12746)\n\nSupport using id to cancel scheduled callback\n\nwhat is the change?:\nsee title\nwhy make this change?:\nOnce we support multiple callbacks you will need to use the id to\nspecify which callback you mean.\ntest plan:\nAdded a test, ran all tests, lint, etc.\n\n\nran prettier\n\n\nfix lint\n\n\nUse object for storing callback info in scheduler\n\n\nWrap initial test in a describe block\n\n\nSupport multiple callbacks in ReactScheduler\n\n\nwhat is the change?:\nWe keep a queue of callbacks instead of just one at a time, and call\nthem in order first by their timeoutTime and then by the order which\nthey were scheduled in.\nwhy make this change?:\nWe plan on using this module to coordinate JS outside of React, so we\nwill need to schedule more than one callback at a time.\ntest plan:\nAdded a boatload of shiny new tests. :)\nPlus ran all the old ones.\nNOTE: The tests do not yet cover the vital logic of callbacks timing\nout, and later commits will add the missing test coverage.\n\nHeuristic to avoid looking for timed out callbacks when none timed out\n\nwhat is the change?:\nTracks the current soonest timeOut time for all scheduled callbacks.\nwhy make this change?:\nWe were checking every scheduled callback to see if it timed out on\nevery tick. It's more efficient to skip that O(n) check if we know that\nnone have timed out.\ntest plan:\nRan existing tests.\nWill write new tests to cover timeout behavior in more detail soon.\n\nPut multiple callback support under a disabled feature flag\n\nwhat is the change?:\nSee title\nwhy make this change?:\nWe don't have error handling in place yet, so should maintain the old\nbehavior until that is in place.\nBut want to get this far to continue making incremental changes.\ntest plan:\nUpdated and ran tests.\n\nHide support for multiple callbacks under a feature flag\n\nwhat is the change?:\nsee title\nwhy make this change?:\nWe haven't added error handling yet, so should not expose this feature.\ntest plan:\nRan all tests, temporarily split out the tests for multiple callbacks\ninto separate file. Will recombine once we remove the flag.\n\nFix nits from code review\n\nSee comments on https://github.com/facebook/react/pull/12743\n\n\nupdate checklist in comments\n\n\nRemove nested loop which calls additional timed out callbacks\n\n\nwhat is the change?:\nWe used to re-run any callbacks which time out whilst other callbacks\nare running, but now we will only check once for timed out callbacks\nthen then run them.\nwhy make this change?:\nTo simplify the code and the behavior of this module.\ntest plan:\nRan all existing tests.\n\nRemove feature flag\n\nwhat is the change?:\nsee title\nwhy make this change?:\nBecause only React is using this, and it sounds like async. rendering\nwon't hit any different behavior due to these changes.\ntest plan:\nExisting tests pass, and this allowed us to recombine all tests to run\nin both 'test' and 'test-build' modes.\n\n\nremove outdated file\n\n\nfix typo\n\n", 'Add Profiler component for collecting new render timing info (#12745)\nAdd a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.\nMost of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).', 'Update sizes', 'Suspense (#12279)\n\nTimeout component\n\nAdds Timeout component. If a promise is thrown from inside a Timeout component,\nReact will suspend the in-progress render from committing. When the promise\nresolves, React will retry. If the render is suspended for longer than the\nmaximum threshold, the Timeout switches to a placeholder state.\nThe timeout threshold is defined as the minimum of:\n- The expiration time of the current render\n- The ms prop given to each Timeout component in the ancestor path of the\nthrown promise.\n\nAdd a test for nested fallbacks\n\nCo-authored-by: Andrew Clark acdlite@fb.com\n\nResume on promise rejection\n\nReact should resume rendering regardless of whether it resolves\nor rejects.\n\n\nWrap Suspense code in feature flag\n\n\nChildren of a Timeout must be strict mode compatible\n\n\nAsync is not required for Suspense, but strict mode is.\n\nSimplify list of pending work\n\nSome of this was added with "soft expiration" in mind, but now with our revised\nmodel for how soft expiration will work, this isn\'t necessary.\nIt would be nice to remove more of this, but I think the list itself is inherent\nbecause we need a way to track the start times, for .\n\nOnly use the Timeout update queue to store promises, not for state\n\nIt already worked this way in practice.\n\n\nWrap more Suspense-only paths in the feature flag\n\n\nAttach promise listener immediately on suspend\n\n\nInstead of waiting for commit phase.\n\n\nInfer approximate start time using expiration time\n\n\nRemove list of pending priority levels\n\n\nWe can replicate almost all the functionality by tracking just five\nseparate levels: the highest/lowest priority pending levels, the\nhighest/lowest priority suspended levels, and the lowest pinged level.\nWe lose a bit of granularity, in that if there are multiple levels of\npending updates, only the first and last ones are known. But in practice\nthis likely isn\'t a big deal.\nThese heuristics are almost entirely isolated to a single module and\ncan be adjusted later, without API changes, if necessary.\nNon-IO-bound work is not affected at all.\n\n\nReactFiberPendingWork -> ReactFiberPendingPriority\n\n\nRenaming method names from "pending work" to "pending priority"\n\n\nGet rid of SuspenseThenable module\n\n\nIdk why I thought this was neccessary\n\n\nNits based on Sebastian\'s feedback\n\n\nMore naming nits + comments\n\n\nAdd test for hiding a suspended tree to unblock\n\n\nRevert change to expiration time rounding\n\n\nThis means you have to account for the start time approximation\nheuristic when writing Suspense tests, but that\'s going to be\ntrue regardless.\nWhen updating the tests, I also made a fix related to offscreen\npriority. We should never timeout inside a hidden tree.\n\npalceholder -> placeholder\n', 'Support sharing context objects between concurrent renderers (#12779)\n\nSupport concurrent primary and secondary renderers.\n\nAs a workaround to support multiple concurrent renderers, we categorize\nsome renderers as primary and others as secondary. We only expect\nthere to be two concurrent renderers at most: React Native (primary) and\nFabric (secondary); React DOM (primary) and React ART (secondary).\nSecondary renderers store their context values on separate fields.\n\nAdd back concurrent renderer warning\n\nOnly warn for two concurrent primary or two concurrent secondary renderers.\n\nChange "_secondary" suffix to "2"\n\nEveryBitCounts', 'Shallow renderer: pass component instance to setState updater as this (#12784)\n\n\nShallow renderer: pass component instance to setState updater as this\n\n\nRun prettier\n\n', 'Put recent change to getDerivedStateFromProps behind a feature flag (#12788)\nThis will allow us to safely ship it at Facebook and get a better idea\nfor if/how it breaks existing product code.', 'Record sizes', 'remove unused ES3-specific packages - refs #12716 (#12797)', 'Fix a typo (#12798)', 'Split ReactNoop into normal and persistent exports (#12793)\n\n\nCopy-paste ReactNoop into ReactNoopPersistent\n\n\nSplit ReactNoop into normal and persistent exports\n\n\nReactNoopShared -> createReactNoop\n\n', 'Update lockfile', 'Use Java version of Google Closure Compiler (#12800)\n\n\nmakes closure compiler threaded\n\n\nDans PR with a closure compiler java version\n\n\nRemove unused dep\n\n\nPin GCC\n\n\nPrettier\n\n\nNit rename\n\n\nFix error handling\n\n\nName plugins consistently\n\n\nFix lint\n\n\nMaybe this works?\n\n\nor this\n\n\nAppVeyor\n\n\nFix lint\n\n', "Set owner correctly inside forwardRef and context consumer (#12777)\nPreviously, _owner would be null if you create an element inside forwardRef or inside a context consumer. This is used by ReactNativeFiberInspector when traversing the hierarchy and also to give more info in some warning texts. This also means you'll now correctly get a warning if you call setState inside one of these.\nTest Plan: Tim tried it in the RN inspector.", 'Add context provider/consumer to getComponentName (#12778)\nRN Inspector uses these.', 'Mark React Native and Fabric renderers as @generated (#12801)\nMark React Native and Fabric renderers as @generated', 'Do not fire getDerivedStateFromProps unless props or state have changed (#12802)\nFixes an oversight from #12600. getDerivedStateFromProps should fire\nif either props or state have changed, but not if neither have\nchanged. This prevents a parent from re-rendering if a deep child\nreceives an update.', 'Use HostContext to warn about invalid View/Text nesting (#12766)', 'Fix Type for ReactNative.NativeComponent (#12805)', 'Move renderer host configs into separate modules (#12791)\n\n\nSeparate test renderer host config\n\n\nSeparate ART renderer host config\n\n\nSeparate ReactDOM host config\n\n\nExtract RN Fabric host config\n\n\nExtract RN host config\n\n', 'Update headers for React Native shims (#12806)', 'Use ReactFiberErrorDialog fork for Fabric renderer (#12807)', "Use global state for hasForceUpdate instead of persisting to queue (#12808)\n\nUse global state for hasForceUpdate instead of persisting to queue\n\nFixes a bug where hasForceUpdate was not reset on commit.\nIdeally we'd use a tuple and return hasForceUpdate from\nprocessUpdateQueue.\n\n\nRemove underscore and add comment\n\n\nRemove temporary variables\n\n", 'Delete ReactPerf and ReactDebugTool Stubs (#12809)', 'Remove unused context param from countChildren (#12787)', "Use browser event names for top-level event types in React DOM (#12629)\n\n\nAdd TopLevelEventTypes\n\n\nFix ReactBrowserEventEmitter\n\n\nFix EventPluginUtils\n\n\nFix TapEventPlugin\n\n\nFix ResponderEventPlugin\n\n\nUpdate ReactDOMFiberComponent\n\n\nFix BeforeInputEventPlugin\n\n\nFix ChangeEventPlugin\n\n\nFix EnterLeaveEventPlugin\n\n\nAdd missing non top event type used in ChangeEventPlugin\n\n\nFix SelectEventPlugin\n\n\nFix SimpleEventPlugin\n\n\nFix outstanding Flow issues and move TopLevelEventTypes\n\n\nInline a list of all events in ReactTestUtils\n\n\nFix tests\n\n\nMake it pretty\n\n\nFix completly unrelated typo\n\n\nDon’t use map constructor because of IE11\n\n\nUpdate typings, revert changes to native code\n\n\nMake topLevelTypes in ResponderEventPlugin injectable and create DOM and ReactNative variant\n\n\nSet proper dependencies for DOMResponderEventPlugin\n\n\nPrettify\n\n\nMake some react dom tests no longer depend on internal API\n\n\nUse factories to create top level speific generic event modules\n\n\nRemove unused dependency\n\n\nRevert exposed module renaming, hide store creation, and inline dependency decleration\n\n\nAdd Flow types to createResponderEventPlugin and its consumers\n\n\nRemove unused dependency\n\n\nUse opaque flow type for TopLevelType\n\n\nAdd missing semis\n\n\nUse raw event names as top level identifer\n\n\nUpgrade baylon\n\n\nThis is required for parsing opaque flow types in our CI tests.\n\n\nClean up flow types\n\n\nRevert Map changes of ReactBrowserEventEmitter\n\n\nUpgrade babel-* packages\n\n\nApparently local unit tests also have issues with parsing JavaScript\nmodules that contain opaque types (not sure why I didn't notice\nearlier!?).\n\n\nRevert Map changes of SimpleEventPlugin\n\n\nClean up ReactTestUtils\n\n\nAdd missing semi\n\n\nFix Flow issue\n\n\nMake TopLevelType clearer\n\n\nFavor for loops\n\n\nExplain the new DOMTopLevelEventTypes concept\n\n\nUse static injection for Responder plugin types\n\n\nRemove null check and rely on flow checks\n\n\nAdd missing ResponderEventPlugin dependencies\n\n", 'Skip special nodes when reading TestInstance.parent (#12813)', 'Try to fix Flow circular dependency', 'Try to fix Flow issue on Windows', 'Try to fix Flow issue on Windows (part 3)', 'Try to fix Flow issue on Windows (part 4)', 'Try to fix Flow issue on Windows (part 5)', 'Revert recent Flow changes', 'Try another approach at fixing Windows Flow issues', 'Tweak comments', 'Delete React Call/Return experiment (#12820)', 'Only measure "base" times within ProfileMode (#12821)\n\nConditionally start/stop base timer only within Profile mode tree\nAdded test to ensure ProfilerTimer not called outside of Profiler root\n', 'Add FB www build of simple-cache-provider (#12822)', 'Pass instance handle to all Fabric clone methods (#12824)\nWe might need this in the future if we want to ensure event handler\nconsistency when an event handler target has been removed before it is\ncalled.', 'Enable Profiler timing for DOM and RN dev bundles (#12823)\n\nEnable Profiler timing for DOM and RN dev bundles\nDisable enableProfilerTimer feature flag for ReactIncrementalPerf-test\n', 'Support Pointer Events (#12507)\n\n\nSupport Pointer Events\n\n\nAdd Pointer Events DOM Fixture\n\n', "Rename Scheduler methods more accurately (#12770)\n\nRename Scheduler methods more accurately\n\nwhat is the change?:\nrIC -> scheduleCallback\nWe will later expose a second method for different priority level, name\nTBD. Since we only have one priority right now we can delay the\nbikeshedding about the priority names.\ncIC -> cancelScheduledCallback\nThis method can be used to cancel callbacks scheduled at any priority\nlevel, and will remain named this way.\nwhy make this change?:\nOriginally this module contained a polyfill for requestIdleCallback\nand cancelIdleCallback but we are changing the behavior so it's no\nlonger just a polyfill. The new names are more semantic and distinguish\nthis from the original polyfill functionality.\ntest plan:\nRan the tests\nwhy make this change?:\nGetting this out of the way so things are more clear.\nComing Up Next:\n- Switching from a Map of ids and an array to a linked list for storing\ncallbacks.\n- Error handling\n\n\ncallback -> work\n\n\nupdate callsites in new places after rebase\n\n\nfix typo\n\n", "Quick fix for ReactScheduler type inconsistency (#12828)\nwhat is the change?:\nIn some cases we had defined the 'callback' as taking two arguments,\nwhen really we meant to indicate the second argument passed to\n'scheduleWork'.\nwhy make this change?:\nFor correctness and to unblock something @gaearon is working on. A bit\nsurprised Flow didn't catch this in the first place.\ntest plan:\nRan tests, flow, lint.", 'Remove Timeout export on React object unless enableSuspense flag (#12833)', "Quick fix for minor typo in ReactScheduler (#12834)\nwhat is the change?:\nWe were setting a flag after some early returns, should have set it\nright away.\nTo be fair, it's not clear how you can hit a problem with the current\nstate of things. Even if a callback is cancelled, it's still in the\n'pendingCallbacks' queue until the rAF runs, and we only schedule a rAF\nwhen there are pendingCallbacks in the queue.\nBut since this is obviously wrong, going to fix it.\nWe will be adding a regression test in a follow-up PR.\nwhy make this change?:\nTo fix a random bug which was popping up.\ntest plan:\nAdding a regression unit test in a follow-up PR.", 'Removed duplicate feature flag in test (#12836)', "Relax current renderer warning (#12838)\nIf you use an older version of react this won't get initialized to null. We don't really need it to be initialized to work.", 'Separate yarn flow and yarn flow-ci (#12841)', 'Make REACT_PROFILER_TYPE numeric value unique (#12843)', "Temporary fix for grabbing wrong rAF polyfill in ReactScheduler (#12837)\n\nTemporary fix for grabbing wrong rAF polyfill in ReactScheduler\n\nwhat is the change?:\nFor now...\nWe need to grab a slightly different implementation of rAF internally at\nFB than in Open Source. Making rAF a dependency of the ReactScheduler\nmodule allows us to fork the dependency at FB.\nNOTE: After this lands we have an alternative plan to make this module\nseparate from React and require it before our Facebook timer polyfills\nare applied. But want to land this now to keep master in a working state\nand fix bugs folks are seeing at Facebook.\nThanks @sebmarkbage @acdlite and @sophiebits for discussing the options\nand trade-offs for solving this issue.\nwhy make this change?:\nThis fixes a problem we're running into when experimenting with\nReactScheduler internally at Facebook, *and it's part of our long term\nplan to use dependency injection with the scheduler to make it easier to\ntest and adjust.\ntest plan:\nRan tests, lint, flow, and will manually test when syncing into\nFacebook's codebase.\nissue:\nSee internal task T29442940\n\nran prettier\n", "Re-enable Flow for ReactFiber and fix Flow issues (#12842)\n\n\nLint for untyped imports and enable Flow typing in ReactFiber\n\n\nRe-enable Flow for ReactFiber and fix Flow issues\n\n\nAvoid an invariant in DEV-only code\n\n\nI just introduced it, but on a second thought, it's better to keep it as a warning.\n\nAddress review\n", 'getPeerGlobals should check bundleType instead of moduleType (#12839)', 'Run the CI script on Windows', "[Fabric] Wire up event emitters (#12847)\nI'm exposing a new native method to wire up the event emitter. This will\nuse a straight fiber pointer instead of react tags to do the dispatching.", 'Remove incorrect comment\nBetter to not have it than it being wrong.', "Run Flow for each renderer separately (#12846)\n\nGenerate Flow config on install\n\nWe'll need to do pre-renderer Flow passes with different configs.\nThis is the first step to get it working. We only want the original version checked in.\n\n\nCreate multiple Flow configs from a template\n\n\nRun Flow per renderer\n\n\nLint\n\n\nRevert the environment consolidation\n\n\nI thought this would be a bit cleaner at first because we now have non-environment files in this directory.\nBut Sebastian is changing these files at the same time so I want to avoid conflicts and keep the PR more tightly scoped. Undo.\n\nMisc\n", 'Fix sample command in scripts/bench/README.md (#12853)', 'Try to fix Windows CI', 'Add test to ensure no duplicate values in ReactSymbols (#12845)', "High pri - ensure we call timed out callbacks in schedule (#12857)\nwhat is the change?:\nFix a typo which caused timed out callbacks to not be called.\nwhy make this change?:\nThis is a bug caught by tests I'm in the process of writing, and we\nshould fix it asap.\ntest plan:\nTests in a WIP PR - will push and share the WIP test in comments on this\nPR.", 'Adds ReactScheduler red->green unit test for bug fixed in #12834 (#12861)\n\n\nScheduler red->green unit test for bug\n\n\nfix lint issue\n\n\nran prettier\n\n', "Resolve host configs at build time (#12792)\n\nExtract base Jest config\n\nThis makes it easier to change the source config without affecting the build test config.\n\nStatically import the host config\n\nThis changes react-reconciler to import HostConfig instead of getting it through a function argument.\nRather than start with packages like ReactDOM that want to inline it, I started with React Noop and ensured that custom renderers using react-reconciler package still work. To do this, I'm making HostConfig module in the reconciler look at a global variable by default (which, in case of the react-reconciler npm package, ends up being the host config argument in the top-level scope).\nThis is still very broken.\n\n\nAdd scaffolding for importing an inlined renderer\n\n\nFix the build\n\n\nES exports for renderer methods\n\n\nES modules for host configs\n\n\nRemove closures from the reconciler\n\n\nCheck each renderer's config with Flow\n\n\nFix uncovered Flow issue\n\n\nWe know nextHydratableInstance doesn't get mutated inside this function, but Flow doesn't so it thinks it may be null.\nHelp Flow.\n\n\nPrettier\n\n\nGet rid of enable*Reconciler flags\n\n\nThey are not as useful anymore because for almost all cases (except third party renderers) we know whether it supports mutation or persistence.\nThis refactoring means react-reconciler and react-reconciler/persistent third-party packages now ship the same thing.\nNot ideal, but this seems worth how simpler the code becomes. We can later look into addressing it by having a single toggle instead.\n\n\nPrettier again\n\n\nFix Flow config creation issue\n\n\nFix imprecise Flow typing\n\n\nRevert accidental changes\n\n", 'Temporarily disable Flow on AppVeyor\nI think it runs out of memory. I’ll reenable if we can bump the limit.', 'https in reactProdInvariant text (#12869)', "Fix react native example links in README of 'react-reconciler' (#12871)", 'add netlify toml file (#12350)', 'Add a clear error when renderers clash in tests (#12867)', 'Treat Rollup "warnings" as errors (#12868)', 'Update Jest (#12874)', 'Pass "start time" and "commit time" to Profiler callback (#12852)\n\nAdded start time parameter to Profiler onRender callback\nProfiler also captures commit time\nOnly init Profiler stateNode if enableProfilerTimer feature flag enabled\n', 'Update Flow to 0.70 (#12875)\n\n\nUpdate Flow to 0.70\n\n\nRemove unnecessary condition\n\n\nFix wrong assertion\n\n\nStrict check\n\n', 'Try to reenable Flow on Windows CI\nWe should have more memory now', "Fix double-firing submit events (#12877)\nWe were adding a listener at the root when we weren't meant to. Blames to e96dc140599363029bd05565d58bcd4a432db370.\nThis now alerts once (at FORM) instead of twice (at FORM, #document):\nvar Hello = class extends React.Component {\n  render() {\n    return (\n      <form onSubmit={(e) => {e.preventDefault(); alert('hi ' + e.nativeEvent.currentTarget.nodeName);}}>\n        <button>hi</button>\n      </form>\n    );\n  }\n};", "Tests and fixes for 'timing out' behavior (#12858)\nwhat is the change?:\nTest coverage checking that callbacks are called when they time out.\nThis test surfaced a bug and this commit includes the fix.\nI want to refine this approach, but basically we can simulate time outs\nby controlling the return value of 'now()' and the argument passed to\nthe rAF callback.\nNext we will write a browser fixture to further test this against real\nbrowser APIs.\nwhy make this change?:\nBetter tests will keep this module working smoothly while we continue\nrefactoring and improving it.\ntest plan:\nRun the new tests, see that it fails without the bug fix.", 'Rollup freeze: false (#12879)\n\nTell Rollup not to freeze bundles\nOnly freeze bundles for DEV builds\n', 'Fix a regression that caused us to listen to extra events at the top (#12878)\n\nRewrite to a switch\n\nI find it a bit easier to follow than many comparison conditions.\n\nRemove unnecessary assignments\n\nThey are being assigned below anyway. This is likely a copypasta from the FOCUS/BLUR special case (which does need those assignments).\n\nUnify "cancel" and "close" cases\n\nTheir logic is identical.\n\n\nDon\'t listen to media events at the top\n\n\nAdd a unit test for double-invoking form events\n\n\nRemove an unused case and document it in a test\n\n\nThe case I added was wrong (just like including this event in the top level list was always wrong).\nIn fact it never bubbles, even for . And since we don\'t special case it in the  event\nattachment logic when we create it, we never supported  at all.\nWe could fix it. But Chrome doesn\'t support it either: https://bugs.chromium.org/p/chromium/issues/detail?id=458851.\nNobody asked us for it yet. And supporting it would require attaching an extra listener to every .\nSo maybe we don\'t need it? Let\'s document the existing state of things.\n\n\nAdd a test verifying we don\'t attach unnecessary listeners\n\n\nAdd a comment\n\n\nAdd a test for submit (bubbles: false)\n\n', 'add legacy context API warning in strict mode (#12849)\n\n\nadd legacy context APIs warning in strict mode\n\n\nrefactor if statement and the warning message\n\n\nadd other flags for type check\n\n\nadd component stack tree and refactor wording\n\n\nfix the nits\n\n', 'add siblings Timeout components test case (#12862)', 'Add upcoming 16.4.0 changelog', 'Tweak the changelog', 'Fix a typo (#12889)', 'Add React.Timeout to getComponentName (#12890)', 'add functional components warning about legacy context api (#12892)', 'Updating yarn.lock file for 16.4.0 release', 'Updating package versions for release 16.4.0', 'Update error codes for 16.4.0 release', 'Update bundle sizes for 16.4.0 release']v16.3.2 16.3.2 (April 16, 2018)
React

Improve the error message when passing null or undefined to React.cloneElement. (@nicolevy in #12534)

React DOM

Fix an IE crash in development when using <StrictMode>. (@bvaughn in #12546)
Fix labels in User Timing measurements for new component types. (@bvaughn in #12609)
Improve the warning about wrong component type casing. (@nicolevy in #12533)
Improve general performance in development mode. (@gaearon in #12537)
Improve performance of the experimental unstable_observedBits API with nesting. (@gaearon in #12543)

React Test Renderer

Add a UMD build. (@bvaughn in #12594)
 ['Changelog for 16.3.1', 'Add a build step to hoist warning conditions (#12537)', "Don't render bitmask-bailing consumers even if there's a deeper matching child (#12543)\n\n\nDon't render consumers that bailed out with bitmask even if there's a deeper matching child\n\n\nUse a render prop in the test\n\n\nWithout it,  doesn't do anything because we bail out on constant element anyway.\nThat's not what we're testing, and could be confusing.", 'facebook.github.io/react -> reactjs.org (#12545)', 'Removed duplicate typeof check (#12541)', 'Removed Array.from() usage (#12546)', "Clarify ReactDOM's case warning for html tags (#12533)\n\n\nupdate warning text\n\n\nupdate tests to match\n\n\nyarn prettier\n\n\ninclude note on HTML5 custom elements\n\n\ndan’s copy suggestion\n\n\nremove ‘letters’\n\n", "Expose component stack from reactTag to React Native renderer (#12549)\nThis is not safe in general and therefore shouldn't be exposed to anything\nother than React Native internals.\nIt will also need a different version in Fabric that will not have the\nreactTag exposed.", "Move TouchHistoryMath to React Native repo (#12557)\nThis isn't used by React core and is just a pure helper so it might as\nwell live where it's used. The React Native repo.", 'Bug fix', "Remove flushSync from React Native (#12565)\nThere are no plans to enable async in the old renderer. In the new renderer\nit only really makes sense to do from the main thread and probably from\nnative since it'll have to yield to native first.", "Support findNodeHandle in Fabric (#12573)\nThis doesn't actually need to share any state because it goes through\nthe instance to the fiber structure. Since Fabric is on the same version\nas RN, calling it on either renderer works.", '[RN] Move takeSnapshot to RN (#12574)\nIt only uses public APIs. I have a diff on the other side.', 'Keep consistency in the comment (#12579)', 'Must be a before PlacementAndUpdate (#12580)', 'Preserve error codes for invariants on www (#12539)\n\n\nPreserve error codes for invariants on www\n\n\nRemove unintentional change\n\n', 'Unfork invariant and instead use it from reactProdInvariant (#12585)', 'Throw more specific error if passed undefined in React.cloneElement (#12534)\n\n\nthrow error if passed undefined\n\n\nshould be TypeError\n\n\nsimplify\n\n\nuse invariant\n\n\neditor messed up spacing\n\n\nbetter check\n\n\nRevert "better check"\n\n\nThis reverts commit 273370758eafa54d329577b3dc942c70587eccd3.\n\n\nyarn prettier test was failing\n\n\nmore explicit copy\n\n\nes6 import\n\n\ntests\n\n\nformatting\n\n\nMove import\n\n', 'Allocate unique reactTags for RN and Fabric (#12587)\nTook this opportunity to remove some abstract overhead.\nIn Fabric it is extra simple since they no longer overlap with root tags.', "Remove ReactNativePropRegistry (#12559)\nThis has always been an unnecessary indirection to protect opaqueness,\nwhich hasn't really worked out.", "[RN] Remove unstable_batchedUpdates and unmountComponentAtNodeAndRemoveContainer from Fabric (#12571)\nThese don't make much sense in Fabric, since Fabric will be async by default only.\nAnd unmount+remove container is a sketchy API we should remove so we might\nas well make sure modern containers enforce that.", 'Consolidate eventTypes registry with view configs (#12556)\nWe already have one stateful module that contains all the view config.\nWe might as well store the event types there too. That way the shared\nstate is compartmentalized (and I can move it out in a follow up PR).\nThe view config registry also already has an appropriate place to call\nprocessEventTypes so now we no longer have to do it in RN.\nWill follow up with a PR to RN to remove that call.', "[RN] Move view config registry to shims (#12569)\n\nMove view config registry to shims\n\nThis ensures that both Fabric and RN renderers share the same view config\nregistry since it is stateful.\nI had to duplicate in the mocks for testing.\n\nMove createReactNativeComponentClass to shims and delete internal usage\n\nSince createReactNativeComponentClass is just an alias for the register\nthere's no need to bundle it. This file should probably just move back\nto RN too.", "Refactor findHostInstance and findNodeHandle (#12575)\n\nMove findNodeHandle into the renderers and use instantiation\n\nThis is just like ReactDOM does it. This also lets us get rid of injection\nfor findNodeHandle. Instead I move NativeMethodsMixin and ReactNativeComponent\nto use instantiation.\n\nRefactor findHostInstance\n\nThe reconciler shouldn't expose the Fiber data structure. We should pass\nthe component instance to the reconciler, since the reconciler is the\nthing that is supposed to be instancemap aware.\n\nFix devtools injection\n", 'createReactNativeComponentClass needs to be CommonJS\noops', 'Fixes language in error message. (#12590)', 'Added UMD build to test renderer package (#12594)', 'Remove @providesModule in www shims', "Bump expiration for interactive updates to 150ms in production (#12599)\n\nBump expiration for interactive updates to 150ms in production\n\nwhat is the change?:\nChanges the expiration deadline from 500ms to 150ms, only in production.\nIn development it will still be 500ms.\nI'm thinking we may want to change the 'bucket size' too, will look into\nthat a bit.\nwhy make this change?:\nWe need to ensure interactions are responsive enough in order to gather\nmore test data on async. mode.\ntest plan:\nNo tests failed - where shall we add a test for this?\n\nAdd comments\n", "[Danger] Minor fixes (#12606)\n\nDon't download bundle stats from master on CI\n\nThis was temporarily necessary in the past because we didn't have the logic that downloads actual merge base stats.\nWe do have that now as part of the Danger script. So we can remove this.\n\n\nUse absolute threshold for whether to show a change\n\n\nDownload master stats, but only for other master builds\n\n\nRewrite sizes\n\n", 'Fixed debug performance labels for new component types (#12609)\n\nAdded new debug performance tests for AsyncMode, StrictMode, forwardRef, and context provider/consumer components.\nUpdated performance labels to exclude AsyncMode and StrictMode.\nAdded labels for forwardRef (and inner function) that mirror DevTools labels.\n', 'Update GCC (#12618)', 'tests: add regression test for reading ReactCurrentOwner stateNode (#12412)\n\n\ntests: add regression test for reading ReactCurrentOwner stateNode\n\n\ntests: replace expect with just rendering the component\n\n', 'Fix small typos in create-subscription readme (#12399)', 'Fix documentation of the release process (#12337)\n\n\nAdusted grammar in release script readme.\n\n\nAdjusts title and explanation about the release process.\n\n', 'Updating yarn.lock file for 16.3.2 release', 'Updating package versions for release 16.3.2', 'Update error codes for 16.3.2 release', 'Update bundle sizes for 16.3.2 release']v16.3.1 16.3.1 (April 3, 2018)
React

Fix a false positive warning in IE11 when using Fragment. (@heikkilamarko in #12504)
Prefix a private API. (@Andarist in #12501)
Improve the warning when calling setState() in constructor. (@gaearon in #12532)

React DOM

Fix getDerivedStateFromProps() not getting applied in some cases. (@acdlite in #12528)
Fix a performance regression in development mode. (@gaearon in #12510)
Fix error handling bugs in development mode. (@gaearon and @acdlite in #12508)
Improve user timing API messages for profiling. (@flarnie in #12384)

Create Subscription

Set the package version to be in sync with React releases. (@bvaughn in #12526)
Add a peer dependency on React 16.3+. (@NMinhNguyen in #12496)
 ['Add React 16.3.0 changelog (#12488)', 'Fix links', 'Move context API in Changelog to "React" section', 'Fix method name in changelog', "Change create-subscription's peerDep on react to ^16.3.0 (#12496)", 'Validate React.Fragment props without Map. (#12504)', 'Fix DEV performance regression by avoiding Object.assign on Fibers (#12510)\n\n\nFix DEV performance regression by avoiding Object.assign on Fibers\n\n\nReduce allocations in hot path by reusing the stash\n\n\nSince performUnitOfWork() is not reentrant, it should be safe to reuse the same stash every time instead of creating a new object.', 'Add missing changelog item', "Update user timing to record when we are about to commit (#12384)\n\nUpdate user timing to record when we are about to commit\n\nwhat is the change?:\nAfter repeatedly logging '(React Tree Reconciliation)' we vary the\nmessage slightly for the last reconciliation, which happens right before\nwe commit.\nwhy make this change?:\nWhen debugging performance in the devtools it will be helpful if we can\nquickly see where the 'commit' happens in a potentially long list of\nsliced '(React Tree Reconciliation)' logs.\ntest plan:\nBuilt and ran one of the fixtures. Also ran the unit test.\n(Flarnie will insert a screenshot)\n\n\nRan prettier\n\n\nFixes in response to code review\n\n\nUpdate snapshot tests\n\n\nMove isWorking assignment out of branches to top\n\n\nStricter type for stopWorkLoopTimer args\n\n", "Fix context stack misalignment caused by error replay (#12508)\n\n\nAdd regression tests for error boundary replay bugs\n\n\nEnsure the context stack is aligned if renderer throws\n\n\nAlways throw when replaying a failed unit of work\n\n\nReplaying a failed unit of work should always throw, because the render\nphase is meant to be idempotent, If it doesn't throw, rethrow the\noriginal error, so React's internal stack is not misaligned.\n\n\nReset originalReplayError after replaying\n\n\nTypo fix\n\n", 'Extract throw to separate function so performUnitOfWork does not deopt (#12521)\nOnly affects DEV mode, but still important I think.', "Prefix _context property on returned ReactContext from createContext - it's private (#12501)", 'Bumped create-subscription package version (#12526)', 'Remove @providesModule in www bundles (#12529)', "getDerivedStateFrom{Props,Catch} should update updateQueue.baseState (#12528)\nBased on a bug found in UFI2.\nThere have been several bugs related to the update queue (and\nspecifically baseState) recently, so I'm going to follow-up with some\nrefactoring to clean it up. This is a quick fix so we can ship a\npatch release.", 'Improve not-yet-mounted setState warning (#12531)\n\n\nTweak not-yet-mounted setState warning\n\n\nAdd \\n\\n\n\n', 'Follow up: make new warning less wordy (#12532)', 'Updating yarn.lock file for 16.3.1 release', 'Updating package versions for release 16.3.1', 'Update bundle sizes for 16.3.1 release']v16.3.0 16.3.0 (March 29, 2018)
React

Add a new officially supported context API. (@acdlite in #11818)
Add a new React.createRef() API as an ergonomic alternative to callback refs. (@trueadm in #12162)
Add a new React.forwardRef() API to let components forward their refs to a child. (@bvaughn in #12346)
Fix a false positive warning in IE11 when using React.Fragment. (@XaveScor in #11823)
Replace React.unstable_AsyncComponent with React.unstable_AsyncMode. (@acdlite in #12117)
Improve the error message when calling setState() on an unmounted component. (@sophiebits in #12347)

React DOM

Add a new getDerivedStateFromProps() lifecycle and UNSAFE_ aliases for the legacy lifecycles. (@bvaughn in #12028)
Add a new getSnapshotBeforeUpdate() lifecycle. (@bvaughn in #12404)
Add a new <React.StrictMode> wrapper to help prepare apps for async rendering. (@bvaughn in #12083)
Add support for onLoad and onError events on the <link> tag. (@roderickhsiao in #11825)
Add support for noModule boolean attribute on the <script> tag. (@aweary in #11900)
Fix minor DOM input bugs in IE and Safari. (@nhunzaker in #11534)
Correctly detect Ctrl + Enter in onKeyPress in more browsers. (@nstraub in #10514)
Fix containing elements getting focused on SSR markup mismatch. (@koba04 in #11737)
Fix value and defaultValue to ignore Symbol values. (@nhunzaker in #11741)
Fix refs to class components not getting cleaned up when the attribute is removed. (@bvaughn in #12178)
Fix an IE/Edge issue when rendering inputs into a different window. (@M-ZubairAhmed in #11870)
Throw with a meaningful message if the component runs after jsdom has been destroyed. (@gaearon in #11677)
Don't crash if there is a global variable called opera with a null value. @alisherdavronov in #11854)
Don't check for old versions of Opera. (@skiritsis in #11921)
Deduplicate warning messages about <option selected>. (@watadarkstar in #11821)
Deduplicate warning messages about invalid callback. (@yenshih in #11833)
Deprecate ReactDOM.unstable_createPortal() in favor of ReactDOM.createPortal(). (@prometheansacrifice in #11747)
Don't emit User Timing entries for context types. (@abhaynikam in #12250)
Improve the error message when context consumer child isn't a function. (@raunofreiberg in #12267) 
Improve the error message when adding a ref to a functional component. (@skiritsis in #11782)

React DOM Server

Prevent an infinite loop when attempting to render portals with SSR. (@gaearon in #11709)
Warn if a class doesn't extend React.Component. (@wyze in #11993)
Fix an issue with this.state of different components getting mixed up. (@sophiebits in #12323)
Provide a better message when component type is undefined. (@HeroProtagonist in #11966)

React Test Renderer

Fix handling of fragments in toTree(). (@maciej-ka in #12107 and @gaearon in #12154)
Shallow renderer should assign state to null for components that don't set it. (@jwbay in #11965)
Shallow renderer should filter legacy context according to contextTypes. (@koba04 in #11922)
Add an unstable API for testing asynchronous rendering. (@acdlite in #12478)

React Is (New)

First release of the new package that libraries can use to detect different React node types. (@bvaughn in #12199)
Add ReactIs.isValidElementType() to help higher-order components validate their inputs. (@jamesreggio in #12483)

React Lifecycles Compat (New)

First release of the new package to help library developers target multiple versions of React. (@bvaughn in #12105)

Create Subscription (New)

First release of the new package to subscribe to external data sources safely for async rendering. (@bvaughn in #12325)

React Reconciler (Experimental)

Expose react-reconciler/persistent for building renderers that use persistent data structures. (@gaearon in #12156)
Pass host context to finalizeInitialChildren(). (@jquense in #11970)
Remove useSyncScheduling from the host config. (@acdlite in #11771)

React Call Return (Experimental)

Fix a crash on updates. (@rmhartog in #11955)
 ['Blacklist spyOn(). Add explicit spyOnProd() and spyOnDevAndProd() (#11691)\n\n\nBlacklist spyOn(). Add explicit spyOnProd() and spyOnDevAndProd()\n\n\nWording tweak.\n\n\nFixed lint no-shadow warning\n\n', 'Fix CI fact uploading (#11693)', 'Stop ESLint from looking for a configuration file in parent folders (#11695)', 'Add 16.2.0 to changelog', 'Added ReactFeatureFlags shim for React Native (#11694)\n\n\nAdded ReactFeatureFlags shim for React Native\n\n\nFixed header license comment\n\n', 'root.createBatch (#11473)\nAPI for batching top-level updates and deferring the commit.\n\nroot.createBatch creates a batch with an async expiration time\n  associated with it.\nbatch.render updates the children that the batch renders.\nbatch.then resolves when the root has completed.\nbatch.commit synchronously flushes any remaining work and commits.\n\nNo two batches can have the same expiration time. The only way to\ncommit a batch is by calling its commit method. E.g. flushing one\nbatch will not cause a different batch to also flush.', 'Always set pendingProps to the next props (#11580)\nIn the current implementation, pendingProps is null if there are no new\nprops since the last commit. When that happens, we bail out and reuse\nthe current props.\nBut it makes more sense to always set pendingProps to whatever the next\nprops will be. In other words, pendingProps is never null: it points to\neither new props, or to the current props. Modeling it this way lets us\ndelete lots of code branches and is easier to reason about bail outs:\njust compare the pending props to the current props.', 'refactor: scripts/error-codes (#11697)\nConvert scripts/error-codes to use ES6 syntax', "Rewrite ReactTreeTraversal-test.js using public APIs (#11664)\n\n\nrewrite two phase traversal tests with public APIs\n\n\nrewrite enter/leave tests\n\n\nlift render into beforeEach, organise variables\n\n\nmove getLowestCommonAncestor test\n\n\nremove internal tree traversal test\n\n\nfix linter errors\n\n\nmove creation of outer nodes into {before,after}Each\n\n\nexplain why getLowestCommonAncestor test was moved\n\n\nremove unnessecary ARG and ARG2 token\n\n\nthese were used for testing the internal API to simulate synthetic\nevents passed to traverseEnterLeave. since we're now dealing with\nactual synthetic events we can remove them.\n\nrun prettier\n", 'Try to fix AppVeyor (#11702)', 'Add more tasks to AppVeyor', 'Disable Flow on AppVeyor', 'Delete Fiber test tracker (#11704)', 'Throw if document is missing by the time invokeGuardedCallbackDev runs (#11677)\n\n\nWarn if document is missing by the time invokeGuardedCallback runs in DEV\n\n\nTypo\n\n\nAdd a comment\n\n\nUse invariant() instead\n\n\nCreate event immediately for clarity\n\n', 'Fixes path in package.json build script (#11707)', 'Deprecate injecting custom event plugins (#11690)\n\n\nDeprecate injecting custom event plugins\n\n\nFix up tests\n\n\nFix CI\n\n\noh noes\n\n', 'Remove empty value for boolean attributes in SSR (#11708)', 'Prevent infinite loop when SSR-rendering a portal (#11709)', 'Rewrite SelectEventPlugin-test to test behavior using Public API (#11299) (#11676)\n\n\nRewrite SelectEventPlugin-test to test behavior using Public API\n\n\nMinor refactor\n\n\nMake sure that we test that "focus" event is ignored\nUse newer API when creating events\n\n\nRewrote the other test to use Public API as well\n\n\nTweak the test\n\n\nRemove -internal suffix\n\n\nOops\n\n', 'Record sizes', 'events: convert var to let/const (#11714)', 'react: convert var to let/const (#11715)', 'Unify the way we fork modules (#11711)\n\n\nUnify the way we fork modules\n\n\nReplace rollup-plugin-alias with our own plugin\n\n\nThis does exactly what we need and doesn\'t suffer from https://github.com/rollup/rollup-plugin-alias/issues/34.\n\n\nMove the new plugin to its own file\n\n\nRename variable for consistency\n\n\nI settled on calling them "forks" since we already have a different concept of "shims".\n\nMove fork config into its own file\n', 'react-art: convert var to let/const (#11720)', 'Fix issues with the new fork plugin (#11723)', 'Replace ReactFiberErrorLogger injection with static forks (#11717)', 'Ensure ReactFiberErrorDialogWWW.showErrorDialog exists', 'Rewrote ReactIncrementalPerf-test using only public API.(#11299) (#11724)\n\n\nWIP:use public API\n\n\nReactPortal shifted to shared:all passed\n\n\nwrote createPortal method for ReactNoop.(#11299)\n\n\nimported ReactNodeList type into ReactNoop.(#11299)\n\n\ncreatePortal method implemented.(#11299)\n\n\nexec yarn prettier-all.(#11299)\n\n', "Use static injection for ReactErrorUtils (#11725)\n\nUse this inside invokeGuardedCallback\n\nIt's slightly odd but that's exactly how our www fork works.\nMight as well do it in the open source version to make it clear we rely on context here.\n\nMove invokeGuardedCallback into a separate file\n\nThis lets us introduce forks for it.\n\n\nAdd a www fork for invokeGuardedCallback\n\n\nFix Flow\n\n", 'Test: create TapEventPlugin-test (#11727)\n\n\nTest: create TapEventPlugin-test\n\n\nmove TapEventPlugin to TapEventPlugin-test.internal.js from ReactBrowserEventEmitter-test.internal.js\n\n\nPrittier: run prittier\n\n\nrun prittier\n\n\nFix: fix CI test error\n\n\nfix CI test error by lint\n\n\nTest: remove TapEventPlugin test code\n\n\nremove TapEventPlugin test code from ReactBrowserEventEmitter-test.internal.js\n\n', "Use defaultValue instead of setAttribute('value') (#11534)\n\nUse defaultValue instead of setAttribute('value')\n\nThis commit replaces the method of synchronizing an input's value\nattribute from using setAttribute to assigning defaultValue. This has\nseveral benefits:\n\nFixes issue where IE10+ and Edge password icon disappears (#7328)\nFixes issue where toggling input types hides display value on dates\n  in Safari (unreported)\n\nRemoves mutationMethod behaviors from DOMPropertyOperations\n\n\ninitialValue in Input wrapperState is always a string\n\n\nThe value property is assigned before the value attribute. Fix related tests.\n\n\nRemove initial value tests in ReactDOMInput\n\n\nI added these tests after removing the value mutation\nmethod. However they do not add any additional value over existing\ntests.\n\n\nImprove clarity of value checks in ReactDOMInput.postMountWrapper\n\n\nRemove value and defaultValue from InputWithWrapperState type\n\n\nThey are already included in the type definition for HTMLInputElement\n\nInline stringification of value in ReactDOMInput\n\nAvoids eagier stringification and makes usage more consistent.\n\nUse consistent value/defaultValue presence in postMountHook\n\nOther methods in ReactDOMInput check for null instead of\nhasOwnProperty.\n\n\nAdd missing semicolon\n\n\nRemove unused value argument in ReactDOMInput test\n\n\nAddress cases where a value switches to undefined\n\n\nWhen a controlled input value switches to undefined, it reverts back\nto the initial state of the controlled input.\nWe didn't have test coverage for this case, so I've added two describe\nblocks to cover both null and undefined.", 'react-native-renderer: convert vars to let/const (#11722)', 'react-rt-renderer, react-cs-renderer, react-call-return: Convert vars to let/const   (#11721)\n\n\nreact-call-return: convert var to let/const\n\n\nreact-cs-renderer: convert var to let/const\n\n\nreact-rt-renderer: convert var to let/const\n\n', "Move HTML and SVG configs into DOMProperty (#11728)\n\n\nInline HTML and SVG configs into DOMProperty\n\n\nReplace invariants with warnings\n\n\nThese invariants can only happen if we mess up, and happen during init time.\nSo it's safe to make these warnings, as they would fail the tests anyway.\n\nClearer variable naming\n", 'react-reconciler: convert vars into let/const (#11729)', 'react-test-renderer: convert vars into let/const (#11731)', 'shared: convert vars into let/const (#11730)', 'Record sizes', 'Remove dead code from DOMPropertyOperations (#11740)', 'Add explicit warning assertions to ReactDOMInput-test (#11744)', "Update the attribute table\n\nthe capture attribute changed in #11424\nchanges to value/defaultValue handling of functions/Symbols are from #11534, but as per https://github.com/facebook/react/issues/11734#issuecomment-348595047 this is actually not a new problem so we're okay with it\n", 'Fix benchmark runner (#11749)', 'Add a test for bad Map polyfill, and work around Rollup bug (#11745)\n\n\nAdd a test for bad Map polyfill\n\n\nAdd a workaround for the Rollup bug\n\n\nAdd a link to the bug URL\n\n', "Use the same value synchronization function on number blur (#11746)\nI updated ReactDOMInput.synchronizeDefaultValue such that it assignes\nthe defaultValue property instead of the value attribute. I never\nfollowed up on the ChangeEventPlugin's on blur behavior.", 'Pin lighthouse at 2.0.0', 'Add test fixture for initial input validation bug in Firefox (#11760)', "Ensure value and defaultValue do not assign functions and symbols (#11741)\n\n\nEnsure value and defaultValue do not assign functions and symbols\n\n\nEliminate assignProperty method from ReactDOMInput\n\n\nRestore original placement of defaultValue reservedProp\n\n\nReduce branching. Make assignment more consistent\n\n\nControl for warnings in symbol/function tests\n\n\nAdd boolean to readOnly assignments\n\n\nTweak the tests\n\n\nInvalid value attributes should convert to an empty string\n\n\nRevert ChangeEventPlugin update. See #11746\n\n\nFormat\n\n\nReplace shouldSetAttribute call with value specific type check\n\n\nDOMProperty.shouldSetAttribute runs a few other checks that aren't\nappropriate for determining if a value or defaultValue should be\nassigned on an input. This commit replaces that call with an input\nspecific check.\n\n\nRemove unused import\n\n\nEliminate unnecessary numeric equality checks (#11751)\n\n\nEliminate unnecessary numeric equality checks\n\n\nThis commit changes the way numeric equality for number inputs works\nsuch that it compares against input.valueAsNumber. This eliminates\nquite a bit of branching around numeric equality.\n\n\nThere is no need to compare valueAsNumber\n\n\nAdd test cases for empty string to 0.\n\n\nAvoid implicit boolean JSX props\n\n\nSplit up numeric equality test to isolate eslint disable command\n\n\nFix typo in ReactDOMInput test\n\n\nAdd todos\n\n\nUpdate the attribute table\n\n", 'Remove the unused shim', "ReactDOM.createRoot creates an async root (#11769)\nMakes createRoot the opt-in API for async updates. Now we don't have\nto check the top-level element to see if it's an async container.", 'Remove vars (#11766)\n\n\nreact: convert packages/react\n\n\nreact-reconciler: convert packages/react-reconciler\n\n\nreact-noop-renderer: convert packages/react-noop-renderer\n\n\nreact-dom: convert packages/react-dom/src/shared\n\n\nreact-dom: convert packages/react-dom/src/server\n\n', "Issue #11257(Updated) - Change build process to include npm pack and unpacking (#11750)\n\n\nChange build process to include npm pack and unpacking generated packages to corresponding build directories.\n\n\nUpdate function name, change to use os's default temp directory\n\n\nappending uuid to temp npm packaging directory.\n\n", 'Record sizes', 'Changed the way we double-invoke cWM lifecycle hook (#11764)\n\n\nChanged the way we double-invoke cWM lifecycle hook\n\n\nExplicitly pass props to super() in test\n\n', 'react-dom: convert packages/react-dom/src/tests (#11776)', 'https fb.me links (#11779)', 'Remove vars (#11780)\n\n\nreact-dom: convert packages/react-dom/src/client\n\n\nreact-dom: convert packages/react-dom/src/events\n\n\nreact-dom: convert packages/react-dom/src/test-utils\n\n\nreact-dom: convert files on root\n\n\nreact-dom: convert updated ReactDOM-test.js\n\n', 'Fix autoFocus for hydration content when it is mismatched (#11737)\n\n\nFix autoFocus for hydration content when it is mismatched\n\n\nAdd a test for mismatched content\n\n\nFix a test for production\n\n\nFix a spec description and verify console.error output\n\n\nRun prettier\n\n\nfinalizeInitialChildren always returns true\n\n\nRevert "finalizeInitialChildren always returns true"\n\n\nThis reverts commit 58edd228046bcafcbcd04a70cb5e78520b50a07e.\n\n\nAdd a TODO comment\n\n\nUpdate ReactServerRendering-test.js\n\n\nUpdate ReactServerRendering-test.js\n\n\nRewrite the comment\n\n', "Refactor the build scripts (#11787)\n\n\nRewrite the build scripts\n\n\nDon't crash when doing FB-only builds\n\n\nGroup sync imports under Sync.*\n\n\nDon't print known errors twice\n\n\nUse an exclamation that aligns vertically\n\n", 'Add yarn debug-test (#11791)', 'Mention how to use debuggers', 'Oops', "ValidateDOMNesting tests(#11299) (#11742)\n\n\nValidateDOMNesting tests(#11299)\n\n\nRewrite tests using only public API.\n\nModified the tests to prevent duplication of code.\nCode review changes implemented.\n\nRemoved the .internal from the test file name as\n   its now written using public APIs.\n\n\nRemove mutation\n\n\nRemove unnecessary argument\n\n\nNow that we pass warnings, we don't need to pass a boolean.\n\nMove things around a bit, and add component stack assertions\n", "Add a test-only transform to catch infinite loops (#11790)\n\n\nAdd a test-only transform to catch infinite loops\n\n\nOnly track iteration count, not time\n\n\nThis makes the detection dramatically faster, and is okay in our case because we don't have tests that iterate so much.\n\n\nUse clearer naming\n\n\nSet different limits for tests\n\n\nFail tests with infinite loops even if the error was caught\n\n\nAdd a test\n\n", 'Revert "Remove empty value for boolean attributes in SSR (#11708)" (#11798)\nThis reverts commit e0c31137434d7c7df2bc3475cb7682b1d7eecc8b.', 'Remove an extra allocation for open source bundles (#11797)\n\nRemove EventListener fbjs utility\n\nEventListener normalizes event subscription for <= IE8. This is no\nlonger necessary. element.addEventListener is sufficient.\n\n\nRemove an extra allocation for open source bundles\n\n\nSplit into two functions to avoid extra runtime checks\n\n\nRevert unrelated changes\n\n', 'Remove IE8-specific focus polyfill (#11800)', 'Add yarn build --pretty (#11801)', 'Oops, fix CI', 'Move isAttributeNameSafe to DOMProperty (#11802)', 'Adds deprecation warning for ReactDOM.unstable_createPortal (#11747)', 'Add more coverage for custom elements (#11811)', "Refactor DOM attribute code (#11804)\n\nHarden tests around init/addition/update/removal of aliased attributes\n\nI noticed some patterns weren't being tested.\n\nCall setValueForProperty() for null and undefined\n\nThe branching before the call is unnecessary because setValueForProperty() already\nhas an internal branch that delegates to deleteValueForProperty() for null and\nundefined through the shouldIgnoreValue() check.\nThe goal is to start unifying these methods because their separation doesn't\nreflect the current behavior (e.g. for unknown properties) anymore, and obscures\nwhat actually happens with different inputs.\n\nInline deleteValueForProperty() into setValueForProperty()\n\nNow we don't read propertyInfo twice in this case.\nI also dropped a few early returns. I added them a while ago when we had\nStack-only tracking of DOM operations, and some operations were being\ncounted twice because of how this code is structured. This isn't a problem\nanymore (both because we don't track operations, and because I've just\ninlined this method call).\n\nInline deleteValueForAttribute() into setValueForAttribute()\n\nThe special cases for null and undefined already exist in setValueForAttribute().\n\n\nDelete some dead code\n\n\nMake setValueForAttribute() a branch of setValueForProperty()\n\n\nTheir naming is pretty confusing by now. For example setValueForProperty()\ncalls setValueForAttribute() when shouldSetAttribute() is false (!). I want\nto refactor (as in, inline and then maybe factor it out differently) the relation\nbetween them. For now, I'm consolidating the callers to use setValueForProperty().\n\nMake it more obvious where we skip and when we reset attributes\n\nThe naming of these methods is still very vague and conflicting in some cases.\nWill need further work.\n\nRewrite setValueForProperty() with early exits\n\nThis makes the flow clearer in my opinion.\n\nMove shouldIgnoreValue() into DOMProperty\n\nIt was previously duplicated.\nIt's also suspiciously similar in purpose to shouldTreatAttributeValueAsNull()\nso I want to see if there is a way to unify them.\n\n\nUse more specific methods for testing validity\n\n\nUnify shouldTreatAttributeValueAsNull() and shouldIgnoreValue()\n\n\nRemove shouldSetAttribute()\n\n\nIts naming was confusing and it was used all over the place instead of more specific checks.\nNow that we only have one call site, we might as well inline and get rid of it.\n\n\nRemove unnecessary condition\n\n\nRemove another unnecessary condition\n\n\nAdd Flow coverage\n\n\nOops\n\n\nFix lint (ESLint complains about Flow suppression)\n\n", 'Revert "Refactor DOM attribute code (#11804)" (#11814)\nThis reverts commit 47783e878d62ed96ea27290d1cdbb90b83c417c4.', 'Remove unused wheel event detection in isEventSupported (#11822)', "Deduplication of warn when selected is set on  (#11821)\n\n\nDeduplication of warn selected on option\n\n\nWrote a failing test\n\n\nDeduplication when selected is set on option\n\n\nRan yarn preitter\n\n\nFixed PR request\n\n\nMoved dedupe test to above\n\nMoved && case to seperate if to seperate static and dynamic things\n\nRender'd component twice\n\n\nActually check for deduplication\n\n\nMinor nits\n\n", 'Fix wrong deduplication condition', "Refactor DOM attribute code (take two) (#11815)\n\nHarden tests around init/addition/update/removal of aliased attributes\n\nI noticed some patterns weren't being tested.\n\nCall setValueForProperty() for null and undefined\n\nThe branching before the call is unnecessary because setValueForProperty() already\nhas an internal branch that delegates to deleteValueForProperty() for null and\nundefined through the shouldIgnoreValue() check.\nThe goal is to start unifying these methods because their separation doesn't\nreflect the current behavior (e.g. for unknown properties) anymore, and obscures\nwhat actually happens with different inputs.\n\nInline deleteValueForProperty() into setValueForProperty()\n\nNow we don't read propertyInfo twice in this case.\nI also dropped a few early returns. I added them a while ago when we had\nStack-only tracking of DOM operations, and some operations were being\ncounted twice because of how this code is structured. This isn't a problem\nanymore (both because we don't track operations, and because I've just\ninlined this method call).\n\nInline deleteValueForAttribute() into setValueForAttribute()\n\nThe special cases for null and undefined already exist in setValueForAttribute().\n\n\nDelete some dead code\n\n\nMake setValueForAttribute() a branch of setValueForProperty()\n\n\nTheir naming is pretty confusing by now. For example setValueForProperty()\ncalls setValueForAttribute() when shouldSetAttribute() is false (!). I want\nto refactor (as in, inline and then maybe factor it out differently) the relation\nbetween them. For now, I'm consolidating the callers to use setValueForProperty().\n\nMake it more obvious where we skip and when we reset attributes\n\nThe naming of these methods is still very vague and conflicting in some cases.\nWill need further work.\n\nRewrite setValueForProperty() with early exits\n\nThis makes the flow clearer in my opinion.\n\nMove shouldIgnoreValue() into DOMProperty\n\nIt was previously duplicated.\nIt's also suspiciously similar in purpose to shouldTreatAttributeValueAsNull()\nso I want to see if there is a way to unify them.\n\n\nUse more specific methods for testing validity\n\n\nUnify shouldTreatAttributeValueAsNull() and shouldIgnoreValue()\n\n\nRemove shouldSetAttribute()\n\n\nIts naming was confusing and it was used all over the place instead of more specific checks.\nNow that we only have one call site, we might as well inline and get rid of it.\n\n\nRemove unnecessary condition\n\n\nRemove another unnecessary condition\n\n\nAdd Flow coverage\n\n\nOops\n\n\nFix lint (ESLint complains about Flow suppression)\n\n\nFix treatment of Symbol/Function values on boolean attributes\n\n\nThey weren't being properly skipped because of the early return.\nI added tests for this case.\n\nAvoid getPropertyInfo() calls\n\nI think this PR looks worse on benchmarks because we have to read propertyInfo in different places.\nOriginally I tried to get rid of propertyInfo, but looks like it's important for performance after all.\nSo now I'm going into the opposite direction, and precompute propertyInfo as early as possible, and then just pass it around.\nThis way we can avoid extra lookups but keep functions nice and modular.\n\nPass propertyInfo as argument to getValueForProperty()\n\nIt always exists because this function is only called for known properties.\n\nMake it clearer this branch is boolean-specific\n\nI wrote this and then got confused myself.\n\nMemoize whether propertyInfo accepts boolean value\n\nSince we run these checks for all booleans, might as well remember it.\n\n\nFix a crash when numeric property is given a Symbol\n\n\nRecord attribute table\n\n\nThe changes reflect that SSR doesn't crash with symbols anymore (and just warns, consistently with the client).\n\nRefactor attribute initialization\n\nInstead of using flags, explicitly group similar attributes/properties.\n\n\nOptimization: we know built-in attributes are never invalid\n\n\nUse strict comparison\n\n\nRename methods for clarity\n\n\nLint nit\n\n\nMinor tweaks\n\n\nDocument all the different attribute types\n\n", 'Record sizes', "fix #11759. false positive warning in IE11 when using React.Fragment (#11823)\n\n\nfix #11759. false positive warning in IE11 when using React.Fragment\n\n\nsimplify createElementWithValidation type check\n\n\nfix mistake\n\n\nAdd an explanation\n\n\nWe shouldn't use number for anything else\n\n\nClarify further\n\n", 'use different eslint config for es6 and es5 (#11794)\n\n\nuse different eslint config for es6 and es5\n\n\nremove confusing eslint/baseConfig.js & add more eslint setting for es5, es6\n\n\nmore clear way to run eslint on es5 & es6 file\n\n\nseperate ESNext, ES6, ES6 path, and use different lint config\n\n\nrename eslint config file & update eslint rules\n\n\nUndo yarn.lock changes\n\n\nRename a file\n\n\nRemove unnecessary exceptions\n\n\nRefactor a little bit\n\n\nRefactor and tweak the logic\n\n\nMinor issues\n\n', 'Update Rollup deps (#11829)', 'Update changelog', 'Simplify SyntheticEvent declarations (#11837)', "Call and Return components should use ReactElement (#11834)\n\nCall and Return components should use ReactElement\n\nReactChildFiber contains lots of branches that do the same thing for\ndifferent child types. We can unify them by having more child types be\nReactElements. This requires that the type and key fields are\nsufficient to determine the identity of the child.\nThe main benefit is decreased file size, especially as we add more\ncomponent types, like context providers and consumers.\nThis updates Call and Return components to use ReactElement. Portals are\nleft alone for now because their identity includes the host instance.\n\n\nMove server render invariant for call and return types\n\n\nSort ReactElement type checks by most likely\n\n\nPerformance timeline should skip over call components\n\n\nDon't think these were intentionally omitted from the blacklist of\ncomponent types.\nI went ahead and updated getComponentName to include special types, even\nthough I don't think they're used anywhere right now.\n\nRemove surrounding brackets from internal display names\n", 'Record sizes', 'Rudimentary tests for not covered entry points (#11835)\n\n\nAdd basic snapshot tests to ReactART components (Circle, Rectangle, Wedge)\n\n\nMore tests on Circle, Rectangle, Wedge\n\n\nlinc warning fixes\n\n\n\nremove tests to Wedge component internal function\n\n\n\nMore test on Wedge component, update snapshots\n\n', 'Prevent BeforeInputPlugin from returning [null, null] (#11848)\nThe BeforeInputPlugin dispatches null elements in an array if\ncomposition or beforeInput events are not extracted. This causes a\nan extra array allocation, but more importantly creates null states in\nlater event dispatch methods that are annoying to account for.\nThis commit makes it so that BeforeInputPlugin never returns a null\nelement inside an array.', 'Use declare module.exports syntax for flow libdefs (#11861)\nWe added this to Flow in v0.25 (about 2 years ago), but never actually\ndeprecated the legacy declare var exports syntax. Hoping to do that\nsoon, so clearing up uses that I can find.\nTest Plan: flow', 'Use binary numbers representation directly (#11873)', 'Update flow (0.61.0) and declare context type (#11840)', 'Upload build stats to the server (#11880)', 'Update results.json from master before the build (#11882)', 'Fixed an issue #11853 - window.opera=null problem (#11854)', 'Add noModule boolean attribute (#11900)', '[Dev] Adds module and bundle type metadata to the rollup results json (#11914)', 'Fix typos (#11868)', 'Temporarily remove a script section that crashes\nThis will let us upload the updated stats to the server to fix this script', 'We can add this back now (should fix CI)', 'This will fix CI, this time for real', 'Fix a few more issues that should fix the CI', 'We can reenable this now', 'Fix writing stats to the file', 'Record sizes', 'Temporarily disable downloading the results file\nI promise, we\'re close to fixing this. I fixed the last bug and now just need to run this to upload a "good" file and then re-enable it again...', "Reënable stats downloading\nI'm running out of ideas to keep these commit messages entertaining. Thankfully this should keep the CI green and we can forget any of it ever happened.", 'Run some tests in Node environment (#11948)\n\n\nRun some tests in Node environment\n\n\nSeparate SSR tests that require DOM\n\n\nThis allow us to run others with Node environment.', 'Return event name from getVendorPrefixedEventName (#11951)', 'toWarnInDev matcher; throw on unexpected console.error (#11786)\n\nAdded toWarnInDev matcher and connected to 1 test\nAdded .toLowPriorityWarnDev() matcher\nReply Jest spy with custom spy. Unregister spy after toWarnDev() so unexpected console.error/warn calls will fail tests.\nconsole warn/error throws immediately in tests by default (if not spied on)\nPass-thru console message before erroring to make it easier to identify\nMore robustly handle unexpected warnings within try/catch\nError message includes remaining expected warnings in addition to unexpected warning\n', 'Fix links in README.md (#11954)', 'Reword issue template', "Update additional tests to use .toWarnDev() matcher (#11952)\n\n\nMigrated several additional tests to use new .toWarnDev() matcher\n\n\nMigrated ReactDOMComponent-test to use .toWarnDev() matcher\n\n\nNote this test previous had some hacky logic to verify errors were reported against unique line numbers. Since the new matcher doesn't suppor this, I replaced this check with an equivalent (I think) comparison of unique DOM elements (eg div -> span)\n\n\nUpdated several additional tests to use the new .toWarnDev() matcher\n\n\nUpdated many more tests to use .toWarnDev()\n\n", "Update additional tests to use .toWarnDev() matcher (#11957)\n\n\nMigrated several additional tests to use new .toWarnDev() matcher\n\n\nMigrated ReactDOMComponent-test to use .toWarnDev() matcher\n\n\nNote this test previous had some hacky logic to verify errors were reported against unique line numbers. Since the new matcher doesn't suppor this, I replaced this check with an equivalent (I think) comparison of unique DOM elements (eg div -> span)\n\n\nUpdated several additional tests to use the new .toWarnDev() matcher\n\n\nUpdated many more tests to use .toWarnDev()\n\n\nUpdated several additional tests to use .toWarnDev() matcher\n\n\nUpdated ReactElementValidator to distinguish between Array and Object in its warning. Also updated its test to use .toWarnDev() matcher.\n\n\nUpdated a couple of additional tests\n\n\nRemoved unused normalizeCodeLocInfo() methods\n\n", "Updated toWarnDev matcher so that ReactFiberScheduler won't suppress its errors (#11958)", 'Removed Presto check (#11921)', "Update to Jest 22 (#11956)\n\n\nBump deps to Jest 22\n\n\nPrevent jsdom from logging intentionally thrown errors\n\n\nThis relies on our existing special field that we use to mute errors.\nPerhaps, it would be better to instead rely on preventDefault() directly.\nI outlined a possible strategy here: https://github.com/facebook/react/issues/11098#issuecomment-355032539\n\n\nUpdate snapshots\n\n\nMock out a method called by ReactART that now throws\n\n\nCalling .click() no longer works, dispatch event instead\n\n\nFix incorrect SVG element creation in test\n\n\nRender SVG elements inside  to avoid extra warnings\n\n\nFix range input test to use numeric value\n\n\nFix creating SVG element in test\n\n\nReplace brittle test that relied on jsdom behavior\n\n\nThe test passed in jsdom due to its implementation details.\nThe original intention was to test the mutation method, but it was removed a while ago.\nFollowing @nhunzaker's suggestion, I moved the tests to ReactDOMInput and adjusted them to not rely on implementation details.\n\nAdd a workaround for the expected extra client-side warning\n\nThis is a bit ugly but it's just two places. I think we can live with this.\n\nOnly warn once for mismatches caused by bad attribute casing\n\nWe used to warn both about bad casing and about a mismatch.\nThe mismatch warning was a bit confusing. We didn't know we warned twice because jsdom didn't faithfully emulate SVG.\nThis changes the behavior to only leave the warning about bad casing if that's what caused the mismatch.\nIt also adjusts the test to have an expectation that matches the real world behavior.\n\nAdd an expected warning per comment in the same test\n", 'Move npm output from build/packages/ to build/node_modules/ (#11962)\n\nMove build/packages/ to build/node_modules/\n\nThis fixes Node resolution in that folder and lets us require() packages in it in Node shell for manual testing.\n\nLink fixtures to packages/node_modules\n\nThis updates the location and also uses link: instead of file: to avoid Yarn caching the folder contents.', 'Removes legacy TODOs in createfactory methods (#11942)\n\n\nRemoves legacy TODO from createFactory()\n\n\nRemoves legacy TODO from createFactoryWithValidation()\n\n\nAdds comment "Legacy hook: remove it"\n\n\nThis is based on Dan Abramov\'s suggestion (source:\nhttps://github.com/facebook/react/pull/11942#issuecomment-354818632)', "pass host context to finalizeInitialChildren (#11970)\n\n\npass host context to finalizeInitialChildren\n\n\ndon't retrieve context an extra time\n\n", 'enables ctrl + enter for keypress event on browsers other than firefox (#10514)\n\n\nenables ctrl + enter for keypress event on browsers other than firefox\n\n\nmakes comment more descriptive as to affected platforms\n\n\nreverting fiber results\n\n\nReset changes to results.json\n\n\nRemove old test file\n\n\nAdd tests in the right place\n\n', 'Remove IE8 event.target polyfill via srcElement (#11515)', 'Update HTTP to HTTPs in CHANGELOG.md (#11634)\nSeveral URL were updated to use HTTPS protocol in CHANGELOG.md.', 'Fixed potential false-positive in toWarnDev matcher (#11898)\n\n\nWarn about spying on the console\n\n\nAdded suppress warning flag for spyOn(console)\n\n\nNits\n\n\nRemoved spy-on-console guard\n\n\nFixed a potential source of false-positives in toWarnDev() matcher\nAlso updated (most of) ReactIncrementalErrorLogging-test.internal to use the new matcher\n\n\nRemoved unused third param to spyOn\n\n\nImproved clarity of inline comments\n\n\nRemoved unused normalizeCodeLocInfo() method\n\n', 'Updated misleading error message in production environment when adding ref to a functional component (#11761) (#11782)\n\n\nUpdated misleading error message in production environment when adding ref to a functional component\n\n\nReverted changes to codes.json\n\n\nUpdated error message\n\n', 'Clarify reason for setTextContent helper (#11813)\n\nUpdate comment on setTextContent\n\nupdate the comment explaining the reason for the helper\n\nUse setTextContent in ReactDOM for consistency\n', 'Support onLoad and onError on  (#11825)\n\n\nSupport link event on Fiber component\n\n\nUpdate unit test\n\n\nprettier format\n\n\nUpdate test description\n\n\nUpdate ReactDOMComponent-test.js\n\n', 'issue 11768 - Error Rendering Inputs in Separate Window using Portals in ie11 (#11870)\nWork around IE/Edge bug when rendering inputs in separate windows via portals', 'Remove extra loop (?) (#11889)\n\n\nRemove extra loop (?)\n\n\nprettier\n\n', 'Reduce the handleTopLevel() event code indirection (#11915)\n\n\nRefactor event emitters to reduce indirection\n\n\nRemove unused handleTopLevel() injection\n\n\nRename handleTopLevel() to runExtractedEventsInBatch() and remove import indirection\n\n', 'align shallow renderer with other renderers in defaulting state to null on mount (#11965)', 'ShallowRenderer should filter context by contextTypes (#11922)', 'topLevelUpdateWarnings is only for dev mode hence not necessary to have extra dev mode check. (#11924)', 'Disable coverage again (#11974)\n\n\nDisable coverage again\n\n\nUpdate test_entry_point.sh\n\n', 'Run "yarn prettier" on Appveyor\nEnsures we don\'t break the command on Windows by accident.', 'Use Prettier Config API (#11980)', 'Deduplicate warning on invalid callback (#11833) (#11833)', 'Reconcile Call component children with current (#11979)\n\n\nAdd test for un- and remounting children of Call\n\n\nReconcile Call component children with current\n\n', 'Enable coverage, set jest maxWorkers to 2 (#11983)', "Sync scheduling by default, with an async opt-in (#11771)\nRemoves the useSyncScheduling option from the HostConfig, since it's\nno longer needed. Instead of globally flipping between sync and async,\nour strategy will be to opt-in specific trees and subtrees.", 'changed {} in pck.json and split them with && in fixtures (#11982)', "Add warning in server renderer if class doesn't extend React.Component (#11993)\n\nAdd warning in server renderer if class doesn't extend React.Component\n\nIn dev mode, while server rendering, a warning will be thrown if there is a class that doesn't extend React.Component.\n\n\nUse .toWarnDev matcher and deduplicate warnings\n\n\nDeduplicate client-side warning if class doesn't extend React.Component\n\n\nDefault componentName to Unknown if null\n\n", 'Upgrade to ESLint 4.1 and add no-focused-tests rule (#11977)\n\nRuns a lint rule on tests only that errors if it sees fdescribe or fit calls.\nChanges file: to link: for our custom, internal rules (just to simplify updating these in the future).\nUpdates eslint from 3.10 -> 4.1 and babel-eslint from 7.1 -> 8.0 so that we can run this new rule only against tests.\n', "flow-coverage-report (#11545)\n\n\nAdded 'flow-coverage-report' package for discussion\n\n\nAded flow-coverage command and configuration file\n\n\nMoved FLow coverage config file to scripts/flow/coverage-config\n\n\nMoved Flow coverage config back to root as dotfile\n\n", 'Add test to ensure checked inputs don\'t accidentally get value="on" (#12000)\nIn absence of a value, radio and checkboxes report a value of\n"on". Between 16 and 16.2, we assigned a node\'s value to it\'s current\nvalue in order to "dettach" it from defaultValue. This had the\nunfortunate side-effect of assigning value="on" to radio and\ncheckboxes\nRelated issues:\nhttps://github.com/facebook/react/issues/11998', 'Use 2 workers for all tests on CI (#11990)', "Add test fixture for media event bubbling (#12004)\nWe want to start refactoring some of the event constants, but we don't\nhave a great way to confirm media events work as intended. This commit\nadds a new DOM test fixture to verify that media events bubble.", "Minor typos fixed (#12005)\n\n\ncommiting -> committing\n\n\ndoens't -> doesn't\n\n\ninteruption -> interruption\n\n\ninital -> initial\n\n\nstatment -> statement\n\n", 'Bump Jest to 22.0.6 (#12006)', 'chore: remove unused expect beta dependency (#12008)', 'Drop some top-level events from the list (#11912)\n\n\nDrop some top-level events from the list\n\n\nPut both whitelists in one file\n\n', 'Add media events back to TestUtils.Simulate (#12010)\nThe TestUtils lost media events when they were pulled out of the\ntopLevelTypes constant. This commit adds them back by concatenating\nthe media event keys to the list of top level types.', 'Add a workaround for incomplete Proxy polyfill issue (#12017)', 'Plug ~100 test leaks (#12020)', 'Adds Danger and a rule showing build size differences (#11865)\n\nAdds danger_js with an initial rule for warning about large PRs\n\nSigned-off-by: Anandaroop Roy roop@artsymail.com\n\n\n[WIP] Get the before and after for the build results\n\n\n[Dev] More work on the Dangerfile\n\n\n[Danger] Split the reports into sections based on their package\n\n\nRemove the --extract-errors on the circle build\n\n\n[Danger] Improve the lookup for previous -> current build to also include the environment\n\n\nFix rebase\n\n', 'Remove experimental RT/CS renderers (#12032)\nWill follow up with adding a new one.', 'Fix copy paste error for file size comparison (#12040)', 'Added 9.x to node devEngines (#12050)', "RFC 6: Deprecate unsafe lifecycles (#12028)\n\n\nAdded unsafe_* lifecycles and deprecation warnings\nIf the old lifecycle hooks (componentWillMount, componentWillUpdate, componentWillReceiveProps) are detected, these methods will be called and a deprecation warning will be logged. (In other words, we do not check for both the presence of the old and new lifecycles.) This commit is expected to fail tests.\n\n\nRan lifecycle hook codemod over project\nThis should handle the bulk of the updates. I will manually update TypeScript and CoffeeScript tests with another commit.\nThe actual command run with this commit was: jscodeshift --parser=flow -t ../react-codemod/transforms/rename-unsafe-lifecycles.js ./packages//src//*.js\n\n\nManually migrated CoffeeScript and TypeScript tests\n\n\nAdded inline note to createReactClassIntegration-test\nExplaining why lifecycles hooks have not been renamed in this test.\n\n\nUdated NativeMethodsMixin with new lifecycle hooks\n\n\nAdded static getDerivedStateFromProps to ReactPartialRenderer\nAlso added a new set of tests focused on server side lifecycle hooks.\n\n\nAdded getDerivedStateFromProps to shallow renderer\nAlso added warnings for several cases involving getDerivedStateFromProps() as well as the deprecated lifecycles.\nAlso added tests for the above.\n\n\nDedupe and DEV-only deprecation warning in server renderer\n\n\nRenamed unsafe_ prefix to UNSAFE_ to be more noticeable\n\n\nAdded getDerivedStateFromProps to ReactFiberClassComponent\nAlso updated class component and lifecyle tests to cover the added functionality.\n\n\nWarn about UNSAFE_componentWillRecieveProps misspelling\n\n\nAdded tests to createReactClassIntegration for new lifecycles\n\n\nAdded warning for stateless functional components with gDSFP\n\n\nAdded createReactClass test for static gDSFP\n\n\nMoved lifecycle deprecation warnings behind (disabled) feature flag\n\n\nUpdated tests accordingly, by temporarily splitting tests that were specific to this feature-flag into their own, internal tests. This was the only way I knew of to interact with the feature flag without breaking our build/dist tests.\n\n\nTidying up\n\n\nTweaked warning message wording slightly\nReplaced 'You may may have returned undefined.' with 'You may have returned undefined.'\n\n\nReplaced truthy partialState checks with != null\n\n\nCall getDerivedStateFromProps via .call(null) to prevent type access\n\n\nMove shallow-renderer didWarn* maps off the instance\n\n\nOnly call getDerivedStateFromProps if props instance has changed\n\n\nAvoid creating new state object if not necessary\n\n\nInject state as a param to callGetDerivedStateFromProps\nThis value will be either workInProgress.memoizedState (for updates) or instance.state (for initialization).\n\n\nExplicitly warn about uninitialized state before calling getDerivedStateFromProps.\nAnd added some new tests for this change.\n\n\nAlso:\n* Improved a couple of falsy null/undefined checks to more explicitly check for null or undefined.\n* Made some small tweaks to ReactFiberClassComponent WRT when and how it reads instance.state and sets to null.\n\n\nImproved wording for deprecation lifecycle warnings\n\n\nFix state-regression for module-pattern components\nAlso add support for new static getDerivedStateFromProps method\n\n", 'Highlight production bundles in bold in the Danger integration comment (#12054)\n\n\nupdate Danger integration comments\n\n\nupdate Danger integration comments\n\n\nrevised codes for unconditional call\n\n\nupdate setBoldness parameter\n\n', 'Add Experimental Fabric Renderer (#12069)', "Temporarily disable Danger\nIts calculation is currently a bit misleading.\n@orta plans to look into this but for now I'll disable.", 'Test that fabric renderer sends diffs (#12075)', 'Warn if unsafe lifecycle methods are found in an async subtree (#12060)', "Improved toWarnDev matcher to avoid swallowing errors (#12081)\nWhile writing tests for unsafe async warnings, I noticed that in certain cases, errors were swallowed by the toWarnDev matcher and resulted in confusing test failures. For example, if an error prevented the code being tested from logging an expected warning- the test would fail saying that the warning hadn't been logged rather than reporting the unexpected error. I think a better approach for this is to always treat caught errors as the highest-priority reason for failing a test.\nI reran all of the test cases for this matcher that I originally ran with PR #11786 and ensured they all still pass.", 'Improve toWarnDev matcher DX for unexpected warnings (#12082)\nUse jest-diff to format the warnings in a way that makes it easier to spot the differences.', 'Update debugRenderPhaseSideEffects behavior (#12057)\nUpdate debugRenderPhaseSideEffects behavior\nThis feature flag no longer double-invokes componentWillMount, componentWillReceiveProps, componentWillUpdate, or shouldComponentUpdate.\nIt continues to double-invoke the constructor, render, and setState updater functions as well as the recently added, static getDerivedStateFromProps method\nTests have been updated.', 'Opt into unsafe lifecycle warnings without async tree (#12083)\nAdded new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).', "New context API (#11818)\n\nNew context API\n\nIntroduces a declarative context API that propagates updates even when\nshouldComponentUpdate returns false.\n\n\nFuzz tester for context\n\n\nUse ReactElement for provider and consumer children\n\n\nUnify more branches in createFiberFromElement\n\n\nCompare context values using Object.is\n\n\nSame semantics as PureComponent/shallowEqual.\n\n\nAdd support for Provider and Consumer to server-side renderer\n\n\nStore providers on global stack\n\n\nRather than using a linked list stored on the context type. The global\nstack can be reset in case of an interruption or error, whereas with the\nlinked list implementation, you'd need to keep track of every\ncontext type.\n\nPut new context API behind a feature flag\n\nWe'll enable this in www only for now.\n\n\nStore nearest provider on context object\n\n\nHandle reentrancy in server renderer\n\n\nContext stack should be per server renderer instance.\n\nBailout of consumer updates using bitmask\n\nThe context type defines an optional function that compares two context\nvalues, returning a bitfield. A consumer may specify the bits it needs\nfor rendering. If a provider's context changes, and the consumer's bits\ndo not intersect with the changed bits, we can skip the consumer.\nThis is similar to how selectors are used in Redux but fast enough to do\nwhile scanning the tree. The only user code involved is the function\nthat computes the changed bits. But that's only called once per provider\nupdate, not for every consumer.\n\nStore current value and changed bits on context object\n\nThere are fewer providers than consumers, so better to do this work\nat the provider.\n\nUse maximum of 31 bits for bitmask\n\nThis is the largest integer size in V8 on 32-bit systems. Warn in\ndevelopment if too large a number is used.\n\n\nProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer\n\n\nInline Object.is\n\n\nWarn if multiple renderers concurrently render the same context provider\n\n\nLet's see if we can get away with not supporting this for now. If it\nturns out that it's needed, we can fall back to backtracking the\nfiber return path.\n\nNits that came up during review\n", 'Coalesce lifecycle deprecation warnings until the commit phase (#12084)\nBuilds on top of PR #12083 and resolves issue #12044.\nCoalesces deprecation warnings until the commit phase. This proposal extends the  utility introduced in #12060 to also coalesce deprecation warnings.\nNew warning format will look like this:\n\ncomponentWillMount is deprecated and will be removed in the next major version. Use componentDidMount instead. As a temporary workaround, you can rename to UNSAFE_componentWillMount.\nPlease update the following components: Foo, Bar\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks\n', 'Debug render-phase side effects in "strict" mode (#12094)\nA new feature flag has been added, debugRenderPhaseSideEffectsForStrictMode. When enabled, StrictMode subtrees will also double-invoke lifecycles in the same way as debugRenderPhaseSideEffects.\nBy default, this flag is enabled for DEV only. Internally we can toggle it with a GK.\nThis breaks several of our incremental tests which make use of the noop-renderer. Updating the tests to account for the double-rendering in development mode makes them significantly more complicated. The most straight forward fix for this will be to convert them to be run as internal tests only. I believe this is reasonable since we are the only people making use of the noop renderer.', 'Move a comment to its original location (#12103)\ntype was added in #11818 below the comment that belongs to domNamespace', 'Handle nested Fragments in toTree (#12106) (#12107)', "React lifecycles compat (#12105)\n\nSuppress unsafe/deprecation warnings for polyfilled components.\nDon't invoke deprecated lifecycles if static gDSFP exists.\nApplied recent changes to server rendering also\n", 'updated ReactFeatureFlags shim (#12116)', 'Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)\n\nReplace unstable_AsyncComponent with Unstable_AsyncMode\n\nMirrors the StrictMode API and uses the new Mode type of work.\n\ninternalContextTag -> mode\n\nChange this now that we have a better name\n\nUnstable_ -> unstable_\n', "ReactDOM.flushControlled (#12118)\n\nReactDOM.flushControlled\n\nNew API for wrapping event handlers that need to fire before React\nyields to the browser. Previously we thought that flushSync was\nsufficient for this use case, but it turns out that flushSync is only\nsafe if you're guaranteed to be at the top of the stack; that is, if\nyou know for sure that your event handler is not nested inside another\nReact event handler or lifecycle. This isn't true for cases like\nel.focus, el.click, or dispatchEvent, where an event handler can be\ninvoked synchronously from inside an existing stack.\nflushControlled has similar semantics to batchedUpdates, where if you\nnest multiple batches, the work is not flushed until the end of the\noutermost batch. The work is not guaranteed to synchronously flush, as\nwith flushSync, but it is guaranteed to flush before React yields to\nthe browser.\nflushSync is still the preferred API in most cases, such as inside\na requestAnimationFrame callback.\n\n\nTest that flushControlled does not flush inside batchedUpdates\n\n\nMake flushControlled a void function\n\n\nIn the future, we may want to return a thenable work object. For now,\nwe'll return nothing.\n\nflushControlled -> unstable_flushControlled\n", "Interactive updates (#12100)\n\nUpdates inside controlled events (onChange) are sync even in async mode\n\nThis guarantees the DOM is in a consistent state before we yield back\nto the browser.\nWe'll need to figure out a separate strategy for other\ninteractive events.\n\nDon't rely on flushing behavior of public batchedUpdates implementation\n\nFlush work as an explicit step at the end of the event, right before\nrestoring controlled state.\n\nInteractive updates\n\nAt the beginning of an interactive browser event (events that fire as\nthe result of a user interaction, like a click), check for pending\nupdates that were scheduled in a previous interactive event. Flush the\npending updates synchronously so that the event handlers are up-to-date\nbefore responding to the current event.\nWe now have three classes of events:\n\nControlled events. Updates are always flushed synchronously.\nInteractive events. Updates are async, unless another a subsequent\nevent is fired before it can complete, as described above. They are\nalso slightly higher priority than a normal async update.\n\nNon-interactive events. These are treated as normal, low-priority\nasync updates.\n\n\nFlush lowest pending interactive update time\n\n\nAccounts for case when multiple interactive updates are scheduled at\ndifferent priorities. This can happen when an interactive event is\ndispatched inside an async subtree, and there's an event handler on\nan ancestor that is outside the subtree.\n\nUpdate comment about restoring controlled components\n", 'Switch to JSX API for context (#12123)\n\nSwitch to JSX API for context\n\n80% sure this will be the final API. Merging this now so we can get this\ninto the next www sync in preparation for 16.3.\n\nPromote context to a stable API\n', "Interactive updates shouldn't flush until the end of the outermost batch\nAccounts for the case where an event is dispatched synchronously from\ninside another event, like el.focus. I've added a test, but in general\nwe need more coverage around this area.", 'Updated create-react-class to 15.6.3 (and updated tests) (#12126)', 'Add react-lifecycles-compat and update tests (#12127)\n\n\nInstalled react-lifecycles-compat module\n\n\nUpdated react-lifecycles-compat integration tests to use real polyfill\n\n', 'Exposes the host container to prepareForCommit and resetAfterCommit (#12098)\n\n\nExposes the host container to prepareForCommit and resetAfterCommit\n\n\nUses better typing\n\n\nAdds tests\n\n\nRemoves commit data\n\n', 'Invoke both legacy and UNSAFE_ lifecycles when both are present (#12134)\n\nInvoke both legacy and UNSAFE_ lifecycles when both are present\n\nThis is to support edge cases with eg create-react-class where a mixin defines a legacy lifecycle but the component being created defines an UNSAFE one (or vice versa).\nI did not warn about this case because the warning would be a bit redundant with the deprecation warning which we will soon be enabling. I could be convinced to change my stance here though.\n\nAdded explicit function-type check to SS ReactPartialRenderer\n', 'Updating package versions for release 16.3.0-alpha.0', 'Update error codes for 16.3.0-alpha.0 release', 'Update bundle sizes for 16.3.0-alpha.0 release', 'Fix process.CI typo (#12146)', 'Pre-release version fix (#12148)\n\nRan updated release script to fix deps\nRelease script handles prerelease deps correctly\nUpdate noop-renderer dependencies on reconciler package\n', 'Release script does a fresh Yarn install of deps (#12149)\nThis would have caught the recent Yarn workspaces / semver issue sooner.', 'Fix fragment handling in toTree() (#12154)', 'Expose persistent reconciler to custom renderers (#12156)', 'Clearer ssr error message 11902 (#11966)\n\n\nMatch error message to one in ReactFiber.js\n\n\nAdd undefined/null guard and tests\n\n\nUpdate tests and element check\n\n\nRemove beforeEach block\n\n', 'Changed cWM/cWRP/cWU deprecations to low-pri warnings (#12159)', 'Warn about string refs within strict mode trees (#12161)\n\n\nWarn about string refs within strict mode trees\n\n\nImproved string ref warning message\n\n', 'String ref warning shows name of ref (#12164)', 'Revert deprecation warnings for custom event plugin injection (#12167)', 'Adds createRef() as per RFC (#12162)\n\nAdds createRef() as per RFC\n', 'Fix server render strict mode (#12170)\n\n\nFix server render with  component\n\n\nadd failed tests for  with server rendering\n\n', 'Fix server render async mode (#12173)\n\n\nadd failed tests for  with server rendering\n\n\nFix server render with  component\n\n\nMerge StrictMode and AsyncMode tests into Modes file\n\n', 'Fixed descrepancy between host and class component refs (#12178)\nWhen a ref is removed from a class component, React now calls the previous ref-setter (if there was one) with null. Previously this was the case only for host component refs.\nA new test has been added.', 'Enable warnAboutDeprecatedLifecycles for ReactNative (#12186)', 'Fix finding Fabric feature flags (#12189)\nTest Plan: yarn build fabric, inspect build/react-native/ReactFabric-dev.js to see enablePersistentReconciler = true.', 'Interleaved Context.Provider bugfix (#12187)\n\n\nAdded failing unit test\n\n\nMaybe fixed interleaved context provider bug?\n\n', 'Disable for...of by default, rewrite cases where it matters (#12198)\n\n\nAdd no-for-of lint rule\n\n\nIgnore legit use cases of for..of\n\n\nRewrite for..of in source code\n\n', 'Fix build stats display', 'Update sizes', 'Move ReactContext source to React package (#12205)', "[Danger] Use the PR's mergebase for a branch in the dangerfile (#12049)\n\n\n[Danger] Use the PR's mergebase for a branch in the dangerfile instead of\nthe root commit's parent.\n\n\n[Danger] Get the full history to find the merge base\n\n", 'Add react-is package (#12199)\nAuthoritative brand checking library.\nCan be used without any dependency on React. Plausible replacement for React.isValidElement.', 'NativeMethodsMixin DEV-only methods should not warn (#12212)\n\n\nDisable DEV-only warnings for RN NativeMethodsMixin/create-react-class\n\n\nTiny bit of cleanup\n\n\nMake strict-mode suppression check a little more robust\n\n', '[Danger] Include 1% changes in a build, not just greater than (#12213)', 'Added ReactFabric shim (#12216)', 'Updating package versions for release 16.3.0-alpha.1', 'Updating dependencies for react-noop-renderer', 'Update bundle sizes for 16.3.0-alpha.1 release', 'Handle packages without dependencies (#12217)', "Additional release script options for publishing canary versions (#12219)\n\n\nAdditional release script options for publishing canary versions\n\n\nbranch specifies a branch other than master\n\nlocal skips pulling from the remote branch and checking CircleCI\ntag specifies an npm dist tag other than latest or next\n\nWe may add a higher-level canary option in the future.\n\n\nAddress Brian's feedback:\n\n\nUpdated description of local option\n\nThrows if the latest tag is specified for a prerelease version\n", '[Danger] Add a remote for the upstream repo, and try use that for the merge base for danger (#12229)', 'Add an unit test for React.Fragment with ShallowRenderer (#12220)', '[experimental] simple-cache-provider (#12224)\n\n[experimental] simple-cache-provider\n\nPushing an early version of this for testing and demonstration purposes.\n\n\nChange invariant to DEV-only warning\n\n\nUse function overloading for createResource type\n\n\nExpresses that primitive keys do not require a hash function, but\nnon-primitive keys do.\n\n\nMore tests\n\n\nUse export *\n\n\nMake Record type a disjoint union\n\n\nPass miss argument separate from key to avoid a closure\n\n', 'Bump simple-cache-provider version', 'Update bundle sizes for simple-cache-provider', 'Update test renderer to support new types of work (#12237)\nAdds support for ContextProvider, ContextConsumer, and Mode.', 'Ignored fiber tags which shows unknow in performance tabs (#12250)', 'Ignore RN events on unknown nodes (#12264)\nIf we have multiple RN renderers running simultaneously, we should be able to send a single event to all of them and only if it recognizes the event will it do anything with it. Crucially, this avoids the \'Unsupported top level event type "%s" dispatched\' invariant in those cases.', '[fabric] Forked ReactNativeInjection for Fabric and avoid RCTEventEmitter setup in Fabric (#12265)', "Format danger percents better (#12256)\nTest Plan: yolo? yarn danger pr didn't give me any useful output. :\\", "Add test exercising public API to test BeforeInputEventPlugin + FallbackCompositionState (#11849)\n\n\nAdd test exercising public API to test BeforeInputEventPlugin + FallbackCompositionState\n\n\nI've adopted a similar approach to the existing test for BeforeInputEventPlugin\n\nI've simulated events and then assert the event handler for onBeforeInput is fired or not fired based on the test conditions\nThe scenarios are tested against IE11, Webkite and Presto environment simulations\n\nI've encorporated what I understand to be the functionality in the FallbackCompositionState test\n\n\nPrettier\n\n\nLinting fixes\n\n\nRemove test for contenteditable in Presto - the contenteditable type is not supported in Presto powered browsers (Opera).\n\n\nRemove mention of Presto as this explicit condition is no longer handled in BeforeInputEventPlugin.\n\n\nWe still need to exercise usage of FallbackCompositionState though so let's keep a test where the env does not support Composition and Text events.\n\n\nAdd tests for envs with only CompositionEvent support\n\n\nRemove internal tests no longer needed\n\n\nShorten test case names to satisfy lint rules\n\n\nAdd tests for onCompositionStart and onCompositionUpdte events\n\n\nThe BeforeInputEventPlugin is responsible for emitting these events so we need to add tests for this. This also ensure we exercise the code path that, L207, that was not previously exercised with the public tests.", 'Add a clearer error message for the Consumer render (#12241) (#12267)', "Add stack unwinding phase for handling errors (#12201)\n\nAdd stack unwinding phase for handling errors\n\nA rewrite of error handling, with semantics that more closely match\nstack unwinding.\nErrors that are thrown during the render phase unwind to the nearest\nerror boundary, like before. But rather than synchronously unmount the\nchildren before retrying, we restart the failed subtree within the same\nrender phase. The failed children are still unmounted (as if all their\nkeys changed) but without an extra commit.\nCommit phase errors are different. They work by scheduling an error on\nthe update queue of the error boundary. When we enter the render phase,\nthe error is popped off the queue. The rest of the algorithm is\nthe same.\nThis approach is designed to work for throwing non-errors, too, though\nthat feature is not implemented yet.\n\nAdd experimental getDerivedStateFromCatch lifecycle\n\nFires during the render phase, so you can recover from an error within the same\npass. This aligns error boundaries more closely with try-catch semantics.\nLet's keep this behind a feature flag until a future release. For now, the\nrecommendation is to keep using componentDidCatch. Eventually, the advice will\nbe to use getDerivedStateFromCatch for handling errors and componentDidCatch\nonly for logging.\n\n\nReconcile twice to remount failed children, instead of using a boolean\n\n\nHandle effect immediately after its thrown\n\n\nThis way we don't have to store the thrown values on the effect list.\n\n\nReactFiberIncompleteWork -> ReactFiberUnwindWork\n\n\nRemove startTime\n\n\nRemove TypeOfException\n\n\nWe don't need it yet. We'll reconsider once we add another exception type.\n\nMove replay to outer catch block\n\nThis moves it out of the hot path.", 'Temporarily disable Danger in CI (#12291)', 'Replace danger token with a refreshed facebook-open-source-bot token (#12295)', 'Revert "Temporarily disable Danger in CI" (#12296)\n\nRevert "Replace danger token with a refreshed facebook-open-source-bot token (#12295)"\n\nThis reverts commit 2d511479c4fc8246840b8ad00d6b528eadbe1ca6.\n\nRevert "Temporarily disable Danger in CI (#12291)"\n\nThis reverts commit 925fc93389a9d836a037c1948da7dd6cbb860b84.', "Fixes bug when initial mount of a host component is hidden (#12294)\noldProps was null. This went uncaught by the unit tests because\nReactNoop did not use oldProps in either prepareUpdate or\ncompleteUpdate. I added some invariants so we don't regress in\nthe future.", "[Persistent] Finalize children after we've actually inserted them (#12300)\nThe order of this was wrong. We also unconditionally mark for updates so\nkilled that unused branch.", 'Don\'t expose ReactGlobalSharedState on React Native renderer (#12298)\n\nDon\'t expose ReactGlobalSharedState on React Native renderer\n\nWe should just go through the "react" package if need access to this one.\nRemoved the dependencies in React Native.\n\nNo longer used by InspectorUtils\n', 'Do not clear errors after they are thrown (#12303)\nInstead, to trigger a retry, the consumer should invalidate the cache.\nIn the future, we will likely add a way to invalidate only the failed\nrecords.', 'createResource returns an object with methods instead of a read function (#12304)\nChanges createResource to return an object with read and preload\nmethods. Future methods may include set, subscribe, invalidate,\nand so on.', 'Fix comment type in ReactElement (#12314)', "Bug fix: SSR setState in diff components don't mix (#12323)\nPreviously, the queue and replace arguments were leaking across loops even though they should be captured.", 'annotation typo (#12272)\n\n\ncomment typo\n\n\nchange after then to after that\n\n', 'added link to reactjs docs for test renderer (#12293)\n\n\nadd link to reactjs doc for test renderer\n\n\nadd documentation clarification\n\n', 'Remove DefaultProps type parameter from ReactNativeComponent (#12332)', "Initialize React prop name/attribute name mapping without Map (#12353)\nUsing new Map(iterable) isn't supported in IE11, so it ends up trying to iterate through an empty map and these attributes don't get defined in properties. Since this is only run once on startup inlining the attributeName array is probably fine.", "Context providers and consumers should bailout on already finished work (#12254)\n\nContext providers and consumers should bail-out on already finished work\n\nFixes bug where a consumer would re-render even if its props and context\nhad not changed.\n\n\nEncode output as JSON string\n\n\nAdd weights to random action generator\n\n\nAdd context to triangle fuzz tester\n\n\nMove bailouts to as early as possible\n\n\nBailout if neither context value nor children haven't changed (sCU)\n\n\nChange prop type invariant to a DEV-only warning\n\n", 'Add unstable prefix to observedBits prop until its proven to work in practice (#12357)', "Prefix internal context properties with underscore (#12358)\nSo these aren't mistaken for public properties. Ideally, we'd use\nsymbols or private fields.", 'create-subscription (#12325)\ncreate-subscription provides an simple, async-safe interface to manage a subscription.', "resumeMountClassComponent should check for mount lifecycles, not update (#12371)\nWe have other tests that would have caught this if resuming were enabled\nin all cases, but since it's currently only enabled for error\nboundaries, the test I've added to prevent a regression is a\nbit contrived.", 'Renamed createRef .value attribute to .current (#12375)\n\n\nRenamed createRef .value attribute to .current\n\n\nWarn if invalid ref object is passed\n\n', 'RFC #30: React.forwardRef implementation (#12346)\nAdded React.forwardRef support to react-reconciler based renders and the SSR partial renderer.', 'Updating yarn.lock file for 16.3.0-alpha.2 release', 'Updating package versions for release 16.3.0-alpha.2', 'Updating dependencies for react-noop-renderer', 'Update error codes for 16.3.0-alpha.2 release', 'Update bundle sizes for 16.3.0-alpha.2 release', 'Updated create-subscription description', 'Fix typo in unexpected ref object warning (#12377)', 'Removed an unnecessary wrapper object from state (#12383)\n\nRemoved an unnecessary wrapper object from state\nMoved unsubscribe from state to class field and tweaked comments\n', 'Unify context stack implementations (#12359)\n\n\nUse module pattern so context stack is isolated per renderer\n\n\nUnify context implementations\n\n\nImplements the new context API on top of the existing ReactStack that we\nalready use for host context and legacy context. Now there is a single\narray that we push and pop from.\nThis makes the interrupt path slightly slower, since when we reset the\nunit of work pointer, we have to iterate over the stack (like before)\nand switch on the type of work (not like before). On the other hand,\nthis unifies all of the unwinding behavior in the UnwindWork module.\n\nAdd DEV only warning if stack is not reset properly\n', 'Feature flag: Use custom requestIdleCallback even when native one exists (#12385)\nWe\'ll use this in www to test whether the polyfill is better at\nscheduling high-pri async work than the native one. My preliminary tests\nsuggest "yes" but it\'s hard to say for certain, given how difficult it\nis to consistently reproduce the starvation issues we\'ve been seeing.', 'Support ForwardRef type of work in TestRenderer (#12392)\n\nSupport ForwardRef type of work in TestRenderer and ShallowRenderer.\nRelease script now updates inter-package dependencies too (e.g. react-test-renderer depends on react-is).\n', "Fix an infinite loop in new context (#12402)\n\n\nAdd a regression test for the context infinite loop\n\n\nFix the bug\n\n\nWe set .return pointer inside the loop, but the top-level parent-child relationship happens outside.\nThis ensures the top-level parent's child points to the right copy of the parent.\nOtherwise we may end up in a situation where (workInProgress === nextFiber) is never true and we loop forever.", '[fabric] register ReactFabric to be callable module (#12405)', 'Fix Prettier', "Fix falling in dev mode (#12407)\nFiberNode stateNode could be null\nSo I get TypeError:\nat performWorkOnRoot (/tmp/my-project/node_modules/react-dom/cjs/react-dom.development.js:11014:24) TypeError: Cannot read property '_warnedAboutRefsInRender' of null\n          at findDOMNode (/tmp/my-project/node_modules/react-dom/cjs/react-dom.development.js:15264:55)", 'Replaced object building loop with Object.assign function (#12414)', 'Clean shell scripts (#12365)', "Fix now-missing errorInfo argument to componentDidCatch() (#12416)\n\n\nAdd a failing test verifying componentInfo is missing\n\n\nPass componentInfo to componentDidCatch and getDerivedStateFromCatch\n\n\nOnly expect stack in DEV\n\n\nDon't pass the stack to getDerivedStateFromCatch()\n\n", 'Added badge for react documentation (#12191)\n\n\nAdded badge for react documentation\n\n\nUpdated reference documentation link for badge\n\n', 'Fixed a batched-state update bug with getDerivedStateFromProps (#12408)', 'Removed documentation badge from readme.md (#12424)\n\n\nAdded badge for react documentation\n\n\nUpdated reference documentation link for badge\n\n\nUpdate README.md\n\n\nUpdate README.md\n\n\nUpdate README.md\n\n\nRemoved reference badge from Readme.md\n\n', "Subscriptions shouldn't call setState after unmount even for Promises (#12425)", 'Add a fallback component name for warnings (#12429)', 'Use "Component" as fallback name in more places (#12430)', 'Warn about non-static getDerivedStateFromProps/Catch (#12431)', 'Expanded DEV-only warnings for gDSFP and legacy lifecycles (#12419)', 'Removed dev warnings from shallow renderer. (#12433)', 'Updating package versions for release 16.3.0-alpha.3', 'Updating dependencies for react-noop-renderer', 'Update bundle sizes for 16.3.0-alpha.3 release', 'Rename bits to unstable_observedBits (#12440)', 'Adds semver to the package dev dependencies (#12442)\nBranch: semver', 'Tweaks the build script (#12444)\nBranch: build-tweaks', "Don't pass a Fiber to showErrorDialog() (#12445)\n\n\nDon't pass a Fiber to showErrorDialog()\n\n\nOnly fill in the fields for classes\n\n\nReorder for clarity\n\n", "Remove dependency on React (#12448)\nIs this necessary? I'd like to use the package in enzyme to avoid having to recopy/paste the symbols for better debugging names, but at hard dep in enzyme proper on a version of react isn't gonna work. This seems safe since nothing explicitly depends on React in here?", 'Workaround jest-diff single line string limitation (#12456)', "New commit phase lifecycle: getSnapshotBeforeUpdate (#12404)\n\nImplemented new getSnapshotBeforeUpdate lifecycle\nStore snapshot value from Fiber to instance (__reactInternalSnapshotBeforeUpdate)\nUse commitAllHostEffects() traversal for getSnapshotBeforeUpdate()\nAdded DEV warnings and tests for new lifecycle\nDon't invoke legacy lifecycles if getSnapshotBeforeUpdate() is defined. DEV warn about this.\nConverted did-warn objects to Sets in ReactFiberClassComponent\nReplaced redundant new lifecycle checks in a few methods\nCheck for polyfill suppress flag on cWU as well before warning\nAdded Snapshot bit to HostEffectMask\n", 'Include react-is in FB build targets (#12458)', 'Rename react-is import alias in FB bundles (#12459)', 'Call getSnapshotBeforeUpdate before mutation (#12468)\n\n\nCall getSnapshotBeforeUpdate in separate traversal, before mutation (aka revert db84b9a) and add unit test.\n\n\nAdded a new timer to ReactDebugFiberPerf for Snapshot effects\n\n', "Caveat about async in create-subscription README (#12469)\n\n\nCaveat about async in create-subscription README\n\n\nAddress Sophie's comments\n\n\nDan's nits\n\n", 'Updating package versions for release 16.3.0-rc.0', 'Updating dependencies for react-noop-renderer', 'Update bundle sizes for 16.3.0-rc.0 release', 'Fix build script to handle react-is (no peer deps) (#12471)', 'Fix typo in create-subscription readme\nPR: #12473', 'Added DEV warning if getSnapshotBeforeUpdate is defined as a static method (#12475)', "Add unstable APIs for async rendering to test renderer (#12478)\nThese are based on the ReactNoop renderer, which we use to test React\nitself. This gives library authors (Relay, Apollo, Redux, et al.) a way\nto test their components for async compatibility.\n\nPass unstable_isAsync to TestRenderer.create to create an async\nrenderer instance. This causes updates to be lazily flushed.\nrenderer.unstable_yield tells React to yield execution after the\ncurrently rendering component.\nrenderer.unstable_flushAll flushes all pending async work, and\nreturns an array of yielded values.\nrenderer.unstable_flushThrough receives an array of expected values,\nbegins rendering, and stops once those values have been yielded. It\nreturns the array of values that are actually yielded. The user should\nassert that they are equal.\n\nAlthough we've used this pattern successfully in our own tests, I'm not\nsure if these are the final APIs we'll make public.", 'Fix bug when fatal error is thrown as a result of batch.commit (#12480)\nFixes #12474', 'setState() in componentDidMount() should flush synchronously even with createBatch() (#12466)\n\n\nAdd a failing test for setState in cDM during batch.commit()\n\n\nCopy pasta\n\n\nFlush all follow-up Sync work on the committed batch\n\n\nNit: Use performSyncWork\n\n\nCall performSyncWork right after flushing the batch. Does effectively\nthe same thing by reusing the existing function.\nAlso added some comments.\n\nDelete accidentally duplicated test\n', "Improve warning message for setState-on-unmounted (#12347)\nThis is one of the most common warnings people see, and I don't think the old text is especially clear. Improve it.", 'Don\'t bail out on referential equality of Consumer\'s props.children function (#12470)\n\n\nTest case for React Context bailing out unexpectedly\n\n\nThis is 💯% definitely not the correct fix at all\n\n\nRevert "This is 💯% definitely not the correct fix at all"\n\n\nThis reverts commit 8686c0f6bdc1cba3056fb2212f3f7740c749d33a.\n\n\nFormatting + minor tweaks to the test\n\n\nDon\'t bail out on consumer child equality\n\n\nTweak the comment\n\n\nPretty lint\n\n\nSilly Dan\n\n', 'Update user timing to record the timeout deadline with \'waiting\' events (#12479)\n\nUpdate user timing to record the timeout deadline with \'waiting\' events\n\nwhat is the change?:\nWhen we are processing work during reconciliation, we have a "timeout"\ndeadline to finish the work. It\'s a safety measure that forces things to\nfinish up synchronously if they are taking too long.\nThe "timeout" is different depending on the type of interaction which\ntriggered the reconciliation. We currently have a shorter "timeout" for\n"interactive updates", meaning we will try to finish work faster if the\nreconciliation was triggered by a click or other user interaction.\nFor collecting more data in our logs we want to differentiate the\n\'waiting for async callback...\' events based on the "timeout" so I\'m\nadding that to the logging.\nOne interesting note - in one of the snapshot tests the "timeout" was\nsuper high. Going to look into that.\nwhy make this change?:\nRight now we are debugging cases where an interaction triggers a\nreconciliation and the "waiting for async callback...\' events are too\nlong, getting blocked because the main thread is too busy. We are\nkeeping logs of these user timing events and want to filter to focus on\nthe reconciliation triggered by interaction.\ntest plan:\nManually tested and also updated snapshot tests.\n(Flarnie will insert a screenshot)\n\n\nImprove wording of message\n\n\nran prettier\n\n', 'Add React.isValidElementType() (#12483)\n\nAdd React.isValidElementType()\n\nPer the conversation on #12453, there are a number of third-party\nlibraries (particularly those that generate higher-order components)\nthat are performing suboptimal validation of element types.\nThis commit exposes a function that can perform the desired check\nwithout depending upon React internals.\n\nMove isValidElementType to shared/\n', 'Updated react-is README to show new isValidElementType()', 'Disable createRoot for open source builds (#12486)', 'unstable_createRoot (#12487)\n\n\nRemoved enableCreateRoot flag. Renamed createRoot to unstable_createRoot\n\n\nReactDOMRoot test is no longer internal\n\n', 'Updating package versions for release 16.3.0', 'Updating dependencies for react-noop-renderer', 'Update bundle sizes for 16.3.0 release']v16.2.0 React

Add Fragment as named export to React. (@clemmy in #10783)
Support experimental Call/Return types in React.Children utilities. (@MatteoVH in #11422)

React DOM

Fix radio buttons not getting checked when using multiple lists of radios. (@landvibe in #11227)
Fix radio buttons not receiving the onChange event in some cases. (@jquense in #11028)

React Test Renderer

Fix setState() callback firing too early when called from componentWillMount. (@accordeiro in #11507)

React Reconciler

Expose react-reconciler/reflection with utilities useful to custom renderers. (@rivenhk in #11683)

Internal Changes

Many tests were rewritten against the public API. Big thanks to everyone who contributed!
 ['Updating CHANGELOG.md for 16.1.1 release', 'lint task: update scripts/eslint.js sharing code with linc.js; (#11518)\n\n\n(build infrastructure): unify lint and linc buid task;\n\n\nFail on warnings\n\n\nFail on warnings\n\n', 'Reading package.json safely in the build script by ignoring the system files. #11544 (#11546)', 'Add Flow types for EventPluginHub (#11465)\n\n\nAdd Flow types for EventPluginHub\n\n\nadd boolean and remove extraneous typing\n\n', 'Re-add haste modules for ReactTypes and ReactNativeRTTypes shims (#11557)\n\n\nRe-add haste module for ReactNativeRTTypes\n\n\nRe-added ReactTypes @providesModule annotation as well\n\n\nUpdated expected provides modules list\n\n\nImproved clarity of check_modules.sh error message\n\n\nAdded ReactTypes to provides module whitelist\n\n', 'Bugfix: nextFlushedRoot should always be set when performing work (#11558)\nFixes an issue where performWorkOnRoot was called, but nextFlushedRoot\nwas not set. This happened in a special branch where we synchronously\nflush newly mounted DOM trees outside the normal work loop.\nArguably, performWorkOnRoot should read from the globally assigned root\nand expiration time instead of accepting arguments, since those\narguments are expected to be the same as the global values, anyway. I\ndecided against that since the global values could be null, so reading\nfrom them would require extra null checks.', "Use requestIdleCallback timeout to force expiration (#11548)\n\n\nDon't call idle callback unless there's time remaining\n\n\nExpiration fixture\n\n\nFixture that demonstrates how async work expires after a certain interval.\nThe fixture clogs the main thread with animation work, so it only works if the\ntimeout option is provided to requestIdleCallback.\n\nPass timeout option to requestIdleCallback\n\nForces requestIdleCallback to fire if too much time has elapsed, even if the\nmain thread is busy. Required to make expiration times work properly. Otherwise,\nasync work can expire, but React never has a chance to flush it because the\nbrowser never calls into React.", 'Update value tracking on cousin radios (#11028)\n\n\nfix radio updates\n\n\nFormat fixtures and ReactDOMFiberInput\n\n', "Add .watchmanconfig to .gitignore so that Jest --watch doesn't fail arbitrarily (#11579)", "Always reconcile against current children (#11564)\nThe new resuming algorithm will always reconcile against the current\nchild set, even if there's a newer work-in-progress child set.", "Updates at the same priority should not interrupt current render (#11578)\nWhen we're rendering work at a specific level, and a higher priority\nupdate comes in, we interrupt the current work and restart at the\nhigher priority. The rationale is that the high priority update is\nlikely cheaper to render that the lower one, so it's usually worth\nthrowing out the current work to get the high pri update on the screen\nas soon as possible.\nCurrently, we also interrupt the current work if an update of equal\npriority is scheduled. The rationale here is less clear: the only reason\nto do this is if both updates are expected to flush at the same time,\nto prevent tearing. But this usually isn't the case. Separate setStates\nare usually distinct updates that can be flushed separately, especially\nif the components that are being updated are in separate subtrees.\nAn exception is in Flux-like systems where multiple setStates are the\nresult of a single conceptual update/event/dispatch. We can add an\nexplicit API for batching in the future; in fact, we'd likely need one\nanyway to account for expiration accidentally causing consecutive\nupdates to fall into separate buckets.", 'Added a .watchmanconfig file (#11581)', 'New feature flags to help detect unexpected lifecycle side effects (#11587)\nAdded debugRenderPhaseSideEffects feature flag to help detect unexpected side effects in pre-commit lifecycle hooks and setState reducers.', 'Upgrade rollup dependency (#11591)\n\n\nRecord build results before upgrading rollup\n\n\nUpgrade rollup and record new results.json\n\n', "Rewrite ReactDOMComponentTree-test to test behavior using Public API (#11383)\n\n\nRewrite ReactDOMComponentTree-test to test behavior using Public API\n\n\nPart of #11299\n\n\nI've tried to identify cases where code within ReactDOMComponentTree is exercised and have updated accordingly but I'm not entirely sure whether I'm on the right track. I thought I'd PR to get feedback from the community. Looking forward to comments.\n\n\nPrettier and lint changes\n\n\nRemove testing of internals and add test cases for testing behavior exhibited after use of getInstanceFromNode\n\n\n[RFC] Update testing approach to verify exhibited behavior dependent upon methods in ReactDOMComponentTree\n\n\nRemove tests from event handlers and use sync tests\n\n\nPrettier changes\n\n\nRename variables to be more semantic\n\n\nPrettier updates\n\n\nUpdate test following review\n\n\nUse beforeEach and afterEach to set up and tear down container element for use in each test\n\n\nMove any functions specific to one test to within test body (improves readability imo)\n\n\nAdd coverage for getNodeFromInstance and implementation of getFiberCurrentPropsFromNode\n\nAfter researching usage of getNodeFromInstance we can test getNodeFromInstance dispatching some events and asserting the id of the currentTarget\nAfter checking git blame for getFiberCurrentPropsFromNode and reading through #8607 I found a test that we can simplify to assert behavior of the function by ensuring event handler props are updated from the fiber props. Swapping out the implementation of this function with return node[internalInstanceKey].memoizedProps results in a failure.\n", 'Improve formatting of errors when building (#11456)\n\n\nImprove formatting of errors when building\n\n\nRemove undefined from the header when error.plugin is undefined\n\n\nAdd babel-code-frame and syntax highlighting in error message\n\n\nRun yarn prettier and fix code format\n\n', 'Migrating to const/let and Object Spread in more places (#11535)\n\n\nUse const/let in more places (#11467)\n\n\nConvert ReactDOMFiberTextarea to const/let\n\nConvert ReactDOMSelection to const/let\nConvert setTextContent to const/let\n\nConvert validateDOMNesting to const/let\n\n\nReplace Object.assign by Object Spread\n\n\nConvert ReactDOMFiberOption to Object Spread\n\nConvert ReactDOMFiberTextarea to Object Spread\nConvert validateDOMNesting to Object Spread\n', 'Switching the name property preserves radio selection\nFixes a case where changing the name and checked value of a radio button in the same update would lead to checking the wrong radio input. Also adds a DOM test fixture for related issue.\nRelated issues:\nhttps://github.com/facebook/react/issues/7630', 'Format test fixtures', 'Remove MouseWheel and MouseDOMScroll event patching\nThe wheel event has not always been supported in every browser. React would fall back to mousewheel and DOMMouseScroll when the wheel event was not available. All supported browsers provide the wheel event. This code is no longer necessary.', "Rewrite SyntheticEvent tests using public APIs only (#11525)\n\n\ngenerate synthetics events using public API\n\n\nrewritten createEvent to use public APIs\n\nremoved all references SyntheticEvent.release\n\nIn order to test under realistic circumstances I had to move\nthe expectations into a callback in mosts tests to overcome\nthe effects of event pooling.\n\n\nrun prettier\n\n\nremove empty line\n\n\ndon't use ReactTestUtils\n\n\nrun prettier and fix linter issues\n\n\nremove duplicate test\n\n\nremove invalid calls to expect\n\n\nThe removed expect calls verified the correct behaviour based on\nmissing preventDefault and stopPropagation methods.\nThe was correct as we used plain objects to simulate events.\nSince we switched to the public API we're using native events which\ndo have these methods.\n\nset event.defaultPrevented to undefined\n\nThis was missed when the test was first migrated.\nWhen emulating IE8 not only has returnValue to be false.\nIn addition defaultPrevented must not be defined.\n\n\nrun all tests and format code\n\n\nrename instance variable to node\n\n\nremove backtick\n\n\nonly simulate IE in normalisation test\n\n\ninclude assignment in definition\n\n\nadd missing persist test\n\n\nuse method instead of field to prevent default\n\n\nexpect properties to be unchanged on persisted event\n\n\noptimise tests that deal with event persitence\n\n\ndeclare and assign event on the same line if not reassigned later\n\n", 'Re-enable UMD build for TestUtils (#11599)\nFixes #11111', 'Read debugRenderPhaseSideEffects from GK (#11603)\n\nForked ReactFeatureFlags for React Native to enable debugRenderPhaseSideEffects GK\nChanged debugRenderPhaseSideEffects in www feature flags to be runtime as well\n', 'support Call and Return components in React.Children calls (#11422)\n\n\nsupport Call and Return components in React.Children calls\n\n\nmake tests more verbose\n\n\nfix ordering of React component types\n\n\ncleanup conditional detection of children type\n\n\ndirectly inline callback invocation\n\n\nreduce callback invocation code re-use\n\n', 'Fixes typo in eslint script (#11607)', 'Remove mentions of module map in Jest config (#11611)', 'Run Jest tests with "development" environment (#11612)', 'Run Jest in production mode (#11616)\n\n\nMove Jest setup files to /dev/ subdirectory\n\n\nClone Jest /dev/ files into /prod/\n\n\nMove shared code into scripts/jest\n\n\nMove Jest config into the scripts folder\n\n\nFix the equivalence test\n\n\nIt fails because the config is now passed to Jest explicitly.\nBut the test doesn\'t know about the config.\nTo fix this, we just run it via yarn test (which includes the config).\nWe already depend on Yarn for development anyway.\n\n\nAdd yarn test-prod to run Jest with production environment\n\n\nActually flip the production tests to run in prod environment\n\n\nThis produces a bunch of errors:\nTest Suites: 64 failed, 58 passed, 122 total\nTests:       740 failed, 26 skipped, 1809 passed, 2575 total\nSnapshots:   16 failed, 4 passed, 20 total\n\nIgnore expectDev() calls in production\n\nDown from 740 to 175 failed.\nTest Suites: 44 failed, 78 passed, 122 total\nTests:       175 failed, 26 skipped, 2374 passed, 2575 total\nSnapshots:   16 failed, 4 passed, 20 total\n\nDecode errors so tests can assert on their messages\n\nDown from 175 to 129.\nTest Suites: 33 failed, 89 passed, 122 total\nTests:       129 failed, 1029 skipped, 1417 passed, 2575 total\nSnapshots:   16 failed, 4 passed, 20 total\n\nRemove ReactDOMProduction-test\n\nThere is no need for it now. The only test that was special is moved into ReactDOM-test.\n\nRemove production switches from ReactErrorUtils\n\nThe tests now run in production in a separate pass.\n\nAdd and use spyOnDev() for warnings\n\nThis ensures that by default we expect no warnings in production bundles.\nIf the warning is expected, use the regular spyOn() method.\nThis currently breaks all expectDev() assertions without DEV blocks so we go back to:\nTest Suites: 56 failed, 65 passed, 121 total\nTests:       379 failed, 1029 skipped, 1148 passed, 2556 total\nSnapshots:   16 failed, 4 passed, 20 total\n\nReplace expectDev() with expect() in DEV blocks\n\nWe started using spyOnDev() for console warnings to ensure we don\'t expect them to occur in production. As a consequence, expectDev() assertions on console.error.calls fail because console.error.calls doesn\'t exist. This is actually good because it would help catch accidental warnings in production.\nTo solve this, we are getting rid of expectDev() altogether, and instead introduce explicit expectation branches. We\'d need them anyway for testing intentional behavior differences.\nThis commit replaces all expectDev() calls with expect() calls in DEV blocks. It also removes a few unnecessary expect() checks that no warnings were produced (by also removing the corresponding spyOnDev() calls).\nSome DEV-only assertions used plain expect(). Those were also moved into DEV blocks.\nReactFiberErrorLogger was special because it console.error()\'s in production too. So in that case I intentionally used spyOn() instead of spyOnDev(), and added extra assertions.\nThis gets us down to:\nTest Suites: 21 failed, 100 passed, 121 total\nTests:       72 failed, 26 skipped, 2458 passed, 2556 total\nSnapshots:   16 failed, 4 passed, 20 total\n\nEnable User Timing API for production testing\n\nWe could\'ve disabled it, but seems like a good idea to test since we use it at FB.\n\nTest for explicit Object.freeze() differences between PROD and DEV\n\nThis is one of the few places where DEV and PROD behavior differs for performance reasons.\nNow we explicitly test both branches.\n\n\nRun Jest via "yarn test" on CI\n\n\nRemove unused variable\n\n\nAssert different error messages\n\n\nFix error handling tests\n\n\nThis logic is really complicated because of the global ReactFiberErrorLogger mock.\nI understand it now, so I added TODOs for later.\nIt can be much simpler if we change the rest of the tests that assert uncaught errors to also assert they are logged as warnings.\nWhich mirrors what happens in practice anyway.\n\n\nFix more assertions\n\n\nChange tests to document the DEV/PROD difference for state invariant\n\n\nIt is very likely unintentional but I don\'t want to change behavior in this PR.\nFiled a follow up as https://github.com/facebook/react/issues/11618.\n\n\nRemove unnecessary split between DEV/PROD ref tests\n\n\nFix more test message assertions\n\n\nMake validateDOMNesting tests DEV-only\n\n\nFix error message assertions\n\n\nDocument existing DEV/PROD message difference (possible bug)\n\n\nChange mocking assertions to be DEV-only\n\n\nFix the error code test\n\n\nFix more error message assertions\n\n\nFix the last failing test due to known issue\n\n\nRun production tests on CI\n\n\nUnify configuration\n\n\nFix coverage script\n\n\nRemove expectDev from eslintrc\n\n\nRun everything in band\n\n\nWe used to before, too. I just forgot to add the arguments after deleting the script.', 'Add yarn test-prod to pull request steps', 'Record sizes', 'Consolidate all symbols in a single file (#11629)\n\nConsolidate all symbols in a single file\n\nThis reduces the code duplication as we have quite a few now.\n\nRecord sizes\n', 'Change DEV-only invariants to be warnings (#11630)\n\n\nChange DEV-only invariant about instance.state type to a warning\n\n\nChange DEV-only invariant childContextTypes check to a warning\n\n', 'Bug fix - SetState callback called before component state is updated in ReactShallowRenderer (#11507)\n\n\nCreate test to verify ReactShallowRenderer bug (#11496)\n\n\nFix ReactShallowRenderer callback bug on componentWillMount (#11496)\n\n\nImprove fnction naming and clean up queued callback before call\n\n\nRun prettier on ReactShallowRenderer.js\n\n\nConsolidate callback call on ReactShallowRenderer.js\n\n\nEnsure callback behavior is similar between ReactDOM and ReactShallowRenderer\n\n\nFix Code Review requests (#11507)\n\n\nMove test to ReactCompositeComponent\n\n\nVerify the callback gets called\n\n\nEnsure multiple callbacks are correctly handled on ReactShallowRenderer\n\n\nEnsure the setState callback is called inside componentWillMount (ReactDOM)\n\n\nClear ReactShallowRenderer callback queue before actually calling the callbacks\n\n\nAdd test for multiple callbacks on ReactShallowRenderer\n\n\nEnsure the ReactShallowRenderer callback queue is cleared after invoking callbacks\n\n\nRemove references to internal fields on ReactShallowRenderer test\n\n', 'Remove global mocks by adding support for "suppressReactErrorLogging" property (#11636)\n\nRemove global mocks\n\nThey are making it harder to test compiled bundles.\nOne of them (FeatureFlags) is not used. It is mocked in some specific test files (and that\'s fine).\nThe other (FiberErrorLogger) is mocked to silence its output. I\'ll look if there\'s some other way to achieve this.\n\nAdd error.suppressReactErrorLogging and use it in tests\n\nThis adds an escape hatch to not log errors that go through React to the console.\nWe will enable it for our own tests.', "Run 90% of tests on compiled bundles (both development and production) (#11633)\n\n\nExtract Jest config into a separate file\n\n\nRefactor Jest scripts directory structure\n\n\nIntroduces a more consistent naming scheme.\n\nAdd yarn test-bundles and yarn test-prod-bundles\n\nOnly files ending with -test.public.js are opted in (so far we don't have any).\n\nFix error decoding for production bundles\n\nGCC seems to remove new from new Error() which broke our proxy.\n\nBuild production version of react-noop-renderer\n\nThis lets us test more bundles.\n\n\nSwitch to blacklist (exclude .private.js tests)\n\n\nRename tests that are currently broken against bundles to *-test.internal.js\n\n\nSome of these are using private APIs. Some have other issues.\n\n\nAdd bundle tests to CI\n\n\nSplit private and public ReactJSXElementValidator tests\n\n\nRemove internal deps from ReactServerRendering-test and make it public\n\n\nOnly run tests directly in tests\n\n\nThis lets us share code between test files by placing them in tests/utils.\n\nRemove ExecutionEnvironment dependency from DOMServerIntegrationTest\n\nIt's not necessary since Stack.\n\nSplit up ReactDOMServerIntegration into test suite and utilities\n\nThis enables us to further split it down. Good both for parallelization and extracting public parts.\n\nSplit Fragment tests from other DOMServerIntegration tests\n\nThis enables them to opt other DOMServerIntegration tests into bundle testing.\n\nSplit ReactDOMServerIntegration into different test files\n\nIt was way too slow to run all these in sequence.\n\nDon't reset the cache twice in DOMServerIntegration tests\n\nWe used to do this to simulate testing separate bundles.\nBut now we actually do test bundles. So there is no need for this, as it makes tests slower.\n\nRename test-bundles commands to test-build\n\nAlso add test-prod-build as alias for test-build-prod because I keep messing them up.\n\nUse regenerator polyfill for react-noop\n\nThis fixes other issues and finally lets us run ReactNoop tests against a prod bundle.\n\nRun most Incremental tests against bundles\n\nNow that GCC generator issue is fixed, we can do this.\nI split ErrorLogging test separately because it does mocking. Other error handling tests don't need it.\n\n\nUpdate sizes\n\n\nFix ReactMount test\n\n\nEnable ReactDOMComponent test\n\n\nFix a warning issue uncovered by flat bundle testing\n\n\nWith flat bundles, we couldn't produce a good warning for  on SSR\nbecause it doesn't use the event system. However the issue was not visible in normal\nJest runs because the event plugins have been injected by the time the test ran.\nTo solve this, I am explicitly passing whether event system is available as an argument\nto the hook. This makes the behavior consistent between source and bundle tests. Then\nI change the tests to document the actual logic and attempt to show a nice message\n(e.g. we know for sure onclick is a bad event but we don't know the right name for it\non the server so we just say a generic message about camelCase naming convention).", 'Forbid Haste in Jest (#11647)', 'Drop .textContent IE8 polyfill and rewrite escaping tests against public API (#11331)\n\n\nRename escapeText util. Test quoteAttributeValueForBrowser through ReactDOMServer API\n\n\nFix lint errors\n\n\nPrettier reformatting\n\n\nChange syntax to prevent prettier escape doble quote\n\n\nName and description gardening. Add tests for escapeTextForBrowser. Add missing tests\n\n\nImprove script tag as text content test\n\n\nUpdate escapeTextForBrowser-test.js\n\n\nUpdate quoteAttributeValueForBrowser-test.js\n\n\nSimplify tests\n\n\nMove utilities to server folder\n\n', 'Add a note about private API dependency for a test', 'Issue#11510: added verification check for misspelled propTypes (#11524)\n\n\nadded verification check for misspelled propTypes\n\n\nadded flag to check if misspelled warning was shown to developer before\n\n\nadded the condition to else if and improved the warning message\n\n\nmoved  variable under dev section & initialized it to false\n\n\nadded test to confirm the missmatch prop type warning in both  and  tests files\n\n\nremoved eslint disable and split error into 2 lines\n\n\nchanged expectDev to expect in tests\n\n\nadded DEV condition before both tests\n\n', 'Use only public API for ChangeEventPlugin-test.js (#11333)\n\n\nUse only public API for ChangeEventPlugin-test.js\n\n\nprecommit commands complete\n\n\nRemoved comments\n\n\nImproving event dispatchers\n\n\nUpdated tests\n\n\nFixed for revisions\n\n\nPrettified\n\n\nAdd more details and fixes to tests\n\n\nNot internal anymore\n\n\nRemove unused code\n\n', 'Replace inputValueTracking-test with public API tests (#11654)', "Don't reset error codes on CI build (#11655)\n\n\nDon't reset error codes on CI build\n\n\nAdd an explanation\n\n", 'Refactor SyntheticKeyboardEvent tests to only use the public API  (#11631)\n\n\nKeyboardEvent interface-keypress\n\n\nPass first 6 tests\n\n\nRoll getEventCharCode-test into SyntheticKeyboardEvent-test\n\n\nRun SyntheticKeyboardEvent-test on bundles\n\n\nRemove unused code\n\n', 'Fix Jest call in the release script\nJust running jest binary will no longer work', 'Add bundle linting and tests to the release script (#11662)\n\n\nAdd bundle linting and tests to the release script\n\n\nadd yarn lint-build\n\nuse yarn lint-build in circle ci build.sh\n\nadd yarn lint-build, yarn test-prod, yarn test-build, and yarn test-build-prod to the realse script\n\n\nImprove readability of release test messages\n\n\nRun prettier\n\n\nUpdating package versions for release 16.2.0\n\n\nSeperate bundle specific tests\n\n\nMoved the runYarnTask into utils since its being used two files now\n\n\nUncomment out checks I mistakenly committed\n\n\nRevert a bunch of version bump changes\n\n\nMistakenly commited by release script\n\n.js for consistency\n', 'Upload build on the same node where it happens (#11666)', 'Bump Node devEngines to 8.x', 'Show nicer message on syntax errors', 'Use async/await in Rollup scripts (#11669)', 'Set fragment export flags to true (#11672)', 'Enable bundle tests for React.Fragment (#11673)', 'Remove accidentally duplicated tests (#11675)\n\n\nRemove accidentally duplicated tests\n\n\nRefactor: move unmock() call into the only test needing it\n\n\nThis makes the intent more explicit.', 'Lint untracked files with yarn linc (#11665)\n\n\nLint untracked files with yarn linc (#11646)\n\n\nRun prettier on untracked files\n\n\nUnify code for listing changed files into shared utility\n\n', 'Update README URLS to HTTPS (#11635)\nURLs were updated to use HTTPS protocol in README files.', 'Do not fail yarn linc for ignored file warning (#11615) (#11641)\n\n\nAdd rule to ignore default handling of not linting hidden files\n\n\nUndo changes\n\n\nAdd function to validate warnings\n\n\nUse validateWarnings when reporting linc command\n\n\nRestore files\n\n\nContain code to line file\n\n', 'Migrate to CircleCI2.0 and Add AppVeyor for master-only branch (#11605)\n\n\nadd appveyor config file\n\n\nmigrate circleci 1.0 to circleci 2.0\n\n\nremove upload step in favour of #11666\n\n', 'Record sizes', 'CI: remove unnecessary Yarn download (#11684)', "Move ReactFiberTreeReflection to react-reconciler/reflection  (#11683)\n\n\nMove ReactFiberTreeReflection to react-reconciler/reflection #11659\n\n\nUse * for react-reconciler\n\n\nWe don't know the latest local version, and release script currently doesn't bump deps automatically.\n\n\nRemove unused field\n\n\nUse CommonJS in entry point for consistency\n\n\nUndo the CommonJS change\n\n\nI didn't realize it would break the build.\n\n\nRecord sizes\n\n\nRemove reconciler fixtures\n\n\nThey're unnecessary now that we run real tests on reconciler bundles.", 'Amend changelog', '[WIP] Fix for fiber root scheduling memory leak (#11644)\n\n\nFix for root memory leak\n\n\nforgot to add code\n\n', 'Updating package versions for release 16.2.0', 'Update bundle sizes for 16.2.0 release']v16.1.1 16.1.1 (November 13, 2017)
React

Improve the warning about undefined component type. (@selbekk in #11505)

React DOM

Support string values for the capture attribute. (@maxschmeling in #11424)

React DOM Server

Don't freeze the ReactDOMServer public API. (@travi in #11531)
Don't emit autoFocus={false} attribute on the server. (@gaearon in #11543)

React Reconciler

Change the hydration API for better Flow typing. (@sebmarkbage in #11493)
 ['Fix the release script', 'Enable createRoot API in www (#11501)', 'Release script tweaks (#11504)\n\n\nAdded missing params object to execUnlessDry call\n\n\nPublic package names are no longer hard-coded\n\n\nAdded "v" prefix to git tag\n\n\nShow more accurate in-progress duration\n\n\nProperly bucket-bridage params\n\n\nPrettier\n\n\nPublish command logs stack with error\n\n', 'Add note about mistaken named / default export (#11505)\nThis commit adds a note about the possibility of erroneously\nmistaking named and default exports to an existing error message.', 'Fix accidental leftover requires (#11513)', 'Remove tests in ReactDOMComponent-test depending on internal API (#11337)\n\n\nRemove inputValueTracking from ReactDOMComponent-test dependency\n\n\nprettier\n\n\nuse node._valueTracker and add some test cases to make sure that value being tracked\n\n\nusing Object.getOwnPropertyDescriptor to get the tracked value\n\n\nmove getValueTracker to each test case and use its corresponding prototype\n\n\nremove tests and move the value tracker definition before React is imported\n\n\nDelete these tests completely\n\n', 'Measure time between scheduling an async callback and flushing it (#11506)\n\nMeasure time between scheduling an async callback and flushing it\n\nHelps detect starvation issues.\n\n\nDebug comments should print directly above the next measure\n\n\nBetter warning message\n\n\nMost users won\'t know what "expires" means', "Add CODE_OF_CONDUCT.md (#11512)\nwhat is the change?:\nAdding a document linking to the Facebook Open Source Code of Conduct,\nfor visibility and to meet Github community standards.\nwhy make this change?:\nFacebook Open Source provides a Code of Conduct statement for all\nprojects to follow.\nReact already links to this Code of Conduct in the README, which is\ngreat!\nExposing the COC via a separate markdown file is a standard being\npromoted by Github via the Community Profile in order to meet their Open\nSource Guide's recommended community standards.\nAs you can see, adding this file will complete React's Community Profile\nchecklist and increase the visibility of our COC.\ntest plan:\nViewing it on my branch -\n(Flarnie will insert screenshot)\nissue:\ninternal task t23481323", 'Refactor SyntheticClipboardEvent tests to only use the public API (#11365)\n\n\nRefactor SyntheticClipboardEvent tests to only use the public API\n\n\nReplace local document creation by document body reset on each test case execution\n\n\nSet up and tear down container separately\n\n\nTweak test assertion logic for clarity\n\n\nRemove simulate abstraction and create events directly\n\n\nEnsure the test covers IE8 behavior\n\n\nVerify that persistence works\n\n', 'Fix lint', 'Rewrite SyntheticWheelEvent-test depending on internal API (#11299) (#11367)\n\n\nUpdate SyntheticWheelEvent tests to use public API\n\n\nReplace: ReactTestUtils.SimulateNative to native Events()\n\n\nUpdate: Replaced WheelEvent() interface to document.createEvent\n\n\nFix: Lint SyntheticWheelEvent file\n\n\nUpdate: Custom WheelEvent function to a generic MouseEvent function\n\n\nUpdate: Prettier SyntheticWheelEvent-test.js\n\n\nVerify the button property is set on synthetic event\n\n\nUse MouseEvent constructor over custom helper\n\n\nRewrite to test React rather than jsdom\n\n\nForce the .srcElement code path to execute\n\n\nStyle tweaks and slight code reorganization\n\n', "Refactor some event tests (#11517)\n\nUse dispatchEvent() directly\n\nDon't fear repetition in tests. It is clearer what's going on.\n\n\nClean up the container after tests\n\n\nAdd a comment to container code\n\n", 'Update Flow and Fix Hydration Types (#11493)\n\n\nUpdate Flow\n\n\nFix createElement() issue\n\n\nThe * type was too ambiguous. It\'s always a string so what\'s the point?\nSuppression for missing Flow support for {is: \'\'} web component argument to createElement() didn\'t work for some reason.\nI don\'t understand what the regex is testing for anyway (a task number?) so I just removed that, and suppression got fixed.\n\n\nRemove deleted $Abstract<> feature\n\n\nExpand the unsound isAsync check\n\n\nFlow now errors earlier because it can\'t find .type on a portal.\n\n\nAdd an unsafe cast for the null State in UpdateQueue\n\n\nIntroduce "hydratable instance" type\n\n\nThe Flow error here highlighted a quirk in our typing of hydration.\nReact only really knows about a subset of all possible nodes that can\nexist in a hydrated tree. Currently we assume that the host renderer\nfilters them out to be either Instance or TextInstance. We also assume\nthat those are different things which they might not be. E.g. it could\nbe fine for a renderer to render "text" as the same type as one of the\ninstances, with some default props.\nWe don\'t really know what it will be narrowed down to until we call\ncanHydrateInstance or canHydrateTextInstance. That\'s when the type is\ntruly refined.\nSo to solve this I use a different type for hydratable instance that is\nused in that temporary stage between us reading it from the DOM and until\nit gets refined by canHydrate(Text)Instance.\n\nHave the renderer refine Hydratable Instance to Instance or Text Instance\n\nCurrently we assume that if canHydrateInstance or canHydrateTextInstance\nreturns true, then the types also match up. But we don\'t tell that to Flow.\nIt just happens to work because fiber.stateNode is still any.\nWe could potentially use some kind of predicate typing but instead\nof that I can just return null or instance from the "can" tests.\nThis ensures that the renderer has to do the refinement properly.', 'Support string values for capture attribute. (#11424)\n\nUses HAS_OVERLOADED_BOOLEAN_VALUE instead of HAS_BOOLEAN_VALUE\nAllows for \nFixes #11419\n', 'Unfreeze the react-dom/server interface (#11531)\n\nUnfreeze the react-dom/server interface\n\nthis allows stubbing of the exposed named functions, as was possible before v16.1\nfixes #11526\n\n\nFix missing version export\n\n\nFix missing version export\n\n\nWhitespace\n\n', 'Minor fixes to DOM Test Fixtures (#11542)\n\nFix broken React logo reference\nAlways use React from the window.\n', "Don't emit autoFocus={false} attribute on the server (#11543)", 'Amend changelog', 'Updating package versions for release 16.1.1', 'Update bundle sizes for 16.1.1 release']v16.1.0 16.1.0 (November 9, 2017)
Discontinuing Bower Releases
Starting with 16.1.0, we will no longer be publishing new releases on Bower. You can continue using Bower for old releases, or point your Bower configs to the React UMD builds hosted on unpkg that mirror npm releases and will continue to be updated.
All Packages

Fix an accidental extra global variable in the UMD builds. (@gaearon in #10935)

React

Add support for portals in React.Children utilities. (@MatteoVH in #11378)
Warn when a class has a render method but doesn't extend a known base class. (@sw-yx in #11168)
Improve the warning when accidentally returning an object from constructor. (@deanbrophy in #11395)

React DOM

Allow on as a custom attribute for AMP. (@nuc in #11153)
Fix onMouseEnter and onMouseLeave firing on wrong elements. (@gaearon in #11164)
Fix null showing up in a warning instead of the component stack. (@gaearon in #10915)
Fix IE11 crash in development mode. (@leidegre in #10921)
Fix tabIndex not getting applied to SVG elements. (@gaearon in #11034)
Fix SVG children not getting cleaned up on dangerouslySetInnerHTML in IE. (@OriR in #11108)
Fix false positive text mismatch warning caused by newline normalization. (@gaearon in #11119)
Fix form.reset() to respect defaultValue on uncontrolled <select>. (@aweary in #11057)
Fix <textarea> placeholder not rendering on IE11. (@gaearon in #11177)
Fix a crash rendering into shadow root. (@gaearon in #11037)
Fix false positive warning about hydrating mixed case SVG tags. (@gaearon in #11174)
Suppress the new unknown tag warning for <dialog> element. (@gaearon in #11035)
Warn when defining a non-existent componentDidReceiveProps method. (@iamtommcc in #11479)
Warn about function child no more than once. (@andreysaleba in #11120)
Warn about nested updates no more than once. (@anushreesubramani in #11113)
Deduplicate other warnings about updates. (@anushreesubramani in #11216)
Include component stack into the warning about contentEditable and children. (@Ethan-Arrowood in #11208)
Improve the warning about booleans passed to event handlers. (@NicBonetto in #11308)
Improve the warning when a multiple select gets null value. (@Hendeca in #11141)
Move link in the warning message to avoid redirect. (@marciovicente in #11400)
Add a way to suppress the React DevTools installation prompt. (@gaearon in #11448)
Remove unused code. (@gaearon in #10802, #10803)

React DOM Server

Add a new suppressHydrationWarning attribute for intentional client/server text mismatches. (@sebmarkbage in #11126)
Fix markup generation when components return strings. (@gaearon in #11109)
Fix obscure error message when passing an invalid style value. (@iamdustan in #11173)
Include the autoFocus attribute into SSR markup. (@gaearon in #11192)
Include the component stack into more warnings. (@gaearon in #11284)

React Test Renderer and Test Utils

Fix multiple setState() calls in componentWillMount() in shallow renderer. (@Hypnosphi in #11167)
Fix shallow renderer to ignore shouldComponentUpdate() after forceUpdate(). (@d4rky-pl in #11239 and #11439)
Handle forceUpdate() and React.PureComponent correctly. (@koba04 in #11440)
Add back support for running in production mode. (@gaearon in #11112)
Add a missing package.json dependency. (@gaearon in #11340)

React ART

Add a missing package.json dependency. (@gaearon in #11341)
Expose react-art/Circle, react-art/Rectangle, and react-art/Wedge. (@gaearon in #11343)

React Reconciler (Experimental)

First release of the new experimental package for creating custom renderers. (@iamdustan in #10758)
Add support for React DevTools. (@gaearon in #11463)

React Call Return (Experimental)

First release of the new experimental package for parent-child communication. (@gaearon in #11364)
 ["Doc updates for React 16 + blog post (#10824)\n\n\nDoc updates for React 16 + blog post\n\n\nAdd link to Sophie's post\n\n", 'Fix React links on the website (#10837)\n\n\nFix React links on the website\n\n\nFix code editor\n\n\nFix code editor, attempt 2\n\n', 'Doc change for prevContext removal in CDU (#10836)\n\nDoc change for prevContext removal in CDU\n\nRef: https://github.com/facebook/react/issues/8631\n\nMinor rewording\n', 'Fix note formatting', 'React.createPortal is not a function (#10843)', "Update Portals Documentation (#10840)\n\nUpdate Portals Documentation\n\nCorrect some grammar to be more explicit and clear. Update example CodePen to better match code found in documentation. Update code example styles to match other code examples (ie. 'State and Lifecycle', 'Handling Events').\n\nClean up comment to be accurate to example\n\nThere was a small comment overlooked when reviewing the documentation. This fixes it to be accurate to the example as well as grammatically correct.\n\n\nUpdate portals.md\n\n\nMore fixes\n\n", 'Update name of property initializer proposal (#10812)\nThe proposal for property initializers is called Public Class Fields now (part of the combined Class Fields proposal).', 'Fix portal link (#10845)', 'Update docs for React 16 (#10846)', 'Minor doc edit', 'Update authors for v16 (#10861)', 'Fix typo on docs for React 16 (#10862)', 'Add a note about deprecating react-addons-perf (#10743)\n\n\nAdd a note about deprecating react-addons-perf\n\n\nUpdate addons-perf.md\n\n', 'Fix a few typos (#10860)', 'Remove IE8 property expansion workaround (#10803)\n\n\nRemove IE8 property expansion workaround\n\n\nEdit from a plane ✈️\n\n', 'Remove unnecessary event whitelist in production (#10802)\n\n\nRemove unnecessary top level event type whitelist\n\n\nRecord sizes\n\n', '"Write Code in Your Editor": Split step 5 into 2 steps (#10832)\n\n"Write Code in Your Editor": Split step 5 into 2 steps\n\nTo me it wasn\'t clear (enough) that I had to copy the file\'s content from here and add the three lines to the top.\n\nUpdate tutorial.md\n', 'Remove Stack (part 1, safe: unused files and tests) (#10794)\n\n\nRemove Fiber Jest project\n\n\nRemove Stack reconciler and ReactDOMStack code\n\n\nFix tests depending on Stack internals\n\n\nFix Flow\n\n', 'Minor update to portals docs "child" language (#10870)\n\nUpdate portals docs "child" language\n\nThis commit changes the portals docs so that the language of the Parent\nno longer feels like it is missing a word with "is not a child the div\nwith onClick handler" and replaces that with "is not a direct child of\nthe div with the onClick handler".\ncloses #10868\n\nUpdate portals.md\n', "Add link to React community on Hashnode (#10874)\n\nAdd link to React community on Hashnode\n\nReact community on Hashnode has more than 10K followers. It'd be nice if we can point developers to this place.\n\nConsistency in heading + remove the sales pitch-y bit\n", 'Remove usage of ReactDOMFeatureFlags.useFiber, assuming true (#10796)', 'Fix fragments docs example JSX typo (#10885)\nFixes https://github.com/facebook/react/issues/10883', 'Delete LICENSE-examples (#10890)\nWe don’t have examples folder anymore (or any other folder with examples).\nI think we can delete this?', 'Remove apostrophe (#10807)\n\n\nRemove apostrophe\n\n\nUpdate printInclusive default documentation\n\n', 'Remove allow transparency (#10823)\n\nRemove allowTransparency attribute\n\nallowtransparency is an Internet Explorer-only attribute that\ncontrols the background transparency of an iFrame. When set to true,\nit respects the background color of the iFrame. When set to false, it\nsets the background color to that of the document.\nThis feature was removed in IE9 - falling out of React\'s support\ncommitment.\nDevelopers that have somehow figured out how to get IE8 to work with\nReact 16.x can still use allowtransparency="true", since React now\nsupports unrecognized attributes.\n\n\nUse correct attribute script location\n\n\nUse new UMD bundles in attribute fixtures\n\n\nUpdate attribute snapshot\n\n\nBlank for CI\n\n', 'Add ReactEurope 2018 Conference (#10914)', 'Add new docs website (#10896)\nAdds a new docs website, built with Gatsby JS, to replace the old Jekyll site. Source code for the new site lives in /www (although markdown and YML data still comes from the legacy /docs folder).\nChanges to either markdown or website source code can be previewed on Netlify. The react-js bot should automatically add comments to each PR with preview links. (This preview is generated by running the newly-added yarn build:docs command in the root package.json.)\nThe majority of the changes in this PR are contained within the new /www directory. However some minor modifications have been made to existing content in the /docs directory:\n\nModified frontmatter author block to always be an array\nSmall markdown formatting tweaks\n', "Fix for createHTMLDocument API specific to IE11 (#10921)\n\nFix for createHTMLDocument API specific to IE11\n\nThe createHTMLDocument API title parameter is not optional in IE while other browsers don't care IE11 will throw if an argument is not passed. This only impacts react.dom.development not react.dom.production.\n\nTweak\n", '[Gatsby] Paragraph line-height / margin follow-up (#10928)\n\n\nremoved old paragraph line-height\n\n\nreduced paragraph margins\n\n', 'Gatsby markdown cleanup (#10926)\n\n\nRemoved unnecessary ', 'Fix "null" instead of the component stack in a warning (#10915)\n\n\nAdd a failing test that prints "null" in the warning instead of the stack\n\n\nDon\'t reset the current fiber during reconciliation\n\n\nIt should only be reset when we stop doing work.\nOtherwise, any warnings after the reset will lose the component stack.\nThe reset in getMaskedContext() was completely unnecessary.\nIt is always called with the same fiber as the current work in progress.\nTherefore, I add a DEV-only warning assertion to ensure we don\'t regress, and remove the reset.\nThe reset in processChildContext() is necessary because it can be called outside of reconciliation.\nUnfortunately, we have to keep this hack in until we can remove unstable_renderSubtreeIntoContainer().\nTo work around it, I restore the previous fiber instead of resetting.\n\nDecouple setting the current fiber and phase\n\nThese are two distinct actions.\nThis helps make it clearer when we\'re actually changing the current pointer.\nI\'m also removing an overengineered hack I previously added for unstable_renderSubtreeIntoContainer. It\'s not necessary now that we don\'t null the pointer all the time.\nThis makes the code more straightforward.\n\nCentralize the pointer updates in the scheduler\n', "[website] a11y fixes (#10927)\n\n[Gatsby docs a11y] Add aria-label to search input\n\nwhat is the change?:\nSee title.\nwhy make this change?:\nThere was no label on this input, and screen readers might not have been\nable to identify it's purpose.\nThe placeholder doesn't count as a label.\ntest plan:\nManually inspected the HTML in the devtools, and ran the aXe a11y audit\ntool, and the warning generated by aXe was gone.\nissue:\nChecklist item on list of docs a11y issues -\nhttps://github.com/bvaughn/react/wiki/Gatsby-A11y-Fixes\n\n[Gatsby Docs a11y] Increase contrast of 'installation' page tabs\n\nwhat is the change?:\nChange the dark blue used for the text/background of the tabs on the\n'installation' page to a slightly darker blue, which we were already\nusing for the 'focus' style of the tabs. It looked a bit weird before,\nimo, when the 'focus' was darker.\nNow the 'focus' style just lightens the border to the new signature\nblue.\nwhy make this change?:\nTo add enough contrast that folks who see colors differently can still\ndecipher the writing on the tabs on this page.\nWe plan to refactor this page and remove the tabs soon, so not too\nworried about making this fix perfect.\ntest plan:\nManual testing - loaded the page and it looks ok, and ran aXe a11y\naudit, no more warnings about contrast. :)\n(Flarnie will insert a screenshot)\nissue:\nchecklist item on https://github.com/bvaughn/react/wiki/Gatsby-A11y-Fixes", 'Add React Summit Nigeria to the list of conferences. (#10939)', 'remove note about license for example (#10943)\nremoving the old mention of license for examples. since there is no examples in the repository and also the license for them was deleted here', 'Tweaks to "Introducing JSX" (#10944)\n\n\nTweaks to "Introducing JSX"\n\n\nUpdate introducing-jsx.md\n\n\nUpdate introducing-jsx.md\n\n\nUpdate introducing-jsx.md\n\n', '[Gatsby] README.md instructions (#10945)\n\n\nPadded out README.md instructions\n\n\nfixed markdown links and added reloading notes\n\n\nadded more yarn instructions\n\n\nremoved html.js instruction\n\n', "Don't include warning in production (#10946)\nFixes a size regression I introduced in #10802.", "Use ES6 module instead of commonJS (#10953)\n\nUse ES6 module instead of commonJS\n\nAs far as I know, we're using ES6 modules throughout the docs. For the sake of consistency :)\n\nConvert all CommonJS requires to ES6 module\n", "Don't let UMD create extraneous global variables (#10935)", 'Added unstable_batchedUpdates as breaking change to v16 post (#10954)\n\nAdd breaking change\n\nReactDOM.unstable_batchedUpdates now only takes one argument.\n\n\nReword\n\n\nUpdate CHANGELOG.md\n\n', 'Add changelog for unreleased commits', '[Gatsby] Updated og-image location (#10942)', 'Fix note formatting (#10966)', 'Fix og:url on SSR (#10902)', '[Gatsby] "https://facebook.github.io/react/" -> "https://reactjs.org/" (#10970)', 'Fix anchor links in reference-react documentation (#10975)', '[Gatsby] Removed Typekit in favour of system fonts (#10988)', '[Gatsby] Installation tabs design (#10989)', '[Gatsby] Darkened line-highlight to increase contrast (#10931)\n\n\nDarkened line-highlight to increase contrast\n\n\nadded current line to line highlight\n\n\nremoved blue line\n\n', 'chore(docs) Remove extra style tag curly braces (#10973)\nRemoved an extra quoted set of curly braces..', "fix(examples/todo): don't submit empty values (#10979)", 'tweak search style (#10985)', 'Fix HTML file download link', 'Fix createPortal link in API docs (#11000)\nThe anchor name is lower case', 'Update Reference-readme to remove React.DOM (#10999)\nReact.DOM is now Undefined in React 16 so React.DOM.div or React.DOM.button are no longer possible.', '[website] Fix Layout Footer in Contribuiting pages. (#11014)\n\n\nFix layout footer in contribuiting pages.\n\n\nRun prettier-all\n\n', 'Improve docs for select multiple (#9539)\n\n\nReadd original select multiple note\n\n\nUpdate forms.md\n\n', 'Remove Stack-only DEV code (#10797)', 'Update web-component docs to current standard (#11020)\nThe documentation example for Web Components uses deprecated Custom Element and Shadow DOM APIs [0]. This change updates the example to the v1 APIs, which are the current standard.\n[0] https://developers.google.com/web/fundamentals/web-components/customelements#historysupport', 'Disambiguate #react and #reactjs IRC channels (#11025)', 'Remove Stack (part 4: remove Stack-only branches and types) (#10798)\n\n\nRemove findDOMNode injection and inline it\n\n\nRemove Stack-only code in ReactGenericBatching\n\n\nRemove Stack-only code branches\n\n', 'Combine rendered Note section (#11026)', "Delete DOMProperty www shim\nIt's unused", 'Update sizes', 'Clarify the IRC channel confusion', 'Stop exposing DOMProperty for the www build (#11029)', 'Add legacy JSFiddle files (#11030)\n\n\nAdd legacy JSFiddle files\n\n\nExclude from Prettier\n\n', "Fixed: [website] Handling Events shows wrong 'current' highlight (#10998)", 'issue 10986. [website] Buttons in Live Code sections have bad styling (#11009)', 'Clarify implementation of tick() in Lifecycle docs (#11002)\nThis documentation change clarifies how the method tick() relates to the example given in the State and Lifecycle documentation. Why this change is necessary is because it may be confusing for beginners who may mistake tick() to be a lifecycle API hook.  To clarify, the verbiage is changed so that it becomes more clear that the method is specific to the component and not the API.', 'Ensure all external links have consistent behavior (#11012)', 'Fix lint error in master', 'Add  to the attribute table (#11034)', 'Fix lint', 'Fix tabIndex attribute for SVG (#11033)\n\n\nFix tabIndex attribute for SVG\n\n\nUpdate the attribute table\n\n', 'Update the changelog', 'Whitelist  from unknown tag warning (#11035)', 'Add note to changelog', 'Fix 404 for warning URLs (#11038)', 'Fix rendering into shadow root (#11037)\n\n\nReplace skipped unit test with a fixture\n\n\nFix crash for custom elements\n\n', 'Add changelog entry', "Update JSFiddle templates for React 16 (#11040)\nThese were broken after 16 was tagged as latest on npm. This fixes that problem, and also adds two template options: one for React 16 and one for React 15. I figure we should provide both for now, since there's still a lot of 15.x users.", 'Docs: add link to DOM Level 3 spec for possible values of key prop (#11042)', 'Update react summit Nigeria title (#11046)', 'Refactored Installation page to no longer use tabs (#11050)', 'Remove bundle-collapser browserify recommendation (#11051)\n\n\nMove bundle-collapser browserify plugin recommendation to a note.\n\n\nRemove bundle-collapser note entirely\n\n', '[Website] Add titles and labels to iframes and images on Community pages (#11041)\n\n[Website] Add titles and labels to iframes and images on Community pages\n\nwhat is the change?:\n- add titles to all iframes\n- add alt tags to images\n- add aria-label to some links which only have images as contents.\nwhy make this change?:\nBased on warnings thrown by aXe a11y audit of those pages\ntest plan:\nManual testing\nissue:\nNone\n\nremove redundant alt tags\n', 'Only run custom element fixture in browsers that support it (#11052)', 'Removed PooledClass (and tests) (#11053)', 'Fixing how to contribute beginner friendly issues GitHub link (#11063)\n\n\nFixing how to contribute beginner friendly issues GitHub link\n\n\nFixing again url for how to contribute beginner friendly issues GitHub link\n\n', 'Add test for mounting into a document fragment (#11047)', 'Update conferences (#10781)\n\n\nUpdate conferences\n\n\nUpdate conferences.md\n\n', 'Replace hyperlink tag with button tag in tic-tac-toe tutorial and update related references in the tutorial document (#11045)', 'Fix all GitHub issues and PRs query params (#11066)', 'Update button labels', 'Only define MyElement when needed (#11069)', "style(docsearch): add cursor + logo (#11032)\n\nstyle(docsearch): add cursor + logo\n\nfixes #10965\nNot completely convinced about the cursor colour, but I couldn't really find a better one, cc @joecritch\n\n\nfix margin\n\n\nstyle(docsearch): add cursor + logo\n\n\nfixes #10965\nNot completely convinced about the cursor colour, but I couldn't really find a better one, cc @joecritch\n\npadding\n", '[website] Add RSS Feed to website (#11056)', 'Live code editor ignores tab key for improved a11y (#10992)', 'Fork React Native render into an "RT" renderer (#11072)\nThis is an experimental new protocol for some experiments we want to play\nwith. To make that easier, I\'m just going to fork it.\nThis experiment won\'t use the event system so I by-pass it and just invoke\nfunctions on the props object for now.\nI also fork the UIManager into a new RTManager.', "Rewrite ReactDOMSelection to use fewer ranges (#9992)\nWe heard from Chrome engineers that creating too many Range objects slows down Chrome because it needs to keep track of all of them for the case that anchor/focus nodes get removed from the document. We can just implement this calculation without ranges anyway.\njsdom doesn't support Range objects, but I copied the fuzz test code into my browser and manually compared it against our old implementation https://gist.github.com/sophiebits/2e6d571f4f10f33b62ea138a6e9c265c; with 200,000 trials no differences were found.", 'Fixes example in Web Components docs (#11039)\n\n\nfixes docs on webcomponent\n\n\nUpdate web-components.md\n\n', 'Correct logo url (#11090)', 'Fix blog issues that resulted from migration (#11089)', 'Remove references to PATENTS that crept in (#11091)', "Tweak wording based on @landermkerbey's suggestion in #10433#issuecomment-324488168", 'Fix SyntheticEvent constructor comments (#11011)', 'Add production bundles for Test and Shallow renderers (#11112)\n\n\nAdd production bundles for Test and Shallow renderers\n\n\nRemove unused/broken file from test renderer\n\n\nAdd production bundle for TestUtils\n\n', "Adjacent text nodes in SSR should have comments between them despite components (#11109)\n\n\nAdd a failing test for text nodes within components\n\n\nReset the text node flag only when emitting tags\n\n\nThis ensures we don't reset it when we exit components that return strings.\n\n\nAdd a failing test for a more complex tree\n\n\nAlso reset text flag when emitting a footer\n\n\nThis fixes the {'a'}{'b'} case and prevents an unnecessary comment before 'b'.", 'Ignore CR/LF differences when warning about markup mismatch (#11119)\n\n\nAdd regression test for CR-insensitive hydration\n\n\nNormalize CR when comparing server HTML to DOM\n\n\nMove tests in the file\n\n\nAdd a failing test for comparing attributes\n\n\nNormalize CR for attributes too\n\n\nAdd a test case for CR in dangerouslySetInnerHTML\n\n\nUndo the fix per feedback\n\n\nChange the fix to be DEV-only and still patch up LF -> CR\n\n\nRemove the dangerouslySetInnerHTML test\n\n\nIt\'s always going to "pass" because we normalize HTML anyway.\nExcept that it won\'t pass because we intentionally don\'t patch up dangerouslyInnerHTML.\n\n\nFix issue that Flow failed to catch\n\n\nAdd null character tests\n\n\nNormalize both client and server value for the warning\n\n\nFix the bug\n\n\nNormalize replacement character away as well\n\n\nFix outdated comment\n\n', "[RT] Minor clean up (#11122)\n\n\nRename rootNodeID -> tag\n\n\nProcess RT props before forwarding them along\n\n\nThis is needed because the children prop can't be serialized.\nAlso, some minor placeholder for events.", 'Use indexOf instead of includes in RangeKeyboardFixture (#11133)\nAllows the DOM Fixture change test case to work in older browsers.', "Add focus helper to range test, update button styles (#11134)\nWhen testing range input change events, clicking the knob would cause\nit to move if the click region wasn't precisely on the center of the\nknob.\nThis is annoying! This commit adds a button to focus the range input\nknob and takes a small pass at styling buttons.\nA label would work here too, however it does not generate a focus ring\nin all browsers.", "Delete documentation and website source (#11137)\n\n\nDeleted docs folder\n\n\nDeleted www folder\n\n\nRemove Netlify website build command\n\n\nRemoved refs to docs and www from ESlint config\n\n\nRemoved refs to www/docs from Flow config\n\n\nRemoved unnecessary .gitignore config\n\n\nUpdated license check to remove refs to docs\n\n\nRemoved gh-pages specific portions of Circle build scripts\nThere may be more that we can remove (eg set_up_github_keys.sh) but I'm not positive\n\n\nRemoved docs specific license\n\n", "Added check to deduplicate function type warning calls on each compon… (#11120)\n\n\nAdded check to deduplicate function type warning calls on each component type\n\n\nAdded test to check that 'function type as React child' warning is deduplicated correctly by component type\n\n\nRan prettier on added code\n\n\nModified test checking deduplication of 'Functions are not valid as a React child' warning so it will check against rerendering component now\n\n", 'Add more items to the rolling changelog', 'Deduplication of warning messages in nested updates (#11081) (#11113)', 'Add an item to changelog', "[RT] More predictable things (#11139)\n\nInject the right event emitter\n\nPreviously this was injecting the ReactNativeEventEmitter even though\nwe want the ReactNativeRTEventEmitter.\nRCTEventEmitter is also just an abstraction around BatchedBridge that\nregisters a single name. We can't register more than one with it. Removed\nthat abstraction for now so we don't have to add it back into the RN repo.\n\nUnify appendChildToDetachedParent and appendChild, separate root\n\nMerge appendChildToDetachedParent and appendChild. We don't need the distinction.\nWe do however need a separate notion for the root container.\nCalling this appendChildToContext since Context has a meaning here.\n\nAdd a simple shallow comparison so that we don't send updates for equal props\n\nThis still sends all props if any differs. Not sure we'll want that but I\nthink so.\n\n\nAdd BatchedBridge to bundle externals\n\n\nLint\n\n", "Ignore SSR warning using explicit suppressHydrationWarning option (#11126)\n\nPass parent type and props to insert/delete hydration warning hooks\n\nFor this to work, we need to split the API into a container and normal\nversion. Since the root doesn't have a type nor props.\n\nIgnore SSR warning using explicit suppressHydrationWarning option\n\nThis lets you ignore the warning on a single element and its direct child\ncontent. This is useful for simple fields that you're expecting to fail\nsuch as time stamps.\nNote that this still won't patch up such content so it'll remain\ninconsistent. It's also not suitable for nested complex content that may\nchange.\n\n\nSuppress warning of inserted/deleted direct children\n\n\nAdd fixture testing hydration warning\n\n\nAlso fixing the render->hydrate API change in the fixture\n\nAdd hooks when text hydration doesn't match up\n\nThe purpose of these hooks is to pass the parent context to them. I don't\nwant to do that in the normal hydrateTextInstance hooks since this is\nonly used in DEV. This is also in line with what happens if there is no\ntext instance at all and we invoke didNotFindHydratableTextInstance.\n\nMove mismatch text hydration warning to the new hooks\n\nThis lets us ignore this call when we have parent props available and\nthe suppression flag is set.", 'Bump peer deps of react to ^16.0.0 (#11156)', 'Fix incorrect calculation of onMouseEnter/Leave component path (#11164)\n\n\nAdd a regression test for #10906\n\n\nTurn while conditions into breaks without changing the logic\n\n\nThis will be easier to follow when we add more code there.\n\nvar => const/let\n\nSo that I can add a block scoped variable.\n\nCheck alternates when comparing to the common ancestor\n\nThis is the actual bugfix.', "Allow custom attribute named on to be passed on to elements (#11153)\n\n\nAllow single on property for custom elements\n\n\nRemove test from ReactDOMComponent-test\n\n\nAllow custom attribute named 'on' to be passed\n\n\nCheck property length instead of comparing strings\n\n", "Expiration times (#10426)\n\n[Work-in-progress] Assign expiration times to updates\n\nAn expiration time represents a time in the future by which an update\nshould flush. The priority of the update is related to the difference\nbetween the current clock time and the expiration time. This has the\neffect of increasing the priority of updates as time progresses, to\nprevent starvation.\nThis lays the initial groundwork for expiration times without changing\nany behavior. Future commits will replace work priority with\nexpiration times.\n\nReplace pendingWorkPriority with expiration times\n\nInstead of a priority, a fiber has an expiration time that represents\na point in the future by which it should render.\nPending updates still have priorities so that they can be coalesced.\nWe use a host config method to read the current time. This commit\nimplements everything except that method, which currently returns a\nconstant value. So this just proves that expiration times work the same\nas priorities when time is frozen. Subsequent commits will show the\neffect of advancing time.\n\nTriangle Demo should use a class\n\nshouldComponentUpdate was removed from functional components.\nRunning the demo shows, now that expiration is enabled, the demo does\nnot starve. (Still won't run smoothly until we add back the ability to\nresume interrupted work.)\n\nUse a magic value for task expiration time\n\nThere are a few cases related to sync mode where we need to distinguish\nbetween work that is scheduled as task and work that is treated like\ntask because it expires. For example, batchedUpdates. We don't want to\nperform any work until the end of the batch, regardless of how much\ntime has elapsed.\n\n\nUse current time to calculate expiration time\n\n\nAdd unit tests for expiration and coalescing\n\n\nDelete unnecessary abstraction\n\n\nMove performance.now polyfill to ReactDOMFrameScheduling\n\n\nAdd expiration to fuzz tester\n\n\nExpiration nits\n\n\nRename Done -> NoWork\n\nUse max int32 instead of max safe int\nUse bitwise operations instead of Math functions\n", "Clear previous children when SVG node doesn't have innerHTML (#11108)\n\n\nclear previous children when SVG node doesn't have innerHTML\n\n\nremove 'get' handler for appendChild in test node proxy\n\n", 'Update rolling changelog', 'Shallow renderer: support multiple setState invocation (#11167)', 'Update changelog', 'Record sizes', "Fix form reset for uncontrolled select elements (#11057)\n\n\nSet defaultSelected on option element from select's defaultValue\n\n\nAdd form reset fixture for selects\n\n\nPass explicit value for setDefaultSelected\n\n", 'Changelog', 'Remove broken link from licence (#11176)', 'Fix obscure error message when passing an invalid style value for SSR (#11173)\n\n\nAdd failing iframe test\n\n\nPossible fix by returning null ownerName in SSR\n\n\nprettier\n\n\neslolint\n\n\ngah c’mon really?\n\n\nemptyFunction.thatReturnsNull\n\n\nOne less property access\n\n', 'Update changelog', "Don't set empty placeholder to work around IE11 bug (#11177)\n\n\nDon't set empty placeholder to work around IE11 bug\n\n\nAdd fixture for textarea placeholders\n\n", 'Update changelog', 'Fix false positive SVG hydration warning for mixed case tags (#11174)\n\nAdd a failing test for  SSR\n\nIt causes a false positive warning on hydration.\n\nMake hydration tag comparison case insensitive\n', 'Fix false positive  rehydration text difference warning in React 16 (#11157)\n\n\nAdd  with HTML in it to SSR fixture\n\n\nWrap  into a  to get its "client HTML"\n\n\nRevert "Wrap  into a  to get its "client HTML""\n\n\nThis reverts commit 27a42503e2790a0d5cf0b90451a664fc6ab9d862.\n\nAlways use parent.ownerDocument\n', 'Update build scripts to put RN-RT files in the right places (#11183)', 'Fix DOM fixture for 16.0.0', 'Move loop init variable assignment (#11182)', "Keep autoFocus attribute in the DOM (#11192)\n\n\nKeep autoFocus attribute in the DOM\n\n\nDon't emit autoFocus attribute on the client\n\n\nTest that hydration doesn't call focus\n\n\nAdd autoFocus to SSR fixture\n\n", 'Record sizes', 'Add to changelog', 'React reconciler package (#10758)\n\n\nInitial commit of react-reconciler bundle\n\n\nI think it’s working 🙀\n\n\nReact reconciler: slightly better description and README\n\n\nDrop react-reconciler version to an unstable release number\n\n\nConvert to moduleType enum and fix packaging\n\n\neslint\n\n\ns/Renderer/Reconciler in docs\n\n\nyarn prettier\n\n\nchange names of things in the react-reconciler readme\n\n\nchange predicate\n\n\nrollup: flip object-assign shimming check\n\n\ncopy noop renderer into react-reconciler fixture\n\n\nChange reconciler fixture test\n\n\nprettier\n\n\nRemove a bunch of Noop test renderer\n\n\nDelete a bunch of stuff we don’t care about for reconciler teesting. Add flow pragmas for future flow pragma testing\n\n\nRemove PATENTS\n\n\nUpdate Reconciler fixture docs\n\n\nReactDOMUnstableNativeDependencies should be ISOMORPHIC\n\n\nInline fixture renderer\n\n\nMake it "RENDERER"\n\n\nThere is no UMD build. It also doesn\'t need propTypes.\n\n\nTweak how the reconciler is built\n\n\nRecord sizes\n\n\nUpdate README.md\n\n', "Remove priority coalescing and PriorityLevel module (#11187)\nCoalescing is the only feature that depends on PriorityLevel. Since\nwe're not sure if coalescing is even valuable, we'll remove it for\nnow. If it turns out we need it, we can add it back later.", "Add exception for 16.alpha when loading React in DOM Fixtures (#11200)\nThe file structure was updated in 16. This wasn't the case for\nalphas. We need to load the old module location for anything less than\n16 RC.", 'chore(syntheticEvent): remove IE8 code (#11178)\n\nchore(syntheticEvent): remove IE8 code\n\nSince IE8 has been deprecated for a while, I thought it might be useful to remove some IE8-only code\nIf this is not something you want to focus on yet, or is too much work to test, feel free to close this PR\n\n\nUpdate SyntheticUIEvent.js\n\n\nUpdate SyntheticUIEvent.js\n\n\nremove unused require\n\n\ncompletely remove UIEvent\n\n\naugment with noop\n\n\neverything breaks otherwise\n\n\ncomment back\n\n\nspacing\n\n', 'Sync setStates inside willUpdate and didUpdate should flush at same time (#11212)\nIn sync mode, we downgrade sync priority work to task work when we\'re in\nthe commit phase, but not in the render phase. That means if you\nschedule updates in both phases, the render phase update will flush\nfirst, and the commit phase update will flush after that. What should\nreally happen is that both updates flush at the same time.\nTo solve this, updates in the commit phase are now given sync priority.\nThe distinction between task and sync really only exists to account for\na historical quirk in the behavior of top-level mounts. (Refer to the\ntest case titled "initial mount is sync inside batchedUpdates".)\nIdeally, there would only be one priority for both sync and task. This\ngets us closer to that model, while still accounting for\ntop-level mounts.', '[CS] Split Host Config Out into a Mutable or Immutable Mode (#11213)\n\nCS renderer\n\nBecause we didn\'t have enough RN experiments. I want to add one more.\n\nSplit out hydration from the host config object\n\nThis makes it easier to do feature detection on the configuration.\n\n\nMove mutation host config to separate optional object\n\n\nRefs and life-cycles should happen even in immutable mode\n\n\nUnmount components even in non-mutation mode\n\n\nThis is the same as committing deletions but instead of finding host\ncomponents to delete, it only invokes componentWillUnmount and detaching\nof refs.\n\nAdd persistent updates API\n\nThis mode will use a clone based API instead of mutating host instances.\nNeeds implementation still.\nIt\'s awkward that there can be more than one child inserted into the root.\nSo we need a new API to create a "root" instance so that we can update it\natomically. Alternatively we could keep the mutable API for containers\nand assume that most use cases would only have a single root.\n\n\nPackage up CS renderer\n\n\nFix reconciler package fixture\n\n', "Deterministic updates (#10715)\n\nDeterministic updates\n\nHigh priority updates typically require less work to render than\nlow priority ones. It's beneficial to flush those first, in their own\nbatch, before working on more expensive low priority ones. We do this\neven if a high priority is scheduled after a low priority one.\nHowever, we don't want this reordering of updates to affect the terminal\nstate. State should be deterministic: once all work has been flushed,\nthe final state should be the same regardless of how they were\nscheduled.\nTo get both properties, we store updates on the queue in insertion\norder instead of priority order (always append). Then, when processing\nthe queue, we skip over updates with insufficient priority. Instead of\nremoving updates from the queue right after processing them, we only\nremove them if there are no unprocessed updates before it in the list.\nThis means that updates may be processed more than once.\nAs a bonus, the new implementation is simpler and requires less code.\n\nFix ceiling function\n\nMixed up the operators.\n\nRemove addUpdate, addReplaceState, et al\n\nThese functions don't really do anything. Simpler to use a single\ninsertUpdateIntoFiber function.\nAlso splits scheduleUpdate into two functions:\n\nscheduleWork traverses a fiber's ancestor path and updates their\n  expiration times.\n\nscheduleUpdate inserts an update into a fiber's update queue, then\n  calls scheduleWork.\n\n\nRemove getExpirationTime\n\n\nThe last remaining use for getExpirationTime was for top-level async\nupdates. I moved that check to scheduleUpdate instead.\n\nMove UpdateQueue insertions back to class module\n\nMoves UpdateQueue related functions out of the scheduler and back into\nthe class component module. It's a bit awkward that now we need to pass\naround createUpdateExpirationForFiber, too. But we can still do without\naddUpdate, replaceUpdate, et al.\n\nStore callbacks as an array of Updates\n\nSimpler this way.\nAlso moves commitCallbacks back to UpdateQueue module.\n\n\nbeginUpdateQueue -> processUpdateQueue\n\n\nUpdates should never have an expiration of NoWork\n\n\nRename expiration related functions\n\n\nFix update queue Flow types\n\n\nGets rid of an unneccessary null check", "ReactDOM.createRoot (#11225)\n\nReactDOM.createRoot\n\nIntroduce new API for creating roots. Only root.render and root.unmount\nare implemented. Later we'll add root.prerender, and support for lazy\nroots (roots with DOM containers that resolve lazily).\n\nAdd hydrate option to createRoot\n", 'Fix typos (#11204)\n\n\nUse an MVP rather than a MVP\n\n\nUse the capital letter for React and highlight eslint-plugin\n\n\nFix typos\n\n', 'Use value on  instead of setting selected on  (#11206)', 'Record sizes', 'Bump Jest version (#11241)', "Release script (#11223)\n\n\nFirst chunk of new release script\n\n\nRe-ordered build steps to combine error codes and releases\n\n\nReorganized build files; added stub publish script\n\n\nFirst pass at publis script. Also collect and print dry-run commits/publish commands.\n\n\nDeleted old react-release-manager scripts\n\n\nCleaned up release package.json\n\n\nBasic README instructions\n\n\nRemoved unnecessary 'async' keyword from a method\n\n\nWordsmithing\n\n\nTweaked README\n\n\nRenamed build -> build-commands and publish -> publish-commands to avoid conflict with .gitignore\n\n\nBump pre-release package versions differently\n\n\nPrettier\n\n\nImproved CircleCI API token setup instructions message\n\n\nLint fix\n\n\nTypofix\n\n", 'Tweaked wording of release script README', 'Simplify Jest config a little bit (#11242)\n\n\nInline getTestDocument into test cases\n\n\nRemove mention of mock file we do not use\n\n\nRemove unused configuration entries\n\n\nMove eslint-rules package into the scripts/ folder\n\n', "Simplify Jest-specific tests (#11243)\n\nDelete tests that only mattered during createElement transition\n\nThey were added after #2576, but were only important when React.createElement was introduced as a migration path.\nNow that elements are used consistently, these tests shouldn't be necessary.\nI created a separate test specifically for scryRenderedComponentsWithType() though because that was the only one.\n\nSimplify mocking test setup\n\nToday, the only remaining special behavior for Jest mocks is we let them render undefined.\nWe don't plan to introduce any other special behavior for them in the future.\n(In fact, we already decided against replicating this special behavior for functional components.)\nTherefore, we can remove dependency on Jest automocking mechanism in these tests completely,\nand just explicitly mock the render method which is the only one for which we have special behavior.\nFor clarity, we add an explicit test for mockComponent() API (whose naming is a bit of a lie).", 'Drop name and commonerConfig from package.json (#11244)', 'Delete adler32 implementation (#11250)', 'Move Flow environment into scripts/flow (#11249)\n\n\nMove flow environment into scripts/flow\n\n\nRun Prettier\n\n', 'Remove broken links from React ART readme', 'isPortal() is not referenced anywhere (#11256)', "Don't mark portals for updates (#11255)", 'Removed test utils dependency on test renderer from bundle config (#11259)', 'Record sizes', 'Delete .netlify (#11261)', 'Put NativeCS bundles into their own directory (#11266)', 'Added component stack to contentEditable warning (#11208)\n\n\nAdded component stack to contentEditable warning\n\n\nAdded component stack to contentEditable warning\n\n', 'Remove unused bundle flag (#11267)', 'Fix forceUpdate in shallow test renderer (#11239)', 'Update rolling changelog', 'Remove unnecessary comparison; (#11215)', "Add note to 'unreleased' CHANGELOG about deprecating Bower (#11262)\n\nAdd note to 'unreleased' CHANGELOG about deprecating Bower\n\nwhat is the change?:\nWe will no longer release new versions of React to Bower, and we should\nannounce that as part of our CHANGELOG.\nwhy make this change?:\nWe decided on this as a team.\ntest plan:\nVisual inspection and spell check. :)\nissue:\nJust follow-up for https://github.com/facebook/react/pull/11223\n\n\nImprove messaging/formatting\n\n\nMove bower deprecation notice to top of changelog\n\n", 'Add static injection for feature flags (#11269)\n\n\nReplace ReactDOMFeatureFlags with ReactFeatureFlags\n\n\nAdd static injection for feature flags\n\n', "Render-phase setState bugfix (#11272)\nFixes a bug surfaced by www unit test.\nI'm not yet sure the best way to test this; in the interest of landing\nthis fix quickly, I'll save the test for a follow-up.", 'Better fix for base state bug (#11273)', 'Use sigil instead of comparing baseState to null', "Use Yarn Workspaces (#11252)\n\n\nEnable Yarn workspaces for packages/*\n\n\nMove src/isomorphic/ into packages/react/src/\n\n\nCreate index.js stubs for all packages in packages/*\n\n\nThis makes the test pass again, but breaks the build because npm/ folders aren't used yet.\nI'm not sure if we'll keep this structure--I'll just keep working and fix the build after it settles down.\n\n\nPut FB entry point for react-dom into packages/*\n\n\nMove src/renderers/testing/ into packages/react-test-renderer/src/\n\n\nNote that this is currently broken because Jest ignores node_modules,\nand so Yarn linking makes Jest skip React source when transforming.\n\nRemove src/node_modules\n\nIt is now unnecessary. Some tests fail though.\n\nAdd a hacky workaround for Jest/Workspaces issue\n\nJest sees node_modules and thinks it's third party code.\nThis is a hacky way to teach Jest to still transform anything in node_modules/react\nif it resolves outside of node_modules (such as to our packages/) folder.\nI'm not very happy with this and we should revisit.\n\n\nAdd a fake react-native package\n\n\nMove src/renderers/art/ into packages/react-art/src/\n\n\nMove src/renderers/noop/ into packages/react-noop-renderer/src/\n\n\nMove src/renderers/dom/ into packages/react-dom/src/\n\n\nMove src/renderers/shared/fiber/ into packages/react-reconciler/src/\n\n\nMove DOM/reconciler tests I previously forgot to move\n\n\nMove src/renderers/native-/ into packages/react-native-/src/\n\n\nMove shared code into packages/shared\n\n\nIt's not super clear how to organize this properly yet.\n\n\nAdd back files that somehow got lost\n\n\nFix the build\n\n\nPrettier\n\n\nAdd missing license headers\n\n\nFix an issue that caused mocks to get included into build\n\n\nUpdate other references to src/\n\n\nRe-run Prettier\n\n\nFix lint\n\n\nFix weird Flow violation\n\n\nI didn't change this file but Flow started complaining.\nCaleb said this annotation was unnecessarily using $Abstract though so I removed it.\n\n\nUpdate sizes\n\n\nFix stats script\n\n\nFix packaging fixtures\n\n\nUse file: instead of NODE_PATH since NODE_PATH.\nNODE_PATH trick only worked because we had no react/react-dom in root node_modules, but now we do.\nfile: dependency only works as I expect in Yarn, so I moved the packaging fixtures to use Yarn and committed lockfiles.\nVerified that the page shows up.\n\n\nFix art fixture\n\n\nFix reconciler fixture\n\n\nFix SSR fixture\n\n\nRename native packages\n\n", 'Delete unnecessary typing from the website', 'Update contribution instructions (#11276)', '[CS] Persistent Updates (#11260)\n\n\nUpdate build size\n\n\n[CS] Clone container instead of new root concept\n\n\nThe extra "root" concept is kind of unnecessary. Instead of having a\nmutable container even in the persistent mode, I\'ll instead make the\ncontainer be immutable too and be cloned. Then the "commit" just becomes\nswapping the previous container for the new one.\n\nChange the signature or persistence again\n\nWe may need to clone without any updates, e.g. when the children are changed.\nPassing in the previous node is not enough to recycle since it won\'t have the\nup-to-date props and children. It\'s really only useful to for allocation pooling.\n\nImplement persistent updates\n\nThis forks the update path for host fibers. For mutation mode we mark\nthem as having an effect. For persistence mode, we clone the stateNode with\nnew props/children.\nNext I\'ll do HostRoot and HostPortal.\n\nRefine protocol into a complete and commit phase\n\nfinalizeContainerChildren will get called at the complete phase.\nreplaceContainer will get called at commit.\nAlso, drop the keepChildren flag. We\'ll never keep children as we\'ll never\nupdate a container if none of the children has changed.\n\nImplement persistent updates of roots and portals\n\nThese are both "containers". Normally we rely on placement/deletion effects\nto deal with insertions into the containers. In the persistent mode we need\nto clone the container and append all the changed children to it.\nI needed somewhere to store these new containers before they\'re committed\nso I added another field.\n\n\nCommit persistent work at the end by swapping out the container\n\n\nUnify cloneOrRecycle\n\n\nOriginally I tried to make the recyclable instance nullable but Flow didn\'t\nlike that and it\'s kind of sketchy since the instance type might not be\nnullable.\nHowever, the real difference which one we call is depending on whether they\nare equal. We can just offload that to the renderer. Most of them won\'t\nneed to know about this at all since they\'ll always clone or just create\nnew.\nThe ones that do know now have to be careful to compare them so they don\'t\nreuse an existing instance but that\'s probably fine to simplify the\nimplementation and API.\n\n\nAdd persistent noop renderer for testing\n\n\nAdd basic persistent tree test\n\n\nTest bail out\n\n\nThis adds a test for bailouts. This revealed a subtle bug. We don\'t set the\nreturn pointer when stepping into newly created fibers because there\ncan only be one. However, since I\'m reusing this mechanism for persistent\nupdates, I\'ll need to set the return pointer because a bailed out tree\nwon\'t have the right return pointer.\n\nTest persistent text nodes\n\nFound another bug.\n\nAdd persistent portal test\n\nThis creates a bit of an unfortunate feature testing in the unmount\nbranch.\nThat\'s because we want to trigger nested host deletions in portals in the\nmutation mode.\n\nDon\'t consider container when determining portal identity\n\nBasically, we can\'t use the container to determine if we should keep\nidentity and update an existing portal instead of recreate it. Because\nfor persistent containers, there is no permanent identity.\nThis makes it kind of strange to even use portals in this mode. It\'s\nprobably more ideal to have another concept that has permanent identity\nrather than trying to swap out containers.\n\nClear portals when the portal is deleted\n\nWhen a portal gets deleted we need to create a new empty container and\nreplace the current one with the empty one.\n\n\nAdd renderer mode flags for dead code elimination\n\n\nSimplify ReactNoop fix\n\n\nAdd new type to the host config for persistent configs\n\n\nWe need container to stay as the persistent identity of the root atom.\nSo that we can refer to portals over time.\nInstead, I\'ll introduce a new type just to temporarily hold the children\nof a container until they\'re ready to be committed into the permanent\ncontainer. Essentially, this is just a fancy array that is not an array\nso that the host can choose data structure/allocation for it.\n\nImplement new hooks\n\nNow containers are singletons and instead their children swap. That way\nportals can use the container as part of their identity again.\n\n\nUpdate build size and error codes\n\n\nAddress comment\n\n\nMove new files to new location\n\n', 'Only renderers should depend on reconciler code (#11281)\n\n\nOnly renderers should depend on reconciler code\n\n\nRemove react-art dependency on react-dom modules\n\n\nThey share ReactDOMFrameScheduling so I moved it to shared.', 'Add component stack to invalid style warnings (#11282)', 'Include component stack in more places, including SSR (#11284)\n\n\nInclude component stack in more places, including SSR\n\n\nForbid including reconciler code into the server bundle\n\n\nTighten up the Flow annotation\n\n\nFix lint\n\n\nGosh Prettier\n\n', 'Fix production crash (#11286)\n\n\nFix production crash\n\n\nAdd regression test\n\n', "Reorganize code structure (#11288)\n\n\nMove files and tests to more meaningful places\n\n\nFix the build\n\n\nNow that we import reconciler via react-reconciler, I needed to make a few tweaks.\n\n\nUpdate sizes\n\n\nMove @preventMunge directive to FB header\n\n\nRevert unintentional change\n\n\nFix Flow coverage\n\n\nI forgot to @flow-ify those files. This uncovered some issues.\n\nPrettier, I love you but you're bringing me down\nPrettier, I love you but you're bringing me down\n\nLike a rat in a cage\nPulling minimum wage\nPrettier, I love you but you're bringing me down\nPrettier, you're safer and you're wasting my time\nOur records all show you were filthy but fine\nBut they shuttered your stores\nWhen you opened the doors\nTo the cops who were bored once they'd run out of crime\nPrettier, you're perfect, oh, please don't change a thing\nYour mild billionaire mayor's now convinced he's a king\nSo the boring collect\nI mean all disrespect\nIn the neighborhood bars I'd once dreamt I would drink\nPrettier, I love you but you're freaking me out\nThere's a ton of the twist but we're fresh out of shout\nLike a death in the hall\nThat you hear through your wall\nPrettier, I love you but you're freaking me out\nPrettier, I love you but you're bringing me down\nPrettier, I love you but you're bringing me down\nLike a death of the heart\nJesus, where do I start?\nBut you're still the one pool where I'd happily drown\nAnd oh! Take me off your mailing list\nFor kids who think it still exists\nYes, for those who think it still exists\nMaybe I'm wrong and maybe you're right\nMaybe I'm wrong and maybe you're right\nMaybe you're right, maybe I'm wrong\nAnd just maybe you're right\nAnd oh! Maybe mother told you true\nAnd there'll always be somebody there for you\nAnd you'll never be alone\nBut maybe she's wrong and maybe I'm right\nAnd just maybe she's wrong\nMaybe she's wrong and maybe I'm right\nAnd if so, here's this song!", 'Fix typos in comments (#11295)', 'Move files in react package (#11294)\n\n\nMove files in react package\n\n\nMove test-only TypeScript definitions into tests subfolder\n\n', "Flatten the shared/ folder (#11297)\n\nshared/src -> shared\n\nIt's not a real package and doesn't even have package.json.\nThis will also make importing less weird if we drop Haste.\n\nGet rid of shared/utils\n\nMoved event-specific into shared/event.\nMoved rest to the root since distinction has always been pretty arbitrary.\n\nFix references to old shared/src paths\n", 'Group event code together and forbid cross-client/server imports (#11298)\n\n\nreact-dom/src/syntheticEvents => events, and put plugins into it\n\n\nFlatten react-dom/src/shared\n\n\nSplit react-dom/src/client/utils into event/ and root client folder\n\n\nMakes it clearer what is used by what.\n\nStrictly separate modules that can be imported by client and server\n', 'Rename shared/event/eventPlugins -> shared/event/plugins\nForgot this as part of my last PR.\nMirrors new ReactDOM structure.', "Rollup script can now extract error codes and build in a single pass (#11291)\n\n\nRollup build scripts can now extract error codes while building\n\n\nI can't spell ternary\n\n", 'Release script no longer auto-updates peerDependencies react version (#11292)\n\nRelease script ensures peer dep matches release major version, but otherwise no longer auto-updates them to exactly match the release version.\nf\n', 'Remove outdated TODO', 'Flatten everything (#11304)\n\n\nFlatten everything\n\n\nFix ReactDOMServerNode build\n\n\nFix native builds\n\n', "Fix build/sync script for RN/CS/RT (#11302)\nWhile testing some changes to RN, I noticed that the '--sync-fbsource' flag had been broken recently by things being moved around and the newly-added CS renderer. Fixed it up.", "Split performWork into renderRoot and commitRoot (#11264)\n\nSplit performWork into renderRoot and commitRoot\n\nIt turns out that the scheduler is too coupled to how the DOM renderer\nworks. Specifically, the requestIdleCallback model, and how roots are\ncommitted immediately after completing. Other renderers have different\nconstraints for when to yield and when to commit work.\nWe're moving towards a model where the scheduler only works on a single\nroot at a time, and the render phase and commit phase are split into\ndistinct entry points. This gives the renderer more control over when\nroots are committed, coordinating multiple roots, deferring the commit\nphase, batching updates, when to yield execution, and so on.\nIn this initial commit, I've left the renderers alone and only changed\nthe scheduler. Mostly, this involved extracting logic related to\nmultiple roots and moving it into its own section at the bottom of the\nfile. The idea is that this section can be lifted pretty much as-is\ninto the renderers. I'll do that next.\n\nRemove FiberRoot scheduleAt\n\nIsn't actually used anywhere\n\nMake the root schedule a linked list again\n\nSince this still lives inside the renderer, let's just use the\nFiberRoot type. The FiberRoot concept will likely be lifted out\neventually, anyway.\n\ncommitRoot should accept a HostRoot\n\nThis way it's less reliant on the alternate model\n\n\nUnify branches\n\n\nRemove dead branch\n\n\nonUncaughtError is only called while we're working on a root.\n\nremainingWork -> remainingExpirationTime\n\nI was wary of leaking NoWork but mixing numbers and null is worse so\nlet's just do it until we think of something better.\n\nRename stuff\n", 'Move DOM-specific event files to the right folder (#11305)', 'Fix renderer example links in README of react-reconciler (#11312)\nFixes facebook/react/issues/#11310', 'Delete unused code in ReactDOMFrameScheduling (#11301)', '[React Children][Flow] Removed useless typechecking, because this file have`t flow comment (#11323)', 'Record sizes', 'Add "prop-types" to dependencies of "react-test-renderer" (#11340)', 'Make "art" a dependency of "react-art" (#11341)\n\n\nMake "art" a dependency of "react-art"\n\n\nAdd it back to root devDeps\n\n', 'Update changelog', 'Expose react-art/{Circle,Rectange/Wedge} on npm (#11343)\n\n\nInclude ART shapes into npm package\n\n\nFix the fixture\n\n\nPrettier oops\n\n', 'Rename Haste modules (#11349)', 'Use simple invariant in case of missing error codes (#11350)', 'Add item to changelog', 'Update CI environment (Node 8, Yarn 1.2.1) (#11355)', "Drop Haste (#11303)\n\n\nUse relative paths in packages/react\n\n\nUse relative paths in packages/react-art\n\n\nUse relative paths in packages/react-cs\n\n\nUse relative paths in other packages\n\n\nFix as many issues as I can\n\n\nThis uncovered an interesting problem where ./b from package/src/a would resolve to a different instantiation of package/src/b in Jest.\nEither this is a showstopper or we can solve it by completely fobbidding remaining /src/.\n\nFix all tests\n\nIt seems we can't use relative requires in tests anymore. Otherwise Jest becomes confused between real file and symlink.\nhttps://github.com/facebook/jest/issues/3830\nThis seems bad... Except that we already don't want people to create tests that import individual source files.\nAll existing cases of us doing so are actually TODOs waiting to be fixed.\nSo perhaps this requirement isn't too bad because it makes bad code looks bad.\nOf course, if we go with this, we'll have to lint against relative requires in tests.\nIt also makes moving things more painful.\n\n\nPrettier\n\n\nRemove @providesModule\n\n\nFix remaining Haste imports I missed earlier\n\n\nFix up paths to reflect new flat structure\n\n\nFix Flow\n\n\nFix CJS and UMD builds\n\n\nFix FB bundles\n\n\nFix RN bundles\n\n\nPrettier\n\n\nFix lint\n\n\nFix warning printing and error codes\n\n\nFix buggy return\n\n\nFix lint and Flow\n\n\nUse Yarn on CI\n\n\nUnbreak Jest\n\n\nFix lint\n\n\nFix aliased originals getting included in DEV\n\n\nShouldn't affect correctness (they were ignored) but fixes DEV size regression.\n\n\nRecord sizes\n\n\nFix weird version in package.json\n\n\nTweak bundle labels\n\n\nGet rid of output option by introducing react-dom/server.node\n\n\nReconciler should depend on prop-types\n\n\nUpdate sizes last time\n\n", 'Remove accidental art peerDep from react-art\nProbably a rebase issue.', 'Expose TapEventPlugin on the www bundle (#11360)', 'Added unit test that would have caught the recent error code transform regression (#11356)\n\n\nAdded an automated test that would have caught the recent error code transform bug\n\n\nRenamed dev-expression-with-codes test to replace-invariant-error-codes\n\n\nFormatting nit\n\n', 'Forbid adding new files with @providesModule (#11361)\n\n\nForbid adding new files with @providesModule\n\n\nTurn off Haste mode in Flow config\n\n\nchmod a+x\n\n\nTry to fix bash\n\n\nTry to fix bash again\n\n', 'Reorder imports (#11359)\n\n\nReorder imports\n\n\nRecord sizes\n\n', 'Temporarily hide broken coverage reporting', 'Add react-call-return package (#11364)', 'Add disclaimer', "Added naive scheduleDeferredCallback implementation for RN (#11362)\n\n\nAdded naive scheduleDeferredCallback implementation for RN\n\n\nFixed ReactNative shim's expected @provideModule\n\n", "Remove Task priority (#11307)\n\nRemove Task priority\n\nThe concept of Task priority was originally added as a way to avoid\nreentrancy. Sync priority is for work that flushes synchronously, and\nTask is for work that flushes at the end of the event loop.\nBut it turns out that in most cases, it's simpler to model Task and\nSync as the same priority level. For example, it's never correct to\nflush Sync work from the update queue without flushing Task. Doing so\ncan lead to infinite update loops.\nAnd using a separate priority level is not necessary to avoid\nreentrancy. We already track when work is being rendered, and exit\nbefore entering the render cycle again. That alone is sufficient.\nThis commit removes Task priority from the codebase. Now we use the\nsame level for both truly synchronous work and work that is deferred\nuntil the end of the event loop.\nThis also enables us to remove DOM-specific legacy cases from the \nreconciler and lift them to the renderer.\n\nRemove isUnbatched from FiberRoot\n\nSimpler to render unbatched roots immediately.\n\nUse a cyclic linked list for root schedule\n\nAvoids the need for a separate isScheduled field.", 'Update Jest and remove hacks (#11372)\n\n\nUpdate Jest\n\n\nRemove hacks for Jest + Workspace integration\n\n\nThey were fixed by https://github.com/facebook/jest/pull/4761.\n\nUse relative requires in tests relying on private APIs\n\nI changed them to absolute to work around a Jest bug.\nThe bug has been fixed so I can revert my past changes now.', 'Fix stray absolute imports', 'maybe proactively redirect some doc site issues (#11235)\n\n\nmaybe proactively redirect some doc site issuesg\n\n\nUpdate ISSUE_TEMPLATE.md\n\n', 'make yarn lock file current (#11375)', 'reference yarn instead of npm in dom fixtures README (#11374)\n\n\nreference yarn instead of npm in dom fixtures README\n\n\nUpdate README.md\n\n', 'Flow-ify ReactPartialRenderer (#11251)\n\n\nflow ReactPartialRenderer\n\n\nprettier\n\n\nmoving flow type around;\n\n\nMove anys to DEV-only code path and keep it typechecked\n\n\nIncrease Flow coverage\n\n', 'Documentation on README (#11368)\n\n\nAdding the Documentation to the README\n\n\nUpdating the Documentation to the README\n\n\nTweaks\n\n', 'Coverage works again', "Fuzz test across multiple roots (#11376)\nWhile refactoring root scheduler, I noticed we have few tests that\ncover updates across multiple roots. To address, I've added multiple\nroot cases to the fuzz tester.\nIncludes a hard-coded test case that was failing before #11307 landed.", "Rewrite ReactDOMInput-test depending on internal API (#11299) (#11309)\n\n\nRewrite tests depending on internal API\n\n\nRemove focus being called when there was no blur event function before\n\n\nRemove triggering function and just let ReactTestUtils take care\n\n\nUse native events\n\n\nRemove duplicate\n\n\nSimulate native event when changing value on reentrant\n\n\nChange wasn't being called\n\n\nUse Simulate only\n\n\nUse React event handlers on test\n\n\nMove commentary\n\n\nLint commit\n\n\nUse native event\n\n\nComment native event dispatching\n\n\nPrettier\n\n\nadd setUntrackedValue\n\n\nPrettier-all\n\n\nUse dispatchEvent instead of ReactTestUtils Simulates;\n\n\nPrettier\n\n\nFix lint\n\n\nRemove useless arg\n\n\nWrap event dispatcher into function\n\n\nRemove deprecated Event\n\n\nRemove unused change event dispatcher\n\n\nFix merge\n\n\nPrettier\n\n\nAdd missing focus/blur calls\n\n\nThey are necessary to cover for the fix in #8240.", 'Add a shim for React 16.0.0 future compatibility (#11388)', '[CS] Implement Some Stuff (#11390)\n\nImplement CS first take\n\nThis is using a pure JS API. This should probably switch to native hooks\nat some later point but I\'ll start ironing out issues at this level first.\n\nUse async scheduling by default\n\nThe scheduled callback gets called immediately in render with infinite\ntime for now. Later this will be per root and abortable.\n\n\nFix up the type signature of the ReactNativeCSType export\n\n\nAdd escape hatch for special cased children\n\n\nWorking around the fact that we can\'t map arbitrary children slots. Just\nthe "children" prop.\n\n\nReadd providesModule for ReactNativeCSTypes\n\n\nFix lint\n\n\nFix ReactNativeTypes providesModule and CI check\n\n\nSpecial case a parent instance that doesn\'t have a props object\n\n\nCSCustom can be anything here. Ugly but whatevs.\n\n\nDon\'t forget to store stateUpdater so that we can trigger updates\n\n\nFix test\n\n', 'Added MIT license badge along with other existing badges. (#11391)', 'Reorder badges by colors', 'Removing dot to avoid redirect to facebook.com (#11400)\n\n\nRemoving dot to avoid redirect to facebook.com\n\n\nChanging phrase instead of using\n\n\nTweak test\n\n\nReset unrelated file\n\n', "Add Fragment as a named export to React (#10783)\n\n\nAdd Fragment as a named export to React\n\n\nRemove extra tests for Fragment\n\n\nChange React.Fragment export to be a string '#fragment'\n\n\nFix fragment special case to work with 1 child\n\n\nAdd single child test for fragment export\n\n\nMove fragment definition to ReactEntry.js and render components for key warning tests\n\n\nInline createFiberFromElementType into createFiberFromElement\n\n\nUpdate reconciliation to special case fragments\n\n\nUse same semantics as implicit childsets for ReactFragment\n\n\nAdd more fragment state preservation tests\n\n\nExport symbol instead of string for fragments\n\n\nFix rebase breakages\n\n\nRe-apply prettier at 1.2.2\n\n\nMerge branches in updateElement\n\n\nRemove unnecessary check\n\n\nRe-use createFiberFromFragment for fragment case\n\n\nSimplyify branches by adding type field to fragment fiber\n\n\nMove branching logic for fragments to broader methods when possible.\n\n\nAdd more tests for fragments\n\n\nAddress Dan's feedback\n\n\nMove REACT_FRAGMENT_TYPE into DEV block for DCE\n\n\nChange hex representation of REACT_FRAGMENT_TYPE to follow convention\n\n\nRemove unnecessary branching and isArray checks\n\n\nUpdate test for preserving children state when keys are same\n\n\nFix updateSlot bug and add more tests\n\n\nMake fragment tests more robust by using ops pattern\n\n\nUpdate jsx element validator to allow numbers and symbols\n\n\nRemove type field from fragment fiber\n\n\nFork reconcileChildFibers instead of recursing\n\n\nUse ternary if condition\n\n\nRevamp fragment test suite:\n\n\nAdd more coverage to fragment tests\n\nUse better names\nRemove useless Fragment component inside tests\n\nRemove useless tests so that tests are more concise\n\n\nCheck output of renderer in fragment tests to ensure no silly business despite states being preserved\n\n\nFinish implementation of fragment reconciliation with desired behavior\n\n\nAdd reverse render direction for fragment tests\n\n\nRemove unneeded fragment branch in updateElement\n\n\nAdd more test cases for ReactFragment\n\n\nHandle childless fragment in reconciler\n\n\nSupport fragment flattening in SSR\n\n\nClean up ReactPartialRenderer\n\n\nWarn when non-key and children props are passed to fragments\n\n\nAdd non-null key check back to updateSlot's array's case\n\n\nAdd test for positional reconciliation in fragments\n\n\nAdd warning for refs in fragments with stack trace\n\n", "Changed the error message displayed when a select element has props.multiple set to true and value set to null (#11141)\n\n\nCorrects error message for select with props.multiple set to true and a null value.\n\n\nDon't bother deduplicating based on type\n\n\nMake the code a bit simpler (and more verbose)\n\n", "Warn if class has a render() method but doesn't extend React.Component (#11168)\nWarn if class has a render() method but doesn't extend React.Component", "Deduplicated many warnings (#11140) (#11216)\n\n\nDeduplicated many warnings (#11140)\n\n\nDeduplicated the following warnings:\n\n\nCan only update a mounted or mounting component.\n    This usually means you called setState, replaceState,\n    or forceUpdate on an unmounted component. This is a no-op\n\n\n%s.componentWillReceiveProps(): Assigning directly to\n    this.state is deprecated (except inside a component's\n    constructor). Use setState instead.'\n\n\nAn update (setState, replaceState, or forceUpdate) was scheduled\n    from inside an update function. Update functions should be pure,\n    with zero side-effects. Consider using componentDidUpdate or a\n    callback.\n\n\nsetState(...): Cannot call setState() inside getChildContext()\n\n\nCode review changes made for #11140\n\n\nMinor style fix\n\n\nTest deduplication for noop updates in server renderer\n\n\nTest deduplication for cWRP warning\n\n\nTest deduplication for cWM setState warning\n\n\nTest deduplication for unnmounted setState warning\n\n\nFix existing Flow typing\n\n\nTest deduplication for invalid updates\n\n\nTest deduplication of update-in-updater warning\n\n", "Fixed invalid prop types error message to be more specific (#11308)\n\n\nModified tests and corrected error message. #3\n\n\nFixed syntax issues. #3\n\n\nModified test. #3\n\n\nPrettified. #3\n\n\nChanged warning message to handle true and false boolean values. #3\n\n\nChanged test to contain undefined instead of value. #3\n\n\nSimplified branch structure. #3\n\n\nRefactored branching logic. #3\n\n\nRefactored falsy warning message and tests. #3\n\n\nChanged condition to attribute name. #3\n\n\nRefactored falsy and truthy warning messages with tests updated. #3\n\n\nAdded missing character. #3\n\n\nFixed warning message. #3\n\n\nCleared extra whitespace. #3\n\n\nRefactored warning messages to be clear. #3\n\n\nPrettified. #3\n\n\nGrammar fix\n\n\nTweak unrelated warning\n\n\nThe message didn't make sense because it appears for any attributes, not just numeric ones.\n\n\nTweak the message for more clarity\n\n\nAdd a special message for false event handlers\n\n\nAdd missing whitespace\n\n\nRevert size changes\n\n", 'Pass pendingProps as argument in createWorkInProgress (#11296)\n\n\nmove to pendingProps to args\n\n\nupdate userFiber in ReactChildFiber\n\n\nprettier it\n\n\nprettier it\n\n\nmove expirationTime to the last\n\n\nmove expirationTime to the last on userFiber\n\n\nMove assignment\n\n', 'add Portal support to React.Children calls (#11378)', "Inline fbjs/lib/EventListener dependency (#11402)\n\nDrop fbjs/lib/EventListener from tests\n\nAssert on the underlying native event listener instead.\nThis test file still needs to be rewritten in terms of public APIs.\n\nInline fbjs/lib/EventListener dependency\n\nWe explicitly don't want to shim this and we don't use the return value.\nWe can probably even drop the IE path now since we don't support it.\nNot sure if that'll be a true breaking change though.\n\nWrap event listeners and the callback passed to requestIdleCallback\n\nThis is a FBism.\nThis uses the injection model in ReactErrorUtils. This isn't technically\ngoing to used for errors but close enough.\nThis really wants to be eager but we can't because of dynamic injection.", 'Record sizes', 'Use warning() over console.error() direct call (#11418)', "Put React.Fragment under a feature flag (#11421)\n\n\nPut React.Fragment under a feature flag\n\n\nDon't export undefined Fragment\n\n", 'Depend on prop-types/checkPropTypes, not prop-types itself (#11420)\n\n\nRemove prop-types/checkPropTypes reimplementation\n\n\nRemove renderer dependency on top-level PropTypes\n\n\nThis annotation is unnecessary because we already warn for bad event listener types.\n\nRecord sizes\n', 'Constructor error message (#11395)\n\n\nConstructor test and fix complete\n\n\nLinters and prettier run\n\n\nRemove unnecessary checks\n\n\nUpdate error message\n\n\nUpdat unit test\n\n\nprettier\n\n\nTweak the check to be more specific\n\n\nMove tests to ReactCompositeComponent-test\n\n\nadd error call count and remove line\n\n', 'Always run React.Fragment tests (#11430)', 'Undo fbjs/lib/EventListener inlining (#11431)', 'Fix lint issues', 'Validate built bundles with a few ESLint rules (#11432)', 'Record sizes', 'Update Rollup (#11427)\n\n\nUpdate Rollup\n\n\nStrip "use strict" in individual modules\n\n\nRecord sizes\n\n', 'Convert the Source to ES Modules (#11389)\n\n\nUpdate transforms to handle ES modules\n\n\nUpdate Jest to handle ES modules\n\n\nConvert react package to ES modules\n\n\nConvert react-art package to ES Modules\n\n\nConvert react-call-return package to ES Modules\n\n\nConvert react-test-renderer package to ES Modules\n\n\nConvert react-cs-renderer package to ES Modules\n\n\nConvert react-rt-renderer package to ES Modules\n\n\nConvert react-noop-renderer package to ES Modules\n\n\nConvert react-dom/server to ES modules\n\n\nConvert react-dom/{client,events,test-utils} to ES modules\n\n\nConvert react-dom/shared to ES modules\n\n\nConvert react-native-renderer to ES modules\n\n\nConvert react-reconciler to ES modules\n\n\nConvert events to ES modules\n\n\nConvert shared to ES modules\n\n\nRemove CommonJS support from transforms\n\n\nMove ReactDOMFB entry point code into react-dom/src\n\n\nThis is clearer because we can use ES imports in it.\n\n\nFix Rollup shim configuration to work with ESM\n\n\nFix incorrect comment\n\n\nExclude external imports without side effects\n\n\nFix ReactDOM FB build\n\n\nRemove TODOs I don’t intend to fix yet\n\n', 'Record sizes', "Remove unnecessary 'use strict' in the source (#11433)\n\n\nRemove use strict from ES modules\n\n\nDelete unused file\n\n\nThis was unused since Stack.", 'Put createRoot export under a feature flag (#11426)', 'Auto-install (or update) release script Yarn deps before running (#11434)', 'Updating yarn.lock file for 16.1.0-beta release', 'Updating package versions for release 16.1.0-beta', 'Update error codes for 16.1.0-beta release', 'Update bundle sizes for 16.1.0-beta release', 'Update changelog', 'Add a link to RCR explanation', 'Fix typo', 'Fix ReactShallowRenderer not rerendering when calling forceUpdate() (#11439)\n\n\nFix ReactShallowRenderer not rerendering when calling forceUpdate()\n\n\nStyle nit\n\n', 'Fix to reset the forceUpdate flag after the update (#11440)\n\n\nFix to reset the forceUpdate flag after the update\n\n\nAdd support for PureComponent and mirror real behavior closer\n\n', 'Remove support for passing badly typed elements to shallow renderer (#11442)', 'Record sizes and fix bundle lint', 'Refer people to "good first issue"\nThis tag is highlighted by GH. We can still tag them with difficulty.', 'Use only public API for EnterLeaveEventPlugin Tests (#11316)\n\n\nUse only public API for EnterLeaveEventPlugin Tests (#11299)\n\n\nTrigger native event to test EnterLeaveEventPlugin (#11299)\n\n\nRewrite EnterLeaveEventPlugin tests to use dispatchEvent\n\n\nUpdate EnterLeaveEventPlugin test to use OnMouseLeave event\n\n\nAdd coverage for onMouseEnter too\n\n', "Release script follow-up work after 16.1.0-beta release (#11437)\n\n\nBuild script creates git tag\n\n\nBuild script post instructions print better relative paths\n\n\nPre-release (<1.0) version numbers also include pre-release suffix (eg '-beta.0')\n\n\nPost-NPM-publish step properly handles minor rev comparison check\n\n\nRelease script also updates @next tag when publishing @latest\n\n\nFixed a typo. Improved inline comment.\n\n", 'Use only public api for ReactDOMEventListener-test.js (#11327)\n\n\nUse only public api for ReactDOMEventListener-test.js\n\n\nUse less confusing naming\n\n\nThere was no need to extract React elements into separate variables.\n\nReplace the "disappearance" test\n\nI could not get it to fail on master so it was probably testing something specific to Stack implementation details. It was also already broken because it didn\'t look at the right argument and never actually called unmountComponentAtNode.\nInstead I replaced it with original repro case from https://github.com/facebook/react/issues/1105 which is when it was introduced.\n\n\nTweak naming and add comments\n\n\nMissed this one\n\n', 'Add a way to suppress DevTools logs and warnings (#11448)', 'Update changelog', 'Validate built bundles exists (#11452)', 'Tweak the bundle validation script\nExit on error, and minor nits.', 'Update getEventKey tests to use public API (#11299) (#11317)\n\n\nAdd flow annotation to getEventKey.\n\n\nRemove Simulate and SimulateNative for native events.\n\n\nStyle nits\n\n\nOops\n\n', 'Rewrite setInnerHTML tests to use Public API. (#11385)\n\n\nRewrite setInnerHTML tests to use Public API.\n\n\nRename variables and drop unnecessary variable assignments.\n\n\nRename testfile to dangerouslySetInnerHTML-test.js\n\n\nProperly prettify test file.\n\n\nRewrite SVG tests to verify we recover from missing innerHTML\n\n', 'make linc script cross platform (#11447)\n\n\nmake linc script cross platform\n\n\nfix typo\n\n\nattempt to fix long command error\n\n\nuse eslint node api\n\n\nUpdate linc.js\n\n', "Use named exports in more places (#11457)\n\n\nConvert EventPlugin{Hub,Registry} to named exports\n\n\nConvert EventPluginUtils to named exports\n\n\nConvert EventPropagators to named exports\n\n\nConvert ReactControlledComponent to named exports\n\n\nConvert ReactGenericBatching to named exports\n\n\nConvert ReactDOMComponentTree to named exports\n\n\nConvert ReactNativeComponentTree to named exports\n\n\nConvert ReactNativeRTComponentTree to named exports\n\n\nConvert FallbackCompositionState to named exports\n\n\nConvert ReactEventEmitterMixin to named exports\n\n\nConvert ReactBrowserEventEmitter to named exports\n\n\nConvert ReactNativeEventEmitter to named exports\n\n\nConvert ReactDOMEventListener to named exports\n\n\nConvert DOMMarkupOperations to named exports\n\n\nConvert DOMProperty to named exports\n\n\nAdd suppression for existing Flow violation\n\n\nFlow didn't see it before.\n\nUpdate sizes\n", 'switch ordering of logical and (#11462)', 'Use prettier api (#11458)\n\n\nuse prettier-api\n\n\nfix string to boolean\n\n\nfix eslint\n\n\nfix typo\n\n\ncleanup\n\n\nuse object assign\n\n', 'Handle prettier error (#11466)\n\n\nhandle prettier error\n\n\nerror if prettier fail\n\n', 'Use const/let in more places (#11467)\n\nConvert ReactDOM to const/let\nConvert ReactDOMComponentTree to const/let\nConvert ReactDOMComponentTree to const/let\nConvert getNodeForCharacterOffset to const/let\nConvert getTextContentAccessor to const/let\nConvert inputValueTracking to const/let\nConvert setInnerHTML to const/let\nConvert setTextContent to const/let\nConvert validateDOMNesting to const/let\n', 'Expose injectIntoDevTools() to renderers (#11463)', 'Use Rollup legacy mode for www builds (#11469)', "Fix dead code elimination for feature flags (#11453)\n\nFix dead code elimination for feature flags\n\nTurning flags into named exports fixes dead code elimination.\nThis required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.\nFor www, we can no longer re-export require('ReactFeatureFlags') directly, and instead destructure it. This means flags have to be known at init time. This is already the case so it's not a problem. In fact it may be better since it removes extra property access in tight paths.\nFor things that we want to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.\n\nRecord sizes\n", 'Record sizes', 'Put perf integration behind a feature flag (#11455)\n\n\nEnable User Timing API integration with a feature flag\n\n\nExpose a way to toggle user timing flag in www\n\n\nUpdate ReactNativeCSFeatureFlags.js\n\n\nUpdate ReactFeatureFlags.js\n\n', 'Split static and dynamic www feature flags (#11471)', 'Amend changelog', 'Correctly replace shims using relative requires (#11472)', 'minor typo (#11477)\nconcurently --> concurrently', 'Add warning for componentDidReceiveProps() (#11479)\n\n\nAdd warning for componentDidReceiveProps()\n\n\nAdjust message for componentDidReceiveProps() warning\n\n', 'Amend changelog', 'Add missing "files" field to react-call-return package', 'Updating package versions for release 16.1.0-beta.1', 'Update error codes for 16.1.0-beta.1 release', 'Update bundle sizes for 16.1.0-beta.1 release', 'Fix error reporting in release script', 'Add react-call-return to publish list', 'Performance tool: Warn when interrupting an in-progress tree (#11480)\n\n\nPerformance tool: Warn when interrupting an in-progress tree\n\n\nInclude the name of the component that caused the interruption\n\n', 'Update prettier to 1.8.1 (#10785)\n\n\nChange prettier dependency in package.json version 1.8.1\n\n\nUpdate yarn.lock\n\n\nApply prettier changes\n\n\nFix ReactDOMServerIntegration-test.js\n\n\nFix test for ReactDOMComponent-test.js\n\n', 'Fix React.createFactory() crash (#11484)\n\n\nAdd a failing test for createFactory in production\n\n\nFix createFactory() in production\n\n\nAdd more prod-only tests\n\n\nFix prettier\n\n\nRun prettier 1.8.1\n\n', 'docs(readme): correct link for "your first PR" (#11489)\nThis info is now on the website and not in CONTRIBUTING.md', "Release script follow-up (#11482)\n\n\nAdd a timeout before querying npm right after publish\n\n\nConditionally log some post publish steps\n\n\nPrint ready-to-paste 'yarn add' instructions for CRA prerelease testing\n\n", 'Fixing typo on test (#11495)\n\nAs ironicaly as it sounds the tests was checking for misspelling\n', 'Consolidate build process with GCC (#11483)\n\n\nConsolidate build process with GCC\n\n\nRecord sizes\n\n\nRefactor header and footer wrapping\n\n\nIt is easier to understand if we just explicitly type them out.', 'Updating package versions for release 16.1.0-rc', 'Update bundle sizes for 16.1.0-rc release', 'Updating package versions for release 16.1.0', 'Update bundle sizes for 16.1.0 release', 'Updating CHANGELOG.md for 16.1.0 release']v16.0.0 16.0.0 (September 26, 2017)
Learn more in the React 16.0 announcement post!

New JS Environment Requirements

React 16 depends on the collection types Map and Set, as well as requestAnimationFrame. If you support older browsers and devices which may not yet provide these natively (e.g. <IE11), you may want to include a polyfill.

New Features

Components can now return arrays and strings from render. (Docs coming soon!)
Improved error handling with introduction of "error boundaries". Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.
First-class support for declaratively rendering a subtree into another DOM node with ReactDOM.createPortal(). (Docs coming soon!)
Streaming mode for server side rendering is enabled with ReactDOMServer.renderToNodeStream() and ReactDOMServer.renderToStaticNodeStream(). (@aickin in #10425, #10044, #10039, #10024, #9264, and others.)
React DOM now allows passing non-standard attributes. (@nhunzaker in #10385, 10564, #10495 and others)

Breaking Changes

There are several changes to the behavior of scheduling and lifecycle methods:
ReactDOM.render() and ReactDOM.unstable_renderIntoContainer() now return null if called from inside a lifecycle method.
To work around this, you can either use the new portal API or refs.


Minor changes to setState behavior:
Calling setState with null no longer triggers an update. This allows you to decide in an updater function if you want to re-render.
Calling setState directly in render always causes an update. This was not previously the case. Regardless, you should not be calling setState from render.
setState callback (second argument) now fires immediately after componentDidMount / componentDidUpdate instead of after all components have rendered.


When replacing <A /> with <B />,  B.componentWillMount now always happens before  A.componentWillUnmount. Previously, A.componentWillUnmount could fire first in some cases.
Previously, changing the ref to a component would always detach the ref before that component's render is called. Now, we change the ref later, when applying the changes to the DOM.
It is not safe to re-render into a container that was modified by something other than React. This worked previously in some cases but was never supported. We now emit a warning in this case. Instead you should clean up your component trees using ReactDOM.unmountComponentAtNode. See this example.
componentDidUpdate lifecycle no longer receives prevContext param. (@bvaughn in #8631)
Non-unique keys may now cause children to be duplicated and/or omitted. Using non-unique keys is not (and has never been) supported, but previously it was a hard error.
Shallow renderer no longer calls componentDidUpdate() because DOM refs are not available. This also makes it consistent with componentDidMount() (which does not get called in previous versions either).
Shallow renderer does not implement unstable_batchedUpdates() anymore.
ReactDOM.unstable_batchedUpdates now only takes one extra argument after the callback.
The names and paths to the single-file browser builds have changed to emphasize the difference between development and production builds. For example:
react/dist/react.js → react/umd/react.development.js
react/dist/react.min.js → react/umd/react.production.min.js
react-dom/dist/react-dom.js → react-dom/umd/react-dom.development.js
react-dom/dist/react-dom.min.js → react-dom/umd/react-dom.production.min.js
The server renderer has been completely rewritten, with some improvements:
Server rendering does not use markup validation anymore, and instead tries its best to attach to existing DOM, warning about inconsistencies. It also doesn't use comments for empty components and data-reactid attributes on each node anymore.
Hydrating a server rendered container now has an explicit API. Use ReactDOM.hydrate instead of ReactDOM.render if you're reviving server rendered HTML. Keep using ReactDOM.render if you're just doing client-side rendering.
When "unknown" props are passed to DOM components, for valid values, React will now render them in the DOM. See this post for more details. (@nhunzaker in #10385, 10564, #10495 and others)
Errors in the render and lifecycle methods now unmount the component tree by default. To prevent this, add error boundaries to the appropriate places in the UI.

Removed Deprecations

There is no react-with-addons.js build anymore. All compatible addons are published separately on npm, and have single-file browser versions if you need them.
The deprecations introduced in 15.x have been removed from the core package. React.createClass is now available as create-react-class, React.PropTypes as prop-types, React.DOM as react-dom-factories, react-addons-test-utils as react-dom/test-utils, and shallow renderer as react-test-renderer/shallow. See 15.5.0 and 15.6.0 blog posts for instructions on migrating code and automated codemods.
 ["Add more information to 'Input elements must be either controlled or uncontrolled' warning", "Don't wrap drag events in IE/Edge in dev builds\nDev builds wrap synthetic events inside other events for a better debug\nexperience. However IE/Edge won't allow access to the\nDataTransfer.dropEffect property if it's wrapped in this way.\nThe first time a drag event is fired, test if we're in an environment\nthat behaves this way and disable React's improved development\nexperience if we are.", 'Elements from functional components in TestUtils should have no owner\nFixes #5292 and #6194', 'Warn if props obj passed into createElement / cloneElement inherits from anything other than Object', 'Added Symbol primative PropType.\nWith the edition of ECMA-262, we now have a new primative type called\nSymbol. This primative type should be added to the PropTypes, as users\nwill eventually be using Symbols in their props for describing unique\nand immutable data, such as identifiers.', 'Added tests for the new primative, Symbol.\nI believe that I covered all the typical use cases for Symbols.\nIf you think that I missed one, feel free to contribute.', 'Support for ES6 polyfills\nMost ES6 polyfills will add support by implementing Symbol as a\nfunction. This causes typeof to return function rather than symbol\nfor polyfilled clients.', 'prop-types(symbols): add a helper is-symbol function', 'devDependencies: add core-js and es6-symbol polyfill for tests', 'prop-types(symbols): rewrite isSymbol to be simpler\n1) If it is a native Symbol\n2) If it is spec-compliant\n3) Try to match non-spec compliant polyfill by a instanceof check on Symbol if it exists in the global namespace', 'prop-types(symbols,tests): test for polyfilled Symbol and non-Symbol elements', 'Merge pull request #1 from RaitoBezarius/fork/proptypes-symbol\nImprove symbol check for (local) polyfills', 'prop-types(tests,code-style): fix missing semicolon, unexpected spaces and trailing comma', 'Merge pull request #2 from RaitoBezarius/fork/proptypes-symbol\nFix code-style issue with React guidelines', 'Add documentation about empty functional components', 'Document that stateless functional components can return null in v15', 'Document legacyness of the return value of ReactDOM.render()', 'Bump version for v16 development', 'Merge pull request #6419 from IvanVergiliev/master\nAdd documentation about empty functional components', 'Merge pull request #6400 from jimfb/return-value-legacy\nDocument legacyness of the return value of ReactDOM.render()', "Merge pull request #6341 from borisyankov/master\nAdd more information to warning 'Input elements must be either controlled or uncontrolled'", 'Merge pull request #6134 from richardscarrott/master\nWarn if props obj passed into createElement / cloneElement inherits from anything other than Object', "Merge pull request #6364 from p-jackson/issue-5700\nDon't wrap drag events in IE/Edge in dev builds", 'Add the missing download\n(cherry picked from commit 1aee28ef1b1489caae70954b99fd1a1dbc5da1bb)', '[docs] Update acknowledgements for v15\n(cherry picked from commit 40c0867f6319f57ebc2b810aa8caac328db14b66)', 'Add React 15 post\n(cherry picked from commit 67a4b12e270e6d343a3a8274b212e63f5199617c)', '[docs] Update site for v15\n(cherry picked from commit 0275d77fc05eba6b276c164e53f561f553b4e975)', 'Update Changelog for v15\n(cherry picked from commit 500c0003b217741de00f19b93d5ee3d11481ffb3)', 'Update readme for v15\n(cherry picked from commit c49166401a582026f610f28062151d53435d9d7a)', '[docs] Clarify data-reactid in v15 post', 'Correctly select options when nested inside an optgroup', 'Add a null check when checking for the native parent of an option element.', 'Remove an unnecessary call to findDOMNode in the select optgroup test.', 'Revert "Merge pull request #6431 from sebmarkbage/killspread"\nThis reverts commit a37e4e94fcae9424094378349dc11bafe1e47973, reversing\nchanges made to 411951d5b8a4a467adc213d4533c87a7c3b06bf8.', "More specific typeof check for polyfilled Symbol\nLet's get more specific with our tests. Symbol has to be a function if\nit's a polyfill. There are no object polyfills out there. (If there is,\nping me and I'll add support)\nInstead of checking if Symbol is undefined, let's check if it's a\nfunction instead since instanceof is depending that Symbol is already a\nfunction.", 'Make React.__spread warn', 'Merge pull request #6444 from zpao/re__spreadwarn\nAdd back React.__spread and make it warn', "Removed test support for medikoo/es6-symbol\nThere seems to be a bug with medikoo/es6-symbol where the global state\naffects the implementation of the polyfill. I found this by running the\nindividual test file alone then running all the tests using grunt\ntest. I found that it passes when ran alone and failed when ran\ncollectively.\nI did not find this buggy behavior with zloirock/core-js's\nimplementation of a polyfill for Symbol. Thus, removing I will keep the\nmore popular polyfill (core-js) and remove the buggy polyfill\n(es6-symbol).\nIf you are reading this and can think of a confounding factor that is\ncausing this bug, please let me know and we can try to work together to\nadd support for medikoo/es6-symbol.", 'Set value using attribute only on initial option render\nTested that you can now type in the middle of a controlled input in Chrome which previously jumped your cursor to the end.\nFixes #6445.', 'Merge pull request #6449 from spicyj/option-value\nSet value using attribute only on initial option render', '"0" can be the only valid unitless number string', 'Fix extra parens in CHANGELOG', 'Grammar fix for 15.0 blog post\nSince "This" is the subject and singular, "have" should be "has"\nNew wording explaining implementation details\nGrammar fix for 15.0 blog post\nSince "This" is the subject and singular, "have" should be "has"\nFix wording for 15.0 blog post\nnitpicks', 'Merge pull request #6443 from Aweary/patch-1\nGrammar fix for 15.0 blog post', 'Merge pull request #6458 from mondaychen/master\nNo unit-less CSS value warning for value: "0"', 'Merge pull request #6442 from trevorsmith/master\nCorrectly select options when nested inside an optgroup', 'Re-added support for attaching events to document fragments', 'Update changelog & readme for 15.0.1\n(cherry picked from commit a6179d03f37a23f278ebc6adce1c01d17656e597)', '15.0.1 blog post\n(cherry picked from commit 142e4ebb57269c4f44004204acdeea31945ab4a2)', 'Update website for 15.0.1\n(cherry picked from commit fd1476e3aab038711ba32eae3d1dce06e7d8032f)', 'Actually bump version on website\n(cherry picked from commit d72885b383ffb23597048b649ed2a94ed17cb362)', 'Fix extraneous markup in changelog', 'Update react-linked-input\n\nRestores React dep to 15\nBumps version to 1.0.1 for publishing\n', 'Use the same changelog format as 15.0 post', 'Disabled inputs should not respond to clicks in IE\nThis commit migrates over the disabled property behavior from\nReactDOMButton into a general purpose disabled event filter. It also\napplies that behavior to inputs, selects, and textareas.', 'Move getNativeProps usage inline', 'Follow style conventions', 'Flip conditional in DisabledInputUtils to cut hasOwnProperty calls', 'package(dependency): remove unused es6-symbol dependency', 'Merge pull request #3 from RaitoBezarius/fork/proptypes-symbol\nRemove unused ES6 Symbol dependency', 'Create section on using React with package managers.', 'Merge pull request #6148 from jimfb/node-package-manager\nCreate section on using React with package managers.', 'Replaces Array#map with Array#forEach', 'Merge pull request #6504 from alexlur/patch-1\nReplaces Array#map with Array#forEach', 'Merge pull request #6462 from Wildhoney/master\nRe-added support for attaching events to document fragments', 'Merge pull request #6362 from gaearon/no-owner-in-test-utils\nElements from functional components in TestUtils should have no owner', 'Merge pull request #6215 from nhunzaker/nh-fix-disabled-inputs\nDisabled inputs should not respond to clicks in IE', 'Added docs for environment integration.', 'Merge pull request #6510 from jimfb/ssr-environment-docs\nAdded docs for environment integration.', "Ignore DOM writes outside the batch in ReactPerf\nReactDOMInput and a few other classes handle change event by scheduling updateWrapper() in an asap().\nIt gets executed after the batch, which confuses ReactPerf that expects all DOM writes to happen during a batch.\nSince this implementation of ReactPerf relying on the stack is going away, let's plug the hole temporarily by ignoring DOM writes that occur during postponed updateWrapper(). In any case, they have no relation to actual calculations of wasted renders, as they don't occur due to updateComponent(), but rather due to onChange() special DOM behavior.\nThis fixes #5548", 'Cleanup environments doc\n\nUse correct "Note" formatting so they render correctly\nreordered sections so Node is first\nUse "Node.js" consistently (it is a product name just like Nashorn)\nadded/tweaked some of the text\nsimplified the Java code so it doesn\'t hit the internet.\n', 'Merge pull request #6519 from zpao/envdocsfixup\nCleanup environments doc', 'Merge pull request #6516 from gaearon/ignore-dom-writes-outside-batch\nIgnore DOM writes outside the batch in ReactPerf', 'Ensure validateDOMNesting catches nested body elements', 'Merge pull request #6469 from keyanzhang/validate-foreignObject-children\nEnsure validateDOMNesting catches nested body elements', 'Only fire input value change events when the value changes (#5746)\n\nOnly fire input value change events when the value changes\n\nfixes #554, fixes #1471, fixes #2185 (still trying to figure out why)\n\n\ncatch programmatic value changes\n\n\nmove value tracking to seperate module\n\n', 'Mention Enzyme on the test utils page. (#6523)', 'Helper for escaping and unescpaing component keys (#6500)\n\nAbstract escaping\nProvide human readible same key warnings\n', 'Remove mention of deprecated ReactLink add-on (#6535)', 'Minor fixes (#6527)\n\n\nFix typos in CHANGELOG.md\n\n\nFix typos in 2014-11-24-react-js-conf-updates.md\n\n', 'Copy files from the react-native repo', 'Remove duplicates and move files out of native/vendor\nMoving the event plugins into their dedicated folder\nRemoving the ExecutionEnvironment override. I will just have to fix where needed. Probably related to the Chrome debugger?', "Move React Native platform files back\nThese files are really only related to the platform itself and not\nthe React integration so I'll move them back.", "Add Object Spread Support to Our Babel Config\nWon't really use this in prod code yet but I have a benchmark that\nuses it.", 'Build an dedicated npm package for react-native-renderer', 'Add React Native Modules to module map + fix fbjs\nOur module rewrite whitelist needs to ignore providesModule files\nthat are going to be required from the global React Native\nenvironment.\nWe also need to add ReactDOM to providesModule since we removed it\nfrom React Native.', "Strip isomorphic stuff from the ReactNative module\nAlso, add a shim for the isomorphic module for ios and android so that\nreact-native doesn't pull in react-dom when React is required.", 'Add test and mocks\nMock UIManager\nComment out dontMock that actually needs mocking', 'Fix 0.15 compatibility', 'Fix ReactNativeComponentEnvironment providesModule\nThis has a different file name from its providesModule. Screws up\nour build scripts.', "Get rid of rootNodeIDs they're just tags now", 'Build up a native component cache for event dispatching\nChanges to event overloading structure', 'Listeners are not attached by ID in the API\n...even though they technically still are attached by.', 'Update ReactNativeDOMIDOperations to deal with a single parent node\nThis is the new protocol.', 'Bump package versions', "Don't try to get the target node for responder if there is no listener\nThis can happen in edge cases where he listeners are already\nunmounted or not mounted yet or something.", 'Ensure react-native-renderer package gets copied', "Update devtools injection\nThis isn't actually used right now so I can't test it. Because the\nChrome devtools are broken for React Native. The Nuclide integration\nis in the react-native repo.", 'Fix lint for moved ReactNative', 'Remove ReactDOM.native shim\nThis is causing build errors.\nThis should be in the downstream repo if anything.\nRelay has its own shim that should be preferred.', 'Merge pull request #6338 from sebmarkbage/reactnative2\nMove React Core Integration and Injection to the Core Repo', 'Revert "Add ReactDebugInstanceMap"\nThis reverts commit 575fb79162efa0f913c4fbd79960d4fc335e92cb.', 'Add an initial implementation of ReactDebugTool events', 'Handle updates to natives and composites', 'Report dangerouslySetInnerHTML as no children', "Don't report children for empty and text nodes", 'Enforce that info about children is available by the time onSetChildren() fires', 'Clean up package.json after #6338', 'Merge pull request #6553 from zpao/cleanuppkg\nClean up package.json after #6338', 'Devtools should be able to clean up the tree on client rendering', 'Clean up the devtool tree on server rendering', 'ref-09-webcomponents.zh-CN.md (#6561)', 'Extract ReactComponentTreeDevtool', 'Test ReactComponentTreeDevtool specifically', 'Track parentID for ReactPerf', 'No need for a special case here', 'Fix expect() slipping into the non-test code', "Fix mapFunction parameters in mapChildren's JSDoc (#6569)\nRemove 'key' parameter from 'mapFunction(child, key, index)'. It is no longer called with 'key'.", 'Batch event handling in React Native\nThis fixes an issue where handling events on a node that was just removed threw a "All native instances should have a tag." error and matches what we do in the DOM renderer in ReactEventListener.', 'Merge pull request #6572 from spicyj/rn-batch\nBatch event handling in React Native', "Fix return type in onlyChild's JSDoc (#6573)\nThe return type is a 'ReactElement' instead of a 'ReactComponent'.", 'properly handling invalid scryRenderedDOMComponentsWithClass args (#6529)\nproperly handling invalid scryRenderedDOMComponentsWithClass args\nproperly handle invalid scryRenderedDOMComponentsWithClass args', 'ReactComponentTreeDevtool should ignore TopLevelWrapper', 'Stop exposing ReactComponentTreeDevtool internal tree directly', 'Merge pull request #6576 from yuji0602/tutorial_md_sample_json_change\nChanged example json value.\n(cherry picked from commit ec036ed1851bdb7937e9c47c678d4882643fd336)', "[RN] Don't hold interaction handles for all touches\nWe don't want to hold handles while doing native scrolling, etc.\nFB Task: #10926500", 'Move PanResponder back to react-native repo temporarily.\nWe have some more work to do with this before we can pull it out of react-native.  FB Task #10926500', 'Merge pull request #6587 from sahrens/patch-2\nMove PanResponder back to react-native repo temporarily.', 'Delete ReactNativeGlobalInteractionHandler.js\nDepends on https://github.com/facebook/react/pull/6584 to no longer reference is. See FB task #10926500', "Merge pull request #6584 from sahrens/patch-1\n[RN] Don't hold interaction handles for all touches", 'Merge pull request #6588 from sahrens/patch-3\nDelete ReactNativeGlobalInteractionHandler.js', 'Add safeguards to ReactComponentTreeDevtool', "Ignore events fired on missing React Native instances\nThis can happen if something gets unmounted before the event gets\ndispatched. I'm not sure how this works out exactly but this\npreserves previous behavior in this scenario.", 'Refactor how native container ID is stored', 'Assert that unmounted instances are in the tree until purged', 'Remove isComposite and hide TopLevelWrapper', 'Add tests for ReactDebugTool and ReactDOMDebugTool', 'Flip the warning condition in ReactDebugTool and ReactDOMDebugTool\nThe current warning condition caused the first error to be swallowed, and all the next errors to be logged. I believe the intention was the opposite: to log the first error, and to ignore any next errors for the same method.', 'Update tutorial - add link for starting server (#6602)\nTo be extra helpful to beginners, and avoid questions like this: http://stackoverflow.com/questions/35758956/react-tutorial-how-do-i-start-the-server', 'Merge pull request #6605 from gaearon/fix-warning-condition\nFix the warning condition in ReactDebugTool and ReactDOMDebugTool', 'fixed a minor typo (#6600)', 'Mute devtool events for TopLevelWrapper and empty components', 'Merge pull request #6549 from gaearon/instrumentation-new\nProvide info about component tree to devtools', 'ComponentWillUnmount should only ever be invoked once (#6613)', "Try enabling coverage again\nIt was disabled in d138b286db4fcb7137f9267a30ec64b657d3cfb4.\nWe should have more Travis instances now so it shouldn't run out of memory.", 'adds ReactRally & Reactive 2016 + conf locations (#6623)', 'Add ReactNativeOperationHistoryDevtool to track native operations', 'Remove OrderedMap and ReactPropTransferer\nThese are not exposed publicly and have been deprecated.', 'Merge pull request #6612 from gaearon/instrumentation-new-operations\nAdd ReactNativeOperationHistoryDevtool to track native operations', 'Merge pull request #6388 from gaearon/bye-bye-deprecated-utils\nRemove OrderedMap and ReactPropTransferer', 'Use spread instead of deprecated merge utility (#6634)', 'Update to Jest 12. Codemod to new Jest APIs.', 'Merge pull request #6620 from cpojer/master\nUpdate to Jest 12. Codemod to new Jest APIs.', 'Update Jest’s grunt task.', 'Merge pull request #6638 from cpojer/master\nUpdate Jest’s grunt task.', 'Ensure babelrc file gets packaged for starter kit (#6617)', 'Document stateless components in formal types', 'Merge pull request #6628 from sheerun/patch-1\nDocument stateless components in formal types', 'Add note on how to submit a form (#6594)', 'package(node-engine-version): accept 6.x versions (#6645)', 'Add new ReactPerf', 'Merge pull request #6046 from gaearon/new-perf\nAdd new ReactPerf', 'Make ReactComponentTreeDevtool work with React Native', 'Merge pull request #6633 from gaearon/native-tree-devtool\nMake ReactComponentTreeDevtool work with React Native', 'Create 01-why-react.zh-TW.md (#6470)\n\nCreate 01-why-react.zh-TW.md\n\nTranslation for language code zh-TW\n\nUpdate 01-why-react.zh-TW.md\n\nchange "封裝性非常好" to "封裝性高"', 'Fix bug with double updates in a single batch (#6650)\nFixes #2410. Fixes #6371. Fixes #6538.\nI also manually tested the codepen in #3762 and verified it now works.', 'Allow custom elements extending native ones (#6570)\n...by passing the is attribute as the second param to createElement.\nSee http://webcomponents.org/polyfills/custom-elements/', 'Bail out of dedupe logic in cases where there is an incomplete value descriptor (#6648)', "Get rid of transformMatrix/decomposeMatrix special case (#6660)\nThis is no longer needed on the native side.\nThis is also the last use of the Platform flag. React Core is now\nplatform agnostic with regard to React Native. So I'll remove\nthe mocks and dependency.", 'Create 01-why-react.ru-RU.md (#6659)\n\n\nCreate 01-why-react.ru-RU.md\n\n\nCreate 01-why-react.ru-RU.md\n\n\nTranslation for language code ru-RU\n\nCreate 01-why-react.ru-RU.md\n\nErrors fixes\n\nUpdate 01-why-react.ru-RU.md\n\nисправил "чтобы решить".\nспасибо за отзывчивость. надеюсь дальнейшие переводы хоть немного помогут распространению React в России :)', 'Remove errant console.log (#6664)\nThat crept in in c1e3f7ec14971dbf6.', 'Add test logic to make sure that events get tested when rendering on top of server-generated markup. (#6668)', 'Create 02-displaying-data.ru-RU.md\nTranslation for language code ru-RU', 'Add links to docs for addons and top level API (#6555)\nThis makes it easier to figure out where the docs live.\nGoogling for e.g. react-addons-update also works, but this should\nmake things easier for people that hyperclick directly to the source.', 'Update 02-displaying-data.ru-RU\nМногие предложения перестроены, добавлены запятые', 'Changelog for 15.0.2\n(cherry picked from commit a157791264f75ee119e13bb8a1999016f4f17a3f)', 'Update readme for 15.0.2\n(cherry picked from commit 4dec99c61e521d7a655d148e3dd4c42d1bf39456)', 'Update website for 15.0.2\n(cherry picked from commit 846b5ea252108d104ab1b67f99879459ef591851)', 'Revert "Merge pull request #6458 from mondaychen/master"\nThis reverts commit 25481083b0138fe052fcd00c591dc5e10e0a64d6, reversing\nchanges made to 09022b165f7fdec4a1aaf6475936629aab76e4a9.', 'Update 02-displaying-data.ru-RU\nисправил ошибки', 'Update 02-displaying-data.ru-RU\ndot', "Ensure we're using latest object-assign (#6681)\nThis picks up the change to feature test against order bugs.", "Don't warn when style value is '0'", 'Return early from enqueuePutListener for SSR (#6678)', 'Grammar correction in ReactDOMInput.js warning (#6657)\nChanged "a uncontrolled input" to "an uncontrolled input".', 'Merge pull request #6669 from dotu/patch-2\nCreate 02-displaying-data.ru-RU.md', 'fixed minor typo (#6568)', 'Update examples/basic-commonjs/package.json (#6685)', 'Move ReactIOS components to native subfolder (#6643)\n\nMove ReactIOS components to ReactNative\nDrop ReactNative subfolder\n', 'Delete the old ReactPerf', 'Rename the new ReactPerfAnalysis to ReactPerf', 'Add getLastMeasurements() as it is documented as public API', 'Emit flush events on React Native for ReactPerf', 'Use performanceNow() instead of performance.now()', 'Fix incorrect onBegin/onEnd timer pair', "Ignore lifecycle events outside batches\nTechnically this shouldn't happen but it seems possible with ReactNativeMount.unmountComponentAtNode().\nFor now, let's just ignore these lifecycle events because ReactPerf makes a hard assumption that all lifecycle hooks happen inside batches.\nWe can revisit later when we have a comprehensive test suite for ReactPerf itself.", 'Make stats less noisy for top-level components', 'Add getUpdateCount() to ReactComponentTreeDevtool\nIt is necessary to exclude just mounted components from wasted calculation.', 'Add tests and fix wasted render calculation', 'Fix displayName in ReactPerf.getInclusive() output', 'Remove some mocks that are already packaged by InitializeJavaScriptAppEngine (#6642)', 'Fix broken link to TypeScript docs (#6687)', 'Ensure babelrc gets added to zipfile too (#6688)', "Set up Flow - Yay! (#6682)\nThis just configures flow to be checked and fixes our existing\nFlow typed files.\nPossible enhancements:\nExport .js.flow declarations from the build. Unclear whether this\nwill be a supported workflow in the future or not, so let's wait\non that.\nWe should fail builds and CI on Flow errors.\nIdeally we should lint for Flow style guides (like no space before\ncolon).", "grunt jest tasks shouldn't use watchman (#6675)", 'Fix for #6062 : Show source line number on unknown property warning  (#6398)\n\n\nNew approach for 6062 fix : Show source line number on unknown property warning\n\n\nWIP: ReactDebugToolEventForwarderDevTool\n\n\nUpdate event signature to debugID\n\n\nTrigger events in ReactDOMComponent\n\n\nRenamed to onMountDOMComponent; passing in element directly\n\n\nAdded debugID; updated simple test\n\n\nAdded test for multi-div JSX to ref exact line\n\n\nAdded test for composite component\n\n', 'Setup grunt flow task and run on travis (#6684)', 'Create 03-interactivity-and-dynamic-uis.ru-RU.md', 'fixed transform-react-jsx-source devDep (#6697)', 'Update 03-interactivity-and-dynamic-uis.ru-RU.md\nнадо ли менять в заголовках слова "помещать в состояние" на "хранить в состоянии" ?', 'Update 03-interactivity-and-dynamic-uis.ru-RU.md', 'Merge pull request #6696 from dotu/patch-3\nCreate 03-interactivity-and-dynamic-uis.ru-RU.md', '[DOCS] ReactTextComponent was renamed ReactDOMTextComponent a while ago (#6700)', 'Merge pull request #6647 from gaearon/bye-bye-reactperf\nReplace ReactPerf with new implementation', 'Move dev-only flags to only exist on composites (#6709)\n_isOwnerNecessary was unused.', 'DOMLazyTree, populate  before insertion into DOM (#6691)', 'Cleanup: remove @nolint (#6703)', 'Disable coverage on Travis (#6712)', 'Get patch versions of Flow (#6716)\nBest practice or whatever.', 'Basic SSR support for error boundaries (#6694)', 'refine the translation of chapter 12-context (#6665)', "[docs] Remove mention of 'nested object' as an allowed children in React.Children.map\nReplace it with 'keyed fragment', since ReactFragments were made a replecement for Objects as allowed children in #4700", '[docs] add link to create-fragment from React.Children.map docs', "Merge pull request #6730 from elas7/fix-docs\n[docs] Remove mention of 'nested object' as an allowed children in React.Children.map", 'allow to ignore value attribute for option (#5362)', 'Fix ru-RU doc page permalinks\nFixes #6735', 'Fix zh-TW permalink', 'fix minor capitalzation typo (#6736)', 'Merge pull request #6377 from puradox/proptypes-symbol\nAdd new primitive PropType Symbol', 'Revert "Don\'t wrap drag events in IE/Edge in dev builds" (#6741)', 'Fix flow errors (#6719)\nThe new flow somehow found these on my machine but nowhere else\nand not previously.', 'React Fiber Reconciler (#6690)\nThis is an outline for the new reconciler infrastructure.\nI created a noop renderer to have something to get started from.\nI split the reconciler folder into old and new, as well as shared.\nI put shouldUpdateReactComponent in shared as an example of a\nutility that can easily be shared between both. I plan on breaking\nout more utilities like these.', 'consistent owner for stateless component (#6534)', 'Fix grammar on homepage (#6746)\n\n\nFix grammar in README\n\n\nChange DOM abstraction grammar on homepage\n\n', 'Add a failing test case for #6742\ngetOperations() blows up when replacing null with a native because the null component has debugID of 0 that isn’t registered in the component tree.', 'Add basic issue and PR templates (#6597)\nIssue template adapted from the Angular template, and PR template\nadapted from the PR guidelines in CONTRIBUTING.md.', 'Allow empty components in the native operation logs\nFixes #6742', 'Switching between null and a native should not be counted as a waste', "Check for missing debugID in ReactDebugTool\nTopLevelWrapper and empty components have ID of 0.\nThese are implementation details and we don't want to leak them to devtools.", 'Remove the protective clause that is now unnecessary\nInstead, we fixed the callsites to stop emitting events for empty components.', 'Fix a failing test and count IDs from one', 'Merge pull request #6752 from facebook/fix-6742\nFix ReactPerf.printOperations() crash', 'Fix a memory leak in ReactComponentTreeDevtool\nReactDebugTool used to only call purgeUnmountedComponents() while profiling, so information about unmounted instances kept accumulating when not profiling.\nAdditionally, unmounting in React Native and rendering to string did not correctly clean up the devtool.\nFinally, the tests tested the wrong behavior and relied on explicit purgeUnmountedComponent() calls.\nTo fix this, we:\n\nTest specifically that unmounting is enough to clean up the tree devtool.\nAdd missing onBeginFlush and onEndFlush calls to server and native rendering so ReactDebugTool knows when to copy the tree.\n\nFixes #6750', 'Merge pull request #6753 from facebook/fix-6750\nFix a memory leak in ReactComponentTreeDevtool', 'Rename host-y things to be "host" not "native" (#6754)\nFor clarity.\nI left "native event" as-is because there\'s a lot of it, it\'s not particularly ambiguous, and SimulateNative/nativeTouchData are public API in ReactTestUtils.', 'Refer to correct example (#6760)\nI think this should refer to the second example, where the instance to the ref is stored. In any case please can someone confirm for my own understanding?', "Add permalink (#6713)\nAdd permalink to docs, so we can access with 'prev' and 'next'", 'added isProfiling() to ReactDebugTool and isRunning() to PerfTools', 'Fixed removing attributes during custom element update. Fixes #6747 (#6748)', 'Add information on JSX element keys (#6751)', 'Remove some dead code (#6764)', 'changed test', 'added tests for repeated calls to ReactPerf.start/stop', 'Merge pull request #6763 from nfcampos/is-running\nadded isProfiling() to ReactDebugTool and isRunning() to PerfTools', 'Fix remaining onNativeOperation → onHostOperation rename\nWe renamed it in #6754 but #6748 got merged after that referencing the old name.', 'Merge pull request #6767 from gaearon/fix-broken-master\nFix remaining onNativeOperation => onHostOperation rename', 'Fixed an invalid escape char in attribute name regexp (#6772)\nmore info: https://www.w3.org/TR/xml/#NT-Name', 'Make benchmark script work in React 15', "Interleave trials in benchmark script\nThis should be more of a fair A/B test so the timings aren't affected by having different load on your system when testing the two alternatives.", "Track source more generically in ReactComponentTreeDevtool (#6765)\nBeing able to get the source for your parent components seems useful, and ReactComponentTreeDevtool is best poised to be able to do that.\nI'm also not sure it makes sense to have separate DOM-specific onMountDOMComponent and onUpdateDOMComponent events, so I removed them for now. Even if we want them, their timing seemed sort of arbitrary.\nI also made it so DOM devtools can listen to non-DOM events too. Willing to change that if people think it's ugly though.", 'Print stack in devtool exception warning (#6768)', "Fix severe perf problems in component tree devtool (#6770)\nOne of the ReactMultiChildText tests renders 2145 roots (and even more components) and unmounts none of them. Now we don't loop through them all a bunch of times so the test takes 20 seconds instead of 60.\nWe should clean up instantiateReactComponent somehow so that the onSetDisplayName call isn't produced for the TopLevelWrapper, which should allow us to just store an array of unmountedIDs instead of a hash map so we at least don't have double maps. This change mirrors the old logic though.\nReviewers: @gaearon, @sebmarkbage", 'Show component stack in PropTypes warnings (#6771)', 'make test utils format consistent (#6777)', 'Remove unnecessary require causing excess memory usage (#6781)', "Embed JSX filename paths relative to repo root (#6778)\nTest Plan: Changed the preprocessor to log the output of babel.transform and saw\nvar _jsxFileName = 'src/isomorphic/modern/element/__tests__/ReactJSXElementValidator-test.js';\nin the resulting output, instead of an absolute path.", 'Require modules from React Native as node modules. (#6715)', "Refactor ReactComponentTreeDevtool test\nWe extract common logic between DOM and native tests so they don't diverge.\nAlso, rather than build a tree object in advance for testing, we will walk the tree on the go.\nThis lets us have much more specific error messages with a clear path when something goes wrong.", 'Merge pull request #6787 from gaearon/tree-devtool-test-tweaks\nRefactor ReactComponentTreeDevtool test', 'Test that elements are tracked by tree devtool\nThe test is currently failing because text elements are not reported in some cases.', 'Fire unknown prop warning when rendering client side. (#6693)', 'Make sure element is reported correctly by tree devtool\nThis adds some tests for getElement() and verifies that it works for text components too.\nThe code that calls the instrumentation is fixed where necessary so that the tests pass.', 'Merge pull request #6789 from gaearon/tree-devtool-fixes\nMake sure element is reported correctly by tree devtool', "Update shallowCompare to accept nextContext (#6661)\n\nUpdate shallowCompare to accept nextContext\n\nAcross our application we are using immutable objects as properties and thus using shallowCompare for all our {{shouldComponentUpdate}}.  Because of this children with contextTypes don't get updates when the context on the parent changes.  Adding an additional comparison for context (when it is provided) fixes this problem.\n\n\nRemove the undefined check\n\n\nAdd nextContext\n\n", 'Move instrumentation to renderers/shared. Closes #6797', 'Merge pull request #6801 from iamdustan/instrumentation-to-shared\nMove instrumentation to renderers/shared. Closes #6797', 'Minor comment typo (#6808)', 'update typescript', 'match jest.d.ts by regex', "Add permalink (#6813)\nAdd permalink to this doc,so we can access with 'prev' and 'next'", 'Update 03-interactivity-and-dynamic-uis.zh-CN.md', 'Merge pull request #6814 from Ivanwangcy/master\nUpdate 03-interactivity-and-dynamic-uis.zh-CN.md', 'Merge pull request #6804 from dmitriiabramov/update_typescript\nUpdate typescript', 'Add component stack info to key validation warnings (#6799)\n\n\nAdd component stack info to key validation warnings\n\n\nAdd ReactComponentTreeDevtool.getStackAddendumByID\n\n', 'Changelog for 15.1.0\n(cherry picked from commit bca912f91eb187c924a3f422f30f04a2314a8e8d)', 'Update readme for 15.1.0\n(cherry picked from commit b7d480986a19065185c961fab6a48551b4f5be8c)', 'Update website for 15.1.0\n(cherry picked from commit 7842c1993423d39c7f9ba13fe1c90c9ae7a4372a)', 'Support onLoad event on link element (#6815)', 'Move ReactElementValidator to DEV block (#6830)\nIt saves some more bytes in production mode.', 'Interactivity and Dynamic UIs Docs page updated with ES6 Example (#6832)\n\n\nInteractivity and Dynamic UIs Pages ES6 Example\n\n\nChange bind handler\n\n', 'Remove prop types checking in ReactCompositeComponent (#6824)\nRemove prop types checking in ReactCompositeComponent', 'Removed unnecessary null check (#6841)', 'Extract the type checker into a separate module (#6851)\nThe type checker is now a separate module under isomorphic/classic/types', "Add test to ensure 'undefined' children is used (#6853)", 'Avoid directly calling hasOwnProperty (#6855)\n\n\nAvoid directly calling hasOwnProperty\n\n\nFix failing test case\n\n', 'Point people to prod build in perf docs (#6857)', 'Context docs updated with ES6 examples (#6852)', 'Fix componentWillUnmount() not counted by ReactPerf (#6858)\n\n\nFix componentWillUnmount() not counted by ReactPerf\n\n\nTest that functional component render() time shows up in ReactPerf\n\n\nTest for setState() code path updates being included\n\n', "Add (failing) React ART tests\nThis helps us make sure we don't break React ART in a minor or patch release. The idea is to not change these files when making minor or patch changes. Copied directly from react-art with requires fixed. (I also picked a different haste name just in case.)", 'Add hacks to make React ART not warn from devtools', 'Fix ART after Native -> Host rename', 'Merge pull request #6775 from spicyj/fix-art\nCopy React ART tests and add hacks to fix them', 'Remove unknown props in ART (#6861)', 'Properly set value and defaultValue for input and textarea (#6406)\n\n\nHave defaultValue reach DOM node for html input box for #4618\n\n\nCleanup and bug fixes for merge.\n\n', 'Add warning for unknown properties. (#6800)', "Don't count the time inside flushes towards lifecycle hooks (#6860)\n\nDon't count the time inside flushes towards lifecycle hooks\n\nFixes #6842.\nWe keep the existing behavior of testing for matching onBeginLifeCycleTimer/onEndLifeCycleTimer calls, but we push the current timer onto the stack if we enter a flush.\nThis solves an issue with portals which cause updates while a lifecycle timer is already running.\nI chose to subtract the time spent in the flush from the time counted towards the lifecycle method because it would artificially inflate the “total” time of the component due to all the components inside the portal, so it would skew the exclusive table.\n\nFix up the comment\n", "Fix instrumentation in shallow rendering (#6867)\nPreviously, this threw:\nFAIL  src/test/__tests__/ReactTestUtils-test.js (7.291s)\n● ReactTestUtils › it can fail context when shallowly rendering\n  - TypeError: Cannot read property '_source' of null\n        at describeID (src/renderers/shared/devtools/ReactComponentTreeDevtool.js:70:46)\n        at Object.ReactComponentTreeDevtool.getStackAddendumByID (src/renderers/shared/devtools/ReactComponentTreeDevtool.js:203:15)\n        at checkReactTypeSpec (src/isomorphic/classic/types/checkReactTypeSpec.js:76:58)\n        at ReactCompositeComponentMixin._checkContextTypes (src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:668:5)\n        at ReactCompositeComponentMixin._processContext (src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:607:14)\n        at ReactCompositeComponentMixin.mountComponent (src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:191:30)\n        at ReactShallowRenderer._render (src/test/ReactTestUtils.js:483:14)\n        at _batchedRender (src/test/ReactTestUtils.js:460:12)\n        at ReactDefaultBatchingStrategyTransaction.Mixin.perform (src/shared/utils/Transaction.js:140:20)\n        at Object.ReactDefaultBatchingStrategy.batchedUpdates (src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js:65:19)\n        at Object.batchedUpdates (src/renderers/shared/stack/reconciler/ReactUpdates.js:112:20)\n        at ReactShallowRenderer.render (src/test/ReactTestUtils.js:453:16)\n        at Spec.eval (src/test/__tests__/ReactTestUtils-test.js:289:34)\n        at jasmine.Block.execute (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:1067:17)\n        at jasmine.Queue.next_ (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2100:31)\n        at jasmine.Queue.start (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2053:8)\n        at Spec.jasmine.Spec.execute (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2380:14)\n        at jasmine.Queue.next_ (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2100:31)\n        at onComplete (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2096:18)\n        at Spec.jasmine.Spec.finish (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2354:5)\n        at eval [as onComplete] (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2381:10)\n        at jasmine.Queue.next_ (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2110:14)\n        at eval (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2090:18)\n        at Timeout.e [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:440:19)\n        at tryOnTimeout (timers.js:224:11)\n        at Timer.listOnTimeout (timers.js:198:5)", 'Upgrade to jest-cli@0.9 and use Jasmine2', 'Upgrade to Jasmine 2', 'ReactClassEquivalence', 'jest@12.1.1', 'Update jest bin command', 'Update Jasmine 2 PR with changes from master', 'Merge pull request #6872 from gaearon/jest-cli@12\nUpdate to Jest 12.1.1 and Jasmine 2', 'Revert "Update shallowCompare to accept nextContext" (#6877)', 'Clarify that string refs are considered legacy. (#6692)', 'Do not clone key and ref getters', 'Remove indirection when determining valid config and ref', 'Tweak whitespace', 'Add a test verifying undefined key and ref are ignored\nIt currently fails in createElement because of #6879 which was introduced in #5744.\nIt also fails in cloneElement because the code with that bug was extracted and shared in 94d0dc68c89c0292cd430976a7dafb95f8d13cf4.', 'Short-circuit the check just for getters\nThis way in other cases both DEV and PROD falls through to the check for undefined.\nThis fixes #6879 and a similar bug introduced for cloneElement() in 94d0dc68c89c0292cd430976a7dafb95f8d13cf4.', 'Move tests concerned with cloning into ReactElementClone-test', 'Make sure cloneElement() supports prototype-less config (#6878)\nThis brings createElement() fix from #6855 to cloneElement().', 'Ignore specifically React warning getter in ReactElement\nWe don’t want to have different behavior in development and production.\nPreviously, we used to ignore getters on key/ref in dev, but we’d read them in prod.\nNow, we only ignore the getters that we know we created so the production logic doesn’t differ.', 'Correctly check that element and props are frozen\nThis fixes an incorrect way of checking introduced in 95373ce769188aacd25c6485bc2c628ff02a856f (it had no effect).', 'Warn when element is missing in devtool (#6869)', 'Infer displayName in more cases for props.ref/key warning', 'Inline expectations in tests as they are used once', 'Merge pull request #6880 from gaearon/clone-key-ref-props-2\nFix issues introduced by createElement() warning', 'Added own property check when deleting listeners.\nReact crash when default object prototype is modified.', 'Added React Europe 2015 videos\nLinking to the official channel that contains separate playlists for Day 1, Day 2, and Lightning talks', 'Merge pull request #6890 from grgur/patch-1\nAdded React Europe 2015 videos', 'Merge pull request #6886 from Weizenlol/patch-1\nAdded own property check when deleting listeners.', 'Stop passing null as second argument to document.createElement() (#6896)\n\n\nStop passing null as second argument to document.createElement()\n\n\nrewrap check for props.is to make it more readable\n\n', 'Child Fiber', 'Coroutines', 'Merge pull request #6859 from sebmarkbage/newreconciler\n[Fiber] Child Reconciler + New Coroutines Primitive', "Merge pull request #6677 from zpao/dont-warn-css-0-string\nDon't warn when style value is '0'", "switched to codemirror's jsx mode (#6898)", 'Add link to ReactJS.NET on server-side environments page (#6607)', 'Move HTMLtoJSX page off React site. References https://github.com/reactjs/react-magic/issues/52 (#6608)', 'Add ReactNext 2016 conference (#6833)', '[docs] Use existing layout for redirecting html-jsx (#6904)', 'Update tutorial with reference to autobinding docs (#6870)\n\n\nUpdate tutorial with reference to autobinding docs\n\n\nUpdate tutorial to clarify that autobinding happens specifically with createClass() API\n\n', 'Followup to 6896, add explanation of workaround. (#6905)', 'Added more specific warning for using onDblClick instead of onDoubleClick (#6881)', 'Fix style test for Jasmine 2 (#6913)', 'Fix minor lint warnings (#6909)', 'Remove getDOMNode from docs (#6919)', 'Grammar: less dependencies -> fewer dependencies (#6917)\n\n\nGrammar: less dependencies -> fewer dependencies\n\n\nchangelog.md grammar: less dependencies -> fewer dependencies\n\n', "Transfer everything from Element onto the Fiber\nThis has a few benefits:\n1) This allows the element to always remain on the young generation.\n2) The key can be accessed on the fiber which is easier to keep as the\nsame class and is directly accessible in the child reconciliation of every\nobject.\n3) This conveniently means that we don't have to create a fake element for\ncontinuations which was really hacky.\nWe can still do the quick bailout of rerendered things using the props\nobject which is also unique.", 'Use the tag instead of stage field for coroutine stages\nThis gets rid of a field that we only need for coroutines.\nWe might need this if we have multi phase handlers in the future\nbut then maybe we can just use multiple tags.', 'Merge pull request #6903 from sebmarkbage/newreconciler\n[Fiber] Transfer everything from Element onto the Fiber and use Tag instead of Stage', "[Fiber] Simple test assertions\nI'll split the coroutine and incremental testing into their own\ntests so that I can expand them with more edge cases.", 'Merge pull request #6931 from sebmarkbage/newreconciler\n[Fiber] Simple test assertions', 'Remove css px warning, stop appending px to strings (#6899)', 'Add rudimentary test renderer (#6944)', 'Add a gulp script for extracting error codes (#6882)', "Remove Flux from docs nav (#6945)\nMost people don't use the official Flux implementation or docs so I think this is likely to be more confusing than helpful. Maybe later we can add a better comparison of data management solutions.", "Replace the implementation of escapeTextContentForBrowser with escape-html (#6862)\n\n\nReplacing the implementation of escapeTextContentForBrowser with escape-html for performance\n\n\nAddressing @spicyj's code review comment here: https://github.com/facebook/react/pull/6862#issuecomment-223102868 . Pulled the code of escape-html in to react and changed the encoding of single quote to '.\n\n\nAddressing code review comment https://github.com/facebook/react/pull/6862#discussion_r65462074 to make code more inlinable for v8. Thanks, @spicyj.\n\n", 'Fallback to legacy set/get in old versions of FF (#6930)', 'Update link and description of TypeScript support. (#6953)', 'Upgrade to flow 0.26 & match internal config with strict args\nAlso ignore examples, important because react can be installed by the commonjs\none and the modules will get detected there too, resulting in duplicate\ndefinitions', 'Fix $FlowFixMe broken by comment spanning multiple lines', 'Add  type args for ReactElement,Class,Component', 'Merge pull request #6957 from zpao/flow026\nUpgrade Flow', 'Fix null node issue in ReactCSSTransitionGroup (#6958)', 'Use remarkable instead of marked (#6961)\nhttps://github.com/reactjs/react-tutorial/issues/139', 'added instruction for downloading babel-browser (#6960)', "Fix function declaration in if statement (#6963)\nFirefox doesn't like these and throws.", '[Docs] Error Decoder Page (#6946)', 'Warn that ReactPerf does not work in the production build (#6884, #6975)\nFixes #6871', 'Revert "Warn that ReactPerf does not work in the production build (#6884, #6975)"\nThis reverts commit f71dfbcbf020bea806827ef8b8e8a8743de8d615.\nReverting because GitHub stripped the original PR author.', 'Warn that ReactPerf does not work in the production build (#6884)\nFixes #6871', 'Revert "Fallback to legacy set/get in old versions of FF" (#6976)', 'Tweak ReactPerf warning message and code style (#6977)', 'Fix autofocus for input and textarea (#6986)', "Simple updates using alternate fibers\nThis splits the Fiber type into Fiber and Instance. This could be\ntwo different object instances to save memory. However, to avoid\nGC thrash I merge them into one.\nWhen ReactChildFiber reconciles children, it clones the previous\nfiber. This creates a new tree for work-in-progress. The idea is\nthat once flushed, this new tree will be used at the root.\nHowever, we know that we'll never need more than two trees\nat a time. Therefore my clone function stores the clone on the\noriginal. Effectively this creates a fiber pool.\nIdeally, the .alternate field shouldn't be used outside of clone\nso that everything can work with pure immutability. I cheat a bit\nfor now so I don't have to pass both trees everywhere.\nReactChildFiber is a bit hacky for reuse and doesn't solve all\ncases. Will fix that once I try to get parity.", "Rename unitOfWork -> workInProgress\nThese values represent fibers that are incomplete. In the current\nmodel they're mutated in place. In a completely immutable model\nthey would need to be cloned for every step they make progress.\nI.e. one where the child is still in this WIP state and one when\nit is complete.\nTo clarify this I'll name them workInProgress while they're in\nthat state, which is also what Jordan did in his prototype.", 'Merge pull request #6981 from sebmarkbage/newreconciler\n[Fiber] Add support for simple updates and fiber pooling', 'Minimize abuse of .alternate\nThis avoids using .alternate as much as possible and isolates it\nto the root. For anything that is "work in progress" this happens\nto be the same as the alternate field. To avoid an extra "current"\nfield on work in progress fibers, we can just use the alternate.\nThe timing for when this is true might be a bit tricky to reason\nabout so I explicitly pass the current value everywhere from the\ntop. That way we can always change this in the future to use an\nexplicit field or we can try to maintain a parallel data\nstructure that remembers which was the "current" fiber for each\nwip child.', 'Get rid of ugly and difficult to follow breaks in switch\nBecause pattern matching or something.', 'Add reactProdInvariant and corresponding babel rewrite pass (#6948)', 'Improve error message for components in bad states (missing instance) (#6990)', 'Merge pull request #6988 from sebmarkbage/newreconciler\n[Fiber] Minimize abuse of .alternate', 'Fix the typo in the documentaion pages for shallowCompare (#6980)\n\n\nfix the typo for the docs of shallowCompare at:\nhttps://facebook.github.io/react/docs/shallow-compare.html\n\n\nchange "value" to "values" to match the two objects.\n\n', 'Fix #6950, work around IE missing innerHTML on SVG nodes (#6982)\n\n\nWorkaround IE lacking innerHTML on SVG elements\n\n\nAdd tests for setInnerHTML\n\n\nCorrectly check if node has innerHTML property\n\n\nEnsure tests for setInnerHTML actually tests both codepaths\n\n\nProvide mock element for setInnerHTML tests\n\n\nOnly use SVG setInnerHTML workaround for SVG elements\n\n', 'Fix #5839 Add error event to source element (#6941)\n\n\nFix #5839 Add error event to source element\n\n\nAdd test case for \n\n', 'Warn if childContextType is defined on SFC (#6933)\nAdd console.error message content check\nUse appropriate name in warning/test', 'Fix IE11 placeholder textContent value bug. (#7002)', 'Updte tutorial to ja-JP (#6967)', 'Remove setProps and replaceProps completely (#6921)', 'Fix controlled/uncontrolled validation for radio+checkbox inputs (#7003)', 'Remove console.log from test (#7006)', 'pinned babylon version for eslint to work (#7008)', 'Performance: setTextContent should attempt to set TextNode nodeValue where possible (#7005)', 'Update 12-context.md (#6973)\nModify a clerical error', 'New marketing copy on homepage (#7012)', 'Fix Japanese/Italian/Korean tutorials (#7020)\n\n\nFix japanese tutorial\n\n\nFix Italian tutorial as same as e4fe662\n\n\nFix Korean tutorial as same as e4fe662\n\n', 'Wordsmith the homepage (#7022)', 'Add symbol to identify a ReactTestComponent instance. (#7035)', 'Update 03-interactivity-and-dynamic-uis.md (#7015)', 'Add React Amsterdam conference to the list (#7028)', 'Update 10.4-test-utils.md (#6971)\nThe find/scry methods which returns DOM component in react@0.13 now returns DOMElement in react@0.14 and later.', 'Update readme to latest React description (#7014)\n\n\nUpdate readme to latest React description\n\n\nUpdate readme to latest wordsmithing\n\n', 'Revert "Remove setProps and replaceProps completely" (#7039)', 'Move null-input-value-prop warning into devtool, add stack trace (#7040)', 'Remove setProps and replaceProps from src (#7045)', 'Remove setProps and replaceProps from docs (#7044)', 'Warn if people mutate children. (#7001)', "[flow] annotate accumulate and accumulateInto\nSummary:\nTrying to start adding flow types to files in React. I needed to add a script to package.json in order to run flow, flow-bin is already a dependency.\nI had to rewrite the implementation a bit. Flow doesn't recognize\nvar currentIsArray = Array.isArray(current);\nif (currentIsArray) {\n  // not refined\n}\nbut the following does work\nif (Array.isArray(current)) {\n  // refined\n}\nTest Plan:\nnpm run-script flow\nnpm run-script test accumulate\nReviewers: @zpao @spicyj", 'Standardise format of the three "state" questions. (#7046)\n\nStandardise format of the three "state" questions.\n\nThe original format follows the template:\n\n\nx? if x then probably isn\'t state\ny? if !y then probably isn\'t state\nz? if z then it\'s not state\n\n\nThis caused both me and a hallway tester to do a double take.\nThe proposed reformulation allows the answers to follow the same template.\nIn the same spirit, it uses the same contraction pattern in the last answer (it\'s not state-> it isn\'t state). This has the welcome side effect to make the lack of "probably" stand out more.\n\nUpdate phrasing in thinking in reacr\n', 'update babel-core to 5.8.34 in tutorial docs (#7059)', 'Specify possible need for C++ compiler (#7064)', 'Merge pull request #7053 from vjeux/flow_accumulate\n[flow] annotate accumulate, accumulateInto and forEachAccumulated', "Remove injectMixin (#6831)\nSummary:\nThe only callsite left was removed here: https://github.com/facebook/react/commit/e8af100849932387643977587ccd7a4c1a981470#commitcomment-17570210 but the code to handle it remained.\nTest Plan:\ntbgs and ibgs, make sure there's no callsites.\nReviewers: @jimfb, @spicyj, @sebmarkbage", '[flow] type KeyEscapeUtils (#7079)\nSummary:\nThe only call site ensures that the value is not null: https://github.com/facebook/react/blob/dc6fc8cc0726458a14f0544a30514af208d0098b/src/shared/utils/traverseAllChildren.js#L44\nkey is stringified inside of createElement, so we are guaranteed to receive a string right now: https://github.com/facebook/react/blob/dc6fc8cc0726458a14f0544a30514af208d0098b/src/isomorphic/classic/element/ReactElement.js#L142\nTest Plan:\nnpm run flow\nReviewers: @zpao @spicyj', '[flow] type adler32 (#7080)\nThis one is trivial\nTest Plan:\nnpm run flow\nReviewers: @zpao @spicyj', '[cleanup] Move ReactStateSetters inside of addons/link (#7085)\nSummary:\nThe only callsite of ReactStateSetters is in LinkedStateMixin which lives in addons/link. Better move it there to avoid cluttering the other folder.\nTest Plan:\nNone\nReviewers: @zpao @spicyj', '[docs] Update share button (#7097)', 'fix webcomponent example issue #7056 (#7057)\n\n\nfix webcomponent example issue #7056\n\n\nupdate fix issue #7056, remove unused web component  callbacks\n\n', 'webcomponents should use attachedCallback instead of createdCallback. (#7102)', 'Resolve refs in the order of the children (#7101)\n\nResolve refs in the order of the children\n\nReact makes no guarantees about ref resolution order. Unfortunately, some of the internal Facebook component APIs (specifically, layer dialogs) currently depend on the ref resolution order. Specifically, the assumption is that if the layer dialog is placed as a last child, by the time it mounts or updates, the refs to any previously declared elements have been resolved.\nWith the current ReactMultiChild, this is usually the case but not always. Both initial mount and an update of all components satisfy this assumption: by the time a child mounts or updates, the previous children’s refs have been resolved. The one scenario where it isn’t true is when a new child is mounted during an update.\nIn this case, the mountComponent() call used to be delayed until ReactMultiChild processes the queue. However, this is inconsistent with how updates normally work: unlike mounting, updating and unmounting happens inside ReactChildReconciler.updateChildren() loop.\nThis PR changes the mountComponent() to be performed inside ReactChildReconciler, just like receiveComponent() and unmountComponent(), and thus ensures that attachRef() calls are enqueued in the order the children were processed, so by the time the next child flushes, the refs of the previous children have been resolved.\nThis is not ideal and will probably be broken by incremental reconciler in the future. However, since we are trying to get rid of mixins in the internal codebase, and layered components are one of the biggest blockers to that, it’s lesser evil to temporarily make ref resolution order more strict until we have time to fix up the layer APIs to not rely on it, and are able to relax it again (which would be a breaking change).\n\nUse array instead of object to avoid lookups\n', 'Add autoFocus to list of whitelisted dom element props. (#7098)', 'Remove dead HAS_SIDE_EFFECTS logic (#6987)', '[flow] type deprecated (#7076)\nSummary:\nTest Plan:\nnpm run flow\nReviewers: @zpao @spicyj @gabelevi', '[flow] add some typings to utils (#7104)\n\n\nadd some typings to utils\n\n\nadd typing of flattenChildren\n\n\nmore accurate typings for flattenChildren\n\n', 'Clarify purpose of state property  in ES6 classes (#7109)', '[TestUtils] Copy type to nativeEvent in Simulate. (#6154)\nAlthough it is unreasonable to set every possible property for\nsimulated events, type is useful for event handlers that are shared\nbetween types and potentially have different behaviors.', 'Warn if the included mixin is undefined (#6158)', 'Remove comment about PooledClass destructors being optional (#6560)\nThey are no longer optional since #4720', 'Fix tests from #6158 to use Jasmine 2 (#7126)', 'Make "unexpected batch number" a warning (#7133)\nThis was added to catch internal errors in React but doesn\'t seem to be doing much good except frustrating people more when their apps throw (#6895, FB-internal t11950821). Until more proper error boundaries land, let\'s make this a warning.', 'Fix renderSubtreeIntoContainer to update context (#7125)\n\n\ncreate failing test case\n\n\nFix renderSubtreeIntoContainer to update context\n\n\nFixes #6599\n\n\nAlso test re-rendering due to prop update\n\n\nAddress review feedback\n\n', 'Reword invariant message about empty tags (fixes #7065) (#7066)\n\n\naddresses issue #7065\n\n\nfix test to use new message\n\n\nfix string in tests\n\n\nfix test string\n\n\nUpdate error message and tests\n\n', 'Fix for #5468: Validate PropTypes.oneOf(Type) arguments early (#6316)\n\nFix for 5468: Validate proptype definitions sooner\n\nAdded typeCheckWarn() func and updated the oneOf/oneOfType tests\nAdded DEV warning for invalid oneOf/OneOfType args\n\n\nSuppress redundant error on warn; typeCheckWarn() removed\n\n\nReturn no-op\n\n\nUsing emptyFunction module for consistency\n\n\nRemove createChainableTypeChecker() call\n\n\nAdjust test to assert type check passes when warned\n\n', 'Get rid of ugly and difficult to follow breaks in switch\nBecause pattern matching or something.', 'Add Priority Levels Enum\nThis flag on fibers will be used to track what priority of work is\nneeded by that subtree, if any at all.\nAlso fix up the TypeOfWork to have consistent naming and typing.', "Rename input -> props\nI tried to be clever and generalize it but this is currently only\nprops and there are other assumptions that might break down if it\nisn't.", 'Test ability to abort work', 'Create HostContainer Component Type\nThis is essentially equivalent to the current top level wrappers.\nThey contain the next children to be mounted into a container node\nfrom the host.\nIt is the responsibility of the host to retain references to them\nfor updates.\nI expect them to be able to exist in the middle of the tree in\nthe future, for renderSubtreeIntoContainer.', 'Pass the priority level along to children', "Automatically downgrade an update to a hidden node\nThis automatically downgrades the priority of a hidden node. Its\nchildren won't be reconciled until they come around the next time.", 'Bubble up pending work priority to the top level\nThis is a bit poorly structured. I\'ll restructure when the pieces\nare better in place.\nBasically we reset the priority of a node before work on the\nchildren. The children then bump their parent if they end up\nhaving work left.\nThis is the first time we\'re seeing deep updates happening. The\nnew unit test demonstrates this.\nThere is an interesting case that happens when we fall back out of\na deep update. We end up "completing" a node that we didn\'t begin.\nThis probably breaks in coroutines. When that completes, it\'ll try\nto render the sibling next but that should bail out so we check\nfor any pending work on the sibling. That one I\'m not sure about.', "Reorganize the top level around a FiberRoot\nWe need a canonical stateful root for each. I don't really want to\noverload the HostContainer for this purpose since it makes the\nfiber code more specialized.\nInstead I create a root which represents an actual stateful root.\nWhen these get scheduled they get chained together in a linked\nlist. However, we don't hold onto anything that doesn't have\nscheduled work. This will help us release everything automatically\nin the GC, as long as there are no subscriptions nor scheduled\nwork.", "Extract scheduler into its own module\nThe scheduler is getting quite complicated. I'll extract it into\nits own module.", "Attack of the Clones!\nThis fixes some bugs with the clones and traversing backwards\nthrough them. It is important that we maintain the correct parent\nat all times and that clones have the correct values.\nWe need to carefully clone everything on the way up to the the\nfiber with the next work to do.\nThis code is a bit messy and fragile now. I'm sure I didn't get it\nall right but I want to get the basics in place first. Then we can\nstructure this part better. I think the general algorithm is sound\nthough.", 'dumpTree helper for debugging\nIt is helpful to be able to dump information about the current\ntree for debugging issues in unit tests.', "Don't block deep low pri updates when bailing out\nFirst I fix a bug where host components didn't properly bail out\nalthough this was unobservable.\nWhen we bail out, we need to ensure that we preserve the highest\nremaining priority work that is left to do for that subtree.\nThis still isn't properly handling the case when that work has the\nsame priority as the current one. That work will be flushed the\nnext tick instead of the current pass.\nI can't create a test for that yet since I need setState to get to\nthat state.", 'Resume work deep in a bailed out child immediately in same pri\nI found a way to test this case without any need for setState.', 'Use a recursive algorithm for dumpTree\nThe parent pointer is updated to one of the two versions during\nwork so if you log in the middle of work, it gets confused.', 'Reuse work that was preempted if it was untouched\nThis tries to reuse work that was completed but another higher\npriority event came in. This tries to avoid starvation when high\npriority events causes low pri work to keep rerendering from\nscratch.', 'Feedback on style', "Renamed fiber.parent -> fiber.return\nThis is not just the parent Instance but also the return Fiber for\nsome piece of work. This clarifies and buys into this definition.\nBasically, in the current model you will always pass into a fiber\nfrom the parent that you're going to return to. Even if you get\naborted and reused this will be updated to the correct return\nfiber before you get back here.\nI don't have any guarantees in place to enforce this right now. I\ndon't really know how to, but seems safe. :)\nI confirmed that the use of keyword properties work for old\nengines because we have the transform enabled in our build system.", "Remove unreachable code\nThis should've been caught above.", 'Merge pull request #7034 from sebmarkbage/newreconciler\n[Fiber] Host Container Fiber and Priority Levels', 'Fiber side-effects\nThis adds tracking of side-effects that gets scheduled during an\nupdate.\nAs the tree gets reconciled, the side-effectful fibers are linked\ntogether in an ordered singly linked list. That way we can walk\nthe linked list to commit only the work that needs to be\nsynchronous - quickly.\nWe also store first and last nodes within a fiber. That\nway when we reuse an already processed subtree, we can reuse that\nsubset of the linked list.', 'Dependency injection in the begin/complete/commit phases\nThis just makes them instantiable so that we can get access to the\nhost config in these.', 'Host environment side-effects\nThis creates a new API for processing side-effects on the host\nenvironment.\nDuring initial reconciliation host instances are created during\nthe time sliced periods.\nDuring updates there is an opportunity for the host\nto prepare something on the instance during the time slicing, and\nto determine whether there were any changes. The could be thrown\naway.\nAt the commit phase, these changes are finally committed to the\nhost instance.', "Apply side-effects to host containers\nThis updates the host container root with new children.\nCurrently, this is always called for updates because we don't\ntrack if any children reordered.", "Schedule side-effects to parents before their children\nThis is only for host nodes so that the DOM tree is fully updated\nby the time we've flushed.\nClasses will schedule their life-cycles after their children's\nside-effects.", 'Rudimentary DOM Renderer with Example', 'Nits', 'Group warnings for unknown DOM properties (#7153)', 'Merge pull request #7154 from sebmarkbage/sideeffects\n[Fiber] Host Side Effects', 'Update readme for 15.2.0\n(cherry picked from commit 516aa96419a08ec99f77ebaecb33e4116f45a975)', 'Update website for 15.2.0\n(cherry picked from commit 3a6584b2eebfa27b416ccc2b4a3c3fc8be1ff3ae)', 'Changelog for 15.2.0\n(cherry picked from commit 74c29b391abefd17c16140de3bf08f4509ca9cbb and  bc1d59ee19854a97c3b7f4a829cd43c4d41cd2f3)', "Unshare not actually shared files (#7167)\nThis moves some files out of shared that are not actually shared\nwith isomorphic. They're specific to the renderers.", 'Add PropTypes.symbol to reusable components doc (#7171)', 'Removed transitionAppearTimeout to remove warning (#7165)\n\nRemoved the prop transitionAppearTimeout from\naddons/transitions/ReactTransitionGroup in order to remove a warning\nwhen passing unknown props to DOM elements.\n', "Trigger a proper no-op warning for async state changes on server (#7127)\nThis commit fixes #5473: ReactDOMServer.renderToString: presence of onClick\nhandler causes errors on async update\nThis commit performs the following changes:\n\nAdds a getUpdateQueue method to ReactServerRenderingTransaction,\n  ReactReconcileTransaction, ReactNativeReconcileTransaction and\n  ReactTestReconcileTransaction\nMake the ReactCompositeComponent call this getUpdateQueue instead of using\n  ReactUpdateQueue that was unwanted at certain moments on server\nOn ReactServerRenderingTransaction, dispatch ReactUpdateQueue's methods\n  while rendering and warning methods afterwards. This is done through the new\n  ReactServerUpdateQueue class\nAdded a series of tests that mimics the case presented in #5473 with setState,\n  forceUpdate and replaceState\nAdd flow typechecking on concerned files\n", 'Remove unnecessary Flow annotation\nIt was added in #7127 but this file isn’t type checked anyway.', 'Remove Danger.dangerouslyRenderMarkup as it is dead code (#7185)', '[flow] fix flattenChildren type (#7110)\nSummary:\nMake the debug attribute optional\nTest Plan:\nnpm run flow\nReviewers: @keyanzhang @chicoxyzzy', 'Inline dev-only requires (#7188)\n\nInline dev-only requires\n\nThis reduces the production bundled build size.\n\nUse new references after resetting module registry in tests\n\nThis fixes the tests which were broken due to inlining some requires.', "[flow] isTextInputElement (#7075)\nSummary:\nI had to cast into any because flow doesn't think that checking the lowercase version of nodeName is a valid way to refine the variable from HTMLElement to HTMLInputElement. I'm also not confident enough in changing the implementation to an instanceof HTMLInputElement to please flow. It also takes care of the null check in the process.\nThe nodeName && condition wasn't useful since the two branches are checking it against concrete values and actually makes the type different since nodeName is not a boolean per se. I replaced them with if conditions to make it clearer what it actually did instead of doing boolean logic tricks.\nIt is unclear why I had to type supportedInputTypes, see this internal post for a discussion: https://www.facebook.com/groups/flowtype/permalink/1084168611631753/\nThe only difference in behavior is that I now explicitely convert to boolean the object dereference via !!.\nTest Plan:\nnpm run flow\nCareful inspection of the code\nReviewers: @zpao @spicyj", 'Add link to @troydemonbreun’s contribution\nWe missed this PR in the changelog', 'Mention @Aweary’s #6933 in 15.2.0 changelog', 'Fixed PR link', 'Disable DebugTools in production (#7189)', 'Warn if PropType function is called manually (#7132)\n\n\nWarn if PropType function is called in production\n\n\nCheck if console is undefined before warning\n\n\nRandomize value of ReactPropTypesSecret\n\n\nRemove dev environment tests\n\n\nRename typeCheckPass to productionWarningCheck\n\n\nRename productionWarningCheck to expectWarningInProduction\n\n\nCall toString on Math.random()\n\n\nRename test block for React type checks\n\n\nMake sure warning isnt emitted for failing props\n\n\nCache warning by component and prop, warn in dev\n\n\nPass ReactPropTypesSecret to internal checks\n\n\nMove tests to ReactPropTypes-test.js\n\n\nUpdate the warning message to include link\n\n\nDo not test warning for unions  with invalid args\n\n', 'Revise ResponderTouchHistoryStore Error Handling (#7143)\nTouch behavior is inconsistent across different platforms, and ResponderTouchHistoryStore currently fatals when assumptions are broken. In addition, the behavior differs between development and production.\nThis pull request does a few things to make ResponderTouchHistoryStore easier to deal with:\nAdds Flow to keep the TouchEvent, Touch, and TouchRecord types straight.\nChanges behavior to be consistent across environments. This means either always throwing or never throwing (and making use of warning and console.error as appropriate).\nWhen an orphaned move or end event is received, print debug information and ignore it instead of crashing and burning.', 'Gulp: lint, flow, and version-check (#7174)\n\n\nAdd plugin loading for gulp\n\n\nConvert lint task to gulp\n\n\nConvert flow task to gulp\n\n\nConvert version-check task to gulp\n\n\nAdd missing semicolons\n\n', 'Import warnings that currently live in gists. (#7175)', "Move error boundaries test into reconciler (#7166)\nThe src/core folder moved while this PR was pending so this file\ndidn't move with it.\nLet's get rid of this annoying top level folder.", 'Use hardcoded value for PropType secret (#7194)\nRename secret!', 'Pass shouldHaveDebugID flag to instantiateComponent (#7193)\n\n\nAdd failing tests for #7187 and #7190\n\n\nPass shouldHaveDebugID flag to instantiateComponent\n\n\nThis allows us to remove a hack that was added in #6770 and caused #7187 and #7190.\n\nMove logic for choosing whether to use debugID outside instantiate\n', "Don't detach value from defaultValue for submit/reset inputs (#7197)", 'Do not render name attribute on INPUT if it is not supplied. Closes #7198. (#7199)', "Add React.PureComponent (#7195)\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use React.Component.\nInheriting from React.PureComponent indicates to React that your component doesn't need to rerender when the props are unchanged. We'll compare the old and new props before each render and short-circuit if they're unchanged. It's like an automatic shouldComponentUpdate.", 'Remove duplicate line (#7210)', "Make ReactPerf.start() work during reconciliation (#7208)\n\n\nAdd failing test demonstrating a ReactPerf warning\n\n\nMake the failing ReactPerf test more precise\n\n\nMake ReactPerf.start() work during reconciliation\n\n\nReorder lifecycle methods for greater clarity\n\n\nFix memory leak\n\n\nError boundaries should not break ReactPerf\n\n\nPut onBeginFlush/onEndFlush into transaction wrappers\n\n\nThis looks cleaner even though it is not strictly necessary.\nWe still call them manually for unmounting because it doesn't have a transaction.", 'Inject default batching after pending transactions (#7033)', 'Fix unmounting performance regression in V8 (#7232)\nAs reported in #7227, unmounting performance regressed with React 15.\nIt seems that delete has become much slower since we started using numeric keys.\nForcing dictionary keys to start with a dot fixes the issue.', 'Add xmlns and xmlns:xlink attributes (#6471)', 'Blog post for error codes', 'Merge pull request #7229 from zpao/blog-post-errorcodes\nBlog post for error codes', 'Fixed all eslint warnings (#7230)', 'Reformat event names in Media Events section (#7250)', 'Remove uneccesary colon (#7238)\nOnly use a colon after a statement that is a complete sentence, like Grammer Girl says.', 'Add link to video chat with @spicyj (#7252)', "Update benchmarks to be more realistic polymorphically (#7255)\nPreviously, the extract-components script would create the same number of layers of composites as the page it captures, but it would output a new class for each time any composite is used (since we don't want to replicate all the component logic).\nI changed the script to output a single type for each type in the input -- and each generated component takes an index for which output it should return. This should be closer to how the original code behaves, especially with respect to VM function call lookups where the amount of polymorphism makes a difference.\nI re-recorded the benchmarks with the new scripts. They run significantly faster:\n```\nComparing old.txt (control) vs new.txt (test)\nSignificant differences marked by ***\n% change from control to test, with 99% CIs:\n\nssr_pe_cold_ms_jsc_jit\n    % change: -41.73% [-43.37%, -40.09%]  ***\n    means: 39.3191 (control), 22.9127 (test)\nssr_pe_cold_ms_jsc_nojit\n    % change: -44.24% [-46.69%, -41.80%]  ***\n    means: 45.8646 (control), 25.5764 (test)\nssr_pe_cold_ms_node\n    % change: -45.61% [-47.38%, -43.85%]  ***\n    means: 90.1118 (control), 49.0116 (test)\n```\n\nThis is probably in part due to the changes here, but also the page I captured has changed somewhat in the meantime and there seem to be slightly fewer components in the hierarchy, so they're not really comparable. But going forward we can use this benchmark which should be more accurate. I also included an identical copy that uses stateless functional components so we can test optimizations to those later.", 'Test renderer improvements (#7258)\nAdds .update(newElement) and .unmount() and makes children reorders and composite type swapping work.\nPart of #7148.', 'warn for using maps as children with owner info (#7260)', 'Add a new blog post about mixins (#7273)', 'Fix typos in “Mixins Considered Harmful” (#7275)\n\n\nFix typos in “Mixins Considered Harmful”\n\n\nUse consistent code style\n\n', 'Add referrerPolicy to HTMLDOMPropertyConfig (#7274)', 'Renaming: ReactDOM (#7265)\nRename React with ReactDOM', 'Update 03-interactivity-and-dynamic-uis.md (#6972)', '[docs] Follow up to 6972 - update docs code (#7278)', 'Fix #7099 (#7251)\n\n\nSet step prop before value prop\n\n\nEmbed comments on .step sequence behavior\n\n', 'Add mixins property to context example (#7277)', 'Fix TestUtils crash with NODE_ENV=production (#7246)\nI caused it with #7189.\nWe generally don’t recommend running TestUtils in production environment but this is technically a regression.\nFixes #7231.', 'Add Design Principles to the docs (#7282)', 'Minor tweaks to Design Principles (#7283)', 'Clarify the section about dogfooding (#7292)', 'Eagerly evaluate inline requires in Jest (#7245)\n\nEagerly evaluate inline requires in Jest\n\nI inlined some requires in #7188 to fix the build size regression.\nHowever this caused an issue with Jest due to it resetting module registry between tests.\nThis is a temporary fix to #7240.\nIt should be reverted as part of #7178.\n\nMake the hack work in all environments\n', 'prevent spamming warnings related to performance measurement code (#7299)\n\n\nprevent spamming warnings related to performance measurement code\n\n\nminor changes in names and such\n\n\n-\n\n\n-\n\n', 'changelog for 15.2.1\n(cherry picked from commit 6b196173336f7d1a2c192a713f820cef45fce2cc)\nChangelog fixes\n(cherry picked from commit dfb5cc306f4f1fe35617dd0f60805d4fe6db6b2b)\nFix typo in previous changelog update\n(cherry picked from commit 57a1ebb80999a5aa561258ec45c4d238077844fc)', 'Update readme for 15.2.1\n(cherry picked from commit 5597ca70be022615dd5fb39517cc11ab42397c34)', 'Update website for 15.2.1\n(cherry picked from commit ea880f2e2cd7944dceb0097e80f5e92f39243afc)', 'Upgrade to Jekyll 3\nFull list of changes is at https://jekyllrb.com/docs/upgrading/2-to-3/. The tl;dr of it is:\n - Relative permalinks were removed, so all the files in the docs subdirectory need their permalink to be prefixed with docs/\n - post and page types were renamed to posts and pages respectively\n - jekyll-paginate, pygments and redcarpet are all now optional, so I needed to explicitly add it to the Gemfile. Jekyll now uses rouge rather than pygments for syntax highlighting, but rouge does not support highlighting individual lines (hl_lines) so we need to continue using Pygments.\n - Layout metadata (eg. sectionid) is now on a layout variable rather than page\nTested the following pages and confirmed that they all work:\n - "Docs" link (getting started page): http://127.0.0.1:4000/react/docs/getting-started.html\n - Downloads: http://127.0.0.1:4000/react/downloads.html\n - Tutorial: http://127.0.0.1:4000/react/docs/tutorial.html\n - A few pages under the "docs" subdirectory, to confirm they\'re working properly:\n    - http://127.0.0.1:4000/react/docs/addons.html\n - http://127.0.0.1:4000/react/docs/why-react.html\n - http://127.0.0.1:4000/react/docs/create-fragment.html\n - A few tips:\n    - http://127.0.0.1:4000/react/tips/false-in-jsx.html\n - http://127.0.0.1:4000/react/tips/style-props-value-px.html\n - Non-English versions of the page:\n    - http://127.0.0.1:4000/react/docs/getting-started-it-IT.html\n    - http://127.0.0.1:4000/react/docs/getting-started-ja-JP.html', "Finish Jekyll 3 Upgrade\n\nReverts change to use sectionid on layouts (was unreliable), using config to make sure that's specified on all pages that need it\nAdds permalinks to all other pages so that og data is correct\nCorrects some permalinks that were in correct (translations)\n", 'Merge pull request #7308 from zpao/jekyll3\nUpgrade to Jekyll 3', 'Mention actual prop type in element type checker (#7319)', 'Switch Travis CI to Trusty Beta (#7309)', 'Add babel-plugin-transform-class-properties (#7322)\n\n\nadded babel-plugin-transform-class-properties\n\n\nremoved babel-plugin- prefix\n\n', 'improved warning in ReactUpdateQueue (#7326)', 'Add blog post', 'Correct grammatical error (subject-verb agreement) (#7338)\n"It is worth repeating: there is no configuration files or complicated folder structures." > "It is worth repeating: there are no configuration files or complicated folder structures."', 'Host our own images for the blog, use https links (#7339)', 'Blog post: Fixed typo in post (#7336)', 'Avoid validation warning when inputs change type (#7333)\nFor controlled inputs, updateWrapper was getting called before the\ntype prop had a chance to update. This could lead to a case where\nswitching from the text to number type caused a validation error\nthat would prevent the proper input value from being assigned.\nThis commit moves the call to ReactDOMInput.updateWrapper below\n_updateProperties to avoid this situation.', 'upgraded babel-plugin-transform-class-properties\n\nbabel/babel#3589 fixed inferring class name\n', 'codemodded tests from createClass to ES2015 classes\n\nreverted more files under classic\n', 'Merge pull request #7321 from keyanzhang/codemod-es6-component\nCodemod tests from createClass to ES2015 classes', 'Wording change in doc (#7348)', "Update docs zh cn (#7254)\n\n\nupdate 03-interactivity-and-dynamic-uis.zh-CN\n\n\nupdate 04-multiple-components.zh-CN\n\n\nupdate 05-reusable-components.zh-CN\n\n\nupdat 06-transferring-props.zh-CN\n\n\nupdate 07-forms.zh-CN\n\n\nupdate 08-working-with-the-browser.zh-CN\n\n\nupdate 08 and 08.1\n\n\nupdate 09-tooling-integration.zh-CN\n\n\nrevise\n\n\ndon't use ES6\n\n", '"transient dependencies" -> "transitive dependencies" (#7341)\nI think that\'s what you meant -- although with npm dependencies are kind of transient :P', 'Added ReactNL conference (#7342)', 'fix doc for React Native mountComponent (#7313)', 'Remove unused unmountIDFromEnvironment (#7259)\nI got rid of the need for this a few months ago.', 'Create 02-displaying-data.zh-TW.md (#7284)\n\n\nCreate 02-displaying-data.zh-TW.md\n\n\nUpdate 02-displaying-data.zh-TW.md\n\n', 'PropTypes: distinguish nullable from optional object field (#7291)\n\nPropTypes: distinguish nullable from optional object field\n\nThis gives a more precise message (no type semantics change) to the case of passing a field in an object, but whose value is null:\nBefore:\njs\npropTypes: {\n  foo: React.PropTypes.number.isRequired\n}\nWould scream "Required prop foo was not specified in MyComp".\nNow it\'ll be "Required prop foo was specified in MyComp, but its value is null.".\nWorks as expected in nested objects.\nThis fixes the issue of a component transitively passing a null, specifying the correct field to the child but have the child tell it that it didn\'t provide the prop.\nOptional field and nullable are two different things anyway.\n\n\nAdd missing test case.\n\n\nReword messages.\n\n', 'fixed incorrect doc location (#7365)', 'ReactTestRenderer package (#7362)', "Add “Don't Call PropTypes” warning (#7219)", '[docs] Add permalink to PropTypes warning page (#7377)\nFollowup to #7219, which was created before the Jekyll 3 upgrade, which needs the permalink field.', 'Changelog for 15.3.0\n(cherry picked from commit f7837682b489dee9e47d76695d0c22addd7be4cd)', 'Update readme for 15.3.0\n(cherry picked from commit 7251f6a6e9444c4d4da80649714f9fd6e9e79cfa)', 'Update website for 15.3.0\n(cherry picked from commit cc01d1be3309715ad4485395e14272cc3c35ceb6)', 'renamed modules (devtool -> hook)', 'renamed methods (devtool -> hook)', '[docs] add permalink for newly translated page (#7380)', 'temporary compatibility fix', 'Avoid "Member not found exception" in IE10 (#7343)\n\'change\' custom events raise "Member not found" in <= IE10. To\ncircumvent this, the SyntheticEvent class now checks for "typeof\nevent.cancelBubble !== \'unknown\'". This eliminates this exception and\nmaintains the expected bubbling functionality.\nAddresses #7320.', 'Merge pull request #7381 from keyanzhang/rename-hooks\nRename Devtool to Hook', 'Add some semicolons for linting. (#7390)', 'Change trackedTouchCount invariant into a console.error (#7400)\n\n\nChange trackedTouchCount invariant into a console.error\n\n\nFix ResponderEventPlugin lint warning\n\n', 'Fix  with type date/time/etc. issue on mobile browsers (#7397)\nFix  with type date/time/etc. issue on mobile browsers', '[docs] Use npmcdn (#7394)', 'Specify "files" field for npm packages (#7396)', 'Fix JSON in package.json (#7408)', '[docs] Use appropriately sized og:image (#7417)\nAlso runs through Imageoptim for smaller size.', 'Relay blog post (#7433)', '[Fiber] unmountComponentAtNode\nAdd unmounting hook.', '[Fiber] Rudimentary class support\nMostly just to get started with unit testing.', 'Remove console.logs from Fiber\nThe code is sufficiently complex now that this is more noise than\nhelpful. Will just temporary explicit logs in the future.', "Move all imports to closures in Fiber\nI'm paranoid about inline-ability so I use this pattern of adding\na constant to the closure everywhere.\nES6 modules help avoid that but we can't use that consistently\nbecause of the dependency injection so instead I opt for making\nthis explicit everywhere.\nGrep: \\b[a-zA-Z_$\\d]+.[a-zA-Z_$\\d]+(", 'Reuse old props for the update if there are no new props', "Don't reset next work pointer for lower priority work\nIf the current work is higher priority than the new work, then\ndon't bother resetting the unit of work pointer since it won't\naffect the execution order.", "Set pendingProps in cloneFiber for symmetry\nThis might become confusing later but is unreachable today. That's\nbecause existing pendingProps only matter when a clone is updated,\nbut this path can only matter when it is created.", 'When a reconciliation gets down prioritized, reuse children\nWhen we downprioritize children we need to remember to reuse the\nold children in the update side-effect.\nThis whole set up is very unfortunate since we can have children\nin our active tree that never actually finished rendering. This\nstrategy might be fundamentally flawed, not sure.', 'Add note about potential future bugs', "Fix NoWork bug\nThanks @acdlite. Add comment about future unit test coverage.\nThis was actually hiding the fact that we are only able to reuse\nexisting work if it was marked as completely finished which it\nwon't be if we reuse its pending priority.\nHowever, we should be able to bail out even if there is work\nremaining in a subtree.", "Reuse the correct child and side-effects when reusing partial work\nWe need to use the other child because we reset it to the\ncurrent one on the way up.\nWe also need to reset the first/last side-effects to that of the\nchildren so that we're committing the right thing.", 'Introduce shouldComponentUpdate in Fiber\nIt is important to be able to use this since it avoids starvation\nproblems if you can reuse partially completed work.', 'Move wip fibers to childInProgress\nThis took a while to figure out, but we need to be able to store\nchildren that are currently being worked on separately from the\ncurrent children. We always need a canonical "current" children\nso that we can update them. However, we also need a different set\nthat we\'re currently working on so that we have a way to get to\nalready progressed work.\nThis solve the starvation problem in the first render because now\nwe can reach children that were never rendered and have a place\nto store their progressed work on. The unit test changes tests\nthis.\nThis lets us get rid of the hasWorkInProgress flag.\nWhen we reconcile new children we need to reconcile them against\nprogressed work so that we can reuse it. The progressed work is\n"work in progress" nodes. So in that case we need to mutate\ninstead of clone, to preserve the invariant that only two versions\nexist at any given point. This effectively forks the\nReactChildFiber implementation.', 'Merge pull request #7248 from sebmarkbage/fibercleanup\n[Fiber] Various minor tweaks and a few big ones', 'Fix link formatting on Relay blog post (#7434)', 'change a word in performance docs (#7442)', 'Capitalize AJAX (#7435)', 'Fix batchedUpdates return value (#7444)', "Bundle DOM renderers into their individual UMD bundles (#7164)\n\nCut out isomorphic dependencies from the renderers\n\nThese files reaches into isomorphic files.\nThe ReactElement functions are exposed on the React object anyway\nso I can just use those instead.\nI also found some files that are not shared that should be in\nrenderers shared.\n\nFound a few more shared dependencies\n\nrenderSubtreeIntoContainer is only used by the DOM renderer.\nIt's not an addon.\nReactClass isn't needed as a dependency since injection doesn't\nhappen anymore.\n\nUse a shim file to load addons' dependencies on DOM\n\nBy replacing this intermediate file we can do the lazy loading\nwithout needing any lazy requires. This set up works with ES\nmodules.\nWe could also replace the globalShim thing with aliased files\ninstead for consistency.\n\nBundle DOM renderers into their individual UMD bundles\n\nInstead of exposing the entire DOM renderer on the react.js\npackage, I only expose CurrentOwner and ComponentTreeDevtool which\nare currently the only two modules that share state with the\nrenderers.\nThen I package each renderer in its own package. That could allow\nus to drop more server dependencies from the client package. It\nwill also allow us to ship fiber as a separate renderer.\nUnminified DEV            after     before\nreact.js                  123kb     696kb\nreact-with-addons.js      227kb     774kb\nreact-dom.js              668kb     1kb\nreact-dom-server.js       638kb     1kb\nMinified PROD             after     before\nreact.min.js               24kb     154kb\nreact-with-addons.min.js   37kb     166kb\nreact-dom.min.js          149kb     1kb\nreact-dom-server.min.js   144kb     1kb\nThe total size for react.min.js + react-dom.min.js is +19kb larger\nbecause of the overlap between them right now. I'd like to see\nwhat an optimizing compiler can do to this. Some of that is fbjs\nstuff. There shouldn't need to be that much overlap so that's\nsomething we can hunt. We should keep isomorphic absolutely\nminimal so there's no reason for other React clones not to use it.\nThere will be less overlap with Fiber.\nHowever, another strategy that we could do is package the\nisomorphic package into each renderer bundle and conditionally\ninitialize it if it hasn't already been initialized. That way\nyou only pay an overlap tax when there are two renderers on the\npage but not without it. It's also easier to just pull in one\npackage. The downside is the versioning stuff that the separate\nnpm package would solve. That applies to CDNs as well.\nReactWithAddons is a bit weird because it is packaged into the\nisomorphic package but has a bunch of DOM dependencies. So we have\nto load them lazily since the DOM package gets initialized after.", 'Fix trailing build issues (#7450)\nUse relative path for addons UMD shim module\nUse explicit top level wrapper marker for top level elements', "Include React itself in the list of shims (#7453)\nWithout this we end up bundling all of the isomorphic React into\nthe DOM bundle. This was fixed in #7168 too but I'll just do an\nearly fix to ensure that #7168 is purely an npm change.", 'Remove unused createHierarchyRenderer (#7454)', "Fix memory leak in ReactChildrenMutationWarningHook for SSR (#7410)\n\n\ncorrected ReactChildrenMutationWarningHook's name\n\n\nchanged onComponentHasMounted to onMountComponent\n\n\nand get element from ReactComponentTreeHook instead of keeping an internal store", "Prevent performance regression in DEV due to warning arguments (#7461)\n\nPrevent internal performance regression\n\nThis only affects Facebook website, not open source version of React.\nOn the Facebook website, we don't have a transform for warnings and invariants.\nTherefore, expensive arguments will be calculated even if the warning doesn't fire.\nThis fixes a few cases where that calculation might be more expensive than usually.\nIn my testing, this brings down average row click time in Power Editor from ~300ms to ~220ms in DEV (vs ~40ms in prod).\n\nPut warning() that shows up in profile behind condition\n", 'Fix unmounting performance regression in DEV (#7463)\n\n\nComment previous occurrences of this issue\n\n\nFix DEV performance regression in V8\n\n\nExtract try/catch into a separate function when calling hooks\n\n', "Remove unnecessary indirection and events from the hooks (#7464)\n\n\nRemove unnecessary indirection from the tree hook\n\n\nReplace onSetDisplayName, onSetOwner, onSetText with one event\n\n\nLess events is better.\nonSetDisplayName, onSetOwner, and onSetText only existed because we didn't initially track elements.\n\nRemove unused variables\n", "Mock ReactDOM for Fiber Tests (#7206)\nWe currently write all our tests against the DOM implementation.\nI need a way to run the Fiber tests against it. But I don't want\nto take on any package dependencies on Fiber modules yet.\nThere's a problem with jest right now where you can't globally\nmock modules that already exist. So I have to add a global call\nto jest.mock.\nLuckily we already have a way to test the useCreateElement paths\nusing a feature flag. I won't activate this flag in travis until\nit passes, but the idea is to run all three variants in travis.\nI'm not sure that invoking rAF and rIC synchronously is the best\nway to test this since it doesn't capture the backwards\ncompatibility aspect. I.e. the fact that people might be relying\non the synchronous nature in real apps too. It's a start.\nIdeally, jest would have these built-in.", 'Build renderers into their individual npm packages (#7168)\nThis copies modules into three separate packages instead of\nputting it all in React.\nThe overlap in shared and between renderers gets duplicated.\nThis allows the isomorphic package to stay minimal. It can also\nbe used as a direct dependency without much risk.\nThis also allow us to ship versions to each renderer independently\nand we can ship renderers without updating the main react package\ndependency.', 'Build React DOM Fiber package (#7173)\nThis builds a react-dom-fiber.js bundle which exposes ReactDOMFiber.\nThis allows early experiments with the new Fiber reconciler.\nI also expose it in the npm package through react-dom/fiber.', "Consolidate hook events (#7472)\n\nRemove onBeforeMountComponent hook event\n\nIt is unnecessary.\nWe now pass the element as part of onInstantiateComponent, and it can't change before mounting.\n\nRemove onComponentHasMounted hook event\n\nIt is unused after #7410.\n\nReplace on(Begin|End)ReconcilerTimer hook events\n\nWe already have onBeforeUpdateComponent.\nLet's just have on(Before?)(Mount|Update|Unmount)Component and stick with them.\nThis removes double event dispatches in some hot spots.\n\nRemove onComponentHasUpdated hook\n\nThe tests still pass so presumably it was not necessary.\n\n\nAdd missing DEV to TestUtils code\n\n\nReplace on(InstantiateComponent|SetParent) with onBeforeMountComponent\n\n\nThis lets us further consolidate hooks.\nThe parent ID is now passed as an argument to onBeforeMountComponent() with the element.\n\nRemove onMountRootComponent hook event\n\nIt is unnecessary now that we pass the parent ID to onBeforeMountComponent.\n\nUse parentDebugID = 0 both for roots and production\n\nThis removes some awkward branching.", 'Require the isomorphic React instead of internals from renderers (#7473)\nThis is needed for flat builds. It also lets us get rid of a bunch\nof special cases in the build scripts.\nIt also allow us to just copy the source files into React Native\ninstead of having to build first to resolve the special cases.', 'Use aliasify everywhere instead of browserify-global-shim (#7476)\nI already had to aliasify to have better control over the requires\nso we might as well do it everywhere for consistency.\nThis probably makes it easier to rebase the rollup work too\nbecause aliases seems to be how you solve this in that world.', 'Improve DEV performance in Chrome (#7483)\n\n\nEnsure this._domID is always a number\n\n\nEnsure this._rootNodeID is always a number\n\n', 'Remove ReactDOMInstrumentation (#7481)\nIts events are not being used anywhere.', 'Fix ReactComponentTreeHook.getRegisteredIDs() to work with inlined content (#7490)\nI broke this in #7463: parseInt() cuts off #text at the end.\nChanging to just use negative numbers instead.', "Don't define key or ref dummy props if none were provided (#7488)\n\nDon't define key or ref dummy props if none were provided\n\nThis fixes a performance regression.\n\nStyle nit\n", 'Fix typo in changelog (#7468)', 'Use ES6 Map in ReactComponentTreeHook if available (#7491)\n\n\nUse ES6 Map in ReactComponentTreeHook if available\n\n\nMake getRootIDs fast again\n\n\nOnly use native Map\n\n', 'Avoid object iteration when creating DOM factories (#7493)', 'Remove last use of mapObject (#7494)', 'Add propsTypes and defaultProps example for stateless functions (#7458)\n\n\nAdd propsTypes and defaultProps example for stateless functions\n\n\nUpdate 05-reusable-components.md\n\n\nUpdate 05-reusable-components.md\n\n', 'Avoid indexOf() during unmounting a root in the hook (#7496)\n\n\nAvoid indexOf() during unmounting a root in the hook\n\n\nCheck for (Map|Set).prototype.keys\n\n', 'Fix flow (#7499)\nReactElement requires a generic argument now and the return function of render is a ReactTestInstance and not a ReactElement.', 'Fix for #7170 (#7486)\n\n\nWrite failing test\n\n\nEnsure .min and .max are set before .value\n\n\nAdjusting test for false negative\n\n\nRevert test adjustment (apparently it was only failing locally)\n\n', 'React.Children.toArray() changes keys (#7495)\nAs noted by @spicyj in #5541', 'Fix slow performance of PropTypes.oneOfType() on misses (#7510)\nIt used to be slow whenever a type miss occurred because expensive Error objects were being created. For example, with oneOfType([number, data]), passing a date would create an Error object in number typechecker for every item.\nThe savings depend on how much commonly you used oneOfType(), and how often it had “misses”. If you used it heavily, you might see 1.5x to 2x performance improvements in __DEV__ after this fix.', 'Update onlyChild invariant message (#7514)', "Warn if using React.unmountComponentAtNode on a different React instance's tree. (#7456)\n\nWarn when using React.unmountComponentAtNode on a different React instance's tree\n\nhttps://github.com/facebook/react/issues/3787\n\n\nAdding tests.\n\n\nImplementing recommended changes.\n\n\nhttps://github.com/facebook/react/issues/3787", 'Update 09.2-package-management.md (#7520)', 'Fix ReactTestInstance::toJSON() with empty top-level components (#7523)', 'Fix header link generation for non-English docs (#7497)', 'Upgrade to fbjs v0.8.4 (#7532)', 'Improve validateDOMNesting message for whitespace (#7515)\nFor #5071.', 'Avoid "Member not found" error in IE (#7411)\nExplanation, discussion, and similar change as #7343\nAddresses #7320', 'Update changelog for 15.3.1\n(cherry picked from commit 3c0906ca241c767409cb1e2634bee08065a01ec3)', 'Update readme for 15.3.1\n(cherry picked from commit cc41ec258f2440e87ac7d3ac770ed7fc74377d67)', 'Update website for 15.3.1\n(cherry picked from commit 199056cf1b004f2fd7a42211b4506cf4d879c6b2)', 'Add missing KeyUp eventType (#7533)\nFixes #7222.', 'Fix minor typo in README.md (#7540)', 'add explicit link to http://bower.io/ (#7546)', 'Add playsInline as an allowed HTML property (#7519)\nThe WHATWG has unprefixed -webkit-playsinline as playsinline (see: https://github.com/whatwg/html/pull/1444) and iOS 10 intends to use it (https://webkit.org/blog/6784/new-video-policies-for-ios/).', 'Show React events in the timeline when ReactPerf is active (#7549)\n\nShow React events in the timeline when ReactPerf is active\n\nThis currently only seems to work on Chrome.\n\nAddress Chrome issue\n', 'Ensure lifecycle timers are stopped on errors (#7548)\n\nEnsure lifecycle timers are stopped on errors\n\nFixes #7349\n\nAddress review feedback and add an extra test\n', 'Update flow to 0.31 (#7557)', 'Type ReactPropTypeLocationNames (#7503)', 'Type ReactPropTypeLocations (#7502)', 'Type canDefineProperty (#7500)', 'Type ReactErrorUtils (#7565)', 'Type ReactElementSymbol (#7564)', 'Type ReactPropTypesSecret (#7501)', "Type ReactComponentTreeHook (#7504)\nFor this one, I wanted to type a non-trivial piece of the codebase and ran into the fact that we do not have types for ReactElement nor ReactInstance, so I had to create them.\nI'll add comments inline", 'Support error boundaries on ReactTestRenderer (#7558)', "Fix lint errors (#7568)\nIn Type ReactComponentTreeHook #7504, I merged even though travis didn't report green (travis for all the fb repos has been backlogged like crazy since this morning) by manually doing npm test and npm run flow but I didn't ensure that lint was all green.\n@millermedeiros pinged me about it so here's a quick fix", 'Type ReactComponentEnvironment (#7566)', "Remove unneeded declare (#7570)\nIt turns out that we don't need it, flow is smart enough to realize that the function is declared in the two branches :)", 'Type ReactChildrenMutationWarningHook (#7571)', 'Type ReactInvalidSetStateWarningHook (#7572)', 'Type ReactDebugTool (#7576)', 'doc: npm ls react is a better advice (#7513)\nRefs Must Have Owner Warning\nnpm ls react is a better advice than npm ls | grep react', "Type ReactPerf (#7585)\nWe need to export FlushHistory type and I submitted a PR on flow to fix the type of console.table which is too restrictive.\nI'm already starting to see the benefits of flow, I can look at random variables in the code and flow knows what shape the objects are! It's really useful to try and understand what's going on :)", "Type ReactDebugTool (#7586)\nFlow doesn't really support the concept of variables that are non-null but only inside of a __DEV__ block. There's an internal post about it ( https://www.facebook.com/groups/flowtype/permalink/1132437726804841/ ) and the conclusion is that we should force it to be non-null and trust the developer to put the proper DEV checks in place.", 'Remove keyMirror in ReactPropTypeLocations (#7592)\nThis one involves a bit more work as I added "phantom" flow types to a bunch of places where the type is a ReactPropTypeLocations even though those files are not @flow yet.\nA good side effect is that ReactPropTypeLocationNames keys are now correctly typed, this means that they cannot go out of sync without breaking flow :)', 'Remove keyMirror in ComponentLifeCycle (#7591)\nSee rationale in https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/', 'Remove keyMirror in SpecPolicy (#7590)\nAs discussed in my RFC: https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/', "Type ReactMultiChildUpdateTypes (#7589)\nAs mentioned in https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/ I'm going to kill this instance of keyMirror and use a plain string instead with a type union.\nThe current type union is unused right now but when I type ReactMultiChild I will use it.", "Type ReactOwner (#7587)\nIncrementally type ReactInstance by adding the types of attach/detachRef.\nI moved isValidOwner as a function inside of the file since it's never used externally.", "Type PooledClass (#7578)\nThis one was really interesting to type as it's doing a lot of unusual JavaScript. Fortunately flow is now pretty kick ass and I've been able to mostly type it. The only missing piece is that it won't check the constructor arguments.\nIf you are a fb employee, you can follow the discussion here: https://www.facebook.com/groups/flowtype/permalink/1132359430146004/", 'Remove the Mixin layer of indirection on ReactMultiChild (#7598)\nAs mentioned in https://github.com/facebook/react/pull/7581#issuecomment-242952042 we can remove the Mixin layer of indirection as it only exports a Mixin and I find it confusing.', 'Remove the Mixin layer of indirection on ReactCompositeComponent (#7599)\nAs mentioned in https://github.com/facebook/react/pull/7581#issuecomment-242952042 we can remove the Mixin layer of indirection as it only exports a Mixin and I find it confusing.', 'Type Transaction (#7581)\nThis one is interesting because we have transaction objects being passed around everywhere in the codebase but there\'s actually no Transaction class. It\'s a "mixin" that comes to life by being Object.assigned to the prototype of a real "class" (before class was cool!). Therefore, we can\'t just say var Transaction = require(\'Transaction\'); (transaction: Transaction) => { } because it would be the object that contains a mixin and not an instance of a transaction.\nThe trick I use is to export TransactionType and alias it to Transaction in the file as it doesn\'t actually require transaction. In case they do, we\'ll figure it out, but in the few files I looked at, it doesn\'t seem to be the case.\nFor the perform function, it actually typechecks pretty well!', 'Changed to !document.documentMode (#7594)', 'docs: re-position comments to account for code sample width (#7602)', "Remove non-standard 'icon' property (fixes #7430) (#7508)", 'Ignore bundle.js for examples (#7498)\n\n\nIgnore bundle.js for examples\n\n\nMove ignored bundle.js under examples directory\n\n', 'Warn if input changes controlledness - also for null (#7544) (#7603)', 'Adds minor additions clarifying questions I had reading intro tutorial (#7595)', 'Add line breaks to examples on 10.1-animation docs per (#7606)\ncomments to issue #7317.\nUpdated JP doc examples to match other languages\nReformat to match JSX multi-line style #7550', 's/npmcdn/unpkg/g (#7609)\nnpmcdn.com is moving to unpkg.com. Same backend, one less letter in the\ndomain name. Boom.', 'Cleanup ReactErrorUtils (#7610)\nThis cleans up the Flow annotations and brings the implementations in line.', 'Remove keyMirror in PropagationPhases (#7596)\nSee rationale in https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/', "Remove keyMirror in TopLevelTypes (#7597)\nThis is the last callsite of keyMirror! It removes 0.5k gzipped :)\nThe only trick with this one is that ReactTestUtils actually iterates over the list of all the events. Instead of duplicating the logic, I used the $Enum feature of flow that lets us statically extract out the type from the dynamic value. Inside of react-dom we're no longer requiring the file directly so it doesn't bloat the file size, and we still get to have static typing, best of both worlds!", 'Kill keyOf :) (#7615)', 'Improve error boundaries tests', "Add 'as' keyword (#7543) (#7582)\n\n\nAdd 'as' keyword (#7543)\n\n\nfix commenting to adhere to styling\n\n\nfix grammar in comment\n\n", 'Add checkpoint/rollback to ReactNativeReconcileTransaction (#7619)', 'Improve error boundaries tests (#7569)', 'Guarded ensureScrollValueMonitoring against some malicious script on the Internet overriding native document.createEvent (fixes #6887) (#7621)', 'Copy all SVG child nodes when using setting innerHTML in IE (#7618)', 'Add more specific link to react-addons-shallow-compare readme (#7608)', "Update to jest 15\nJest 15 has just been released and is way more awesome: http://facebook.github.io/jest/blog/2016/09/01/jest-15.html\nThis pull request updates jest from version 12 to 15. Right now there's a fix in jest around Symbol that hasn't been released yet, so this will break CI and cannot be merged it. But once it ships by the end of the day, we'll be good to go :)\nSee comments inline for all the changes I've done.", 'Merge pull request #7625 from vjeux/jest15\nUpdate to jest 15', 'Remove String.prototype.split polyfill warning (#7629)', 'Remove the Flow experimental.strict_type_args option (#7631)', "add events code walkthrough video link (#7633)\nI think if we do another one of these it'd be good to turn this into a list, but this is good for now.\nThanks @spicyj!\ncc @gaearon", 'Small flow fixes', 'Merge pull request #7634 from spicyj/flowfix\nSmall flow fixes', 'docs:translate doc 11-advanced-performance to chinese (#7584)', 'Generate SimpleEventPlugin data structures at runtime (#7616)\nWe used to copy and paste the same big blob many times in order for it to work with keyOf which is no longer a constraint. This pull request takes a list of all the events as string and generate those data structures at runtime.\nIt reduces the size of React by 1k post gzip and flow is able to extract the structure out of it :)', "Type EventPluginRegistry\nThis commit takes the first incremental step towards adding type checks\nto the React event code. A couple of issues came up.\nThere is an issue with the SyntheticEvent type: Flow declares a\nSyntheticEvent type1 that lacks the non-public properties which are\nused in React internals. To solve this I declared a class that extends\nSyntheticEvent. This class can be expanded as we add Flow types to more\nplaces where SyntheticEvent instances are referenced.\nI'm happy to change this if folks prefer a different approach.\nSome options I considered:\n- Override the SyntheticEvent declaration with our own declaration\n  - Pro: We can use 'SyntheticEvent' as a type just like we are used to\n    when working in any other codebase.\n  - Pro: No need to import any type since it's a declaration\n  - Pro: Only one version of SyntheticEvent; less confusion.\n  - Con: Could get out of sync with real implementation.\n  - Con: Duplicates part of the type declared in Flow.\n- Import the SyntheticEvent class and use that as the type\n  - Pro: Keeps type definition in sync with the real implementation.\n  - Con: Declaration overrides implementation so I'm not sure this would\n    work.\n  - Con: Have to remember to import the type.\n- Declare a separate type called ReactSyntheticEvent that extends\n  SyntheticEvent\n  - Pro: Stays in sync with the Flow SyntheticEvent type;\n    less duplication.\n  - Pro: Differentiates this type from the Flow SyntheticEvent type;\n    less confusion.\n  - Pro: No need to import any type since it's a declaration\n  - Con: Could get out of sync with real implementation.\nI also ran into an issue where a variable was only non-null when\n'DEV' is true, similar to PR #7586.2 The work-around is to force\nit to be typed non-null and add a comment documenting the reason. At\nthis time Flow doesn't have a better way to deal with the situation.\nNext steps:\n- Specific type for the 'dispatchConfig' property of SyntheticEvent\n- More detailed types for PluginName and PluginModule\nLastly; note that I renamed some variables to follow the convention of\nreserving PascalCase for classes, enums, and Flow types.", 'Merge pull request #7644 from flarnie/flowifyEventPluginRegistry\nType EventPluginRegistry', 'Type ReactRef (#7600)\nNothing out of the ordinary on this one.', 'Restore coverage in Travis (#7628)\nWe disabled coverage in Travis because the implementation was crashing ( https://github.com/facebook/react/issues/6290 ). Since we upgraded to Jest 15, the entire coverage implementation is brand new so we should give it another try.', "Convert CallbackQueue to a class (#7647)\nIt turns out that flow cannot type this with a function constructor + prototype overrides. Turning it to a class makes flow happy and has minimal impact on the output.\nIn open source, we already use the loose version of the class transform and internally we have one that's outputting even less code if you have @preventMunge in the header.\nSee discussion in https://www.facebook.com/groups/2003630259862046/permalink/2098480820376989/", 'Type ReactCurrentOwner (#7648)\nSimpler than ReactOwner :)', 'Flow: bool -> boolean (#7650)', 'Use proper render method in static markup event listener test (#7652)', 'Link to Create React App (#7654)\n\n\nLink to Create React App\n\n\nReword\n\n', "Don't bundle ReactComponentTreeHook in production (#7653)\nFixes #7492.\nThis was a build size regression introduced in #7164.", 'Add unknown property warning for use of (#6461)', 'Use compositeType in warning invariant for refs (#7658)', 'Remove unnecessary var declaration (#7666)', 'Fix the HTML for package management (#7656)', 'I wrote it live! (#7663)', "Flow type event plugins (#7667)\n\n\nType SimpleEventPlugin and TapEventPlugin\n\n\nRenamed file from 'ReactSynteticEvent' to 'ReactSyntheticEventType'\n\nFills in the 'any' holes that were left in DispatchConfig type and the\n  type annotations in EventPluginRegistry.\nAdds polymorphic PluginModule type and related types\nUses hack to support indexable properties on 'Touch' type in\n  TapEventPlugin\n\nThe issue in TapEventPlugin is that the code is accessing one of four\npossible properties on the 'Touch' type native event using the bracket\naccessor. Classes in Flow don't support using the bracket accessor,\nunless you use a declaration and the syntax [key: Type]: Type.1 The\ndownside of using that here is that we create a global type, which we\nmay not need in other files.\nOther options:\n- Use looser typing or a '@FixMe' comment and open an issue with Flow to\n  support indexing on regular classes.\n- Rewrite TapEventPlugin to not use the bracket accessor on 'Touch'. I\n  thought the current implementation was elegant and didn't want to\n  change it. But we could do something like this:\nif (nativeEvent.pageX || nativeEvent.pageY) {\n   return axis.page === 'pageX' ? nativeEvent.pageX : nativeEvent.pageY;\n } else {\n   var clientAxis = axis.client === 'clientX' ? nativeEvent.clientX : nativeEvent.clientY;\n   return nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];\n }", "Trim and inline ReactInstanceHandles (#7676)\nReact IDs have been killed and there was one call site left in a test. I trimmed down the implementation to keep only what is actually used and inlined it inside of the test so we don't get more people using it in the future.", "Type ReactHostOperationHistoryHook (#7672)\nIn order to properly type an Operation, we need to change the call site from having two arguments: one for type and one for payload into an object that contains both. This isn't a perf regression because we were already constructing this object in the first place and doesn't change the emitted event so shouldn't affect the dev tools.\nNone of the call sites are actually flow-ified so it isn't technically used but once we will, it'll make sure that we don't send random strings and payload through those very generic methods.", 'Adding the published ReactRally videos section (#7681)\nReactRally came and went, and it was splendid.', 'Update 14-communicate-between-components.md (#7680)\nTo demonstrate multiple arguments bind(this, arg1, arg2, ...), also not to pass in for than what handleClick needed, namely props, or maybe even pass item itself, etc.\nGoing to change the kor file after review.', 'Run codemod react-codemod/transforms/class again (#7679)\nref. #7321', 'Move mouse event disabling on interactive elements to SimpleEventPlugin. Related perf tweak to click handlers. (#7642)\n\n\nCull disabled mouse events at plugin level. Remove component level filters\n\n\nDisabledInputUtils tests are now for SimpleEventPlugin\n\n\nAdd click bubbling test\n\n\nAdd isInteractive function. Use in iOS click exception rules\n\n\nInvert interactive check in local click listener. Add test coverage\n\n\nReduce number of mouse events disabable. Formatting in isIteractive()\n\n\nSwitch isInteractive tag order for alignment\n\n\nUpdate formatting of isInteractive method\n\n', 'Revert "Add unknown property warning for use of autofocus" (#7684)', 'Update 14-communicate-between-components.ko-KR.md (#7686)\nApply the same change made in #7680.', 'jest@15.1.1 (#7693)', "Fix Flow errors in Event Plugins (#7698)\nDue to a typo in PR#7667 where I put 'DispatchConfig' when the type was\n'EventTypes', there were some flow errors being thrown.\nThen PR#7642 fixed a bug in SimpleEventPlugin and added some untyped\nmethods, which threw more flow errors.\nLast, while fixing this, I fixed two eslint errors in the\nSimpleEventPlugin test.", 'Fix benchmarks (#7704)', 'Proper font-family for docs input fields (#7706) (#7708)', 'Add Russian translation for introduction of tips (#7690)', 'Update OWASP link in docs for dangerous innerHTML (#7710)', 'changed ReactChildrenMutationWarningHook to Object.freeze (#7455)\n\nonly freeze children array created by createElement\n', 'Implement createNodeMock for ReactTestRenderer (#7649)\n\n\nImplement optional mockConfig and getMockRef\n\n\ndefault mockConfig, walk render tree\n\n\nPass mockConfig to transaction\n\n\nAttach mockConfig to transaction\n\n\ntype mockConfig in ReactRef\n\n\nExpect object in native component ref test\n\n\nFix argument name for attachRefs\n\n\nAdd mockConfig support to legacy refs\n\n\nPass transaction to getPublicInstance\n\n\nImplement getMockConfig on ReactTestReconcileTransaction\n\n\nMerge defaultMockConfig and mockConfig options\n\n\nRename mockConfig to testOptions\n\n\nBreak getPublicInstnce into three lines\n\n\ncreateMockRef -> createNodeMock\n\n', 'BeforeInput is fired with a wrong text at a wrong time on IE (#7107)', 'Move priority reset to the end and search pending work in work tree\nThe priority level gets reset at the wrong time because I rely\non mutating it at the wrong point. This moves it to the end of\ncompleted work as a second pass over the children to see what\nthe highest priority is. This is inefficient for large sets but\nwe can try to find a smarter way to do this later. E.g. passing\nit down the stack.\nThis bug fix revealed another bug that I had flagged before that\nwe\'re finding work to do in the "current" tree instead of the\nworking tree. For trees that were paused, e.g. childInProgress\ntrees, this won\'t work since don\'t have a current tree to search.\nTherefore I fixed findNextUnitOfWorkAtPriority to use\nworkInProgress instead of current.', "Drop Separate findPendingWork Phase\nThe findPendingWork phase is the same as just walking the tree the\nnormal way effectively. It only makes things more complex to\nthink about. We might possibly be able to write a few special\nbranches to optimize it but for now it doesn't seem necessary.", 'Drop childInProgress\nI will try a slightly different but similar strategy.', 'Explain why ReactFiber is a POJO instead of constructor', "Add shouldComponentUpdate to functional components\nI'll probably end up reverting this before the bigger release\nsince it is not part of the official public API. However,\nit is useful to be able to compare the performance between\nfunctional components and classes.", 'Progressed work', 'Pass current instead of picking it up from alternate\nThis colocates the reliance on alternate with the scheduler, so\nthat we have the option to not use this, or more easily break\napart the initial mount phase into an optimized path.', 'Restructure clone child fiber a bit to make it clearer', 'Merge pull request #7636 from sebmarkbage/fiberrefactor\n[Fiber] Refactor Pending Work Phase and Progressed Work', 'setState for Fiber\nUpdates are scheduled by setting a work priority on the fiber and bubbling it to\nthe root. Because the instance does not know which tree is current at any given\ntime, the update is scheduled on both fiber alternates.\nNeed to add more unit tests to cover edge cases.', 'Use queue for pendingState\nChanges the type of pendingState to be a linked list of partial\nstate objects.', 'Updater form of setState\nAdd support for setState((state, props) => newState).\nRename pendingState to stateQueue.', 'Clean up\nRather than bubble up both trees, bubble up once and assign to the\nalternate at each level.\nExtract logic for adding to the queue to the StateQueue module.', 'Fix stateQueue typing', 'Clean up\nUse a union type for the head of StateQueue.', 'Use ReactInstanceMap\nMove ReactInstanceMap to src/renderers/shared/shared to indicate that\nthis logic is shared across implementations.', "Ensure that setState update function's context is undefined", 'Rename stateQueue -> updateQueue\nAlso cleans up some types.', 'Update callbacks\nCallbacks are stored on the same queue as updates. They care called\nduring the commit phase, after the updates have been flushed.\nBecause the update queue is cleared during the completion phase (before\ncommit), a new field has been added to fiber called callbackList. The\nqueue is transferred from updateQueue to callbackList during completion.\nDuring commit, the list is reset.\nNeed a test to confirm that callbacks are not lost if an update is\npreempted.', 'replaceState\nAdds a field to UpdateQueue that indicates whether an update should\nreplace the previous state completely.', 'forceUpdate\nAdds a field to the update queue that causes shouldComponentUpdate to\nbe skipped.', "Don't mutate current tree before work is committed.\nWe should be able to abort an update without any side-effects to the\ncurrent tree. This fixes a few cases where that was broken.\nThe callback list should only ever be set on the workInProgress.\nThere's no reason to add it to the current tree because they're not\nneeded after they are called during the commit phase.\nAlso found a bug where the memoizedProps were set to null in the\ncase of an update, because the pendingProps were null. Fixed by\ntransfering the props from the instance, like we were already doing\nwith state.\nAdded a test to ensure that setState can be called inside a\ncallback.", "Check for truthiness of alternate\nThis is unfortunate since we agreed on using the null | Fiber\nconvention instead of ?Fiber but haven't upgraded yet and this\nis the pattern I've been using everywhere else so far.", 'Log the updateQueue in dumpTree\nThis also buffers all rows into a single console.log call.\nThis is because jest nows adds the line number of each console.log\ncall which becomes quite noisy for these trees.', 'Merge pull request #7344 from acdlite/fibersetstate\n[Fiber] setState', '[Fiber] Animation priority work (#7466)\n\nHigh priority work\n\nAdds the ability to schedule and perform high priority work. In the\nnoop renderer, this is exposed using a method performHighPriWork(fn)\nwhere the function is executed and all updates in that scope are given\nhigh priority.\nTo do this, the scheduler keeps track of a default priority level.\nA new function performWithPriority(priority, fn) changes the default\npriority before calling the function, then resets it afterwards.\n\nRename overloaded priority terms\n\n"High" and "low" priority are overloaded terms. There are priority\nlevels called HighPriority and LowPriority. Meanwhile, there are\nfunctions called {perform,schedule}HighPriWork, which corresponds\nto requestAnimationFrame, and {perform,schedule}LowPriWork, which\ncorresponds to requestIdleCallback. But in fact, work that has\nHighPriority is meant to be scheduled with requestIdleCallback.\nThis is super confusing.\nTo address this, {perform,schedule}HighPriWork has been renamed\nto {perform,schedule}AnimationWork, and\n{perform,schedule}LowPriWork has been renamed to\n{perform,schedule}DeferredWork. HighPriority and LowPriority\nremain the same.\n\nPriority levels merge fix\n', 'Unify branches in cloneFiber (#7723)', 'remove plain object warning (#7724)', 'Clean up ReactTestRenderer (#7716)\n\n\ncreate ReactTestTextComponent fil\n\n\ncreate ReactTestEmptyComponent\n\n\nUse class for ReactTestRenderer\n\n\nAdd flow to ReactTestRenderer\n\n', 'Fix Russian translation of  introduction to be more technical (#7727)', 'Russian translation for inline styles of tips (#7717)', 'Russian translation if-else in JSX of tips (#7726)', "Update ignores in flowconfig (#7722)\nThis ensures we ignore relative to our project root and won't be tripped up by issues where checkouts in other places result in Flow passing when it shouldn't (eg on Travis CI where the checkout path is /home/travis/build/facebook/react)", 'Resolve flow errors with ReactTestRenderer (#7736)\n\n\nResolve flow errors with ReactTestRenderer\n\n\nAdd whitespace between types and methods\n\n\nextend ReactMultiChild instead of using Object.assign\n\n\nUse ReactElement type from ReactElementType\n\n\nMake ReactMultiChild a class\n\n', "Simplify event phases. Use explicitly 'captured' and 'bubbled'. (#7741)", 'Revert ReactMultiChild to plain object (#7757)\nSince ReactART and RN extend ReactMultiChild, changing it to a class is\na breaking change. See\nhttps://github.com/facebook/react/pull/7736/files#r79073698', 'Russian translation for self-closing-tag of tips (#7729)\n\n\nRussian translation for self-closing-tag of tips\n\n\nFix next link for inline styles tip\n\n\nUpdate 04-self-closing-tag.ru-RU.md\n\n', 'Russian translation for max. numbers of jsx root nodes (#7738)\n\n\nRussian translation for max. numbers of jsx root nodes\n\n\nUpdate 05-maximum-number-of-jsx-root-nodes.ru-RU.md\n\n', 'Russian translation for style props value px of tips (#7742)\n\n\nRussian translation for style props value px of tips\n\n\nUpdate 06-style-props-value-px.ru-RU.md\n\n', 'Fix links and ids for tips in docs (#7766)', 'Update Changelog & Readme for 15.3.2\n(cherry picked from commit 8c7bbbfc210a4251411be9511ceb88e7932ac5f1)\nFix formatting of 15.3.2 changelog\n(cherry picked from commit c2388bf09beb76f77bc836df871b25ca167b8617)', 'Update website for 15.3.2\n(cherry picked from commit b52ea6bd8f403b9247584373761de509fa15f118)', '[docs] Update React Rally 2016 videos link (#7771)', 'Adjust code to handle more availability of function.name (#7670)', 'Update broken JSFiddle in Why React blog post (#7783)\nFixes #7782', 'Clarify manual PropType calls warning (#7777)', 'Change [API参考] from "top-level-api.html" to "top-level-api-zh-CN.html" (#7790)', 'Change [入门教程] from "tutorial.html" to "tutorial-zh-CN.html" (#7789)', 'Introduce facts-tracker (#7747)\n\nIntroduce facts-tracker\n\nWe want to be able to track various things like number of files that are flowified, number of tests passing with Fiber...\nThis introduces a tool that lets you do that. The API is very simple, you execute the script with a list of tuples [key value] and it\'s going to create a facts branch and put a txt file for each fact and values over time.\nnode scripts/facts-tracker/index.js \\\n  "flow-files" "$COUNT_WITH_FLOW/$COUNT_ALL_FILES"\nTest Plan:\nThis is tricky to test because Travis only exposes the private variables (github token) when it processes a committed file and not on branches. The reason is that otherwise anyone could send a pull requests that does echo $GITHUB_TOKEN and steal your token.\nGiven this constraint, I did all the work using two of my repos:\n- https://github.com/vjeux/facts-tracker\n- https://github.com/vjeux/facts-tracker-test\nand am sending this pull request that should work as is /fingers crossed/, but we won\'t be able to test it out until it is committed.\nNote that once this lands, I\'m going to kill those two repos.\n\n\nUpdate with all the suggested changes\n\n\nBranch on a flow type in travis.yml\n\n\nUse $GITHUB_TOKEN\n\n\nproperly escape it\n\n', 'Update 07-forms.ko-KR.md (#7809)\nfix spelling', 'Update travis.yml to use $GITHUB_USER_NAME and $GITHUB_USER_EMAIL (#7811)\nSee https://github.com/facebook/react/pull/7747#issuecomment-249677880 for discussions', 'Track fiber tests (#7812)\nUse the newly added tracking system to track the number of fiber tests that are passing/failing.\nI first tried to modify the grunt lint rule for it and send the output in stdout but unfortunately grunt displays the rule + done messages there. I had like 30 lines of js already and I figured I could just write 3 lines of bash and it would work the same. Let me know if you want me to use another approach for it.\nTest Plan:\nRun the commands that have been introduced in this commit but the facts-tracker one\nRun echo $FIBER_TESTS and make sure it prints 666/1434', 'Move How to Contribute to documentation and update it (#7817)\n\n\nMove How to Contribute to documentation and update it\n\n\nConsistent formatting\n\n', 'Tweak the contributing wording in README', "Fix total count in flow tracker (#7813)\nWhen you put the output of a bash command in a variable, it replaces the \\n with a space. Using ls instead of echo fixes it\nTest Plan:\nRun\nALL_FILES=`find src -name '*.js' | grep -v umd/ | grep -v __tests__ | grep -v __mocks__`\nCOUNT_ALL_FILES=`ls $ALL_FILES | wc -l`\necho $COUNT_ALL_FILES\nMake sure that it outputs 221", 'React dom invalid aria hook (#7744)\n\n\nAdd a hook that throws a runtime warning for invalid WAI ARIA attributes and values.\n\n\nResolved linting errors.\n\n\nAdded a test case for many props.\n\n\nAdded a test case for ARIA attribute proper casing.\n\n\nAdded a warning for uppercased attributes to ReactDOMInvalidARIAHook\n\n', "Reduce confusion in testing documentation. (#7818)\n\nReduce confusion in testing documentation.\n\nJust wanted to add some clarity to this page and link to the react tutorial on Jest's website to give people more information. Also changed enzyme's definition from library to utility to help reduce the confusion. Hope this makes sense to everybody :)\nSee https://twitter.com/damusnet/status/780752042675597312\ncc @lelandrichardson\n\nUpdate 10.4-test-utils.md\n", 'Our first 50,000 stars blogpost', 'typos fix (#7822)', 'Note that getInitialState is not used in ES6 classes in docs (#7748)', 'Add Codebase Overview (#7828)\n\n\nAdd Codebase Overview\n\n\nUpdate codebase-overview.md\n\n\nUpdate codebase-overview.md\n\n', 'Fix mistakes in the codebase overview (#7834)', 'Update babel link (#7837)', 'Fixes #7824 (#7832)', 'Add unknown property warning for use of autofocus (#7694)', 'Docs to ES6: Displaying data example.', 'Reusable Components ES6 Update', 'Add-Ons: Animation updated with ES6 examples', 'Keyed Fragment of AddOns ported to ES6', 'Update remarkable to 1.7.1 (#7851)\nFixes a subtle XSS hole.', 'Fix UMD bundles, making safe to use as required modules (#7840)', 'Fix minor typo in closing H1 tag (#7855)', 'Make sure .createElement({}) warns (#7857)\nThis is common when forgetting to export anything from a file.', "simplify npm link script a little bit (#7862)\nWe don't need to remove the folders before linking the modules", 'Update 04-multiple-components.md (#7861)\nadded missing map bracket', 'Refactor ShallowRenderer (#7739)\n\n\nSeparate ReactShallowRenderer from TestUtils\n\n\nUse ES classes to ReactShallowRenderer\n\n', 'Use ES6 in Language Tooling doc', 'Fix confusing variable names (#7863)', 'Fix initial state example for Recat.createClass (#7867)\nIn the example there was a typo with setting initial state using getInitialState method', 'Update the homepage with ES6 (#7868)\n\n\nUpdate the homepage with ES6\n\n\nAvoid array spread and stale state\n\n', 'Update comment to refer to correct method name (#7873)', 'Update README.md to use jsx for syntax highlighting (#7884)\nGithub now supports jsx syntax highlighting in their markdown documents. So I have updated the main README.md to use jsx instead of js.', 'removing parent/child references in props section of tutorial (#7887)', 'Fix npm package builds (#7888)\n\n\nEnsure lib/ is packaged for react-test-renderer\n\n\nRun npm pack from right working directory\n\n\nWe were running this on the original packages not the compiled ones, resulting in missing files', 'use npm-run-script in PULL_REQUEST_TEMPLATE (#7913)', 'Add Implementation Notes and amend Codebase Overview (#7830)\n\n\nAdd more to Codebase Overview\n\n\nWIP\n\n\nStart a reconciler overview\n\n\nAdd a few more sections\n\n\ntodo\n\n\nWIP\n\n\nFinish it\n\n\nWhitespace\n\n\nMinor tweaks\n\n\nMinor tweaks\n\n', 'Update codebase-overview.md (#7934)\nFix typo', 'Typo fixes in codebase-overview.md (#7938)', 'Fix typo in more-about-refs.md (#7933)', 'Inject the previous batching strategy when rendering to string (#7930)\nBefore this change calling renderToStringImpl would inject\nReactDefaultBatchingStrategy after completion, even if a custom batching\nstrategy was injected before. This makes renderToStringImpl keep a reference to\nthe batching strategy before it runs and reinject it afterwards.', 'Declare type var higher up in mountComponent() in ReactDOMComponent for reuse (#7944)', 'Add warning for shady-dom use with rendered react components in DEV (#7911)\n\n\nAdd warning for shady-dom use with rendered react components in DEV\n\n\nMake shady dom warning emit only once regardless of number of components\n\n\nUse didWarnShadyDom as warning argument & add missing shadyRoot check to ReactDOMComponent\n\n\nAdd check for shady dom test to run only when createElement flag is true\n\n\nPass false to warning in shadyDom warning check\n\n\nAdd consistent DOM phrasing for shady DOM warnings\n\n\nReference component name in shady DOM warning if it exists\n\n\nAdd check for if owner exists in shady dom warning\n\n\nAdd test for named component using createClass for shady DOM warning\n\n\nClean up named component test for shady DOM warning\n\n\nFix trailing comma linting issue on named shady DOM warning test\n\n', 'Fix typo (#7909)', 'Check in yarn.lock file (#7957)\nBecause we have to keep up with the latest hotness\nhttps://yarnpkg.com/', 'Fix typo (#7953)', 'Fix uncontrolled input decimal point "chopping" on number inputs, and validation warnings on email inputs (#7750)\n\n\nOnly assign defaultValue if it has changed.\n\n\nImprove comment about reason for defaultValue conditional assignment\n\n', 'Fix a typo in the doc (#7969)', 'build: strip @providesModule from output modules (#7968)\nFB tools such as Flow and Jest are having issues finding duplicate modules\nnow that React internal modules are duplicated across packages.', 'Add link to gulpjs', 'Add 15.4.0 RC3 to Downloads', "Fix whitespace in headers (#7980)\nThe script that strips providesModule is very sensitive.\nTest plan:\nSearched for providesModule in build. No more.\nreactComponentExpect used to have problems too but doesn't seem\nto anymore. Don't know why.", 'Add Windows-specific instructions', 'Separate Ruby and Python instructions', "Support passthrough updates for error boundaries (#7949)\n\n\nInitial pass at the easy case of updates (updates that start at the root).\n\n\nDon't expect an extra componentWillUnmount call\n\n\nIt was fixed in #6613.\n\n\nRemove duplicate expectations from the test\n\n\nFix style issues\n\n\nMake naming consistent throughout the tests\n\n\nreceiveComponent() does not accept safely argument\n\n\nAssert that lifecycle and refs fire for error message\n\n\nAdd more tests for mounting\n\n\nDo not call componentWillMount twice on error boundary\n\n\nDocument more of existing behavior in tests\n\n\nDo not call componentWillUnmount() when aborting mounting\n\n\nPreviously, we would call componentWillUnmount() safely on the tree whenever we abort mounting it. However this is likely risky because the tree was never mounted in the first place.\nPeople shouldn't hold resources in componentWillMount() so it's safe to say that we can skip componentWillUnmount() if componentDidMount() was never called.\nHere, we introduce a new flag. If we abort during mounting, we will not call componentWillUnmount(). However if we abort during an update, it is safe to call componentWillUnmount() because the previous tree has been mounted by now.\n\n\nConsistently display error messages in tests\n\n\nAdd more logging to tests and remove redundant one\n\n\nRefactor tests\n\n\nSplit complicated tests into smaller ones\n\n\nAssert clean unmounting\n\n\nAdd assertions about update hooks\n\n\nAdd more tests to document existing behavior and remove irrelevant details\n\n\nVerify we can recover from error state\n\n\nFix lint\n\n\nError in boundary’s componentWillMount should propagate up\n\n\nThis test is currently failing.\n\nMove calling componentWillMount() into mountComponent()\n\nThis removes the unnecessary non-recursive skipLifecycle check.\nIt fixes the previously failing test that verifies that if a boundary throws in its own componentWillMount(), the error will propagate.\n\nRemove extra whitespace\n", "Ignore root docs folder in Flow config\nOtherwise Flow finds obscure files in docs/vendor.\nSeems like you'd only get them if you have a local checkout of docs Ruby dependencies.\nThis explains why Travis didn't fail.", 'Add @preventMunge directives to classes (#7994)', "Add Fragment fiber type\nWe currently treat nested arrays as a unique namespace from top\nlevel children. So that these won't share key namespaces. This\nadds a new fiber type that will represent the position of a\nfragment.\nThis is only used for nested arrays. Even if you return an array\nfrom a composite component, we don't need this since they share\nnamespace with a single top level component.\nThis still doesn't implement the complete reconciliation\nalgorthim in child fiber. That's coming later.", "Add Text node types\nThese nodes rendering into Text nodes in the DOM.\nThere is a special case when a string is a direct child of a host\nnode. In that case, we won't reconcile it as a child fiber. In\nterms of fibers, it is terminal. However, the host config special\ncases it.\nIt is kind of unfortunate that we have to special case this kind\nof child in the HostConfig. It would be nice to unify this with\nother types of child instances. Text nodes have some weird special\ncases, but those special cases tend to vary by environment.\nThey're not the same special cases so not sure how valuable it is\nto have a special protocol and special types for it.", "Silence Fiber warning when the feature flag is on\nWhen the feature flag is on, we should silence the warning since\nwe're explicitly testing it. This is needed when running unit\ntests with the flag on.", "Fix MultiChild tests so they work with Fiber\nDropped the unnecessary use of findDOMNode.\nDropped unnecessary arrow functions.\nMath.random() -> id counter, since this used to be\nnon-deterministic which is not ideal for unit tests.\ngetOriginalKeys() used to rely on implementation details\nto scan that the internal data structure maintained its\nstructure, however, since that is unobservable we don't\nneed to test the internal data structure itself. We're\nalready testing refs and dom structure which is the only\nobservable effect of the reorder.", "Add comment about bug in yields\nThis needs to be fixed somehow. The reconciler could know if you\nare mounting this continuation into the same spot as before and\nthen clone it. However, if the continuation moves, this info is\nlost. We'd try to unmount it in one place and mount the same fiber\nin another place.", "Enable text updates in ReactNoop\nWe'll enable updating of text nodes. To be able to test that we\nneed the text nodes to be mutable. They're currently just strings\nin the Noop renderer so this makes them an object instead.\nThat exposed a bug in ReactFiberCommitWork for text nodes.", 'Fiber child reconciliation\nThis implements the first step to proper child reconciliation.\nIt doesn\'t yet track side-effects like insert/move/delete but has\nthe main reconciliation algorithm in place.\nThe goal of this algorithm is to branch early and avoid rechecking those conditions. That leads to some duplications of code.\nThere are three major branches:\n\nReconciling a single child per type.\nReconciling all children that are in the same slot as before from the beginning.\nAdding remaining children to a temporary Map and reconciling them by scanning the map.\n\nEven when we use the Map strategy we have to scan the linked list to line up "same slot" positions because React, unlike Inferno, can have implicit keys interleaved with explicit keys.', 'Add index field to each fiber\nWe use this to track the index slot that this Fiber had at\nreconciliation time. We will use this for two purposes:\n1) We use it to quickly determine if a move is needed.\n2) We also use it to model a sparce linked list, since we can have\nnull/false/undefined in our child set and these take up a slot for\nthe implicit key.', "Don't track side-effects unless needed\nWe don't need to track side-effects for a parent that has never\nbeen mounted before. It will simply inject all its children when\nit completes.", "Fast path for create child\nWhen we don't have any previous fibers we can short cut this path\nknowing that we will never have any previous child to compare to.\nThis also ensures that we don't create an empty Map in this case.", "Deletion tracking\nWhen we reconcile children we need to track the deletions that\nhappen so that we can perf side-effects later as a result. The\ndata structure is a linked list where the next pointer uses the\nnextEffect pointer.\nHowever, we need to store this side-effect list for reuse if we\nend up reusing the progressedChild set. That's why I add a\nseparate first/last pointer into this list so that we can keep it\nfor later.", 'Tag the fiber with the kind of side-effect that was applied to it\nThis allow us to track what kind of side-effect this was even\nthough we only have a single linked list for all side-effects.', 'Append deletions to the effect list\nFirst clear any progressed deletions for any case where we start\nover with the "current" set of children.\nOnce we\'ve performed a new reconciliation we need to add the\ndeletions to the side-effect list (which we know is empty because\nwe just emptied it).\nFor other effects, instead of just adding a fiber to an effect\nlist we need to mark it with an update. Then after completion\nwe add it to the the effect list if it had any effects at all.\nThis means that we lose the opportunity to control if a fiber\ngets added before or after its children but that was already\nflawed since we want certain side-effects to happen before others\non a global level.\nInstead, we\'ll do multiple passes through the effect list.', "Move child updates to use the reconciled effects\nInstead of passing the full list of children every time to\nupdate the host environment, we'll only do inserts/deletes.\nWe loop over all the placement effects first and then later\nwe do the rest.", "Remove beginWork shortcut\nThis shortcut had a bug associated with it. If beginWork on this\nchild returns null, then we don't call completeWork on that fiber.\nSince removing this short cut adds another time check, we have to\nadd a single unit of time in tests to account for the top level\ncall now taking one more unit.\nThis was also the only recursive call in all of fiber so it's nice\nto get rid of it to guarantee that a flat stack is possible.", "Reset effect list when we recompute children\nWe only use the effect list when we reuse our progressed children.\nOtherwise it needs to reset to null.\nIn all other branches, other than bailoutOnLowPriority, we\nrevisit the children which recreates this list.\nWe should also not add fibers to their own effect list since it\nbecomes difficult to perform work on self without touching the\nchildren too. Nothing else does that neither.\nSince that means that the root isn't added to an effect list we\nneed to special case the root.", "Always override priority level when visiting children\nIt is not possible for a child to have a higher priority level\nthan we're reconciling at, unless we intentionally want to\ndown-prioritize it.", "Call componentWillUnmount during deletion phase\nWhile we're deleting nodes, we need to call the unmount\nlife-cycle. However, there is a special case that we don't want\nto keep deleting every host node along the way since deleting the\ntop node is enough.", "Fire componentDidMount/componentDidUpdate life-cycles\nThese happen in the commit phase before the setState callback.\nUnfortunately, we've lost the previous state at this point since\nwe've already mutated the instance. This needs to be fixed\nsomehow.", 'Resolve ref callbacks\nDuring the deletion phase we call detachRefs on any deleted refs.\nDuring the insertion/update phase we call attachRef on class\nand host components.\nUnfortunately, when a ref switches, we are supposed to call all\nthe unmounts before doing any mounts. This means that we have to\nexpact the deletion phase to also include updates in case they\nneed to detach their ref.', 'Invoke all null ref calls before any new ref calls\nThis reorganizes the two commit passes so that all host\nenvironment mutations happens before any life-cycles. That means\nthat the tree is guaranteed to be in a consistent state at that\npoint so that you can read layout etc.\nThis also lets us to detach all refs in the same pass so that\nwhen they get invoked with new instances, that happens after it\nhas been reset.', 'Fix resuming bug\nIf we abort work but have some completed, we can bail out if\nthe shouldComponentUpdate returns true. However, then we have\na tree that is low priority. When we bailout we currently use\nthe "current" tree in this case. I don\'t think this is right.\nI\'m not sure why I did that.\nSimilarly, when we complete we use the "current" props if we\ndidn\'t have pending props to do. However, we should be using\nthe memoized props of that tree if it is a pending work tree.\nAdded a unit test that covers these two cases.', "Break out some Class Component logic into separate module\nRefactors the class logic a bit.\nI moved scheduleUpdate out into the scheduler since that's where\nthe scheduling normally happens. I also moved it so that we can\nrely on hoisting to resolve the cycle statically.\nI moved the updater to a new class component file. I suspect we\nwill need a bit of space in here since the class initialization\ncode is quite complex.\nThe class component dependency is currently fixed in BeginWork\nso we can't move complete or commit phase stuff to it. If we need\nto, we have to initialize it in the scheduler and pass it to the\nother phases.", 'No duck typing on the root\nThe root is always a host container.', "Use memoizedState in componentDidUpdate\nWe forgot to clone this value so it didn't work before.\nThis is covered by existing tests in ReactDOMProduction.", 'Fix grammatical error', 'Merge pull request #8000 from piperchester/patch-1\nFix grammatical error', 'Fix Haste header (#8005)', 'Update Flow and fix issues (#8006)', '[Fiber] Add a unit test for ReactTopLevelText (#8001)', '[Fiber] Some setState related issues (#8010)\n\nUse the memoized props/state from the workInProgress\n\nWe don\'t want to use the "current" props/state because if we have\nstarted work, then pause and continue then we\'ll have the newer\nprops/state on it already. If it is not a resume, it should be the\nsame as current.\n\nDeprioritize setState within a deprioritized tree\n\nCurrently we flag the path to a setState as a higher priority\nthan "offscreen". When we reconcile down this tree we bail out\nif it is a hidden node. However, in the case that node is already\ncompleted we don\'t hit that bail out path. We end up doing the\nwork immediately which ends up committing that part of the tree\nat a higher priority.\nThis ensures that we don\'t let a deprioritized subtree get\nreconciled at a higher priority.\n\nBump idx in unit test\n\nThis proves that this number is actually deprioritized.', 'Fix captured/bubbled in ReactNativeTreeTraversal (#8019)\nFollow-up to #7741. Added a test for RN event bubbling that fails before the fix.', "Fix lint with yarn (#7997)\nI couldn't figure out how to do this yarn alone so I ended up\njust manually hacking the yarn to force a downgrade of babylon\nto 6.8.0 since otherwise it gets resolved to 6.12.0 which is\nbroken.", '[Fiber] Add unit tests for ReactDOMFiber (#8016)', 'Add more life-cycles to Fiber\nThis refactors the initialization process so that we can share\nit with the "module pattern" initialization.\nThere are a few new interesting scenarios unlocked by this.\nE.g. constructor -> componentWillMount -> shouldComponentUpdate\n-> componentDidMount when a render is aborted and resumed.\nIf shouldComponentUpdate returns true then we create a new\ninstance instead of trying componentWillMount again or\ncomponentWillReceiveProps without being mounted.\nAnother strange thing is that the "previous props and state"\nduring componentWillReceiveProps, shouldComponentUpdate and\ncomponentWillUpdate are all the previous render attempt. However,\ncomponentDidMount\'s previous is the props/state at the previous\ncommit. That is because the first three can execute multiple\ntimes before a didMount.', 'Don\'t schedule NoWork as the next work\nWe currently only filter out "NoWork" in the beginning of this\nfunction. If the NoWork root is after the one with work it will\nshow up in the second loop. There\'s probably a more efficient\nway of doing this but this works for now.\nThis showed up in this PR because a new unit test gets unblocked\nwhich ends up with this case.', "Fallback to current props if memoizedProps is null\nIf work has progressed on a state update that gets resumed\nbecause of another state up, then we won't have an new\npendingProps, and we also won't have any memoizedProps because\nit got aborted before completing. In that case, we can just\nfallback to the current props.\nI think that they can't have diverged because the only way they\ndiverge is if there is new props.\nThis lets us bail out on state only updates in more cases which\nthe unit tests reflect.", 'Add unit tests for aborted life-cycles\nThis tests the life-cycles when work gets aborted.', 'Merge pull request #8015 from sebmarkbage/fiberclassinit\n[Fiber] Add more life-cycles', "Quick fix to the return top level problem\nThis doesn't deal with the fact that work is usually deferred\nso this will return null for first render (except in sync tests).\nIt also doesn't deal with top levels being fragments etc.\nIt doesn't deal with the host instance type being a wrapper\naround the public instance. This needs to be unified with refs\nand findDOMNode better.\nHowever, this does expose that we reactComponentExpect and\nReactTestUtils doesn't work very well with Fiber.", 'Merge pull request #8029 from sebmarkbage/fiberreturnfromtoprender\nQuick fix to the return top level problem', 'New Documentation', 'Minor doc tweaks', 'Fix redirects', 'Update react-without-jsx.md\nFacebook codestyle', 'Update components-and-props.md\nfb indent style', "Update website on Travis when only new files are added (#8037)\nThis build didn't commit the new files because no existing files were changed:\nhttps://travis-ci.org/facebook/react/jobs/169622664\nThis should work better.", "Wrong library name reference in tutorial.MD (#8038)\n\nUpdate tutorial.md\n\nSeems like you are talking about immutable.js and not immutability.js which doesn't exist :)\n\nCapitalize Immutable.js\n", 'Convert the Number component to ListItem (#8039)\n\n\nConvert the Number component to ListItem\n\n\nAdd updated example CodePen\n\n\nAlso fixes typos.', 'Fix anchor link for displayName (#8040)', "Fix erroneous '}' in JSX examples (#8043)", 'Fix typo in new tutorial code (#8045)', 'Fix typo in tutorial.md (#8047)\nchangges -> changes', 'Fix: updated with new docs links (#8049)', 'Replace vars with let and const (#8051)', 'Fix relative link in Hello World (#8041)\n\nFix relative link in Hello World\n\nThis links https://facebook.github.io/docs/installation.html which redirects to https://code.facebook.com/\n\n\nUpdate hello-world.md\n\n\nFix link\n\n', '"take part in" is the correct saying (#8013)', 'correct order of params in documentation (#7989)', 'Injected Host Component classes are not being considered by the reconciler (#8050)\n\n\nConsider Host Component classes when creating a new internal instance\n\n\nRemove unused tagToComponentClass & injectComponentClasses from ReactHostComponent\n\n', 'Fix illogical code in tutorial.md (#8048)\nThe tutorial wants to throw a \'warning\' and explains about \'key\' of React\'s list, but it throws nothing since there is sensible key.\n"key={move}" should be removed, and added after explaining about key.', 'Fix for typos (#8046)', "Accept className in ReactDOMFiber\nThis isn't a complete solution to all attributes. It's just that\nwe run a lot of unrelated unit tests by testing className so\nwe need it for the tests.", 'Docs replace reference to \'getInitialState\' with \'state\' instance property in "Thinking in React" (#8059)', 'Fix typo (#8056)', 'Update handling-events.md (#8057)', 'Update tutorial.md, Taking Turns (#8058)', 'Link to lifecycle methods from Context doc (#8062)', 'Remove references to createClass in createElement docs (#8064)', 'Merge pull request #8055 from sebmarkbage/fiberclassname\nAccept className in ReactDOMFiber', 'Docs : Fix createClass reference (#8073)\nCurrently react.createClass is wrongly referenced to #react.createclass. Changed it to #createclass!', 'Fix typos (#8067)', '[Fiber] Add types for ReactFiber and ReactChildFiber (#8072)\n\n\nAdd Types for ReactFiber\n\n\nAdd Types for ReactChildFiber\n\n', 'Add more highlighting to docs (#8076)\n\n\nTweak JSX in Depth\n\n\nAdd highlighting to Refs and the DOM\n\n\nMore tweaks\n\n', 'Strip PropTypes checkers in production build (#8066)\n\n\nStrip PropTypes in production build\n\n\nRevert "Warn if PropType function is called manually (#7132)"\n\n\nThis reverts commit e75e8dcbebca63cff2b478d8f7ff58e0a2926465.', "Remove deprecated function from tests (#6536)\nThis has been deprecated since 2013 so it's about time to remove it.", 'Remove copypasta comment\nCaught by @gaearon', 'Merge pull request #8078 from sebmarkbage/rmcomment\nRemove copypasta comment', "removed duplicated 'the' (#8081)", 'Add npm v4.0.0 support (#8082)', 'Respect state set in componentWillMount() on resuming (#8079)\nWhen resuming creating new instance after resuming work, we should set the state on the newly creating instance rather than the old one.', "Get rid of ReactInjection\nWe don't use this indirection. It'll easier to break these apart\nwithout it.", 'Split DefaultInjection into two files\nThis splits DefaultInjection into one with all the properties\nand event configuration and a separate one for the things that\nare relevant to he stack reconciler.\nThat way we can reuse the property and event system for Fiber\nwithout pulling in all the other stuff.', "DefaultEventPluginOrder -> DOMEventPluginOrder\nThis is not a generic plugin order. It's DOM specific. Unlike\nsay DefaultBatchingStrategy which is used by Native too.", 'Add Fiber Debugger (#8033)\n\nBuild react-noop as a package\n\nThis lets us consume it from the debugger.\n\n\nAdd instrumentation to Fiber\n\n\nCheck in Fiber Debugger\n\n', "Delete child when the key lines up but the type doesn't (#8085)\nWhen keys line up in the beginning but the type doesn't\nwe don't currently delete the child. We need to track that this\nfiber is a not a reuse and if so mark the old one for deletion.", 'Reorganize files\nThis is just moving a bunch of DOM files.\nIt moves things into dom/stack and dom/fiber respectively. The\ndom/stack folder remains split into client/server.\nMainly the shared folder is now my best guess for files that\nwe can reuse in fiber. Everything else will get forked or\nreimplemented.\nAlso moved the event system out of renderers/shared/stack and\ninto renderers/shared/shared.', 'Merge pull request #8086 from sebmarkbage/fiberdom\n[Fiber] Reorganize files for DOM renderer to make overlap between fiber/stack clearer', "Implement findDOMNode for Fiber\nThis is the naive implementation that doesn't cover the case where there are\ntwo diverging fibers, or if this tree is unmounted.", "Implement isMounted for Fiber\nThis is the naive implementation that doesn't cover the case\nwhere it has completed but not yet committed. It also doesn't\ndeal with unmounts since they currently don't clean up the item\nin the ReactInstanceMap.", 'Clear effectTag and return pointers after side-effects\nThis will let us use these pointers to reason about a tree.\nWhether if it is "current" or "work in progress".', 'Handle unmounted and not-yet-inserted subtrees in isMounted\nThere are two cases where we have a Fiber that is not actually\nmounted. Either it is part of a tree that has not yet been\ninserted or it is part of a tree that was unmounted.\nFor the insertion case, we can check the parents to see if there\nis any insertion effect pending along the parent path.\nFor deletions, we can now check if any of the return pointers\nis null without actually being the root.', 'findDOMNode when a component is not yet mounted or unmounted\nFirst we need to check if a component subtree is mounted at all.\nIf it is, we need to search down the fiber for the first host\nnode. However, we might be searching the "work in progress"\ninstead of current.\nOne realization is that it doesn\'t matter if we search work in\nprogress or current if they\'re the same. They will generally be\nthe same unless there is an insertion pending or something in\nthe alternate tree was already deleted. So if we find one of\nthose cases, we switch to look in the alternate tree instead.', "Add tests for findDOMNode on fragment and text\nThese are new features that aren't covered by existing tests.\nIt is now possible to use findDOMNode to find a text node.\nWhen a component returns a fragment, it will search to find the\nfirst host component just like element.querySelector does.", 'Merge React[DOM/Native]TreeTraversal\nThese two implementations are identical. Except for some\ninvariants for some reason.\nSince this relies on an implementation detail of the internal\ncomponent tree rather than an implementation detail of the\nrenderer, we might as well merge them and remove the injection.', 'Merge pull request #8096 from sebmarkbage/fiberdom\nMerge React[DOM/Native]TreeTraversal', "Don't call componentDidUpdate if shouldComponentUpdate returns false\nThis fix relies on the props and state objects being different\nto know if we can avoid a componentDidUpdate. This is not a great\nsolution because we actually want to use the new props/state\nobject even if sCU returns false. That's the current semantics\nand it can actually be important because new rerenders that are\nable to reuse props objects are more likely to have the new props\nobject so we won't be able to quickly bail out next time.\nI don't have a better idea atm though.", "Merge pull request #8028 from sebmarkbage/nodidupdateforbailout\n[Fiber] Don't call componentDidUpdate if shouldComponentUpdate returns false", 'Merge pull request #8083 from sebmarkbage/fiberfinddomnode\n[Fiber] Implement findDOMNode and isMounted', 'Fix an argument name of TestUtils.renderIntoDocument (#8104)', 'Update lists-and-keys.md (#8090)\nThere is mismatching variable name both definition and usage.\nIn line 156, an argument name called item is change to match the usage in line 158.', "[Fiber] String refs and owner tracking (#8099)\n\n\nImplement string refs using callback closures\n\n\nMerge Fiber type to avoid Flow intersection bugs\n\n\nStill one remaining type error that I'm not sure how to fix\n\n\nFix Flow issue with an unsafe cast\n\n\nFix missing semicolon\n\n\nAdd a type import I missed earlier\n\n", "Use const instead of var (#8107)\nIt clarifies that history and current won't be reassigned.", 'Fix typo in reconciliation.md (#8110)', '[Fiber] Add top level render callbacks into ReactDOMFiber and ReactNoop (#8102)\n\n\n[Fiber] Add top level render callbacks into ReactDOMFiber and ReactNoop\n\n\n[Fiber] Support multiple render callbacks\n\n\n[Fiber] this in render callbacks are public instances\n\n\n[Fiber] commitLifeCycles move to behind the effectTag check\n\n', 'Forms Update (#8112)\n\n\nReapplied fixes to updated docs from master\n\n\nReapplied fixes to Forms, removed ES2016 function includes()\n\n\nMissing carriage return\n\n\nAdding back some line breaks\n\n\nMaking requested changes.\n\n\nMaking space changes\n\n', 'Docs update - Additional (#8115)\n\n\nReapplied fixes to updated docs from master\n\n\nReapplied fixes to Forms, removed ES2016 function includes()\n\n\nMissing carriage return\n\n\nAdding back some line breaks\n\n\nMaking requested changes.\n\n\nMaking space changes\n\n\nFixed typo and removed unnecessary hyphen.\n\n\nReworded select, and highlighted line\n\n\nFixed string styles\n\n\nRefactored  to use htmlFor\n\n\nAnother refactor of \n\n\nRemoved name prop from radiobutton\n\n', 'Tweak Forms', 'PureComponent in Fiber\nPasses existing PureComponent tests', 'Merge pull request #8118 from facebook/fiberpurecomponent\n[Fiber] PureComponent', 'Update forms.md (#8121)', 'Shares debugID information across modules (#8097)\nPrior to this, React was using a nextDebugID variable that was locally\nscoped to both instantiateReactComponent and ReactShallowRenderer.\nThis caused problems when the debugIDs would collide, the itemMap in\nReactComponentTreeHook would be overwritten and tests would fail\nwith the message "Expected onBeforeMountComponent() parent and\nonSetChildren() to be consistent".\nThis change shares the debugID with both modules thus preventing any\ncollisions in the future.', 'Correct usage of formatName() function in docs (#8122)\nThe code section above these changes defines a formatName function\nthat expects a parameter user. The code section containing these\nchanges incorrectly called formatName(user.name). For those following\nalong with CodePen, this section should correctly call\nformatName(user).', 'added word break (#8120)', 'Fix lint errors (#8113)', 'Consistent CodePen links in docs', 'Fix: Remove unneeded else branches from documentation examples', 'Improve devtools image size for the tutorial (#8114)', 'Clarify how transition props work (#8124)', 'Move more files into stack reconciler\nCallbackQueue and Transaction are specific to the stack\nreconciler.', 'Add React Remote Conf 2016. (#8094)\nAdd video links to some conferences.', 'Update reference-react-component.md (#8126)\nline 320: For example, this code ensures that the color prop is a string', 'Refactor ResponderEventPlugin to not rely on _rootNodeID\nInstead of relying on IDs, we now use instances for everything so\nthis should be reflected by the test.\nThis still has a _rootNodeID to store the listeners which I will\nremove next.', "Create ReactGenericBatching injection wrapper around BatchedUpdates\nThis moves calls that don't know if they're in a Fiber or Stack\ncontext to use ReactGenericBatching.batchedUpdates.\nThe corresponding one will be injected from either the stack\nreconciler and/or the fiber reconciler if they're loaded at the\nsame time.\nThis lets them share the event system when they're both used\nat once.\nThis can also be useful for libraries that call\nunstable_batchedUpdates today but don't know which renderer to\nuse.", 'Merge pull request #8128 from sebmarkbage/fiberdom\n[Fiber] Some early refactoring to be able to reuse the event system', '[Fiber] Error Boundaries (#8095)', "Updated tutorial.md (#8054)\nFixed method name (renderStep -> renderSquare).\nRemoved 's key to present the warning described below the code fragment.", 'Organize and add confs (#8129)\nUpcoming proximity followed by past chronological.', 'Add more tests for error boundaries', 'Add a failing test for multiple independent boundaries\nNow that commits are treated as atomic, it is possible that componentDidMount, componentDidUpdate, or componentWillUnmount threw in multiple places during the commit. We need to make sure we notify all affected boundaries of the first errors in them.', "Add tests verifying we don't swallow exceptions", 'Handle multiple errors in boundaries', 'The issue with tests is solved now', 'Merge pull request #8133 from gaearon/error-boundaries-more\n[Fiber] Error boundaries should handle errors independently', "In the community support doc, I noticed that the React Facebook (#8138)\npage link is broken since it's missing '.com'.", 'Add support for node v7 (#8135)', "Update codebase-overview.md (#8142)\n\nUpdate codebase-overview.md\n\nFix the broken source code URL in 'Event System' section.\n\nUpdate codebase-overview.md\n\nRe-fix link name", '[Fiber] Fix TestUtils.findAllInRenderedTree (#8147)\n\n\n[Fiber] Fix TestUtils.findAllInRenderedTree\n\n\nAdd a comment about coroutines\n\n', "[Fiber] Fix tests for Fiber in ReactElement-test (#8150)\n\nTest Fiber internals differently in ReactElement\n\nInstead of being able to access the owner's instance via getPublicInstance(), we use the Fiber's stateNode. (Fiber does not have methods, it's just a structure!)\n\nFix isCompositeComponentWithType for fiber\n\nIn ReactTestUtils.isCompositeComponentWithType, we provide a way to walk through Fiber's internals in place of using _currentElement.type. We keep support for non-fiber though.\n\nTest fiber reconciler consistently\n\nUse typeof instance.tag to test if we're using the fiber reconciler\n\nRemove unnecessary comment\n", 'Get a few more Fiber tests passing (#8149)\n\n\nGet a few more Fiber tests passing\n\n\nFix Flow and wrap in DEV\n\n', 'Remove use of reactComponentExpect in our tests (#8148)', '[Fiber] Miscellaneous fixes to get more tests passing (#8151)\n\n\nReset current owner when handling an error\n\n\nMake string ref deletion tests accept null\n\n\nRelax requirements on ref and render interleaving\n\n', 'add missing verb (#8139)\nwhy is an should be why it is an', 'Remove duplicated word in doc (#8157)\nGets rid of an obsolete word in the documentation for "State and Lifecycle":\n"Consider the ticking clock example from the one of the previous sections."\n->\n"Consider the ticking clock example from one of the previous sections."', 'update-unknown-warning-page - add a reason for the warning (#8131)\n\n\nupdate-unknown-warning-page - add a reason for this warning\n\n\nMinor tweaks\n\n', "Kill ReactLink, LinkedStateMixin, valueLink and checkedLink (#8165)\nThis should be safe because we've been warning for this. The LinkedStateMixin is technically exposed on React.addons without a warning but presumably you wouldn't be using it without a valueLink or checkedLink.\nI do this primarily to clear up what the custom onChange listeners are doing.\nRenamed the final prop type helper to ReactControlledValuePropTypes.", 'Update forms.md (#8136)\nThe component Form in "Uncontrolled Radio Button" example doesn\'t need state, because it does not used in render() method.', 'Track passing/failing tests in fiber (#8169)\n\nWork around jest toEqual bug in ReactTreeTraversal\n\n\n\nTrack passing/failing tests in fiber\n\nRun scripts/fiber/record-tests to re-record, then check git diff to see what you changed.', '[Fiber] Add some scheduling tests (#8171)\n\nExtend ReactNoop to handle multiple roots\n\nThis lets us test scheduling between the roots.\n\nAdd a few first tests for scheduler\n', "[Fiber] Fix infinite loop in scheduler and add more tests (#8172)\n\n\nMake test more complete\n\n\nAdd a failing test for scheduling in reverse order\n\n\nIt hangs forever because we don't clear next pointer when unscheduling a root. Therefore, when it's scheduled again, it brings all its previous chain with it, potentially creating a cycle.\n\nClear the next pointer when unscheduling a root\n\nFixes a potential infinite cycle when we reschedule a root.\n\nAdd new tests to Fiber test tracker\n", '[Fiber] Assign ReactTypeOfSideEffect to ReactFiber.Fiber.effectTag correctly (#8173)\nThe type of ReactFiber.Fiber.effectTag is TypeOfSideEffect.\nThus we should assign ReactTypeOfSideEffect.NoEffect value instead of\nReactPriorityLevel.NoWork even if they are same values.', "Handle the radio button case completely in the asap case (#8170)\nInstead of scheduling individual callbacks to asap, we schedule one and\nthen do all the work in that one.\nI'm doing this for architectural refactoring reasons.\nNevertheless, I'm adding a contrived unit test that this fixes. :)", "Remove pendingUpdate optimization in ReactDOMSelect (#8175)\nThis removes an optimization that avoids call update on ReactDOMSelect\ntwice in an onChange event.\nhttps://github.com/facebook/react/commit/2601b6a0b0c2b0bccaca67fbbfab6987ac5bef30#commitcomment-19643403\nNone of the other controlled components do this. The only reason to do it\nhere is because of the loop.\nI'd like to remove this because I'd like to remove all the side-effects\nthat happen in onChange, other than user defined behavior. I'd also like to\nget rid of state that track sequences. It is easier if everything is just\ndiffing.\nAlternatively I can store the previous value that we processed and only\nreprocess if the value has changed. However, that would requires the array\nfor multiple values to be immutable and I don't think we enforce that\nright now.\nIn Fiber, I believe that we'll be able to batch both these updates into a\nsingle commit.", '[Fiber] Add more tests for scheduling (#8183)\n\n\nAdd more tests for scheduling\n\n\nRemove ambiguous terms\n\n', 'Fix the build (these tests were renamed)', "Ensure first iteration of performAnimationWork loop has right priority\nI don't think this actually changes any behavior because of the way\nfindNextUnitOfWork works, but I think this is easier to follow.", 'Synchronous work', 'Updates should use the same priority context as top-level render\nA bit of restructuring so that setState uses whatever the current\npriority context is, like top-level render already does.\nRenamed defaultPriority to priorityContext, and added a new variable\ncalled defaultPriorityContext. Having two separate variables allows the\ndefault to be changed without interfering with the current context.', "Add config to enable sync scheduling by default\nI'll turn this on in ReactDOMFiber once I figure out batchedUpdates.", 'Batch nested updates when in sync mode\nAlmost working...', "Enqueue update and callback simultaneously\nWithout this fix, in non-batched mode, the update is scheduled first and\nsynchronously flushed before the callback is added to the queue. The\ncallback isn't called until the next flush.", 'unstable_batchedUpdates\nImplements batchedUpdates and exposes as unstable_batchedUpdates. All\nnested synchronous updates are automatically batched.', "Don't need defaultPriorityContext\nTurns out this isn't necessary. Simpler to keep it as one field.", 'unstable_batchedUpdates should return value of callback', 'At the end of a batch, perform any sync work that was scheduled', "Remove first-class function\nInstead we'll branch on the priority level, like in scheduleWork.", "batchedUpdates tests\nCovers some bugs I encountered while working on this feature.\nIntroduces a syncUpdates API to ReactNoop. Is this something we'd want\nto expose to the reconciler?", 'New effect type: Callback\nThis solves the problem I had with enqueueSetState and enqueueCallback\nbeing separate.', 'Fix lint by removing unneeded type import', 'Merge pull request #8127 from facebook/fibersynchronouswork\n[Fiber] Use synchronous scheduling by default', "[Fiber] Add tests for scheduling inside callbacks (#8186)\n\n\nAdd tests for scheduling inside callbacks\n\n\nDon't test implementation details\n\n", '[Fiber] Schedule animation regardless of deferred work (#8187)\n\n\nRemove comments about implementation details\n\n\nSchedule animation regardless of deferred work\n\n', "ES import -> require (#8185)\nNot all of our downstream build chains don't support ES imports yet.", 'UpdateQueue fixes\n\nIncorrect comparison when computing hasUpdate\nisReplace should be a property of the node, not the queue\n', 'Update passing tests', 'Add Agent Conference to conferences docs (#8196)\n\n\nAdd Agent Conference to conferences docs\n\n\nMove Agent Conference to upcoming conferences\n\n', 'Move Safari onClick hack into ReactDOMComponent (#8189)\nThis is already where we trap non-bubbling events. We also already branch\non the tag type so we know if it is interactive or not.\nThis will let us get rid of the didPutListener and willDeleteListener\nabstractions.\nI use a simple onclick = emptyFunction to avoid the need for a bookkeeping\nmap.', 'Fiber: Fix reconciling after null (#8202)\nBefore, this code was bailing out after encoutering a null child because it thought it was out of old children. Seen when reconciling [null, , ] with [null, , ] in XUISelector.', '[Fiber] "Task" priority for error boundaries and batched updates (#8193)\n\nRefactor scheduling functions and introduce Task priority\n\nThere was lots of duplication across all the scheduling functions. I\nthink we\'re far enough along that we can start trying to clean some\nstuff up.\nAlso introduces a new priority level provisionally called Task priority.\nThis is for work that completes at the end of the current tick, after\nthe current batch of work has been committed. It\'s different from\nSynchronous priority, which needs to complete immediately.\nA full implementation of Task priority will follow. It will replace\nthe current batching solution.\n\nImplement Task priority\n\nTask priority is similar to Synchronous priority. Both are flushed in\nthe current tick. Synchronous priority is flushed immediately (e.g. sync\nwork triggered by setState will flush before setState exits), where as\nTask is flushed after the current batch of work is committed.\nCurrently used for batchedUpdates and nested sync updates. Task should\nalso be used for componentDidUpdate/Mount and error boundary work. I\'ll\nadd this in a later commit.\n\nMake error boundaries use Task Priority\n\nI have all but one error fixed. Not sure how tricky the last one is,\nbut I\'m cautiously optimistic. Pushing to show my current progress.\n\nRemove recursion from handleErrors\n\nChanged the algorithm of handleErrors a bit to ensure that boundaries\nare not revisited once they are acknowledged.\n\nAdd incremental error boundary test\n\nDiscovered an edge case: a noop error boundary will break in incremental\nmode unless you explicitly schedule an update.\n\n\nRefactor error boundaries in Fiber\n\n\nSimplify trapError() calls\n\n\nThe existing logic was written before we had a proper error handling system.\n\n\nRemove unnecessary flags\n\n\nPrevent performTaskWork recursion\n\n\nBe stricter about preventing recursion\n\n', 'Create a separate test file for incremental error handling', "Make error handling more resilient\n\nEnsure that errors in one root don't prevent work on another root\nFix an issue where boundary state change would get ignored in incremental mode\n", 'Remove unscheduleWork\nWe can use the existing unscheduling logic in findNextUnitOfWork.', 'Merge pull request #8210 from gaearon/fiber-error-boundaries-fatal\n[Fiber] Make error handling more resilient', "Don't need to keep track of rootsWithUncaughtErrors\nJust give it NoWork priority and findNextUnitOfWork will handle the rest", 'support slot attribute on DOM elements for V1 shadowDom named slots p… (#8061)\n\nsupport slot attribute on DOM elements for V1 shadowDom named slots projection\n\nCloses #7784\n\nfix(test): fix lint errors\n', "Correctly render placeholder for textarea in IE11 (#8020)\n\nCheck if textContent should be set for textarea\n\nshouldSetNodeTextContent returns whether a node.textContent should be\nupdated. Currently it only covers one case, which is to avoid setting\nthe textContent if the text is empty and a placeholder exists.\n\nOnly set node.value if it's equal to initialValue\n\nIn IE11 textContent is populated when the placeholder attribute is set.\nWithout this check, we end up setting node.value equal to the\nplaceholder text, causing the textarea to actually render with the text\ninside.\nThis check makes sure that textContent is equal to our expected\ninitialValue, which should be the case when using defaultValue.\n\nRemove placeholder/textarea check, use contentToUse instead\n", '[Fiber] Complete ES6 Class related errors support (#8156)\n\n\nPrint a warning in fiber for lacking render method\n\n\nReject initial non-object state in Fiber\n\n\nRejects Arrays, Strings & Numbers. Allows nulls.\n\n\nCentralize fiber checks on ES6 Classes\n\n\nAdd classic & instance property checks on fiber\n\n\ncheck the absence of getInitialState & getDefaultProps as methods\n\n\ncheck the absence of propTypes & contextTypes at instance-level\n\n\nConvert to normalized React warning calls\n\n\nSupport lifecycle typo detection in fiber\n\n\nGet the complete warnings from the existing code\n\n\nOnly check classInstance once\n\n\nAvoid rechecking while resuming\n\nCan warn component while resuming but only once\n\nThis is achieved by tracking the warning state in the Fiber structure.\n\n\nRemove warning deduplication\n\n\nFactor name retrieval in a getName helper\n\n\nUse invariant instead of throw\n\n\nRead inst.state only once for the invariant\n\n\nFix condition on the instance state\n\n\nRegister failing/passing fiber tests\n\n', "Move setState callback to right after didUpdate (#8204)\nIt's much easier to do it this way in Fiber and there shouldn't be much observable difference.", 'Call setState callbacks enqueued in cWM (#8207)\nAlso fixes return value of ReactNativeMount and moves that callback to be after cDM instead of after all updates.', 'Re-record tests', 'Fix method markdown highlight (#8218)', "Track if SelectEventPlugin is attached on a per document basis (#8190)\nThis gets rid of the global flag on if something has listened to onSelect\nand instead reads the isListening map if all the events are covered.\nThis is required if we want to attach events locally at roots.\nCould be slower perf wise to handle events. An alternative solution would\nbe to attach a special flag on the listener map for the document so we\ndon't have to check the full dependency list.\nHowever, my favorite solution would be to just eagerly attach all event\nlisteners (except maybe wheel). Then we don't have to do any of this stuff\non a per element basis.", "[Fiber] Attempt to fix ReactDOMTextComponent test in Fiber (#8146)\n\nAttempt to fix ReactDOMTextComponent test in Fiber\n\nObviously, some tests pass but the reconciliation is still incomplete on this in Fiber.\nThose changes just ignore reconciliation Comments while asserting (this fixes 2 tests already) but now shows that Fiber lacks some reconciliation features.\n\nTransmit a parentInstance to commitTextUpdate\n\nThis is done in case a Node#normalize() was performed on the parent instance and that the TextInstance got desolidarized from the parent. We provide the parent known by the parent Fiber to reattach the DOM node in this case.\n\nAdded a more complex case around split nodes\n\nThis test does not assume one split node substitution alone but also some non-split nodes.\n\nFiber supports split text nodes\n\nThis is done by suppressing nodes appearing during the split. this is based by comparing against the old value known by the Fiber.\n\nSimplify siblings cleaning in commitTextUpdate\n\nNo need to assert instanceof Text since the length comparator will work correctly.\n\n\nEnsure non-text nodes won't be removed\n\n\nFix flow for Fiber Text reconciliation additions\n\n\nMostly define types as optionals. Respects the strict DOM API around Node & Element.\n\nAppend at any stack stage only if necessary\n\nThe direct parent of the TextNode fiber may not contain the host node. We have to go through the hierarchy. However, since this work may be expensive, we only do it if absolutely necessary!\n\n\nUse tag & ReactTypeOfWork to find an HostComponent\n\n\nAddfailing scenario when running Node.normalize()\n\n\nIt happens when non-text-elements are added in the mix. @sebmarkbage seems to have an idea on how to fix it. This is just a repro of the bug!\n\nRegister failing/passing fiber tests\n", 'Fix errors in ReactNativeMount (#8223)', 'Hide detailed failure output in scripts/fiber/record-tests (#8214)\n', 'Run fiber tests just once on Travis (#8221)\nConsolidate facts tracking with the other script.', "Use explicit pass for restoring controlled state instead of asap (#8176)\n\nUse explicit pass for restoring controlled state instead of asap\n\nThis gets rid of the first class ReactUpdates.asap scheduling. Instead of\nscheduling a first class function to invoke later, I introduce an explicit\nphase for restoring controlled state after dispatching events.\nWe assume that the deepest event target is the thing that needs its state\nrestored.\n\nDrop special cases for onChange in wrappers\n\nWe're now not using anything special about onChange handling in the\nwrappers. Yay!", 'Fix lint in ReactUpdates (#8225)\nI was a bit too trigger happy.', "Ensure that we're listening to all onChange dependencies for controlled inputs (#8229)\nWhen there is no onChange event handler, we should still listen to it to\nensure controlled values get reset.\nThere is warning associated with this but the prod behavior should still be\nrespected.", "Rerun tests (#8230)\n\nEnsure that we're listening to all onChange dependencies for controlled inputs\n\nWhen there is no onChange event handler, we should still listen to it to\nensure controlled values get reset.\nThere is warning associated with this but the prod behavior should still be\nrespected.\n\nRerun tests\n", "Revert normalized text node fix (#8231)\nThis reverts the implementation in 33325ad0097e0689fd415703a1a7c1665629be7e.\nI didn't mean to merge the implementation since it is incorrect and incomplete.\nI meant to just merge the unit test.", 'Check for event listener in props instead of bank (#8192)\nThis just reads events from the props instead of storing them in a\nlistener back.\nI had to rewrite a bunch of tests to cover this model.\nI removed the tests that just test the adding and removing over listeners\nsince there is no equivalent behavior anymore.', "Add React Amsterdam 2017 (#8235)\nWe've recently announced the dates for our next React Amsterdam edition, looking forward on adding it to the list.", 'Docs: add a bunch of redirects (#8137)\n\n\nadd a bunch of redirects\n\n\nadd more redirects\n\n', 'Revert "Check for event listener in props instead of bank (#8192)" (#8239)\nThis reverts commit a878c3056d2df0cf4d7f3b5e2db6031d598ef23f.\nThe previous stuff that this builds on didn\'t successfully land fully. Since I\nwant to measure this in isolation, I\'ll revert this for now.', "Cleanup ReactErrorUtils (#8145)\nRemove 'b' argument from Flow annotation", 'Fix error codes (#7999)\n\n\ntook codes.json from the 15-dev branch\n\n\nfixed react:extract-errors task in gulpfile\n\n\ngenerated error codes\n\n\nRevert "generated error codes"\n\n\nThis reverts commit b8f3aeed9d8f0d469edd5f6623fa6090930594d8.\n\nAdded a README for the error code system\n', 'Fix typos in Shallow Rendering Documentation (#8226)\n\n\nFix typos in Shallow Rendering Documentation\n\n\nFix another occurrence\n\n', 'Remove unnecessary findDOMNode calls (#8198)', 'Updates from inside componentDidMount/Update should have Task priority.\nThis is only observable in incremental mode.', 'Merge pull request #8206 from acdlite/fibertasklifecycleupdates\n[Fiber] Updates from inside componentDidMount/Update should have Task priority', 'forms breakup', 'Meant to commit these changes with #8206... oops.', "Fixed batching reentrant controlled events (#8240)\nIf a controlled target fires within another controlled event, we should not\nrestore it until we've fully completed the event. Otherwise, if someone\nreads from it afterwards, they'll get the restored value.\nNot super happy with this particular solution.", '[Fiber]Warn when shoulcComponentUpdate returns undefined (#8243)\n\n\n[Fiber]Warn when shoulcComponentUpdate returns undefined\n\n\nRemove unnecessary fallback\n\n', "Remove string ref from function component example (#8244)\nRefs can't be attached to stateless functional components.", '8021 (#8241)\nFix gulp tasks: eslint and flow error on Windows', 'fix broken docs links (#8163)\n\n\nfix broken links to outdated code\n\n\nanother broken links to outdated code\n\n\nupdate hash commit & folder structure to current\n\n', 'Update refs-and-the-dom.md (#8250)\nSince a lot of projects use airbnb eslint config where this rule is enabled (and its a good rule) some people might get confused when they are trying this out in their project.', 'Replaced old refs with new callback refs (#8254)', 'Correct a method param in Implementation Notes (#8252)', 'Refactor precacheChildNodes slightly (#8018)\nThis ‘fixes’ a bizarre IE9 script engine issue. #7803', 'Revert "temporary compatibility fix" (#8256)\nThis reverts commit bba0d992d8f4ecf9cf6677817a1218e7f48a8a77.', 'Flow 0.34 (#8259)', '[Fiber] Fix reactComponentExpect (#8258)\n\n\nAdd more reactComponentExpect tests\n\n\nImplement reactComponentExpect in Fiber\n\n', '[Fiber] Fix reactComponentExpect (#8258) (#8257)\n\n\nAdd more reactComponentExpect tests\n\n\nImplement reactComponentExpect in Fiber\n\n', 'Use ReactDOM.unstable_batchedUpdates in Fiber tests (#8263)', "Use _hostContainerInfo to track test renderer options (#8261)\n\nUse _hostContainerInfo to track test renderer options\n\nThe transaction is not available when unmounting or updating the\ninstance, so we track it using _hostContainerInfo\n\n\nThrow if hostContainerInfo is not populated in getPublicInstance\n\n\nLinting fixes\n\n\nRemove transaction from ref lifecycle code path\n\n\nWe don't need to pass the transaction around anymore since we store the\ntest options on _hostContainerInfo instead\n\nRemove unused argument\n", 'Make the Shallow Rendering example clearer (#8269)\n\nMake the Shallow Rendering example clearer\n\nI was reading through the documentation, and I found that the render call on the renderer was missing.\n\nUse a regular function to define MyComponent\n', "Handle nested controlled events (#8251)\nI came up with a contrived case of where nested controlled events could\nfire within the same batch - but on different targets.\nI think we came to the conclusion that controlled values typically cannot\nuse preventDefault so it is ok that they don't flush until after the event\nhas finished. So therefore we accumulate a queue of all the nested targets\nwithin a batch and then restore state on all of them.\nI'm still skeptical that this is the correct way to do controlled values.\nThe reason we have to do them in a single event loop is because when you\ntype, the sequence of values that get accepted or not can matter. I wonder\nif there is a scenario we can come up with where you can fire multiple\ninner events in an event loop and end up with batching causing problems.\nThis effectively just reimplements asap again but with no allocations for\na single target and no closure allocations.", 'Fix reactComponentExpect.toBeDOMComponentWithChildCount(0) regression (#8271)\nThis should fix https://github.com/facebook/react/commit/3e2680411efa3b478afc1f26057f417c7aae7915#commitcomment-19788988.', 'Add freenode #reactjs link to support.md (#8270)\n\n\nAdd freenode #reactjs link to support.md\n\n\nChanged irc link to http webchat link.\n\n', 'Handles risky callbacks on setState. Fixes #8238 (#8242)\n\n\nHandles risky callbacks on setState. Fixes #8238\n\n\nUpdates try-catch to cover callback when context is not present.\n\n\nUpdates code to trapErrors instead of swallowing them.\n\n\nFixes flow errors\n\n\nIncorporates review comments\n\n\nTraps only the first error.\n\n\nRemoves callbackWasCalled and updates fiber tests.', 'docs: delete unnecessary brackets', 'Change a test to be relevant in Fiber (#8281)\nFiber supports fragments so we will use undefined instead.\nThis test is then valid both in Stack and in Fiber.', "Build infra for tracking dev-specific failures (#8228)\nI'll plan to change all of our console.error and component-tree expects to expectDev. It's a little annoying that we need to make sure tests don't throw (see my change to normalizeCodeLocInfo) but any alternative would seem to require two separate test runs or a much more cumbersome syntax.", 'Update reference-react-dom.md\nAdd missing closing bracket', 'Catch first error from setState updaters', 'Minor style tweaks', 'Change warnings to use expectDev', 'Update passing tests', 'Implement basic support for context', 'Minor style tweaks', 'Update passing tests', 'Fix bad ops.length assignment in tests', 'Add a test for recursive context', 'Add a failing test for context when reusing work\nWe mistakingly forget to push the context if the parent is being reused but the child is not.', 'Move context management into scheduler\nIt is error-prone to push and pop context in begin or complete phases because of all the bailouts. Scheduler has enough knowledge to see if pushing is necessary because it knows when we go inside or outside the tree.', 'Move context handling back into Begin and Complete phases\nAs per discussion, this is better because then this code only runs for the class type of work. We will still need to fix bailouts for deep setState calls.', 'Disable memoized props bailout when context might have changed', 'Catch first error from setState callbacks (#8287)\n\n\nCatch first error from setState updaters\n\n\nMinor style tweaks\n\n', 'Update reference-react-dom.md (#8285)\nAdd missing closing bracket', 'Merge pull request #8277 from qiuyuntao/master\ndocs: delete unnecessary brackets', "Removes UpdateQueueNode.callbackWasCalled (#8290)\nTracking this isn't necessary.", 'Add test cases for context below and above setState', 'Memoize merged child context when possible\nWe can avoid recreating the merged context object if the context provider work was reused. This is essential to avoid allocations for deep setState() calls.', 'Update passing tests', 'Add explicit tests for intermediate components', "Use empty object if context does not exist\nThis matches Stack behavior.\nHad to rewrite a test that used Simulate because Fiber doesn't support events yet.\nAlso changed tests for componentDidUpdate() since Fiber intentionally doesn't pass prevContext argument.", 'Merge pull request #8272 from gaearon/fiber-context\n[Fiber] Initial implementation of context', "Reapply Check for event listener in props instead of bank (#8292)\n\nReapply Check for event listener in props instead of bank (#8192)\n\nThis reverts the previous revert.\n\nDon't throw on falsy event listeners\n\nSome code relies on passing null. This restores the earlier behavior.", 'Fix a line-length warning (#8298)\nTest Plan: npm run lint / yarn run lint', 'Add 15.4.0 blog post', 'Merge pull request #8293 from gaearon/154-post\nAdd 15.4.0 blog post', 'Update Changelog & Readme for 15.4.0\n(cherry picked from commit 443683525fd8c0721f21a8f23021d4eac73b5929)', 'Update website for 15.4.0\n(cherry picked from commit 5ce8853ccb2e4677eb6a9d183e8086fd0d6367d4)', 'Add Fibers to ReactDOMComponentTree\nThis adds precaching to ReactDOMFiber. I.e. adding a handle from the DOM\nnode to the internal Fiber. This means that we need to expose an internal\nhandle to the reconciler.\nWe use duck typing to figure out if it is a Fiber or Stack instance.\nThe new failing tests are failing because this is now able to actually\nfire events onto Fibers and then the result of those events are\nincorrect where as they were ignored before.', 'Add Fibers to ReactTreeTraversal\nThis traverses parent based on the type of internal instance it is passed.\nIf it is a Fiber it may have to traverse multiple steps until it finds a\nHostComponent.\nThis will allow us to use the event system with Fiber.', 'Extract event listener from memoizedProps on Fiber instances\nThis makes some basic events work with Fiber.\nThis is however not a complete solution since we may be reading the wrong\nFiber.', 'Merge pull request #8232 from sebmarkbage/treetraversal\nAdd support for Fibers in ReactDOMComponentTree and ReactTreeTraversal', 'Remove spread operator (#8273)\n\nRemove spread operator\n\nI believe what was meant here was to express that you would create the new player object with all the previous properties of the existing player object in addition to now updating the score value. That being said, this is a simple example, and the player object clearly has no other values. Objects are not (by default) iterable using this operator, so this little piece does more harm than good. I believe the new example to be much clearer.\n\n\nUsing Object.assign()\n\n\nTweak wording\n\n', 'Clarity on constructor of Board object for tutorial.md (#8224)\n\nUpdate tutorial.md\n\nIs it possible to be more clear here?\n This implies that we are removing the constructor from GAME, and not board (which is what I believe the author is trying to say).\nIt took me several reads to understand. \nWith this edit, it is now clear that the adjustment is being made to -Board- and not to -Game-\n\nalso remove "for Board earlier"\n', 'fix(a11y): add missing labels to forms doc\nShowing how to create a form without labeling inputs is an accessibility anti-pattern. This change adds labels to the examples to address that. Codepen may still need to be updated depending on how that example is created.', 'include the version number in the header (#8315)', 'Tweak examples', 'Merge pull request #8317 from marcysutton/master\ndocs(forms): add missing labels to forms doc', 'Explain Installation in more detail', 'Update installation instructions on the blog', 'add link to useful doc', 'Make numerical refs work in Fiber (#8334)', 'Merge pull request #8335 from lacker/newlink\nadd link to useful doc', "Upgrade ESLint and dependencies, fix new lint errors, switch Travis to Yarn (#8309)\n\nUpdate ESLint to 3.10.2\n\nAlso pull in fbjs for extending properly, per @zpao. This also disables consistent-return, which has about 80 failing cases in React currently. If we'd like to turn this back on, we should do it separately and fix all the call sites properly (rather than just adding 'return undefined;' everywhere, which adds no value.\nFixes to all existing lint errors plus an update for yarn.lock to follow.\n\n\nUpdate yarn.lock after the eslint update.\n\n\nFix all new eslint failures\n\n\nUnfortunately I had to add three eslint-disable-next-line instances. All have explanations inline.\n\nSwitch Travis to use yarn instead of npm\n", "Update 2016-11-16-react-v15.4.0.md\nEdge and IE11 both show user marks and measures in the Dev Tools, so it's technically not accurate to say that only Chrome has this feature.", 'Fork ReactDOMComponent and the wrappers to Fiber\nFrom now on any change to these have to be replicated to these files.\nI will next start changing the implementation to work with Fiber.', 'Turn ReactDOMFiberComponent into a singleton\nAnd turn on Flow.', 'Remove markup related paths', "Remove rootNodeID\nWe only use this to determine if something is mounted or not but I don't\nthink we really need to.", "Remove child nodes flag\nWe're always eager in Fiber.", 'Rely on lazy listeners', 'Get rid of the previousStyleCopy\nWe have warned about not mutating styles already. At this point we can just\nfreeze the style object in DEV.\nThat way we can read it from the previous props object without storing\nanother copy of it.\nAlso delete the associated warning.', "Remove instrumentation and nesting warning\nThe nesting warning isn't as important now that we use createElement and\nI don't want to deal with this just yet.", 'Remove _domID\nNot used by Fiber', "Manage children inside DOM properties\nFiber manages children separately so we don't need to do it here.\nHowever, we special case the text content children and\ndangerouslySetInnerHTML.\nThis reveals a bug that we currently don't handle the case where we switch\nfrom dangerouslySetInnerHTML or text children to element children, because\nchild insertions are handled before the parent updates. We could possibly\nhandle this case by removing all nodes before the first host child but\nthat is a bit unfortunate.", "Remove the notion of transactions\nWe don't need to wait for the commit phase to start listening to events\nsince we have the node.\nNext we'll stop unlistening to events too and instead just check isMounted.", "Stop tracking event listeners on DOM nodes\nBasically, we don't need to remove the event listeners because we can just\ncheck if something is still mounted when they fire instead. We'll rely on\ngarbage collection to clean them up.", "No need for unmounting DOM components\nWe'll stop tracking the input value tracking. We'll also stop uncaching the\nnode because we can just let the garbage collector take care of that. This\nmakes it easier to release components in trees that never mounted.\nThis also removes an invariant error which is covered by unit tests.\nThis is necessary to separate regardless because we don't want this to\nfire for a component that was started but was thrown away because it never\nmounted. We can come back to that later.", 'Add some Flow and get rid of the typecheck annotations', 'Lint issues\nMost dead code', "We only need the root attribute for warnings and server-side rendering\nWe don't need this for Fiber yet. We can possibly add an expando to check\nif this is rendered with React or not.", "getCurrentOwnerName\nInstead of passing around the owner and the internal fiber everywhere we\ncan set current owner during each commit. That way we have it available\nglobally where ever we need it.\nThat way we don't have to pass it as a DEV only argument nor expose the\ninternal representation to the host config.\nThis doesn't actually get the current owner yet. Will do that in a follow\nup.", "Pass props explicitly instead of getting them off currentElement\nWe don't store currentElement and I'm trying to get rid of accessing the\nFiber directly inside the host config.", "Get rid of server side support for \nWe read the wrapper state during initial mount for server rendering support\nbut Fiber doesn't use it and we don't need it. We also can't because we\nhaven't yet completed the parent that has the selected.\nI will need to remember to always insert children before setting the\nselected value on the parent . That way the DOM will deal with\nthe selected property of option properly.", 'Stop using host parent/container internal objects\nInstead we extract the namespace from the root element.', 'Pass the tag explicitly instead of reading it from the internal instance', 'Assert that this is a script tag\nAlso, use a fixed string for the HTML since this is always a script tag.', 'Satisfy Flow by assuming value is an array for multi-select', "Don't pass the Fiber around instead use the DOM node\nTo avoid exposing the implementation details of fibers we'll just pass the\nDOM node around instead. We'll attach any additional wrapper state on it.\nWe don't have to do it that way. We can also just invert the relationship\nand put the node in the wrapper state.\nI'll probably just get rid of the wrapper object and just put them as\nexpandos on the DOM.", 'Split mountComponent into create and set initial properties\nThis lets us insert children in between these two steps.', "Wire up ReactDOMFiberComponent in ReactDOMFiber\nWe'll need to do the DOM injection now.", 'Consistent method vs function', 'Nit', 'Nits', 'Merge pull request #8332 from gaearon/prod-dev\n[Docs] Expand Installation and clarify why use bundlers', 'Merge pull request #8339 from nolanlawson/patch-1\nUpdate 2016-11-16-react-v15.4.0.md', 'Merge pull request #8319 from sebmarkbage/fiberdom\n[Fiber] Fork ReactDOMComponent', 'Improved some sections of the introducing JSX docs', 'Small nit: add a sentence about readability back', 'Merge pull request #8345 from shubheksha/docs/improve-introducing-jsx\nImproved some sections of the introducing JSX docs', 'Improved sections of state and lifecycle docs', 'Fix up Flow annotations to be a bit more explicit where the unsoundness is', 'Handle controlled components in Fiber\nWe need to adjust inputValueTracking a bit to handle the fact that\nFiber attaches wrapper state on nodes.', 'Give wrappers the raw props object\nWrappers operate on the raw props object instead of the processed one.\nWe should probably clean this up a bit since it is very confusing and\nunnecessary allocations to have two separate objects for props.', "Apply @spicyj's SelectEventPlugin fix\nThis fixes some tests with Fiber since we no longer rely on Stack\ninternals for this.", 'Exclude data-reactroot from tests when using Fiber', 'Add some Flow types to inputValueTracking\nNot perfect but better.', 'Record tests and fix BrowserEventEmitter test to not crash jest', 'Minor changes, make it more verbose', 'Merge pull request #8346 from shubheksha/docs/improve-state-and-lifecycle\nImproved sections of state and lifecycle docs', 'Merge pull request #8347 from sebmarkbage/fiberdom\n[Fiber] Handle controlled components', "Fix ReactDOMFiberSelect to set the initial values (#8349)\nI forgot that the normal properties route doesn't do this. We also have\nto make sure that the order is 1) insert children (options), 2) set\nmultiple 3) update the options.", 'Move all dev *Hook tests and ComponentTreeTestUtils to expectDev (#8350)', 'update react-without-es6.md (#8351)', "Update all Jest packages to 17.x (#8327)\n\n\nUpdate all Jest packages to 17.x, cache babel-jest transforms\n\n\nRemove the caching\n\n\nLooking at the other builds it doesn't seem to actually be that necessary.  The bottleneck is executors, not build time.\n\n\nRemove unnecessary package, fix fiber test runner\n\n\nRegenerate yarn lockfile\n\n", 'Make findDOMNode generic (#8348)', 'Change test assertion depending on a feature flag (#8306)\nInstead of a private API (see https://github.com/facebook/react/pull/8150#discussion_r88280994)', 'Fix link to PureComponent in docs (#8375)', "Fix object spread operator (#8378)\nObject spread operator performs shallow copy of object's arguments, so it should be placed before new properties are assigned.", 'Stop relying on variable hoisting (#8380)\nOnly declare the variable once in this scope, instead of declaring them multiple times in the same scope.\nThis fixes #8318, even though it might technically be a shortcoming in Rollup.', 'Revert "Stop relying on variable hoisting" (#8381)', 'Fiber: renderSubtreeIntoContainer (#8368)', "Add a couple missing SVG tags to DOM Elements docs (#8383)\nMy first contribution to React!\nWhile upgrading a React project, I found some suspect SVG that needed updating, so I dug in after checking the docs. I knew that support for some SVG properties had been added (namely xmlns and xmlnsXlink), but I noticed them missing from the reference's attribute list. This pull request updates reference-dom-elements.md by adding said properties.", 'Lint (#8385)', '[Fiber] Add ReactDOMFiber.unstable_createPortal() (#8386)\n\n[Fiber] Add ReactDOMFiber.unstable_createPortal()\n\nWhile #8368 added a version of ReactDOM.unstable_renderSubtreeIntoContainer() to Fiber, it is a bit hacky and, more importantly, incompatible with Fiber goals. Since it encourages performing portal work in lifecycles, it stretches the commit phase and prevents slicing that work, potentially negating Fiber benefits.\nThis PR adds a first version of a declarative API meant to replace ReactDOM.unstable_renderSubtreeIntoContainer(). The API is a declarative way to render subtrees into DOM node containers.\n\nRemove hacks related to output field\n', "Stopgap fix for element disabling (#8387)\nFix for #8308. This is a bad hack -- EventPluginHub.getListener isn't even DOM-specific -- but this works for now and lets us release 15.4.1.", '[Fiber] Make server rendering tests pass (#8372)\n\nUse the public ReactDOMServer in tests\n\nWe need this because it runs the injection.\n\nLet Fiber skip react data attributes and comments in SSR tests\n\nThis markup is testing implementation details rather than behavior.', 'Nit in regexp (#8388)', 'Include ReactDebugTool from inside DEV to save 1.5KB (#8322)', 'Allow EventListener to traverse up the tree until it hits the root\nWe use this to find the root node so that we can look for outer React\nsubtrees if this is nested.', 'Update the internal Fiber on the DOM node to always be the current\nWe need this to safely extract the current event listeners from the props.\nUnfortunately, we are still not safe to use the return pointer since it\nmay not point to the current tree when the Fiber is reused. So this is not\nfully done yet.', 'Track inputs after setting its properties\nThis used to be done at the end of the transaction but I made it synchronous.\nFor this to work it needs to be applied after we have already set the .type\nproperty since it is read by inputValueTracker.', 'Drop "previous style" copy from Stack to bring it inline with Fiber\nWe\'ve already been warning for mutating styles so now we\'ll freeze them\nin DEV instead. This isn\'t as good because we don\'t have more specific\nwarnings than the generic error that doesn\'t even fire in sloppy mode.\nThis lets Fiber pass the same tests.', 'Fix findDOMNode for empty children\nIf there is no child there is nothing to tell us that this was the\nworkInProgress branch. Therefore, we need to look at the other branch\nif there are children in it to see if that was the workInProgress branch.', 'Implement the same search strategy in ReactTestUtils as findDOMNode\nThis was supposed to fix an issue in refs-test but instead it revealed that\nthis strategy is broken.\nThe problem is that Placement effect is not sufficient when the insertion\nis completed since the effect flag is reset then and the previous tree\nhas no effects in it to indicate that this is the wrong tree.', "Don't test for comments in empty components for Fiber\nFiber doesn't use comments in empty components.", "Disable one irrelevant test for Fiber\nWe don't use transaction objects.", "Preserve the original object when using replaceState\nWhen we use only replace state we don't need to clone the object.", "Utilize the backtracking during events to figure out if a Fiber was unmounted\nWe're walking backwards up to the root to find the parent so that we can\npropagate events further up to nested React parents. If we don't find a\nroot, that means that the tree was unmounted and we shouldn't send any\nevents to it.", 'Passing disabled events', 'Merge pull request #8365 from sebmarkbage/fiberdom\n[Fiber] Fix more tests', "Fix browser bundle for AMD (#8374)\n\n\nFix browser bundle for AMD\n\n\nFinal fix for standalone browser build.\n\n\nMuch more scientific than the rest so it should stick.\n\nThrow when we can't find code we need to replace.\n", 'Change the behavior to always fail childContextTypes if there is a method (#8391)\nEven if that method returns falsy values.', 'Fix queueing updates in cWM/cWRP when batching (#8398)\nI tried to add a temporary check for the correct state in https://gist.github.com/spicyj/338147e989215b6eeaf48a6ce2d68d93 and run our test suites over it, but none of our existing test cases would have triggered that invariant. The new one I added does.', 'Restore DOM selection and suppress events (#8353)\nThis makes Draft mostly work.', 'Fix renderSubtreeIntoContainer with non-context-provider parent (#8399)', 'Cleanup after #8353 (#8403)', "Remove config.beginUpdate (#8402)\nI only used this to visualize changes when there were bugs in the\nincremental reconciliation. We don't need it anymore.", "Preserve scroll position when restoring focus (#8401)\nThis misbehavior is particularly egregious because of our current strategy for updating a container in Fiber, but regardless -- if we restore focus to an offscreen node (ex: because it was reordered among its siblings) then we should not scroll the page to reveal it.\nWe could check the overflow computed style values before saving the scroll positions but that's unlikely to be any faster.", 'Re-record', 'Fix traversal up when unmounting (#8404)\nPreviously you could get an alternate when following .return in unmountHostComponents and this could revisit a node twice.', 'Lint', "Update root children using the appendChild/insertBefore/removeChild methods\nThis removes updateContainer and instead uses the regular child mutation\nmethods to insert into the root container and portals.\nSince we're no longer clearing out the container DOM in updateContainer\nwe have to do that manually during initial mount. This now works on a\ndocument and one of the tests end up unmounting the body when you render\ninto the document so I had to work around that bit since we don't yet\nproperly support rendering into the document root.", 'Assert that we always find a parent for DOM mutations', 'Remove recursion from unmounting portals (#1)', "Split initial children out of createInstance\nThe goal of this is to avoid passing an opaque data structure that needs\nto be recursively searched by the host.\nI considered having some helper for doing the recursion but I figured it\nmight be helpful to let the reconciler move this around. For example we\nmight want to create an instance in beginWork and add to it as we go.\nThis would let us avoid traversing the tree twice and would solve the IE11\nperf issue.\nSo instead, we create the instance first then call appendChild. I could\njust call the normal one but I figured that I would make a special one\njust in case. For example if you wanted to perform commits on a separate\nthread from creation. This turned out to be useful in ReactNoop where I\ncan avoid searching the array for an existing one since I know the child\nisn't there already. (Although splitting placement into insertion/move\nmight be better.)\nFinally, we need the ability to update an instance after all the children\nhave been insertion. Such as <select value={...} />. I called this\nfinalizeInitialChildren.", 'Finish ReactGenericBatching (#8405)', 'Merge pull request #8400 from sebmarkbage/fibercontainerchildren\n[Fiber] Update root children using appendChild/insertBefore/removeChild', 'remove dead link (#8411)', "fix typo 'miss-configured' to 'misconfigured' (#8412)", "[Fiber] Remove output field (#8406)\n\nRemove output field\n\nThe idea was originally that each fiber has a return value. In practice\nmost of what we're modelling here are void functions and we track side\neffects instead of return values.\nWe do use this for coroutines to short cut access to terminal yields.\nHowever, since this can be nested fragments we end up searching the tree\nanyway. We also have to manage this in transferOutput so it ends up being\nas expensive. Maybe we can save some traversal for updates when coroutine\nbranches bail out but meh.\n\nUnmount child from the first phase of a coroutine\n", 'Add a test for nested portals (#8416)', 'Update Flow to 0.36 (#8420)', "Fix portal unmounting (#8422)\nWe used to terminate the search on host nodes, and then use the nested unmount algorithm.\nHowever this means we didn't unmount portals inside the host nodes.\nWe will probably need to restructure this somehow but for now I just added a recursive call to unblock myself.", 'Do not forward stderr', 'test', "Use a closure to bind argument to callback in ReactErrorUtils (#8363)\n\nUse a closure to bind gaurded callback\n\nThis way the fake event isn't being implicitly passed into the event handler\n\nAdd tests for ReactErrorUtils\n\nAdd fiber test report\nLinting fixes", 'remove output field from debugger (#8440)', 'Move tests out of the Stack folder\nSo that we can share them with Fiber.\nAlso Server Rendering tests.', 'Move setInnerHTML/setTextContent to shared', 'Use public API in React Mount', 'Merge pull request #8441 from sebmarkbage/movefromstack\nMove shared files out of stack folder', 'Record tests (#8444)', 'Use latest instance when restoring controlled state (#8443)', "[Fiber] Support iterables (#8446)\n\nAdd iterable cases to MultiChildReconcile test\n\nStack currently supports rendering iterables, but Fiber does not.\nPreviously we didn't have any public API tests for iterables. We have tests for traverseAllChildren() which is shared between React.Children and Stack. However Fiber doesn't currently use it, and likely won't. So this commit is a first step towards actually testing iterable support via public API. The next step will be to port traverseAllChildren() tests to test React.Children API instead.\n\nImplement iterable reconciliation in Fiber\n\nThis uses the same exact algorithm as array reconciliation but uses iterator to step through.\nThis gets reconcile tests to pass again but introduces a regression in ReactMultiChildText case which uses Maps as children. It passed before because Maps were ignored, but now it's failing because this actually runs the Map code path in Fiber. We can throw early in this case when we want to follow up on this.\n\nRewrite traverseAllChildren() tests against React.Children API\n\nThis function was used in React.Children and Stack.\nThe corresponding reconciliation functionality is being tested by ReactMultiChild tests.\nSo we can move these tests to ReactChildren and test its public API.", "Handle Bailed Out HostText update and MultiChildText test (#8371)\nThis handles the case where a host text bails out. In that case we need to\nreuse its previous memoizedProps. We should also only schedule an actual\nupdate if it did actually change its text content.\nI updated the unit test to ignore comment nodes if we're using Fiber.", 'Update release checklist (#8389)', 'Fix context getting (#8407)', 'Add test for updating parent state in cWRP (#8448)\nFails in Fiber.', 'Fix fiber feature flag for ReactDOMProduction-test (#8451)', 'Add a document on higher-order components (#7869)', 'Update tutorial.md (#8328)\n\nUpdate tutorial.md\n\nfix "unknown: Unexpected token" in "codepen.io".\n\ntweaks per suggestion\n', 'Fix reordering of bailed out children (#8457)', "[Fiber] Make bad element type message same as in Stack (#8460)\n\nMake bad element type message same as in Stack\n\nThis makes Fiber emit the same message as Stack (aside from the missing owner information).\n\nAdd a separate test verifying error includes owner name\n\nFiber currently doesn't pass it. This is just to keep track of it as a todo.", 'Add tests for recovery from errors thrown in the reconciler (#8462)\nTest that errors in the reconciler can be caught by error boundaries, and that we can still schedule updates if they are uncaught.', "Fix isFiberMounted exports (#8465)\nThis got messed up in a merge conflict. It's only used for one invariant in renderSubtreeIntoContainer.", 'Refs between fiber and stack (#8458)\nI feel gross. Better ideas welcome.', '[Fiber] New error boundary semantics (#8304)\n\nExit early in scheduleUpdate if a node\'s priority matches\n\nThis is a performance optimization and is unobservable. However, it\nhelps protect against regressions on the following invariants on which\nit relies:\n\nThe priority of a fiber is greater than or equal to the priority of\nall its descendent fibers.\n\nIf a tree has pending work priority, its root is scheduled.\n\n\nNew error boundary semantics\n\n\nRecovering from an error boundary no longer uses Task priority by\ndefault. The work is scheduled using whatever priority created the\nerror.\n\nError handling is now a side-effect that happens during the\ncommit phase.\nThe default behavior of an error boundary is to render null. Errors\ndo not propagate except when an boundary fails. Conceptually, this would\nbe like throwing an error from a catch block.\n\nA host container is treated like a no-op error boundary. The first\nerror captured by a host container is thrown at the end of the batch.\nLike with normal error boundaries, the entire tree is unmounted.\n\n\nFix broken setState callback test\n\n\nAdd test for "unwinding" context when an error interrupts rendering\n\n\nSwitch over primary effect types only\n\n\nThis avoids the need to create an export for every combination of bits.\n\n\nOnly continue the work loop if the error was successfully captured\n\n\nAdd more tests for incremental error handling\n\n\nThese tests are currently failing:\n✕ catches render error in a boundary during partial deferred mounting\n  ✕ catches render error in a boundary during animation mounting\n  ✕ propagates an error from a noop error boundary during full deferred mounting\n  ✕ propagates an error from a noop error boundary during partial deferred mounting\n  ✕ propagates an error from a noop error boundary during animation mounting\nThe observed behavior is that unstable_handleError() unexpected gets called twice:\n  "ErrorBoundary render success",\n  "BrokenRender",\n  "ErrorBoundary unstable_handleError",\n\n\n"ErrorBoundary render success",\n"BrokenRender",\n\n"ErrorBoundary unstable_handleError",\n      "ErrorBoundary render error"\n\n\nVerify batched updates get scheduled despite errors\n\n\nAdd try/catch/finally blocks around commit phase passes\n\n\nWe\'ll consolidate all these blocks in a future PR that refactors the\ncommit phase to be separate from the perform work loop.\n\n\nNoopBoundary -> RethrowBoundary\n\n\nOnly throw uncaught error once there is no more work to perform\n\n\nRemove outdated comment\n\n\nIt was fixed in #8451.\n\n\nRecord tests\n\n\nAlways reset nextUnitOfWork on error\n\n\nThis is important so that the test at the end of performAndHandleErrors() knows it\'s safe to rethrow.\n\n\nAdd a passing test for unmounting behavior on crashed tree\n\n\nTop-level errors\n\n\nAn error thrown from a host container should be "captured" by the host\ncontainer itself\n\n\nRemove outdated comment\n\n\nSeparate Rethrow and Noop scenarios in boundary tests\n\n\nMove try block outside the commit loops\n\n', 'Update Travis config for new token', 'Clear existing text content before inserting children (#8331)\nFixes a bug when updating from a single text child (or\ndangerouslySetInnerHTML) to regular children, where the previous\ntext content never gets deleted.', 'Fix insecure shell escaping in facts tracker', 'Merge pull request #8463 from spicyj/travis\nUpdate Travis config for new token', 'add dependencies to react-test-renderer and react-addons (#8467)\nWhat and Why:\n\nWhen using npm version 2, object-assign and fbjs were not getting properly installed\nThis PR adds object-assign and fbjs as explicit dependencies to both react-test-renderer and react-addons\n', 'Rename HostContainer => HostRoot, Portal => HostPortal (#8474)', 'Update reference-react.md', 'Add test for unmount/remount in a single batch (#8470)\nFails in Fiber.', 'Add return to render', 'Additional findDOMNode tests\nThis is failing in Fiber without the fix. Because we have no deletions to rely\non in this case and the placement effects have already happened.', "Fix findDOMNode and findAllInRenderedFiberTreeInternal\nThis strategy finds the current fiber. It traverses back up to the root if\nthe two trees are completely separate and determines which one is current.\nIf the two trees converge anywhere along the way, we assume that is the\ncurrent tree. We find the current child by searching the converged child\nset.\nThis could fail if there's any way for both return pointers to point\nbackwards to the work in progress. I don't think there is but I could be\nwrong.\nThis may also fail on coroutines where we have reparenting situations.", 'Merge pull request #8478 from lucas-aragno/add-return-to-render\nAdd return to render', 'Merge pull request #8476 from AlanBreck/patch-1\nUpdate reference-react.md', 'Add circle.yml / CircleCI support (#8486)', 'Only upload build if server exists (#8488)', 'Merge pull request #8450 from sebmarkbage/fiberfinddomnode\n[Fiber] Fix findDOMNode and findAllInRenderedTree', 'Fix lint (#8489)', 'Add CircleCI badge to the Readme', "Add failing event handler test\nWhen we perform an update to the event handler we properly update the\nimmediate Fiber pointer of a child to be the current. However, when we\nbubble events we use the return pointer which is not guaranteed to point\nto the current Fiber even if we start from the current.\nThis manifests itself when we bailout in a parent. So I made the tests\nuse a PureComponent to illustrate this scenario. There is already a failing\ncase but I'm adding another one too.", "Remove forwarding from tree traversal in EventPluginUtils\nThis is unnecessary forwarding since this is no longer injectable.\nHowever, I'd like to use the injectable getInstanceFromNode from\nTreeTraversal so this avoids a cyclic dependency.", 'Get the "current" Fiber from each node along the path\nThis fixes the issue where using the .return pointer isn\'t guaranteed to\nreturn the current Fiber so we might read the wrong props when we try\nto get the current event.', "Tweak Yarn installation to not run if it's already installed (#8496)\nhttps://circleci.com/docs/install-and-use-yarn/", '[Fiber] Nits (#8507)\nSome best practices.', "Use Portals to test batching across roots (#8508)\nThis doesn't work by default in Fiber, you have to opt-in with a Portal to\nget the explicit ordering guarantees.", 'Update facts-tracker for Circle (#8510)', 'Do not reset innerHTML for elements with null children\nThis is required to support certain third party scripts as well as other fiber renderers (eg the new ReactART renderer)', 'Fixed linting error', 'Fix pull request detection on Circle', 'Added additional test case for ReactFiberBeginWork reset-text', 'Support parallelism on Circle (#8511)', ':clap: designers are friends, not fodder for jokes (#8523)', 'Add test for componentDidUpdate with a bailout in the middle (#8525)\nThis is one of the cases where Fiber diverges.', 'Updated tests-passing', 'Merge pull request #8520 from bvaughn/do-not-reset-inner-html-for-null-children\nDo not reset inner html for null children', 'Imported new ReactART fiber renderer\nSplit ReactART into stack and fiber targets. Added new ReactART test case for recently-fixed bug.', 'Probably fix facts tracker', "Don't set innerHTML if content is empty (#8526)\nFrom D4296244:\n\nEach [...] had a component with innerHTML = '', causing us to go into HTML parsing code in the browser. Doing this takes 0.03ms per parse call which was 10x slower than skipping it.\n", 'Merge pull request #8521 from bvaughn/react-art-fiber\nNew fiber-based ReactART renderer', 'Move commit phase outside of performUnitOfWork\nThis gives us the ability to complete a tree without having to commit it\nwithin the same frame.', 'Consolidate work loops\nThis makes it easier to track when we enter and exit a batch of work.\nFurther steps needed in this refactor:\n- Get rid of tryComponentDidMount, tryComponentDidUpdate, etc. in\nfavor of the try-catch blocks that wrap each pass of the commit phase.\n- Need to be able to switch between performing work that is possibly\nfailed (slower because it requires an extra check on each iteration) and\nwork that we know for sure has no errors.', 'Remove tryComponentDidMount/Update in favor of commit phase try block\nWe still need tryComponentWillUnmount because deletion should be non-\ninterruptible.\nRefactoring the commit phase to better handle errors also allows us\nto switch between fast and slow versions of the work loop. The slower\nversion runs whenever there are captured errors; it must check each\nunit of work to see if it has failed. The faster version runs in the\nnormal case where there are no errors. Whenever an error is thrown, we\nswitch from the fast work loop to the slow work loop.', "Error recovery should have task priority\nThis uncovered a separate issue where some errors were being unscheduled\nand rescheduled multiple times before flushing. Turns out we need to\ncheck both a fiber and its alternate when determining if it represents a\nfailed unit of work. I didn't notice this before because we were\nscheduling a new update on every boundary at the end of the commit\nphase, not just the ones that captured an error during that commit. I\nupdated the unit tests to catch this in the future.", 'Error boundaries can only capture errors once per batch\nSubsequent failures should propagate the error to the next boundary.\nThe conceptual model for this is\ntry {\n  render();\n} catch (error) {\n  setStateToRecover();\n  render();\n}\nCloses #8485', 'Errors thrown when detaching a ref should not interrupt unmount\nIf a ref throws while detaching, it should not prevent\ncomponentWillUnmount from being called.\nAdditionally, errors thrown by removeChild should not be ignored, even\nas the result of unmounting a failed subtree.', "Don't check for a pendingCommit on every iteration\nOnly check if we're in a deferred work batch and performUnitOfWork\nreturns null.", 'Extract commit phase passes into separate functions\nBy splitting these out, we ensure that they can be optimized by the\nJS engine.', 'Consolidate workLoop and deferredWork loop\nSolves a few things:\n\nMoves code out of performWork into workLoop so that it can\nbe optimized.\nerrorLoop (now clearErrors) is no longer called recursively.\nRemoves a while (true) loop inside performWork (not that it really\nmatters for optimization, since performWork contains a try block and\nwill be deopted, anyway).\n', 'Add additional scheduling tests\nTests whether certain types of work can be performed after the deadline\nhas expired.', 'Fix indentation for lint', 'Update CHANGELOG.md (#8518)\n\n\nUpdate CHANGELOG.md\n\n\nUpdate CHANGELOG.md\n\n', '[Fiber] Support SVG (#8490)\n\n\nTest that SVG elements get created with the right namespace\n\n\nPass root to the renderer methods\n\n\nKeep track of host instances and containers\n\n\nKeep instances instead of fibers on the stack\n\n\nCreate text instances in begin phase\n\n\nCreate instance before bailing on offscreen children\n\n\nOtherwise, the parent gets skipped next time.\nWe could probably create it later but this seems simpler.\n\nTweak magic numbers in incremental tests\n\nI don\'t understand why they changed but probably related to us moving some work into begin phase?\n\nOnly push newly created nodes on the parent stack\n\nPreviously I was pushing nodes on the parent stack regardless of whether they were already in current or not.\nAs a result, insertions during updates were duplicated, and nodes were added to existing parents before commit phase.\nLuckily we have a test that caught that.\n\n\nFix lint\n\n\nFix Flow\n\n\nI had to wrap HostContext API into a closure so that it\'s parameterizeable with I and C.\n\n\nUse the same destructuring style in scheduler as everywhere else\n\n\nRemove branches that don\'t seem to run anymore\n\n\nI\'m not 100% sure this is right but I can\'t get tests to fail.\n\nBe explicit about the difference between type and tag\n\nI was confused by th HACK comment so I learned how DOM and SVG work with casing and tried to write a more descriptive comment.\nIt also seems like passing fiber.type into finalizeInitialChildren() is a potential problem because DOM code assumes tag is lowercase.\nSo I added a similar "hack" to finalizeInitialChildren() that is identical to the one we have prepareUpdate() so if we fix them later, we fix both.\n\n\nSave and restore host context when pushing and popping portals\n\n\nRevert parent context and adding children in the begin phase\n\n\nWe can address this later separately as it is a more hot path.\nThis doesn\'t affect correctness of SVG container behavior.\n\nAdd a test for SVG updates\n\nThis tests the "jump" reuse code path in particular.\n\n\nRecord tests\n\n\nRead ownerDocument from the root container instance\n\n\nThis way createInstance() depends on the innermost container only for reading the namespace.\n\nTrack namespaces instead of creating instances early\n\nWhile we might want to create instance in the begin phase, we shouldn\'t let DOM guide reconciler design.\nInstead, we are adding a new concept of "host context". In case of ReactDOMFiber, it\'s just the current namespace.\nWe are keeping a stack of host context values, ignoring those that are referentially equal.\nThe renderer receives the parent context and type, and can return a new context.\n\nPop child context before reading own context and clarify API\n\nIt wasn\'t quite clear from the API which context was being returned by the renderer. Changed the API to specifically ask for child context, and thus to pop it before getting the current context.\nThis fixes the case with  to which I intended to give SVG namespace.\n\n\nGive SVG namespace to  itself\n\n\nDon\'t allocate unnecessarily when reconciling portals\n\n\nWe create stacks lazily so that if portal doesn\'t contain s, we don\'t need to allocate.\nWe also reuse the same object for portal host context state instead of creating a new one every time.\n\n\nAdd more tests for edge cases\n\n\nFix up math namespace\n\n\nMaintain a separate container stack\n\n\nFix rebase mistakes\n\n\nUnwind context on errors\n\n\nReset the container state when reusing the object\n\n\nAdd getChildHostContext() to ReactART\n\n\nRecord tests\n\n', 'Merge pull request #8491 from sebmarkbage/fibercurrenteventhandlers\n[Fiber] Read Event Handlers from the "Current" Fiber', 'Add unit tests for event bubbling in portals (#8509)\nThese bubble through the portal and up to the parent that rendered\nthe portal.', 'ReactDOMFiber-test Rename portal -> usePortal (#8535)\nFixes lint since I used portal as a variable name.\nWe typically use a verb for functions.', "update example to use this.state (#8425)\n\nIn the previous example, the code works even without using bind(this) in the constructor.\nthe reason being handleClick doesn't even use this and its just calling the global function alert.\nthis change make use of this via access this.state.\n", 'Fix casing typo in jsx-in-depth.md (#8542)', 'Add rootContainerInstance param to createTextInstance.\nThis mirrors a recent change in params passed to  and cleans up a HACK currently required for the native fiber renderer to create text views.', 'Merge pull request #8557 from bvaughn/add-create-text-instance-param\nAdd rootContainerInstance param to createTextInstance', 'Renamed InitializeJavaScriptAppEngine to InitializeCore', 'Renamed InitializeJavaScriptAppEngine mock to InitializeCore.', '[Fiber] Fix portal bugs (#8532)\n\n\nEnable additional (failing) portal tests\n\n\nFix portal unmounting\n\n\nWhen unmount a portal, we need to unmount its children from itself.\nThis is similar to what we would do for a root if we allowed deleting roots.\n\nSkip portals when looking for host siblings\n\nA portal is not part of that host tree despite being a child.\n\n\nFix comment typo\n\n\nAdd a failing test for portal child reconciliation\n\n\nIt is failing because portal bails out of update, seeing null in pendingProps.\nIt is null because we set pendingProps to nextPortal.children, which is null in this test.\n\nFix the bug when switching to a null portal child\n\nIf pendingProps is null, we do a bailout in beginWork.\nThis prevents unmounting of the existing child when the new child is null.\nWe fix this by changing portal fiber\'s pendingProps to be the portal object itself instead of its children.\nThis way, it is never null, and thus doesn\'t cause a false positive in the bailout condition.\n\n\nAdd a comment about HostPortal in getHostSibling\n\n\nRevert the fix because I don\'t know why it worked\n\n\nunmountHostComponents() should have worked despite finding the wrong parent because it should have changed the parent when pushing and popping the portals.\n\nDon\'t call commitDeletion recursively\n\nThis leads to a "Cannot find host parent" bug because commitDeletion() clears the return field.\nWhen we\'re inside the loop, we assign node.sibling.return to node.return but by this moment node.return has already been nulled.\nAs a solution we inline code from commitDeletion() without the nulling.\nIt still fails tests but for a different reason (unrelated bug).\n\nSkip portal children in commitNestedUnmounts()\n\nWe are currently already visiting them in commitUnmount() portal case since it\'s recursive.\nThis condition avoids visting them twice.\n\nSet node.child.return before going deeper\n\nIt doesn\'t seem to influence existing tests but we have this protection in all other similar places.\nIt protects against infinite loops.\n\nRevert "Fix the bug when switching to a null portal child"\n\nThis reverts commit ed9747deedf11455ba3eb65648007ab99c26ea58.\nI\'ll solve this by using an array in place of null instead.\n\nUse [] for empty Portal pendingProps\n\nThis avoids a false positive bailout with pendingProps == null when portal is empty.', "[Fiber] Remove array indirection in host context (#8544)\n\n\nRemove array indirection in host context\n\n\nKeep a single context stack with a null sentinel\n\n\nThis lets us keep subtrees separated without maintaining independent context arrays for subtrees.\n\nThere is always exactly one null by the time we pop a portal\n\nI was trying to be smart but didn't need to.\n\nCache current context\n", 'Merge pull request #8558 from bvaughn/rename-initialize-core\nRenamed InitializeJavaScriptAppEngine to InitializeCore', 'Disable coverage on PRs on Circle (#8569)', 'Warn if upper-case tags are used\nIn #2756 we ended up using toLowerCase to allow case insensitive HTML tags.\nHowever, this requires extra processing every time we access the tag or\nat least we need to process it for mount and store it in an extra field\nwhich wastes memory.\nSo instead, we can just enforce case sensitivity for HTML since this might\nmatter for the XML namespaces like SVG anyway.', "Only do runtime validation of tag names when createElement is not used\nWe introduced runtime validation of tag names because we used to generate\nHTML that was supposed to be inserted into a HTML string which could've\nbeen an XSS attack.\nHowever, these days we use document.createElement in most cases. That\nalready does its internal validation in the browser which throws. We're now\ndouble validating it. Stack still has a path where innerHTML is used and\nwe still need it there. However in Fiber we can remove it completely.", 'Pass type to the relevant host config methods\nInstead of reading it from the DOM node.', 'Merge pull request #8563 from sebmarkbage/enforcelowercasetags\nDrop runtime validation and lower case coercion of tag names', 'Give setState callbacks componentWillUpdate semantics\nThis matches the behavior in Fiber. Normally we would change Fiber\nto match Stack to minimize breaking changes for the initial release.\nHowever, in this case it would require too large a compromise to change\nFiber to act like Stack.', 'Test top-level callback when re-rendering with same element', 'Merge pull request #8528 from acdlite/callbacksemantics\nGive setState callbacks componentWillUpdate semantics', 'HostRoot no longer pops context provider in complete phase\nAlso added an invariant warning to guard against context being popped too many times.', 'Merge pull request #8568 from bvaughn/top-level-context-push-pop\nHostRoot no longer pops context provider during complete phase', 'Fix test renderer unmount (#8512)\n\n[react-test-renderer] unmount the inner instances\n\nFixes https://github.com/facebook/react/issues/8459\n\n\nadd a test for https://github.com/facebook/react/issues/8459\n\n\nadd new test in tests-passing.txt\n\n', "Prepare new composite child before removing old (#8572)\nThis matches what we do in Fiber -- and doing it this way is the only way we can prepare new views in the background before unmounting old ones.\nIn particular, this breaks this pattern:\n```js\nclass Child1 extends React.Component {\n  render() { ... }\n  componentWillMount() {\n    this.props.registerChild(this);\n  }\n  componentWillUnmount() {\n    this.props.unregisterChild();\n  }\n}\nclass Child2 extends React.Component {\n  render() { ... }\n  componentWillMount() {\n    this.props.registerChild(this);\n  }\n  componentWillUnmount() {\n    this.props.unregisterChild();\n  }\n}\nclass Parent extends React.Component {\n  render() {\n    return (\n      showChild1 ?\n         this.registered = child}\n          unregisterChild={() => this.registered = null}\n        /> :\n         this.registered = child}\n          unregisterChild={() => this.registered = null}\n        />\n    );\n  }\n}\n```\nPreviously, this.registered would always be set -- now, after a rerender, this.registered gets stuck at null because the old child's componentWillUnmount runs after the new child's componentWillMount.\nA correct fix here is to use componentDidMount rather than componentWillMount. (In general, componentWillMount should not have side effects.) If Parent stored a list or set of registered children instead, there would also be no issue.", 'mockImpl -> mockImplementation\nD4329549', 'Added new fiber-based renderer for native dubbed ReactNativeFiber', 'Merge pull request #8560 from bvaughn/react-native-fiber\nReactNative fiber renderer', "[Fiber] Fix some of the warnings (#8570)\n\n\nImplement component stack for some warnings in Fiber\n\n\nKeep Fiber debug source up to date\n\n\nWhen an element changes, we should copy the source and owner again.\nOtherwise they can get stale since we're not reading them from the element.\n\n\nRemove outdated TODOs from tests\n\n\nExplicitly specify Fiber types to include in the stack\n\n\nFixes an accidental omission when both source and owner are null but displayName exists.\n\nFix mised Stack+Fiber test to not expect extra warnings\n\nWhen we're in Fiber mode we don't actually expect that warning being printed.\n\n\nWarn on passing different props to super()\n\n\nImplement duplicate key warnings\n\n\nWe keep known keys in a set in development. There is an annoying special case where we know we'll check it again because we break out of the loop early.\nOne test in the tree hook regresses to the failing state because it checks that the tree hook works without a Set available, but we started using Set in this code. It is not essential and we can clean this up later when we decide how to deal with polyfills.\n\nMove ReactTypeOfWork to src/shared\n\nIt needs to be available both to Fiber and Isomorphic because the tree hook lives in Isomorphic but pretty-prints Fiber stack.\n\nAdd dev-only ReactDebugCurrentFiber for warnings\n\nThe goal is to use ReactCurrentOwner less and rely on ReactDebugCurrentFiber for warning owner name and stack.\n\nMake Stack invariant messages more consistent\n\nFiber used a helper so two tests had the same phrasing.\nStack also used a helper for most invariants but hardcoded a different phrase in one place.\nI changed that invariant message to use a helper which made it consistent with what it prints in Fiber.\n\nMake CSSPropertyOperations use getCurrentFiberOwnerName()\n\nThis gets mount-time CSS warnings to be printed.\nHowever update-time warnings are currently ignored because current fiber is not yet available during the commit phase.\nWe also regress on HostOperation hook tests but this doesn't matter because it's only used by ReactPerf and it doesn't work with Fiber yet anyway. We'll have to think more about it later.\n\nSet ReactDebugCurrentFiber during the commit phase\n\nThis makes it available during updates, fixing the last failing test in CSSPropertyOperations.\n\nAdd DOM warnings by calling hooks directly\n\nIt is not clear if the old hook system is worth it in its generic incarnation. For now I am just hooking it up to the DOMFiber renderer directly.\n\nAdd client-side counterparts for some warning tests\n\nThis helps us track which warnings are really failing in Fiber, and which ones depend on SSR.", "Don't drop updates until they are committed\nRestructures the update queue to maintain a pointer to the first\npending update, which solves a few problems:\n\nUpdates that occur during the begin phase (e.g. in cWRP of a child)\naren't dropped, like they are currently. This isn't working yet because\nthe work priority is reset during completion. The following item will\nfix it.\nSets us up to be able to add separate priorities to each update in\nthe queue. I'll add this in a subsequent commit.\n", 'Schedule callback effects while merging updates\nThis allows us to remove the hasCallback flag.', 'Replace .hasForceUpdate with ForceUpdate effect\nRemoves another field from the update queue', "Separate priority for updates\nWhen resetting the priority in the complete phase, check the priority of\nthe update queue so that updates aren't dropped.\nUpdates inside render, child cWRP, etc are no longer dropped.\nThe next step is sort the queue by priority and only flush updates that\nmatch the current priority level.", 'Use lastProgressedUpdate pointer instead of firstPendingUpdate\nWe need to be able to access both, and since the list uses forward\npointers, it makes more sense to point to the one that comes first.\nOtherwise to get the last progressed update you have to start at the\nbeginning of the list.', "Apply pending updates in order of priority\nThe queue maintains a pointer to the last progressed update in the list.\nUpdates that come after that pointer are pending. The pointer is set to\nthe end of the list during reconciliation.\nPending updates are sorted by priority then insertion. Progressed\nupdates are sorted by the order in which they were applied during\nreconciliation, which may not be by priority: if a component bails out\nbefore the updates are committed, in the next render, the progressed\nupdates are applied in the same order that they were previously, even if\na higher priority update comes in.\nOnce a progressed update is flushed/committed, it's removed from\nthe queue.", 'Add unstable_deferredUpdates\nThis is needed to get the triangle demo working.', "Don't rely on commit phase effect to clear updates\nInstead clear updates on the work-in-progress during the begin phase.\nAborted updates are recovered by cloning from the current fiber.", 'Add fast path for appending updates to the end of the queue\nThis is the most common case, so we should avoid scanning the entire\nlist to get to the end.', 'Handle setState inside an updater function\nThe update is scheduled as if the current processing update has already\nbeen processed; if it has the same or higher priority, it will be\nflushed in the same batch.\nWe also print a warning.', 'Priority context during reconciliation\nsetState inside render/cWRP should have the same priority as whatever\nlevel is currently being reconciled.', 'Simplify test for whether we should flush a pending commit\nWe can just check if the deadline has expired.', 'Move priority context change to findNextUnitOfWork\n...rather than changing it on every unit of work.', 'Update tests to not rely on key iteration order', 'Use 255 instead of infinity\nInfinity is a floating point value.', "Remove ForceUpdate effect\nGo back to using a flag, instead. I removed it before because I thought\nwe might want to get rid of the top-level UpdateQueue type and put\nthe fields directly on the fiber, but since we're keeping UpdateQueue\nwe can put hasForceUpdate on there.", 'Merge pull request #8538 from acdlite/fiberupdatequeue\n[Fiber] Separate priority for updates', 'Use warning instead of console.error', 'Clean up some style nits and other code detritus in the update queue', 'Remove confusing for-loop in favor of a helper function\nThis logic is hopefully easier to follow. Added more inline comments\nto explain how the algorithm works.', 'bailoutOnLowPriority correct pushes context for ClassComponents to mirror complete phase context pop', "Don't drop updates from queue when calling replaceState\nWe should be able to support passing a function to replaceState, which\nreceives the accumulation of all the previously applied state updates.\nWhich means we shouldn't drop those updates from the queue. Technically,\nwe could drop them only when an object is passed to replaceState, but\nthat seems like more trouble than it's worth.", 'Merge pull request #8587 from acdlite/fiberupdatequeuefollowup\n[Fiber] UpdateQueue follow-up improvements', 'Use an UpdateQueue for top-level updates\n...rather than mutate the pendingProps directly, which throws away any\npreviously scheduled work.', 'Remove unmountContainer\nInstead, renderers should pass null to updateContainer.', '[Fiber] Nesting validation warnings (#8586)\n\n\n(WIP) Nesting warnings\n\n\nRemove indirection\n\n\nAdd a note about namespace\n\n\nFix Flow and make host context required\n\n\nThis makes it easier to avoid accidental nulls.\nI also added a test for the production case to avoid regressing because of DEV branches.', 'Merge pull request #8590 from bvaughn/unexpected-context-pop\nbailoutOnLowPriority pushes context to mirror complete phase context pop', "Don't warn about class component usage of getInitialState if state is also set\nWe warn about getInitialState() usage in class components because users may have accidentally used it instead of state. If they have also specified state though then we should skip this warning.\nContext: https://twitter.com/soprano/status/810003963286163456", "Merge pull request #8594 from bvaughn/dont-warn-about-getInitialState-on-class-if-state-set\nDon't warn about class components using getInitialState if state is set", 'Merge pull request #8584 from acdlite/fiberhostrootupdatequeue\n[Fiber] Queue top-level updates', 'Revert "[Fiber] Queue top-level updates"', 'Merge pull request #8605 from facebook/revert-8584-fiberhostrootupdatequeue\nRevert "[Fiber] Queue top-level updates"', 'Use an UpdateQueue for top-level updates\n...rather than mutate the pendingProps directly, which throws away any\npreviously scheduled work.', 'Remove unmountContainer\nInstead, renderers should pass null to updateContainer.', "Handle case where host environment throws when working on failed root\nOtherwise you fall into an infinite loop where root fails -> host env\nthrows -> root fails...\nThis is a worst-case scenario that should only be possible if there's\na bug in the renderer.", 'Add test for errors in host config while working on failed root\nTest for a bug fixed in the previous commit that was causing an\ninfinite loop.', 'Delete fiveArgumentPooler (#8597)', 'Merge pull request #8606 from acdlite/fiberhostrootupdatequeue\n[Fiber] Queue top-level updates (take 2)', 'Update Flow to 0.37.0 (#8608)\nNothing really changes.', 'Handle errors thrown when committing root\nPreviously this caused an infinite loop.', 'Merge pull request #8610 from acdlite/fiberfixrooterror\n[Fiber] Handle errors thrown when committing root', 'Schedule state and callback in the same batch\nFixes an issue (in both Stack and Fiber) where enqueueSetState causes\na synchronous update that flushes before enqueueCallback is ever called.\nNow enqueueSetState et al accept an optional callback so that both\nare scheduled at the same time.', "Remove enqueueCallback from updater API\nThis isn't being used anymore.\nAlso removes addCallback from ReactFiberUpdateQueue.", 'Merge pull request #8585 from acdlite/batchstateandcallback\nSchedule state and callback at the same time', "Always reset context before beginning new work\nThis consolidates the reset of context to one single place right before\nany new work is started.\nThis place is burried in a bit of an awkward place but findNextUnitOfWork\nhappens right before any new work starts. That way we're guaranteed to have\nan empty stack before we start anything new.\nThe benefit of this is that we don't have to rely .return being null when\nentering beginWork but we also don't have to check it every time in the\nhot path.", 'Move all the begin work stuff into their own helper functions\nThis just moves things around to continue the pattern that we already\nstarted.', 'Compare memoized props in functional component branch\nThe functional component branch is a bit special since it has sCU in it.\nThe class component branch actually already covers this in a bit convoluted\nway.\nI will next replicate this check in each other branch.', "Add bailout to HostRoot\nThis doesn't need to compare props because it doesn't use props,\nonly state.", "Move props equality check into each branch\nNow we only bail out once we've entered each branch.\nThis has some repetition with regard to hasContextChanged but I'm hoping\nwe can just get rid of all those branches at some point since they're\nmostly for backwards compatibility right now.", 'Delete hasPendingUpdate\nThis is no longer needed. It is effectively covered by other branches\nthat tries to being merging the update queue which yields the same state\nobject as before if there is no work. That in turn bails out.\nWe can shortcut in the relevant paths if needed.', "Move isHostComponent branches out of bailout\nSince we only call bailout from within the host component branch now, we\ncan just move this to the branch where we already know that this is a\nhost component.\nAs part of this I noticed that we don't always push the host context so\nI moved that to the beginning of the branch.", 'Move other branches out of the bail out\nThis is the same thing as the previous commit but with class, root and portal.\nI noticed host and portal now already covers this case in their branches\nsince pushHostContainer is always at the top.', 'Improve error messages for invalid element types (#8612)', 'Merge pull request #8613 from sebmarkbage/fiberrefactorbailout\n[Fiber] Refactor bailoutOnFinishedWork', "Call refs and lifecycles on indeterminate components (#8614)\nThis was a bug because of the split between ClassComponent and IndeterminateComponent -- we didn't mark effects or push context when we come from an indeterminate component. Now they behave the same way.\nThe code is even clumsier than before but I'm pretty worried we'll screw these up in the future if we don't unify the paths.\nNot many components exercise this path but Relay containers do so it's noticeable.", '[Fiber] Make requestIdleCallback() and requestAnimationFrame() shims async (#8591)\n\n\nAdd a failing test for recursion check\n\n\nMake requestIdleCallback() and requestAnimationFrame() shims async\n\n\nThey no longer need to be sync in tests because we already made DOM renderer sync by default.\nThis fixes a crash when testing incrementalness in DOM renderer itself.\n\n\nStyle fix\n\n\nFix lint\n\n', "Added ReactFiberStack shared by ReactFiberContext and ReactFiberHostContext\nReactFiberStack is the new underlying stack used by ReactFiberContext and ReactFiberHostContext. The goal is to simplify the 2 context managers and to add more errors/dev-warnings when we pop unexpected.\nThis changeset currently causes a lot of tests to fail (as we are currently popping too many times and/or in the wrong order). I'm pushing this branch now to share with Sebastian as he is working on a related cleanup pass at beginWork.", 'Generic type added to StackCursor. Default emptyObject replaced with null.', 'Combined unwindContext and unwindHostContext into unwindContexts', 'Tightened up Fiber | null type in ReactFiberStack to always require Fiber', 'Avoid popping hosts that do not provide unique contexts', 'Avoid reading the same StackCursor current multiple times', 'ReactFiberStack cursor values are no longer corrupted on pop', "Removed exact object type for StackCursor Flow type\nThis was causing the 'react:extract-errors' Gulp taks to fail.", 'Jest preprocessor better aware of error-codes/codes.json WRT caching', 'Merge pull request #8622 from bvaughn/preproccessor-jest-cching\nJest preprocessor better aware of error-codes/codes.json WRT caching', 'Improved Flowtypes in response to code review feedback', 'Removed redundant calls to ReactFiberStack.reset()', 'Merge pull request #8611 from bvaughn/shared-context-stack\nAdded ReactFiberStack shared by ReactFiberContext and ReactFiberHostContext', 'Upgrade jest APIs to match www (#8536)\nD4298654, D4298713', 'Update to Jest 18 (#8621)', "[Fiber] Push class context providers even if they crash (#8627)\n\nPush class context providers early\n\nPreviously we used to push them only after the instance was available. This caused issues in cases an error is thrown during componentWillMount().\nIn that case we never got to pushing the provider in the begin phase, but in complete phase the provider check returned true since the instance existed by that point. As a result we got mismatching context pops.\nWe solve the issue by making the context check independent of whether the instance actually exists. Instead we're checking the type itself.\nThis lets us push class context early. However there's another problem: we might not know the context value. If the instance is not yet created, we can't call getChildContext on it.\nTo fix this, we are introducing a way to replace current value on the stack, and a way to read the previous value. This also helps remove some branching and split the memoized from invalidated code paths.\n\nAdd a now-passing test from #8604\n\nAlso rename another test to have a shorter name.\n\nMove isContextProvider() checks into push() and pop()\n\nAll uses of push() and pop() are guarded by it anyway.\nThis makes it more similar to how we use host context.\nThere is only one other place where isContextProvider() is used and that's legacy code needed for renderSubtree().\n\n\nClarify why we read the previous context\n\n\nUse invariant instead of throwing an error\n\n\nFix off-by-one in ReactFiberStack\n\n\nManually keep track of the last parent context\n\n\nThe previous algorithm was flawed and worked by accident, as shown by the failing tests after an off-by-one was fixed.\nThe implementation of getPrevious() was incorrect because the context stack currently has no notion of a previous value per cursor.\nInstead, we are caching the previous value directly in the ReactFiberContext in a local variable.\nAdditionally, we are using push() and pop() instead of adding a new replace() method.", 'Fiber: Fix reentrant mounting in synchronous mode (#8623)', 'Fix typo', "Don't call sCU with null props (#8633)\nI missed this case in 8613 and it broke the triangle demo.", 'Update conditional-rendering.md (#8636)\nStating the fact that component lifecycle methods will still fire as normal even though you return null from the render method.', 'remove superfluous check in while loop', 'Validate that update callback is a function (#8639)', 'Relax test about rendering top-level null (#8640)', 'Include owner in invalid element type invariant (#8637)', "'npm init' needed before installing react via npm. (#8649)\n\n'npm init' needed before installing react via npm.\n\nI was trying to install react in my django project directory and was getting warnings about package.json not being present. Started this SO post (http://stackoverflow.com/questions/41340909/npm-cant-find-package-json-when-installing-react/41340975#41340975) to figure it out. I think it'll be useful to others too if we add it in the documentation itself.\n\nTweak instructions\n", "Changed webpack's hyperlink (#8650)\n..to point to 2.x documentation instead of 1.x (and to be consistent with other links on the page)", 'Renderers can schedule commit-time effects for initial mount\nThe finalizeInitialChildren HostConfig method now utilizes a boolean return type. Renderers can return true to indicate that custom effects should be processed at commit-time once host components have been mounted. This type of work is marked using the existing Update flag.\nA new HostConfig method, commitMount, has been added as well for performing this type of work.\nThis change set is in support of the autoFocus prop.', 'Merge pull request #8646 from bvaughn/focus-side-effect\nRenderers can queue commit effects for initial mount', 'Wrap top-level mount and unmount in syncUpdates\nFor legacy purposes. Only enabled in the DOM renderer. We can remove\nthis in a future release when we enable incremental-by-default.\nThis change is unobservable because syncUpdates actually schedules\nTask updates when it is called from inside another batch. The correct\nbehavior is to recursively begin another batch of work. We will fix it\nin a subsequent commit.', "If an error is thrown and there's no nextUnitOfWork, it's fatal error\nThis can only be caused by a bug in the renderer, but we should handle\nit gracefully anyway.\nAdded a TODO to change capturedErrors and failedBoundaries so that they\nare sets of instances (stateNodes) rather than fibers, to avoid having\nto check the alternate. (This outside the scope of this PR.)", "Allow performWork to be called recursively\nCurrently we assume that performWork is never called recursively.\nIdeally that is the case. We shouldn't rely on recursion anywhere\nin Fiber.\nHowever, to support the use of syncUpdates as an opt-in to forced-\nsynchronous updates, we need the ability to call performWork\nrecursively.\nAt the beginning of performWork, the state of the scheduler is saved;\nbefore exiting, that state is restored, so that the scheduler can\ncontinue where it left off. I've decided to use local variables to stash\nthe previous state. We could also store them in a record and push it to\na stack, but this approach has the advantage of being isolated to\nperformWork.", "syncUpdates prevents Synchronous priority from being downgraded to Task\nTypically, a sync update is downgraded to Task priority if it's\nscheduled within another batch of work, e.g. within a lifecycle like\ncomponentDidMount. But syncUpdates should force sync updates to not\nbe downgraded to Task. This will cause performWork to be\ncalled recursively.", "Disallow forced sync updates during begin phase\nStack allows this, but in Fiber it may cause an infinite loop. Instead\nwe'll print a warning and defer the update by giving it Task priority.", 'prepareForCommit returns info object to be passed resetAfterCommit\nThe DOM renderer assumes that resetAfterCommit is called after\nprepareForCommit without any nested commits in between. That may not\nbe the case now that syncUpdates forces a nested update.\nTo address, this changes the type of prepareForCommit to return a value\nwhich is later passed to resetAfterCommit.', 'Merge pull request #8634 from acdlite/fibersyncmount\n[Fiber] Sync mount and unmount', 'Merge pull request #8641 from jddxf/remove-superfluous-check\nremove superfluous check in while loop', 'Should not re-render as the result of a null state update\nFiber already happens to behave this way; this just adds a test.\nTODO: Should we add this feature to Stack, too?', 'Should not re-render as the result of a null state update (Stack)\nStack now passes test added in previous commit.', 'No nested updates\nWe may decide to provide this ability as an escape hatch in the future.', 'update to codebase-overview.md', 'fiber example typo', 'Update conferences.md', 'Merge pull request #8674 from neeldeep/patch-1\nUpdate conferences.md', 'Merge pull request #8673 from madeinfree/patch-1\nfiber example typo', 'Merge pull request #8671 from bonham000/update-docs\nupdate to codebase-overview.md', 'Use unbatchedUpdates to opt-out of batching\nReverses the effect of batchedUpdates by resetting the current\nbatching context.\nDoes not affect nested updates, which are always deferred regardless\nof whether they are inside a batch.', 'Merge pull request #8661 from acdlite/fiberunbatchedupdates\n[Fiber] Introduce API to opt-out of batching', 'Merge pull request #8658 from acdlite/nullupdatetest\nShould not re-render as the result of a null state update', 'Add callback validation to fiber-based renderers\nMoved ReactFiberClassComponent validateCallback() helper function into a standalone util used by both fiber and stack implementations. Validation now happens in ReactFiberUpdateQueue so that non-DOM renderers will also benefit from it.', 'Merge pull request #8677 from bvaughn/add-callback-validation-to-dom-render\nAdd callback validation to fiber-based renderers', 'Renamed React.js Conf to React Conf', 'Merge pull request #8679 from bvaughn/fix-react-conf-2017-name\nRenamed React.js Conf to React Conf in conferences.md', 'Fixed stray text appearing on top of the navbar at small screen sizes (#8681)', 'Nitpick: use FB style in doc', '[docs] Add a note about componentWillReceiveProps (#8234)\n\n\nComponent Lifecycle In Depth documentation\n\n\nfirst steps to improve react component reference\n\n\nimproved react component reference\n\n\nremove the component-lifecycle-in-depth\n\n\nadd a note for usage of ReactDOM.findDOMNode\n\n\none note on componentWillReceiveProps\n\n\nremove old useless images for lifecycle docs\n\n\nTweak wording\n\n', 'Update blog post link (#8421)', "Update state-and-lifecycle.md (#8424)\n\nUpdate state-and-lifecycle.md\n\nIsn't  clock state and props the same in this example?\n\nClarify\n", '[Docs] Fixed anchor links in Animations section (#8453)', "Fix typo in Proposing a Change section in how-to-contribute.md (#8498)\n\nFix typo in Proposing a Change section in how-to-contribute.md\n\nNot sure if it was actually intended or was a typo but changed 'If you intend to change to the public API' --> 'If you intend to make a change to the public API'\n\nSimplify\n", 'Fix typos (#8632)\n\n\nFix typos\n\n\nPut back x in Latinx\n\n', 'Replace Starter Kit with doc link (#8682)\n\n\nReplace Starter Kit with doc link\n\n\nhttps in Babel link\n\n', 'Update refs even if shouldComponentUpdate returns false\nImplemented using a Ref effect type.', 'Merge pull request #8685 from acdlite/fiberrefeffect\n[Fiber] Update refs even if shouldComponentUpdate returns false', 'Higher-Order Components docs withSubscription() example fix (#8694)', '"Don\'t Mutate the Original Component" example and description mismatch (#8695)', "Fix AMD and Brunch issues (#8686)\n\n\nAdd manual build fixtures\n\n\nInject ReactDOM into ReactWithAddons from ReactWithAddons\n\n\nWe used to read ReactDOM as a global inside ReactAddonsDOMDependenciesUMDShim.\nThis didn't work in AMD environments such as RequireJS and SystemJS.\nInstead, I changed it so that ReactDOM gets injected into ReactWithAddons by ReactDOM itself.\nThis way we don't have to try to require it (which wouldn't work because AMD doesn't handle circular dependencies well).\nThis means you have to load ReactDOM first before using ReactDOM-dependent addons, but this was already the case before.\nThis commit makes all build fixtures pass.\n\n\nMemoize ReactDOM to avoid going into require on every access\n\n\nAdd Brunch fixture\n\n\nInline requires to work around Brunch bug\n\n\nSee #8556 and https://github.com/brunch/brunch/issues/1591#issuecomment-270742503 for context.\nThis appears to be a Brunch bug but we can keep a temporary fix until the next major.", '[Fiber] Throw when attempting to unmount at an invalid node (#8688)\n\n\nThrow when attempting to unmount at an invalid node\n\n\nRemove extra character after invariant\n\n', 'Initial import of react-release-manager', '[rrm] Move version reading up to app level', '[rrm] stable-prs: update milestone on PRs', '[rrm] Add logging to execInRepo, dry-run option', '[rrm] npm-publish command\nThis will publish all packages in build/packages/*.tgz to the "next" tag. If the current version is "stable" (doesn\'t trigger semver.prerelease()) then it will also update the "latest" dist-tag to point at that version.', '[rrm] Lint', '[rrm] Add commands for npm access checking/granting', '[rrm] Update to account for new react-test-renderer package', '[rrm] Improve init & config loading experience', '[rrm] Update init command to use Promise style', '[rrm] Create start-release command, create git utils\nThis does the essentials for starting a new release on the stable branch', '[rrm] Use git helper for all git commands', '[rrm] Rewrite stable-prs command\nNow with\n- better UX (can skip, handle each failed cherr-pick individually)\n- easier to read code\n- better error handling / cancellation', 'Add es6-promisify', 'Create data/ folder instead of crashing', "Display the help at startup, otherwise it's hard to figure out what to do", 'Abort if not on -stable branch', '[rrm] Update version script to account for dep change', '[rrm] Fix stable-prs command so it updates milestone correctly', 'Tweaks to npm-publish task', 'Remove unused import', 'Revert "Add es6-promisify"\nThis reverts commit c8cd133116475677f35cb166b476c4921f59bfbb.\nIt\'s not used in the code.', 'No longer a WIP, eh?', 'Updated hello world explanation message (#8703)\nOutput text in explanation now in sync with code sample', 'Update rendering-elements.md\nUpdating text to be in sync with sample html', 'Merge pull request #8704 from murtazahaveliwala/patch-3\nUpdate rendering-elements.md', 'Point all Webpack links to 1.x documentation (#8697)\n\n\nPoint all Webpack links to 1.x documentation\n\n\nAdd back webpack production guide, add warning\n\n', 'Add 15.4.2 changelog', 'Fix formatting', 'Add basic testing page', 'Properly slice out question mark in query string', 'Add React options loader.', 'Make toggleable test cases', 'Update input example readme', 'Move new example changes to fixtures folder', 'Add select, textarea, and range input fixtures\nAlso write up section on number inputs', 'Update section on number inputs', 'Fix lint issues in react-loader', 'Display value for controlled select and textarea', 'Use create-react-app for fixtures application\nThis moves the current fixture architecture to one based around create-react-app. There are a few important things to note:\n\nThe react-loader.js script is always loaded before the bundle and will populate React and ReactDOM on the window. It is then read from the window by all components.\nThe UI for the "React Sandbox" or "React Fixtures App" is also rendered with whatever version of React the user has selected. This means we dont have to deal with iframes or worry about multiple versions of React potentially interferring. But it also means that all components must be written using createClass to be fully backwards compatable. I tested back to 0.13.1 and it works fine.\n', 'Remove duplicate fixture components', 'Remove babel include from react-loader', 'Copy local build before starting', 'Add test prompt message when no fixture is selected', 'Remove extraneous binds from some fixtures', 'Test, not text. 🔤', 'Patch in console for IE9', 'Consolidate styles into single file', 'Fix some CORS issues in IE', 'Remove trailing comma, causing crash in IE11', 'Address lint issues.', 'Add missing semicolon', 'Move current fixtures into dom folder', 'Update readme for DOM Fixtures', 'Fix relative reference to build folder in DOM fixtures', 'Move build fixtures to fixtures/build', 'Remove primitive dom fixture READMEs for some test cases', 'Remove fixture react build files from git tracking', 'Dont recreate maked context unless unmasked context changes\nDoing so can lead to infinite loops if componentWillReceiveProps() calls setState()', 'Stop bubbling priority on equal priority\nUnobservable perf fix. Previously we only stopped bubbling if the\npriority was lower, but we can stop on equal priority, too.', 'docs(hoc): fix typo Rambda → Ramda (#8712)', 'Add missing entry for #7750 to 15.4.2 changelog', 'Write a release guide (#8705)\n\n\nWrite a release guide\n\n\nStyle nit\n\n', 'Add component stack to invalid element type warning (#8495)\n\n\nShow Source Error Addemden if __source available\n\n\nAdd Parent Stack on invalid element type\n\n\nrefactor to use normalizeCodeLocInfo\n\n\nRemove ( ) from addendum\n\n', 'docs: add missing period in shouldComponentUpdate doc (#8720)', 'Merge pull request #8706 from bvaughn/dont-recreate-masked-context-unless-needed\nDont recreate maked context unless unmasked context changes', 'Added React London conference, March 28th (#8722)\nThanks :-)', "Remove one extraneous backtick from line 116 of 'codebase-overview.md' (#8724). (#8726)", 'Improve unmasked context caching\nOnly store cached masked/unmasked contexts on context consumers. Move all references to __reactInternal* cached attributes inside of ReactFiberContext.', 'Move build fixtures to fixtures/packaging, updated paths', 'Use absolute paths for resolve.root in webpack packaging fixtures\nWebpack requires absolute paths here', 'Updating paths in packaging fixtures README', "Warn for callback refs on functional components (Stack + Fiber) (#8635)\n\n\nFiber: warn for refs on SFCs\n\n\nStateless refs: update warning to use component stack\n\n\nWarn for function refs (stack and fiber)\n\n\nAdd owner reference to ref warnings\n\n\nCentralize stack ref warnings in ReactRef.attachRef\n\n\nFiber stateless comp ref warning should only do work when necessary\n\n\nReactDebugCurrentFiber maybe FunctionalComponents should act this way instead\n\n\n(chore) scripts/fiber/record-tests\n\n\nAdd component._compositeType to ReactInstance Flow definition\n\n\nDon't handle 'stack inside fiber' case in the warning\n\n\nWe don't have a test for it. It's easy to mess it up and print the wrong thing so instead of verifying it I'll just remove this bit.\n\nRevert the change to getCurrentFiberOwnerName\n\nThis happened to work, but it is just a coincidence. This change didn’t really match what the function was supposed to be doing.\nI’m not sure what the correct fix would be yet so this commit breaks tests.\n\nAdd component indirection to the tests using owner name\n\nThis passes in Stack. It helps ensure we supply the correct owner name.\n\nInvalid type invariant should read owner from element\n\nThis brings the Fiber behavior in line with how Stack does it. The Fiber test was passing accidentally but broke down in more complicated cases (such as when we have an  between the owner and the failing element).\nNow we can also remove the weird cases from getCurrentFiberOwnerName() that didn't really make sense but helped get the (incomplete) tests pass in the past.\n\nFiber should throw on a string ref inside functional component\n", 'Merge pull request #8589 from nhunzaker/browser-testing\nAdd basic testing page for browser quicks', 'Merge pull request #8710 from acdlite/fiberscheduleupdateoptimization\n[Fiber] Stop bubbling priority on equal priority', 'Merge pull request #8723 from bvaughn/improve-unmasked-context-caching\nImprove unmasked context caching', '16.0.0-alpha.0', "Remove callbackList field from Fiber\nMoves it to UpdateQueue instead so that we don't waste memory for\ncomponents that don't have update queues.", "Reset invalid UpdateQueue fields when cloning from current\nSimilar to what cloneFiber does. No change in behavior, but it's more\nconsistent this way.", 'Merge pull request #8728 from acdlite/fibernocallbacklist\n[Fiber] Remove callbackList field from Fiber', "Swap components (#8735)\nIt's better to delare component before using.", 'Bump react-noop-renderer version to fix CI', "[Docs] Replace 'mix in' in PureComponent notes (#8730)\n\n\n[Docs] Replace 'mix in' in PureComponent notes\n\n\nStyle nit\n\n", "Fix single vs plural (#8738)\nMaybe it's not very important, just misprint fix", 'Replaced chalk.color.red with chalk.red', "Dedupe warnings about refs on functional components (#8739)\n\nVerify that functional component ref warning is deduplicated\n\nIt's not a big problem for string refs because the ref stays the same and the warning code path runs once per mount.\nHowever, it is super annoying for functional refs since they're often written as arrows, and thus the warning fires for every render.\nBoth tests are currently failing since we're mounting twice, so even the string ref case prints warnings twice.\n\nExtract the warning condition to the top level\n\nWe don't want to run getStackAddendumByID() unless we actually know we're going to print the warning.\nThis doesn't affect correctness. Just a performance fix.\n\nDeduplicate warnings about refs on functional components\n\nThis fixes the duplicate warnings and adds an additional test for corner cases.\nOur goal is to print one warning per one offending call site, when possible.\nWe try to use the element source for deduplication first because it gives us the exact JSX call site location.\nIf the element source is not available, we try to use the owner name for deduplication.\nIf even owner name is unavailable, we try to use the functional component unique identifier for deduplication so that at least the warning is seen once per mounted component.", "Added more info about refs in the documentation (#8707)\n\nUpdate refs-and-the-dom.md\n\nI want to propose some changes to the Refs and the DOM documentation page. \n- Make it clear that string refs are legacy. It seems that this information got lost during the transition to new docs and only some part stayed the same, which was confusing when first reading the docs.\n- Clarify and explain that during render, if the ref callback is provided, it\xa0will get called twice, first with null and then with the rendered DOM element. Discussed in https://github.com/facebook/react/issues/4533 and first proposed docs change in PR #8333.\nI've also planned on adding an example for passing the refs up the component chain based on something I've needed to solve myself (e.g. you want to connect two dynamic components by line in React, so you need to both use refs and propagate them up the chain), and while it would be great to read up on this in the docs, it may be too specific for this section; I'd be happy to hear any recommendations.\n\n\nAdds more specific information about the callback\n\n\nMoved the ref callback description to the Caveats section\n\n\nFixed suggested nits\n\n\nReplace 'each render pass' with 'updates'\n\n\nTweak the wording\n\n", "Revert CommitInfo to avoid extra allocation\nI added this when I thought we might support interleaved commits, but\nwe don't.", 'Merge pull request #8746 from acdlite/fiberrevertcommitinfo\n[Fiber] Revert CommitInfo to avoid extra allocation', 'Update index.html: add spaces between Web/React components (#8750)', "[Fiber] Implement test renderer (#8628)\n\n\nReactTestRenderer move current impl to stack dir\n\n\nReactTestRenderer on fiber: commence!\n\n\nReactTestRenderer: most non-ref/non-public-instance tests are passing\n\n\nMove ReactTestFiberComponent functions from Renderer to Component file\n\n\ntest renderer: get rid of private root containers and root Maps\n\n\nTestRenderer: switch impl based on ReactDOMFeatureFlag.useFiber\n\n\nReactTestRenderer: inline component creation\n\n\nReactTestRenderer: return to pristine original glory (+ Fiber for error order difference)\n\n\nTestRendererFiber: use a simple class as TestComponentInstances\n\n\nAdd getPublicInstance to support TestRenderer createNodeMock\n\n\nRename files to end. Update for mountContainer->createContainer change\n\n\ntest renderer return same object to prevent unnecessary context pushing/popping\n\n\nFiber HostConfig add getPublicInstance. This should be the identity fn everywhere except the test renderer\n\n\nappease flow\n\n\nInitial cleanup from sleepy work\n\n\nunstable_batchedUpdates\n\n\nStack test renderer: cache nodeMock to not call on unmount\n\n\nadd public instance type parameter to the reconciler\n\n\ntest renderer: set _nodeMock when mounted\n\n\nMore cleanup\n\n\nAdd test cases for root fragments and (maybe?) root text nodes\n\n\nFix the npm package build\n\n\nExplicitly require the Stack version by default.\nAdd a separate entry point for Fiber.\nWe don't add fiber.js to the package yet since it's considered internal until React 16.\n\nRelax the ref type from Object to mixed\n\nThis seems like the most straightforward way to support getPublicInstance for test renderer.\n\n\nRemove accidental newline\n\n\ntest renderer: unify TestComponent and TestContainer, handle root updates\n\n\nRemove string/number serialization attempts since Fiber ensures all textInstances are strings\n\n\nReturn full fragments in toJSON\n\n\nTest Renderer remove TestComponent instances for simple objects\n\n\nUpdate babylon for exact object type syntax\n\n\nUse $$typeof because clarity > punching ducks.\n\n\nMinor Flow annotation tweaks\n\n\nTweak style, types, and naming\n\n\nFix typo\n\n", '[Fiber] Fix to render falsy value as dangerouslySetInnerHTML (#8652)\n\n\n[Fiber] Fix to render falsy value as dangerouslySetInnerHTML\n\n\nAdd more cases and rename test for clarity\n\n', 'Add a test for stateless components returning undefined\nWe have one for arrays but it is going to become Stack-specific.', 'Remove a duplicate test\nThis test is identical to "should warn when stateless component returns array" earlier.\nIt was moved from another file in #5884 so it likely survived by accident.', "Remove unnecessary warning for invalid node\nWe have an invariant that checks the same case right afterwards.\nThe warning was originally added in #5884 with a distinct wording.\nHowever it was later changed to the same wording as the invariant in #6008.\nI don't see why we would want to have both since they're saying the same thing and with (almost) the same internal stack.", 'Make test that forbids arrays Stack-only', "Add feature flag to disable Fiber-specific features\nWe'll enable this in www in case we need to roll back to Stack.", 'Disallow Fiber-only render return types when feature flag is on\nExcept for portals, which we use in some places.', 'Throw if undefined is returned from a composite component', 'In DEV, allow treat auto-mocked render methods as if they return null\nConsider deprecating this in the future.', 'Update handling-events.md (#8762)\n\n\nUpdate handling-events.md\n\n\nUpdate handling-events.md\n\n', 'fix typo (#8760)\nIt seems that the class name in comments should be CallbackQueue', "fix failed tests on Windows #8737 (#8747)\n\n\nfix failed tests on Windows #8737\n\n\nUse regexp literal instead of RegExp constructor so that we don't need to bother with escaping special character like \\ and ..\nNote that by removing the path separator in regexp, I've relaxed the matching condition a little.Since there's little chance we have files like XXXReact.d.ts,it should not matter.\n\n", 'move blog post [Profiling Components with Chrome Timeline] into docs article (#8680)\n\n\nmove blog post into docs article\n\n\nmove to second section and changed description\n\n\nMinor tweak\n\n', 'Add error codes update to release process (#8749)\n\n\nAdd error codes update to release process\n\n\nUpdate\n\n', "Move memoization to begin phase\nCurrently we update the memoized inputs (props, state) during the\ncomplete phase, as we go back up the tree. That means we can't reuse\nwork until of its children have completed.\nBy moving memoization to the begin phase, we can do a shallow bailout,\nreusing a unit of work even if there's still work to do in its children.\nMemoization now happens whenever a fiber's child property is updated;\ntypically, right after reconciling. It's also updated when\nshouldComponentUpdate returns false, because that indicates that the\ngiven state and props are equal to the memoized state and props.", 'Confirm that a shallow bailout does not drop work in the child\nIncludes a test that confirms that work that is bailed out before\ncompleting can be reused without dropping the entire subtree.', '[Fiber Debugger] Bring up to date (#8765)\n\n\nIgnore orphaned fibers in the debugger\n\n\nRemember last entered code via localStorage\n\n\nUpdate Create React App\n\n\nMinor fixes\n\n\nDogfood Fiber\n\n', 'Add test for state merging when sCU is false', 'Top-level render only accepts a React element if feature flag is on', 'Warn if undefined is passed to top-level render\nMoved the top-level check to ReactChildFiber like the other ones', "Run test script and fix regressions\nFixes the case where there's an uncaught error and the root unmounts.\nWe implement this by rendering the root as if its child is null. Null is\nnot usually allowed at the top level, so we need to special case it.", 'Merge pull request #8757 from acdlite/fiberfeatureflag\nAdd feature flag to disable Fiber-only features', 'Merge pull request #8655 from acdlite/fibermemoizepremptedwork\n[Fiber] Move memoization to begin phase', 'Stack and Fiber warn about missing getChildContext method\nPrevious (probably unintentional) behavior of Stack was to allow components to define childContextTypes without also supplying a getChildContext property. This PR updates Fiber to (temporarily) mimic that behavior. It also adds warning messages to both Fiber and Stack (along with a test).\nFor the time being, Fiber components with a missing getChildContext method will return the parent context as-is, after warning.', 'Dedupe missing getChildContext warning by component name', 'Removed redundant gCC test', 'Improved error message wording for missing getChildContext() method', 'Improve Fiber debugger (#8767)\n\nSimplify the hooks\nCapture completion at the right moment\nAnimate the scroll with the fiber on the stack\nBetter display priorities\n', 'Small ReactPropTypes refactor (#8771)', 'Fix typo (#8770)', 'Merge pull request #8742 from bvaughn/stack-fiber-gcc-warning\nWarn about missing getChildContext method', 'Update higher-order-components.md (#8780)', 'Added memoization test for interrupted low-priority renders\nTest added to verify that a high-priority update can reuse the children from an aborted low-priority update if shouldComponentUpdate returns false.', 'Merge pull request #8645 from bvaughn/add-failing-scu-current-props-test\nAdded memoization test for interrupted low-priority renders', 'Log all Fiber errors w/ component stack (#8756)\nA new module has been added (ReactFiberErrorLogger). This logs error information (call stack and component stack) to the console to make errors easier to debug. It also prompts users to use error boundaries if they are not already using them.\nIn the future, perhaps this will be injectable, enabling users to provide their own handler for custom processing/logging. For the time being, this should help with issues like this / #2461.', 'Replaced an Update effect\xa0in complete phase with a Ref effect\nAlso removed an unnecessary conditional check and improved a flow cast.\nRelates originally to PRs #8646 and #8685', "[Fiber] Fix rendering SVG into non-React SVG tree (#8638)\n\nAdd a test for rendering SVG into a non-React SVG tree\n\nIt is failing in Fiber.\n\nAdd a test for rendering HTML into non-React foreignObject\n\nIt happens to pass in Fiber.\n\nDetermine root namespace by container namespace, not just tag\n\nA tag alone is not enough to determine the tree namespace.\n\nSkip the test that exhibits jsdom bug in non-createElement mode\n\njsdom doesn't give HTML namespace to foreignObject.innerHTML children.\nThis problem doesn't exist in the browsers.\nhttps://github.com/facebook/react/pull/8638#issuecomment-269349642\nWe will skip this test in non-createElement mode considering\nthat non-createElement mounting is effectively dead code now anyway.", "Remove error ref to the 'render' function (#8781)\nWhat is the render function of a functional component?", 'Add unit test to onlyChild to ensure onlyChild returns child element (#8667)\nAdd unit test to onlyChild to ensure onlyChild returns child element', 'Fix fiber/record-tests to work on windows (slash differences) (#8796)', 'fix HOC doc (#8802)', 'Fix to work fiber debugger with npm start (#8811)\n\n\nFiberDebugger uses packages built in local\n\n\nFix key warnings in FiberDebugger\n\n\nRemove react packages from package.json and yarn.lock for using pacakges built in local\n\n\nRemove fiber.js from files in package.json\n\n', 'add docs for building with Rollup (#8799)\n\n\nadd docs for building with Rollup\n\n\nTiny unrelated fix\n\n', 'Add Flow reminder to PR template (#8805)\n\n\nAdded flow to PR template\n\n\nAdded record-tests step to PR template and contribution docs\n\n\nUpdated order of PR checks\n\n', 'use an easier word (#8809)\n\nuse an easier word\n\nThe word mandatory is relatively difficult for people with ESL (English as a second language), so I propose an alternative word.\nThis would be much easier to understand.\n\nuse simpler word\n', 'I -> we (#8817)', 'Updating Thinking in React doc to replace refs with event handlers (#8815)\n\n\nUpdating Thinking in React doc to replace refs\n\n\nUpdating doc copy to reflect changes to example\n\n', 'Ignore fixtures in Flow and ESLint', 'Tweaked captured error log slightly based on feedback (#8785)\nTweaked captured error log slightly based on feedback. Normalized stack format/display for different browsers', 'Add "Handling Multiple Inputs" to Forms doc (#8552)\n\n\nadded "Handling Multiple Inputs"\n\n\nrenamed and added a codepen\n\n\nsimplified the example\n\n', 'Preserve license headers from dependencies in minified build (#8803)\n\nPreserve license headers from dependencies in minified build\n\nFixes #8789.\n\nBump minimal object-assign version\n', "[Fiber] Compute the Host Diff During Reconciliation (#8607)\n\nAllow renderers to return an update payload in prepareUpdate\n\nThis then gets stored on updateQueue so that the renderer doesn't need to\nthink about how to store this.\nIt then gets passed into commitUpdate during the commit phase.\nThis allows renderers to do the diffing during the time sliced path,\nallocate a queue for changes and do only the absolute minimal work to\napply those changes in the commit phase.\nIf refs update we still schedule and update.\n\n\nHack around the listener problem\n\n\nDiff ReactDOMFiber properties in prepareUpdate\n\n\nWe now take advantage of the new capability to diff properties early.\nWe do this by generating an update payload in the form of an array with\neach property name and value that we're about to update.\n\n\nAdd todo for handling wasCustomComponentTag\n\n\nAlways force an update to wrapper components\n\n\nWrapper components have custom logic that gets applied at the commit phase\nso we always need to ensure that we schedule an update for them.\n\nRemove rootContainerInstance from commitMount\n\nNo use case yet and I removed it from commitUpdate earlier.\n\n\nUse update signal object in test renderer\n\n\nIncorporate 8652 into new algorithm\n\n\nFix comment\n\n\nAdd failing test for flipping event handlers\n\n\nThis illustrates the problem that happens if we store a pointer to the\nFiber and then choose not to update that pointer when no properties change.\nThat causes an old Fiber to be retained on the DOM node. Then that Fiber\ncan be reused by the pooling mechanism which then will mutate that Fiber\nwith new event handlers, which makes them active before commit.\n\nStore current props in the RN instance cache and on the DOM node\n\nThis represents the current set of event listeners. By not relying on the\nFiber, it allows us to avoid doing any effects in the commit phase when\nnothing changes.\nThis is a bit ugly. Not super happy how this all came together.", 'Corrected a typo. (#8837)\nshoud -> should', 'Read "current" props from the node instead of the Fiber (#8839)\nIt\'s not just events that read the current props. Controlled components\ndo as well. Since we\'re no longer updating the Fiber pointer during updates\nwe have to instead read from the node props to get the current props.\nSince this method is no longer just used for events I renamed it.', 'Support for ReactFeatureFlags.logTopLevelRenders timing (#8687)\nCall console.time / console.timeEnd for the top level component when ReactFeatureFlags.logTopLevelRenders is enabled', "Polyfill requestIdleCallback when native is not available (#8833)\nI introduce the ReactDOMFrameScheduling module which just exposes\nrIC and rAF.\nThe polyfill works by scheduling a requestAnimationFrame, store the time\nfor the start of the frame, then schedule a postMessage which gets\nscheduled after paint. The deadline is set to time + frame rate.\nBy separating the idle call into a separate event tick we ensure that\nlayout, paint and other browser work is counted against the available time.\nThe frame rate is dynamically adjusted by tracking the minimum time between\ntwo rAF callbacks. This is not perfect because browsers can schedule\nmultiple callbacks to catch up after a long frame. To compensate for this\nwe only adjust if two consecutive periods are faster than normal.\nThis seems to guarantee that we will hit frame deadlines and we don't end\nup dropping frames. However, there is still some lost time so we risk\nstarving by not having enough idle time.\nEspecially Firefox seems to have issues keeping up on the triangle demo\nHowever, that is also true for native rIC in Firefox. It seems like more\nrender work is scheduled on the main thread pipeline and also that JS\nexecution just generally has more overhead.", 'Replace 2 occurrences of string in type ReactTestRendererJSON (#8816)\n\n\nReplace 2 occurrences of string in type ReactTestRendererJSON\n\n\nrestore string in ReactTestRendererFiber.js\n\n', 'Fix a typo (#8580)', "Match eslint's line length settings (#8845)", "Reminder: strip quotes from attributes with JS code (#8806)\n\nReminder: strip quotes from attributes with JS code\n\nWeb developers who are used to standards-compliant HTML and XML will, out of habit, put quotes around all attributes because the standards require them. Other templating systems like ASP.NET also require (or at least allow) quotes around attributes that contain code. This behavior will get users into trouble in JSX because a quoted attribute is always treated as a string literal, even if it contains curly-braced javascript code.  Let's add to the docs to help newbies evade this problem.\n\nTweak wording\n", 'Clarify use of ES6 idiom in Forms doc', 'Tweak RRM instructions to mention Yarn instead', 'Update test setup Windows compatible (#8651)\n\nrelates to #7849\n', 'Update conferences.md (#8841)\n\n\nUpdate conferences.md\n\n\nUpdate conferences.md\n\n\npath fixed\n\nChanged capitalization to match the website and Twitter\n', 'Add a link to "State Updates are Merged" in the forms doc (#8851)\n\n\nAdded a link to "State Updates are Merged"\n\n\nbetter inline links\n\n\nmoved the explanation down\n\n\nMinor unrelated tweaks\n\n', 'Two minor changes from internal (#8855)', 'Deprecate React.createMixin\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.', 'Add test for deprecation warnings', 'Add deprecation tests to fiber test tracker', 'Update deprecation wording to be less aggressive', 'Fix Flow (#8857)', 'Remove unnecessary null (#8858)\n\n\nRemove unnecessary null\n\n\nalways return string\n\n', 'Component -> Unknown (#8863)\nFix Flow issue and revert to showing "Unknown" in warnings for anonymous components', 'webpack 2 is now stable (#8859)\nRemove notice about different webpack versions\nUpdate webpack URLs', "Add benchmarking tutorial (#8698)\n\nAdd benchmarking tutorial\n\nI've written what I hope is the simplest introduction to benchmarking React components. It's meant to be straightforward and easy to follow for beginners. If you agree that it would be helpful, I'd like to add it to the docs.\nWould also welcome any and all feedback.\n\nJust put links together\n", '[docs] forEachAccumulated params', 'Use correct optional paramater JSDoc syntax', "Improve tests (#8866)\n\n\nrefactor one test suite to use jest's mock function\n\n\nkeep the comment\n\n", 'disableNewFiberFeatures bugfix: host component children arrays', 'Add test for iterables, too', 'Remove outdated TODO', 'Make disableNewFiberFeatures = true the default when runnings tests\nThis exposed a few more cases that I missed.', 'Add test for mocked render functions\nTreat them as if they return null', 'Use multiple checks instead of forking the entire function\nEasier to follow this way, and less chance the two paths will get\nout of sync.', 'Merge pull request #8797 from acdlite/fix-arrays\n[Fiber] disableNewFiberFeatures bugfix: host component children arrays', 'Bumping package.json versions from 16.0.0-alpha.0 to 16.0.0-alpha.1', "Swap .child and .stateNode in coroutines\nIt is slightly more useful this way because when we want to find host nodes\nwe typically want to do so in the second phase. That's the real tree where\nas the first phase is more of a virtual part of the tree.", 'Simplify coroutines by making yields stateless\nCoroutines was kind of broken because it tried to do reparenting and\nenabling state preservation to be passed along the coroutine. However,\nsince we couldn\'t determine which Fiber was "current" on a reified yield\nthis was kind of broken.\nThis removes the "continuation" part of yields so they\'re basically just\nreturn values. It is still possible to do continuations by just passing\nsimple functions or classes as part of the return value but they\'re not\nstateful.\nThis means that we won\'t have reparenting, but I actually don\'t think we\nneed it. There\'s another way to structure this by doing all the state in\nthe first phase and then yielding a stateless representation of the result.\nThis stateless representation of the tree can then be rendered in different\n(or even multiple) locations.\nBecause we no longer have a stateful continuation, you may have noticed\nthat this really no longer represent the "coroutine" concept. I will\nrename it in a follow up commit.', "Add failing tests for coroutines\nThere are a few different issues:\n\nUpdates result in unnecessary duplicate placements because it can't find the current fiber for continuations.\nWhen run together, coroutine update and unmounting tests appear to lock down in an infinite loop. They don't freeze in isolation.\n\nI don't have a solution for this but just leaving it for future fixes.", "Don't visit siblings of the coroutine when looking for yields\nWhen visiting the yields, the root is the stateNode of the coroutine. If\nits return value is wrong we'll end up at the alternate of the\nworkInProgress which will start scanning its children which is wrong.", "Don't bail to .child of coroutines\nThis should bail to stateNode instead.", 'ReactElement is private to isomorphic React (#8868)\nThis fixes the build since this dependency is not reachable from React DOM.', 'installation.md: Add missing "as" (#8871)', 'Merge pull request #8840 from sebmarkbage/statelesscoroutines\n[Fiber] Simplify coroutines by making yields stateless', '[examples] Use react-standalone (#7669)\n[examples] Use babel-standalone', '[Fiber] Support React DevTools (#8818)\n\n\nInitial React DevTools support for Fiber\n\n\nRecord a newly failing irrelevant test\n\n\nThis is fine because we don\'t use it in Stack anyway (at least not that part), and we also rely on Set/Map in other parts of code.\nThe newly failing test is the one saying "it works without Map/Set".\n\nExplicitly check for Fiber DevTools support\n\nThis lets us ignore pre-Fiber DevTools instead of crashing them by injecting a different API.\n\n\nTrack the roots in DevTools instead\n\n\nLol Dan this is not how warnings work in our codebase\n\n\nMove injection to the renderer\n\n\nNotify DevTools about unmounts\n\n\nMake it work in production\n\n\nFix lint and flow\n\n\nFixups\n\n\nAddress feedback\n\n', 'Fix typo in EventPropagators.js (#8879)', 'Got rid of linting errors on windows machines and a number of linting warnings. (#8846)', 'Declare REACT_DEVTOOLS_GLOBAL_HOOK for Flow (#8884)', 'Update context example for react-router v4 beta (#8889)\n\n\nUpdate context example for react-router@4.0.0-beta.1\n\n\nStyle nits\n\n', 'Fix lint (#8888)', 'Delete @nosideeffect annotation (#8882)', 'Add process.cwd to the test process shim', 'Fix incorrect markup for ie10 (#8886)', 'refer to object by name instead of function call context (#8892)', "Don't crash Fiber with old devtools (#8900)\nTypo.", "Added undefined example (#8899)\nInto section Booleans, Null, and Undefined Are Ignored I've added example with undefined.", "    Added double newline delimiters to the following functions/files: (#8777)\n\n\n'beginLifeCycleTimer' function of ReactDebugTool.js\n            * 'bindAutoBindMethod' function of ReactClass.js\n            * 'warnNoop' function of ReactServerUpdateQueue.js\n            * 'getInternalInstanceReadyForUpdate' function of ReactUpdateQueue.js\n            * 'warnNoop' function of ReactNoopUpdateQueue.js\n            * 'getDeclarationErrorAddendum' function of ReactDOMComponent.js\n            * 'getSourceInfoErrorAddendum' function of ReactElementValidator.js\n            * 'getDeclarationErrorAddendum' function of instantiateReactComponent.js and ReactElementValidator.js\n            * 'traverseAllChildrenImpl' function of traverseAllChildren.js\n            * 'attachRef' function of ReactRef.js\n            * 'mountIndeterminateComponent' function of ReactFiberBeginWork.js\n            * 'createFiberFromElementType' function of ReactFiber.js\n            * 'getDeclarationErrorAddendum' function of ReactDOMSelect.js\n            * 'unmountComponentAtNode' function of ReactMount.js\n            * 'getDeclarationErrorAddendum' function of ReactControlledValuePropTypes.js\n            * 'checkRenderMessage' function of CSSPropertyOperations.js\n            * 'getDeclarationErrorAddendum' function of ReactDomFiberSelect.js\n            * 'getCurrentComponentErrorInfo' function in 'ReactElementValidator'\n            * 'getDeclarationErrorAddendum' function in ReactDOMFiberComponent.js\n", '6049 add support for onCancel and onClose event (#6247)', 'Reassign process.env.NODE_ENV instead of shimming process', 'Fix findDOMNode algorithm', "Suppress lint warnings\nUsing [] is intentional because we don't want to trigger Babel plugin.", 'Add invariant\nDefensive coding to prevent an infinite loop.', 'Throw on invalid object type children\nSame behavior as Stack', "Fallback to owner of returnFiber\nWon't work if the returnFiber is a fragment. Not sure it matters;\nwarning will just be less descriptive.", "Allow object as textarea child\nPreserves Stack behavior. There's already a warning for this.", 'Add missing portal case to updateSlot switch statement', 'Run test script', 'Remove legacy React element warning', 'Merge pull request #8897 from acdlite/fiberfixfinddomnode\n[Fiber] Fix findDOMNode algorithm', 'Merge pull request #8890 from acdlite/fiberfragmentinvariants\n[Fiber] Throw on plain object children', "Don't swap the trees until after the first pass of the commit phase,\nwhere componentWillUnmount is called, but before the second pass,\nwhere componentDidMount/Update is called.", 'Add newline to warning', 'Merge pull request #8906 from acdlite/warningnewline\nAdd missing newline to warning', 'Merge pull request #8893 from gaearon/fix-dom-prod-test\nAdd process.cwd to the test process shim', 'Fix formatting of invalid element invariant\nMessage is slightly different for functional and class components.', 'Merge pull request #8908 from acdlite/fiberemptycomponent\n[Fiber] Fix formatting of invalid element invariant', 'Merge pull request #8905 from acdlite/fiberfinddomnodeunmount\n[Fiber] findDOMNode during componentWillUnmount', 'Lifting State Up more legible (#8691)', 'Update tutorial.md (#8792)\n\n\nUpdate tutorial.md\n\n\nFix quoting to be consistent\n\n', 'Link to CodePen editor rather than final result (#8849)\nPeople want to see the final JS/CSS/HTML, and the final result is already displayed by CodePen.', 'Update tutorial.md (#8896)\n\nUpdate tutorial.md\n\nThe status  used in Board can be deleted as well from render.\n\nLittle tweaks\n', 'Fix indentation in tutorial (#8914)', 'Explain arbitrariness of ref name in callback (#8913)\n\nExplain arbitrariness of ref name in callback \n\nThe sample code was confusing because it\'s not clear that "textInput" in this.textInput is an arbitrary name for the ref.\n\nTweak wording\n', 'Update conferences.md (#8915)\n\n\nUpdate conferences.md\n\n\nMove confs around\n\n', "Loosen assertion so it matches any production error\nThe exact error code isn't important.", 'Fix messages so that they use the same template as Stack\nThe production error code system depends on the exact template string\nthat is passed to invariant. This changes the Fiber templates to\nmatch the Stack ones.', 'Add extra invalid element info to invariant message', 'Warn when mounting into document.body', "Warn when rendering into React-rendered child that isn't a root", 'Move component base classes into a single file (#8918)', 'Warn if unmounting a tree that was rendered by a different copy of React', 'Merge pull request #8907 from acdlite/fiberproderrorcode\nLoosen assertion so it matches any production error', 'Revert change to test\nSee: https://github.com/facebook/react/pull/8907#issuecomment-277111278', 'Merge pull request #8921 from facebook/revert-8907-fiberproderrorcode\nRevert "Loosen assertion so it matches any production error"', 'Add onToggle event to details tag (#8831)\n\nAdd onToggle event to details tag\n\nFixes #8761\n\n\nMap onToggle event on ReactDOMFiberComponent\n\n\nTweak doc\n\n\nTrap events on setInitialProperties for details tag\n\n', 'Ensure first error is thrown if HostRoot catches two errors in commit phase (#8923)\nPreviously, we were overwriting capturedErrors with the second error and throwing that one.', 'Update higher-order-components.md', 'Change the order between function declaration and object assignment (#8895)\nThis fixes #8894', '[docs] Add note about refs on stateless components (#8916)\n\n\nAdd note about refs on stateless components\n\n\nMove info about refs in the stateless components to the main section\n\n\nSimplification of the part about refs and functional components\n\n\nTweaks\n\n\nMove sections around\n\n\nOops\n\n\nRearrange more sections\n\n', 'Inject DevTools integration for RN Fiber (#8930)', 'Bump fbjs to 0.8.9 (#8910)', 'Merge pull request #8927 from mitenka/patch-5\nUpdate higher-order-components.md', "Only expose FiberRoot at the top level instead of a Fiber (#8934)\nIt is strange to get a handle on the Fiber since it is one of possibly two\nroot Fibers. The correct way to get the current Fiber is through the\nroot.current.\nI exposed the Fiber originally because I thought we might use it for\nPortals but we went with a different approach. So we don't need this.", 'Rendering into an empty React-rendered element should not warn\nOnly warn if the container has a React-rendered child.', 'Run test script', 'Replace throw new Error with invariant module', 'Get rid of DEV only invariant', 'Add additional message to internal invariants\nThe message tells users that the error is likely due to a bug in React,\nand that they should file an issue.', 'Merge pull request #8926 from acdlite/fiberuseinvariant\n[Fiber] Replace throw new Error with invariant module', 'Inline internal error message\nSo that it is stripped out by the error code transform', 'Remove experimental support for maps as children', 'Continue warning if a Map is rendered as a child\nThe entries of a map are a two-element array of [key, value], which\nReact will treat as fragments with children. This is unlikely to ever\nbe the intended behavior, so we warn.', 'Merge pull request #8936 from acdlite/removemapsaschildren\nRemove experimental support for maps as children', 'Merge pull request #8937 from acdlite/inlineinternalerrormessage\nInline internal error message', 'Split into multiple invariants\nThat way the messages are extracted by the error code transform.', 'Merge pull request #8919 from acdlite/fibermounttests\n[Fiber] Mount/unmount warnings and invariants', 'Fix lint (#8945)', 'update react perf docs (#8060) and (#6174) (#8236)\n\n\nupdate react perf docs issue 8060 and 6174\n\n\nGrammar\n\n\nSmall stuff', 'Re-add the warning if PropType function is called manually (#8903)\n\nRevert "Revert "Warn if PropType function is called manually (#7132)""\n\nThis reverts commit be71f76ed8b7dbad25e3519455605252d3daf683.\nIn other words, now we again have the warning if you attempt to call PropTypes manually.\nIt was removed in #8066 but we shouldn\'t have done this since we still want to avoid people accidentally calling them in production (and even more so since now it would throw).\nFixes #8080.\n\n\nPass secret in ReactControlledValuePropTypes\n\n\nRecord tests\n\n', "Move DOM dependent tests out of the shared folder (#8954)\nWe have a bunch of tests that are meant to test generic React behavior.\nHowever, we've written the tests against the DOM renderer. This moves\ntests that depend on ReactDOM or ReactTestUtils out of the shared repo.\nThis will let us sync the shared repo directly to environments that don't\nsupport running these tests. Such as React Native.", "Don't test input value clean-up in Fiber\nFiber doesn't clean up host components; relies on GC.", 'Warn about isMounted inside render', 'Warn if findDOMNode is used inside render\nNeed to reset current owner to null before committing', 'Use isMounted instead of instance map to check if mounted', 'Warn about calling setState on an unmounted component', 'Make Stack error message more generic, too\nWe want to avoid passing around caller names because stripping them\nout in production complicates the code for little benefit.', "Merge pull request #8948 from acdlite/fiberdonttesthostcleanup\n[Fiber] Don't test input value clean-up in Fiber", 'findNodeHandle -> ReactNative.findNodeHandle (#8962)\nSubmitted this internally already.\nNeeded because people import this file directly and they might not have the renderer inject the findNodeHandle handler yet.', "Fixed ReactNativeFiber event handling regression (#8959)\n\n\nFixed ReactNativeFiber event system regression introduced in b354db2\nAlso added test coverage to ReactNativeEvents-test for Fiber\n\n\nReactNative tests now run against fiber renderer when env flag set\nUpdated the test-framework-setup file so that record-tests runs native tests against ReactNativeFiber. ReactComponentTreeHook native tests all now fail but that's expected.\n\n\nAvoid calling setChildren() if no children\n\n", 'Use separate feature flag for ReactTestRenderer (#8965)\nThe ReactDOMFeatureFlags is not reachable from the npm package since it is\nin a separate build so we need a separate one.', "Move React Native Environment Mocks to root (#8963)\nThese mocks are things we expect to be available in the React Native\nenvironment. I'd like to move them out of the renderer folder so that we\ncan sync that folder to React Native as is without overriding its mocks.\nI motivate by the fact that they're not really part of the renderer code\nitself. I leave the ReactNative mock since that is in fact part of the\nrenderer.", 'Fixed lint warning in master (#8960)', '16.0.0-alpha.2', 'Update Yarn lockfile with fresh deps', 'Fix release guide', 'Fix release guide again', 'Add toTree() method to stack and fiber TestRenderer (#8931)\n\n\nAdd toTree() method to stack and fiber TestRenderer\n\n\nAddress PR feedback\n\n\nRefactor TestRenderer to use correct root\n\n\nRebase off master and fix root node references\n\n\nAdd flow types\n\n\nAdd test for null rendering components\n\n\nRemove last remaining lint error\n\n\nAdd missing test\n\n', 'Hardened validateCallback to better handle null values (#8973)\nPreviously, calls to validateCallback() with a null callback value resulted in runtime errors if a certain transform was not applied prior to running. This commit wraps the invariant() with the condition check so as to avoid calling formatUnexpectedArgument() unless necessary. It also replaces the truthy/falsy callback check with an explicit check for improved performance.', 'Only fix a small wrong key in example (#8976)\nOnly fix a small wrong key in example', 'Remove React.__spread', 'Use T | null instead of ?T types\nFlow maybe types accept both null and undefined. When the final\nparameter of a function accepts a maybe type, passing nothing\n(undefined) successfully typechecks, which can lead to bugs if the\nomission is accidental. Being forced to pass null is harder to screw up.\nExplicit null checks are also faster.', 'Fix a typo in design principles doc (#8985)\nunambigious → unambiguous', 'Fixing grammatical error ... (#8987)\n... in the Create React App section.', 'Merge pull request #8978 from acdlite/nooptionaltypes\n[Fiber] Use T | null instead of ?T types', "Validate callbacks just before they are invoked\nThis delays the type check until the point when the engine will have to\nperform a type check regardless.\nBecause the error is now thrown during the commit phase rather than\nwhen the callback is originally scheduled, we warn in DEV when\nscheduling so it's easier to track down.", 'Fix createNodeMock doc to avoid Invariant Violation (#8989)', "Don't pass method names in production\nRequires us to make the error message a bit more generic.", 'Merge pull request #8974 from acdlite/fibercallbackvalidation\n[Fiber] Move callback validation to top level', 'Revert "Fix createNodeMock doc to avoid Invariant Violation" (#8990)', 'Move ReactElementType to shared (#8991)\nThis is currently used by both isomorphic and the renderer. I think that\nwe can probably split these up. The isomorphic type should actually be\ndifferent. It has to do with that the caller needs to know exactly which\ntype of element it is but this is never needed in the renderer which only\nneeds to know that the type is internally consistent.\nThe owner type is renderer dependent so it can literally be anything.', 'fix misspellings in comments and tests (#8946)\n\n\nfix misspellings in comments and tests\n\n\nrevert change in docs/js/react-dom.js\n\n', 'Missing a space for error 125 (#8981)', "Check alternate in ReactTreeTraversal (#8992)\nTest Plan: Couldn't figure out how to write a unit test. :\\ Verified that enter/leave bubbling now works correctly in one FB interface that was broken though.", 'Revert "Missing a space for error 125" (#8994)', 'Revert "Revert "Missing a space for error 125"" (#8995)', 'Update Thinking in React embed to match the link (#8996)', 'Remove an unnecessary condition', 'Revert "update react perf docs (#8060) and (#6174)" (#8997)', "Ignore events on text nodes (#9000)\nIn React Native events can fire on text nodes (on Android at least).\nIn that case, the current element will be a string and not props. These\ncan not have event handlers on them so we need to bail out so that\nwe don't throw later on.", 'Move validation calls behind DEV blocks (#8999)\nThis was done for Fiber but not Stack, causing these to throw in prod.', "Update to babel-plugin-transform-es2015-block-scoping 6.23 (#9002)\nNow we won't add closures unnecessarily. I verified that we have no code that throws -- adding some then running grunt build:modules correctly throws.", 'Switch to shipping Fiber in npm packages (#9015)', 'Fix Fiber devtools prod (#9019)', "Improved for a better understanding (#8970)\n\nImproved for a better understanding\n\nthat code shouldn't name this parameter onchange. It is so confusing for a starter of ReactJs like me. It looks like that the onChange is an common event from props.\n\nUpdate the lifting state up paragraph\n\nI tried to write something to explain to starter programmers in react, how we lift the state up calling a method defined by the ancestor and called by the children that will affect the children element.\n\nRewrite Lifting State Up\n", 'Remove extra article from documentation (#9028)', 'Doc consistency tweaks', 'Add more details to the doc', "Support assigning directly to this.state inside cWRP\nWe don't explicitly support this but it happens to work in Stack. We'll\ngive it the same semantics as replaceState.", "Should be able to setState inside cWRP before assigning to this.state\n...without dropping the update. This won't work the other way around,\nif you assign to this.state before calling setState. we'll add a\ndeprecation warning so people stop relying on this pattern.", "Add deprecation warning for assigning to this.state inside cWRP\nWe'll remove support for this in a future release, though we'll likely\nstill warn.", 'Run test script', 'Improved stack/fiber type-check to avoid false negative match when inst._rootNodeID is 0', 'Test should ensure that update is applied before corresponding render\nTightens up the test a bit to prevent regressions.', 'adds childContextTypes warnings for functional components\nReactStatelessComponent-test.js fails due to warnings not showing up when functional components mount or update. This PR ports the existing warnings from stack and re-applies them to fiber functional components and attempts to re-use some logic in ReactFiberContext that currently exists for showing warnings when dealing with class components.', 'moved require(emptyObject) to inline calls to get around referential mismatch\nDue to how Jest and other mocking libraries work in userland, modules that are required might not be referentially equal at various stages of the application lifecycle. This isnt a perfect fix, but by having the require calls inline, it has a better liklihood of ensuring emptyObject is the same reference', 'updated tests-failing and test-passing', 'Upgrade Jest to v19 (#9034)', 'Update Fiber debugger deps', 'Fixed typo: "Calcutor" to "Calculator" (#9047)', 'Merge pull request #9040 from acdlite/assignstateincwrp\nSupport for assigning to this.state inside componentWillReceiveProps', 'Fix bugs that occur when event responder unmounts during a touch event sequence\n\nThis PR adds a test (initially failing) for this case along with a fix for stack and fiber. The stack fix was copied from a Diff submitted by @sema. The fiber fix just required us to stop leaking properties for unmounted views.\nLonger term we may want to explicitly invoke a release event listener for a responder just before unmounting it. This PR does not do that.\n', 'Merge pull request #8949 from acdlite/fibercomponentlifecycletests\n[Fiber] Component lifecycle tests', 'Pass errorBoundary to logCapturedError (#9050)', 'Add test for hack to stop bubbling (#8922)', 'reverts previous changes to inlining requires and fixes test suite instead', 'fixed comment that was incorrect', 'mountClassInstance() now re-assigns instance.refs to emptyObject', 'reverted the getChildContext warning from showing on functional components in Fiber', 'reverted ReactDOMFeatureFlags', 'added a regression test for factory components', 'addressed code in feedback', 'Merge pull request #9043 from trueadm/fix-fiber-functional-componment-childcontext\n[Fiber] adds childContextTypes warnings for functional components', 'Merge pull request #9045 from trueadm/emptyObject-reference-mismatch-due-to-mocking\n[Fiber] fix ensure class components refs get re-assigned to emptyObject on mount', 'Remove ReactPropTypeLocationNames module\nReactPropTypeLocationNames was a map of location identifiers to location\ndisplay names, for use in warnings. But in practice, this did nothing\nexcept rename "childContext" to "child context." Not worth it, IMO.\nSince we are going to add an API for running prop type checks manually,\nwe need the ability to support arbitrary prop type locations. So\neach place that used to accept a ReactPropTypeLocation now just accepts\na string.', 'Add PropTypes.checkPropTypes API\nAllows users to check arbitrary objects against React prop types without\nrelying on the implementation details of the prop validators themselves.\nAn example of why this is important: some prop validators may throw,\nwhile others return an error object. Calling a prop validator manually\nrequires handling both cases. checkPropTypes does this for you.', 'Test that checkPropTypes does not throw or return a value', 'Invert dependency between checkPropTypes and checkReactTypeSpec\nExpressing checkReactTypeSpec using the public API frees us to move it\nto a separate module in the future.', "Remove warnOnRepeat option\nDon't need this internally; doubt external users will need it either", 'Change formatMessage parameter to getStack\nGives us flexibility in the future to deal with the stack and the\nmessage separately.', "Remove closure in checkReactTypeSpec by tracking stack info globally\nThere's a lot of overlap between ReactCurrentOwner,\nReactDebugCurrentFrame, and ReactDebugCurrentFiber that should\nbe consolidated.", "Wrap checkPropTypes in DEV conditional so it's stripped out in prod", 'Fix build config\nReactDebugCurrentFrame is shared state.\ncheckPropTypes should be imported via the main React export,\nnot imported directly.', 'Prevent extensions to fiber in DEV\nHelps us avoid accidentally adding fields to the fiber class', 'Update tutorial.md (#9051)', 'Missing onLoad and onError events on image tag (#9042)', 'Removed unnecessary if (#9031)', 'Merge pull request #9004 from acdlite/proptypescheck\nAPI for checking external objects against React prop types', 'Merge pull request #9054 from acdlite/fiberpreventextensions\n[Fiber] Prevent extensions to fiber in DEV', '16.0.0-alpha.3', 'fix version\nper https://github.com/facebook/react/commit/ca4325e3eff16b86879188eb996ebcc9a933336a#commitcomment-21033948', 'Merge pull request #9058 from nihgwu/patch-1\nfix version', 'Fix record-tests script\nResult of readConfig changed slightly in Jest 0.19.', 'Merge pull request #9060 from acdlite/fixrecordtestsscript\nFix record-tests script', 'Warn about setState in render', "Warn about setState inside getChildContext\nStack uses a module called ReactInvalidSetStateWarningHook, but all it\ndoes is warn about setState inside getChildContext. Doesn't seem worth\nkeeping around, so I didn't use it for Fiber, but if I'm mistaken I'll\nchange it.", 'Warn about nested renders', "Track which lifecycle method we're in during DEV\nUse this to detect setState inside of render instead of relying on\nthe owner.", "Use ReactDebugLifeCycle to track if we're inside getChildContext", 'Consolidate ReactCurrentFiber and ReactDebugLifeCycle', 'Merge pull request #8950 from acdlite/fibercompositecomponenttests\n[Fiber] ReactCompositeComponent-test.js', 'Flatten Text children before rendering (#9063)\nFrom FB-internal D4613844.', 'invokeGuardedCallback returns a thrown error\nWe can use this more flexible version for error handling in Fiber.\nThe DEV mode version uses same fake event trick as before to preserve\n"break on uncaught exception" behavior when debugging.', "invokeGuardedCallback should work when nested\nAdded a guard in the global error event listener to prevent nested\nerrors from being captured higher up the stack.\nAlso found a bug where the DEV version of invokeGuardedCallback would\ninfinite loop if there were nested invocations with the same name. Fixed\nby appending the depth to the fake event name. (I'm actually not sure\nwhy this is necessary.)", 'Use invokeGuardedCallback in place of Fiber try-catch blocks\nOnly in DEV. In production, continue using a local try-catch.', "Remove invokeGuardedCallbackProd\nWe weren't using it anywhere except for the test suite. Instead, we can\nchange the environment flag and run the tests in both environments.", 'Merge pull request #8961 from acdlite/fiberbreakonuncaught\n[Fiber] Preserve "Break on all/uncaught exceptions" behavior in DEV mode', 'Updated Chain React (#9067)\nChanged conference date from "Summer 2017" to given date on website', 'Pass component stack to error boundary handler (#9073)\nThis information is probably more useful for custom redbox components than the call stack info we are already passing.', "Move webcomponents.js polyfill to mocks (#8993)\n\nMove webcomponents.js polyfill to mocks\n\nI'd like to move it out of shared to make it easier to sync this to RN.\nSince this is only used for testing and a polyfill is essentially a mock.\nMaybe this makes sense?\nRename to camel case to be consistent with providesModule.\n\nUpdate path to ignore in configs\n", 'refactors/removes stack dependent tests to work with fiber', 'updates test-failing and tests-passing', 'Enable react/jsx-space-before-closing rule (#9077)\nWe mostly do this but not 100%; I fixed the stragglers here with ./node_modules/.bin/eslint --fix src and enabled the lint rule.', 'New ESLint rule that warns against Boolean and String constructors', "providesModule -> explicit requires for cross-package dependencies (#9078)\n\n\nAdd forwarding modules\n\n\nCodemod to use full package path outside of own package\n\n\nFiles that require modules from a different package than their own now\ndoes so by the npm path name instead of the providesModule.\n\n\nCodemod fbjs module dependencies\n\n\nFix gulp module mapping config\n\n\nThis is a bit lame but because of our module rewrite we need to white\nlist all the paths that we don't don't want to rewrite.", 'Convert usage of String and Boolean constructors', 'Rename rule to no-primitive-constructors', 'Add caveat about symbols to string error message', 'Add error for number constructor, too', 'Add test for no-primitive-constructors rule', 'Run test script', "Merge branch 'master' into remove-stack-dependencies-from-tests", 'Square renders button, not div (#9084)', 'Merge pull request #9080 from trueadm/remove-stack-dependencies-from-tests\n[Fiber] Remove stack dependencies from tests', 'Merge pull request #9082 from acdlite/nobooleanorstringconstructors\nEnforce no boolean or string constructors', "Test that hidden subtrees render/update synchronously\nWhen useSyncScheduling is set to true (as it is in the DOM renderer),\nwe shouldn't give OffscreenPriority to hidden subtrees. Everything\nshould be sync/task.", "Check if we're in sync mode before deprioritizing hidden subtrees", "Add areChildrenOffscreen to host config\nRenderers can determine whether a node's children are offscreen based on\nthe host component's props. If so, they are given OffscreenPriority.\nuseSyncScheduling takes precedence.", 'Pass type to areChildrenOffscreen, too', 'areChildrenOffscreen -> shouldDeprioritizeSubtree', 'Replace the header_links plugin with client-side generated anchors. (#4165)\n\nReplace the header_links plugin with client-side generated anchors.\n\nFixes facebook/react#4124\n\nMove anchor-link code into a separate script\n\nAlso adds a couple comments, for context.', 'Fix usage of Boolean constructor', 'Fix string casting and remove Flow suppression comments', 'Adding some server rendering unit tests. (#9055)\n\n\nAdded a handful of SSR unit tests, ported from a previous pull request.\n\n\nFixing linting errors\n\n\nFixed a test helper function to properly report errors.\n\n\nUn-nested the new rendering tests. Updated the fiber test passing/not passing lists.\n\n\nEdited to comply with the react/jsx-space-before-closing eslint rule, which will soon be merged into master.\n\n\nResponse to code review from @spicyj. Moved tests to separate file, reworked wording of test names, corrected use of canUseDom, and simplified tests against tagName. Thanks for the help, @spicyj!\n\n', 'Merge pull request #9087 from acdlite/fixstringcasting\nFix string casting and remove Flow suppression comments', 'Test that ReactErrorUtils module can be shimmed\nWe do this in www', "Convert shorthanded syntax for function Flow types to expanded form\nSomething in www's test pipeline isn't able to parse this.", 'Add a step to the release process', 'Update Lifting State Up not to mix up DOM value with component state (#9032)\n\nUpdate Lifting State Up not to mix up DOM value with component state\n\nA few weeks ago when teaching my friend, she got stuck on\nthis.state.value vs. event.target.value. As the documentation\ntalked a lot about "values", and the term value could mean three\ndifferent things (values in general, the "value" prop / DOM value of\nthe  component and the value in state/props), it was not weird\nthat she got a bit confused.\n\nRename Lifting State Up onChange props to onTemperatureChange\n\nThis is in-line with how the temperature is provided as a prop named temperature\n\n\nFix one value prop not being renamed to temperature\n\n\nUpdate codepen examples in Lifting state up documentation\n\n\nUpdate devtools state change to reflect docs change\n\n', 'refactor of ReactComponentTreeHook to isolate dev methods', 'fixed flow issues and bug resulting in failing tests', "Add script to print out a list of warnings\nWe'll use this in the GH sync script to track which warnings have\nchanged since the last sync", "Add fixture components (#8860)\n\n\nadd fixture components\n\n\nadd a few more options and styles\n\n\nTest fixture updates\n\n\nPull in React from window global\n\nAdd field to TestCase for fix PR links\n\nUpdate some styles\n\n\nRemove unused Fixture.Result comment\n\n\nRemove leading # from resolvedBy link\n\n\nImplement tag loading utility that caches response\n\n\nDon't bust the cache doing feature detection\nCOME ON\n\nUse 'local' without version for option\n", 'Fix spacing in documentation (#9070)\nReplace non-breaking space by space.', 'WIP - not sure how to get the Flow type working properly', 're-added missing files', 'updated flow annotations', 'removed comment', 'removed double semicolon', 'added guards in place to prevent mixed prod+dev errors from occuring', 'Fix PropTypes production test so it works with error code system', 'Merge pull request #9098 from acdlite/printwarnings\nAdd script to print out a list of warnings', "Remove destructuring, since the version of node on www doesn't support it", 'Add async/await to unit tests; modify server rendering tests to use async/await. (#9089)', 'Merge pull request #9097 from acdlite/dontextractprodproptypeerror\nFix production propTypes test so it works with error code system', 'Merge pull request #9088 from acdlite/testerrorutilsshim\nTest that ReactErrorUtils module can be shimmed', 'Added Brunch build tool to the docs (#9074)\n\n\nAdded Brunch build tool to the docs\n\n\nImproved grammar\n\n\nproduct build -> production build\n\n', "[Fiber] Don't schedule class fibers without relevant lifecycles for commit (#9105)\n\n\nDon't schedule class fibers without relevant lifecycles for commit\n\n\nSeparate Update and Ref effects\n\n\nSimplify the exit condition\n\n\nAdd missing annotation\n\n\nWrite conditions differently to avoid an extra check\n\n\nInline markUpdateIfNecessary()\n\n\nInline markUpdateIfAlreadyInProgress()\n\n", 'Remove ReactStateSetters (#9107)', 'Remove sliceChildren (#9109)', 'Remove EventPluginRegistry.getPluginModuleForEvent (#9110)', "Don't reset the return fiber after cloning the child fibers, as we already do that while cloning.", 'moved non DEV methods to a new file called ReactFiberComponentTreeHook.js\nThis moves the non DEV methods to a new file called ReactFiberComponentTreeHook, updates existing references to DEV functions to remain inside DEV flags so they do not pull in ReactComponentTreeHook', "Merge remote-tracking branch 'upstream/master' into component-tree-hook-dev", 'fixes tests so they correctly pass in fiber', 'removed describe.only', "Merge pull request #9121 from jddxf/refactor\nDon't reset the return fiber again after cloning the child fibers", 'Fix radio buttons using stale props in Fiber (#9126)\nD4662269', 'Fix redundant null type coercion (#9114)', 'Fiber DOM async feature flag (#9127)\nD4662171', 'Remove _resetEventPlugins, use jest.resetModuleRegistry (#9111)\n\nMove EventPluginRegistry._resetEventPlugins to DEV\n\nThis is not called during runtime at all and is only using in internal unit tests. Despite that, its currently being included in production builds. This change makes it so its only defined in DEV, which might even be too much (we can maybe inject it in our unit tests to avoid defining it at all in EventPluginRegistry)\n\nRemove _resetEventsPlugin, use resetModuleRegistry\n', 'removed inline boolean checks for methods', 'Merge pull request #9096 from trueadm/component-tree-hook-dev\n[Fiber] Split dev methods within ReactComponentTreeHook', "[Fiber] Performance measurements (#9071)\n\n\nwip\n\n\nbetter\n\n\nbetter\n\n\ntrack commits\n\n\nbetter\n\n\nwip\n\n\nFix\n\n\nAdd some lifecycles\n\n\nwip\n\n\nNaming\n\n\nMoar emojis\n\n\nRemove stacks in favor of a flag\n\n\nFix Flow\n\n\nGate behind DEV\n\n\nRevert flag for testing\n\n\nMeasure all lifecycles\n\n\nPush it to the limits\n\n\nPolish\n\n\nIndent\n\n\nRefactor and track cascading updates\n\n\nMore prominent warnings\n\n\nMake mark names themselves readable\n\n\nThis is useful for RN Systrace which doesn't let us assign labels after the fact.\n\n\nKeep track of how many effects we call\n\n\nFix typo\n\n\nDo less work to reduce the overhead\n\n\nFix lint\n\n\nRemove closure\n\n\nRemove unintentional formatting changes\n\n\nAdd tests\n\n\nFix test regex and record tests\n\n\nDisable irrelevant tests needed for ReactPerf\n\n\nFix typo\n\n\nFix lint and flow\n\n\nDon't treat cWM or cWRP as cascading\n\n\nWhitespace\n\n\nUpdate tests\n\n\nGate callComponentWillUnmountWithTimerInDev definition by DEV\n\n", "Don't count skipped tests when calculating Fiber facts (#9136)", 'Use more widely supported emoji (#9139)', 'Reorder sections in alphabetical order (#9143)\n\n\nReorder sections in alphabetical order\n\n\nReorder here too\n\n', 'Remove PR check from GH Pages build hook for stable branch (#9144)', '[Fiber] Remove unnecessary second getComponentName() (#9153)\n\nRemove unnecessary second getComponentName()\n\nWe already have one. The other one is also less fragile and doesn\'t throw on null type.\n\nMake setState in render warning check simpler\n\nThis skips it earlier since in most cases phase won\'t be "render".\nThis is unobservable.', 'Use fiber by default (#9155)\nAffects our builds. But not in tests yet.', 'Remove ref usage in main markdown example (#9160)\nfrom elsewhere in the docs:\n\nAvoid using refs for anything that can be done declaratively.\n', 'Switch UMD build to use Fiber', '16.0.0-alpha.4', 'Fix two bugs in version bump script (#9165)\n\n\nFix version bump script when files are missing\n\n\nAdd noop renderer to version bump script\n\n\nWithout this, grunt build fails due to the version mismatch.', 'Updated React Native EU (#9170)\n\nUpdated Chain React\n\nChanged conference date from "Summer 2017" to given date on website\n\nUpdated React Native EU \n\nUpdated date and place with information from website', 'Add prettier option in scripts', 'More options', 'Add prettier-ignore where we do matrix style formatting', 'Try 80-character line limit instead', 'Update to prettier 0.22', 'Add ignore to multichild test', 'Run prettier', 'Non idempotent steps in prettier', 'Fix lint rules\nThe typeof one is a bit strange because the disable rule gets moved.', 'Merge pull request #9101 from sebmarkbage/prettier\nUse Prettier', 'Use explicit null checks in ReactFiberUpdateQueue\nFollow-up to #8978', "Work around loose typing for fiber.updateQueue\nThe updateQueue field is currently an any type. Check the fiber's tag so\nthat only UpdateQueues are passed to getPendingPriority.", 'Add React Rally to conferences list (#9179)', "Add prettier script\nscripts/prettier/index.js write will run prettier on source files.\nRun using yarn prettier.\nscripts/prettier/index.js will throw if any source files are not\nformatted with prettier. We'll use this to block CI.\nBased on similar script in Jest repo.", "CI should fail if prettier wasn't run", 'Pass args as an array', 'Add prettier instructions to PR template and contribution guide', 'Exit with failing code if prettier throws to ensure CI is blocked', '(test) Commit changes without running prettier to see if CI fails', 'Run yarn prettier to format code\nCI should now pass', 'Merge pull request #9187 from acdlite/prettierci\nFailing to run prettier should block CI', "Ignore event listener extraction on numeric text components (#9194)\nIn ReactDOM we don't dispatch events in the synthetic event system on to\ntext nodes. We back up one to the element before dispatching.\nIn React Native we don't do that. The iOS native side doesn't dispatch on\nthe text nodes but only the parent. The Android native side however does\ndispatch on text nodes.\nWe already covered this for strings, but current element in Stack can be\na number if it is numeric text content.", 'Record fiber tests (#9195)', "Upgraded Flow dev dependency to 41 for 'implements' support (#9196)", 'Merge pull request #9145 from acdlite/explicitnullcheckfiberupdatequeue\nUse explicit null checks in ReactFiberUpdateQueue', 'Add unit tests for props to attribute mapping in SSR. (#9106)\n\n\nAdded a handful of SSR unit tests, ported from a previous pull request.\n\n\nFixing linting errors\n\n\nFixed a test helper function to properly report errors.\n\n\nUn-nested the new rendering tests. Updated the fiber test passing/not passing lists.\n\n\nEdited to comply with the react/jsx-space-before-closing eslint rule, which will soon be merged into master.\n\n\nResponse to code review from @spicyj. Moved tests to separate file, reworked wording of test names, corrected use of canUseDom, and simplified tests against tagName. Thanks for the help, @spicyj!\n\n\nConverted the unit tests to use async-await style.\n\n\nMoved async-await babel transform for tests from .babelrc to preprocessor.js.\n\n\nResponse to code review in PR #9089. Thanks, @spicyj!\n\n\nFixing some bugs in the SSR unit tests.\n\n\nMissed deleting some repeated code in the last commit.\n\n\nAdding unit tests for property to attribute mapping in SSR.\n\n\nRemoving some redundant unit tests.\n\n\nOops. I forgot to re-run record-tests after c593dbc; fixing that here.\n\n\nReformatting for prettier so that the build will pass.\n\n', 'Use single quotes, remove extra whitespace (#9215)', "Delete addons (#9209)\n\n\nDelete addons\n\n\nRemove ReactFragment dependency from tests\n\n\nRemove addons testing from fixtures\n\n\nDon't mention createFragment() in a warning\n\n\nAddress feedback\n\n\nRemove unused variables\n\n\nRemove mention of deleted file\n\n\nAdd a missing key to the test\n\n\nFix lint\n\n", "Re-add tests unintentionally deleted in #9209 (#9225)\nThese tests are useful and don't test addons specifically.\nI moved them to appropriate places in the codebase.", 'ReactNative upstream sync (#9197)\n\n\nAddresses a circular dependency between NativeMethodsMixin and ReactNativeFiber:\n\n\nCreated new ReactNativeFiberHostComponent with similar interface but without unnecessary call to findNodeHandle.\n\nCreated new Flow interface for mixins to ensure ReactNativeFiberHostComponent and NativeMethodsMixinUtils stay synced.\nMoved helper methods to NativeMethodsMixinUtils to be shared between the 2 wrappers.\n\nThis diff was submitted and reviewed internally along with some other ReactNative changes. This is the React-only portion.\n\n\nRemoved unused Flow type import\n\n\nCopied a Flow fix from internal\n\n', 'Removed optimization for events without target in ReactNativeEventEmitter (#9219)\n\nRemoved optimization for events without target in ReactNativeEventEmitter\n\nThis PR fixes the problem originally introduced in https://github.com/facebook/react/pull/6590\nThe problem is that ResponderEventPlugin (and ResponderTouchHistoryStore) relies on that fact that touch events are balanced.\nSo if one startish event happened, should be coming endish event. Otherwise there is no way to maintain internal trackedTouchCount counter. So, if we drop some events, we break this logic.\nMoreover, that optimization clearly contradict with this statement from ResponderEventPlugin:\nWe must be resilient to `targetInst` being `null` on `touchMove` or\n`touchEnd`. On certain platforms, this means that a native scroll has\nassumed control and the original touch targets are destroyed.\nThis issue causes several major problems in React Native, and one of them (finally!) is easy to reproduce: https://github.com/facebook/react-native/issues/12976 .\nThe test also illustrates this problem.\n\nPrettier\n', 'Bumped React version to 16.0.0-alpha.5', 'Conferences (#9234)\n\n\nstandard format for React Rally\n\n\nmove React Conf 2017 to past conferences\n\n', 'Add injection for error dialog (#9235)', 'Fix up Flow syntax', 'Updated ReactNative findNodeHandle() to handle number case (#9238)', 'Add dynamic injection to ReactErrorUtils (#9246)', 'Fix ReactErrorUtils injection (#9247)', 'Fix up invariant import to be from fbjs/lib/', 'Updated Router import for example (#9233)\nUpdated import in order to be a correct working example as in accordance with the docs', 'Remove rethrowCaughtError injection (#9252)', 'Add more SSR unit tests for elements and children. (#9221)\n\n\nAdding more SSR unit tests for elements and children.\n\n\nSome of my SSR tests were testing for react-text and react-empty elements that no longer exist in Fiber. Fixed the tests so that they expect correct markup in Fiber.\n\n\nTweaked some test names after @gaearon review comment https://github.com/facebook/react/pull/9221#discussion_r107045673 . Also realized that one of the tests was essentially a direct copy of another, so deleted it.\n\n\nResponding to code review https://github.com/facebook/react/pull/9221#pullrequestreview-28996315 . Thanks @spicyj!\n\n', 'ReactElementValidator uses temporary ReactNative View propTypes getter (#9256)', 'Updating packages for 16.0.0-alpha.6 release', 'Ran yarn and fixed line-length lint issue', 'Fixed typo on implementation notes page (#9258)\nAdded paren to "mountComponent()" for consistency', 'Add a button to switch from Fiber with time-slicing to Fiber without it', 'Adding new SSR tests for context, refs, and reviving markup. (#9257)', 'Adding SSR test for form fields.', 'Fix Chrome number input backspace and invalid input issue (#7359)\n\n\nOnly re-assign defaultValue if it is different\n\n\nDo not set value if it is the same\n\n\nProperly cover defaultValue\n\n\nUse coercion to be smart about value assignment\n\n\nAdd explanation of loose type checks in value assignment.\n\n\nAdd test coverage for setAttribute update.\n\n\nOnly apply loose value check to text inputs\n\n\nFix case where empty switches to zero\n\n\nHandle zero case in controlled input\n\n\nCorrect mistake with default value assignment after rebase\n\n\nDo not assign bad input to number input\n\n\nOnly trigger number input value attribute updates on blur\n\n\nRemove reference to LinkedValueUtils\n\n\nRecord new fiber tests\n\n\nAdd tests for blurred number input behavior\n\n\nReplace onBlur wrapper with rule in ChangeEventPlugin\n\n\nSift down to only number inputs\n\n\nRe-record fiber tests\n\n\nAdd test case for updating attribute on uncontrolled inputs. Make related correction\n\n\nHandle uncontrolled inputs, integrate fiber\n\n\nReorder boolean to mitigate DOM checks\n\n\nOnly assign value if it is different\n\n\nAdd number input browser test fixtures\n\n\nDuring the course of the number input fix, we uncovered many edge\ncases. This commit adds browser test fixtures for each of those instances.\n\nAddress edge case preventing number precision lower than 1 place\n\n0.0 coerces to 0, however they are not the same value when doing\nstring comparision. This prevented controlled number inputs from\ninputing the characters 0.00.\nAlso adds test cases.\n\nAccommodate lack of IE9 number input support\n\nIE9 does not support number inputs. Number inputs in IE9 fallback to\ntraditional text inputs. This means that accessing input.value will\nreport the raw text, rather than parsing a numeric value.\nThis commit makes the ReactDOMInput wrapper check to see if the type\nprop has been configured to "number". In those cases, it will\nperform a comparison based upon parseFloat instead of the raw input\nvalue.\n\nRemove footnotes about IE exponent issues\n\nWith the recent IE9 fix, IE properly inserts e when it produces an\ninvalid number.\n\nAddress exception in IE9/10 ChangeEventPlugin blur event\n\nOn blur, inputs have their values assigned. This is so that number\ninputs do not conduct unexpected behavior in\nChrome/Safari. Unfortunately, there are cases where the target\ninstance might be undefined in IE9/10, raising an exception.\n\nMigrate over ReactDOMInput.js number input fixes to Fiber\n\nAlso re-record tests\n\n\nUpdate number fixtures to use latest components\n\n\nAdd number input test case for dashes and negative numbers\n\n\nReplace trailing dash test case with replace with dash\n\n\nAlso run prettier', "Merge branch 'add_toggle_to_fiber_triangle_demo' of https://github.com/giamir/react into giamir-add_toggle_to_fiber_triangle_demo", 'Use radio buttons for toggle', "Merge branch 'giamir-add_toggle_to_fiber_triangle_demo'", 'Added missing @flow annotation to ReactNativeFeatureFlags file (#9267)', 'Adding fix to EventPropagators that was accidentally omitted from PR #9219 (#9274)', 'Added jest-cli to the package.json for the Fiber record-tests script. (#9270)', 'added DEV condition around getDeclarationErrorAddendum contents', 'Merge pull request #9276 from trueadm/getDeclarationErrorAddendum_DEV\n[Fiber] Adds DEV condition around getDeclarationErrorAddendum', 'Add DOM fixtures for disabled button click events (#9271)', 'Remove IE8-specific ChangeEventPlugin logic (#9281)', 'Remove captured scroll feature check (#9283)\n\nRemove captured scroll feature check\n\nIE8 was the only browser that did not support captured scroll. We no\nlonger have that constraint.\n\nRemove WINDOW_HANDLE const\n', "Allow returning null as host context (#9278)\nIf your renderer doesn't use host context, you might prefer to return null. This used to give an error:\n\nInvariant Violation: Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.\n\nI use a sentinel value instead now.\nThe code in ReactFiberHostContext is a little complicated now. We could probably also just remove the invariants.", 'Added semicolons to addons imports examples. (#9287)', 'Add DOM fixture for unmasking passwords (#9269)\nIE11 and Edge have a password unmask field that React prevents the\ndisplay of for controlled inputs. This commit adds DOM fixture\ncoverage for this test case.', 'Remove IE8-specific setInnerHTML behavior (#9288)\nSince IE8 is not supported anymore, lets save those bytes!', 'Update JSFiddle for issue template (#9289)', 'Move takeSnapshot from UIManager to ReactNative renderer(s) (#9292)\n\n\nMove takeSnapshot from UIManager to ReactNative renderer(s)\n\n\nPrettier\n\n', 'Remove captured focus feature check (#9285)\nIE8 was the only browser that did not support captured focus. We no\nlonger have that constraint.', "Show more meanignful stack trace for ReactNative errors (#9291)\n\nShow more meanignful stack trace for ReactNative errors\n\nClicking on the stack should jump to where the error actually occurred rather than to where it's logged in a redbox component.\n\n\nMade showDialog() return type stricter. Added mock and Flow types for ExceptionManager\n\n\nPrettier\n\n\nHandle null/string thrown errors\n\n\nRemoved unused reference to emptyFunction\n\n", 'Added explicit null return to completeUnitOfWork() to resolve Flow error (#9299)', 'Disabling a no-unreachable lint error (#9300)', 'Deleted a specific code for ie8 - document.selection (#9298)', 'Remove viewport metrics, other pageX/pageY behaviors (#9290)\n\nRemove viewport metrics\n\nevent.pageX and event.pageY are in every browser React supports.\n\nRerecord tests\n', 'Remove scroll capture support warning (#9303)\nI removed the scroll capture feature check for IE8, however I missed\nthe associated warning.', 'Port out bug fixes to ReactARTFiber (#9309)\nD4616127 D4629747 D4631778', 'Fix build\noops i broke it', 'Response to code review comment https://github.com/facebook/react/pull/9264#discussion_r108974871 . Thanks, @spicyj!', 'Deleting a specific style name float for ie8 (#9311)\n\n\nDeleting a specific style name float for ie8\n\n\nRemove unnecessary condition\n\n', 'Merge pull request #9264 from aickin/server-render-unit-tests-forms\nAdding SSR test for form fields.', 'Remove examples/ folder (#9323)', 'Make it clear that textarea also supports defaultValue. (#9318)', "Update addons-two-way-binding-helpers.md\nI don't think this reference is that helpful and could turn people away since it sounds very fancy and isn't relevant..", 'Fix grammar typo in Design Principles docs (#9324)\nfeatures → feature\n\nThere is nothing "bad" about using state or lifecycle hooks in components. Like any powerful features, they should be used in moderation, but we have no intention to remove them.\n\nI can’t explain the exact grammatical principle this violates, but it sounds wrong to my native English ears that “feature” is plural here. Another way to check if the grammar sounds right is to change the order of the clauses: ”They should be used in moderation, like any powerful feature“ sounds right, whereas “They should be used in moderation, like any powerful features” does not.', 'Moved the JSdoc for invokeGuardedCallback to correct position (#9337)', 'Remove MouseEvent.button polyfill (#9334)\nMouseEvent.button is supported in every browser React targets:\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button', 'Convert current build system to Rollup and adopt flat bundles (#9327)\n\n\nWIP\n\n\nfbjs support\n\n\nWIP\n\n\ndev/prod mode WIP\n\n\nMore WIP\n\n\nbuilds a cjs bundle\n\n\nadding forwarding modules\n\n\nmore progress on forwarding modules and FB config\n\n\nimproved how certain modules get inlined for fb and cjs\n\n\nmore forwarding modules\n\n\nadded comments to the module aliasing code\n\n\nmade ReactPerf and ReactTestUtils bundle again\n\n\nUse -core suffix for all bundles\n\n\nThis makes it easier to override things in www.\n\nAdd a lazy shim for ReactPerf\n\nThis prevents a circular dependency between ReactGKJSModule and ReactDOM\n\n\nFix forwarding module for ReactCurrentOwner\n\n\nRevert "Add a lazy shim for ReactPerf"\n\n\nThis reverts commit 723b402c07116a70ce8ff1e43a1f4d92052e8f43.\n\n\nRename -core suffix to -fb for clarity\n\n\nChange forwarding modules to import from -fb\n\n\nThis is another, more direct fix for ReactPerf circular dependency\n\n\nshould fix fb and cjs bundles for ReactCurrentOwner\n\n\nadded provides module for ReactCurrentOwner\n\n\nshould improve console output\n\n\nfixed typo with argument passing on functon call\n\n\nRevert "should improve console output"\n\n\nThis breaks the FB bundles.\nThis reverts commit 65f11ee64f678c387cb3cfef9a8b28b89a6272b9.\n\n\nWork around internal FB transform require() issue\n\n\nmoved  ReactInstanceMap out of React and into ReactDOM and ReactDOMFiber\n\n\nExpose more internal modules to www\n\n\nAdd missing modules to Stack ReactDOM to fix UFI\n\n\nFix onlyChild module\n\n\nimproved the build tool\n\n\nAdd a rollup npm script\n\n\nRename ReactDOM-fb to ReactDOMStack-fb\n\n\nFix circular dependencies now that ReactDOM-fb is a GK switch\n\n\nRevert "Work around internal FB transform require() issue"\n\n\nThis reverts commit 0a50b6a90bffc59f8f5416ef36000b5e3a44d253.\n\n\nBump rollup-plugin-commonjs to include a fix for rollup/rollup-plugin-commonjs#176\n\n\nAdd more forwarding modules that are used on www\n\n\nAdd even more forwarding modules that are used on www\n\n\nAdd DOMProperty to hidden exports\n\n\nExternalize feature flags\n\n\nThis lets www specify them dynamically.\n\nRemove forwarding modules with implementations\n\nInstead I\'m adding them to react-fb in my diff.\n\n\nAdd all injection necessary for error logging\n\n\nAdd missing forwarding module (oops)\n\n\nAdd ReactART builds\n\n\nAdd ReactDOMServer bundle\n\n\nFix UMD build of ReactDOMFiber\n\n\nWork in progress: start adding ReactNative bundle\n\n\ntidied up the options for bundles, so they can define what types they output and exclude\n\n\nAdd a working RN build\n\n\nfurther improved and tidied up build process\n\n\nimproved how bundles are built by exposing externals and making the process less "magical", also tidied up code and added more comments\n\n\nbetter handling of bundling ReactCurrentOwner and accessing it from renderer modules\n\n\nadded NODE_DEV and NODE_PROD\n\n\nadded NPM package creation and copying into build chain\n\n\nImproved UMD bundles, added better fixture testing and doc plus prod builds\n\n\nupdated internal modules (WIP)\n\n\nremoved all react/lib/* dependencies from appearing in bundles created on build\n\n\nadded react-test-renderer bundles\n\n\nrenamed bundles and paths\n\n\nfixed fixture path changes\n\n\nadded extract-errors support\n\n\nadded extractErrors warning\n\n\nmoved shims to shims directory in rollup scripts\n\n\nchanged pathing to use build rather than build/rollup\n\n\nupdated release doc to reflect some rollup changes\n\n\nUpdated ReactNative findNodeHandle() to handle number case (#9238)\n\n\nAdd dynamic injection to ReactErrorUtils (#9246)\n\n\nFix ReactErrorUtils injection (#9247)\n\n\nFix Haste name\n\n\nMove files around\n\n\nMore descriptive filenames\n\n\nAdd missing ReactErrorUtils shim\n\n\nTweak reactComponentExpect to make it standalone-ish in www\n\n\nUnflowify shims\n\n\nfacebook-www shims now get copied over correctly to build\n\n\nremoved unnecessary resolve\n\n\nbuilding facebook-www/build is now all sync to prevent IO issues plus handles extra facebook-www src assets\n\n\nremoved react-native-renderer package and made build make a react-native build dir instead\n\n\n😭😭😭\n\n\nAdd more SSR unit tests for elements and children. (#9221)\n\n\nAdding more SSR unit tests for elements and children.\n\n\nSome of my SSR tests were testing for react-text and react-empty elements that no longer exist in Fiber. Fixed the tests so that they expect correct markup in Fiber.\n\n\nTweaked some test names after @gaearon review comment https://github.com/facebook/react/pull/9221#discussion_r107045673 . Also realized that one of the tests was essentially a direct copy of another, so deleted it.\n\n\nResponding to code review https://github.com/facebook/react/pull/9221#pullrequestreview-28996315 . Thanks @spicyj!\n\n\nReactElementValidator uses temporary ReactNative View propTypes getter (#9256)\n\n\nUpdating packages for 16.0.0-alpha.6 release\n\n\nRevert "😭😭😭"\n\n\nThis reverts commit 7dba33b2cfc67246881f6d57633a80e628ea05ec.\n\n\nWork around Jest issue with CurrentOwner shared state in www\n\n\nupdated error codes\n\n\nsplits FB into FB_DEV and FB_PROD\n\n\nRemove deps on specific builds from shims\n\n\nshould no longer mangle FB_PROD output\n\n\nAdded init() dev block to ReactTestUtils\n\n\nadded shims for DEV only code so it does not get included in prod bundles\n\n\nadded a DEV wrapping code to FB_DEV\n\n\nadded DEV flag behind a footer/header\n\n\nUse right haste names\n\n\nkeeps comments in prod\n\n\nadded external babel helpers plugin\n\n\nfixed fixtures and updated cjs/umd paths\n\n\nFixes Jest so it run tests correctly\n\n\nfixed an issue with stubbed modules not properly being replaced due to greedy replacement\n\n\nadded a WIP solution for ReactCurrentOwner on FB DEV\n\n\nadds a FB_TEST bundle\n\n\nallows both ReactCurrentOwner and react/lib/ReactCurrentOwner\n\n\nadds -test to provides module name\n\n\nRemove TEST env\n\n\nEnsure requires stay at the top\n\n\nadded basic mangle support (disbaled by default)\n\n\nper bundle property mangling added\n\n\nmoved around plugin order to try and fix deadcode requires as per https://github.com/rollup/rollup/issues/855\n\n\nFix flow issues\n\n\nremoved gulp and grunt and moved tasks to standalone node script\n\n\nconfigured circleci to use new paths\n\n\nFix lint\n\n\nremoved gulp-extract-errors\n\n\nadded test_build.sh back in\n\n\nadded missing newline to flow.js\n\n\nfixed test coverage command\n\n\nchanged permissions on test_build.sh\n\n\nfixed test_html_generations.sh\n\n\ntemp removed html render test\n\n\nremoved the warning output from test_build, the build should do this instead\n\n\nfixed test_build\n\n\nfixed broken npm script\n\n\nRemove unused ViewportMetrics shim\n\n\nbetter error output\n\n\nupdated circleci to node 7 for async/await\n\n\nFixes\n\n\nremoved coverage test from circleci run\n\n\ncircleci run tets\n\n\nremoved build from circlci\n\n\nmade a dedicated jest script in a new process\n\n\nmoved order around of circlci tasks\n\n\nchanging path to jest in more circleci tests\n\n\nre-enabled code coverage\n\n\nAdd file header to prod bundles\n\n\nRemove react-dom/server.js (WIP: decide on the plan)\n\n\nOnly UMD bundles need version header\n\n\nMerge with master\n\n\ndisabled const evaluation by uglify for  string literal\n\n\ndeal with ART modules for UMD bundles\n\n\nimproved how bundle output gets printed\n\n\nfixed filesize difference reporting\n\n\nadded filesize dep\n\n\nUpdate yarn lockfile for some reason\n\n\nnow compares against the last run branch built on\n\n\nadded react-dom-server\n\n\nremoved un-needed comment\n\n\nresults only get saved on full builds\n\n\nmoved the rollup sized plugin into a plugins directory\n\n\nadded a missing commonjs()\n\n\nfixed missing ignore\n\n\nHack around to fix RN bundle\n\n\nPartially fix RN bundles\n\n\nadded react-art bundle and a fixture for it\n\n\nPoint UMD bundle to Fiber and add EventPluginHub to exported internals\n\n\nMake it build on Node 4\n\n\nfixed eslint error with resolve being defined in outer scope\n\n\nTweak how build results are calculated and stored\n\n\nTweak fixtures build to work on Node 4\n\n\nInclude LICENSE/PATENTS and fix up package.json files\n\n\nAdd Node bundle for react-test-renderer\n\n\nRevert "Hack around to fix RN bundle"\n\n\nWe\'ll do this later.\nThis reverts commit 59445a625962d7be4c7c3e98defc8a31f8761ec1.\n\nRevert more RN changes\n\nWe\'ll do them separately later\n\n\nRevert more unintentional changes\n\n\nRevert changes to error codes\n\n\nAdd accidentally deleted RN externals\n\n\nadded RN_DEV/RN_PROD bundles\n\n\nfixed typo where RN_DEV and RN_PROD were the wrong way around\n\n\nDelete/ignore fixture build outputs\n\n\nFormat scripts/ with Prettier\n\n\ntidied up the Rollup build process and split functions into various different files to improve readability\n\n\nCopy folder before files\n\n\nupdated yarn.lock\n\n\nupdated results and yarn dependencies to the latest versions\n\n', 'Update build paths in docs (#9340)', 'Update release manager with latest change', 'fixes circleci/upload_build.sh paths for dist files (#9341)\n\n\nfixes circleci/upload_build.sh paths for dist files\n\n\nupdated the react filenames to include development or production\n\n', 'Adds support for labels on building bundles (#9342)\n\n\nadds support for labels on bundles\n\n\n-fiber\n\n\nreverts results\n\n', 'Fix the print warnings script (#9344)', 'Fix warnings script to work on Node 4', 'Synced ReactNativeFiber bugfix for leaf-node children (#9330)', 'Exclude tests from warning print script', 'Run prettier', 'Fix glob ignore for build script', 'Fix art fixture', 'Delete extra babel-standalone.html: it already exists in a folder', 'Fixes the eager react-dom replacement on the rollup plugin (#9346)\n\n\nFixes the eager react-dom replacement on the rollup plugin\n\n\nadded the other replaceInternalModules\n\n', 'change permissions of test_print_warnings (#9347)', "Remove 'takeSnapshot' from ReactNative renderer\\nUpstream sync from react-native repo (#9356)", '16.0.0-alpha.7', "All doc updates forv15.5 (#9359)\n\nreact-addons-test-utils -> react-dom/test-utils\n\nUpdating all references and docs on the React.addons.TestUtils and the\nshallow renderer to refer to the correct targets.\nInstead of:\n```\nconst React = require('react');\n// ...\nReact.addons.Testutils\n// or\nconst ReactTestUtils = require('react-addons-test-utils');\nwe now show:\nconst ReactTestUtils = require('react-dom/test-utils');\n```\nAnd for shallow renderer, instead of:\nconst shallowRenderer = TestUtils.createRenderer();\nwe now show:\nconst shallowRenderer = require('react-test-renderer/shallow');\n\nUpdate the 'prev' and 'next' attributes of 'add-ons' docs\n\nThese flags are used to set arrow links to easily navigate through the\ndocuments. They were wrong or missing in some of the 'add-ons' pages and\nthis bothered me when manually testing the updates from the previous\ncommit.\n\nUpdate syntax for instantiating shallow renderer\n\nMissed this when updating the docs for the changes to shallow-renderer\nin React 15.5.\n\nFix pointers in addons docs\n\nThanks @bvaughn for catching this\n\nMake example of shallow renderer more consistent\n\nWe should show using the same variable names between code samples.\n\nMake names in example even more consistent\n\nWe should use the same variable name for the same thing across examples.\nrenderer -> shallowRenderer.\n\n\nUpdate docs to deprecate ReactTransitionGroup\n\n\nremoves link to the docs about ReactCSSTransitionGroup and\n   ReactTransitionGroup from the main navigation\n\nupdates 'prev' and 'next' pointers to skip this page\nadds deprecation warning to the top of the page\nremove references to these modules from the packages README\n\nupdates 'add-ons' main page to list this as a deprecated add-on\n\n\nUpdate React.createClass to createReactClass in the docs\n\n\nThe React.createClass method is being deprecated in favor of\ncreateReactClass.\n\nRemove 'React.createClass' from top level API docs\n\nIt no longer makes sense to have a section for the 'createClass' method\nin this page, since it won't be available as a top level method on\n'React'.\nI initially was going to pull the section about 'createClass' into a\nseparate page to add under 'addons' but it was short and duplicative of\nthe 'react-without-es6' docs. So I just linked to those.\n\nRemove most React.PropTypes from the docs\n\nI am doing the docs for context in a separate commit because that case\nwas a bit less clear-cut.\nWe will no longer support React.PropTypes as a built-in feature of\nReact, and instead should direct folks to use the PropTypes project\nthat stands alone.\nRather than retaining the React.PropTypes examples and just revamping\nthem to show the use of the stand-alone PropTypes library with React,\nit makes more sense to direct people to that project and reduce the\nperceived API area and complexity of React core. The proper place to\ndocument PropTypes is in the README or docs of that project, not in\nReact docs.\n\nUpdate context docs to not use React.PropTypes\n\nWe use React.PropTypes to define the contextType for the context\nfeature of React. It's unclear how this will work once React.PropTypes\nis replaced by the external PropTypes library. Some options;\na) Deprecate context, either in v16 or shortly after. Seems reasonable\nbased on the intense warnings against using context that we have in the\ndocs -\nhttps://facebook.github.io/react/docs/context.html#why-not-to-use-context\nExcept that probably some widely used libraries depend on it, like\nReact-Router.\nb) Expect users will use external PropTypes library when defining\ncontextTypes and just don't do our checkReactTypeSpec against them\nany more in v16.\nc) Stop masking context and pass the whole context\nunmasked everywhere. Worst option, do not recommend.\nI went with b and assume that, for now, we will get users to use the\nexternal PropTypes when defining context. I will update this PR if we\nwant a different approach.\n\nRemove 'addons' items from left nav, and deprecate 'addons' doc page\n\nThe plan:\n[X] Remove links to 'addons' items from main navigation\n[X] Add deprecation notices where appropriate, and update syntax to show\nusing the separate modules.\n[ ] Update other references to 'React.addons' in docs. Coming in next\ncommit.\n--- blocked but coming in future PRs\n[ ] Link to a blog post describing the new locations of add-ons in the\ndeprecation notice on the '/docs/addons.html' page. Blocked until we\nactually publish that blog post.\n[ ] Move the docs for each add-on to the actual github repo where it now\nlives.\n[ ] Redirect the old add-ons doc permalinks to the docs in the separate\ngithub repos for those modules.\n[ ] Remove the old add-ons doc markdown files from React core docs.\n\nRemove references to React.addons from docs\n\nJust misc. places where we referenced the 'addons' feature. All gone!", 'Remove indirection in checking propTypes (#9358)\n\n\nRemove indirection in checking propTypes\n\n\nSilence flow errors\n\n', 'Tweak Rollup setup (#9364)\n\n\nRemove unused Rollup shim and exports\n\n\nAdd a way to build multiple bundles\n\n', 'Make ReactDebugCurrentFrame shared state between core and renderers (#9365)', '16.0.0-alpha.8', "Update example snippet in old 'React.addons' doc page (#9363)\n\nUpdate example snippet in old 'React.addons' doc page\n\nThis makes the example more consistent.\n\nAdd back the pointers in docs that were mistakenly removed\n\nIn https://github.com/facebook/react/pull/9359 we accidentally removed\npointers in some doc pages. Putting them back now.\n\nLink to npm package instead of github page\n\nThis seems like a more stable place to link to in the 'context'\ndocument.\nBased on @bvaughn's feedback in https://github.com/facebook/react/pull/9359", "Replace shims with explicit React access from the renderers for shared global state (#9366)\n\n\nRemove non-existent /lib/ from souce files\n\n\nReplace all shims with explicit access\n\n\nThis deletes shims and changes to access require('react').DO_NOT_USE from renderers for global shared state.\nI cloned flattenChildren() and traverseAllChildren() because they relied on CurrentOwner but were used both from Stack and Isomorphic. The stack implementations will die, and the isomorphic ones can be changed to be optimized for Children specifically in the future.\nI also deleted UMD shims because they are now unnecessary. I moved the internals assignment to main modules since they're now used in tests, and made them direct UMD entry points.", 'Blog post and changelog for 15.5.0 (#9368)', 'Point users to the npm page instead of the github project for prop-types (#9373)', "Amended implementation-notes.md with link to Dan Abramov's post describing difference between React components, elements, and instances (#9388)\n\n\nAmended implementation-notes.md to include a link to a blog post by Dan Abramov, explaining the difference between components, elements, and instances. An understanding of this distinction is crucial in tracing through Implementation pseudocode, and reading Dan's blog first may ease newcomers into understanding the implementation.\n\n\nadjusted wording to maintain stylistic consistency with rest of content, per @aweary's request\n\n", 'Fix ReactARTStack bundles to not include DOM Stack inside (#9394)\n\n\nMove ReactDOMFrameScheduling.js to shared (between dom and art)\n\n\nFix ReactARTStack bundles to not include DOM Stack inside\n\n', 'Delete examples dir from codebase overview (#9397)\nRemoves doc about folder that no longer exists.', 'Delete createClass\nRemove createClass from isomorphic package', 'Rewrite Stack implementation of ReactART using plain classes\ninstead of createClass', 'Update tests to use plain JavaScript classes\nTests that rely on replaceState or isMounted use\nupdater.enqueueReplaceState and updater.isMounted instead.', 'Run prettier', 'Warn once when attempting to access React.createClass\nShould still be undefined.', 'Convert createClass caller\nThis snuck in after rebasing', 'Add react-create-class integration tests\nThese are mostly copied from the old ReactClass-test module.', 'react-create-class -> create-react-class', 'Fix ignore patterns in package.json (#9409)', 'Fix minor typo in lifting-state-up.md (#9408)', 'Use caret range in blog instructions\nThe release was a bit broken.', "createClass + PropTypes + checkPropTypes warnings (#9399)\n(Temporarily) re-adds getters with deprecation warnings for React.PropTypes, React.checkPropTypes, and React.createClass.\n\n08bd020: Replace all references to React.PropTypes with prop-types to avoid triggering our own warning message.\nef5b5c6: Removed several references to React.createClass that appeared after rebasing this branch. (reviewed by @flarnie)\n524ce20: Added getters for createClass and PropTypes to the main React isomorphic object, behind one-time warning messages. (reviewed by @spicyj)\ndb48f54: Fixed Rollup bundles to inline 'prop-types' and 'create-react-class' for UMD builds only. (reviewed by @spicyj, @trueadm )\ncf49cfd: Updated tests-passing.txt to remove tests that were deleted in this branch.\nd34109a: Responses to PR feedback from @spicyj. (Added package.json dependencies to packages/react and packages/react-dom. Renamed a var. Expanded on an inline comment.)\n488c8d2: Added warning for moved package to React.checkPropTypes accessor too and updated build script.\n83bcb29: Wordsmithing for deprecation notices (added fb.me links).\nafdc9d2: Tweaked legacy module inlining to remove order-of-deps constraint\nd1348b9: Removed $FlowFixMe.\n7dbc3e7: More wordsmithing of deprecation notices based on Dan's feedback.\n", 'Bumped versions for 16.0.0-alpha.9 and re-built', 'Update typechecking-with-proptypes.md (#9392)\n\n\nUpdate typechecking-with-proptypes.md\n\n\nUpdate typechecking-with-proptypes.md\n\n\nUse consistent style for PropTypes import\n\n', 'Refractor docs to indicate that state set to props in constructor will not recieve the updated props (#9404)', 'Fix the proptypes deprecation warning url on the "Don\'t Call PropTypes Warning" doc page (#9419)\n\n\nUse the same prop-types link on the warning docs page as the main proptypes doc page\n\n\nLink to repo instead\n\n', 'Update proptypes doc (#9391)\n\n\nUpdate proptypes doc\n\n\nRemoved note\n\n', 'Docs: Clarification of setState() behavior (#9329)\n\nClarification of setState() behavior\n\nsetState() is a frequent source of confusion for people new to React, and I believe part of that is due to minimization of the impact of the asynchronous behavior of setState() in the documentation. This revision is an attempt to clarify that behavior. For motivation and justification, see setState Gate.\n\n\nUpdate reference-react-component.md\n\n\nSignature fix\n\n\nUpdate to address @acdlite concerns\n\n\nAdd more details\n\n', "Add tabs to installation page (#9275, #9277) (#9401)\n\nAdd tabs to installation page (#9275, #9277)\n\nThis adds tabs for create-react-app and existing apps to the installation section of the docs. The tab implementation is a simplified version of React Native's installation page.\nFixes #9275.\n\n\nUse classList instead of className\n\n\nUse same implementation as in RN\n\n", 'Switch Installation to a tab when hash is present (#9422)', 'Updated recommended links for installation in readme (#9425)', "Updated link for good first bug's in README.md (#9273)\n\n\nUpdated link for good first bug's in README.md\n\n\nChanged text for beginner friendly bugs\n\n\nupdate beginner friendly bugs section title\n\n", 'Updated the Good First Bug section in readme (#9429)\n\n\nUpdated the Good First Bug section in readme\n\n\nInconsistent use of quotes. Prefered single quotes instead of double quotes\n\n\nUpdated Good first bug link in how_to_contribute doc.\n\n\nUndo JSX attribute quote change\n\n\ndon\'t capitalize "beginner friendly issue"\n\n', 'Add warning if rendering and HTMLUnknownElement (#9163)\n\n\nAdd warning if rendering and HTMLUnknownElement\n\n\nRecords fiber tests\n\n\nFixes linting and server render tests\n\n\nIncorporates review comments\n\n\nUses ownerDocument instead of document\n\n\nuses el instead of creating a new element\n\n\nRemoves warning check of voidElementTags\n\n\nAdd missing space to unknown element warning\n\n\nOnly call isCustomComponent once\n\n\nSpy on console in menuitem test\n\n\nSince menuitem is treated as an unknown element in jsdom it triggers the unknown element warning.\n\n\nAdd unknown element warning to Fiber\n\n\nReplace instanceof with toString check\n\n\nIt is more resilient.\n\nRecord tests\n', 'Add component stack to uncontrolled-to-controlled warning (#9416)\nhttps://twitter.com/JulianVModesto/status/836089555304448000\nhttps://twitter.com/abevoelker/status/836040051993763842', 'Add component stack to ReactControlledValuePropTypes (#9435)', 'Make nodeType into constant for readability and reuse (#9113)\n\n\nMake nodeType into constant for readability and reuse\n\n\nFix eslint line length warning\n\n\nDelete unused nodeType values\n\n\nDestructure HTMLNodeType constant\n\n\nMake nodeType into constant for readability and reuse\n\n\nFix eslint line length warning\n\n\nDelete unused nodeType values\n\n\nDestructure HTMLNodeType constant\n\n\nFix test\n\n\nFormat using prettier\n\n', 'Only attempt to clear measures if we created the measure (#9451)\nThis fixes an issue where if we decided not to create a measurement we would clear ALL measurements from the performance entry buffer due to passing undefined as the entry name.', '[Documentation] Impreove the react-component section of doc (#9349)\n\nImpreove react-component of doc \n\n#9304\n\n\nupdate description\n\n\nadd missing space\n\n', "Unique headings for linking purposes (#9259)\nPreviously two headings were 'Javascript Expressions' - now 'Javascript\nExpressions as Props' and 'Javascript Expressions as Children'", "Update jsx-in-depth.md (#9178)\n\nUpdate jsx-in-depth.md\n\nLine 9 isn't changed\n\n\nMove selection down\n\n\nFix\n\n", 'Sort out conferences by date (#9172)', 'Lift state up - Updating the documentation to mention that onClick is a synthetic event handler (#9427)\n\n\nLift state up - Updating the documentation to mention that onClick is a synthetic event handler\n\n\nReview comments - Rephrase to handle synthetic events and event handler patterns\n\n\nTweak\n\n', 'Fixed grammar (#9432)\n\n\nUpdate codebase-overview.md\n\n\nSome more fixes\n\n', '[Tutorial] ES6, installation, and button closing tag (#9441)\n\n\nadds notes to tutorial on es6 and installation\n\n\nfixes tutorial mention of opening button tag\n\n\nMore writing\n\n\nUpdate\n\n', 'Minor tweaks to tutorial', 'Fix duplicate sentence', 'Minor tutorial nits', 'Add missing tutorial sidebar links', 'Tweak tutorial structure', "FIX: Move CRA build info under it's tab page (#9452)\n\n\nFIX: Move CRA build info under it's tab page\n\n\nAdd some links\n\n", 'Fix errors in React Native children management (#9449)\n\n\nFix errors in React Native children management\n\n\nSupport using appendChild to move an existing child (Fiber does this, but we were assuming all children here were new; Yoga throws if you insert a child that already has a parent)\n\n\nCalculate beforeChildIndex after removing old child (previously, off by one when the new position is later than the old position)\n\n\nAdd better children management tests for RN\n\n', 'Reorganize the "following along" instructions (#9453)\n\n\nReorganize the "following along" instructions\n\n\nMinor tweaks\n\n', 'Fixing the instantiation of customized builtin elements (related to custom elements) (#9313)\n\n\nFixing the creation of customized builtin elements\n\n\nWhitespace\n\n\nRunning prettier\n\n\nUpdating ReactDOMFiberComponent\n\n', '[Docs] Add accessibility to tabs in installation documentation (#9431)\n\n\nAdd accessibility to tabs in installation documentation\n\n\nChange color and fix styling\n\n', 'Warn for keys in fragments - third approach (#9445)\n\nFix tests to pass when we warn for missing keys in fragments\n\nIn most cases we just needed to add the \'key\' prop.\nThis ignores the tests which are already failing on master when running\nwith REACT_DOM_JEST_USE_FIBER=1 - there are 8.\nAll tests should now pass with npm run test, and the 8 which fail when\nrunning REACT_DOM_JEST_USE_FIBER=1 npm run test are the same 8 which\nare failing on master.\n\nAdded missing key warning for children in array fragments\n\nAfter trying twice to reuse the code between the ReactChildFiber and\nReactElementValidator, I am thinking that it\'s simpler to just have some\nduplication of code. The parts that are shared are interleaved with\nparts which cannot be shared, either because of singleton modules that\nmust be required differently in \'isomorphic\' and the \'renderers\', or the\nfact that \'warning\' requires a hard coded string.\nTest Plan:\n\nAdded test to ReactChildren-test\n\nManually tested via fixture that was not committed.\n\n\ncommit updated "scripts/rollup/results.json"\n\n\nMake \'ReactChildren-test\' more specific, and remove unneeded nesting\n\n\nBased on helpful tips from @spicyj and @aweary\'s review\n - Made the unit test for the warning on missing keys more specific\n - Removed unneeded nesting in the code which generates missing key\n   warning\n - Change test syntax to use JSX to be more consistent\nAlso fixes flow warning.\n\n\nCommit update of scripts/rollup/results.json\n\n\nrun "scripts/fiber/record-tests"\n\n', 'Fix CI failures in master (#9455)\n\nRan prettier over UIManager mock\nTemporarily disabled an invariant() in UIManager mock that was breaking tests\nUpdated Fiber passing tests\n', 'Uncomment invariant in UIManager mock (#9461)', "Shallow renderer and test utils bundles (#9426)\nShallow renderer and test utils bundles\nAdds new bundles introduced with React 15.5 release to master (and 16 alpha)\nreact-dom/test-utils:\nThis new bundle contains what used to be react-addons-test-utils. This bundle shares things from react-dom rather than duplicates them.\nA temporary createRenderer method has been left behind as a way to access the new shallow renderer. This is for the ReactNative release cycle only and should be going away before the final release.\nreact-test-renderer/shallow:\nThis new shallow renderer is almost entirely stand-alone (in that it doesn't use the React reconciler or scheduler). The only touch points are ReactElement and prop/context validation. This renderer is stack and fiber compatible.", 'Fix master (ran prettier)', '[Docs: Installation] Fix tabs responsive layout - Resubmit (#9458)\n\n\n[Docs: Installation] Fix tabs responsive layout\n\n\nMove tabs a pixel down\n\n\nRemove left margin on first tab\n\n\nRemove the long line\n\n\nFix mobile styles\n\n', 'Bump prop-types', 'Add component stack to invalid-object-child error (#9415)\nhttps://twitter.com/EsaMatti/status/835952325525188608 (28 likes!)', 'Prettier 1.2 (#9462)', 'Adds CSS Grid properties to list of unitless numbers (#9185)', 'Add contextTag field to Fiber type\ncontextTag is a bitmask that describes properties about the fiber\nand its subtree. For example, the AsyncUpdates flag indicates whether\nthe subtree should use async scheduling.\nWhen a fiber is created, it inherits the bitmask of its parent.', "Inherit contextTag from the parent on creation\nA fiber has all the context flags of its parent. It may also add\nadditional ones during construction/mount. After mounting, contextTag\nshouldn't change.", 'Use different default priority depending on the AsyncUpdate context flag\n\nA priority context of NoWork represents the default priority\nChanged the signature of getPriorityContext to accept the fiber that\nis about to be updated.\n', 'ReactDOM.unstable_asyncRender creates an async-by-default tree\nThe default priority of updates in a async tree is LowPriority, rather\nthan SynchronousPriority.\nWarns if you call unstable_asyncRender on a tree that was created with\nthe normal, sync ReactDOM.render.', 'instance.unstable_asyncUpdates = true creates an async subtree\nSame behavior as unstable_asyncRender. Can be used to wrap a specific\nsubtree, rather than an entire root.', 'Run prettier', 'Run Fiber test script', 'Add enableAsyncSubtreeAPI to host config\nAllows us to control this feature on a per-renderer basis', 'Rename contextTag -> internalContextTag', 'Remove unstable_asyncRender() API in favor of always using a wrapper', "Use number type for bitfields\nUnions don't enumerate all the possible combinations of bitfields. I'm\nnot actually sure why this was type-checking before.\nnumber doesn't provide much safety but it's more correct.", 'Change unstable_asyncUpdates from an instance to a static property\nThis lets us check for its existence before the instance is constructed.\nAlso works with functional components.', "Remove enableAsyncSubtreeAPI from host config\nUse a ReactFeatureFlag instead. It won't be per-renderer, but we likely\nwon't need that.\nWhen enableAsyncSubtreeAPI is false, unstable_asyncUpdates is ignored,\nbut does not warn or throw. That way if we discover a bug in async mode,\nwe can flip the flag and revert back to sync without code changes.", 'Fix subtree tests so that async component is not top-level', 'Run prettier after update to 1.2 in master', 'Updated PropTypes test to work with newer prop-types version (#9471)\nThe prop-types lib got an anti-spamming change in 15.5.8 that broke some of our tests (see reactjs/prop-types/commit/e1d51dd0efbd0eee5e4a8d24759f2a4d518721d3). This PR resolves that by resetting the prop-types import between tests.', 'Bumped version numbers for alpha 10 (#9474)', 'Use setProperty when setting style properties (#9302)\n\nUse setProperty when setting style properties\n\nsetProperty is faster in all/most modern browsers. It also lets us support CSS variables.\n\n\nOnly use setProperty when setting CSS variables\n\n\nAdd test to ensure setting CSS variables do not warn\n\n\nMake this PR pretty again\n\n\nRun fiber test script\n\n', 'Ignoring files for vim users. (#9199)', 'Add more details in jsx-in-depth.md (#9006)\n\n\njsx-in-depth.md add ternary statement for javascript expressions section\n\n\njsx-in-depth.md add explanation to get falsey values for props\n\n\nupdate jsx-in-depth.md\n\n\nensure links work locally, remove section about falsey prop values\n\n\nFix links\n\n', 'Remove Prev Next links from add-ons documentation (#9226)', 'Warn about Infinity in style value (#9360)\n\n\nwarn about Infinity in style value\n\n\nprettier\n\n', 'Warning added if defaultProps were defined as an instance property (#9433)\n\n\nAdded warning when defaultProps was defined as an instance property\n\n\nAdded testcases to check warning message for defaultProps\n\n\nUpdate fiber tests\n\n', '[WIP] Warn in dev if shouldComponentUpdate is defined on PureComponent (#9240)\n\n\nAdd test for React.PureComponent\n\n\nAdd warning when shouldComponentUpdate is declared in a PureComponent\n\n\nAdd actionable warning\n\n\nAdd warning in Fiber\n\n\nFormat added code by running yarn prettier\n\n\nMove pure sCU check to checkClassInstance\n\n\nThat way it warns before the component updates', 'Stop passing prevContext param to componentDidUpdate (#8631)', "Add link to 'Typechecking with PropTypes' under 'Advanced Guides' (#9472)\nThis should have been retained in our docs, since PropTypes are only\nmoved and not deprecated.\nPartially handles #9467, and I'll make a separate PR to\nhttps://github.com/reactjs/prop-types to add more docs to the README\nthere.", "Don't build gh-pages branch on CircleCI (#9442)", 'Updates how-to-contribute.md to use JSFiddle referenced in submit Git issue template (#9503)', 'Move ReactDOMFactories into separate package (#8356)\n\nUpdate examples to no longer use React.DOM\nAdd package and documentation entries for react-addons-dom-factories\nUpdate dom-factories readme\nSet up proxy to intercept React.DOM usage\nUpdate ReactDOM children tests to use createElement\nAdd more specific warning assertion for React DOM factories\nDo not use expectDev in ReactDOMFactories tests\n', "ReactARTStack should use ReactDOM's ReactUpdates (#9515)", 'Prettier', 'Added stack renderer to react-test-renderer bundle temporarily (#9514)\nAlso fixed an error in a temporary export property that had been added to the React object', 'Bumped version numbers and built 16.0.0-alpha.11', 'Describe fixtures dir in the codebase overview (#9516)\n\n\nDescribe fixtures dir in overview\n\n\nFix folder name\n\n', 'Consolidate events between EventConstants and BrowserEventEmitter (#9512)', "Improve component type check in getComponentKey. (#9464)\n\nImprove component type check in getComponentKey.\n\nThe sequence\ncomponent && typeof component === 'object'\nchecks whether component is any JavaScript object except document.all.\nSince document.all cannot occur here, this can be replaced with the\nusual\ntypeof component === 'object' && component !== null\nsequence, which yields true for all JavaScript objects and is well\noptimized by all JavaScript engines.\n\nRun yarn prettier.\n", 'Prettier', 'Rename react-dom to ReactDOM in Facebook www (#9525)', "Use prop-types instead of prop-types factory (#9526)\nLatest versions of prop-types don't depend on React, so the factory is\nnot necessary, and in fact bloats the build because it is intended for\n15.5 and so doesn't strip out the checkers in prod.", 'adds indirect refs to docs (#9528)\n\n\nadds indirect refs to docs\n\n\nAdd more info\n\n\nExplain clearer\n\n\nRephrase\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n', 'updates yarn.lock (#9530)', 'Prevent process polyfill to be included in builds because of process guards preventing code replace (#9518)', 'Add reference to the Hyperscript libraries (#9517)\n\nAdd reference to the Hyperscript libraries\n\nI feel these should be mentioned as they provide terser syntax than using R.createElement directly, even with a shorthand.\n\nRephrase\n', '[Docs] Fix confusing description for the  usage (#9502)\n\n\nFix confusing description for the  usage\n\n\nUpdate jsx-in-depth.md\n\n\nUpdate reference-react-dom-server.md\n\n\nUpdate reference-react-dom.md\n\n\nUpdate reference-react.md\n\n', '[site] Load libraries from unpkg (#9499)\n\n\n[site] Load libraries from unpkg\n\n\nRevert Gemfile changes\n\n', 'fixed error formatting in live editor (#9497)', 'Remove outdated Troubleshooting section (#9489)\n\n\nfixed a simple typo in README.md troubleshooting section\n\n\nRemove the troubleshooting section\n\n', 'React.createElement syntax (#9459)\n\nReact.createElement syntax\n\nAdded React.createElement syntax.\nI think this is required for this tutorial.\n\nReword\n', "Add guide on integrating with non-react code (#9316)\n\n\nAdd guide on integrating with non-react code\n\n\nCapitalize guide title\n\n\nMake links to other docs relative\n\n\nRephrase 'What it does do'\n\n\nRemove experimental syntax\n\n\nCapitalize Backbone\n\n\nRemove empty lifecycle method in generic jQuery example\n\n\nUse shouldComponentUpdate() not componentWillUpdate()\n\n\nPrefer single quotes\n\n\nAdd cleanup to generic jQuery example\n\n\nCapitalize React\n\n\nGeneralize the section on Backbone Views\n\n\nGeneralize the section on Backbone Models, a little\n\n\nAdd introduction\n\n\nAdjust wording\n\n\nSimplify ref callbacks\n\n\nFix typo in generic jQuery example\n\n\nFix typos in Backbone models in React components\n\n\nFix more typos in Backbone models in React components\n\n\nAdd generic section on integrating with other view libraries\n\n\nStress the benefits of an unchanging React element\n\n\nSmall changes to introduction\n\n\nAdd missing semicolon\n\n\nRevise generic jQuery wrapper section\n\n\nMoved the section on using empty elements to prevent conflicts above the\ncode example and added brief introduction to that example.\n\n\nAdd usage example for Chosen wrapper\n\n\nPrevent Chosen wrapper from updating\n\n\nNote that sharing the DOM with plugins is not recommended\n\n\nMention how React is used at Facebook\n\n\nMention React event system in template rendering section\n\n\nRemove destructuring from function parameters\n\n\nDo not name React components Component\n\n\nElaborate on unmountComponentAtNode()\n\n\nMention preference for unidirectional data flow\n\n\nRename backboneModelAdapter\n\n\nReplace rest syntax\n\n\nRespond to updated model in connectToBackboneModel\n\n\nRewrite connectToBackboneModel example\n\n\nRework connectToBackboneModel example\n\n\nMisc changes\n\n\nMisc changes\n\n\nChange wording\n\n\nTweak some parts\n\n", 'Completely remove Object.prototype.hasOwnProperty.call() (#7853)\n\n\nAvoid directly calling hasOwnProperty\n\n\ncorrect use hasOwnProperty\n\n\nadded eslint rules no-prototype-builtins http://eslint.org/docs/rules/no-prototype-builtins\n\n\nsingle style hasOwnProperty\n\n\nadded file info / global hasOwnProperty:true /\n\n\nadded file info / global hasOwnProperty:true /\n\n\nfixed no-prototype-builtins after merge\n\n\nyarn run prettier fixed\n\n\nremove src/addons\n\n\nreturn space after *\n\n\nremove / global hasOwnProperty:true /\n\n\nRemoved using Object.prototype.hasOwnProperty.call()\n\n\nyarn run prettier fixed\n\n\nRemoved using Object.prototype.hasOwnProperty.call()\n\n', "Fix unnecessary ReactDOM require (#9534)\nApparently, when you mark something as external in Rollup, a require\nstatement is inserted even if the module isn't used. This is causing\nReactDOM and several other modules to be inserted unnecessarily.\nWe need a better fix for this, but I'm pushing this quick fix for\nnow since it's blocking sync to www.", 'includes -> indexOf', 'pre format only compile time errors (#9538)\n\n\npre format only compile time errors\n\n\nStyle tweak\n\n', "Fiber ReactDOM shouldn't throw on import in Node environment if it's unused (#9389)\n\n\nFixes #9102 by fake polyfilling rAF (and rIC)\n\n\nEnsure we restore globals even if test fails + minor nits\n\n\nRemove periods\n\n", "SSR fixture (#9547)\nAdds a server-rendering fixture based on create-react-app without ejecting.\nThis is using the full-page strategy because I wanted to flush out any issues with it. Turns out there's a lot of little things that are fixable and some non-fixable. This actually surfaced some differences between the current strategy and the one I had in mind.\nThis uses the asset manifest from webpack to pass the final URLs to the client. This ensures that we can render the same exact mark up on the client - including the URL to our own script that we're running in.\nDoing full document renders work with 15.x as long as the checksum matches. However, with the patch up reviving strategy I had in mind it would end up removing the CSS tags that webpack injects before running our render call. This is a behavior change.\nIn dev mode the server runs a proxy in front of the normal CRA webpack server so that we can replace the HTML request for the root page.\nI don't know what the best way to link in the react and react-dom packages. Each fixture has a different strategy so here's another one. Just add NODE_PATH=../../build/packages in front of all commands.", "Don't try to load asset manifest in dev mode\nWe're not going to use it so don't try to load it since it may not have\nbeen built yet.", 'Fix proto bug in ReactDOMSelect (#9536)\nhttps://twitter.com/rauschma/status/857307345231249409', 'docs better indicate that state updaters shallowly merge with state (#9554)\nthis was a surprise to me because the docs seemed to indicate that when\nusing an updater, the result needed to be a new state object. I was\nnot alone\ni think in discovering this as a result of the previous tweet in the\nthread.', 'Clarify where docs live', "Update Changelog for v15.5.1-15.5.4 (#9537)\n\nUpdate Changelog for v15.5.1-15.5.4\n\nThis could really use extra code review attention since the history of\nthese changes was a bit convoluted to follow.\nAfter talking to @bvaughn and @acdlite, we thought it might make sense\nto put the 'add-ons' changes in a separate change log. The other option,\nof including them in the main React change log, seemed the more\nconfusing of the two.\nAlso this commit is related to and somewhat blocked by\nhttps://github.com/reactjs/prop-types/pull/40\nwhat is the change?:\nAdding the change log for recent patch versions of React.\nwhy make this change?:\nWe missed this step in the flurry of releasing patches, and it's useful\nfor folks who want info about what version to use.\ntest plan:\nVisual inspection of the change log.\nissue:\nhttps://github.com/facebook/react/issues/9443\n\nFurther improve CHANGELOG entries for v15.5.1-15.5.4\n\nwhat is the change?:\n- Use the '[@author] in [#PR/commit]' format for annotations\n- Make annotations less technical, more clear\n- Move 'React Addons' updates into main changelog\n- Remove separate 'React Addons' changelog\nwhy make this change?:\nThese changes each make things more clear and accurate.\ntest plan:\nVisual inspection\nissue:\n\nFix final nits in CHANGELOG\n\nwhat is the change?:\n- Put backticks around package names\n- Reformat link to to commit in '(@user in #NNNN)' format\n- Remove newlines after subheaders; in the past we sometimes have\n  included a newline after the subheader, but most recently it looks\n  like we do not.\n- Add some missing punctuation.\nwhy make this change?:\nConsistency and aesthetics\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9443\n\nAdd deprecation notice to v15.5.0-15.5.3\n\nwhat is the change?:\nAdding deprecation notice to some recent React versions.\nwhy make this change?:\nThese versions of React use a version of prop-types that had a\ncritical bug. We updated the dependency in React 15.5.4, and hopefully\npeople will see this notice and update.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/pull/9537", 'fix typos in CHANGELOG', '[Tutorial] Make it easier to follow the instructions (#9454)\n\n\ntutorial: adds note about onClick\n\n\ntutorial: show full square component\n\n\nmerge\n\n\nfixes line number\n\n\ntutorial: misc changes\n\n\nfixes Board render initial code sample\n\n\n[tutorial] adds codepen links and misc small fixes\n\n\nremoves useless arrow functions, #9531\n\n\n{this.renderSquare} new lines\n\n\nbe more explicit about history state\n\n\nfixes highlight\n\n\nfollowing along locally\n\n\nchanges todo to this.props.value\n\n\nremoves calculateWinner from initial codepens and includes it in tutorial\n\n\nremoves note about calculateWinner at end of file\n\n\nadds debug-view and debug-view-final\n\n\nremoves debug view, updates codepen instructions\n\n\nadds another codepen\n\n\ntutorial.md\n\n\ntutorial.md\n\n\ntutorial.md\n\n\ntutorial.md\n\n\nPut . into links for consistency with docs\n\n\nMake the very first change easier to follow\n\n\nA few more changes\n\n', 'Remove unnecessary # in changelog', 'Warning message updated if defaultProps were defined as an instance property (#9493)\n\n\nUpdated the warning message for setting defaultProps on instance property.\n\n\nUpdated the testcases for the defaultProps warning.\n\n\nUpdated the warning message for defaultProps set on instance property.\n\n', "Don't prevent extensions on Fiber if using bad Map polyfill (#9572)\nMany Map polyfills work by adding an extra field to the key type.\nIn the future, we'll likely print a warning.", 'Move AsyncUpdates flag check to class-only path (#9570)', 'Change warning casing (#9573)\n\n\nChange warning casing\n\n\nUpdate ReactFiberClassComponent.js\n\n\nUpdate ReactCompositeComponent.js\n\n', 'Demonstrate failing test when resuming mount of class component', 'Fix bug where null props is passed to constructor when resuming mount\nAnother example of where the pending/progressed/memoized props model\nwould benefit from a refactor.', 'Only perform class checks on initial mount\nAvoids firing warnings multiple times', 'Add missing passing test', "[Docs] Show the name 'React' first in the homepage's  (#9582)", "Report version and bundle type to DevTools (#9586)\n\n\nReport version and bundle type to DevTools\n\n\nFlip the flag the other way around\n\n\nIt's easier to remember 0 is always PROD, and 1 is like DEV flag. 2 could be PROFILE in the future.\n\nAdd version to RN inject call\n", '16.0.0-alpha.12', 'Add more info about building for production (#9592)\n\n\nAdd more info about building for production\n\n\nAdd more info to the docs\n\n', 'Add DEV mode note to installation doc (#8784) (#9157)\n\n\nAdd DEV mode note to installation doc (#8784)\n\n\nAddress feedback from Dan on wording\n\n', 'Use a more specific link', 'Fix a typo', 'Fix mobile layout', "Add 'unreleased' incremental change log for v15.6.0 (#9544)\n\nAdd 'unreleased' incremental change log for v15.6.0\n\nwhat is the change?:\nAdding a section to the change log where we start accumulating\nannotations for React v15.6.0.\nwhy make this change?:\n- Saves us the trouble of writing the change log entry all at once when\n  we do the release.\n- Adds transparency about what is in the upcoming release, for those who\n  aren't following https://github.com/facebook/react/issues/9398\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nMinor tweaks to v15.6.0 changelog annotation\n\nwhat is the change?:\n- added missing # for commit hashes\n- added minor details to two annotations\nThanks to @gaearon for the code review comments.\nwhy make this change?:\nConsistency and clarity.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nRemove hashes from commit numbers\n\nwhat is the change?:\nWe had added hashes to some commit numbers, but ideally only do that\nfor PRs.\nwhy make this change?:\nConsistency - this is how github displays those types of links too. PRs\nget a '#', and commits don't.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398", "Remove loose check on non-number controlled inputs. Fix trailing dot issue. (#9584)\n\nRemove loose check when assigning non-number inputs\n\nThis commit removes a check I added when working on number input\nissues where we perform a loose check on an input's value before we\nassign it. This prevented controlled text inputs from disallowing\nnumeric text entry.\nI also added a DOM fixture text case.\nRelated issues:\nhttps://github.com/facebook/react/issues/9561#issuecomment-298394312\n\nUse strict equality as a guard before assigning input.value\n\nThis commit adds back the guard around assigning the value property to\nan input, however it does it using a strict equals. This prevents\nvalidated inputs, like emails and urls from losing the cursor\nposition.\nIt also adds associated test fixtures.\n\nAdd copy command after build for interup with surge.sh\n", 'Tweak Tutorial based on feedback', 'Update flow to 0.45 (#9603)', 'Fix sequencing in the Tutorial (#9615)\n\n\nFix sequencing in the Tutorial\n\n\nUpdate tutorial.md\n\n\nUpdate tutorial.md\n\n', 'Fix horizontal scrolling in docs (#9613)', "Don't recreate instance when resuming a class component's initial mount\nRecreating the class instance causes refs (and other callbacks) to close\nover stale instances.\nInstead, re-use the previous instance. componentWillMount is called\nagain. We also call componentWillReceiveProps, to ensure that\nstate derived from props remains in sync.", 'Allow assigning to this.state inside componentWillMount, with a warning', 'updateQueue -> newUpdateQueue\nFix typo introduced after renaming a variable to address shadowing.', 'Fix return value of ReactDOMFiber.unmountComponentAtNode (#9619)', 'Add React benchmarking infrastructure (#9465)\n\n\nInitial commit for WIP benchmarking infrastructure\n\n\nfixed lint issues and ran prettier\n\n\nadded /scripts/bench/ to ignore paths for Jest\n\n\ntidied up code and fixed a few bugs in the runner.js\n\n\nfixed eslint\n\n\nimproved the benchmark output from the runner\n\n\nfixed typo\n\n\ntided up print output in runner.js\n\n\nthrow error if chrome canary is not installed on mac\n\n\nadded better bench stats output (tables)\n\n\nadded benchmark diff to table results\n\n\nadds bundle size comparisons to results\n\n\ntidied up the results\n\n\nfixed prettier output\n\n\nattempt to trigger bech for circleci build\n\n\nfixes flow exlclusion for lighthouse module\n\n\nadded class components benchmark\n\n\ncleaned up stats.js\n\n\nstability changes\n\n\ncircleci node version to 7\n\n\nadded another benchmark\n\n\nadded colours to the different benchmarks to check if being cached\n\n\nforce no-cache headers\n\n\nadded more info messages\n\n\nrefactor chrome launching.\n\n\nfixed an issue where launcher.kill might fail\n\n\nMove server to runner. Launch it only once.\n\n\ntidy up\n\n\nchanges the logic in how the remote repo is checked out\n\n\nremoves bench from circleci build\n\n\nremoved colors from benchmarks (no longer needed)\n\n\nadded CI integration comment\n\n\nadded hacker news benchmark\n\n\nadded skipBuild functionality\n\n\nrelabelled remote\n\n\nAdd confidence intervals\n\n\nadded first meaningful paint\n\n\nremoved some unused code\n\n\nreverted code.json\n\n\nupdated benchmark runs back to 10\n\n\nno longer breaks when results contain missing bundles\n\n\nadds CPU throttling\n\n\nrenamed build to remote-repo\n\n\nsmall fix to build\n\n\nfixed bad merge\n\n\nupped runs to 10 from 2 again\n\n\nproperly pulls master\n\n\nremoves old-bench\n\n\nruns benchmarks in headless mode\n\n\nadds a --headless option\n\n\nimproved the git build process\n\n\nadded README\n\n\nupdated based feedback from review\n\n\nadds merge base commit sha\n\n\naddressing more PR feedback\n\n\nremove built JS react files\n\n\nupdated .gitignore\n\n\nadded combined bundle load times to the metrics\n\n', 'Add PR #9584 to 15.6 change log (#9598)\nUpdating the change log~ :)\nissue:\nhttps://github.com/facebook/react/issues/9398', 'Add PR #8356 to the change log for v15.6 (#9636)\nAnother change log update ~ v15.6 is closer than ever! :)\nIssue:', 'Sync RN downstream fix (#9637)', 'Rename ReactEventListener to ReactDOMEventListener (#9640)\nReactEventListener is a DOM-specific module although the name suggests\notherwise. This change renames the module to the more specific\nReactDOMEventListener.', 'Mention new fixes for addons in Changelog (#9643)', 'Fix typo on tutorial.md. (#9644)\nThe absence of the word this will cause CodePen\nto scream at you. This fix should avoid that.', 'Remove injectReactDOMEventListener from ReactBrowserEventEmitter (#9656)\n\nRemove injectReactDOMEventListener from ReactBrowserEventEmitter\n\nThis PR removes the injection of ReactDOMEventListener from\nReactBrowserEventEmitter. Instead, the required initialization will\nhappen directly in ReactDOMInjection.\nThis injection was (probably) originally implemented for React Native\nbut never used, so we can clean it up.\n\nMention how to see the full ouput of fiber tests\n', "Move small utility modules out of ReactDOM(Fiber)?Component (#9658)\n\nMove small utility modules out of ReactDOM(Fiber)?Component\n\nThese are all going to be needed in the server renderer, so I'm moving them out now so I can use them from in there.\n\nFix didWarnShadyDOM = false; line\n", 'Edit two errors in docs (#9659)', 'Always pass error code to CI (#9663)', "Wrap fiber-only test in feature flag (#9665)\nwhat is the change?:\nA test was added for a change to Fiber's behavior in #9608, and because of a\nbug in our CirclCI script it landed when failing for non-fiber runs of the\ntests.\nThis just wraps the test in a feature flag because it seems clear it was\nonly intended to test the new fiber behavior.\nThanks to @gaearon for pairing on this! :)\nwhy make this change?:\nSo that tests are passing on master.\ntest plan:\nnpm run test ReactCompositeComponentState\nissue:\nNone - figured it out before anyone opened an issue afaik.", 'Move assertValidProps into shared/utils since it will be used by the … (#9669)\n\n\nMove assertValidProps into shared/utils since it will be used by the server renderer\n\n\nExtract getCurrentOwnerName from assertValidProps and pass it in\n\n', '"yarn prettier" only checks changed files (#9670)\nCI still checks all of them.', 'Run prettier on scripts/bench (#9671)', "Move 'lighthouse' and 'nodegit' to 'optionalDependencies' (#9675)\nwhat is the change?:\nSee title.\nwhy make this change?:\nBoth these dependencies were causing issues when working on React internally at\nFB.\n'lighthouse' requires node >=6 and we don't want to folks working on React to\nusing that version of node.\nhttps://github.com/GoogleChrome/lighthouse/blob/master/package.json#L11\n'nodegit' for me throws an error related to libssh2 and it's annoying to make\nthis work in every OS. See https://github.com/nodegit/nodegit/issues/1266\ntest plan:\nnpm/yarn install\nRuns with no errors on my CentOS machine and also on MacOSX laptop.\nissue:\nThis is blocking work related to https://github.com/facebook/react/issues/9398", "[Fiber] Fix to call deferred callbackQueue even if updates are aborted (#9634)\n\n\nFix to call deferred callbackQueue even if updates are aborted\n\n\nAdd an assertion to make sure the update processed, but wasn't committed yet\n\n", 'Make the world a better place by placing closing /> on a new line (#9699)', 'Remove invalid css from DOMFixtures (#9600)', 'Initial Stack-Free SSR Implementation (#9673)\n\nServer Rendering initial commit\n\nOriginally authored by spicyj, tweakes to rebase it and make it run by tomocchino.\nAdding ReactDOMServerRendering and a createTagMarkup utility function which will be used in it.\n\n\nFix build system, add shortcut scripts\n\n\nMake more ReactServerRendering-test unit tests pass\n\n\nMake ReactServerRendering-test pass with copious help from Ben\n\n\nThis is pretty hacky and I just inlined everything, but at least I sort of understand how it works now, and all of the tests are passing. There are also only 68 tests failing in the integration test suite.\n\n\nremove some unnecessary cruft\n\n\nRun prettier on ReactDOMServerRendering.js\n\n\nFix more unit tests with Ben\n\n\nAdd support for input and textarea by copy pasting a bunch of code from ReactDOMInput/ReactDOMTextarea\n\n\nFix context unit tests with more copy paste :)\n\n\nprogress on select\n\n\nHoly shit, 100% of ReactDOMServerIntegration tests are passing\n\n\nCheckpoint to fix some of the ReactDOMComponent-test tests\n\n\nFix missing checkPropTypes\n\n\nFix some unit tests in ReactDOMComponent-test\n\n\nRun prettier on everything, thanks Ben\n\n\nget rid of ssr tests that are looking for component file names\n\n\nadd assertValidProps check\n\n\nrename flattenChildren to flattenOptionChildren per Ben\n\n\nFix all the lint crap\n\n\nMove things around in the file and turn ReactDOMServerRenderer into a class\n\n\nremove changes I added to package.json\n\n\nremove separate createOpenTagMarkup file for now since everything should be copy pasted into a single file\n\n\nre-record Fiber tests\n\n\nRevert ReactDOMServer.js and the fiber tests per Sebastian\n\n\nThis also reverts the changes I made to ReactDOMComponent-test.js which removed the stack which is missing in the new server renderer"\n\nRename files based on feedback\n\nMoving src/renderers/dom/server/ReactDOMServerRendering.js to src/renderers/server/ReactServerRenderer.js and add src/renderers/server/ReactServer.js which makes this new codepath completely separate.\n\n\nChange throw to invariant, even though we probably need to remove this at some point\n\n\nfix prettier.. sigh\n\n', "Add package builds for new server renderer and enable tests (#9710)\n\nAdjust some expectations of the server markup format of Fiber\n\nCurrently this case is using the stack renderer.\n\nEnsure debug hooks are injected into the Stack server renderer\n\nIn our tests this normally happens because ReactDOM.js injects them into\nthe shared module, but when Fiber is enabled or this is its own flat\nbundle, that doesn't happen.\n\nAdd package builds for new server renderer and enable tests\n\nReactServer -> ReactDOMServerStream\nThis file is going to be the replacement for ReactDOMServer.\nI mock ReactDOMServer and user ReactDOMServerStream when we have\nthe fiber flag enabled. I'm now also enabling this as the default for\ndistributions builds (react-dom/server on npm and\nreact-dom-server.production.min.js as umd bundle).\nI'm using traverseStackChildren instead of traverseAllChildren because\ntraverseAllChildren is now only in the isomorphic package and we don't\nwant to build all of that that into the server package.\nI also have to require lower case react for the builds to work.", "Move some tests from failing to passing except dev (#9711)\nThese throw because we're asserting on the warnings. Make this not throw\nso that they instead only fail to assert the warnings.", "Fix typo (#9717)\nThe example explaining how redux's connect works doesn't use the same component name. Line 264 references (Comment) while 274 referenced (CommentList). Changed 264 to match 274.", 'fix typo in benchmark docs (#9706)', "New blog post: What's New in Create React App (#9719)", 'Add PR #9642 to 15.6 change log (#9649)\nJust keeping this fresh.\nIssue:', "Disable ESLint's no-extend-native for two lines (#9625)", '"Timeline" => "Performance" (#9602)\nAs of Chrome 58, the Timeline tab is now called the Performance tab, this updates the "Optimizing Performance > Profiling Components with Chrome Performance" section of the docs to reflect that.', 'Add test for key warning at top level (#9473)', "Expose ReactFiberTreeReflection in FB build (#9741)\nI need this for some hacky stuff I'm doing (D5060180).", 'Move previous events to the end (#9729)', 'Move ReactEurope 2017 from Upcoming Conferences to Past Conferences (#9726)', 'Add ReactiveConf (#9723)', 'Downgrade deprecation warnings from errors to warnings (#9650)\n\nInitial regeneration of results.json\n\nwhat is the change?:\nWe ran yarn build and updated the perf. stats record.\nwhy make this change?:\nSome commits have landed without updating this. By getting an initial update, I can run the build script again after my changes and see any size regressions.\n\nDowngrade deprecation warnings from errors to warnings\n\nwhat is the change?:\nSwapping out warning module for a fork that uses console.warn.\nIt looks like we were using the warning module for deprecation notices, but there is also a \'deprecated\' module designed specifically for deprecation notices.\nHowever, we could not find any place that it was currently used.\nSince React\'s build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\nWe might consider a follow-up diff that does some clean up here;\n - remove \'deprecated\' module if it\'s unused, OR\n - use \'deprecated\' module for all our current deprecation warnings\nwhy make this change?:\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\n- They potentially cause CI failures\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\nFor more context - https://github.com/facebook/react/issues/9395\ntest plan:\nnpm run test\nand unit tests for the new modules\nand manual testing (WIP)\nissue:\nhttps://github.com/facebook/react/issues/9395\n\nAdd \'lowPriorityWarning\' to ReactExternals\n\nwhat is the change?:\nWe won\'t bundle \'lowPriorityWarning\' with the rest of React when building for Facebook.\nNOTE: A parallel commit will introduce an internal implementation of \'lowPriorityWarning\' in Facebook\'s codebase, to compensate. Will post a comment with the diff number once that is up.\nwhy make this change?:\nSo that the sync between github and Facebook can go more smoothly!\ntest plan:\nWe will see when I run the sync! But this is a reasonable first step imo.\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nMake state mutations an error, not low-pri warning\n\nwhat is the change?:\nEven though this is a "deprecation" warning, we still want to use \'console.error\' for it.\nwhy make this change?:\n- It\'s not likely to come up now, hopefully, because this warning has been present for some time\n- This will cause real issues in production if ignored\ntest plan:\nyarn test - we did fix one test which failed bc of this change\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nFix test of assigning to this.state that was only passing in fiber\n\nwhat is the change?:\nupdated a unit test for assigning directly to state; it once again raises an error and not a warning.\nwhy make this change?:\nSo that tests pass\ntest plan:\n REACT_DOM_JEST_USE_FIBER=1 yarn run test\nissue:\n\nUpdate results.json\n', 'Adds a ReactNativeInspector API to ReactNativeRenderer (#9691)\n\n\nfixed conflicts with master\n\n\nsplits fiber and stack implementations\n\n\nprettier run\n\n\nupdated fiber implementation based on feedback\n\n\nupdated fiber implementation for selecting inspector hierarchy\n\n\nrun of prettier\n\n\nfixed flow issues\n\n\nupdated stack implementation\n\n\nfixes an implementation difference where before it wasnt properly understoof\n\n\naddresses comments in PR feedback\n\n\nupdated stack inspector to use emptyObject\n\n\nUpdate ReactNativeFiberInspector.js\n\n\nFixes a flow error\n\n\nfixes last flow error\n\n\nprettier\n\n\napplied changes to how viewConfig works for fibers and extracted measure out\n\n\nfixed bad paste\n\n\nfixes flow errors\n\n\nprettyify\n\n\nrevmoed getComponentName changes\n\n\nupdated logic for getHostProps and addressed other PR feedback\n\n\nimproved throwing to invariant and update stack implemenation based on feedback\n\n\nprettier\n\n', 'Add #8575 to changelog for 15.6 (#9740)\nJust two more items before we will have an RC ready. :)', "Improve low priority warning (#9754)\n\nAdd back caught error and other checks to 'lowPriorityWarning'\n\nwhat is the change?:\nThis change makes 'lowPriorityWarning' an exact copy of 'warning.js' from\nhttps://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/forks/warning.js\nwhere before we had skipped some checks from that module.\n\nAdds an error which we catch, in order to let people find the error and resulting stack trace when using devtools with 'pause on caught errors' checked.\nAdds check that 'format' argument is passed\n\nwhy make this change?:\n- To maintain a closer fork to 'warning.js'\n- To allow easier debugging using 'pause on caught errors'\n- To validate inputs to 'lowPriorityWarning'\ntest plan:\nyarn test\nissue:\n\n\nUpdate results.json\n\n\nRun prettier\n\n", 'ReactNative flat renderer bundles (#9626)\n\n\nSplit ReactNativeFiber into separate ReactNativeFiberRenderer module\nHopefully this is sufficient to work around Rollup circular dependency problems. (To be seen in subsequent commits...)\n\n\nSplit findNodeHandle into findNodeHandleFiber + findNodeHandleStack\nThis allowed me to remove the ReactNative -> findNodeHandle injections, which should in turn allow me to require a fully-functional findNodeHandle without going through ReactNative. This will hopefully allow ReactNativeBaseomponent to avoid a circular dependency.\n\n\nUn-forked findNodeHandle in favor of just inlining the findNode function impl\n\n\ntakeSnapshot no longer requires/depends-on ReactNative for findNodeHandle\nInstead it uses the new, renderer-specific wrappers (eg findNodeHandleFiberWrapper and findNodeHandleStackWrapper) to ensure the returned value is numeric (or null). This avoids a circular dependency that would trip up Rollup.\n\n\nNativeMethodsMixin requires findNodeHandler wrapper(s) directly rather than ReactNative\nThis works around a potential circular dependency that would break the Rollup build\n\n\nAdd RN_* build targets to hash-finle-name check\n\n\nStrip @providesModule annotations from headers for RN_* builds\n\n\nAdded process.env.REACT_NATIVE_USE_FIBER to ReactNativeFeatureFlags\nThis is kind of a hacky solution, but it is temporary. It works around the fact that ReactNativeFeatureFlag values need to be set at build time in order to avoid a mismatch between runtime flag values. DOM avoids the need to do this by using injection but Native is not able to use this same approach due to circular dependency issues.\n\n\nMoved a couple of SECRET exports to dev-only. Removed SyntheticEvent and PooledClass from SECRET exports. Converted Rollup helper function to use named params.\n\n\nSplit NativeMethodsMixins interface and object-type\n\n\nAdd @noflow header to flat-bundle template to avoid triggering Flow problems\nWhen Flow tries to infer such a large file, it consumes massive amounts of CPU/RAM and can often lead to programs crashing. It is better for such large files to use .flow.js types instead.\n\n\nNativeMethodsMixin and ReactNativeFiberHostComponent now share the same Flow type\n\n\nCollocated (externally exposed) ReactTypes and ReactNativeTypes into single files to be synced to fbsource. ReactNativeFiber and ReactNativeStack use ReactNativeType Flow type\n\n\nBuild script syncs RN types and PooledClass automatically\n\n\nAdded optional sync-RN step to Rollup build script\n\n\nAdded results.json for new RN bundles\n\n', 'Bind handleChange Instead of Calling (#9764)', 'Warn it only in DEV (#9772)', 'Strip comments from UMD_PROD and NODE_PROD builds, not FB_PROD (#9776)\nThis regressed with the recent addition of RN_* bundles. I was accidentally stripping comments from FB_PROD when I meant to do the opposite. This corrects that mistake.\nNo significant bundle size change occurs when re-running this build against the version prior to the RN_* bundles.', "Remove build time extractErrors message when error codes can't be found (#9555)\n\n\nRemove error message when error codes cannot be found\n\n\nRe-record fiber tests to fix CI\n\n", "Prevent fiber from leaking into RN stack renderer (#9775)\nSince stripEnvVariables was used to replace DEV references, I assumed it (and other plugins) we run before requires statements were processed. Obviously I was wrong 😬 and as a result, the RN Stack and Fiber builds were way too large. This is an attempt to mimic the approach taken with DOM renderer and stub out modules that we explicitly don't want to include.\nThe alternative to this would have been to fork findNodeHandle, NativeMethodsMixin, ReactNativeBaseComponent, etc. and essentially avoid using the feature flag. That didn't seem tenable. The previous injection approach also doesn't work here because the circular references it resulted in caused Rollup to choke when creating the modules.", 'extractErrors -> extract-errors (#9777)', "Don't strip error messages from builds (#9778)", 'Fix Prettier', "Hydration of previously rendered server markup (#9580)\n\nDon't double validate the DOM container\n\nThe warnings need to check a valid container but that should happen in\nunstable_renderSubtreeIntoContainer too so might as well move it in.\n\nHydrating DOM\n\nHydrates a server-rendered DOM tree by traversing it and connecting up the nodes if they match. Attributes are not diffed. They're assumed to be accurate on matching nodes.\n\nRemove meta data filtering from test\n\nBecause the current server renderer includes the meta data, it remains in a revived tree.\n\n\nAnnotate because Flow\n\n\nDon't track insertion effects if we're going to hydrate\n\n\nDuring initial mount, we should not track Placement\n\nFix up test cases to ignore errors that we no longer throw\n\nTODO make these warnings instead.\n\nCorrectly track hydration state inside a newly inserted tree\n\nWhen we don't match the first hydration node, we'll do an insertion.\nCurrently we keep the next hydratable sibling so that we know where to\npick up once we're done with the insertion. Unfortunately this makes the\nnodes inside the insertion think that there's a node to hydrate.\nI used to check for the direct parent but that doesn't work on nested host components.\nWe need to instead keep track of that we're in an hydration context but\nwe're not currently hydrating. Once we pop passed the inserted node can\nwe resume hydrating.\n\nHacky fix to isMounted\n\nisMounted checks whether a component is inside a Placement. During\nhydration we ideally don't do any Placements if hydration matches the tree.\nTo work around this I use the Placement flag on the root, which isn't used\nfor anything else. But only temporarily while we're hydrating. Then reset\nit before committing.\n\n\nRecord tests\n\n\nComments\n\n", 'Corrected a stubbed modules problem for RN fiber bundle (#9784)', 'Fix typo (#9786)', 'Update numbers', "Update blog post which creates unhandled promise rejection (#9668)\n\nUpdate 2015-12-16-ismounted-antipattern.md\n\nIn case anybody else stumbles across this old blog post, I wanted to submit a patch to help with unhandled rejections.  \n#then and #catch each return new Promise instances, so here we actually create two new promises (that aren't assigned).  If the argument promise to #makeCancelable rejects, the promise created by #then will be an unhandled rejection, which in Node 7 will be an uncaught error.  \nBy using the second argument of #then to handle rejections instead, we don't need to worry about the runtime finding any unhandled rejections here.\n\n\nStyle updates\n\n\nAdd update notice\n\n", "Add 'Test Utils' docs back to main navigation (#9676)\n\nAdd 'Test Utils' docs back to main navigation\n\nwhy make this change?:\nWe accidentally removed this - still supporting the use of Test Utilities, so we should have them in the docs.\ntest plan:\nManually tested the website - will insert a screenshot.\nissue:\nhttps://github.com/facebook/react/issues/9651\n\nMove test-utils docs to reference section\n\nwhat is the change?:\nMoved from 'advanced guides' to 'reference'\nwhy make this change?:\nIt makes more sense as a reference\ntest plan:\nVisual inspection (flarnie may add a screenshot)\nissue:\n\nAdd back the shallow renderer docs and remove outdated docs\n\nwhat is the change?:\n- Remove outdated 'shallow renderer' docs on 'test utils' page, and point to the updated 'shallow renderer' docs.\n- Re-add a link to the updated 'shallow renderer' docs on the main navigation.\nwhy make this change?:\nThis was already approved in https://github.com/facebook/react/pull/9331 which was then cherry-picked to https://github.com/facebook/react/pull/9359/commits and landed on master.\nI'm not sure why some of these changes didn't persist. For now just adding back the changes we need.\ntest plan:\nManually inspected website - will insert screenshots.\nissue:\n\nFurther improvements to 'shallow rendering' and 'test utils' docs\n\nThanks @gaearon for the improvements!\nwhat is the change?:\n- Remove  from end of 'shallow rendering' docs\n- 'documents' -> 'documentation'\n- Move 'shallow rendering' redirection section to top of 'test utils' docs\n- Add intro sentence about testing to 'shallow rendering' docs\nwhy make this change?:\nDocumentation helps people learn.\ntest plan:\nVisual inspection", "Update print warning script for low priority warning (#9756)\n\nAdd back caught error and other checks to 'lowPriorityWarning'\n\nwhat is the change?:\nThis change makes 'lowPriorityWarning' an exact copy of 'warning.js' from\nhttps://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/forks/warning.js\nwhere before we had skipped some checks from that module.\n\nAdds an error which we catch, in order to let people find the error and resulting stack trace when using devtools with 'pause on caught errors' checked.\nAdds check that 'format' argument is passed\n\nwhy make this change?:\n- To maintain a closer fork to 'warning.js'\n- To allow easier debugging using 'pause on caught errors'\n- To validate inputs to 'lowPriorityWarning'\ntest plan:\nyarn test\nissue:\n\nUpdate 'print-warnings' script to include 'lowPriorityWarning' output\n\nwhat is the change?:\nWe print the logs from 'lowPriorityWarning' as well as 'warning' from the 'print-warnings' script.\nNOTE: This PR is branching off of https://github.com/facebook/react/pull/9754\nwhy make this change?:\nWe want to use the same process of white/blacklisting warnings with 'lowPriorityWarning' that we do with 'warning'.\ntest plan:\nThis is not super easy to test unless we are doing a sync with FB afaik. I plan on running a sync in the next few days, or next week at latest, for the sake of not landing big things on a Friday. That will be the actual test of this.\nissue:\nhttps://github.com/facebook/react/issues/9398", "Fix externalization of 'lowPriorityWarning' in fb builds (#9790)\nwhat is the change?:\n - Add two more special cases for 'lowPriorityWarning' in 'modules.js',\n   treating it the same as 'ReactCurrentOwner'.\nwhy make this change?:\nWithout this, the build was including 'lowPriorityWarning' seemingly both as an external module and as part of the bundle.\ntest plan:\nRan yarn build and inspected the React-dev build. lowPriorityWarning did not get bundled in this time.\nissue:\nNone yet - @gaearon flagged this for me directly.", 'Add Videos link to React Europe 2017 (#9751)', "Ignore events on not-yet-mounted fibers (#9742)\nThis isn't necessarily what we want long-term especially with more async, but currently we crash in jsdom in some cases when an img load event gets dispatched synchronously. (Needed for FB-internal D5060180.)", 'Rename Github to GitHub (#9797)', 'adds getName() to base component, to be used by RN inspector (#9811)', 'Remove createClass, PropTypes, DOM factories, and createMixin from React object (#9788)', "Don't build some stack bundles (#9812)\n\n\nDon't build ReactDOMStack and ReactARTStack bundles\n\n\nRegenerate results.json\n\n", 'Add bench remote repo to eslintignore', 'Fix ReactFiberReconciler annotation to include PI (#8751)\n\nFix ReactFiberReconciler annotation to include PI\n\nhttps://github.com/facebook/react/pull/8628#issuecomment-271970297\n\n\nMake getPublicInstance type safe\n\n\nattempting to trigger the issue @sebmarkbage described\n\n\nhttps://github.com/facebook/react/pull/8751#discussion_r95669118\n\n\nUnify renderer-specific getPublicInstance with getRootInstance\n\n\nSwitch on fiber type HostComponent for getPublicRootInstance\n\n\nFix test that was too dynamic (and failing)\n\n\nUse PI in reconciler public API\n\n\nPrettier\n\n', 'Inputs should not mutate value on type conversion (#9806)\nThis is a follow-up on\nhttps://github.com/facebook/react/pull/9584#discussion_r115642293. There\nis no need to assign the value property of an input if the value\nproperty of the React component changes types, but stringifies to the\nsame value. For example:\njavascript\nDOM.render(<input value="true" />, el)\nDOM.render(<input value={true} />, el)\nIn this case, the assignment to input.value will always be\ncast to the string "true". There is no need to perform this\nassignment. Particularly when we already cast the value to a string\nlater:\njavascript\n// Cast `value` to a string to ensure the value is set correctly. While\n// browsers typically do this as necessary, jsdom doesn\'t.\nnode.value = \'\' + value;', 'Fixed arity issues in advance of Flow strict checking being enabled (#9816)', 'Rename Javascript to JavaScript (#9796)', 'Create ReactNativeComponent Abstract Class (#9814)\nThis creates ReactNativeComponent, the modern replacement for NativeMethodsMixin.\nThis class is going to allow us to start migrating React Native off React.createClass(...) into a typesafe, class-based brave new world.\nThis also introduces IReactNativeComponent, an interface that enforces consistency between ReactNativeComponent and ReactNativeFiberHostComponent.', 'Remove ensureScrollValueMonitoring (#9819)\nI never actually removed the rest of this when I got rid of\nViewportMetrics. We no longer need ReactDOMEventListener.monitorScrollValue.', 'Update CHANGELOG for unreleased 15.6 branch (#9827)\n\nUpdate CHANGELOG for unreleased 15.6 branch\n\nwhat is the change?:\nAdded entries for the latest changes.\nwhy make this change?:\nWe are about to do an RC release and folks can look at these notes to\nsee what is in the planned release.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nUpdate changelog regarding createClass dep. warning\n\nwhat is the change?:\nWe decided to strike through the previous changelog item and add it to\nthe more recent changelog section, since this is the release where the\ndeprecation warning will actually go out.\nwhy make this change?:\nTo make things clear for everyone using 15.6\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398', "Delete logTopLevelRenders flag and console timing (#9825)\nThis was mostly used for timing of initial mounts. However, we haven't\nimplemented that in Fiber and yet nobody has complained despite running\nwithout it. Further more the update tracks any update within the tree,\nnot just updates to the props of the top level. This is much less useful\ndue to the variation.\nI could make this track initial mounts too but it's a bit awkward so I'd\nrather just delete it if possible. We can run the full profiling mode if\nwe want more coverage.", 'Update to Flow 0.47 (#9815)\n\n\nbump flow to 0.47\n\n\nFix variadic function flow issues in fiber\n\n\nFix variadic function flow issues in ReactFiberNative\n\n\nfix ReactDOM type issues with flow 0.47\n\n\ngetChildHostContext does take an instance argument\n\n\nchange recently added anys to mixedies\n\n\nHydrationContext needs a handle on the rootContainerInstance\n\n\nprettier\n\n', 'Removed unnecessary RN fiber "topsecret-" prefix (#9837)\n\nRemoved RN fiber \'topsecret-\' prefix\nAdded a test to ensure that duplicate view-names can\'t be registered with createReactNativeComponentClass\n', 'Add NPM 5 to devEngines (#9838)', 'shouldSetTextContent accepts type parameter in addition to props (#9841)', "Don't expose internal instance to React Native Inspector (#9840)", 'Fiber SSR tests (#9846)', 'changed -> changes in Changelog (#9833)', 'Clarifying how to apply aria-* attributes (#9843)\nProvide explicit example of what "keep lowercase" means for aria-* attributes.', 'Insert blockquote on prop value explanation. (#9770)\nWhile reading the page, the "chain of thought" is broken by stating that the tempertature and onTemperatureChange don\'t have any special meaning. Making this a blockquote makes that note look more like a comment and keep the "chain of thought" intact.', 'Remove commented out code (#9795)', 'Update webpack according to brand guidelines (#9595)\n\n\nUpdate webpack according to brand guidelines\n\n\nChange all ocurrences to webpack\n\n', 'Avoid adding trailing semicolons to inline styles. (#9550)\n\n\nAvoid adding trailing semicolons to inline styles.\n\n\nPrettify.\n\n\nFor sake of performance, avoid messing around with arrays.\n\n\nChange approach to avoid calling .substring.\n\n', "Disable tests of recovering from node.normalize() (#9853)\nAccording to #9836 we're intentionally chosing to not support this until\nwe have better proof of this being a big need. E.g. to protect against\nextensions. In a way that it's not better to push extensions to be fixed.", 'Fix CI (#9854)', 'Remove reactComponentExpect (#9856)\nLegacy.', 'Add PR #9302 to 15.6RC CHANGELOG (#9857)\nJust keeping things updated.\nhttps://github.com/facebook/react/issues/9398', 'Tweak syntax in rollup build script (#9852)\n\nTweak syntax in rollup build script\n\n@bvaughn and I already discussed this.\ntest plan:\nyarn build\n\nRemove JSDoc comments\n\nwhat is the change?:\nremoving some comments\nwhy make this change?:\nThe code is basically self explanatory and these comments could get out\nof sync.\ntest plan:\nVisual inspection, yarn build and yarn test\nissue:\nhttps://github.com/facebook/react/issues/9398', 'Fix url to ng-animate (#9859)', 'Update reference-react-component.md (#9863)\nGrammatical edit to match same statement in state-and-lifecycle.html', 'Stop building ReactTestRendererStack (#9870)\n\nStop building ReactTestRendererStack\n\nWe no longer use it.\n\nRemove now-unused sizes in JSON stats\n', 'Updated label in build-script (#9871)\nChanged from "STARTING" to "BUILDING"', "Don't hydrate any properties other than event listeners and text content (#9858)\n\nDon't hydrate any properties other than event listeners and text content\n\nThis strategy assumes that the rendered HTML is correct if the tree lines\nup. Therefore we don't diff any attributes of the rendered HTML.\nHowever, as a precaution I ensure that textContent is updated. This\nensures that if something goes wrong with keys lining up etc. at least\nthere is some feedback that the event handlers might not line up. With\nwhat you expect. This might not be what you want e.g. for date formatting\nwhere it can different between server and client.\nIt is expected that content will line up. To ensure that I will in a follow\nup ensure that the warning is issued if it doesn't line up so that in\ndevelopment this can be addressed.\nThe text content updates are now moved to the commit phase so if the tree\nis asynchronously hydrated it doesn't start partially swapping out. I use\nthe regular update side-effect with payload if the content doesn't match up.\nSince we no longer guarantee that attributes is correct I changed the\nbad mark up SSR integration tests to only assert on the textContent\ninstead.\n\nHydrate text node if possible\n\nCurrently we're never matching text nodes so we need to properly branch.", 'Remove prepareNewChildrenBeforeUnmountInStack flag (#9872)', 'Delete .travis.yml (#9874)', 'Remove useCreateElement flag (#9873)\n\n\nRemove useCreateElement flag\n\n\nUse Circle node #3 for ESLint\n\n', "Add check for string and null 'rootElement' in ReactDOMFiber (#9869)\n\nAdd check for string and null 'rootElement' in ReactDOMFiber\n\nwhat is the change?:\nBefore we call 'rootElement.getAttribute' we check that the method is\ndefined.\nwhy make this change?:\nThere is an internal use case I found where 'rootElement' is a string\nand null at different points as the page is rendered.\nIt looks like this method was added as part of support for re-hydration\nof server-side rendered content. I can't imagine we would want to reuse\ncontent if the rootnode is a string or null. Not sure if we want an\nearlier check that it's an element before this point.\ntest plan:\nyarn test\nand I manually tested this fix in the internal case where it was\nbreaking\n\nAdd test and improve check for non-element rootElement\n\nwhat is the change?:\nWe use the nodeType to check that we have the correct type of\nrootElement, and we added a unit test.\nwhy make this change?:\nImprove this solution to the problem.\ntest plan:\nyarn test\n\nrun ./scripts/fiber/record-tests\n", 'Fix a bug with memoizedState affecting React DevTools (#9886)\n\n\nFix a bug with memoizedState affecting React DevTools\n\n\nRestructure to avoid duplication\n\n', 'Delete ReactARTStack (#9895)', 'Exclude Stack from DOMServerStream (#9896)', 'Add Bailout effectTag for React DevTools (#9887)\n\n\nAdd Bailout effectTag for React DevTools\n\n\nInstead of tracking bailout, track performed work\n\n', 'Rebuild sizes', 'Adding React Alicante 2017 to upcoming conferences (#9897)', "Add React Riot hackathon (#9861)\nReact Riot is the first online worldwide hackathon for React! No cost to enter and teams can win some cool prizes. It's a community event to build the best React app in 48 hours.", '[#9712] fix  value \'.98\' should not be equal to \'0.98\'. (#9714)\n\n\n[#9712] fix  value ".98" should not be equal to "0.98".\n\n\nfix eslint error\n\n\nfix label error\n\n', 'Revert "Add React Riot hackathon (#9861)"\nThis reverts commit 3daabf1efe49ee74d8c7bce4a7dabebfbba9c9db.', "Inline some internals, reduce shared/ utilities between isomorphic and renderers (#9903)\n\n\nMake ReactControlledValuePropTypes DEV-only\n\n\nRemove canDefineProperty\n\n\nThis breaks IE8. We don't support it.\n\nRemove getNextDebugID\n\nIt was added temporarily to avoid Stack shared state issues across renderers.\nNot a problem anymore.\n\n\nMake KeyEscapeUtils.unescape() DEV-only\n\n\nRemove unused deprecated() module\n\n\nIt's unlikely we'll deprecate anything else on React.* object soon.\n\n\nInline getIteratorFn at the call sites\n\n\nInline ReactElementSymbol\n\n\nInline KeyEscapeUtils into Children and move the file into Stack\n\n\nIt's only used in one place in isomorphic.\nIt's used more broadly in Stack so we move it there to die.\n\n\nUpdate artifacts\n\n\nReorder declarations for consistency\n\n\nFix Flow\n\n", 'remove alder32.js (#9905)', '16.0.0-alpha.13', 'Add support for implicitly mocked components using ReactServerRenderer (#9906)\n\n\nadds the fix (from stack) and adds a test\n\n\nupdated name of test and ran fiber script\n\n', 'Return empty static markup for null components (#9907)', 'Remove extra brace (#9910)', 'Move Past Confs, add React Conf Brazil 2017 (#9697)\n\n\nmove past confs, add React Conf Brazil 2017\n\n\nmove react europe to past confs\n\n\nresolve react europe conflicts\n\n\nCreate conferences.md\n\n', 'Fix doc styling and formatting issues', 'RN Inspector guard against clicks outside of RN (#9911)', 'Initial commit (#9917)', "Don't build ReactDOMServerStack (#9916)", 'Remove addons path deleted in #9209 (#9921)', 'Add controlList to DOM property whitelist (#9940)\nSee:\n\nhttps://github.com/WICG/controls-list/blob/gh-pages/explainer.md\nhttps://developers.google.com/web/updates/2017/03/chrome-58-media-updates#controlslist\n', 'Update changelog for 15.6 (#9949)', 'Minor fixes to 15.6.0 changelog (#9951)\n\n\nMinor fixes to 15.6.0 changelog\n\n\nRemove remaining double space\n\n\nBackticks\n\n', "Blog post for 15.6.0 (#9950)\n\nBlog post for 15.6.0\n\nwhat is the change?:\nA short and sweet summary of 15.6.0 changes\nwhy make this change?:\nTo thank community contributors and call out important changes.\ntest plan:\nVisual inspection.\nI also looked it over in a markdown viewer - http://dillinger.io/\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nAdd 'Installation' and 'Changelog' to 15.6.0 blog post\n\nwhat is the change?:\nAdded the 'Installation' section we have on most release blog posts,\ncustomized for the 15.6.0 version of React.\nAdded the 'Changelog' from master to the blog post.\nwhy make this change?:\nTo show folks how to install React and what changes are in this release.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nImprovements to blog post, and add self to authors.yml\n\nwhat is the change?:\n- Add self to contributors so my name turns into a link\n- Use backticks for code-ish things\n- Second header to ##, not #\n- Change production mode link to the new address per @bvaughn's comment\n- Update changelog with fixes from https://github.com/facebook/react/pull/9951\nwhy make this change?:\nMake things more clear and accurate.\ntest plan:\nVisual inspect - @flarnie will paste an image of how it appears in the\nactual docs.\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nFurther improvements to 15.6 blog post\n\nwhat is the change?:\n- Reword heading about deprecation warning changes\n- add 'br' s to the list of installation options\n- add some stray missing backticks\nwhy make this change?:\nClarity and readability\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398", 'Use public API in tests wherever possible (#9954)\n\n\nUse public API in tests wherever possible\n\n\nAdd missing src/node_modules files\n\n', 'Reword animation documentation deprecation (#9957)', 'Add future changelog for 15.6.0 addon release (#9953)', 'Add addon changes to 15.6.0 changelog (#9958)\n\n\nAdd addon changes to 15.6.0 changelog\n\n\nOops\n\n\nAdd to blogpost\n\n', "Fuzz tester that simulates Sierpinski Triangle demo (#9952)\n\nAdd ReactNoop.yield, ReactNoop.flushAndYield, ReactNoop.flushUnitsOfWork\n\nIncremental tests often rely on yielding at a specific point. Using an\nexplicit API should make our tests more resilient to changes\nin implementation.\n\nFuzz tester that simulates Sierpinski Triangle demo\n\nThe tests only assert that the output of the tree is consistent after\neach action, and that the final result after all work has flushed is\nthe expected value. It does not assert how work is reused, which means\nit can't detect starvation issues. However, this also means that it\nis fairly resilient to changes in our incremental algorithm.", "Streamline Fiber/Stack testing and bundling setup a little bit (#9964)\n\n\nRemove internal forwarding modules for /lib/\n\n\nAdd *Entry suffix to all entry points\n\n\nDon't bundle ReactNativeFeatureFlags since it's shimmed\n\n\nDelete TestRendererStack\n\n\nSwitch tests at forwarding modules rather than via Jest\n\n\nShare mocks between regular and equivalence fixtures\n\n\nRename environment flag to be more generic\n\n\nRemove accidental variable name change\n\n\nMinor naming changes for consistency\n\n\nFiles that have two versions get the engine in variable name.", 'Prevents adding units to css custom properties (#9966)\n\n\nPrevents adding units to css custom properties\n\n\nFix code style\n\n\nOptimize custom property checking\n\n\nPrevents adding units to css custom properties in markup creation\n\n\nUpdate passing tests\n\n\nFix argument name and reuse check in DEV\n\n', 'Wrap all non-UMD DEV bundles into a condition (#9969)\n\n\nWrap all non-UMD DEV bundles into a condition\n\n\nUpdate header.js\n\n\nCreate header.js\n\n', 'Changelog for 15.6.1 (#9977)', 'removes Synthetic event forwarding module shims (#9945)', 'Move out more ReactDOM FB shims (#9987)\n\n\nmove out further ReactDOM shims from FB\n\n\nfixed a typo\n\n', "Split out container methods in host config (#9983)\nThis makes it so you don't need to pattern-match manually to build a renderer where the container and instance types are not the same. Prerequisite to #9835.", "Use KeyboardEvent.char in the fallback logic if available (#9792)\nWhen a user types an emoji via Touch keyboard in IE, React's fallback logic\ncreates the BeforeInput event based on the keypress.  However, the length\nof an emoji character (e.g. \\uD83D\\uDE0A) is two, so the which property\ndoes not represent an emoji correctly.\nBecause IE's KeyboardEvent has the char property holding an entire emoji,\nwe can use it directly instead of converting from the which.", 'Create higher-order-components.md (#9976)', 'ReactNoop.flush methods return an array of yielded values\nAllows us to make assertions on the values that are yielded when\nperforming work. In our existing tests, we do this manually by pushing\ninto an array.\nReactNoop.flushThrough extends this concept. It accepts an array of\nexpected values and flushes until those values are yielded.', "Remove Animation priority\nThere's no advantage to scheduling updates with animation priority\nversus scheduling sync work inside requestAnimationCallback. So we can\nremove all the animation-specific code. Now there's only one type of\ncallback.", "Task work inside batched updates is always sync, even for initial mounts\nBehavior now matches Stack. It's unfortunate that this prevents us\nfrom unifying SynchronousPriority and TaskPriority.", 'Only check minPriorityLevel after a commit', 'Update flow to 0.48 (#10006)', 'Fix to work fiber-debugger (#10000)', '[#9627] Fix componentWillUnmount test case in isMounted tests (#9629)\n\n\nFix componentWillUnmount test case in isMounted tests and add mixin tests\n\n\nUpgrade create-react-class to 15.6.0\n\n', 'Remove more isomorphic www shims (#10007)', 'Remove "unstable" warning from ReactDOM (#10017)\n\n\nRemove "unstable" warning from ReactDOM\n\n\nRemove assertion about the warning\n\n\nThere\'s more!\n\n', 'Remove unused www shims (#10018)\n\n\nRemove unused www shims\n\n\nDelete ReactElement.js\n\n', 'Remove Stack-only www shim code (#10019)', 'Excluding src/node_modules from .gitignore. (#10028)', 'As pointed out by @gaearon in code review comment https://github.com/facebook/react/pull/10024#discussion_r123649131 , ReactDOMServer is an object, not a class. (#10027)', "Add ReactDOMNodeStream, adding streaming rendering. (#10024)\n\n\nAdd ReactDOMNodeStream, adding ability to stream generated HTML.\n\n\nForgot to rename a documentation page.\n\n\nTests are passing locally but failing on CI; attempt to fix that with this tweak.\n\n\nAdding some debugging info to try to track down CI problem.\n\n\nMore debugging of CI. Yay for printf debugging.\n\n\nMore printf debugging of CI to figure out what is going on with includes during tests.\n\n\nI made a truly stupid error with my printf debugging statements for CI. Fixing that.\n\n\nAnd another dumb copy and paste typo.\n\n\nThe node-stream.js stub for tests wasn't being added because of .gitignore.\n\n\nFix for code review coment https://github.com/facebook/react/pull/10024#discussion_r123606138 . Thanks to @razh for helping me out.\n\n\nRemoving all the console.logs I put in to debug the build problems on the CI server.\n\n\nFix for code review coment https://github.com/facebook/react/pull/10024#discussion_r123628227 . Thanks to @aweary for the suggestion.\n\n\nResponse to code review comment https://github.com/facebook/react/pull/10024#discussion_r123649131 . Thanks, @gaearon.\n\n\nResponding to code comments https://github.com/facebook/react/pull/10024#pullrequestreview-46104491 , https://github.com/facebook/react/pull/10024#pullrequestreview-46104616 , and https://github.com/facebook/react/pull/10024#pullrequestreview-46104822 . Thanks to @sebmarkbage for the help.\n\n\nAttempt to tweak spacing to see if it makes the prettier build step happy.\n\n\nFound a prettier bug that wasn't being reported by npm run prettier for some reason.\n\n\nFixed a small prettier issue\n\n", 'Remove Travis badge from readme (#10041)', 'Pin prettier to a specific version so that it produces the same output on dev machines and CI. (#10038)', 'Documentation: added info about streaming character encoding. (#10039)', "Add node-stream.js to react-dom's package.json files entry, enabling the file to be uploaded to npm. (#10044)", '[Docs: A11y] Add accessibility docs (#9519)\n\n\n[Docs: A11y] Add accessibility docs\n\n\nFix the link\n\n\nReplace link image\n\n\nTweak style\n\n', "ReactNativeFiberErrorDialog mutates error message (#10045)\nThis ensures that custom properties that are required by Facebook's error tooling (eg 'framesToPop') don't get dropped.\nI also improved the handling/messaging of thrown strings.", "Don't use the render callback with promises (#10050)\nThis covers up errors that are thrown in Fiber, because callback gets\nfired and an error is thrown. Created a follow up #10049 to reevaluate\nthese semantics.\nConflicts:\nscripts/fiber/tests-passing-except-dev.txt\nscripts/fiber/tests-passing.txt", 'Fix Typo in ReactDOMFiberEntry (#10054)', 'Fix Typo in ReactFiberTreeReflection (#10055)', 'Update yarn.lock (#10046)', "Remove most comments from HTML generation output (#10029)\nSimplifies markup generation by only inserting a simple comments between\nconsecutive text nodes.\nI also skip past comments and other nodes while hydrating. This leaves them\nin place instead of being removed by the hydration mechanism. This is more\nefficient but will also be needed by hydration validator.\nThere's a special case for empty strings. We probably shouldn't have nodes\nfor those at all. For now I special case it by assuming there won't be one\nso if we need one, we'll insert an empty text node.\nI also dropped the ID from the react ID.", 'Removed ReactMarkupChecksum from renderToString (#10053)\n\n\nRemoved ReactMarkupChecksum from renderToString\n\n\nOops. I messed up the merge in the previous commit.\n\n', 'Fix mount and unmount warnings in Fiber (#10056)\n\n\nWarn if unmounting a non-container\n\n\nWarn if the 2nd+ child is a "root" element but not first\n\n\nThis triggers our non-reuse mode. This is covered by ReactMount already but\nthe test doesn\'t pass yet without also landing #10026.', "Support comment node as a mount point (#9835)\nThis means you don't need an extra wrapper div for each component root you need. Rendered stuff is inserted before the comment you pass in.", 'Types Fiber as an exact object type (#10063)', "Don't build ReactDOMNodeStream for FB (#10065)\nrequire('stream') doesn't work for us right now.", 'Tiny changes to tutorial (#10048)\n\n\nInitial commit\n\n\nPR feedback\n\n', 'Add test to ensure extra zeros are covered by tests (#10033)\n\n\nAdd test to ensure extra zeros are covered by tests\n\n\nAdd DOM test fixture for trailing zeros\n\n\nDrop quotes to improve clarity\n\n', "Warn When The HTML Mismatches in DEV (#10026)\n\n\nWarn for text content\n\n\nWarn for different attributes/properties values\n\n\nWarns if there are unknown extra attributes in the hydrated node.\nIt also tries to compare the existing property or attribute against the\nexpected value. It does this by reading the property and comparing it to\nthe prop. Except it's not that simple because multiple prop values can\nyield the same output. For this we pass an extra expected value that is\na hint as to which one was used. This is a bit weird but I'm not sure the\nalternatives were much better.\n\nWarn when there is an insertion or deletion during hydration\n\nThis warns if there is ever an insertion or deletion due to hydration\nfailing to find a match.\nCurrently we can't warn for insertions required into the root because\nthat's how we do all non-hydrating renders atm. Left a todo.\nThis strategy is a bit unfortunate that it leads to so much plumbing code.\nAnd we have to add three extra methods to the HostConfig that are only used\nin DEV and not for anything else. I don't really have a better idea.\n\nDon't try to delete children of a textarea\n\nTextareas are special cases. The initial mount inserts children\nas the default value, but we should leave that untouched. This is the same\nas the special case where we set text content of children so I'll use that\nmechanism.\n\nChange expected format for text differences\n\nIn Stack this is presented as HTML which needs to have normalized escaping\nrules. In Fiber it is currently not presented as HTML but a raw string\nso we don't escape it.\n\nUnmount component in between tests\n\nIn Fiber, the second warning isn't issued because it's considered an update\nnot a new initial render and we don't fire the warning for those.\n\nChange expectation of white space text behavior in Fiber\n\nIn Fiber we don't expect empty strings to be different from rendering null.\nIn fact, in a follow up I plan on formalizing this by never creating text\nFibers for empty strings.\n\nWarn for different dangerouslySetInnerHTML\n\nWe can't just compare the raw innerHTML value because it will have been\nnormalized. Instead, we'll create another element, set its innerHTML and\nread it back.\nSince there can be custom elements registered with this document, we want\nto avoid any side-effects they might cause. So I do this in a fresh new\ndocument.\nI'm not sure how this would affect controlled components and other stuff\nthat could have changed after runtime. I think for those cases maybe we\njust need a general way of opting out of the diff.", 'docs(a11y): Small fixes (#10079)', 'Warn for inline style mismatches (#10084)\nI use the technique of generating a style string and comparing that against the\nattribute.', 'Update fuzz tester to not use animation priority\nNeglected to fix this earlier because these tests were ignored.', "Remove ability to resume work\nThe current implementation of resuming work is buggy. The underlying\nmodel is also flawed. Rather than attempt to fix a flawed model, we'll\nscrap the feature entirely and add it back later.", 'Clear pending props when cloning from current\nWhen we create a new work-in-progress, the existing pending props are\nno longer valid.', "Enable the fuzz tester\nNow that we've removed the buggy implementation of resuming work, the\nfuzz tester passes consistently.", 'Failed error boundaries are a special case of resuming work\nWhen an error in thrown in the begin phase, we begin work on the\nerror boundary a second time to unmount the children. This is a special\ncase of "resuming" work that we need to account for. The children are\nset to the current children so that we can delete them.', 'Ignore incremental tests that assert on work reuse\nit -> xit\nThe diff looks messier than it actually is because of Prettier.', "Down-prioritize children of hidden host components\nTo make sure we don't reset the priority of a down-prioritized fiber,\nwe compare the priority we're currently rendering at to the fiber's\nwork priority. If the work priority is lower, then we know not to reset\nthe work priority.", 'doc: switch the order of lint and prettier (#10094)\nRef #9876\nThanks to @wdhorton bring it up.', 'doc: fix the order of lint and prettier (#10095)', 'Fix the data-height of Step 5 CodePen embed (#10083)', 'Add React Boston 2017 to upcoming conferences (#10099)', 'Add ReactNext 2017 to conference list (#10114)', 'Updated Immutable Data Stuctures Docs (#9845)\n\n\nupdated immutable data structures section\n\n\nimproved immutable clarifications\n\n\nchanges to example immutable code\n\n', "Don't increase priority when cloning current children (#10123)\nThis fixes a snapshot test regression introduced by #10008. I had\nnoticed this change and believe the new behavior was correct, but upon\nfurther investigation I was wrong. This reverts the snapshot test and\nfixes it accordingly.", 'Add Node v8.x support to devEngines in package.json (#10129)', 'Fixing typo in ReactDOMComponent test name (#10132)', "Fix shallow renderer callbacks (#10106)\n\nAdd failing test to show that shallow test renderer doesn't call setState's callback arg\nRecord tests\nFix shallow renderer's setState/replaceState/forceUpdate to execute any callbacks passed. (#10089)\nEnsure shallow renderer callbacks are called with the correct  binding.\n", 'Adding missing assertion to ReactDOMComponent-test (#10131)', 'Add columns to isUnitlessNumber list (#10115)', 'move augmentClass definition above SyntheticEvent Proxy replacement (#10011)', 'Tweak deprecation messages to be less scary (#10145)', 'Add react-dom-unstable-native-dependencies (#10138)\n\nAdd react-dom-unstable-native-dependencies\n\nreact-native-web and react-primitives currently access a few internals\nfor shimming DOM events into native ones.  Changes in react@16 packaging\nhide these internals completely.  This change adds a submodule to react-dom,\nunstable-native-dependencies that includes the necessary modules to\ncontinue enabling that method of dom-native event injection.\n\nUpdate ResponderEventPlugin to use "public" interfaces for test\n\nIn order to get some sort of smoke testing on\nreact-dom-unstable-native-dependencies, update ResponderEventPlugin-test\nto use the "public" interfaces provided by react-dom and the new\nreact-dom/unstable-native dependencies\nAlso adds the missing references in package.json as well as missing\nfiles required for unittests to do imports correctrly\nAlso exports injectComponentTree() which is required for the unittests\nto re-set the shared component state between runs.\n\n\nTweak bundle comment\n\n\nBundle content updates from exporting injectComponentTree\n\n\nAdded FB_DEV, FB_PROD to bundle types\n\n\nRun yarn prettier for -unstable-native-dependencies updates\n\n', 'Run all fixtures through Prettier (#10157)\n\n\nInclude fixtures in prettier default pattern\n\n\nRun all fixtures through Prettier\n\n', 'Update conferences.md (#10160)', 'change the argument passed to CallbackQueue.getPooled (#10101)\n\n\nchange the argument passed to CallbackQueue.getPooled\n\n\nremove undefined from function call\n\n\nadd test for ReactNativeReconcileTransaction\n\n\nupdate log of tests\n\n\nchange test to one that operates on setState\n\n\nadded new tests and fixed another instance of the bug\n\n\nrun prettier\n\n\nupdate names of tests and minor clean up\n\n\nremove arg from CallbackQueue and update tests\n\n', "Reword duplicate key warning (#10148)\n\nReword duplicate key warning\n\nwhat is the change?:\n - Removes the now-inaccurate description of behavior around duplicate\n   keys\n - Adds link to 'key' docs page\n - Changes tone to be more casual and friendly\nAlternative wording idea;\n'Encountered two children with the same key, ${key}\nChild keys must be unique; using duplicate keys is not supported and\nwill cause unexpected behavior in some versions of React.\nSee https://fb.me/react-warning-keys for more information on how to\nfix this.'\nwhy make this change?:\nMainly this change was needed because in React 16, duplicate keys will\nnot cause omission of items with duplicate keys. All items will be\nrendered. It could happen that in future versions of React we will have\ndifferent behavior though.\ntest plan:\nyarn test\nissue:\nWishlist item on https://github.com/facebook/react/issues/8854\n\nFurther improve wording of duplicate key error\n\nwhat is the change?:\nAnother tweak to the wording of this error to make it more clear and\naccurate.\nwhy make this change?:\nThe previous tweak was too casual in tone and still not clear enough.\ntest plan:\nyarn test and REACT_DOM_JEST_USE_FIBER=1 yarn run test\nissue:\nWishlist item on https://github.com/facebook/react/issues/8854\n\n\nRun prettier\n\n\nFix typo in error message for duplicate keys\n\n\nwhat is the change?:\nFixed a typo in the updated message\n\nFix two more typo spots\n", 'Remove conditional DEV wrapper from RN bundles (#10171)\nThis causes an error with the older version of JSC packaged for Android.', "Improve error message thrown in Fiber with multiple copies of React (#10151)\n\nWIP Improve error message thrown in Fiber with multiple copies of React\n\nwhat is the change?:\nAdding an 'invariant' with detailed error message for the problem that\noccurs when you load two copies of React with the Fiber reconciler.\nWIP:\n - Is there any other likely cause for this error besides two copies of\n   React?\n - How can we make the message more clear?\nStill TODO:\n - Write a unit test\n - Write a documentation page and create the link to the page, similar\n   to https://facebook.github.io/react/warnings/refs-must-have-owner.html\nIt would also be nice to have a page with instructions on how to fix\ncommon cases of accidental double-loading of React, but we can open a\nseparate issue on that and let the community do it.\nwhy make this change?:\nThis error comes up relatively often and we want to make things clear\nwhen it happens in v16.0+\ntest plan:\nWIP\nissue:\nFixes #9962\n\nAdd improved warning and docs for 'refs must have owner' in Fiber\n\nwhat is the change?:\n - Added warning in the place where this error is thrown in Fiber, to\n   get parity with older versions of React.\n - Updated docs to mention new error message as well as old one.\nI started to write a new docs page for the new error, and realized the\ncontent was the same as the old one. So then I just updated the existing\nerror page.\nwhy make this change?:\nWe want to avoid confusion when this error is thrown from React v16.\ntest plan:\n- manually inspected docs page\n- manually tested in a CRA to trigger the error message\n(Flarnie will insert screenshots)\nissue:\nFixes #9962\nRelated to #8854\n\nAdd test for the informative warning around multiple react copies\n\n@gaearon debugged the test for this and now it works!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!! :)\nwhat is the change?:\nWe now test for the warning that the previous commits add in Fiber, and\nalso test for the old warning in the stack reconciler.\nwhy make this change?:\nThis is an especially important warning, and we want to know that it\nwill fire correctly.\ntest plan:\nyarn test src/renderers/__tests__/multiple-copies-of-react-test.js\nREACT_DOM_JEST_USE_FIBER=1 yarn test src/renderers/__tests__/multiple-copies-of-react-test.js\n\nFix up test for 'multiple copies of react'\n\nwhat is the change?:\nrefactor test for 'multiple copies of React' to be simpler and remove\nsome copypasta\n\n\nrun prettier\n\n\nFix conditionals in 'multiple copies of react' test\n\n\nwhat is the change?:\nWhen moving the 'fiber' and 'non-fiber' conditions from two assertions\ninto one, we copy pasted the wrong message into the 'fiber' condition.\nThis wasn't caught because we were using an outdated name for the\n'fiber' constant when running the tests locally with fiber enabled.\nThis fixes the copy-paste error and we now are actually running the\ntests with fiber enabled locally.\n\nRun scripts/fiber/record-tests\n", 'Remove dependency to event system on the server (#10173)\nI do this by splitting ReactDOMInjection into generic and client-only injection.', "Don't use Stack-only helper in new SSR (#10174)", 'Simplify environment injections (#10175)\n\n\nRemove unnecessary injection guard\n\n\nRemove inject() indirection for global injections\n\n\nIt was necessary when they shared global state. But now these are flat bundles so we can inject as side effect.\nThis feels a bit less convoluted to me.\nIdeally we can get rid of this somehow soon.', 'Fix uncontrolled radios (#10156)\n\n\nAdd fixture\n\n\nFix Uncontrolled radio groups\n\n\naddress feedback\n\n\nfix tests; prettier\n\n\nUpdate TestCase.js\n\n', "Limit the number of nested synchronous updates (#10178)\n\nLimit the number of nested synchronous updates\n\nIn Stack, an infinite update loop would result in a stack overflow. This\ngives the same behavior to Fiber.\nConceptually, I think this check belongs in findNextUnitOfWork, since\nthat is what we call right before starting a new stack. I've put it\nin scheduleUpdate for now so I have access to the component that\ntriggered the nested update. But we could track that explicitly instead.\nI've chosen 1000 as the limit rather arbitrarily. Most legit use cases\nshould really have a much smaller limit, but a smaller limit could break\nexisting code. For now I'm only concerned with preventing an infinite\nloop. We could add a warning that fires at the smaller limit.\n\nMove check to findNextUnitOfWork\n\nIncluding the name of the component in the message probably isn't\nnecessary. The JS stack will include either componentDidUpdate or\ncomponentWillUpdate. And the component that's updating won't\nnecessarily be the component whose lifecycle triggered it.\nSo let's move the infinite loop check to findNextUnitWork as I\noriginally wanted to.", 'Add missing space to key warning (#10179)\nFound this when running the warnings script.', 'Uhhhh remove the extra space I literally just added (#10180)\n0 spaces -> 2 spaces -> 1 space yay!', "Remove didCommit from scheduler (#10182)\nDon't actually need to track this, now that we removed the infinite\nloop check to findNextUnitOfWork", "Refactor Debug Frames to Enable Renderers to Provide Custom Logic (#10105)\n\nExtract the top element frame from ReactDebugCurrentFrame\n\nThis is part of a larger refactor to decouple stack addendums. All\nrenderers have their own way of getting the stack of the currently\nexecuting components.\nThere is one special case in Element Validator that adds an additional line\nfor the element being validated. This commit moves that special case in\ninto the validator.\nThere is another case where it looked like this was used in shallow\nrenderer but this is actually something different. It is part of the\ncomponent stack. It just happens to be that shallow renderer has a simpler\nimplementation of the component stack that just happens to be a single\nelement.\nThis will let us decouple the implementation to get a stack from\nReactDebugCurrentFrame and put that in each renderer.\n\nStop using ReactComponentTreeHook for Fiber\n\nCurrently we fall back to ReactCurrentOwner in ReactComponentTreeHook for\nstack addendums. We shouldn't need to because we should use\nReactDebugCurrrentFiber.\nEnsure we always set both ReactDebugCurrentFiber and ReactDebugCurrentFrame\nso that we can rely on these for all stacks.\n\nMake ReactDebugCurrentFrame implementation independent\n\nIntroduced ReactDebugCurrentStack for the Stack renderer which does the\nsame thing as ReactDebugCurrentFiber.\nReactDebugCurrentFrame no longer keeps track of the current fiber/debug id.\nThat's handled by the individual renderers.\nInstead, it is now used to keep track of the current implementation of\nthe current stack frame. That way it is decoupled from the specifics of\nthe renderers. There can be multiple renderers in a context. What matters\nis which one is currently executing a debuggable context (such as a render\nfunction).\n\nAdd debug frames to ReactPartialRenderer (ssr)\n\nBasic functionality.\n\nAdd shared modules to shallow renderer\n\nThis is now needed because we share describeComponentFrame.", 'Replaced "unstable_handleError" with "componentDidCatch" (#10200)\nRan new codemod to rename all identifiers. Searched-and-replaced strings occurrences.', 'Fix crash on master introduced during the radio bugfix (#10207)\n\nAdd a regression test that passes in Stack but fails in Fiber\n\nThe failure happens because trackValueOnNode() can exit early if it detects an existing descriptor on node, or if it sees a "broken" Safari descriptor (which is how we encountered this bug in the wild).\nAs a result, the tracker field was not set, and subsequent updateValueIfChanged() call went into the branch that initializes the tracker lazily. That branch has a bug in Fiber mode where it passes the wrong type.\nWe did not see this issue before because that branch is relatively hard to hit (you have to either run it in Safari or define a custom DOM value descriptor which is what I did in the test).\nIn the future, we will likely remove the lazy branch altogether since if we bailed out of setting up the tracker once, we will likely bail out every time. But for now I\'m just focused on a minimal fix to unbreak master.\n\n\nFix updateValueIfChanged() lazy path to work with DOM argument\n\n\nSlightly reorder lines for clarity and record tests\n\n\nAlso test the change event code path\n\n\nThis makes it go through the Fiber argument code path.', 'Record sizes', "Fix scheduler control flow (#10015)\n\nUse performFailedUnitOfWork\n\ninstead of beginFailedWork and completeUnitOfWork separately. Also, we\nunwind the context stack before beginning work again.\n\nOnly use error loop directly after a commit\n\nWe have a special, forked version of work loop that checks if a fiber is\nin a failed state (needs to be unmounted). This is only relevant right\nafter a commit -- begin phase errors are handled differently, by\nunwinding the stack.\nAlso renamed findNextUnitOfWork to resetNextUnitOfWork and made it a\nvoid function to signal that it's impure.\n\n\nReset nextUnitOfWork after every commit\n\n\nInclude the error boundary when unwinding a failed subtree\n\n\nAlso added a warning to the error boundary to show that it failed.\n\nPush context providers in beginFailedWork to avoid push/pop mismatch\n\nAdded a test that demonstrates how an error boundary that is also a\ncontext provider could pop its context too many times if you neglect\nto push it in beginFailedWork. This happens because we've already\npopped the context once in unwindContext.\nThe solution is a code smell. I don't like how we push/pop context in\nso many places. Shouldn't they all happen in the same location?\n\n\nRefactor work loop\n\n\nOptimizes the normal, non-error path by reducing the number of checks\nneeded to begin performing work.\n\n\nPrevents control flow from oscillating between fast normal loop and\nslower error loop.\n\n\nImprove context unwinding test\n\n\nTests that we correctly unwind an error boundary that is also a\ncontext provider.\n\nTriangle tester should assert the tree is consistent after every action\n\n...not just at the end.\n\nBetter implementation of infinite loop error\n\nInfinite loops should only be possible if a while loop never terminates.\nNow that we've refactored to avoid oscillation between different\nwork loops, we can count updates local to each loop.\nThe two loops that could infinite loop are the sync work loop and the\nloop that surrounds the body of the render phase catch block. The\nasync loop could also fall into an infinite loop if the deadline never\nterminates, but we'll assume that it always eventually does.\nThis change also creates better error stack traces because the error is\nthrown from inside the first setState that exceeds the limit.\nAdded a test case for an error boundary whose parent remounts it\non recovery.\n\nUse invokeGuardedCallback in DEV\n", "Upgrade jest to 20.1.0-delta.1 (#10211)\n\nUpgrade jest to 20.1.0-delta.1\n\nThis includes multi-project support.\n\n\nUse isSpy polyfill that is not available in jest 20\n\n\nRemove use of jasmine.createSpyObj\n\n\nWe don't really need this and it's not in jest 20.\n\nUpgrade record-tests script to use the new jest 20 APIs\n", 'Split markup generation from DOM property management (#10197)\n\n\nReplace SSR unit test with integration test\n\n\nRemove unit test that is already covered by integration suite\n\n\nReplace unit tests for boolean attrs with integration tests\n\n\nReplace unit test for aria attrs with integration test\n\n\nReplace unit tests for numeric 0 with integration tests\n\n\nRemove unit test covered by integration tests\n\n\nReplace unit test for injection with integration test\n\n\nIt still touches internals but it tests both renderers.\n\n\nFork DOMPropertyOperations into DOMMarkupOperations\n\n\nTrim down DOMPropertyOperations and DOMMarkupOperations\n\n\nRecord SSR sizes\n\n\nRecord them tests\n\n\nFix false positive warning for overloaded booleans when passing numbers\n\n\nRemove stray import\n\n\nReplace CSS markup tests with public API tests\n\n\nSome of these are handy as integration tests so I moved them there.\nBut some test markup specifically so I changed them to use DOMServer.\n\nMake CSSPropertyOperations client-only\n\nI forked createMarkupForStyles() into ReactDOMComponent and ReactPartialRenderer. Duplication is fine because one of them will soon be gone (guess which one!)\nThe warnInvalidStyle helper is used by both server and client, unlike other client-only stuff in CSSPropertyOperations, so I moved it to a separately module used in both.\n\n\nRecord server bundle size\n\n\nAdd an early exit to validation\n\n\nClarify what is being duplicated\n\n', 'Move DEV only module requires into DEV blocks (#10185)\n\n\nmodulesToStub cleaned up and DEV only modules put into DEV blocks\n\n\nprettier run\n\n\nPrettier + new build run for bundle sizes\n\n', 'Move input valueTracker to DOM nodes (#10208)\n\nMove input valueTracker to DOM nodes\n\nThis moves the storage of the input value tracker to the DOM node\ninstead of the wrapperState. This makes it easier to support both Stack\nand Fiber without out a lot of ugly type casting and logic branches.\nrelated: #10207\n\n\nrun prettier\n\n\nremove instance accepting methods\n\n\nrm unused trst method\n\n\naddress feedback\n\n\nfix naming\n\n\nfix lint\n\n', "Configure Jest with Stack and Fiber as separate projects (#10214)\n\nDisable Fiber specific test run in CI\n\nThis disables the comparison against previously recorded test. Instead,\nwe'll rely on jest failures to fail tests.\n\nExtract jest config into two separate projects for Fiber and Stack\n\nAllows us to run both in the same jest run. The setupMocks file is forked into\nspecific environment configuration for each project. This replaces the\nenvironment variable.\nI used copy pasta here to make it clear. We can abstract this later. It's clear\nto me that simply extracting shared stuff is not the best way to abstract this.\nsetupMocks for example didn't need all the code in both branches.\nI think that some of the stuff that is shared such as error message extracting\netc. should probably be lifted out into a stand-alone jest project instead of\nbeing shared.\n\nFix class equivalence test\n\nThere's a behavior change when projects are used which makes\nsetupTestFrameworkScriptFile not override the normal config.\nThis test should probably just move to a separate CI script or something\nless hacky.\n\nOnly run Fiber tests with scripts/fiber/record-tests\n", "In SSR, Store Elements of Composites on the Stack for Warnings (#10187)\nIn DEV mode this keeps an additional sub-stack within the stack of the\nserver renderer. This substack keeps track of all the elements that we\nresolved to get to to the next processing frame.\nThis lets us recreate the full composite component stack for warnings.\nNormally the stack only contains host components.\nWe reset this every time we're going to resolve another sibling.", 'Fix lint (#10222)', 'Delete flattenChildren (#10224)\n\n\nDelete flattenChildren\n\n\nStop exporting mapIntoWithKeyPrefixInternal\n\n\nRemove unescapeInDev()\n\n\nflattenChildren() was the only traverseAllChildren() caller that relied on it.', 'Remove PooledClass from isomorphic build (#10227)\n\n\nInline traverseAllChildren into ReactChildren\n\n\nRemove ForEachBookKeeping\n\n\nInline traversal pooling logic into ReactChildren\n\n\nReuse emptyFunction for dummy callback\n\n\nMove code around\n\n\nRecord sizes\n\n', 'Remove record-tests step from contribution guides (#10223)', 'React.unstable_AsyncComponent (#10239)\nAlternative to using the static class property unstable_asyncUpdates.\nEverything inside  has async updates by default. You\ncan also extend it like PureComponent or Component.', 'Add warning for rendering into container that was updated manually (#10210)\n\nRFC Add warning for rendering into container that was updated manually\n\nRFC because we still need to tidy this up and verify that all tests\npass.\nwhat is the change?:\nWe want to warn when users render into a container which was manually\nemptied or updated outside of React. This can lead to the cryptic error\nabout not being able to remove a node, or just lead to silent failures\nof render. This warning should make things more clear.\nNote that this covers the case where the contents of the root container\nare manually updated, but does not cover the case where something was\nmanually updated deeper in the tree.\nwhy make this change?:\nTo maintain parity and increase clarity before releasing v16.0 beta.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\nlast item under the \'16 beta\' checklist.\n\nAdd test and tweak check for rendering into manually updated container\n\nSTILL TODO: figure out how to skip this warning when the component\nrenders to a portal.\nUnfortunately \'ReactPortal.isPortal(children)\' returns false, even in\nthe failing test where we are rendering to a portal.\nwhat is the change?:\n- added a test for the case where we call \'ReactDOM.render\' with a new\n  container, using a key or a different type, after the contents of the\n  first container were messed with outside of React. This case throws,\n  and now at least there will be an informative warning along with the\n  error.\n- We updated the check to compare the parent of the \'hostInstance\' to\n  the container; this seems less fragile\n- tweaked some comments\nwhy make this change?:\nContinue improving this to make it more final.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nStub our console.error in one of the portal tests\n\nwhat is the change?:\nSee title\nwhy make this change?:\nSee comment in the code\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nSkip warning in \'ReactDOMFiberEntry\' when mounting to Comment node\n\nwhat is the change?:\nWe have a warning for cases when the container doesn\'t match the parent\nwhich we remembered the previously rendered content being rendered into.\nWe are skipping that warning when you render into a \'comment\' node.\nwhy make this change?:\nBasically, if you render into a \'comment\' node, then the parent of the\ncomment node is the container for your rendered content. We could check\nfor similarity there but rendering into a comment node seems like a\ncorner case and I\'d rather skip the warning without knowing more about\nwhat could happen in that case.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nImprove warning message, remove dedup check, and unmock console.error\n\nwhat is the change?:\nVarious changes to get this closer to being finished;\n- Improved warning message (thanks @spicyj!!!)\n- Removed dedup check on warning\n- Remove mocking of \'console.error\' in portals test\nwhy make this change?:\n- warning message improvement: communicates better with users\n- Remove dedup check: it wasn\'t important in this case\n- Remove mocking of \'console.error\'; we don\'t want to ignore an\n  inaccurate warning, even for an "unstable" feature.\ntest plan:\nyarn test -> follow-up commits will fix the remaining tests\nissue:\nissue #8854\n\nPossible fix for issue of incorrect warning for portal re-render\n\nwhat is the change?:\nAdd a property to a container which was rendered into using\nReactDOM.unstable_createPortal.\nwhy make this change?:\nWe don\'t want to warn for mismatching container nodes in this case - the\nuser intentionally rendered into the portal container instead of the\noriginal container.\nconcerns;\n- will this affect React Native badly?\n- will this add bloat to the portal code? seems small enough but not\n  sure.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nFix logic for checking if the host instance container is a portal\n\nwhat is the change?:\nWhen focusing on fixing the warning to not check when we are using\nportals, I missed checking for the existence of the host instance parent\nbefore checking if it was a portal. This adds the missing null checks.\nwhy make this change?:\nTo fix a bug that the previous commit introduced.\ntest plan:\nyarn test\n-> follow-up commits fix more of the test failures\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nClean up new tests in ReactDOMFiber-test\n\nwhat is the change?:\n- removed extra single quotes, downgrade double quotes to single\n- update expected warning message to match latest warning message\n- fix indentation\nwhy make this change?:\n- get tests passing\n- code maintainability/readability\ntest plan:\nyarn test\nfollow up commits will fix the remaining tests\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nAdd \'unmountComponentAtNode\' call in test for reconciling pre-rendered markup\n\nwhat is the change?:\nWe have a test that verifies React can reconcile text from pre-rendered\nmark-up. It tests React doing this for three strings and three empty\nstrings.\nThis adds a call to \'unmountComponentAtNode\' between the two\nexpectations for strings and empty strings.\nwhy make this change?:\nWe now warn when someone messes with the DOM inside of a node in such a\nway that removes the React-rendered content. This test was doing that. I\ncan\'t think of a situation where this would happen with server-side\nrendering without the need to call \'unmountComponentAtNode\' before\ninserting the server-side rendered content.\ntest plan:\nyarn test\nOnly one more failing test, will fix that in the next commit.\nissue:\nhttps://github.com/facebook/react/issues/8854\n\n\nran prettier\n\n\nremove unused variable\n\n\nrun scripts/fiber/record-tests\n\n\nFix type error and improve name of portal container flag\n\n\nNOTE: I am still looking for a good place to move this flag\nassignment to, or a better approach. This does some intermediate fixes.\nwhat is the change?:\n- fixed flow error by allowing optional flag on a DOMContainer that\n  indicates it was used as a portal container.\n- renamed the flag to something which makes more sense\nwhy make this change?:\n- get Flow passing\n- make this change make more sense\nWe are still not sure about adding this flag; a follow-up diff may move\nit or take a different approach.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nAdd flag to portalContainer on mount instead of in createPortal\n\nwhat is the change?:\nWe add a flag to the container of a \'portal\' in the \'commit work\' phase\nin Fiber. This is right before we call appendChildToContainer.\nwhy make this change?:\n- Sometimes people call ReactDOM.render(... container), then manually\nclear the content of the container, and then try to call another\nReactDOM.render(... container).\n- This leads to cryptic errors or silent failure because we hold a\n  reference to the node that was rendered the first time, and expect it\n  to still be inside the container.\n- We added a warning for this issue in renderSubtreeIntoContainer, but\n  when a component renders something returned by\n  ReactDOM.unstable_createPortal(<Component />, portalContainer);,\n  then the child is inside the portalContainer and not the `container,\n  but that is valid and we want to skip warning in that case.\nInside renderSubtreeIntoContainer we don\'t have the info to determine\nif a child was rendered into a portalContainer or a container, and\nadding this flag lets us figure that out and skip the warning.\nWe originally added the flag in the call to\nReactDOM.unstable_createPortal but that seemed like a method that\nshould be "pure" and free of side-effects. This commit moves the\nflag-adding to happen when we mount the portal component.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nForce an \'any\' type for the hostInstance.parentNode in warning check\n\nwhat is the change?:\nThis is awful. :(\nI\'m not sure how else to let Flow know that we expect that this might be\na sort of DOMContainer type and not just a normal Node type.\nTo at least make the type information clear we added a comment.\nwhy make this change?:\nTo get flow passing. Looks like we have any types sprinkled\nthroughout this file. phooey. :(\ntest plan:\nyarn flow\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nIgnore portals in DOMRenderer.findHostInstance\n\nwhat is the change?:\nWe want to ignore portals when firing a certain warning.\nThis allows us to get the host instance and ignore portals.\nAlso added a new snapshot recording while fixing things.\nwhy make this change?:\nOriginally we had added a flag to the DOM node which was used for\nrendering the portal, and then could notice and ignore children rendered\ninto those nodes.\nHowever, it\'s better to just ignore portals in\nDOMRenderer.findHostInstance because\n - we will not ignore a non-portal second child with this approach\n - we meant to ignore portals in this method anyway (according to a\n   \'TODO\' comment)\n - this change only affects the DOM renderer, instead of changing code\n   which is shared with RN and other renderers\n - we avoid adding unneeded expandos\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\n\nRan prettier\n\n\nRemove error snapshot test\n\n\nI think there is a bug where an empty snapshot is treated as an \'outdated snapshot\'.\nIf I delete the obsolute snapshot, and run ReactDOMFiber-test.js it generates a new snapshot.\nBut then when I run the test with the newly generated snapshot, it says "1 obsolete snapshot found",\nAt some point I will file an issue with Jest. For now going to skip the snapshot generation for the error message in the new test.\n\nRemove expando that we were adding to portal container\n\nwhat is the change?:\nsee title\nwhy make this change?:\nthis is part of an old approach to detecting portals, and we have\ninstead added a check in the findHostInstance method to filter out\nportals.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nFork findHostInstance to make findHostInstanceWithNoPortals\n\nwhat is the change?:\nWe need to get host instances, but filter out portals. There is not\ncurrently a method for that.\nwhy make this change?:\nRather than change the existing findHostInstance method, which would\naffect the behavior of the public findDOMNode method, we are forking.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/8854', 'ReactDOM.activeUpdates (#10225)\nReactDOM.flushSync(batch)', 'Upgrade to Flow v0.50.0 (#10249)\nNo particular reason, just hoping memory usage is maybe better.', "Support throwing null (#10213)\n\nSupport throwing null\n\nIn JavaScript, you can throw values of any type, not just errors. That\nincludes null. We currently rely on null checks to determine if a user-\nprovided function has thrown. This refactors our error handling code to\nkeep track of an explicit boolean flag instead.\n\n\nAdd DOM fixture test case for break on exception behavior\n\n\npreventDefault error events during feature test\n\n\nWe call invokeGuardedCallbackDev at startup as part of a feature test.\nBut we don't want those errors to log to the console.\n\n\nAdd throwing null test case\n\n\nUse ReactFeatureFlags instead of ReactDOMFeatureFlags\n\n\nReact ART uses this, too.\n\nNon-errors in error logger\n\nIf a non-error is thrown, we'll coerce the value to a string and use\nthat as the message.", "Don't add dangling commas to functions for packaging fixtures (#10264)", "Fix failing Prettier command (#10268)\n\nRan prettier over non-modified files to change them\nFixed output of failing Prettier message to show invalid files\nFailing Prettier command now suggests 'yarn prettier-all'\n", 'Fix false "unknown property" warnings for events in SSR (#10272)\n\nReset modules between importing client and server modules in the test\n\nClient and server renderers still share some modules, including injections.\nThis means they have shared state in this test, potentially missing issues that would occur in real world.\nAfter this change, the client and server modules are completely isolated in the test.\nThis makes the tests fail due to https://github.com/facebook/react/issues/10265 (a real issue that was missed).\n\nDon\'t validate events if no plugins are injected\n', '[invokeGuardedCallback] Handle nested errors across separate renderers (#10270)\ninvokeGuardedCallback is a function we use in place of try-catch\nstatement. It accepts a function, and if the function throws, it\ncaptures the error. In production, the implementation is a normal try-\ncatch. In development, we swap out the prod implementation for a special\nversion designed to preserve "Pause on all exceptions" behavior of the\nbrowser DevTools.\ninvokeGuardedCallbackDev works by dispatching an event to a dummy DOM\nnode and calling the provided function inside a handler for that event.\nWe also attach an error event handler to the window object. If the\nfunction throws, the global event handler is called and we can access\nthe error.\nThe global event handler is added and removed right before and after the\nfake event is dispatched. But if invokeGuardedCallbackDev is nested --\n that is, if it\'s invoked inside the body of another\ninvokeGuardedCallbackDev -- multiple error event handlers will attached\nsimultaneously. We only want the handler that corresponds to the deepest\nlevel to handle the error. So we keep track of a depth counter, and\nwithin the event handler, we only handle the error if the current depth\nmatches the depth at the time the function was invoked.\nThe problem that we discovered, and that this PR fixes, is that the\ndepth counter is local to each renderer. So if you nest separate copies\nof invokeGuardedCallback from separate renderers, each renderer will\nhave its own depth counter, and multiple error handlers will fire for a\nsingle, nested error.', 'Fix event name check to be more exact (#10274)', "Dedupe unknown tag name warning and ignore  (#10275)\n\n\nDeduplicate unknown DOM tag warning\n\n\nDon't warn about  because it is widely used\n\n\nOther browsers implement it, and Chrome will ship it soon too.\n\n\nUse hasOwnProperty\n\n\nFix corner case: hasOwnProperty as a tag\n\n\nUpdate comments to be more correct factually\n\n", 'Update sizes', 'Delete react-dom-factories package (#10279)', "Remove feature test from invokeGuardedCallbackDev (#10283)\nThe critical semantics are resilient to browser flakiness, so we don't\nneed this feature test.\nAlso added comments explaining how invokeGuardedCallback dev works.", 'Add a disclaimer to internal invariants (#10285)', 'Update pre-release instructions for generating error-codes (#10286)', 'Regenerate error codes and update bundle size stats (#10287)', 'Link warning to error boundary post (#10289)', 'Updated error codes (after merging in missing code from 15 stable) (#10290)', 'Fix error utils test failure caused by updating error codes (#10291)', 'Fix process override in ErrorUtils test (#10293)', 'Updated package versions and Rollup results', 'Blog post: Error Handling in React 16 (#10267)\n\n\nBlog post: Error Handling in React 16\n\n\nChange the date\n\n', 'Link to React 16 beta', 'Wrap "warning" call in DEV block to prevent PROD error (#10295)\n\n\nre-adds warning module to FB PROD bundle\n\n\nWrap the warning call too\n\n', 'Fix ReactPartialRenderer in production (#10300)', 'Replace "children (and grandchildren)" with "descendants" (#10297)', 'Reword further', 'Add a link for the error boundaries codemod into the blog post (#10305)\n\n\nAdd a link for the error boundaries codemod into the blog post\n\n\nUpdate 2017-07-26-error-handling-in-react-16.md\n\n', 'Add smoke tests for styles (including SSR) (#10308)\n\n\nAdd style to ReactDOM smoke test\n\n\nAdd production smoke test for ReactDOMServer\n\n', 'Remove Error event listener eagerly instead of using depth count (#10296)\nA little simpler.', 'Make server hydration warnings more obviously about server (#10312)', '16.0.0-beta.2', 'Add date time test fixtures (#10154)\n\nAdd date time test fixtures\n\nThis commit adds a new section for the DOM test fixtures specifically\nfor date inputs. Additionally, it adds a test case to verify that\ncorrect transference of dates between the "date" and\n"datetime-locale" input types.\n\nAdjust date parsing to be clearer\n', 'Wraps two warnings that should be removed from PROD (#10315)', 'Add Babel plugin note to Error boundaries post (#10313)\n\n\nAdd Babel plugin note to Error boundaries post\n\n\nAdded section with screenshots\n\n\nAdd context to Component stack traces\n\n\nUpdate 2017-07-26-error-handling-in-react-16.md\n\n\nMove section, more minor changes\n\n\nChange pics\n\n', 'Make it more specific', 'Move line to within DEV block (#10316)\n\n\nmove line to within DEV block\n\n\naddressed code review feedback\n\n', 'fix renderToString fails with array type children when react-dom/server render (#10221)\n\n\nfix(*): fix renderToString fails with array type children when react-dom/server render\n\n\nAdd an integration test that verify renderToString with array type children\n\n\nAdd integration test to renderToString with array type child\n\n\nUpdate integration test to renderToString with array type child\n\n\nfix renderToString fails with array type children when react-dom/server render\n\n\nUpdate integration test to renderToString with array type child\n\n\nAdd to iterate that are not arrays\n\n\nAdd the validation react element\n\n\nImprove an integration test of server renderToString with array type\n\n\nprettier\n\n\nprettier\n\n\nMake SSR can handle a single array element and nested array\n\n\nprettier\n\n\nChange integeration test description\n\n\nmodified:   src/renderers/dom/ReactDOMNodeStreamRenderer.js\n\n\nMake invariants consistent\n\n\nGate outdated test itself by feature flag\n\n\nChange test to make sense both with old and new code\n\n\nTest more cases\n\n', "Fix SSR integration test swallowing lack of expected error  (#10331)\n\nDon't catch the assertion about missing errors\n\nPreviously, even if an error was not thrown, the assertion about this was ignored.\nThis fix exposes two failing cases in new SSR that weren't failing in Stack.\n\nAdd child context validation to new SSR\n\nThis fixes the error cases that were silently failing before but are now exposed.", 'Fix invariant parity for SSR (#10333)', 'Add tests that ShallowRenderer supports string and fragment (#10241)', 'Move ShallowRenderer tests (#10184)', 'Remove trapBubbledEventsLocal (#10258)\n\n\nInline trapBubbledEventsLocal\n\n\nRevert "Inline trapBubbledEventsLocal"\n\n\nThis reverts commit 0ee65ff491deeec70223c2e39d04ef0aeda95d73.\n\nMerge remove-local-trap-bubbled-events branch\n', 'Test for specific SSR warning (#10340)\n\n\nTest for specific SSR warning\n\n\nSame in another place\n\n', 'Context improvements (#10334)\nRefactored fiber context to fix a nested updates bug', 'Make unexpected console.warn() calls fail tests (#10341)\n\n\nMake console.warn() calls fail tests\n\n\nReplace matchers with a more straightforward cleanup\n\n', 'Add ReactDOM.hydrate() as explicit SSR hydration API (#10339)\n\n\nAdd ReactDOM.hydrate()\n\n\nDeprecate ReactDOM.render() hydration in favor of ReactDOM.hydrate()\n\n\nDowngrade the warning level to console.warn()\n\n\nWarn when hydrate() is called with empty container\n\n', 'Add an extra test for arrays and strings from composites (#10346)', "Remove hydrate() warning about empty container (#10345)\n\nRemove hydrate() warning about empty container\n\nIt used to have false positives for cases where we legitimately don't render anything.\n\n\nUse existing constant\n\n\nTest empty string case using its parent\n\n", 'Grammar fixes for a code comment (#10343)', 'Fix error-codes not updating correctly (#10348)\n\n\nFix error-codes not updating correctly\n\n\nRevert changes to codes.json\n\n', 'Fix a typo (#10349)', 'Remove event namespace check from react-partial-renderer (#10344)', "Remove rAF export from ReactDOMFrameScheduling (#10337)\nFiber doesn't schedule animation callbacks anymore (though it does use\nthe browser's requestAnimationFrame to polyfill requestIdleCallback).\nThis removes the rAF export from ReactDOMFrameScheduling, since it's not\nbeing used.", 'Shallow renderer passes context to componentWillReceiveProps (#10342)\nThis parameter was accidentally omitted before. Leland reported it because it impacts Enzyme.\nI also added a basic lifecycle parameter test for shallow renderer.', 'Remove an unnecessary DEV condition (#10350)', 'Warn on missing Set/Map polyfills (#10356)\n\n\nCrash on missing Set/Map polyfills\n\n\nChange Map/Set to emit warnings instead\n\n\nChange rAF polyfill check to also be a warning\n\n\nLiiiiiint\n\n', 'Upsell React DevTools in 16 (#10351)\n\n\nUpsell React DevTools\n\n\nFix Flow\n\n\nUpsell message nits\n\n\nAvoid extra checks in onCommitRoot and onCommitUnmount\n\n', "Don't suggest downloading React DevTools inside Chrome extension (#10359)", "FB bundles wrap warning() calls in DEV (#10314)\nFB bundles wrap warning() calls in DEV\nSplit dev-mode transforms into separate parts:\n1) umd+cjs+fb: Wrap warning calls with process.env checks\n2) umd+cjs: Replace error messages with minified codes\nAlso updated transforms to use DEV since it transforms to smaller code after stripEnvVariables is run.\nAlso renamed 'scripts/error-codes/dev-expression-with-codes.js' -> 'scripts/error-codes/replace-invariant-error-codes.js'", 'Wrap contents of if-DEV condition in an IIFE (#10361)\nThis avoids strict mode conflicts for certain browsers wrt functions being defined within an if-block.\nAlso re-added the if-DEV condition for the ReactNative renderer since it was removed for this reason.', 'Use single entry point for SSR via browser field (#10362)\n\n\nUse single entry point for SSR via browser field\n\n\nAdd server.browser entry point and smoke tests\n\n\nTweak bundle naming\n\n\nFix import\n\n\nRe-record\n\n\nFix the robot nits\n\n\nAdd resetModules for some extra isolation\n\n', 'Fix CI maybe', 'Remove old IE polyfill code (#10238)\n\nUpgrade DOM Fixtures\n\nUpgrade to react-scripts v1 and include required polyfills for older\nbrowsers\n\nRemove ChangeEvent polyfills for unsupported browsers\n', 'Add documentation about ', 'Fix lint error in DOM fixtures (#10369)', 'Cross-origin error handling in DEV (#10353)\n\n\nAdd DOM fixture for cross-origin errors\n\n\nUse a custom error object in place of cross-origin errors\n\n\nCross-origin errors aren\'t accessible by React in DEV mode because we\ncatch errors using a global error handler, in order to preserve the\n"Pause on exceptions" behavior of the DevTools. When this happens, we\nshould use a custom error object that explains what happened.\nFor uncaught errors, the actual error message is logged to the console\nby the browser, so React should skip logging the message again.\n\n\nAdd test case that demonstrates errors are logged even if they\'re caught\n\n\nDon\'t double log error messages in DEV\n\n\nIn DEV, the browser always logs errors thrown inside React components,\neven if the originating update is wrapped in a try-catch, because of the\ndispatchEvent trick used by invokeGuardedCallback. So the error logger\nshould not log the message again.\n\n\nFix tests\n\n\nChange how error is printed in DEV and PROD\n\n\nIn DEV, we don\'t want to print the stack trace because the browser already always prints it.\nWe\'ll just print the component stack now.\nIn PROD, we used to omit the JS error message. However we do want to show it because\nif the application swallows the error, the browser will not print it. In DEV it works\nonly because of the fake event trick. So in PROD we will always print the underlying error\nby logging the error object directly. This will show both the message and the JS stack.\n\nMake the wording tighter and emphasize the real error is above\n\nThere\'s a few goals in the rewording:\n\nMake it tighter using line breaks between sentences.\nMake it slightly less patronizing ("You should fix it" => "You can find its details in an earlier log")\n^^ This also helps highlight that the real error message and stack is above\nGroup subsections: intro (there\'s an error), component stack, and final addendum about error boundaries\n^^ Otherwise people might think error boundaries are part of the reason they have an error\n\nMake it clear "located at" is not the stacktrace. Otherwise it feels confusing. This makes it clearer you should still look for stack trace (with other details) above and introduces the concept of component stack.\n\n\nMake the message shorter\n\n\nUnused variables\n\n\nFix an error caused by fixing lint\n\n\nOne more bikeshed\n\n\nFix fixture\n\n\nRemove unused file\n\n\nConcise wording\n\n\nUnused variables\n\n', 'Remove hidden functional shouldComponentUpdate API (#10371)', "Don't call componentDidUpdate() in shallow renderer (#10372)\n\n\nDon't call componentDidUpdate() in shallow renderer\n\n\nLint\n\n\nSent from my iPhone haha\n\nConsistent comments\n", 'Log captured errors sooner (#10373)\nThis prevents the captured error from becoming separated from the component stack if other errors (or console.error calls) are made between them, eg a component errors during unmount.', 'Built 16.0.0 beta 3. Updated versions, results.json, and error codes', 'Wop optimized this repository (#10374)\nThe Web Optimization Project optimized this repository. This commit contains the optimized files in this repository.', 'Fix incorrect reference to undefined diffValueForAttribute (#10235)\n\n\nFix incorrect reference to undefined diffValueForAttribute\n\n\nRemove custom attribute branch in getValueForProperty\n\n', 'Warn about unresolved function as a child (#10376)\n\n\nWarn about unresolved function as a child\n\n\nOops\n\n', "Implement event-specific pooling for SyntheticEvent (#10237)\n\nRemove PooledClass from FallbackCompositionState\n\nThe only module that uses FallbackCompositonState is BeforeInputEventPlugin. The way its structured means there can only be a single instance of FallbackCompositionState at any given time (stored in a local variable at the top-level) so we don't really need pooling here at all. Instead, a single object is now stored in FallbackCompositionState, and access (initializing, reseting, getting data) is gaurded by the exported helper object.\n\n\nUse new FallbackCompositionState API in BeforeInputEventPlugin\n\n\nImplement event-specific pooling in SyntheticEvent\n\n\nRemove PooledClass from TopLevelCallbackBookKeeping\n\n\nUpdate results.json\n\n\nAdd pooled event test fixtures (#1)\n\n\nFix fixture lint\n\n", 'Move PooledClass to Stack folder (#10386)', 'Compile spread to Object.assign calls (#10387)', '[fiber-debugger] Support undefined progressedPriority (#10375)\n[fiber-debugger] Fix the debugger to match changes to Fiber', 'Update installation.md', "Rewrite DOMPropertyOperations-test in terms of public API (#10281)\n\n\nRewrite DOMPropertyOperations-test in terms of public API\n\n\nAdd more assertions\n\n\nI don't understand what the jsdom comments are about since they pass.\n\nAddress review feedback\n", 'Remove data-reactid and data-reactchecksum from whitelist (#10402)', 'Add traversal for Fiber test renderer (#10377)\nNot clear the path to shipping this but this gives us a migration path internally that we need right now (replaces https://fburl.com/udq9ksvk).', 'Fiber debugger enhancements (#10393)\n\n\nAdd effect tag\n\n\nAdd graph settings (direction and trackActive)\n\n\nSupport multiple effect tags\n\n', 'Updated packages and results JSON for 16 beta 4', "Fix bugs related to unmounting error boundaries (#10403)\n\nDon't warn about setState on unmounted when scheduling error recovery\n\nWe shouldn't schedule an update on unmounted error boundaries, but we\ndon't know if a boundary is unmounted until we traverse its parents.\nAdded an additional argument to scheduleUpdate so we know not to warn\nabout setState on unmounted components.\n\nShould be able to unmount an error boundary before it is handled\n\nFixes the case where an error boundary captures an error, but its\nparent is unmounted before we can re-render it. componentDidCatch is\nnever called, and we don't remove the boundary from our set of\nunhandled error boundaries.\nWe should not assume that if capturedErrors is non-null that we still\nhave unhandled errors.", 'Enable new fiber ReactTestRenderer API methods (#10410)\nEnable new fiber ReactTestRenderer API methods', '16 beta 5 version bump and results JSON', 'Update Flow to 0.52 (#10417)\nFor opaque types', 'Add test for duplicate events with nested dispatch', 'Set date to initial value when reset (#10412)', 'Moved around package dependencies fixes #10335 (#10424)', 'Make createFiber use a constructor object rather than an object literal object (#9369)\n\n\nmade createFiber create a constructed FiberNode object\n\n\nupdated comment\n\n\nsatisfying flow and prettier\n\n\nbetter comments :)\n\n\nfixes flow error\n\n\nupdates comment\n\n\nconverted function constructor to a ES2015 class\n\n\nRevert "converted function constructor to a ES2015 class"\n\n\nThis reverts commit c020982c5fe62446667f6f933c834366c3f009b3.\n\n\nfixed some merge conflict issues\n\n\nFlow....\n\n\nremoved exact types to make flow pass\n\n\nopted for $FlowFixMe instead\n\n\nremoved exact types to make flow pass\n\n\nopted for $FlowFixMe instead\n\n\nrun prettier\n\n', 'Use Closure Compiler for UMD/Node bundles instead of Uglify (#10236)\n\n\nUse GCC instead of Uglify for UMD/NODE bundles\n\n\nPrettier run\n\n\nFixes fixtures that were alterated by Pretter and trailing function commas\n\n\nprettier on prettier\n\n\nupdated prettier config\n\n\naltered prettier config slightly\n\n\nReverted prettier changes\n\n\nupdated results.json\n\n', 'Wrap warning() calls in a DEV check for RN_* builds too (#10428)\n\nWrap warning() calls in a DEV check for RN_* builds too.\nWrapped several warning() imports and calls in if-DEV checks.\nRemoved a useless variable (allTypesByEventName) and loop from ReactNativeBridgeEventPlugin.\n', 'Fix for #10388. Renames renderToStream to renderToNodeStream. (#10425)', "Find callsites that would call toString() if we pass attributes through (#10416)\n\n\nFind callsites that would call toString() if we pass attributes through\n\n\nWarn for all object unknown props, not just 'toString' ones\n\n\nfixing this as per Sebastian's feedback, because we want to find all\nobjects and not just ones with 'toString' defined. Because there may be\nother corner cases and issues that are revealed.", "Update version on dom fixtures (#10445)\nAnd yarn lock file.\nAvoids a dependency that my proxy won't let me install.", 'Fixes #10443 (#10448)', 'Use the virtual target for change events to avoid restoring controlled state on the real target (#10444)\n\nAdd test for nested controlled selects\n\nThe failure repros only when two events are fired sequentially, where the second\nevent is what updates the value.\n\n\nAdd failure case to DOM select fixture\n\n\nUse virtual event target for change event instead of native target\n\n\nEnsures that we use the same node to make decisions instead of two like\nwe do now.\nThis will cause restore to be called or not called consistently.\n\nPass native event target to the event\n\nWe normally pass the native event target to the event object. This ensures\nthat we do the same thing here.\nWe still want to schedule a "restore" on the virtual target though since\nthose are the only nodes known to React.', 'Add explicit invariant when ReactDOM is loaded w/o React (#10449)', 'Warn when nesting 15 subtree inside 16 (#10434)', "Don't warn about casing in SSR for non-HTML NS (#10452)\nFixes #10415.", "Better messaging for componentDidCatch cross-origin errors (#10447)\nThe prior message was a bit wordy and didn't cover all cases (like the one we discovered while researching #10441).\nWe can use the new URL to explain background info on the DEV-mode technique we're using in addition to common fixes (eg crossorigin attribute for CDN scripts and Webpack devtools settings). Putting this information behind a link will allow us to more easily edit it in the future as common causes for this issue change.\nResolves #10441", 'Added "Advanced Guides" page about cross-origin Errros (#10457)', 'Added unit tests for creating an element with a ref in a constructor. Only set ReactCurrentOwner.current in dev mode when the component has no constructor. (#10025)', "Custom Attributes Scenario 2: Write badly cased attributes. Remove most of whitelist. (#10385)\n\n\nAllow custom attributes. Add flag to toggle custom attribute behavior\n\n\nUpdate custom attribute logic\n\n\nOnly allow string attributes\n\nRemove custom attribute feature flag\n\nAdd additional tests for data, aria, and custom attributes\n\n\nAllow numbers and booleans custom attributes. Cut isCustomAttribute\n\n\nCover objects with custom attributes in warning test\n\n\nRename DOMProperty.isWriteable to shouldSetAttribute\n\n\nRework conditions in shouldSetProperty to avoid edge cases\n\n\nUpdate unknown property warning to include custom attribute information\n\n\nRemove ref and key from reserved props\n\n\nEnsure SSR test coverage for DOMProperty injections\n\n\nAdd ajaxify attribute for internal FB support\n\n\nAjaxify is a stringifiable object attribute\n\n\nRemove non-case sensitive standard attributes. Make ARIA hook dev only.\n\n\nUpdate test name for custom attributes on custom elements\n\n\nRemove SSR custom injection test\n\n\nRemove case sensitive props\n\n\nRemove onAfterResetModules hooks in SSR render tests\n\n\nAdd back a few attributes and explain why they are needed\n\n\nRemove possibleStandardNames from DOMProperty.js\n\n\nFix typo in HTMLPropertyConfig comment\n\n\nRemove duplicative comment\n\n\nAdd back loop boolean property\n\n\nDo not allow assignment of attributes that are aliased\n\n\nUpdate custom attribute test to check value, not just presence\n\n\nAddress case where class is assigned as an attribute on custom elements. Improve SSR tests\n\n\nCover cases where className and for are given to custom elements\n\n\nRemove unnecessary spys on console.error. Reduce extra space in tests\n\n\nCover cased custom attributes in SSR tests\n\n\nCustom attributes are case sensitive\n\n\nAllow uppercase letters in custom attributes. Address associated edge cases\n\n\nAllow improperly cased aliased attributes. Add additional tests\n\n\nHandle special properties like onFocusOut\n\n\nAdd some comments to document where casing matters. Remove DOMPropertyNames\n\n\nFix spelling mistake in ajaxify HTML property comment\n\n\nMake ARIA enforcement dev-only\n\n\nRemove alias test that covers multiple aliases for one property\n\n\nFix typo in comment\n\n\nBuild SVG aliases dynamically\n\n\nRemove unused DOMPropertyNames reference\n\n\nDo not translate bad casings of aliased attributes\n\n\nclassname writes to the DOM as classname\n\nclass does not write to the DOM\ncLASS does not write to the DOM\n\narabic-form does not write to the DOM\n\n\nRevise the way custom booleans are treated\n\n\nCustom attributes can not have boolean values unless they are aria\n  or data attributes\n\nAttributes with boolean values have been added back to the whitelist\nWarnings now exclude booleans from supported types\n\nAssociated test coverage\n\n\nAdd developer warnings for NaN and ARIA hooks\n\n\nUse string comparison instead of regex to check for data and aria attributes.\n\n\nWarn about unsupported properties without case sensitivity\n\n\nRemove attributes that are updated to invalid values\n\n\nSupport object property values with toString methods. Allow boolean props to coerce objects\n\n\nAdd back ajaxify test\n\n\nAddress bad references in ReactDOMComponent-test. Format.\n\n\nRevert changes to the docs\n\n\nWe'll update them separately\n\nAllow all objects and pass incorrect aliases\n", 'Use only public API in CSSProperty-test (#10429)\n\n\nUse only public API in CSSProperty-test\n\n\nMove test to ReactDOMServerIntegration\n\n\nAdd explanation\n\n', 'Add ReactFoo 2017 to list of upcoming conferences (#10467)', 'Custom attribute follow up (#10470)\n\n\nWrap ARIA prop warnings in backticks.\n\n\nUse accurate test names after updating custom attribute logic\n\n', 'Throw error to warn of mistaken loading of prod + dev React bundles (#10446)\n\nThrow error to warn of mistaken loading of prod + dev React bundles\n\nwhat is the change?:\nCredit to @gaearon for coming up with a clever way to check for this. :)\nI mainly just did the manual testing and fixed a couple of typos in his\nidea.\nI\'d like to do a follow-up PR to add a link and a page explaining this\nissue more and suggesting how to fix it.\nwhy make this change?:\nWe want to warn for an unfortunate gotcha for\nthe following situation -\n1. Wanting to shrink their JS bundle, an engineer runs it through\n   \'uglifyjs\' or some other minifier. They assume this will also do\n   dead-code-elimination, but the \'prod\' and \'dev\' checks are not\n   envified yet and dev-only code does not get removed.\n2. Then they run it through browserify\'s \'envify\' or some other tool to\n   change all calls to \'process.env.NODE_ENV\' to "production". This\n   makes their code ready to ship, except the \'dev\' only dead code is\n   still in the bundle. Their bundle is twice as large as it needs to\n   be, due to the dead code.\nThis was a problem with the old build system before, but with our new\nbuild system output it\'s possible to detect and throw an informative\nerror in this case.\ntest plan:\n1. run the build in react as usual; yarn build\n2. manually run \'uglifyjs -mt\' on \'build/packages/react/index.js\' to\n   simulate mistakenly minifying React before env variables are\n   resolved, which skips dead code elimination.\n3. run the fixtures build - cd fixtures/packaging && node\n   ./build-all.js && serve ../..\n4. Visit just the production browserify fixture -\n   http://localhost:5000/fixtures/packaging/browserify/prod/\n5. You should see the error thrown indicating this problem has occurred.\n(Flarnie will insert a screenshot)\n6. Do the above steps with NO uglifyjs step, and verify that no error is\n   thrown. When there is no minification applied, we don\'t assume that\n   this mix-up has occurred.\n(Flarnie will insert a screenshot)\nissue:\nfixes #9589\n\nRemove extra \'prod\' env. check and add link to docs in error message\n\nwhat is the change?:\nBased on helpful feedback from @gaearon\n- removed outer check that process.env.NODE_ENV is "production" since\n  we are only calling the testMinification method inside of another\n  check for "production" environment.\n- Added an fburl that points to our current docs on using the production version of React\nwhy make this change?:\nTo save an extra layer of conditionals and to make the error message\nmore clear.\ntest plan:\nSame test plan as earlier -\n\nrun the build in react as usual; yarn build\nmanually run \'uglifyjs -mt\' on \'build/packages/react/index.js\' to\n   simulate mistakenly minifying React before env variables are\n   resolved, which skips dead code elimination.\nrun the fixtures build - cd fixtures/packaging && node ./build-all.js && serve ../..\nVisit just the production browserify fixture -\n   http://localhost:5000/fixtures/packaging/browserify/prod/\n   You should see the error thrown indicating this problem has occurred.\n   (Flarnie will insert a screenshot in comments on the PR)\nDo the above steps with NO uglifyjs step, and verify that no error is thrown. When there is no minification applied, we don\'t assume that this mix-up has occurred.\n(Flarnie will insert a screenshot in the comments on the PR.)\n\nissue:\nhttps://github.com/facebook/react/issues/9589\n\nWIP fix and test \'testMinificationUsedDCE\' method\n\nwhat is the change?:\n- Instead of looking for one match when having the method inspect it\'s\n  own source, we look for two matches, because the search itself will be\n  a match.\n- WIP moving this method into another file and testing it.\nNext steps:\n- Figure out why the babel.transform call is not actually minifying the\n  code\n- Add tests for uglifyjs\n- Update build process so that this file can be accessed from\n  packages/react/index.js\nwhy make this change?:\n- We had a bug in the \'testMinification\' method, and I thought the name\n  could be more clear. I fixed the code and also changed the name.\n- In order to avoid other bugs and keep this code working in the future\n  we\'d like to add a unit test for this method. Using the npm modules\n  for \'uglifyjs\' and \'babel\'/\'babili\' we should be able to actually test\n  how this method will work when minified with different configurations.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/9589\n\nAdd babeli and uglifyjs as dev-only dependencies\n\nwhat is the change?:\nSee commit title\nwhy make this change?:\nIn order to test that we are correctly detecting different minification\nsituations, we are using these modules in a test.\ntest plan:\nNA\nissue:\nhttps://github.com/facebook/react/issues/9589\n\nFix typo and add \'uglifyjs\' tests\n\nwhat is the change?:\nThere was a mix-up in the conditional in \'testMinificationUsedDCE\' and\nthis fixes it.\nThe great new tests we added caught the typo. :)\nNext steps:\n- get the tests for \'babili\' working\n- update build scripts so that this the \'testMinificationUsedDCE\'\n  module is available from \'packages/react/index.js\'\nwhy make this change?:\nWe want to modularize \'testMinificationUsedDCE\' and test it.\nThis verifies that the method warns when uglifyjs is used to minify\nbut dead code elimination is not done, in a production environment.\nGenerally this is a \'gotcha\' which we want to warn folks aboug.\ntest plan:\nyarn test src/shared/utils/__tests__/testMinificationUsedDCE-test.js\nissue:\nhttps://github.com/facebook/react/issues/9589\n\n\nRun prettier\n\n\nvar -> const/let\n\n\nRequire specific version of uglify-js\n\n\nwhat is the change?:\nRemoved the \'^\' from the npm package requirement\nwhy make this change?:\nI am seeing failures in CI that show uglify-js is returning different\noutput there from my local environment. To further debug this I\'d like\nto run CI with the exact same version of uglify-js that I am using\nlocally.\ntest plan:\npush and see what CI does\nissue:\nhttps://github.com/facebook/react/issues/9589\n\nAdd build step copying testMinificationUsedDCE into build/packages/react/cj\n\nwhat is the change?:\nThis is a first step - we still need (I think) to process this file to\nget it\'s contents wrapped in an \'iffe\'.\nAdded a step to the build script which copies the source file for the\n\'testMinificationUsedDCE\' module into the \'cjs\' directory of our react\npackage build.\nwhy make this change?:\nWe want this module to be available to the \'index.js\' module in this\nbuild.\ntest plan:\nWill do manual testing once the build stuff is fully set up.\nissue:\n\nInline \'testMinificationUsedDCE\' and remove unit test for now\n\nWhat:\n- Inlines the \'testMinificationUsedDCE\' method into\n  \'packages/react/index.js\'\n- Removes unit test for \'testMinififcationUsedDCE\'\n- Puts dependencies back the way that they were; should remove extra\n  dependencies that were added for the unit test.\nWhy:\n- It would add complexity to the build process to add another file to\n  the \'build/packages/react/cjs\' folder, and that is the only way to\n  pull this out and test it. So instead we are inlining this.\n\nRevert unintentional changes to dependency versions, variable placing\n\nwhat is the change?:\n- We had updated and added some dependencies, but ended up reverting\n  this in a previous commit. The yarn.lock and package.json needed\n  updated still though.\n- There is a call to Function.toString which we wanted to wrap in a\n  try/catch block.\nwhy make this change?:\nTo remove unrelated dependency changes and increase the safety of the\nFunction.toString call.\ntest plan:\nManual testing again\nissue:\nhttps://github.com/facebook/react/issues/9589', "Replace object getter with Object.defineProperty in TestRenderer (#10473)\n\nAdd babel transform for object getters\n\nwhat is the change?:\nWe were not transforming object getters1, and our new TestRenderer\nuses one.2\nwhy make this change?:\nOur internal build system was not supporting object getters.\ntest plan:\nyarn build && yarn test\nAlso built and opened the 'packaging' fixture.\nHonestly I'm not sure what else to test, this seems pretty low risk.\nissue:\nNone opened yet\n\nReplace object getter with Object.defineProperty in TestRenderer\n\nwhat is the change?:\nReplaces an Object Getter 1 with Object.defineProperty.\nwhy make this change?:\nOur internal build system does not support object getters.\ntest plan:\nWe should do follow-up work to ensure that this doesn't come up again -\nwe can't commit code which uses object getters.\nissue:\nNo issue opened yet\n\nTweak the Object.defineProperty call in test renderer to make flow pass\n\nwhat is the change?:\n- switched from Object.defineProperties to Object.defineProperty\n- set some undefined properties to get flow to pass\nwhy make this change?:\n- Flow doesn't seem to play nicely with Object.defineProperty/ies\n  calls, specifically when you implement get and set methods.\n  See https://github.com/facebook/flow/issues/1336\n- Switched from properties to property because it seems more\n  conventional in our codebase to use property, and I'm only setting\n  one anyway.\ntest plan:\nflow\nissue:\nno issue\n\nMore flow type tweaking\n\nwhat is the change?:\nForced the typing of an argument to 'Object.defineProperty' to be\n'Object' to avoid an issue with Flow.\nwhy make this change?:\nTo get tests passing and flow passing.\ntest plan:\nflow && yarn test\nissue:", 'Add invariant check for composite components to event simulation test utils (#10414)\n\n\nAdd invariant check for composite components to event simulation test utils\n\n\nChange simulate variable names from domComponentOrNode to domNode, language for new simulate invariant, and add space in existing invariant\n\n\nUpdate test name\n\n\nUpdate test for invariant with shallow rendering\n\n\nUpdate text for existing invariant and change comments to reflect change to only domNode usage\n\n\nUpdate text for existing invariant to reflect syntax with new invariant\n\n\nUpdate ReactTestUtilsEntry.js\n\n\nUpdate React element invariant to reflect usage with shallow rendering\n\n\nMove Simulate-related tests into Simulate block\n\n\nRun prettier\n\n', 'Reset instance vars before calling commit phase lifecycles (#10481)', 'Revert "Remove old IE polyfill code" (#10483)\nwhat is the change?:\nThis reverts https://github.com/facebook/react/commit/0b220d0f04c9fea472c7cf8a7837322388728ca6\nWhich was part of https://github.com/facebook/react/pull/10238\nwhy make this change?:\nWhen trying to sync the latest React with FB\'s codebase, we had failing\nintegration tests.\nIt looks like they are running with an old version of Chrome and there\nis something related to file upload that fails when these polyfills are\nmissing.\nFor now we\'d like to revert this to unblock syncing, but it\'s worth\nrevisiting this change to try and add some polyfill for FB and remove it\nfrom React, or to fix whatever the specific issue was with our file\nupload error.\ntest plan:\nyarn test and also built and played with the dom and packaging\nfixtures', 'Removed ReactNativeFeatureFlag shim from RN bundle (#10472)', 'Add renderer id to react-devtools injection (#10475)\n\n\nadd renderer id to react-devtools injection\n\n\nrename renderer id to rendererPackageName in react-dom injection\n\n\nadd rendererPackageName to react-native entries\n\n', 'Add missing single-word attributes to property warning list (#10495)\n\n\nAdd missing single-word attributes to property warning list\n\n\nAlphabetize svg and html configs in possible names\n\n\nAdd basic test coverage for known single word attributes\n\n\nAdd note about including whitelist properites in `possibleStandardNames\n\n\nAlso add attribute sync comment to possibleStandardNames\n\n', 'Revert "Use the virtual target for change events to avoid restoring controlled state on the real target (#10444)" (#10504)\nThis reverts the meaningful (src, non-test) part of commit 3bc64327f01a2c9fd1529934ebf4a484c55d7e94 since we\'ve reverted the commit it depended on in 18083a8a7305483e219592914ef52729907a4368. I don\'t fully understand the negative implications of leaving this unreverted but it sounds like consensus is that it\'s safer to revert.\nI left the new fixture and verified it works correctly in Chrome 62 Mac, as well as the jest tests passing.', "RN (fiber) avoids the overhead of bridge calls if there's no update. (#10505)\nThis is an expensive no-op for Android, and causes an unnecessary view invalidation for certain components (eg RCTTextInput) on iOS.", 'Warn early for non-functional event listeners (#10453)\n\n\nAdd early warning for non-functional event listeners\n\n\nUse functional listeners in ReactDOMComponent test\n\n\nTo avoid triggering the non-functional event listener component\n\nspy on console.error in non-function EventPluginHub test\n\nThis should warn from ReactDOMFiberComponent, but we just ignore it here\n\n\nRemove redundant check for listener\n\n\nAdd expectation for non-functional listener warning in EventPluginHub\n\n\nHoist listener typeof check in hot paths\n\n\nInclude stack addendum in non-functional listener warning\n\n\nMake it pretty\n\n\nRemove it.onnly from ReactDOMFiber test\n\n\nFix message\n\n\nUpdate expected message\n\n\nChange invariant message to match the new style\n\n\nFix remaining warning\n\n', "Delete ReactNativeStack 🎉 🎉 🎉  (#10511)\n\n\nRemoved createReactNativeComponentClassStack and renamed createReactNativeComponentClassFiber => createReactNativeComponentClass\n\n\nRemoved findNumericNodeHandleStack and renamed findNumericNodeHandleFiber => findNumericNodeHandle\n\n\nRenamed ReactNativeFiberEntry => ReactNativeEntry\n\n\nRemoved all references to ReactNativeFeatureFlags and RN stack\n\n\nRemoved severl RN modules that are no longer used\n\n\nRenamed ReactNativeEntry => ReactNativeFiberEntry for now. We'll probably remove 'fiber' references later\n\n\nUpdate build results json\n\n\nDeleted snapshot\n\n\nRe-add accidentally deleted test\n\n\nRemove now-unnecessary hack in test\n\n\nFix lint\n\n\nRN findNodeHandle no longer adds props directly to read-only owner (#10520)\n\n\nAdded ReactNativeMount-test snapshot for 'renders and reorders children' test\n\n", 'Put warnForInvalidEventListener call behind nextProp check (#10527)', "Enable opt-in to async mode (#10535)\nWhen the feature flag enableAsyncSubtreeAPI is true,\nReact.unstable_AsyncComponent creates an async subtree. When it's false,\nit behaves like a normal, sync React component. We use this flag in www\nas a fail safe so that if we ship an async bug, we can set the flag to\nfalse and revert back to sync mode.\nFor open source, we should enable the feature flag.", 'Removing unecessary assignment (#10528)', 'Adding the correct argument name to documentation tag (#10529)', "Add table of attribute behavior (#10536)\n\n\n[WIP] Table of attribute behavior\n\n\ngetAttribute helper\n\n\nadd getters for attributes V-Z\n\n\nMore special cases\n\n\nAdd getters for more attributes\n\n\nAdd tagName to attribute config\n\n\nSwitch default accessor to getProperty instead of getAttribute\n\n\nAdd containerTagName and tagName config\n\n\nCompare result to default value\n\n\nAdd overrideStringValue config option\n\n\nadd section for Sebastian and update a couple more attributes\n\n\n'array with string' should use string override, too\n\n\nAdd additional value types\n\n\nStrings on, off, true, false\n\n\nmore attribute updates\n\n\nMore attributes\n\n\nRemove old directory\n\n\nadd more attribute configs\n\n\nMore attributes\n\n\njust a couple more attribute updates\n\n\nMore attributes\n\n\nFix the seb parts\n\n\nFix the seb parts\n\n\nConflicts:\nscripts/attribute-behavior/src/App.js\n\n\nMore attributes\n\n\nPrettier\n\n\nMore attributes\n\n\nMore attributes\n\n\nFix some bugs in seb's set\n\n\nFix the rest of flarnie's section\n\n\nMore attributes\n\n\nPrettier\n\n\nFinish my section (Andrew)\n\n\nCompare against UMD build of master\n\n\nOnce we get past MVP stage we can hook this up to the build system so\nthese files are automatically copied over.\n\nFix attributes that don't have compatible properties\n\nAvoid all undefined reads.\n\nTest multiple input types\n\nTests different input types and valueAsNumber property. This value is often\nNaN. To compare that we also need to switch to Object.is.\n\nIgnore checked in copies of React 15 bundles in attribute fixture\n\nwhat is the change?:\nWe checked in bundles of React v15 to run comparisons of attribute\nbehavior on DOM elements between 15 and 16.\nThis commit tells prettier and eslint to ignore those files, and fixes a\nprettier lint in one other file from that fixture.\nwhy make this change?:\nTo get CI passing.\ntest plan:\nyarn prettier doesn't change anything, eslint passes\nissue:\n\n\nupdate README for attribute table fixture\n\n\nrun prettier again\n\n", 'Wrap string values in quotes\nAll other types are formatted as as ', 'Use monospace font-family', 'Move attribite-behavior to fixtures', 'Delete vestigial CRA files', 'Add basic popover with additional information', 'Update eslintignore and prettier config to ignore UMD builds of React', '[attribute-behavior] Use development builds of React and ReactDOM (#10544)\nEnables warning detection.\nStart-up is noticeably slower, but after that the perf is about the same.', 'Remove UMD builds from fixture directory (#10547)', 'Use proper SVG tags for all SVG attributes and read using a special function (#10545)', '[attribute-behavior] Add alphabetical and rev-alphabetical sorting (#10546)\n\nAdd alphabetical and rev-alphabetical sorting\n\nThis is just an initial convenient way to jump to the top or bottom of\nthe list.\nNext we will add a sorting which groups rows together if their behavior\npattern is the same.\n\nAdd sorting to group the rows by behavior pattern\n\nwhat is the change?:\nAnother sorting option - if the content of a row is the same, it takes\nthose rows and groups them together.\nwhy make this change?:\nThis will help us find groups of attributes that behave similarly.\ntest plan:\nmanual testing\n\nrename variable to be more clear\n', 'Fixing incorrect documentation tags (#10530)', 'Refactor ensureUpdateQueues to avoid returning a tuple (#10437)\n\n\nremove tuple\n\n\nclean up\n\n\nprettier code\n\n\nUse module-level varibles\n\n', 'Updating param flow type definition (#10558)', 'Read SVG properties instead of attributes where applicable (#10549)\nAlso canonicalize object results (since these SVG properties are objects).\nThe canonicalized format is what we compare against.\n(This will cause unknown objects to show up as unchanged.)', 'Tweak attribute whitelist table (#10559)\n\n\nMove null and undefined to the end\n\n\nHighlight attributes with changes\n\n', "Upgrade flow-bin to 0.53.1 (#10510)\n\n\nUpdate flow-bin to 0.53.1\n\n\nRan flow-upgrade utility\nManually corrected a few over-eager cases where it tried to replace our ReactElement sub-type.\n\n\nReplaced a couple of React.Element types with React\n\n\nRemoved temporary ReactComponent/ReactComponent Flow types\n\n\nPrettier\n\n\nReplaced React with React based on Dan's PR feedback\n\n", 'Disable hasOwnProperty test in attribute table (#10560)', 'More consistent hashing (#10561)', 'Fix {false} test in attribute table', 'Add ability to "complete" rows and store state in localStorage (#10562)\n\n\nAdd ability to "complete" rows and store state in localStorage\n\n\nSort groups based on size\n\n\nAlso: include tagName and containerTagName in info object.\n\nTweak sort order\n', 'Update reference-events.md (#10554)', 'Fixed lint error in ReactErrorUtils-test (#10570)', 'Lint command fails if there are any warnings (#10572)\nYou get a lint failure! You get a lint failure! Eeeeverybody gets a lint failure!', 'Add --sync-www flag to build script (#10571)', 'Update issue template with PropTypes package (#10578)\nAdds prop-types to the template', "[attribute-behavior] Track differences between DOM and server renderer (#10575)\n\n\nLoad ReactDOMServer into attribute table\n\n\nHighlight differences between DOM and server renderer\n\n\nUse SSR behavior when comparing behavior across renderers\n\n\nUse less severe color if SSR differences are only due to warnings\n\n\nEnsure result node's tagName matches what's expected\n\n\nThrow on unexpected HTMLUnknownElement\n\n", 'Track nested updates per root (#10574)\nWe track nested updates to simulate a stack overflow error and prevent\ninfinite loops. Every time we commit a tree, we increment a counter.\nThis works if you only have one tree, but if you update many separate\ntrees, it creates a false negative.\nThe fix is to reset the counter whenever we switch trees.', 'Changes to attribute whitelist logic (#10564)\n\nRemove HTMLPropertyConfig entries for non-boolean values\n\nWhen we originally removed attributes from the whitelist, we assumed a\nfew attributes were string booleans, but they are not:\nAutocomplete ("on", "off")\nhttps://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#autocomplete\nAutocapitalize ("none", "sentence", "words", ...)\nhttps://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#autocapitalize\nAutocorrect ("on", "off")\nhttps://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#autocorrect\nAutosave (string)\nhttps://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#autosave\n\n\nOnly HAS_BOOLEAN_VALUE attribute flag can assign booleans\n\n\nUse a non-boolean attribute in object assignment tests\n\n\nAdd HAS_STRING_BOOLEAN_VALUE attribute flag\n\n\nFix boolean tests, add boolean warning.\n\n\nReserved props should allow booleans\n\n\nRemove outdated comments\n\n\nStyle tweaks\n\n\nDon\'t treat dashed SVG tags as custom elements\n\n\nSVG elements like font-face are not custom attributes\n\n\nAdds exceptions to isCustomAttribute for dashed SVG elements\n\n\nUse consistent custom element check across all modules\n\n\nMove namespace check to isCustomAttribute. Add caveat for stack.\n\n\nRemove unused namespace variable assignment\n\n\nFix the DEV-only whitelist\n\n\nDon\'t read property twice\n\n\nIgnore and warn about non-string is attribute\n\n\nBlacklist "aria" and "data" attributes\n\n\nDon\'t pass unknown on* attributes through\n\n\nRemove dead code\n\n\nAvoid accessing namespace when possible\n\n\nDrop .only in ReactDOMComponent-test\n\n\nMake isCustomComponent logic more solid\n\n\nDo attribute name check earlier\n\n\nFix fbjs import\n\n\nRevert unintentional edit\n\n\nRe-allow "data" attribute\n\n\nWe intentionally allowed it.\n\n\nUse stricter check when attaching events\n\n\nPass SVG boolean attributes with correct casing\n\n\nFix the test\n\n\nUndo the SVG dashed-name fix\n\n\nPer conversation with @sebmarkbage we decided that the fix is too complicated, and it\'s unfortunate it depends on the DOM element.\nIt\'s only relevant for super rare tags that aren\'t even working consistently across browsers so we\'ll leave it unfixed for now.\n\n\nPrettier\n\n\nFix lint\n\n\nFix flow\n\n\nPass "aria" through but still warn\n\n\nRemove special cases for onfocusin, onfocusout\n\n\nThey\'re covered by event handler code now.\n\n\nAdd a more specific warning for unknown events\n\n\nPass badly cased React attributes through with warning\n\n', "Defer reading native view config from UIManager until view is used (#10569)\n\n\nReactNative supports lazy view registration\nDon't react viewConfig from UIManager when a view is registered, but only when it is used for the first time. This will help unblock Prepack optimizations for RN views.\n\n\nAdded new lazy-creation method for native views\nAlso exposed the native view config registry to allow invalid/unsupported host components to fall back to RCTView\n\n\nRemoved ReactNativeViewConfigRegistry from RN __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\nAfter discussion with Spencer Ahrens and Andy Street, it seems the early fallback behavior was mostly for the early days of Ads Manager when Android didn't yet support a lot of the view types. It should be okay now to use an invarient/redbox instead for unsupported views.\n\n\nRemoved non-lazy createReactNativeComponentClass impl\nThere are only a handful of components with JavaScript-defined view configs. It's probably worth making them use the new lazy/async interface as well to be more consistent.\n\n", "Embed ReactNative event types in JavaScript (#10567)\n\nReactNative doesn't query UIManager for native event types\nThis is a pre-req to unblock Prepack optimiations for ReactNative apps\nReplaced mock ReactNativeEventTypes with mock Platform\nAdded Platform.OS to RN host hooks Flow types\n", '[attribute-behavior] Canonicalize values immediately after reading them (#10584)\nIn case they are mutated', 'Remove disableNewFiberFeatures flag (#10585)', "Don't treat dashed SVG tags as custom elements (#10586)", 'Ensure attribute table server-renders SVG inside SVG container (#10588)', 'Update sizes', 'Adding Crowdin config file to master repo (#10579)\n\n\nAdding Crowdin config file to master repo\n\n\nUpdated to include additional files while ignoring localized community files stored on github\n\n\nAdditional files ignored\n\n\nIncluded additional files in root docs directory\n\n', 'Default to first non-disabled option for select elements (#10456)\n\nDefault to first non-disabled option for select\n\nInstead of defaulting to the first option for a select element, which could be a disabled option, we find the first non-disabled option available while we looping through the options. If no option matches, set the first non-disabled option as selected.\n\n\nAdd ReactDOMSelect test for defaulting to non-disabled options\n\n\nAdd test fixtures to cover disabled selected options\n\n\nFix bad merge\n\n', 'Fix warning deduplication in attribute table (#10594)\n\n\nFix warning deduplication by eval-ing React\n\n\nMove checkbox to the left\n\n\nFix alphabetical sort\n\n\nFix the pooling logic\n\n\nAvoid false positive warning due to controlled/uncontrolled switch\n\n\nNaming: 15 => Stable, 16 => Next\n\n\nPrettier\n\n\nAdd "Save" button\n\n', 'Fix typo in script function name (#10611)', 'Fix minor typo in Firefox name (#10605)', 'Moar attribute tests (#10509)\n\n\nWIP\n\n\nWIP Add the rest of the tests for what we expect re: unknown attributes\n\n\nwhat is the change?:\nAdds tests for the following behavior -\n\nNumbers and booleans should be converted to strings, and not warn\nNaN, Symbols, functions, and objects should be converted to strings,\n  and should warn\n\nGoing to add tests for the not-warning behavior in a follow-up.\nThese tests are not entirely passing - we either need to change what we\nexpect or change the behavior.\nwhy make this change?:\nGets everyone on the same page about expected behavior, and codifies it\nin a maintainable way\ntest plan:\nyarn test src/renderers/dom/shared/__tests__/ReactDOMAttribute-test.js\nissue:\nhttps://github.com/facebook/react/issues/10399\n\nWIP Add check that we don\'t warn when handling some unknown attributes\n\nwhat is the change?:\nWe are testing the behavior of unknown attributes, which has changed\nsince React 15.\nWe want to not warn for the following cases -\n- null\n- undefined\n- missing\n- strings\n- numbers\n- booleans\nwhy make this change?:\nWe want to verify that warnings don\'t get fired at the wrong time.\ntest plan:\nyarn test src/renderers/dom/shared/__tests__/ReactDOMAttribute-test.js\nissue:\nhttps://github.com/facebook/react/issues/10399\n\n\nran prettier\n\n\nSymbols and functions passed to unknown attributes should remove and warn\n\n\nAbstract tests a bit to make them easier to read\n\n\nRemove Markdown from test names\n\n\nI don\'t think we use this convention anywhere.\n\n\nAdd an assertion for NaN warning message\n\n\nUpdate ReactDOMAttribute test based on attribute fixture\n\n\nwhat is the change?:\n- booleans don\'t get stringified\n- some warnings have changed since we originally wrote this\nwhy make this change?:\nThe attribute behavior is finalized and now we can test it :D\nI also found it handy to have a row with a truly unknown attribute, so\nadded "imaginaryFriend".\ntest plan:\nyarn test src/renderers/dom/shared/__tests__/ReactDOMAttribute-test.js\nand comparing the tests to the attribute table\nissue:\nhttps://github.com/facebook/react/issues/10399\n\n\nremove imaginaryFriend to resolve conflict\n\n\nran prettier\n\n', "Add AgentConf 2018 (#10614)\n\nAdd AgentConf 2018\n\nWe are having another edition of the AgentConf in 2018, which has again a strong focus on react, and we'll be skiing again 😎 Last year's PR for reference: https://github.com/facebook/react/pull/8196\n\nUpdate conferences.md\n", 'Generate Markdown table from attribute fixture (#10595)\n\n\nGenerate Markdown table\n\n\nCheck in generated table\n\n\nAdd fast mode\n\n\nFix lint\n\n', "Update error codes and results.json (#10619)\n\nUpdate results.json\n\nwhat is the change?:\nRan the build after updating Yarn lockfile and recorded latest build\nsize results.\nwhy make this change?:\nLet's get an idea of bundle size at this point, when we are preparing\nthe 16.0 RC.\ntest plan:\nNA\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nUpdate error codes\n\nhttps://github.com/facebook/react/tree/master/scripts/release-manager#update-the-error-codes", "Update to latest allowed versions of fbjs and prop-types (#10626)\nwhat is the change?:\nUpdates to the latest allowed versions for two dependencies.\nyarn upgrade 'fbjs@^0.8.9'\nand\nyarn upgrade 'prop-types@^15.5.8'\nwhy make this change?:\nPrepping for the 16.0 RC, we want to have a reproducible build that is\nas close as possible to what new users will get when installing React.\ntest plan:\nyarn && yarn build && yarn test\nissue:\nhttps://github.com/facebook/react/issues/10623", 'Pull in react-art/lib/{Circle,Rectangle,Wedge}.art (#10629)\n\nImport react-art/lib/{Circle,Rectangle,Wedge}.art\n\nCopied from react-art@0.15.1 built files.\n\nChanges to built files to make ART shapes work\n\nTest Plan: Opened the fixture. React logo shows up with its normal dot, now rendered by a <Circle />.', "React native event type fixes (#10627)\n\n\nAdded invariant check for native dispatching an unsupported event type\nThis prevents a case of a silent failure when native dispatches an event that JavaScript does not know how to handle.\n\n\nAdded iOS direct event type 'onSnapshotReady'\nThis is used for snapshot testing.\n\n", 'Add missing dependencies in art fixture, update yarn.lock (#10628)\n\nAdd missing dependencies in art fixture, update yarn.lock\n\nwhat is the change?:\nSee title\nwhy make this change?:\nWe want the art fixture to be working so that we can test the latest\nversion of react-art.\ntest plan:\nBuilt and inspected the fixture manually\nissue:\nPrepping for 16.0RC release - https://github.com/facebook/react/issues/10623\n\nran prettier\n', '16.0.0-rc.1 (#10630)', 'Update .mailmap', 'Remove "const" in uncompiled code (#10631)\nTest Plan: All fixtures/packaging iframes display correctly on Chrome 38.0.2125.0 from https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/290001/; previously several were blank with "Use of const in strict mode" errors logged to the console.', 'add React Day Berlin (#10492)', 'Add comment for renderToStringImpl parameter (#10634)', 'Add license headers on build bundles (#10490)\n\n\nAdd license headers on build bundles\n\n\nAdd the filename IMO to header\n\n\nPreserve headers in production bundles\n\n\nUse ECMASCRIPT5_STRICT to preserve "use strict"\n\n', 'Remove performWithPriority from scheduler (#10638)', 'Blog post: DOM Attributes in React 16 (#10650)\n\n\nBlog post: DOM Attributes in React 16\n\n\nTesting the RC\n\n', "Bump versions for 16.0.0-rc.2 (pick)\nNOTE: This commit is not exactly what went out as RC2 because I forgot to push. See tag v16.0.0-rc.2 (d06680ea9e12059952c734e080dd2c1dfecd112e) instead. Bumping the version here so we're at the right place though.", 'Update my name in most places', 'Reset effectTag to NoEffect instead of NoWork (#10653)', 'Improve displayName documentation (#10451)\n\n\nImprove displayName documentation\n\n\ndisplayName docs: higher-order component lowercased to stay consistent with the rest of the docs\n\n\nRephrase displayName reference docs\n\n', "Update Sophie's name on various files (#10655)", 'Add React Seoul 2017 to the conferences list (#10661)', 'adds missing else clause (#10660)', 'the order of withRouter and connect is reset (#10658)\nper this link becasue If you are using withRouter to prevent updates from being blocked by shouldComponentUpdate, it is important that withRouter wraps the component that implements shouldComponentUpdate.', "More explicit class method for ref doc (#10228)\nAfter realizing this was the second time I've visited this exact page within a year and second guessing myself that the textInput ref isn't actually the <input /> element. I decided to attempt to make this a little more explicit; you are actually accessing the method on the child class and not the focus method on the dom input element. Having them named the same caused some confusion.", 'Fix test names in ReactDOMComponent-test (#10113)\n\n\nFix test names in ReactDOMComponent-test\n\n\nRun record-tests script for Fiber\n\n', 'Fix hint wording in tutorial.md (#9867)\nThe tutorial hints that a change can be made that allows you to go back\nin time then click in the board to create a new entry, but the change is\nalready present in the example code.\nThis fix removes the hint and re-words the explanation of the change the\nexample code is making.', 'Remove react proptypes references (#9759)', 'Update sizes', 'Remove toString-based minification check (#10673)', 'Share Object.assign polyfill between UMD builds (#10671)', 'Make ReactDOM.createPortal() official (#10675)\n\n\nValidate portal container early\n\n\nAdd ReactDOM.createPortal but leave unstable_ alias usable\n\n', 'Remove undocumented TestUtils methods (#10681)', 'Stop exposing shallow renderer from TestUtils (#10682)\n\n\nStop exposing ShallowRenderer from TestUtils\n\n\nRecord sizes\n\n\nLint\n\n', 'Fix context memory leak (#10680)\n\n\nFix context memory leak\n\n\nFix Flow\n\n', 'Fix false positive hydration warning for SVG attributes (#10676)\n\n\nFix false positive hydration warning for SVG attributes\n\n\nUndo the generic fix\n\n\nPass namespace through and use it to determine sensitivity\n\n', 'Warn against custom non-lowercase attributes (#10699)\n\n\nWarn against custom non-lowercase attributes\n\n\nUpdate attribute table\n\n\nGrammar tweaks\n\n', 'Report bad dead code elimination to React DevTools (#10702)\n\n\nReport bad dead code elimination to React DevTools\n\n\nFix lint\n\n', "Fix FB isomorphic build (#10704)\n\nFreeze bundle configs before the build\n\nThis ensures we don't accidentally mutate it.\n\n\nFix config mutation during the build uncovered by freeze\n\n\nFix FB isomorphic build by marking object-assign as an external\n\n\nBye bye redundant check\n\n", 'Update sizes', 'Update fbjs in lockfile', 'Update error codes', '16.0.0-rc.3', 'Record sizes', 'Remove View.propTypes RN deprecation workaround (#10683)', "Fix bug with toTree on rendered array #10616 (#10652)\n\n\nFix bug with toTree on rendered array #10616\n\n\nPreserve previous behaviour of rendered being a node unless it's for rendering an array\n\n", 'Small typo fixed (#10701)', 'ReactNativeBridgeEventPlugin supports lazily-registered event types (#10679)\n\nReactNativeBridgeEventPlugin supports lazily-registered event types\nThis accompanies changes on the native side to now specify which event types each view manager supports as part of its view config. Ultimately the goal is to lazily initialize view managers on the native side as well.\nBubbling and direct attributes are optional on view config\nThis should help ease transition for pre-existing JS-only components.\n', 'Push host root context when bailing out on low priority (#10712)\nPrevents a push/pop mismatch when bailing out on HostRoots. This is\ncurrently unobservable, because HostRoots never bail out on low\npriority, but this does happen with prerendering.\nI found this when rebasing #10624 on top of master.', 'Add React Amsterdam 2018 Conference (#10734)', 'Update changelog for unreleased 16.0 changes (#10730)\n\nFirst shot at updating changelog for 16.0\n\nwhat is the change?:\nAdded an \'unreleased\' section to the changelog with info from https://github.com/facebook/react/issues/10294\nwhy make this change?:\nTo get things set for the 16.0 release.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/8854\n\n\nFix typos and formatting errors in changelog\n\n\nAdd requestAnimationFrame and remove "New helpful warnings"\n\n\nwhat is the change?:\nIn response to helpful code review -\n- Add mention of dependency on requestAnimationFrame and need to\n  polyfill that as well as Map and Set\n- Remove "New helpful warnings" section; it was incomplete, and there\n  are so many new and updated warnings that it might not be reasonable\n  to cover them in the changelog.\nwhy make this change?:\nAccuracy\ntest plan:\nVisual inspection\nissue:\nissue #8854\n\n\nImprove wording\n\n\nImprove wording and fix missing links\n\n\nAdd backticks to file names & code; wording tweak\n\n\nBreak "Major Changes" into "New Feature" and "Breaking Changes"\n\n\nAdd server side render changes to 16.0 changelog\n\n\nChange gist link from mine to gaearons\n\n\nAdd note about returning fragments\n\n\nfix misc nits\n\n\nMisc. formatting/wording fixes to changelog\n\n\nwhat is the change?:\nThanks to the kind code review comments of @gaearon and @nhunzaker we\nhave\n- removed the non-deterministic bold styling on some bullet points\n- improved wording of the bullet points for portals, attribute whitelist\n  changes, and server rendering changes\n- Add note about error boundaries including a breaking change to error\n  handling behavior.\n- punctuation and capitalization fixes\nwhy make this change?:\nClarity and correctness\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/8854\n\nfix broken link\n', 'Fixes #9667: Updated createTextInstance to create the text node on correct document (#10723)', 'Record sizes', 'Add a changelog for elements having the same key (#10811)\n\n\nAdd a changelog for elements having the same key\n\n\nReword\n\n', 'Markdown fixs on "DOM Attributes in React 16" post (#10816)', 'Include tag name into the table snapshot (#10818)', 'Update DOM warning wording and link (#10819)\n\n\nUpdate DOM warning wording and link\n\n\nConsistently use "Invalid" for known misspellings\n\n', 'Update license headers BSD+Patents -> MIT\nDid find and replace in TextMate.\nfind: (?:( \\*)( ))?Copyright (?:\\(c\\) )?(\\d{4})\\b.+Facebook[\\s\\S]+(?:this source tree|the same directory)\\.$\nreplace: $1$2Copyright (c) $3-present, Facebook, Inc.\\n$1\\n$1$2This source code is licensed under the MIT license found in the\\n$1$2LICENSE file in the root directory of this source tree.', 'Change license and remove references to PATENTS\nOnly remaining references:\n``\ndocs/_posts/2014-10-28-react-v0.12.md\n51:You can read the full text of the [LICENSE](https://github.com/facebook/react/blob/master/LICENSE) and [PATENTS`](https://github.com/facebook/react/blob/master/PATENTS) files on GitHub.\ndocs/_posts/2015-04-17-react-native-v0.4.md\n20: Patent Grant*: Many of you had concerns and questions around the PATENTS file. We pushed a new version of the grant.\nsrc/mocks/vendor/third_party/WebComponents.js\n8: * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n```', 'Version bumps to use MIT license', 'Add ReactTestRenderer documentations (#10692)\n\n\nAdd ReactTestRenderer documentations\n\n\nAdd TestRenderer documentations\n\n\nTestRenderer is not experiment\n\n\nAdd a link for jsdom\n\n\nUse ES Modules syntax\n\n\nTwaek\n\n\nAdd a Link component\n\n\nUse Jest assertions\n\n\nMove a documentation for createNodeMock to Idea section\n\n\nRenamed\n\n\nTweak\n\n\nRename\n\n\nMore explicit\n\n\nAdd a usecase for createNodeMock\n\n', 'Add changelog for 15.6.2', 'Add 15.6.2 blog post to master', 'Add Nate to authors on master', 'Bump object-assign patch range to match main package.json', 'Flow should ignore node_modules/create-react-class', 'Update error codes', 'Update CHANGELOG for React 16', 'v16.0.0']v15.6.2 15.6.2 (September 25, 2017)
All Packages

Switch from BSD + Patents to MIT license

React DOM

Fix a bug where modifying document.documentMode would trigger IE detection in other browsers, breaking change events. (@aweary in #10032)
CSS Columns are treated as unitless numbers. (@aweary in #10115)
Fix bug in QtWebKit when wrapping synthetic events in proxies. (@walrusfruitcake in #10115)
Prevent event handlers from receiving extra argument in development. (@aweary in #10115)
Fix cases where onChange would not fire with defaultChecked on radio inputs. (@jquense in #10156)
Add support for controlList attribute to DOM property whitelist (@nhunzaker in #9940)
Fix a bug where creating an element with a ref in a constructor did not throw an error in development. (@iansu in #10025)
 ['Fix isMounted test to include the latest fix', 'Changelog for 15.6.1 (#9977)', 'Bump docs to 15.6.1', 'Fix the test again', 'As pointed out by @gaearon in code review comment https://github.com/facebook/react/pull/10024#discussion_r123649131 , ReactDOMServer is an object, not a class. (#10027)', 'Create higher-order-components.md (#9976)', '[Docs: A11y] Add accessibility docs (#9519)\n\n\n[Docs: A11y] Add accessibility docs\n\n\nFix the link\n\n\nReplace link image\n\n\nTweak style\n\n', 'Tiny changes to tutorial (#10048)\n\n\nInitial commit\n\n\nPR feedback\n\n', 'docs(a11y): Small fixes (#10079)\n(cherry picked from commit 79868a978d68ed2fc994902d9984f69131a985f7)', 'doc: fix the order of lint and prettier (#10095)\n(cherry picked from commit 03db57aa718d23dcca69ffce26e9806f7ab1bcb4)', 'Fix the data-height of Step 5 CodePen embed (#10083)\n(cherry picked from commit 83f56370e6040ee58ed67f996dce3f9d1ae56c86)', 'Add React Boston 2017 to upcoming conferences (#10099)\n(cherry picked from commit a39858f399387d2cc16244c4830641a0e5fc09b2)', 'Add ReactNext 2017 to conference list (#10114)\n(cherry picked from commit b22387d4fe471255f17e26e898bc8c704920b084)', 'Updated Immutable Data Stuctures Docs (#9845)\n\n\nupdated immutable data structures section\n\n\nimproved immutable clarifications\n\n\nchanges to example immutable code\n\n\n(cherry picked from commit 8f4d30737def9fa3456149826414643b5cbbe4bf)', 'Tweak deprecation messages to be less scary (#10145)\n(cherry picked from commit 2e2f503cb84842d588295d8283366793bff1c8eb)', 'Fix uncontrolled radios (#10186)\n\n\nFix uncontrolled radios\n\n\ncherry-pick regression test from master\n\n\nprettier\n\n', 'Regenerate error codes and update bundle size stats (#10287) (#10288)\n\n\nRegenerate error codes and update bundle size stats (#10287)\n\n\nUpdated error codes (after merging in missing code from 15 stable) (#10290)\n\n', 'Blog post: Error Handling in React 16 (#10267)\n\n\nBlog post: Error Handling in React 16\n\n\nChange the date\n\n', 'Link to React 16 beta', 'Replace "children (and grandchildren)" with "descendants" (#10297)', 'Reword further', 'Add a link for the error boundaries codemod into the blog post (#10305)\n\n\nAdd a link for the error boundaries codemod into the blog post\n\n\nUpdate 2017-07-26-error-handling-in-react-16.md\n\n', 'Add Babel plugin note to Error boundaries post (#10313)\n\n\nAdd Babel plugin note to Error boundaries post\n\n\nAdded section with screenshots\n\n\nAdd context to Component stack traces\n\n\nUpdate 2017-07-26-error-handling-in-react-16.md\n\n\nMove section, more minor changes\n\n\nChange pics\n\n', 'Make it more specific', 'Use boolean assertion for documentMode check (#10032)', 'Use createElement rather than createFactory in react-dom-factories\nThis is a tiny bit more future-proof.', 'Remove React from peers of react-dom-factories\nFixes #10358', 'react-dom-factories@1.0.1', 'Add documentation about ', 'Update codes', 'Wop optimized this repository (#10374)\nThe Web Optimization Project optimized this repository. This commit contains the optimized files in this repository.', 'Update installation.md', 'Add columns to isUnitlessNumber list', 'move augmentClass definition above SyntheticEvent Proxy replacement (#10011)', "Use a closure to bind argument to callback in ReactErrorUtils (#8363)\n\nUse a closure to bind gaurded callback\n\nThis way the fake event isn't being implicitly passed into the event handler\n\nAdd tests for ReactErrorUtils\n\nAdd fiber test report\nLinting fixes", 'Add controlList to DOM property whitelist (#9940)\nSee:\n\nhttps://github.com/WICG/controls-list/blob/gh-pages/explainer.md\nhttps://developers.google.com/web/updates/2017/03/chrome-58-media-updates#controlslist\n', 'Update yarn.lock file', 'Add 15.6.2 changelog', 'Update React version in docs', 'Added "Advanced Guides" page about cross-origin Errros (#10457)', 'Update error codes (#10621)\nhttps://github.com/facebook/react/tree/master/scripts/release-manager#update-the-error-codes', 'Update conferences.md (#10160)', 'Add ReactFoo 2017 to list of upcoming conferences (#10467)', 'add React Day Berlin (#10492)', 'Update reference-events.md (#10554)', "Add AgentConf 2018 (#10614)\n\nAdd AgentConf 2018\n\nWe are having another edition of the AgentConf in 2018, which has again a strong focus on react, and we'll be skiing again 😎 Last year's PR for reference: https://github.com/facebook/react/pull/8196\n\nUpdate conferences.md\n", 'Blog post: DOM Attributes in React 16 (#10650)\n\n\nBlog post: DOM Attributes in React 16\n\n\nTesting the RC\n\n', 'Add React Seoul 2017 to the conferences list (#10661)\n(cherry picked from commit f76467e8e5fd01d6586cd0d506c0503f7d29ab38)', "More explicit class method for ref doc (#10228)\nAfter realizing this was the second time I've visited this exact page within a year and second guessing myself that the textInput ref isn't actually the <input /> element. I decided to attempt to make this a little more explicit; you are actually accessing the method on the child class and not the focus method on the dom input element. Having them named the same caused some confusion.\n(cherry picked from commit 6d37c05dd7d42cf44805222f8b03a87474e21c42)", 'Update error codes', 'Add 15.6.2 blog post', "Added unit tests for creating an element with a ref in a constructor. Only set ReactCurrentOwner.current in dev mode when the component has no constructor. (#10025)\nnhunzaker: I've added an additional line to the ref test that sets the\nNODE_ENV invironment variable. This allows the test to pass.", 'Update release date', 'Update changelog with #10025', 'Improve grammar on changelog #10025 entry', 'Correct ref warning entry in changelog', 'Use standard method of testing for production', 'Update timestamps on post and changelog', 'Update timestamps', '15.x: File headers BSD+Patents -> MIT', '15.x: BSD+Patents -> MIT', '15.6.2', "Merge branch '15.6-dev' into 15-stable"]v15.6.1 15.6.1 (June 14, 2017)
React DOM

Fix a crash on iOS Safari. (@jquense in #9960)
Don't add px to custom CSS property values. (@TrySound in #9966)
 ['Delete prebuilt addon UMDs (#9931)', 'Remove broken GCC annotation from create-react-class (#9933)', 'Use Object.assign polyfill for update addon (#9932)', '[#9627] Fix create-react-class isMounted ordering issue (#9638)\n\n[#9627] Fix create-react-class isMounted ordering issue\n\nSplit the IsMountedMixin in two so that the __isMounted flag is set to false after componentWillUnmount is executed in mixins and the component.\n\nRevert changes to integration test\n', 'Lint and test addons on CI (#9936)\n\n\nLint addons\n\n\nRun prettier on addons\n\n\nFix all lint issues\n\n\nRemove unused variable\n\n\nTest addons on CI\n\n', 'Delete .babelrc from addons (#9938)', 'Use react-transition-group from npm (#9937)', 'Add build process for createReactClass (#9943)\n\n\nSwitch trailing comma to ES5 mode in addons\n\n\nAdd build process for createReactClass\n\n\nTest UMD bundles on CI\n\n\nFix lint\n\n', 'Delete accidental .babelrc', 'Revert "Ran prettier"\nThis reverts commit 1de60827e32f2a944bb62c644064b9aeed239b7c.', 'Add build process to all addons (#9946)\n\n\nBuild createFragment addon\n\n\nTack the addon onto React.addons object\n\n\nGeneralize build process for all addons\n\n\nFix lint\n\n\nFix lint again\n\n', 'Update yarn.lock again', '15.6.0', 'Minor fixes to 15.6.0 changelog (#9951)\n\n\nMinor fixes to 15.6.0 changelog\n\n\nRemove remaining double space\n\n\nBackticks\n\n', 'Minor fixes to 15.6.0 changelog (#9951)\n\n\nMinor fixes to 15.6.0 changelog\n\n\nRemove remaining double space\n\n\nBackticks\n\n', 'Minor fixes to 15.6.0 changelog (#9951)\n\n\nMinor fixes to 15.6.0 changelog\n\n\nRemove remaining double space\n\n\nBackticks\n\n', 'Addons: 15.6.0-rc.0', 'Add missing devDependency', 'Use lowPriorityWarning for TestUtils too', 'Add missing headers', "Blog post for 15.6.0 (#9950)\n\nBlog post for 15.6.0\n\nwhat is the change?:\nA short and sweet summary of 15.6.0 changes\nwhy make this change?:\nTo thank community contributors and call out important changes.\ntest plan:\nVisual inspection.\nI also looked it over in a markdown viewer - http://dillinger.io/\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nAdd 'Installation' and 'Changelog' to 15.6.0 blog post\n\nwhat is the change?:\nAdded the 'Installation' section we have on most release blog posts,\ncustomized for the 15.6.0 version of React.\nAdded the 'Changelog' from master to the blog post.\nwhy make this change?:\nTo show folks how to install React and what changes are in this release.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nImprovements to blog post, and add self to authors.yml\n\nwhat is the change?:\n- Add self to contributors so my name turns into a link\n- Use backticks for code-ish things\n- Second header to ##, not #\n- Change production mode link to the new address per @bvaughn's comment\n- Update changelog with fixes from https://github.com/facebook/react/pull/9951\nwhy make this change?:\nMake things more clear and accurate.\ntest plan:\nVisual inspect - @flarnie will paste an image of how it appears in the\nactual docs.\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nFurther improvements to 15.6 blog post\n\nwhat is the change?:\n- Reword heading about deprecation warning changes\n- add 'br' s to the list of installation options\n- add some stray missing backticks\nwhy make this change?:\nClarity and readability\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398", 'Remove trailing commas in addons', 'No need to call it deprecated', 'Update transitiongroup readmes to be less scary', '15.6.0 of addons', "Merge branch '15.6-dev' into 15-stable", 'Reword animation documentation deprecation (#9957)', 'Add future changelog for 15.6.0 addon release (#9953)', 'Add addon changes to 15.6.0 changelog (#9958)\n\n\nAdd addon changes to 15.6.0 changelog\n\n\nOops\n\n\nAdd to blogpost\n\n', 'Bail out of dedupe logic in cases where there is an incomplete value descriptor (#6648)', "Merge branch '15.6-dev' into 15-dev\nIn order to add https://github.com/facebook/react/pull/6648/files\nfixes https://github.com/facebook/react/issues/9956", 'remove file mistakenly added in merge conflict resolution', "Merge branch '15-dev' into 15-stable\nTo pull in https://github.com/facebook/react/pull/6648/files\nfixes https://github.com/facebook/react/issues/9956", 'Backport Safari fix for input changes (#9960)\nfixes #9956', "Disable 'comma-dangle' eslint rule for './addons' (#9965)\nwhat is the change?:\nAdded an eslintrc which disables the 'comma-dangle' rule just for\naddons.\nwhy make this change?:\nTo get CI passing again on the 15* branches.\nWe don't have dangling commas in the addons because it breaks GCC under\ncertain conditions. This doesn't affect React because we use Babel with\nReact, but it's not worth setting up Babel for the addons at this time.\ntest plan:\nyarn lint\nissue:\nNone - hopefully will fix this before it's a problem", "Merge branch '15.6-dev' into 15-stable", 'Prevents adding units to css custom properties (#9966)\n\n\nPrevents adding units to css custom properties\n\n\nFix code style\n\n\nOptimize custom property checking\n\n\nPrevents adding units to css custom properties in markup creation\n\n\nUpdate passing tests\n\n\nFix argument name and reuse check in DEV\n\n', 'Temporarily disable prettier on CI', "Merge branch '15.6-dev' into 15-stable", 'Bump dependencies', 'Delete unused packages', 'Remove unused build tasks', 'Try to re-enable Prettier', "Merge branch '15.6-dev' into 15-stable", '15.6.1', 'Try to enable Yarn on 15-stable (#9971)', 'Fix tests on CI to account for prop-types change']v15.6.0 15.6.0 (June 13, 2017)
React

Downgrade deprecation warnings to use console.warn instead of console.error. (@flarnie in #9753)
Add a deprecation warning for React.createClass. Points users to create-react-class instead. (@flarnie in #9771)
Add deprecation warnings and separate module for React.DOM factory helpers. (@nhunzaker in #8356)
Warn for deprecation of React.createMixin helper, which was never used. (@aweary in #8853)

React DOM

Add support for CSS variables in style attribute. (@aweary in #9302)
Add support for CSS Grid style properties. (@ericsakmar in #9185)
Fix bug where inputs mutated value on type conversion. (@nhunzaker in #9806)
Fix issues with onChange not firing properly for some inputs. (@jquense in #8575)
Fix bug where controlled number input mistakenly allowed period. (@nhunzaker in #9584)
Fix bug where performance entries were being cleared. (@chrisui in #9451)

React Addons

Fix AMD support for addons depending on react. (@flarnie in #9919)
Fix isMounted() to return true in componentWillUnmount. (@mridgway in #9638)
Fix react-addons-update to not depend on native Object.assign. (@gaearon in #9937)
Remove broken Google Closure Compiler annotation from create-react-class. (@gaearon in #9933)
Remove unnecessary dependency from react-linked-input. (@gaearon in #9766)
Point react-addons-(css-)transition-group to the new package. (@gaearon in #9937)
 ['Use caret range in blog instructions\nThe release was a bit broken.', "Amended implementation-notes.md with link to Dan Abramov's post describing difference between React components, elements, and instances (#9388)\n\n\nAmended implementation-notes.md to include a link to a blog post by Dan Abramov, explaining the difference between components, elements, and instances. An understanding of this distinction is crucial in tracing through Implementation pseudocode, and reading Dan's blog first may ease newcomers into understanding the implementation.\n\n\nadjusted wording to maintain stylistic consistency with rest of content, per @aweary's request\n\n", 'Delete examples dir from codebase overview (#9397)\nRemoves doc about folder that no longer exists.', 'Fix minor typo in lifting-state-up.md (#9408)', 'Update typechecking-with-proptypes.md (#9392)\n\n\nUpdate typechecking-with-proptypes.md\n\n\nUpdate typechecking-with-proptypes.md\n\n\nUse consistent style for PropTypes import\n\n', 'Fix the proptypes deprecation warning url on the "Don\'t Call PropTypes Warning" doc page (#9419)\n\n\nUse the same prop-types link on the warning docs page as the main proptypes doc page\n\n\nLink to repo instead\n\n', 'Deprecate React.createMixin\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.', 'Add test for deprecation warnings', 'Update deprecation wording to be less aggressive', 'Quick fix for eslint on 15.6-dev branch\nThe .eslintignore had gotten a merge conflict committed accidentally\nat some point, and also was not ignoring the addons directory. This\nfixes that.\nWe also had a couple of missing commas that snuck in, and those are\nfixed here too.', 'Docs: Clarification of setState() behavior (#9329)\n\nClarification of setState() behavior\n\nsetState() is a frequent source of confusion for people new to React, and I believe part of that is due to minimization of the impact of the asynchronous behavior of setState() in the documentation. This revision is an attempt to clarify that behavior. For motivation and justification, see setState Gate.\n\n\nUpdate reference-react-component.md\n\n\nSignature fix\n\n\nUpdate to address @acdlite concerns\n\n\nAdd more details\n\n', 'Update proptypes doc (#9391)\n\n\nUpdate proptypes doc\n\n\nRemoved note\n\n', "Add tabs to installation page (#9275, #9277) (#9401)\n\nAdd tabs to installation page (#9275, #9277)\n\nThis adds tabs for create-react-app and existing apps to the installation section of the docs. The tab implementation is a simplified version of React Native's installation page.\nFixes #9275.\n\n\nUse classList instead of className\n\n\nUse same implementation as in RN\n\n", 'Refractor docs to indicate that state set to props in constructor will not recieve the updated props (#9404)', 'Switch Installation to a tab when hash is present (#9422)', 'Updated the Good First Bug section in readme (#9429)\n\n\nUpdated the Good First Bug section in readme\n\n\nInconsistent use of quotes. Prefered single quotes instead of double quotes\n\n\nUpdated Good first bug link in how_to_contribute doc.\n\n\nUndo JSX attribute quote change\n\n\ndon\'t capitalize "beginner friendly issue"\n\n\n(cherry picked from commit 36c935ca8f9df7e19b5051997f4eb381402113ac)', '[Documentation] Impreove the react-component section of doc (#9349)\n\nImpreove react-component of doc\n\n#9304\n\n\nupdate description\n\n\nadd missing space\n\n\n(cherry picked from commit 359f5d276ffd4da96e3a00d7245da9fad004ba0d)', "Unique headings for linking purposes (#9259)\nPreviously two headings were 'Javascript Expressions' - now 'Javascript\nExpressions as Props' and 'Javascript Expressions as Children'\n(cherry picked from commit 363f6cb2e592f2a283eac279fb393666dcb92b65)", "Update jsx-in-depth.md (#9178)\n\nUpdate jsx-in-depth.md\n\nLine 9 isn't changed\n\n\nMove selection down\n\n\nFix\n\n\n(cherry picked from commit ccb38a96cf480d99a18f8764ccd12c59289bb542)", 'Sort out conferences by date (#9172)\n(cherry picked from commit 37f9e35ad93e1cb1042a7bc3d8b78290dfcecec6)', 'Lift state up - Updating the documentation to mention that onClick is a synthetic event handler (#9427)\n\n\nLift state up - Updating the documentation to mention that onClick is a synthetic event handler\n\n\nReview comments - Rephrase to handle synthetic events and event handler patterns\n\n\nTweak\n\n\n(cherry picked from commit 53a3939fb015504d006cc4f2d3ace67133164f09)', 'Fixed grammar (#9432)\n\n\nUpdate codebase-overview.md\n\n\nSome more fixes\n\n\n(cherry picked from commit d724115144e1bfd61c0d0a7aaf0bb02358652b83)', '[Tutorial] ES6, installation, and button closing tag (#9441)\n\n\nadds notes to tutorial on es6 and installation\n\n\nfixes tutorial mention of opening button tag\n\n\nMore writing\n\n\nUpdate\n\n', 'Minor tweaks to tutorial', 'Fix duplicate sentence', 'Minor tutorial nits', 'Add missing tutorial sidebar links', 'Tweak tutorial structure', "FIX: Move CRA build info under it's tab page (#9452)\n\n\nFIX: Move CRA build info under it's tab page\n\n\nAdd some links\n\n", 'Reorganize the "following along" instructions (#9453)\n\n\nReorganize the "following along" instructions\n\n\nMinor tweaks\n\n\n(cherry picked from commit 1ce562ead352dc139aa622bdce0f40df7070df5e)', '[Docs] Add accessibility to tabs in installation documentation (#9431)\n\n\nAdd accessibility to tabs in installation documentation\n\n\nChange color and fix styling\n\n\n(cherry picked from commit 9526174e3074b39796c8c8fb31983372e7b30649)', '[Docs: Installation] Fix tabs responsive layout - Resubmit (#9458)\n\n\n[Docs: Installation] Fix tabs responsive layout\n\n\nMove tabs a pixel down\n\n\nRemove left margin on first tab\n\n\nRemove the long line\n\n\nFix mobile styles\n\n\n(cherry picked from commit a92128e7fb158f4aadc31e549ff96c4645cd9d83)', 'Adds CSS Grid properties to list of unitless numbers (#9185)', 'Only attempt to clear measures if we created the measure (#9451)\nThis fixes an issue where if we decided not to create a measurement we would clear ALL measurements from the performance entry buffer due to passing undefined as the entry name.', "Quick fix for flowconfig\nWe had a merge conflict sneak in somewhere, and also want to ignore the\n'addons' directory.", "Run 'prettier' on the v15.6 branch (#9487)\n\nRun 'prettier' on the v15.6 branch\n\nThis is an easy fix and I'd like this branch to be as similar to master\n(v16.0) as possible.\n\nnpm install --save-dev prettier && yarn prettier\n\nChecking in the updated package.json and yarn.lock for the 15.6\nbranch.\nOddly, running yarn prettier updated more files. I thought the\nprevious commit had covered all prettier syntax updates. Will commit\nthe new changes in a separate commit.\n\nRan prettier\n\nMore syntax updates to get prettier checks passing on the 15.6-dev\nbranch, and eventually, on 15-stable.\n\nTweak eslint ignore comments to get linter passing\n\nSomething with running prettier moves or changes these comments in a\nway that they were no longer being applied. We tweaked them so that both\n'prettier' and 'eslint' pass.", "Update tests to not warn due to moved PropTypes and shallowRenderer (#9486)\n\nUpdate tests to not warn due to moved PropTypes and shallowRenderer\n\nWe added some warnings in v15.5 for calling React.PropTypes and\ncalling the shallow renderer from the wrong place. These warnings were\ncausing test failures, and now they are fixed.\nMost of these were for the React.PropTypes change.\n\n\ntweak from running prettier\n\n\nFinal tweaks to get tests passing\n\n\nwhat is the change?:\nUpdated 'PropTypes' and 'shallow renderer' syntax in a couple more\nplaces to get tests passing.\nwhy make this change?:\nIn order to verify any changes to the 15.6 and 15.* branches in general\nwe should have tests passing.\ntest plan:\nnpm run test\nissue:\nhttps://github.com/facebook/react/issues/9410", 'Add more details in jsx-in-depth.md (#9006)\n\n\njsx-in-depth.md add ternary statement for javascript expressions section\n\n\njsx-in-depth.md add explanation to get falsey values for props\n\n\nupdate jsx-in-depth.md\n\n\nensure links work locally, remove section about falsey prop values\n\n\nFix links\n\n', "Add link to 'Typechecking with PropTypes' under 'Advanced Guides' (#9472)\nThis should have been retained in our docs, since PropTypes are only\nmoved and not deprecated.\nPartially handles #9467, and I'll make a separate PR to\nhttps://github.com/reactjs/prop-types to add more docs to the README\nthere.\n(cherry picked from commit 39ca8aacf851f176e34b09baee4057149495e75e)", 'Updates how-to-contribute.md to use JSFiddle referenced in submit Git issue template (#9503)\n(cherry picked from commit c8a64e2637a6bb44ec0875bd2556363fd82e300d)', 'Describe fixtures dir in the codebase overview (#9516)\n\n\nDescribe fixtures dir in overview\n\n\nFix folder name\n\n\n(cherry picked from commit d12c41c7a67f92fd8f6c5f3b9cbf371975bf5830)', 'adds indirect refs to docs (#9528)\n\n\nadds indirect refs to docs\n\n\nAdd more info\n\n\nExplain clearer\n\n\nRephrase\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\n(cherry picked from commit 14fa8a5452d11a55b9b01922423b4f5e8cedba45)', 'Add reference to the Hyperscript libraries (#9517)\n\nAdd reference to the Hyperscript libraries\n\nI feel these should be mentioned as they provide terser syntax than using R.createElement directly, even with a shorthand.\n\nRephrase\n\n(cherry picked from commit a8c223ab4186d7ac1d8fff2c72da4bbc6d58a82d)', '[Docs] Fix confusing description for the  usage (#9502)\n\n\nFix confusing description for the  usage\n\n\nUpdate jsx-in-depth.md\n\n\nUpdate reference-react-dom-server.md\n\n\nUpdate reference-react-dom.md\n\n\nUpdate reference-react.md\n\n\n(cherry picked from commit 3d60d4cc7d00f194c2e585ec0bea92b19c5605d1)', '[site] Load libraries from unpkg (#9499)\n\n\n[site] Load libraries from unpkg\n\n\nRevert Gemfile changes\n\n\n(cherry picked from commit cf24d871777ca97bd62068075cbb39582067ac4d)', 'fixed error formatting in live editor (#9497)\n(cherry picked from commit 7ccfb0733716be809e189b53682289d6cfb34a20)', 'React.createElement syntax (#9459)\n\nReact.createElement syntax\n\nAdded React.createElement syntax.\nI think this is required for this tutorial.\n\nReword\n\n(cherry picked from commit 9824d52a4c9555aea2da4390e7fb8f61cc93c62f)', "Add guide on integrating with non-react code (#9316)\n\n\nAdd guide on integrating with non-react code\n\n\nCapitalize guide title\n\n\nMake links to other docs relative\n\n\nRephrase 'What it does do'\n\n\nRemove experimental syntax\n\n\nCapitalize Backbone\n\n\nRemove empty lifecycle method in generic jQuery example\n\n\nUse shouldComponentUpdate() not componentWillUpdate()\n\n\nPrefer single quotes\n\n\nAdd cleanup to generic jQuery example\n\n\nCapitalize React\n\n\nGeneralize the section on Backbone Views\n\n\nGeneralize the section on Backbone Models, a little\n\n\nAdd introduction\n\n\nAdjust wording\n\n\nSimplify ref callbacks\n\n\nFix typo in generic jQuery example\n\n\nFix typos in Backbone models in React components\n\n\nFix more typos in Backbone models in React components\n\n\nAdd generic section on integrating with other view libraries\n\n\nStress the benefits of an unchanging React element\n\n\nSmall changes to introduction\n\n\nAdd missing semicolon\n\n\nRevise generic jQuery wrapper section\n\n\nMoved the section on using empty elements to prevent conflicts above the\ncode example and added brief introduction to that example.\n\n\nAdd usage example for Chosen wrapper\n\n\nPrevent Chosen wrapper from updating\n\n\nNote that sharing the DOM with plugins is not recommended\n\n\nMention how React is used at Facebook\n\n\nMention React event system in template rendering section\n\n\nRemove destructuring from function parameters\n\n\nDo not name React components Component\n\n\nElaborate on unmountComponentAtNode()\n\n\nMention preference for unidirectional data flow\n\n\nRename backboneModelAdapter\n\n\nReplace rest syntax\n\n\nRespond to updated model in connectToBackboneModel\n\n\nRewrite connectToBackboneModel example\n\n\nRework connectToBackboneModel example\n\n\nMisc changes\n\n\nMisc changes\n\n\nChange wording\n\n\nTweak some parts\n\n\n(cherry picked from commit 1816d06d6ba778435ef39bc7988f3fb2e0569e80)", "Don't build gh-pages branch on CircleCI (#9442)", 'pre format only compile time errors (#9538)\n\n\npre format only compile time errors\n\n\nStyle tweak\n\n\n(cherry picked from commit 70c01963d9a5c8d6789559334bbf558aee976632)', 'docs better indicate that state updaters shallowly merge with state (#9554)\nthis was a surprise to me because the docs seemed to indicate that when\nusing an updater, the result needed to be a new state object. I was\nnot alone\ni think in discovering this as a result of the previous tweet in the\nthread.\n(cherry picked from commit f737d63302cea95bf852b0eb747a127f6a139e54)', '[Tutorial] Make it easier to follow the instructions (#9454)\n\n\ntutorial: adds note about onClick\n\n\ntutorial: show full square component\n\n\nmerge\n\n\nfixes line number\n\n\ntutorial: misc changes\n\n\nfixes Board render initial code sample\n\n\n[tutorial] adds codepen links and misc small fixes\n\n\nremoves useless arrow functions, #9531\n\n\n{this.renderSquare} new lines\n\n\nbe more explicit about history state\n\n\nfixes highlight\n\n\nfollowing along locally\n\n\nchanges todo to this.props.value\n\n\nremoves calculateWinner from initial codepens and includes it in tutorial\n\n\nremoves note about calculateWinner at end of file\n\n\nadds debug-view and debug-view-final\n\n\nremoves debug view, updates codepen instructions\n\n\nadds another codepen\n\n\ntutorial.md\n\n\ntutorial.md\n\n\ntutorial.md\n\n\ntutorial.md\n\n\nPut . into links for consistency with docs\n\n\nMake the very first change easier to follow\n\n\nA few more changes\n\n\n(cherry picked from commit e9d6f3f10e825222182ffc38c003ac1e3a6f1598)', "[Docs] Show the name 'React' first in the homepage's  (#9582)\n(cherry picked from commit 109d1c95e3e3c777a2990ee8ca23f56bbe886440)", 'Add more info about building for production (#9592)\n\n\nAdd more info about building for production\n\n\nAdd more info to the docs\n\n\n(cherry picked from commit 185db64c76fdd11e0ceb7f0848811ebe9080f883)', 'Add DEV mode note to installation doc (#8784) (#9157)\n\n\nAdd DEV mode note to installation doc (#8784)\n\n\nAddress feedback from Dan on wording\n\n\n(cherry picked from commit f86256ece01721f70b32f10d3d066f453187b82e)', 'Use a more specific link', 'Fix a typo', 'Fix mobile layout', 'Bump docs version', 'Use setProperty when setting style properties (#9302)\n\nUse setProperty when setting style properties\n\nsetProperty is faster in all/most modern browsers. It also lets us support CSS variables.\n\n\nOnly use setProperty when setting CSS variables\n\n\nAdd test to ensure setting CSS variables do not warn\n\n\nMake this PR pretty again\n\n\nRun fiber test script\n\n', "Remove loose check on non-number controlled inputs. Fix trailing dot issue. (#9584)\n\nRemove loose check when assigning non-number inputs\n\nThis commit removes a check I added when working on number input\nissues where we perform a loose check on an input's value before we\nassign it. This prevented controlled text inputs from disallowing\nnumeric text entry.\nI also added a DOM fixture text case.\nRelated issues:\nhttps://github.com/facebook/react/issues/9561#issuecomment-298394312\n\nUse strict equality as a guard before assigning input.value\n\nThis commit adds back the guard around assigning the value property to\nan input, however it does it using a strict equals. This prevents\nvalidated inputs, like emails and urls from losing the cursor\nposition.\nIt also adds associated test fixtures.\n\nAdd copy command after build for interup with surge.sh\n", 'Tweak Tutorial based on feedback', 'Fix sequencing in the Tutorial (#9615)\n\n\nFix sequencing in the Tutorial\n\n\nUpdate tutorial.md\n\n\nUpdate tutorial.md\n\n\n(cherry picked from commit 138ff5e46bc631287b340ca1be5ac805f586711a)', 'Fix horizontal scrolling in docs (#9613)\n(cherry picked from commit 6facb85f853365125b10e9f0843d013184f88d2e)', 'Remove tests which use dependency that is missing in 15.6\nwhat is the change?:\nRemoved some tests which were added in https://github.com/facebook/react/commit/e29871e6bed28676815aaf9259d33a99520a10d8\nwhy make this change?:\nThese tests use inputValueTracking, which was only added on the master branch and has not yet been added to the 15. branch.\nThere is a PR out to add this and related bug fixes to the 15. branch, but there are some unresolved issues there. We plan to follow up on this after releasing 15.6.\nFor now, we are removing these to unblock releasing 15.6.\ntest plan:\nnpm run test\nissue:\nhttps://github.com/facebook/react/issues/9410', 'Move ReactDOMFactories into separate package (#8356)\n\nUpdate examples to no longer use React.DOM\nAdd package and documentation entries for react-addons-dom-factories\nUpdate dom-factories readme\nSet up proxy to intercept React.DOM usage\nUpdate ReactDOM children tests to use createElement\nAdd more specific warning assertion for React DOM factories\nDo not use expectDev in ReactDOMFactories tests\n', 'Minor tweak to adjust ReactDOM-test for #8356\nwhat is the change?:\nChanged a test to look for the warning we added in https://github.com/facebook/react/pull/8356/files\nwhy make this change?:\nTo update our tests for new behavior.\ntest plan:\nnpm run test\nissue:\nhttps://github.com/facebook/react/issues/9398', 'Add browserify transform (#9642)\n\n\nAdd loose-envify browserify transform\n\n\nAdd transform to react-addons-create-fragment\n\n', 'Add browserify transform (#9642)\n\n\nAdd loose-envify browserify transform\n\n\nAdd transform to react-addons-create-fragment\n\n', 'create-react-class@15.5.3', 'react-addons-create-fragment@15.5.4', 'Fix typo on tutorial.md. (#9644)\nThe absence of the word this will cause CodePen\nto scream at you. This fix should avoid that.\n(cherry picked from commit 7c1e971e7fb4f9329f42c8f8f9f3fbb6803cb0a5)', 'Provide non-standard stack with invalid type warnings (#9679)\n\n\nProvide non-standard stack with invalid type warnings\n\n\nInclude parent stack but mark owner chain as pertinent\n\n\nJust parent stack is enough for my needs\n\n\nBecause to avoid noise it is enough to collapse too close frames in the UI.\n\n\nfunctionName => name\n\n\nHide behind a feature flag\n\n', "New blog post: What's New in Create React App (#9719)", "Backport input fix (#8575)\n\n\nOnly fire input value change events when the value changes (#5746)\n\n\nAllow simulated native events to propagate\n\n\nfixes #7211 fixes #6822 fixes #6614\nwe should make sure it doesn't break #3926 any worse (or works with #8438)", 'Run prettier', "Cherrypick commit to downgrade deprecations to warnings (#9753)\n\n\nDowngrade deprecation warnings from errors to warnings (#9650)\n\n\nDowngrade deprecation warnings from errors to warnings\n\n\nwhat is the change?:\nSwapping out warning module for a fork that uses console.warn.\nIt looks like we were using the warning module for deprecation notices, but there is also a 'deprecated' module designed specifically for deprecation notices.\nHowever, we could not find any place that it was currently used.\nSince React's build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\nWe might consider a follow-up diff that does some clean up here;\n - remove 'deprecated' module if it's unused, OR\n - use 'deprecated' module for all our current deprecation warnings\nwhy make this change?:\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\n- They potentially cause CI failures\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\nFor more context - https://github.com/facebook/react/issues/9395\ntest plan:\nnpm run test\nand unit tests for the new modules\nand manual testing (WIP)\nissue:\nhttps://github.com/facebook/react/issues/9395\n\nAdd 'lowPriorityWarning' to ReactExternals\n\nwhat is the change?:\nWe won't bundle 'lowPriorityWarning' with the rest of React when building for Facebook.\nNOTE: A parallel commit will introduce an internal implementation of 'lowPriorityWarning' in Facebook's codebase, to compensate. Will post a comment with the diff number once that is up.\nwhy make this change?:\nSo that the sync between github and Facebook can go more smoothly!\ntest plan:\nWe will see when I run the sync! But this is a reasonable first step imo.\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nTweaks to get tests passing after cherry-picking PR#9650\n\nwhat is the change?:\n- adds 'lowPriorityWarning' for deprecation of '__spread' and 'createMixin'\n- tweaks test to check for 'warn' and not 'error'\nwhy make this change?:\nBoth these issues were introduced by merge conflict resolution when cherry-picking this change from master onto 15.6.\ntest plan:\nyarn test\nissue:\n\nFix mis-written 'require' for 'warning' module\n\nwhat is the change?:\nFixes 'warning' to be required from 'warning'\nwhy make this change?:\nIt was causing the browserify build to crash, because we don't expect to have a path to 'warning'.\ntest plan:\nCI", 'Remove stray reference to React.PropTypes in ReactLink (#9757)\nwhat is the change?:\nIt looks like we missed updating this callsite in https://github.com/facebook/react/commit/12a96b94823d6b6de6b1ac13bd576864abd50175\nwhy make this change?:\nWe are deprecating the React.PropTypes syntax and splitting that functionality into a separate module.\n@acdlite please correct me if there is a reason we left this here.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/9755', "Improve low priority warning (#9754)\n\nAdd back caught error and other checks to 'lowPriorityWarning'\n\nwhat is the change?:\nThis change makes 'lowPriorityWarning' an exact copy of 'warning.js' from\nhttps://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/forks/warning.js\nwhere before we had skipped some checks from that module.\n\nAdds an error which we catch, in order to let people find the error and resulting stack trace when using devtools with 'pause on caught errors' checked.\nAdds check that 'format' argument is passed\n\nwhy make this change?:\n- To maintain a closer fork to 'warning.js'\n- To allow easier debugging using 'pause on caught errors'\n- To validate inputs to 'lowPriorityWarning'\ntest plan:\nyarn test", "Improve deprecation warnings by more info and links (#9768)\n\nImprove deprecation warnings by more info and links\n\nwhat is the change?:\nUpdates the warnings for -\n - React.createMixin (was never implemented!)\n - React.PropTypes\n - React.createClass\n - React.DOM.*\nWe never added the warning for React.createClass to the 15.5 line, so\na follow-up PR will add that, with a link to docs etc.\nDoes not update the older warnings for -\n - Factory.type\n - 'isMounted' and 'replaceState'\n - ReactPerf\nWe could do a second pass if we want to improve those three warnings, but for now I don't think they are as hi-pri.\nStill TODO:\n - Do an initial release of the react-addons-dom-factories package on npm, making it 1.0.\n - Improve the docs for react-addons-dom-factories adding documentation and mention the codemod\nwhy make this change?:\n - We want to make updating as easy as possible. Warning messages should increase clarity, and in the past they have caused confusion.\ntest plan:\nyarn test and running these messages past some folks who use React.\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nRephrase deprecation messages for clarity\n\nwhat is the change?:\nWe rephrased the deprecation messages to clarify that\n - these APIs are currently deprecated\n - they will be removed in React v16.0\nThe previous wording implied that they would be deprecated in v16.0.\nwhy make this change?:\nTo make the messages easier to understand.\ntest plan:\nVisual inspection", "Cherrypick warning and removal of react create class (#9771)\n\n\nreact-create-class -> create-react-class\n\n\nFix issues/bugs introduced by merge conflict resolution\n\n\nwhat is the change?:\nA couple of bugs and holes were introduced when cherry-picking https://github.com/facebook/react/pull/9232 onto the 15.6 branch. This fixes them.\nWe also needed to add some logic from https://github.com/facebook/react/pull/9399\nwhy make this change?:\nTo keep tests passing and get this change working.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/9398\n\n\nMove component base classes into a single file (#8918)\n\n\nMore fixes for issues introduced by rebasing\n\n\nwhat is the change?:\n- Remove some outdated 'require' statements that got orphaned in 'React.js'\n- Change 'warning' to 'lowPriorityWarning' for 'React.createClass'\n- Fix syntax issues in 'React-test'\n- Use 'creatReactClass' instead of ES6 class in ReactART\n- Update 'prop-type' dependency to use no higher than 15.7 because 15.8 limits the number of warnings, and this causes a test to fail.\n- Fix some mixed-up and misnamed variables in React.js\n- Rebase onto commit that updates deprecation messages\n- Update a test based on new deprecation messages\nwhy make this change?:\nThese were bugs introduced by rebasing and tests caught the regressions.\ntest plan:\nyarn test\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nReset yarn.lock\n\nwhat is the change?:\nI didn't mean to commit changes to yarn.lock except for the prop-types and create-react-class updates.\nwhy make this change?:\nTo minimize the changes we make to dependency versions.\ntest plan:\nrm -rf node_modules\nyarn install\nyarn run build\nyarn test\n\nRun yarn prettier\n", "Remove random comment in react-dom-factories README\nRemove a comment saying es6, since this is potentially unclear. We aren't\ncontrasting to an es5 example here.\nThanks to @gaearon for catching this in review of\nhttps://github.com/facebook/react/pull/9780", 'react-addons-dom-factories (#9780)\nwhat is the change?:\ngrep -r "react-addons-dom-factories" ./src and the same in ./packages\nthen %s /react-addons-dom-factories/react-dom-factories/gc\nwhy make this change?:\nReact dom factories were never part of the \'addons\' and we want to minimize the\nwhole \'addons\' thing, since we are deprecating the React.addons.* API.\ntest plan:\nyarn test\nand manually look at the README that was updated.\nissue:\nhttps://github.com/facebook/react/issues/9398', "Remove PropTypes dependency from ReactLink (#9766)\nIt doesn't seem to be used. It was probably used by internal FB consumers of ReactLink which has long been removed.", "Improve warning for React.createClass (#9781)\n\nImprove warning for React.createClass\n\nwhat is the change?:\n- Explain that this will be removed in v16.0 specifically\n- Mention the version number for the drop-in replacement module.\n- Link to docs in the blog post about how to migrate\nwhy make this change?:\nWe want to make our deprecation warnings more clear and helpful.\ntest plan:\nVisual inspection and yarn test\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nWiden range of recommended replacement module versions\n\nwhat is the change?:\nInstead of recommending specific versions of 'prop-types' and\n'create-react-class' we ask folks to use the latest available 15.* version.\nwhy make this change?:\nThe latest version of those plugins, within the 15 version, is the most likely\nto be stable. For example, we know that 'react-create-class' is broken for AMD\nbuilds at the current latest version, so once we release a fix then the\nrecommended version will change.\ntest plan:\nVisual inspection\nAlso fixed some tests.\n\nFix typos and things\n\nwhat is the change?:\n- migrade -> migrate\n- 15.* prop-types package -> v15.* prop-types package\nwhy make this change?:\nCorrectness\ntest plan:\nyarn test and visual inspection", 'Inputs should not mutate value on type conversion (#9806)\nThis is a follow-up on\nhttps://github.com/facebook/react/pull/9584#discussion_r115642293. There\nis no need to assign the value property of an input if the value\nproperty of the React component changes types, but stringifies to the\nsame value. For example:\njavascript\nDOM.render(<input value="true" />, el)\nDOM.render(<input value={true} />, el)\nIn this case, the assignment to input.value will always be\ncast to the string "true". There is no need to perform this\nassignment. Particularly when we already cast the value to a string\nlater:\njavascript\n// Cast `value` to a string to ensure the value is set correctly. While\n// browsers typically do this as necessary, jsdom doesn\'t.\nnode.value = \'\' + value;', "Prepare react-dom-factories for publishing (#9823)\n\nPrepare react-dom-factories for publishing\n\nwhat is the change?:\n- copies the React.DOM.* factory helpers into the package and wraps\n  them with an IIFE\n- set peerDependency on React to latest 15 version\nwhy make this change?:\nWe are deprecating React.DOM.* and this provides a fallback option for\nthose using it.\nWe just copied the code in order to avoid a circular dependency, which\nkeeps complexity down since we are supporting every possible build\nsystem.\ntest plan:\nTODO -\n1. Copy this into one of our fixtures using a UMD/AMD build and see if\n   it works there.\n2. Do an initial publish of the package on npm and then pull it into\n   CRA, and try it there.\n3. Try it in https://github.com/duncanbeevers/jade-react or some other\n   project that actually uses the React.DOM.* helpers, using the\n   related codemod.\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nFix lints and capitalization of 'reactDOMFactories'\n\nwhat is the change?:\nFixing nits in capitalization, quotes, and defined globals\nwhy make this change?:\nTo get CI passing, consistency, correctness\ntest plan:\nsee prev. commit\nissue:\nhttps://github.com/facebook/react/issues/9398", "Hello 15.6 Release Candidate (#9828)\n\nHello 15.6 Release Candidate\n\nwhat is the change?:\nWe update the versions of all associated React packages when bumping the\nversion of React.\nwhy make this change?:\nWe want to publish a RC to give folks time to try out the latest version\nbefore it's final.\nWhy bump the version of every other associated package?\nIt makes the dependency between them more clear.\nThere will be cases where we make a fix in React-DOM and it requires\nchanges in React core. In that case, it will be more clear to people\nwhen we update the versions of both and they remain in sync.\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398\n\nUpdate a couple more packages versions\n\nwhat is the change?:\nUpdates version for 'react-dom-factories' package and 'react-addons'\ntemplate.\nwhy make this change?:\nWe missed these in the previous commit, which was copying the approach\nfrom https://github.com/facebook/react/pull/9828/files\ntest plan:\nVisual inspection, and running the build\nissue:\nhttps://github.com/facebook/react/issues/9398", "Add 'create-react-class' to react dependencies for build (#9847)\nwhat is the change?:\nWe needed this dependency in the package.json\nwhy make this change?:\nEven though create-react-class was added as a dependency to the\npackage.json in https://github.com/facebook/react/pull/9399/files we\ndidn't completely cherry-pick this change onto 15.6 from master in https://github.com/facebook/react/commit/b48b2594fae7af3228ff6a0727cf8828b33b419e\nThis fixes that omission.\nFollowing this fix we will review PR 9399 and make sure nothing else was\nmissed.\ntest plan:\nyarn build and inspect the builds/packages/react/package.json, see\nthat create-react-class is included.\nissue:\nhttps://github.com/facebook/react/issues/9830", "Remove fiber-specific fixtures from 15.6 branch (#9902)\n\nRemove fixtures that only work with Fiber\n\nwhat is the change?:\nRemoves three directories in the 'fixtures' directory.\nwhy make this change?:\nThese fixtures were designed to work with Fiber, and were accidentally\npulled into this branch. They were causing errors when we try to build\nthe other fixtures.\ntest plan:\ncd react/fixtures && node ./build-all.js no longer throws an error\nfrom fiber-debugger/App.js - although it still throws another error\nissue:\nhttps://github.com/facebook/react/issues/9900\n\nAdd back the 'babel-standalone' fixture\n\nwhat is the change?:\nAdd this fixture back to the 15.6 branch\nwhy make this change?:\nThis fixture is not fiber specific\ntest plan:\nnode ./build-all.js inside of ./fixtures\nissue:\nhttps://github.com/facebook/react/issues/9900", "Remove fiber-specific fixtures from 15.6 branch (#9902)\n\nRemove fixtures that only work with Fiber\n\nwhat is the change?:\nRemoves three directories in the 'fixtures' directory.\nwhy make this change?:\nThese fixtures were designed to work with Fiber, and were accidentally\npulled into this branch. They were causing errors when we try to build\nthe other fixtures.\ntest plan:\ncd react/fixtures && node ./build-all.js no longer throws an error\nfrom fiber-debugger/App.js - although it still throws another error\nissue:\nhttps://github.com/facebook/react/issues/9900\n\nAdd back the 'babel-standalone' fixture\n\nwhat is the change?:\nAdd this fixture back to the 15.6 branch\nwhy make this change?:\nThis fixture is not fiber specific\ntest plan:\nnode ./build-all.js inside of ./fixtures\nissue:\nhttps://github.com/facebook/react/issues/9900", 'Edit two errors in docs (#9659)\n(cherry picked from commit d7e6ef0f88242db091e1aab0fc2200350a343c1e)', '"Timeline" => "Performance" (#9602)\nAs of Chrome 58, the Timeline tab is now called the Performance tab, this updates the "Optimizing Performance > Profiling Components with Chrome Performance" section of the docs to reflect that.\n(cherry picked from commit 5cf571839e5a01804b175e9da34315a02ffcef28)', 'Move previous events to the end (#9729)\n(cherry picked from commit 3d6d641a8cd16d658c99fe83e62de4ca89df593b)', 'Move ReactEurope 2017 from Upcoming Conferences to Past Conferences (#9726)\n(cherry picked from commit 5b7e81579dc1bc54b4bda88762e192dc6df4252b)', 'Add ReactiveConf (#9723)\n(cherry picked from commit 1f80931d32b8eecfaa3712766eb5d8e6c7c3eef1)', 'Bind handleChange Instead of Calling (#9764)\n(cherry picked from commit 1f667fd37fab433d77df291e852e1c8c712e7c1e)', 'Fix typo (#9786)\n(cherry picked from commit 43f2ea079cf18a3b5301fc4f02bcdf987e00020c)', "Update blog post which creates unhandled promise rejection (#9668)\n\nUpdate 2015-12-16-ismounted-antipattern.md\n\nIn case anybody else stumbles across this old blog post, I wanted to submit a patch to help with unhandled rejections.\n#then and #catch each return new Promise instances, so here we actually create two new promises (that aren't assigned).  If the argument promise to #makeCancelable rejects, the promise created by #then will be an unhandled rejection, which in Node 7 will be an uncaught error.\nBy using the second argument of #then to handle rejections instead, we don't need to worry about the runtime finding any unhandled rejections here.\n\n\nStyle updates\n\n\nAdd update notice\n\n\n(cherry picked from commit 546e7721ec8ea2eda36706b7b4905901b45b35bc)", "Add 'Test Utils' docs back to main navigation (#9676)\n\nAdd 'Test Utils' docs back to main navigation\n\nwhy make this change?:\nWe accidentally removed this - still supporting the use of Test Utilities, so we should have them in the docs.\ntest plan:\nManually tested the website - will insert a screenshot.\nissue:\nhttps://github.com/facebook/react/issues/9651\n\nMove test-utils docs to reference section\n\nwhat is the change?:\nMoved from 'advanced guides' to 'reference'\nwhy make this change?:\nIt makes more sense as a reference\ntest plan:\nVisual inspection (flarnie may add a screenshot)\nissue:\n\nAdd back the shallow renderer docs and remove outdated docs\n\nwhat is the change?:\n- Remove outdated 'shallow renderer' docs on 'test utils' page, and point to the updated 'shallow renderer' docs.\n- Re-add a link to the updated 'shallow renderer' docs on the main navigation.\nwhy make this change?:\nThis was already approved in https://github.com/facebook/react/pull/9331 which was then cherry-picked to https://github.com/facebook/react/pull/9359/commits and landed on master.\nI'm not sure why some of these changes didn't persist. For now just adding back the changes we need.\ntest plan:\nManually inspected website - will insert screenshots.\nissue:\n\nFurther improvements to 'shallow rendering' and 'test utils' docs\n\nThanks @gaearon for the improvements!\nwhat is the change?:\n- Remove  from end of 'shallow rendering' docs\n- 'documents' -> 'documentation'\n- Move 'shallow rendering' redirection section to top of 'test utils' docs\n- Add intro sentence about testing to 'shallow rendering' docs\nwhy make this change?:\nDocumentation helps people learn.\ntest plan:\nVisual inspection\n(cherry picked from commit 114b9c5500ba21ec9e60f814148d38276c9aaa50)", 'Add Videos link to React Europe 2017 (#9751)\n(cherry picked from commit d30bc9807e23691492165159f944b3db348d80b9)', 'Rename Github to GitHub (#9797)\n(cherry picked from commit 07d229b28e9d86d347972779c95d7f489498d3ec)', 'Rename Javascript to JavaScript (#9796)', 'Clarifying how to apply aria-* attributes (#9843)\nProvide explicit example of what "keep lowercase" means for aria-* attributes.', 'Insert blockquote on prop value explanation. (#9770)\nWhile reading the page, the "chain of thought" is broken by stating that the tempertature and onTemperatureChange don\'t have any special meaning. Making this a blockquote makes that note look more like a comment and keep the "chain of thought" intact.', 'Update webpack according to brand guidelines (#9595)\n\n\nUpdate webpack according to brand guidelines\n\n\nChange all ocurrences to webpack\n\n', 'Fix url to ng-animate (#9859)', 'Update reference-react-component.md (#9863)\nGrammatical edit to match same statement in state-and-lifecycle.html', 'Adding React Alicante 2017 to upcoming conferences (#9897)', 'Remove extra brace (#9910)', 'Move Past Confs, add React Conf Brazil 2017 (#9697)\n\n\nmove past confs, add React Conf Brazil 2017\n\n\nmove react europe to past confs\n\n\nresolve react europe conflicts\n\n\nCreate conferences.md\n\n', 'Fix doc styling and formatting issues', "Fix missing react in create-react-class (#9761)\n\nFix missing react in create-react-class\n\nrefs #9689\n\nTest 'create-react-class' with fixtures\n\nNOTE: Never going to merge this commit, but I may cherry-pick it onto\nbranches in order to test fixes for issue #9765\nIn this case I will clean it up afterwards.\nwhat is the change?:\nRequire and use the UMD bundles of 'create-react-class' in three\nfixtures to test the three supported uses;\n - test Global JS with globals.html\n - test AMD with requirejs.html\n - test CommonJS with webpack-alias\nwhy make this change?:\nTo test https://github.com/facebook/react/pull/9761 and other PRs fixing https://github.com/facebook/react/issues/9765\ntest plan:\nManual testing;\n - cd into the directory in fixtures\n - run the build step if needed\n - open the file\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nRemove fiber specific fixures\n\nThis already was merged (https://github.com/facebook/react/pull/9902)\nbut I wanted to do manual testing and needed the change locally.\nwhat is the change?:\nRemove 'fiber-debugger', 'fiber-triangle', and 'packaging' from\n'fixtures' directory.\nwhy make this change?:\nThese were not meant to be included on this branch and cause the\n'build-all.js' script to throw.\ntest plan:\ncd ./fixtures && node ./build-all.js\n\nModify the 'create-react-class' package to make 'globals' work again\n\nwhat is the change?:\nPass the global 'react' into the global conditional in the UMD build of\n'create-react-class'.\nwhy make this change?:\nHere is the deal:\n - @mondwan's original fix does fix the AMD build, but breaks the\n   'global JS' build.\n - My modification makes it work with both AMD and the 'global JS'\n   build.\n - @mondwan's fix seems to have fixed the CommonJS build too, and I\n   maintained that fix with my modification.\n```\n                Does the 'create-react-class' UMD build work?\n             Before       After         After\n           + @mondwan's + @mondwan's +  @flarnie's\n\nBuild System | fix        | fix        |  modification\n+---------------------------------------------------------+\n               |            |            |\n  Global JS    | :D Success | X Fail     | :D Success\n               |            |            |\n+---------------------------------------------------------+\n               |            |            |\n  AMD          | X Fail     | :D Success | :D Success\n               |            |            |\n+---------------------------------------------------------+\n               |            |            |\n  Common JS    | X Fail     | :D Success | :D Success\n               |            |            |\n               +            +            +\n```\ntest plan:\nThe testing for this was really tricky and involves a fragile multi-step\nprocess:\n1) Make sure the fixtures are working on your branch\n2) Modify some of the fixtures to use 'create-react-class', like in this\n   commit (you can just cherry-pick it if you are on a branch based on\n   the 15.* branches) -\n   https://github.com/flarnie/react/commit/51dcbd5ef164b86bc509ae070a6273758a60e13c\n3) Make sure React is set up, and then\n   cd fixures && node ./build-all.js\n4) The following fixtures could be used to test the various builds:\n - test GlobalJS with globals.html\n - test AMD with requirejs.html\n - test CommonJS with webpack-alias/index.html\nissue:\nhttps://github.com/facebook/react/issues/9689\nand\nhttps://github.com/facebook/react/issues/9765\n\nUndo modifications that add 'create-react-class' to fixtures\n\nwhat is the change?:\nIn the previous commit we modified the fixtures to test\n'create-react-class' manually, and this puts them all back.\nwhy make this change?:\nThis will be useful for cherry-picking onto branches where we used the\nprevious commit for testing purposes\ntest plan:\ncd fixtures && node ./build-all.js and open the fixtures\n\nremove stray console.log\n", "Fix missing react in create-react-class (#9761)\n\nFix missing react in create-react-class\n\nrefs #9689\n\nModify the 'create-react-class' package to make 'globals' work again\n\nwhat is the change?:\nPass the global 'react' into the global conditional in the UMD build of\n'create-react-class'.\nwhy make this change?:\nHere is the deal:\n - @mondwan's original fix does fix the AMD build, but breaks the\n   'global JS' build.\n - My modification makes it work with both AMD and the 'global JS'\n   build.\n - @mondwan's fix seems to have fixed the CommonJS build too, and I\n   maintained that fix with my modification.\n```\n                Does the 'create-react-class' UMD build work?\n             Before       After         After\n           + @mondwan's + @mondwan's +  @flarnie's\n\nBuild System | fix        | fix        |  modification\n+---------------------------------------------------------+\n               |            |            |\n  Global JS    | :D Success | X Fail     | :D Success\n               |            |            |\n+---------------------------------------------------------+\n               |            |            |\n  AMD          | X Fail     | :D Success | :D Success\n               |            |            |\n+---------------------------------------------------------+\n               |            |            |\n  Common JS    | X Fail     | :D Success | :D Success\n               |            |            |\n               +            +            +\n```\ntest plan:\nThe testing for this was really tricky and involves a fragile multi-step\nprocess:\n1) Make sure the fixtures are working on your branch\n2) Modify some of the fixtures to use 'create-react-class', like in this\n   commit (you can just cherry-pick it if you are on a branch based on\n   the 15.* branches) -\n   https://github.com/flarnie/react/commit/51dcbd5ef164b86bc509ae070a6273758a60e13c\n3) Make sure React is set up, and then\n   cd fixures && node ./build-all.js\n4) The following fixtures could be used to test the various builds:\n - test GlobalJS with globals.html\n - test AMD with requirejs.html\n - test CommonJS with webpack-alias/index.html\nissue:\nhttps://github.com/facebook/react/issues/9689\nand\nhttps://github.com/facebook/react/issues/9765", 'Fix missing react dependency in some addon umd builds (#9919)\n\nTest \'create-react-class\' with fixtures\n\nNOTE: Never going to merge this commit, but I may cherry-pick it onto\nbranches in order to test fixes for issue #9765\nwhat is the change?:\nRequire and use the UMD bundles of \'create-react-class\' in three\nfixtures to test the three supported uses;\n - test Global JS with globals.html\n - test AMD with requirejs.html\n - test CommonJS with webpack-alias\nwhy make this change?:\nTo test https://github.com/facebook/react/pull/9761 and other PRs fixing https://github.com/facebook/react/issues/9765\ntest plan:\nManual testing;\n - cd into the directory in fixtures\n - run the build step if needed\n - open the file\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nRename fixtures testing create-react-class\n\nwhat is the change?:\nRenamed some fixtures.\nwhy make this change?:\nThis is part of setting up manual tests of the add-ons we are fixing.\ntest plan:\ncd fixtures && node ./build-all.js and manually open the renamed\nfixtures.\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nPrettify the unminified UMD build of react-linked-input\n\nwhat is the change?:\nprettier addons/react-linked-input/react-linked-input.js | pbcopy and\nreplaced the contents of the file.\nwhy make this change?:\nI am manually tweaking this file and want it to be more readable.\ntest plan:\nabout to set up manual testing of this with fixtures. I expect that\nright now only the use of it as a global will work, and subsequent\ncommits will fix the AMD and CommonJS use cases.\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nTest state of react-linked-input and create-fragment before fix\n\nwhat is the change?:\nSetting up the fixtures to enable manual testing of the\nreact-linked-input and create-fragment UMD builds.\nThis was a painstaking and frustrating process and we need something\nbetter before making any more fixes to addons. Here is roughly what I\ndid;\n- add \'console.log\' statements to the add-on to confirm that you\'ve loaded the right build case\n- copy the add-on into \'build/packages\' so that the \'webpack-alias\' can find it.\n- make copies of each of the following three fixtures for each add-on you want to test, renaming them to specify what you are testing:\n    - globals.js\n    - requirejs.js\n    - webpack-alias/*\n- modify those fixtures to use the add-on you intend to text\nwhy make this change?:\nWe need to verify the current state of the bug before fixing it, to\nconfirm that the change actually is fixing the bug.\ntest plan:\nopen fixtures/globals-with-create-react-fragment.html\nopen fixtures/globals-with-react-linked-input.html\nopen fixtures/requirejswith-create-react-fragment.html\nopen fixtures/requirejswith-react-linked-input.html\ncd fixtures/webpack-aliaswith-create-react-fragment/ && yarn build && open index.html\ncd fixtures/webpack-aliaswith-react-linked-input/ && yarn build && open index.html\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nFix missing React in react-linked-input and create-fragment\n\nwhat is the change?:\nManually tweaking the UMD builds for both add-ons to include a\ndependency on React.\nwhy make this change?:\nThey were broken before for AMD and CommonJS.\nFor reasons I have not debugged, the CommonJS builds are still broken,\nbut the AMD is now fixed and globals still work:\n```\n    do \'react-linked-input\' and\n    \'create-react-fragment\' work?\n            before      after\n          + my        + my        +\n\nen^ironment | fix       | fix       |\n+----------------------------------------\n              |           |           |\n  Global JS   |  :) yes   |  :) yes   |\n+----------------------------------------\n              |           |           |\n  AMD         |  X no     |  :) yes   |\n+----------------------------------------\n              |           |           |\n  CommonJS    |  X no     |  X no     |\n+-------------+-----------+-----------+--\n```\ntest plan:\nIn the previous commit we set up fixtures to manually test these.\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nMore adjustments to enable testing with fixtures\n\nNot worth explaining - just committing as a \'save point\' while I fiddle\nwith the fixtures.\n\nRemove all cruft from manually testing addons in fixtures\n\nwhat is the change?:\nWe forked three of the fixtures into two variations to test two of the\nreact addons. We also added console.log statements to the addons to\nverify that we were loading the right build.\nThis commit cleans it up by\n- deleting forked fixtures\n- re-adding the original fixtures\n- removing console.log statements\nwhy make this change?:\nTo get this branch ready for review.\ntest plan:\ncd fixtures && node ./build-all.js and then check the updated fixtures\nmanually\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nDouble to single quotes in \'react-linked-input\'\n\nwhat is the change?:\n:%s /"/\'/gc\nI left double quotes wrapping cases where we have single quotes in the\nstring.\nwhy make this change?:\nI ran the code for the unminified \'react-linked-input\' through\n\'prettier\' so it would be easier for me to manually fix the UMD wrapper.\nAnd \'prettier\' changed many single quotes into double quotes. @spicyj\npointed out this will be treated differently by the google closure\ncompiler, and may have semantic differences.\ntest plan:\nIt\'s not worth testing imo.\nissue:\nhttps://github.com/facebook/react/issues/9765\n\nremove random newline\n', '[#9712] fix  value \'.98\' should not be equal to \'0.98\'. (#9714) (#9929)\n\n\n[#9712] fix  value ".98" should not be equal to "0.98".\n\n\nfix eslint error\n\n\nfix label error\n\n', 'Fix the proptypes deprecation warning url on the "Don\'t Call PropTypes Warning" doc page (#9419)\n\n\nUse the same prop-types link on the warning docs page as the main proptypes doc page\n\n\nLink to repo instead\n\n', 'Docs: Clarification of setState() behavior (#9329)\n\nClarification of setState() behavior\n\nsetState() is a frequent source of confusion for people new to React, and I believe part of that is due to minimization of the impact of the asynchronous behavior of setState() in the documentation. This revision is an attempt to clarify that behavior. For motivation and justification, see setState Gate.\n\n\nUpdate reference-react-component.md\n\n\nSignature fix\n\n\nUpdate to address @acdlite concerns\n\n\nAdd more details\n\n', 'Update proptypes doc (#9391)\n\n\nUpdate proptypes doc\n\n\nRemoved note\n\n', "Add tabs to installation page (#9275, #9277) (#9401)\n\nAdd tabs to installation page (#9275, #9277)\n\nThis adds tabs for create-react-app and existing apps to the installation section of the docs. The tab implementation is a simplified version of React Native's installation page.\nFixes #9275.\n\n\nUse classList instead of className\n\n\nUse same implementation as in RN\n\n", 'Refractor docs to indicate that state set to props in constructor will not recieve the updated props (#9404)', 'Switch Installation to a tab when hash is present (#9422)', 'Updated the Good First Bug section in readme (#9429)\n\n\nUpdated the Good First Bug section in readme\n\n\nInconsistent use of quotes. Prefered single quotes instead of double quotes\n\n\nUpdated Good first bug link in how_to_contribute doc.\n\n\nUndo JSX attribute quote change\n\n\ndon\'t capitalize "beginner friendly issue"\n\n\n(cherry picked from commit 36c935ca8f9df7e19b5051997f4eb381402113ac)', '[Documentation] Impreove the react-component section of doc (#9349)\n\nImpreove react-component of doc\n\n#9304\n\n\nupdate description\n\n\nadd missing space\n\n\n(cherry picked from commit 359f5d276ffd4da96e3a00d7245da9fad004ba0d)', "Unique headings for linking purposes (#9259)\nPreviously two headings were 'Javascript Expressions' - now 'Javascript\nExpressions as Props' and 'Javascript Expressions as Children'\n(cherry picked from commit 363f6cb2e592f2a283eac279fb393666dcb92b65)", "Update jsx-in-depth.md (#9178)\n\nUpdate jsx-in-depth.md\n\nLine 9 isn't changed\n\n\nMove selection down\n\n\nFix\n\n\n(cherry picked from commit ccb38a96cf480d99a18f8764ccd12c59289bb542)", 'Sort out conferences by date (#9172)\n(cherry picked from commit 37f9e35ad93e1cb1042a7bc3d8b78290dfcecec6)', 'Lift state up - Updating the documentation to mention that onClick is a synthetic event handler (#9427)\n\n\nLift state up - Updating the documentation to mention that onClick is a synthetic event handler\n\n\nReview comments - Rephrase to handle synthetic events and event handler patterns\n\n\nTweak\n\n\n(cherry picked from commit 53a3939fb015504d006cc4f2d3ace67133164f09)', 'Fixed grammar (#9432)\n\n\nUpdate codebase-overview.md\n\n\nSome more fixes\n\n\n(cherry picked from commit d724115144e1bfd61c0d0a7aaf0bb02358652b83)', '[Tutorial] ES6, installation, and button closing tag (#9441)\n\n\nadds notes to tutorial on es6 and installation\n\n\nfixes tutorial mention of opening button tag\n\n\nMore writing\n\n\nUpdate\n\n', 'Minor tweaks to tutorial', 'Fix duplicate sentence', 'Minor tutorial nits', 'Add missing tutorial sidebar links', 'Tweak tutorial structure', "FIX: Move CRA build info under it's tab page (#9452)\n\n\nFIX: Move CRA build info under it's tab page\n\n\nAdd some links\n\n", 'Reorganize the "following along" instructions (#9453)\n\n\nReorganize the "following along" instructions\n\n\nMinor tweaks\n\n\n(cherry picked from commit 1ce562ead352dc139aa622bdce0f40df7070df5e)', '[Docs] Add accessibility to tabs in installation documentation (#9431)\n\n\nAdd accessibility to tabs in installation documentation\n\n\nChange color and fix styling\n\n\n(cherry picked from commit 9526174e3074b39796c8c8fb31983372e7b30649)', '[Docs: Installation] Fix tabs responsive layout - Resubmit (#9458)\n\n\n[Docs: Installation] Fix tabs responsive layout\n\n\nMove tabs a pixel down\n\n\nRemove left margin on first tab\n\n\nRemove the long line\n\n\nFix mobile styles\n\n\n(cherry picked from commit a92128e7fb158f4aadc31e549ff96c4645cd9d83)', 'Add more details in jsx-in-depth.md (#9006)\n\n\njsx-in-depth.md add ternary statement for javascript expressions section\n\n\njsx-in-depth.md add explanation to get falsey values for props\n\n\nupdate jsx-in-depth.md\n\n\nensure links work locally, remove section about falsey prop values\n\n\nFix links\n\n', "Add link to 'Typechecking with PropTypes' under 'Advanced Guides' (#9472)\nThis should have been retained in our docs, since PropTypes are only\nmoved and not deprecated.\nPartially handles #9467, and I'll make a separate PR to\nhttps://github.com/reactjs/prop-types to add more docs to the README\nthere.\n(cherry picked from commit 39ca8aacf851f176e34b09baee4057149495e75e)", 'Updates how-to-contribute.md to use JSFiddle referenced in submit Git issue template (#9503)\n(cherry picked from commit c8a64e2637a6bb44ec0875bd2556363fd82e300d)', 'Describe fixtures dir in the codebase overview (#9516)\n\n\nDescribe fixtures dir in overview\n\n\nFix folder name\n\n\n(cherry picked from commit d12c41c7a67f92fd8f6c5f3b9cbf371975bf5830)', 'adds indirect refs to docs (#9528)\n\n\nadds indirect refs to docs\n\n\nAdd more info\n\n\nExplain clearer\n\n\nRephrase\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\nUpdate refs-and-the-dom.md\n\n\n(cherry picked from commit 14fa8a5452d11a55b9b01922423b4f5e8cedba45)', 'Add reference to the Hyperscript libraries (#9517)\n\nAdd reference to the Hyperscript libraries\n\nI feel these should be mentioned as they provide terser syntax than using R.createElement directly, even with a shorthand.\n\nRephrase\n\n(cherry picked from commit a8c223ab4186d7ac1d8fff2c72da4bbc6d58a82d)', '[Docs] Fix confusing description for the  usage (#9502)\n\n\nFix confusing description for the  usage\n\n\nUpdate jsx-in-depth.md\n\n\nUpdate reference-react-dom-server.md\n\n\nUpdate reference-react-dom.md\n\n\nUpdate reference-react.md\n\n\n(cherry picked from commit 3d60d4cc7d00f194c2e585ec0bea92b19c5605d1)', '[site] Load libraries from unpkg (#9499)\n\n\n[site] Load libraries from unpkg\n\n\nRevert Gemfile changes\n\n\n(cherry picked from commit cf24d871777ca97bd62068075cbb39582067ac4d)', 'fixed error formatting in live editor (#9497)\n(cherry picked from commit 7ccfb0733716be809e189b53682289d6cfb34a20)', 'React.createElement syntax (#9459)\n\nReact.createElement syntax\n\nAdded React.createElement syntax.\nI think this is required for this tutorial.\n\nReword\n\n(cherry picked from commit 9824d52a4c9555aea2da4390e7fb8f61cc93c62f)', "Add guide on integrating with non-react code (#9316)\n\n\nAdd guide on integrating with non-react code\n\n\nCapitalize guide title\n\n\nMake links to other docs relative\n\n\nRephrase 'What it does do'\n\n\nRemove experimental syntax\n\n\nCapitalize Backbone\n\n\nRemove empty lifecycle method in generic jQuery example\n\n\nUse shouldComponentUpdate() not componentWillUpdate()\n\n\nPrefer single quotes\n\n\nAdd cleanup to generic jQuery example\n\n\nCapitalize React\n\n\nGeneralize the section on Backbone Views\n\n\nGeneralize the section on Backbone Models, a little\n\n\nAdd introduction\n\n\nAdjust wording\n\n\nSimplify ref callbacks\n\n\nFix typo in generic jQuery example\n\n\nFix typos in Backbone models in React components\n\n\nFix more typos in Backbone models in React components\n\n\nAdd generic section on integrating with other view libraries\n\n\nStress the benefits of an unchanging React element\n\n\nSmall changes to introduction\n\n\nAdd missing semicolon\n\n\nRevise generic jQuery wrapper section\n\n\nMoved the section on using empty elements to prevent conflicts above the\ncode example and added brief introduction to that example.\n\n\nAdd usage example for Chosen wrapper\n\n\nPrevent Chosen wrapper from updating\n\n\nNote that sharing the DOM with plugins is not recommended\n\n\nMention how React is used at Facebook\n\n\nMention React event system in template rendering section\n\n\nRemove destructuring from function parameters\n\n\nDo not name React components Component\n\n\nElaborate on unmountComponentAtNode()\n\n\nMention preference for unidirectional data flow\n\n\nRename backboneModelAdapter\n\n\nReplace rest syntax\n\n\nRespond to updated model in connectToBackboneModel\n\n\nRewrite connectToBackboneModel example\n\n\nRework connectToBackboneModel example\n\n\nMisc changes\n\n\nMisc changes\n\n\nChange wording\n\n\nTweak some parts\n\n\n(cherry picked from commit 1816d06d6ba778435ef39bc7988f3fb2e0569e80)", "Don't build gh-pages branch on CircleCI (#9442)", 'pre format only compile time errors (#9538)\n\n\npre format only compile time errors\n\n\nStyle tweak\n\n\n(cherry picked from commit 70c01963d9a5c8d6789559334bbf558aee976632)', 'docs better indicate that state updaters shallowly merge with state (#9554)\nthis was a surprise to me because the docs seemed to indicate that when\nusing an updater, the result needed to be a new state object. I was\nnot alone\ni think in discovering this as a result of the previous tweet in the\nthread.\n(cherry picked from commit f737d63302cea95bf852b0eb747a127f6a139e54)', '[Tutorial] Make it easier to follow the instructions (#9454)\n\n\ntutorial: adds note about onClick\n\n\ntutorial: show full square component\n\n\nmerge\n\n\nfixes line number\n\n\ntutorial: misc changes\n\n\nfixes Board render initial code sample\n\n\n[tutorial] adds codepen links and misc small fixes\n\n\nremoves useless arrow functions, #9531\n\n\n{this.renderSquare} new lines\n\n\nbe more explicit about history state\n\n\nfixes highlight\n\n\nfollowing along locally\n\n\nchanges todo to this.props.value\n\n\nremoves calculateWinner from initial codepens and includes it in tutorial\n\n\nremoves note about calculateWinner at end of file\n\n\nadds debug-view and debug-view-final\n\n\nremoves debug view, updates codepen instructions\n\n\nadds another codepen\n\n\ntutorial.md\n\n\ntutorial.md\n\n\ntutorial.md\n\n\ntutorial.md\n\n\nPut . into links for consistency with docs\n\n\nMake the very first change easier to follow\n\n\nA few more changes\n\n\n(cherry picked from commit e9d6f3f10e825222182ffc38c003ac1e3a6f1598)', "[Docs] Show the name 'React' first in the homepage's  (#9582)\n(cherry picked from commit 109d1c95e3e3c777a2990ee8ca23f56bbe886440)", 'Add more info about building for production (#9592)\n\n\nAdd more info about building for production\n\n\nAdd more info to the docs\n\n\n(cherry picked from commit 185db64c76fdd11e0ceb7f0848811ebe9080f883)', 'Add DEV mode note to installation doc (#8784) (#9157)\n\n\nAdd DEV mode note to installation doc (#8784)\n\n\nAddress feedback from Dan on wording\n\n\n(cherry picked from commit f86256ece01721f70b32f10d3d066f453187b82e)', 'Use a more specific link', 'Fix a typo', 'Fix mobile layout', 'Bump docs version', 'Tweak Tutorial based on feedback', 'Fix sequencing in the Tutorial (#9615)\n\n\nFix sequencing in the Tutorial\n\n\nUpdate tutorial.md\n\n\nUpdate tutorial.md\n\n\n(cherry picked from commit 138ff5e46bc631287b340ca1be5ac805f586711a)', 'Fix horizontal scrolling in docs (#9613)\n(cherry picked from commit 6facb85f853365125b10e9f0843d013184f88d2e)', 'create-react-class@15.5.3', 'react-addons-create-fragment@15.5.4', 'Fix typo on tutorial.md. (#9644)\nThe absence of the word this will cause CodePen\nto scream at you. This fix should avoid that.\n(cherry picked from commit 7c1e971e7fb4f9329f42c8f8f9f3fbb6803cb0a5)', "New blog post: What's New in Create React App (#9719)", 'Edit two errors in docs (#9659)\n(cherry picked from commit d7e6ef0f88242db091e1aab0fc2200350a343c1e)', '"Timeline" => "Performance" (#9602)\nAs of Chrome 58, the Timeline tab is now called the Performance tab, this updates the "Optimizing Performance > Profiling Components with Chrome Performance" section of the docs to reflect that.\n(cherry picked from commit 5cf571839e5a01804b175e9da34315a02ffcef28)', 'Move previous events to the end (#9729)\n(cherry picked from commit 3d6d641a8cd16d658c99fe83e62de4ca89df593b)', 'Move ReactEurope 2017 from Upcoming Conferences to Past Conferences (#9726)\n(cherry picked from commit 5b7e81579dc1bc54b4bda88762e192dc6df4252b)', 'Add ReactiveConf (#9723)\n(cherry picked from commit 1f80931d32b8eecfaa3712766eb5d8e6c7c3eef1)', 'Bind handleChange Instead of Calling (#9764)\n(cherry picked from commit 1f667fd37fab433d77df291e852e1c8c712e7c1e)', 'Fix typo (#9786)\n(cherry picked from commit 43f2ea079cf18a3b5301fc4f02bcdf987e00020c)', "Update blog post which creates unhandled promise rejection (#9668)\n\nUpdate 2015-12-16-ismounted-antipattern.md\n\nIn case anybody else stumbles across this old blog post, I wanted to submit a patch to help with unhandled rejections.\n#then and #catch each return new Promise instances, so here we actually create two new promises (that aren't assigned).  If the argument promise to #makeCancelable rejects, the promise created by #then will be an unhandled rejection, which in Node 7 will be an uncaught error.\nBy using the second argument of #then to handle rejections instead, we don't need to worry about the runtime finding any unhandled rejections here.\n\n\nStyle updates\n\n\nAdd update notice\n\n\n(cherry picked from commit 546e7721ec8ea2eda36706b7b4905901b45b35bc)", "Add 'Test Utils' docs back to main navigation (#9676)\n\nAdd 'Test Utils' docs back to main navigation\n\nwhy make this change?:\nWe accidentally removed this - still supporting the use of Test Utilities, so we should have them in the docs.\ntest plan:\nManually tested the website - will insert a screenshot.\nissue:\nhttps://github.com/facebook/react/issues/9651\n\nMove test-utils docs to reference section\n\nwhat is the change?:\nMoved from 'advanced guides' to 'reference'\nwhy make this change?:\nIt makes more sense as a reference\ntest plan:\nVisual inspection (flarnie may add a screenshot)\nissue:\n\nAdd back the shallow renderer docs and remove outdated docs\n\nwhat is the change?:\n- Remove outdated 'shallow renderer' docs on 'test utils' page, and point to the updated 'shallow renderer' docs.\n- Re-add a link to the updated 'shallow renderer' docs on the main navigation.\nwhy make this change?:\nThis was already approved in https://github.com/facebook/react/pull/9331 which was then cherry-picked to https://github.com/facebook/react/pull/9359/commits and landed on master.\nI'm not sure why some of these changes didn't persist. For now just adding back the changes we need.\ntest plan:\nManually inspected website - will insert screenshots.\nissue:\n\nFurther improvements to 'shallow rendering' and 'test utils' docs\n\nThanks @gaearon for the improvements!\nwhat is the change?:\n- Remove  from end of 'shallow rendering' docs\n- 'documents' -> 'documentation'\n- Move 'shallow rendering' redirection section to top of 'test utils' docs\n- Add intro sentence about testing to 'shallow rendering' docs\nwhy make this change?:\nDocumentation helps people learn.\ntest plan:\nVisual inspection\n(cherry picked from commit 114b9c5500ba21ec9e60f814148d38276c9aaa50)", 'Add Videos link to React Europe 2017 (#9751)\n(cherry picked from commit d30bc9807e23691492165159f944b3db348d80b9)', 'Rename Github to GitHub (#9797)\n(cherry picked from commit 07d229b28e9d86d347972779c95d7f489498d3ec)', 'Rename Javascript to JavaScript (#9796)', 'Clarifying how to apply aria-* attributes (#9843)\nProvide explicit example of what "keep lowercase" means for aria-* attributes.', 'Insert blockquote on prop value explanation. (#9770)\nWhile reading the page, the "chain of thought" is broken by stating that the tempertature and onTemperatureChange don\'t have any special meaning. Making this a blockquote makes that note look more like a comment and keep the "chain of thought" intact.', 'Update webpack according to brand guidelines (#9595)\n\n\nUpdate webpack according to brand guidelines\n\n\nChange all ocurrences to webpack\n\n', 'Fix url to ng-animate (#9859)', 'Update reference-react-component.md (#9863)\nGrammatical edit to match same statement in state-and-lifecycle.html', 'Adding React Alicante 2017 to upcoming conferences (#9897)', 'Remove extra brace (#9910)', 'Move Past Confs, add React Conf Brazil 2017 (#9697)\n\n\nmove past confs, add React Conf Brazil 2017\n\n\nmove react europe to past confs\n\n\nresolve react europe conflicts\n\n\nCreate conferences.md\n\n', 'Fix doc styling and formatting issues', "Update minified version of 'create-react-class' (#9939)\nwhat is the change?:\nWe ran the latest version of\naddons/create-react-class/create-react-class.js through https://jscompress.com/\nwhy make this change?:\nThe last corner case I'm thinking of is this:\n - The createClass deprecation warning never went out in 15.5, and is going out now for real in 15.6.\n - The createClass UMD build is broken for AMD/CommonJS, but we fixed it. But not for the minified version of the file.\n - If someone see the warning, and tries to use the UMD build, then it's going to be broken in some cases.\n - Since we're skipping mentioning the add-ons in the blog post, and this might be a new warning for them, this could be a nasty surprise for folks.\nWe can do a quick 15.5.4 release of that package, we would at least fix that case.\nThis diverges from what @gaearon is doing to fix the add-ons. I would\nprobably try to use cherry-pick and interactive rebase to move this\ncommit to right after\nhttps://github.com/facebook/react/commit/ce3ecfb1dfaacb311fb4b37eede56c2667014cfc\nand then do the patch release of create-react-class from that spot in\nhistory.\nAlternately I can merge this into the forked branch\n15.6-before-addon-reconstruction and then do the patch release from\nthere.\ntest plan:\nI didn't test this. Ideally minifying this file won't break anything,\nand it's high cost to test add-ons until we have some repeatable tests\nin place.\nissue:\nhttps://github.com/facebook/react/issues/9765", 'bump minor version of create-react-class', "Merge branch '15-dev' into 15-stable\nI would prefer to rebase but was not able to.\n1) There were a couple of conflicts;\n    addons/create-react-class/package.json\n    src/isomorphic/classic/class/tests/create-react-class-integration-test.js\n2) Force pushing the result of the rebase was a no-go because\n   15-stable is a protected branch.\nSo merging is ok too.\nFor more details about all the commits in this merge, see the 15-dev\nbranch commit history from cef396d09250db33 to d095bc8391ac6c77", 'Update Yarn lockfile', "Update changelog\nwhat is the change?:\ngit checkout master -- CHANGELOG.md\nThen made the 15.6 release no longer wrapped in 'details' tag.\nwhy make this change?:\nWe are releasing 15.6 :D\ntest plan:\nVisual inspection\nissue:\nhttps://github.com/facebook/react/issues/9398", 'Ran prettier', '15.6.0']v15.5.4 15.5.4 (April 11, 2017)
React Addons

Critical Bugfix: Update the version of prop-types to fix critical bug.  (@gaearon in 545c87f)
Fix react-addons-create-fragment package to include loose-envify transform for Browserify users. (@mridgway in #9642)

React Test Renderer

Fix compatibility with Enzyme by exposing batchedUpdates on shallow renderer. (@gaearon in #9382)
 ['Updated addons package versions', 'const -> var', 'Bump prop-types version', "Merge branch '15-stable' of github.com:facebook/react into 15-stable", "Merge branch '15-stable' of github.com:facebook/react into 15-stable", 'Expose batchedUpdates on shallow renderer (#9382)', 'Fix the react-addons-create-fragment package to properly export the createReactFragment() function (#9383)', "Merge branch '15.5-dev' into 15-stable", "Fixes for 15.5 addons (#9385)\n\n\nAdd missing object-assign dep to create-react-class\n\n\nRemove unnecessary inlines and irrelevant tests in createFragment\n\n\nUninline shallowEqual in shallowCompare\n\n\nUninline invariant in update\n\n\nUninline invariant/warning and remove unreachable code in react-linked-input\n\n\nEnvify and collapse createClass UMD\n\n\nEnvify and collapse createFragment\n\n\nReactLink doesn't really need PropTypes dep\n\n\nIt is unnecessary because it is not explicitly exposed and was never public API.\n\n\nRebuild, envify and collapse LinkedStateMixin UMD\n\n\nCollapse PureRenderMixin UMD\n\n\nRebuild shallowCompare\n\n\nEnvify and collapse update UMD\n\n\nRemove unused prop-types dep from linked-input\n\n\nFix change handling in LinkedInput\n\n\nCompile LinkedInput to ES5\n\n\nRebuild, collapse, and fix LinkedInput UMD\n\n\nAdd full README for react-addons-create-fragment\n\n\nMention compat version of transition-group so we can delete those docs\n\n\nREADME for react-addons-linked-state-mixin\n\n\nMore docs\n\n\nFix devDeps for createClass\n\n\ndocs\n\n", 'Bump addons I have permissions for', 'Bumped react-linked-input version from 15.5.0 to 15.5.1', "Merge branch '15-stable' of https://github.com/facebook/react into 15-stable", 'create-react-class version 15.5.2', 'Update prop-types version', 'Update prop-types version', "Merge branch '15.5-dev' into 15-stable", 'Delete prop-types folder as it has moved', "Merge branch '15.5-dev' into 15-stable", '15.5.4']v15.5.0 15.5.0 (April 7, 2017)
Note: this release has a critical issue and was deprecated. Please update to 15.5.4 or higher.
React

Added a deprecation warning for React.createClass. Points users to create-react-class instead. (@acdlite in d9a4fa4)
Added a deprecation warning for React.PropTypes. Points users to prop-types instead. (@acdlite in 043845c)
Fixed an issue when using ReactDOM together with ReactDOMServer. (@wacii in #9005)
Fixed issue with Closure Compiler. (@anmonteiro in #8895)
Another fix for Closure Compiler. (@Shastel in #8882)
Added component stack info to invalid element type warning. (@n3tr in #8495)

React DOM

Fixed Chrome bug when backspacing in number inputs. (@nhunzaker in #7359)
Added react-dom/test-utils, which exports the React Test Utils. (@bvaughn)

React Test Renderer

Fixed bug where componentWillUnmount was not called for children. (@gre in #8512)
Added react-test-renderer/shallow, which exports the shallow renderer. (@bvaughn)

React Addons

Last release for addons; they will no longer be actively maintained.
Removed peerDependencies so that addons continue to work indefinitely. (@acdlite and @bvaughn in 8a06cd7 and 67a8db3)
Updated to remove references to React.createClass and React.PropTypes (@acdlite in 12a96b9)
react-addons-test-utils is deprecated. Use react-dom/test-utils and react-test-renderer/shallow instead. (@bvaughn)
 ['Update React version in docs', 'docs(hoc): fix typo Rambda → Ramda (#8712)\n(cherry picked from commit 00846fd3a6333cf2e1941b53824c3bd8175bcff9)', 'docs: add missing period in shouldComponentUpdate doc (#8720)\n(cherry picked from commit fa4f79f9fc94a26c9ce18478e24a8bfd8cb39267)', 'Added React London conference, March 28th (#8722)\nThanks :-)\n(cherry picked from commit c78e403d7b4728adb3242425097f2574124169c3)', "Remove one extraneous backtick from line 116 of 'codebase-overview.md' (#8724). (#8726)\n(cherry picked from commit b2cc91e83a88f0caf7d8574335bb8b77c16f8e27)", "Swap components (#8735)\nIt's better to delare component before using.\n(cherry picked from commit 65bf19029de40d3248b25f38e6af8982fbce454f)", "[Docs] Replace 'mix in' in PureComponent notes (#8730)\n\n\n[Docs] Replace 'mix in' in PureComponent notes\n\n\nStyle nit\n\n\n(cherry picked from commit c3ce14a373a5f76f1d28e06d976baecc4dade8c2)", "Fix single vs plural (#8738)\nMaybe it's not very important, just misprint fix\n(cherry picked from commit 280bcfa9f596a6747bdb99c5e416e924bc400644)", "Added more info about refs in the documentation (#8707)\n\nUpdate refs-and-the-dom.md\n\nI want to propose some changes to the Refs and the DOM documentation page.\n- Make it clear that string refs are legacy. It seems that this information got lost during the transition to new docs and only some part stayed the same, which was confusing when first reading the docs.\n- Clarify and explain that during render, if the ref callback is provided, it\xa0will get called twice, first with null and then with the rendered DOM element. Discussed in https://github.com/facebook/react/issues/4533 and first proposed docs change in PR #8333.\nI've also planned on adding an example for passing the refs up the component chain based on something I've needed to solve myself (e.g. you want to connect two dynamic components by line in React, so you need to both use refs and propagate them up the chain), and while it would be great to read up on this in the docs, it may be too specific for this section; I'd be happy to hear any recommendations.\n\n\nAdds more specific information about the callback\n\n\nMoved the ref callback description to the Caveats section\n\n\nFixed suggested nits\n\n\nReplace 'each render pass' with 'updates'\n\n\nTweak the wording\n\n\n(cherry picked from commit 4a7e06bab7d53f919b96f1aa5209afa4c63bfebb)", 'Update handling-events.md (#8762)\n\n\nUpdate handling-events.md\n\n\nUpdate handling-events.md\n\n\n(cherry picked from commit 2cb7637607344cb1e26ca15fdbffdde896cceb53)', 'move blog post [Profiling Components with Chrome Timeline] into docs article (#8680)\n\n\nmove blog post into docs article\n\n\nmove to second section and changed description\n\n\nMinor tweak\n\n\n(cherry picked from commit 3ec1da800d48a8b2fe18e21876850075fab515be)', 'Update higher-order-components.md (#8780)\n(cherry picked from commit 20c4aac9ec7ebbbac593dcdde2f5e97ebfb0614d)', "Remove error ref to the 'render' function (#8781)\nWhat is the render function of a functional component?\n(cherry picked from commit ebd83e809e876cbeb1d7aca16fd317c0bbc7b636)", 'fix HOC doc (#8802)\n(cherry picked from commit 66540fdf1641d9a408dcbc6de665a0ea4db39dfb)', 'add docs for building with Rollup (#8799)\n\n\nadd docs for building with Rollup\n\n\nTiny unrelated fix\n\n\n(cherry picked from commit e69ff955f4960d4192107437f000e6bc08ffb804)', 'Add Flow reminder to PR template (#8805)\n\n\nAdded flow to PR template\n\n\nAdded record-tests step to PR template and contribution docs\n\n\nUpdated order of PR checks\n\n\n(cherry picked from commit bfd5b1878e6eeebd8899bd221cb62ddc046c875d)', 'use an easier word (#8809)\n\nuse an easier word\n\nThe word mandatory is relatively difficult for people with ESL (English as a second language), so I propose an alternative word.\nThis would be much easier to understand.\n\nuse simpler word\n\n(cherry picked from commit 6308238498b6b5a95510d6346436fc7b0febd0d1)', 'I -> we (#8817)\n(cherry picked from commit c8a41672ede96c629a04a67da750f01493e62f6c)', 'Updating Thinking in React doc to replace refs with event handlers (#8815)\n\n\nUpdating Thinking in React doc to replace refs\n\n\nUpdating doc copy to reflect changes to example\n\n\n(cherry picked from commit 5d96162b57824502497e49edf01348c60532758f)', 'Add "Handling Multiple Inputs" to Forms doc (#8552)\n\n\nadded "Handling Multiple Inputs"\n\n\nrenamed and added a codepen\n\n\nsimplified the example\n\n\n(cherry picked from commit 06399b8ce3fa587531e491749ba502c193b09062)', 'Corrected a typo. (#8837)\nshoud -> should\n(cherry picked from commit 30c7c4fbe6f35af93ddec0c7ae661d592821b296)', 'Fix a typo (#8580)\n(cherry picked from commit 5494b267d9c945251c6b04cc1a835e1cfcdc0314)', "Match eslint's line length settings (#8845)\n(cherry picked from commit 09b3ec5d3cf39e7fd1359a475fdd2d0e853e27d5)", "Reminder: strip quotes from attributes with JS code (#8806)\n\nReminder: strip quotes from attributes with JS code\n\nWeb developers who are used to standards-compliant HTML and XML will, out of habit, put quotes around all attributes because the standards require them. Other templating systems like ASP.NET also require (or at least allow) quotes around attributes that contain code. This behavior will get users into trouble in JSX because a quoted attribute is always treated as a string literal, even if it contains curly-braced javascript code.  Let's add to the docs to help newbies evade this problem.\n\nTweak wording\n\n(cherry picked from commit fc302494b79c5bd6876d8f750007a322edce47f3)", "Add CircleCI support to 15-stable (#8778)\n\n\ndevDependencies: add core-js and es6-symbol polyfill for tests\n\n\nUpdate Flow and fix issues (#8006)\n\n\nAdd npm v4.0.0 support (#8082)\n\n\nAdd support for node v7 (#8135)\n\n\nUpgrade ESLint and dependencies, fix new lint errors, switch Travis to Yarn (#8309)\n\n\nUpdate ESLint to 3.10.2\n\n\nAlso pull in fbjs for extending properly, per @zpao. This also disables consistent-return, which has about 80 failing cases in React currently. If we'd like to turn this back on, we should do it separately and fix all the call sites properly (rather than just adding 'return undefined;' everywhere, which adds no value.\nFixes to all existing lint errors plus an update for yarn.lock to follow.\n\n\nUpdate yarn.lock after the eslint update.\n\n\nFix all new eslint failures\n\n\nUnfortunately I had to add three eslint-disable-next-line instances. All have explanations inline.\n\n\nSwitch Travis to use yarn instead of npm\n\n\nUpdate all Jest packages to 17.x (#8327)\n\n\nUpdate all Jest packages to 17.x, cache babel-jest transforms\n\n\nRemove the caching\n\n\nLooking at the other builds it doesn't seem to actually be that necessary.  The bottleneck is executors, not build time.\n\n\nRemove unnecessary package, fix fiber test runner\n\n\nRegenerate yarn lockfile\n\n\nUpdate Flow to 0.37.0 (#8608)\n\n\nNothing really changes.\n\n\nUpdate to Jest 18 (#8621)\n\n\nmockImpl -> mockImplementation\n\n\nD4329549\n\n\nFixed linting errors\n\n\ncircle.yml and circleci scripts\n\n\nUpdate Flow and fix issues (#8006)\n\n\nFixed flow errors\n\n\nUpdated shrinkwrap\n\n\nRemoved unnecessary change\n\n\nAdded jest --runInBand flag\n\n\nRemoved ReactDOMFiber changes\n\n", "Add CircleCI support to 15-stable (#8778)\n\n\ndevDependencies: add core-js and es6-symbol polyfill for tests\n\n\nUpdate Flow and fix issues (#8006)\n\n\nAdd npm v4.0.0 support (#8082)\n\n\nAdd support for node v7 (#8135)\n\n\nUpgrade ESLint and dependencies, fix new lint errors, switch Travis to Yarn (#8309)\n\n\nUpdate ESLint to 3.10.2\n\n\nAlso pull in fbjs for extending properly, per @zpao. This also disables consistent-return, which has about 80 failing cases in React currently. If we'd like to turn this back on, we should do it separately and fix all the call sites properly (rather than just adding 'return undefined;' everywhere, which adds no value.\nFixes to all existing lint errors plus an update for yarn.lock to follow.\n\n\nUpdate yarn.lock after the eslint update.\n\n\nFix all new eslint failures\n\n\nUnfortunately I had to add three eslint-disable-next-line instances. All have explanations inline.\n\n\nSwitch Travis to use yarn instead of npm\n\n\nUpdate all Jest packages to 17.x (#8327)\n\n\nUpdate all Jest packages to 17.x, cache babel-jest transforms\n\n\nRemove the caching\n\n\nLooking at the other builds it doesn't seem to actually be that necessary.  The bottleneck is executors, not build time.\n\n\nRemove unnecessary package, fix fiber test runner\n\n\nRegenerate yarn lockfile\n\n\nUpdate Flow to 0.37.0 (#8608)\n\n\nNothing really changes.\n\n\nUpdate to Jest 18 (#8621)\n\n\nmockImpl -> mockImplementation\n\n\nD4329549\n\n\nFixed linting errors\n\n\ncircle.yml and circleci scripts\n\n\nUpdate Flow and fix issues (#8006)\n\n\nFixed flow errors\n\n\nUpdated shrinkwrap\n\n\nRemoved unnecessary change\n\n\nAdded jest --runInBand flag\n\n\nRemoved ReactDOMFiber changes\n\n", 'Update deps and replace shrinkwrap with lockfile\nThis brings us closer to what we have on master.', "Merge branch '15-dev' into 15-stable\nReplaces npm shrinkwrap with Yarn lockfile", 'Clarify use of ES6 idiom in Forms doc', 'Update conferences.md (#8841)\n\n\nUpdate conferences.md\n\n\nUpdate conferences.md\n\n\npath fixed\n\nChanged capitalization to match the website and Twitter\n\n(cherry picked from commit b2b6d9daf7b78adf114ab365e8e05d88b101966b)', 'Add a link to "State Updates are Merged" in the forms doc (#8851)\n\n\nAdded a link to "State Updates are Merged"\n\n\nbetter inline links\n\n\nmoved the explanation down\n\n\nMinor unrelated tweaks\n\n\n(cherry picked from commit eb89bc4c301c5970b1ec88d3fdfa2202d4dca4f8)', 'webpack 2 is now stable (#8859)\nRemove notice about different webpack versions\nUpdate webpack URLs\n(cherry picked from commit c2f94385a14165102c3a5cfaab361ac3fdb9598a)', "Add benchmarking tutorial (#8698)\n\nAdd benchmarking tutorial\n\nI've written what I hope is the simplest introduction to benchmarking React components. It's meant to be straightforward and easy to follow for beginners. If you agree that it would be helpful, I'd like to add it to the docs.\nWould also welcome any and all feedback.\n\nJust put links together\n\n(cherry picked from commit 4c6fec902fcaaebd70716e429fb37914d48f735f)", 'installation.md: Add missing "as" (#8871)\n(cherry picked from commit 39472f1c3ec82892030273fae0da3dcc7a68ac9e)', 'Update context example for react-router v4 beta (#8889)\n\n\nUpdate context example for react-router@4.0.0-beta.1\n\n\nStyle nits\n\n\n(cherry picked from commit 564fa646262300683e2c0212fe12bcb0ae5e7daf)', 'Fix incorrect markup for ie10 (#8886)\n(cherry picked from commit 466bb4ffb90206968e20dddc054fc285a4ae32fb)', "Added undefined example (#8899)\nInto section Booleans, Null, and Undefined Are Ignored I've added example with undefined.\n(cherry picked from commit 8bc5a87d048d37e800b49e8f5dc95fb5c5d52155)", 'Lifting State Up more legible (#8691)\n(cherry picked from commit b8f0522cc6cb77d192f9adc42438886b6ebc5e7b)', 'Update tutorial.md (#8792)\n\n\nUpdate tutorial.md\n\n\nFix quoting to be consistent\n\n\n(cherry picked from commit 3f5482ee203472e65d4cb9a67ffbfb4d6be713bc)', 'Link to CodePen editor rather than final result (#8849)\nPeople want to see the final JS/CSS/HTML, and the final result is already displayed by CodePen.\n(cherry picked from commit 05f5bf6eb639ac81de1376b90cb452bd90879253)', 'Update tutorial.md (#8896)\n\nUpdate tutorial.md\n\nThe status  used in Board can be deleted as well from render.\n\nLittle tweaks\n\n(cherry picked from commit dc04ee87aecbdb269b72ad407467d1908c241910)', 'Fix indentation in tutorial (#8914)\n(cherry picked from commit 9e3a31b2c6f96dbbb8dea7f2ceb82ba49cb05b93)', 'Explain arbitrariness of ref name in callback (#8913)\n\nExplain arbitrariness of ref name in callback\n\nThe sample code was confusing because it\'s not clear that "textInput" in this.textInput is an arbitrary name for the ref.\n\nTweak wording\n\n(cherry picked from commit 79be3543ddf9ea7a12a40411e93daecada108645)', 'Update conferences.md (#8915)\n\n\nUpdate conferences.md\n\n\nMove confs around\n\n\n(cherry picked from commit 55a18bca64ed7c82733fc2b9a4801158acd1e8d2)', '[docs] Add note about refs on stateless components (#8916)\n\n\nAdd note about refs on stateless components\n\n\nMove info about refs in the stateless components to the main section\n\n\nSimplification of the part about refs and functional components\n\n\nTweaks\n\n\nMove sections around\n\n\nOops\n\n\nRearrange more sections\n\n\n(cherry picked from commit d42c285aa2506902e6a1efe8264653e4a65555bc)', 'Merge pull request #8927 from mitenka/patch-5\nUpdate higher-order-components.md\n(cherry picked from commit b49611e643fd6baa5214b9ebaae347f185c4ad5b)', 'update react perf docs (#8060) and (#6174) (#8236)\n\n\nupdate react perf docs issue 8060 and 6174\n\n\nGrammar\n\n\nSmall stuff\n(cherry picked from commit 994a0c8b0c5a2104d57bf99edb9c6667bb58a281)', 'Only fix a small wrong key in example (#8976)\nOnly fix a small wrong key in example\n(cherry picked from commit de673bca8d61255bafef5432e61691014279a097)', 'Fix a typo in design principles doc (#8985)\nunambigious → unambiguous\n(cherry picked from commit c60f852cdbb9f115264537d39e2aedea6c1c9636)', 'Fixing grammatical error ... (#8987)\n... in the Create React App section.\n(cherry picked from commit 7958c1d77d603dce54355a3005e3afdb9bc35ace)', 'Update Thinking in React embed to match the link (#8996)\n(cherry picked from commit 2464cd2d536bf3dc9116c9ba16bb6c40388bbffc)', 'Revert "update react perf docs (#8060) and (#6174)" (#8997)', "Improved for a better understanding (#8970)\n\nImproved for a better understanding\n\nthat code shouldn't name this parameter onchange. It is so confusing for a starter of ReactJs like me. It looks like that the onChange is an common event from props.\n\nUpdate the lifting state up paragraph\n\nI tried to write something to explain to starter programmers in react, how we lift the state up calling a method defined by the ancestor and called by the children that will affect the children element.\n\nRewrite Lifting State Up\n\n(cherry picked from commit fc362bf095f3256d440a0d237f336f10c8fd7cdc)", 'Remove extra article from documentation (#9028)\n(cherry picked from commit d28264e6896bdb7ba999cd586085be6c249a7957)', 'Doc consistency tweaks', 'Add more details to the doc', 'Fixed typo: "Calcutor" to "Calculator" (#9047)\n(cherry picked from commit 5cc2a4fe3ef325a3bf6212a66ede9cce90a54fe1)', 'Update tutorial.md (#9051)\n(cherry picked from commit d724aed404738b395f587d5bea3012ff8f047ede)', 'Updated Chain React (#9067)\nChanged conference date from "Summer 2017" to given date on website\n(cherry picked from commit fe46def5e2e07c09cee6d06e30e66fb59b8f1108)', 'Square renders button, not div (#9084)\n(cherry picked from commit 8eb7068364ce9e51450dc175e3c5d8da37accd8c)', 'Replace the header_links plugin with client-side generated anchors. (#4165)\n\nReplace the header_links plugin with client-side generated anchors.\n\nFixes facebook/react#4124\n\nMove anchor-link code into a separate script\n\nAlso adds a couple comments, for context.\n(cherry picked from commit 7a878d27e3b30eface2a751e88a0ff46d41e1fec)', 'Update Lifting State Up not to mix up DOM value with component state (#9032)\n\nUpdate Lifting State Up not to mix up DOM value with component state\n\nA few weeks ago when teaching my friend, she got stuck on\nthis.state.value vs. event.target.value. As the documentation\ntalked a lot about "values", and the term value could mean three\ndifferent things (values in general, the "value" prop / DOM value of\nthe  component and the value in state/props), it was not weird\nthat she got a bit confused.\n\nRename Lifting State Up onChange props to onTemperatureChange\n\nThis is in-line with how the temperature is provided as a prop named temperature\n\n\nFix one value prop not being renamed to temperature\n\n\nUpdate codepen examples in Lifting state up documentation\n\n\nUpdate devtools state change to reflect docs change\n\n\n(cherry picked from commit a190cfce296aba67b31479566c82631633e1bc94)', 'Fix spacing in documentation (#9070)\nReplace non-breaking space by space.\n(cherry picked from commit 179240ca3013878059cc1d8b43e31e929a7bc428)', 'Added Brunch build tool to the docs (#9074)\n\n\nAdded Brunch build tool to the docs\n\n\nImproved grammar\n\n\nproduct build -> production build\n\n\n(cherry picked from commit 0bedd0697aaf748902ac8c9d57d9ecb8b93c91f9)', 'Reorder sections in alphabetical order (#9143)\n\n\nReorder sections in alphabetical order\n\n\nReorder here too\n\n\n(cherry picked from commit 7fa311bcd95dbc8e1e0655c1aafc62ed61ddf022)', 'Remove PR check from GH Pages build hook for stable branch (#9144)', 'Remove ref usage in main markdown example (#9160)\nfrom elsewhere in the docs:\n\nAvoid using refs for anything that can be done declaratively.\n(cherry picked from commit bf5abdf14f55b7f961097b48f78ee4ca7514fed4)\n', 'Move getNextDebugID() to React package.\nThe module, and its internal state, was duplicated in several packages,\nleading to duplicate ids when multiple renderers were used.', 'Added react-addons-create-fragment package', 'Fix version number and remove peerDependencies', 'Create react-create-class package\nExtract createClass into a separate package so we can deprecate it in\nversion 16.', 'Replace createClass with external react-create-class dependency\nWarns when using React.createClass for the first time.\nUsages of createClass in tests have been converted to plain JavaScript\nclasses. Tests that rely on replaceState or isMounted use\nupdater.enqueueReplaceState and updater.isMounted.', 'Merge pull request #9187 from acdlite/prettierci\nFailing to run prettier should block CI\n(cherry picked from commit 9549ebfae52332a3f62ce4a13e7b050cb984c77e)', 'Updated React Native EU (#9170)\n\nUpdated Chain React\n\nChanged conference date from "Summer 2017" to given date on website\n\nUpdated React Native EU\n\nUpdated date and place with information from website\n(cherry picked from commit 2b59afb98458f0b7da65f1f98348943a9b3cb727)', 'Add React Rally to conferences list (#9179)\n(cherry picked from commit 7253e6544b4409841c1527c744f2f08c9ab867ba)', 'Use single quotes, remove extra whitespace (#9215)\n(cherry picked from commit 0ceb5115ace29ffffac4e37f8f59c75fef23deb0)', 'Conferences (#9234)\n\n\nstandard format for React Rally\n\n\nmove React Conf 2017 to past conferences\n\n\n(cherry picked from commit fbc6977fbc16f7ed9ac3adf4b7990ccbc3794048)', 'Updated Router import for example (#9233)\nUpdated import in order to be a correct working example as in accordance with the docs\n(cherry picked from commit 38d8f3ee6b4493fb1cce78e2a4e54fcc87724703)', 'Updated shallowCompare add-on package to not reference internals', "Merge branch '15.5-dev' of github.com:facebook/react into 15.5-dev", 'Fix imports in CJS entry', 'react-addons-pure-render-mixin@15.5.0-alpha.0', 'Bumped addon versions to alpha0', 'Added react-addons-linked-state-mixin with UMD builds and tests', 'Added react-addons-update addon', 'Added react-linked-input package', 'Future-proof react-create-class\n\nBackport change to enqueueReplaceState. Use new API instead of\nenqueueCallback, which is gone in 16.\nImplement isMounted using lifecycles, so we have the option of\nremoving this later.\n', "Merge branch '15.5-dev' of https://github.com/facebook/react into 15.5-dev", 'Renamed LICENSE.txt => LICENSE', 'Added react-addons-css-transition-group and react-addons-transition-group', "Merge branch '15.5-dev' of github.com:facebook/react into 15.5-dev", 'Bump fbjs to 0.8.9 (#8910)', 'Change the order between function declaration and object assignment (#8895)\nThis fixes #8894', 'Delete @nosideeffect annotation (#8882)', 'Fix test renderer unmount (#8512)\n\n[react-test-renderer] unmount the inner instances\n\nFixes https://github.com/facebook/react/issues/8459\n\n\nadd a test for https://github.com/facebook/react/issues/8459\n\n\nadd new test in tests-passing.txt\n\n', 'Add component stack to invalid element type warning (#8495)\n\n\nShow Source Error Addemden if __source available\n\n\nAdd Parent Stack on invalid element type\n\n\nrefactor to use normalizeCodeLocInfo\n\n\nRemove ( ) from addendum\n\n', 'Fix Chrome number input backspace and invalid input issue (#7359)\n\n\nOnly re-assign defaultValue if it is different\n\n\nDo not set value if it is the same\n\n\nProperly cover defaultValue\n\n\nUse coercion to be smart about value assignment\n\n\nAdd explanation of loose type checks in value assignment.\n\n\nAdd test coverage for setAttribute update.\n\n\nOnly apply loose value check to text inputs\n\n\nFix case where empty switches to zero\n\n\nHandle zero case in controlled input\n\n\nCorrect mistake with default value assignment after rebase\n\n\nDo not assign bad input to number input\n\n\nOnly trigger number input value attribute updates on blur\n\n\nRemove reference to LinkedValueUtils\n\n\nRecord new fiber tests\n\n\nAdd tests for blurred number input behavior\n\n\nReplace onBlur wrapper with rule in ChangeEventPlugin\n\n\nSift down to only number inputs\n\n\nRe-record fiber tests\n\n\nAdd test case for updating attribute on uncontrolled inputs. Make related correction\n\n\nHandle uncontrolled inputs, integrate fiber\n\n\nReorder boolean to mitigate DOM checks\n\n\nOnly assign value if it is different\n\n\nAdd number input browser test fixtures\n\n\nDuring the course of the number input fix, we uncovered many edge\ncases. This commit adds browser test fixtures for each of those instances.\n\nAddress edge case preventing number precision lower than 1 place\n\n0.0 coerces to 0, however they are not the same value when doing\nstring comparision. This prevented controlled number inputs from\ninputing the characters 0.00.\nAlso adds test cases.\n\nAccommodate lack of IE9 number input support\n\nIE9 does not support number inputs. Number inputs in IE9 fallback to\ntraditional text inputs. This means that accessing input.value will\nreport the raw text, rather than parsing a numeric value.\nThis commit makes the ReactDOMInput wrapper check to see if the type\nprop has been configured to "number". In those cases, it will\nperform a comparison based upon parseFloat instead of the raw input\nvalue.\n\nRemove footnotes about IE exponent issues\n\nWith the recent IE9 fix, IE properly inserts e when it produces an\ninvalid number.\n\nAddress exception in IE9/10 ChangeEventPlugin blur event\n\nOn blur, inputs have their values assigned. This is so that number\ninputs do not conduct unexpected behavior in\nChrome/Safari. Unfortunately, there are cases where the target\ninstance might be undefined in IE9/10, raising an exception.\n\nMigrate over ReactDOMInput.js number input fixes to Fiber\n\nAlso re-record tests\n\n\nUpdate number fixtures to use latest components\n\n\nAdd number input test case for dashes and negative numbers\n\n\nReplace trailing dash test case with replace with dash\n\n\nAlso run prettier', "Removed 'peerDependencies' block from package.json for add-ons we think will continue to work for the forseeable future", 'Make sure all package.json have valid "files" array, including UMD build', 'Added devDeps for react-addons-create-fragment to make testing easier', 'Updated package.json for react-addons-create-fragment', 'Prepping for 15.5.0 release of react-addons-css-transition-group', 'Prep for 15.5.0', 'Prepped for 15.5 release; added Yarn lockfile. Added missing devDep to package.json', 'Added yarn.lock file; updated package.json for 15.5.0', 'Updated package.json version', 'Added missing dev-deps for react-addons-update and prepped for release 15.5.0', 'Added dev deps for testing', 'Changed dev-deps to 15.4.2 by default rather than 16.0.0', 'Renamed react-create-class to create-react-class and fixed up tests to run in addons folder', 'Replaced react-create-class references with create-react-class', 'Converted react-addons-create-fragment to ES5 and bumped to 15.5.1', 'Test utils deprecations and updates:\n1. Moved react-addons-test-utils to react-dom/test-utils and added deprecation message.\n2. Moved shallow renderer (previous accessible via TestUtils.createRenderer) to react-test-renderer/shallow and added deprecation message.\n3. Updated READMEs for react-addons-test-utils and react-test-renderer', 'Extract ReactPropTypes to separate module', 'Updated react-addons-test-utils package.json for RC', "Uncommenting this warning even though tests haven't been updated yet\nI'll fix the tests later.", 'Update yarn lockfile', '15.5.0-rc.1', 'Added missing files:test-utils.js entry to react-dom package.json', 'TransitionGroup should use prop-types package', 'Moved shallow renderer injections into render() method to avoid conflict with react-dom', 'Replaced console.error() in test utils with warning()', 'Replaced another console.error() call with fbjs warning()', 'Fix references to React.createClass and React.PropTypes', 'Added prop-types dep for react-linked-input and re-built', 'Fix references to React.createClass and React.PropTypes', 'Update yarn.lock in addons', 'Replaced ReactTestReconcileTransaction with ReactReconcileTransaction in shallowRenderer', "Merge branch '15.5-dev' of github.com:facebook/react into 15.5-dev", 'Fix ReactWithAddons umd build', 'Updated packages for 15.5.0-rc.2', 'Update changelog for 15.5.0', 'Update changelog', 'Add .createRenderer method to ReactShallowRenderer', 'Update build paths in docs (#9340)', 'Fix grammar typo in Design Principles docs (#9324)\nfeatures → feature\n\nThere is nothing "bad" about using state or lifecycle hooks in components. Like any powerful features, they should be used in moderation, but we have no intention to remove them.\n\nI can’t explain the exact grammatical principle this violates, but it sounds wrong to my native English ears that “feature” is plural here. Another way to check if the grammar sounds right is to change the order of the clauses: ”They should be used in moderation, like any powerful feature“ sounds right, whereas “They should be used in moderation, like any powerful features” does not.', 'Make it clear that textarea also supports defaultValue. (#9318)', 'Remove examples/ folder (#9323)', 'Fix typo (#7953)', 'Fixed typo on implementation notes page (#9258)\nAdded paren to "mountComponent()" for consistency', 'Added semicolons to addons imports examples. (#9287)', "All doc updates forv15.5 (#9359)\n\nreact-addons-test-utils -> react-dom/test-utils\n\nUpdating all references and docs on the React.addons.TestUtils and the\nshallow renderer to refer to the correct targets.\nInstead of:\n```\nconst React = require('react');\n// ...\nReact.addons.Testutils\n// or\nconst ReactTestUtils = require('react-addons-test-utils');\nwe now show:\nconst ReactTestUtils = require('react-dom/test-utils');\n```\nAnd for shallow renderer, instead of:\nconst shallowRenderer = TestUtils.createRenderer();\nwe now show:\nconst shallowRenderer = require('react-test-renderer/shallow');\n\nUpdate the 'prev' and 'next' attributes of 'add-ons' docs\n\nThese flags are used to set arrow links to easily navigate through the\ndocuments. They were wrong or missing in some of the 'add-ons' pages and\nthis bothered me when manually testing the updates from the previous\ncommit.\n\nUpdate syntax for instantiating shallow renderer\n\nMissed this when updating the docs for the changes to shallow-renderer\nin React 15.5.\n\nFix pointers in addons docs\n\nThanks @bvaughn for catching this\n\nMake example of shallow renderer more consistent\n\nWe should show using the same variable names between code samples.\n\nMake names in example even more consistent\n\nWe should use the same variable name for the same thing across examples.\nrenderer -> shallowRenderer.\n\n\nUpdate docs to deprecate ReactTransitionGroup\n\n\nremoves link to the docs about ReactCSSTransitionGroup and\n   ReactTransitionGroup from the main navigation\n\nupdates 'prev' and 'next' pointers to skip this page\nadds deprecation warning to the top of the page\nremove references to these modules from the packages README\n\nupdates 'add-ons' main page to list this as a deprecated add-on\n\n\nUpdate React.createClass to createReactClass in the docs\n\n\nThe React.createClass method is being deprecated in favor of\ncreateReactClass.\n\nRemove 'React.createClass' from top level API docs\n\nIt no longer makes sense to have a section for the 'createClass' method\nin this page, since it won't be available as a top level method on\n'React'.\nI initially was going to pull the section about 'createClass' into a\nseparate page to add under 'addons' but it was short and duplicative of\nthe 'react-without-es6' docs. So I just linked to those.\n\nRemove most React.PropTypes from the docs\n\nI am doing the docs for context in a separate commit because that case\nwas a bit less clear-cut.\nWe will no longer support React.PropTypes as a built-in feature of\nReact, and instead should direct folks to use the PropTypes project\nthat stands alone.\nRather than retaining the React.PropTypes examples and just revamping\nthem to show the use of the stand-alone PropTypes library with React,\nit makes more sense to direct people to that project and reduce the\nperceived API area and complexity of React core. The proper place to\ndocument PropTypes is in the README or docs of that project, not in\nReact docs.\n\nUpdate context docs to not use React.PropTypes\n\nWe use React.PropTypes to define the contextType for the context\nfeature of React. It's unclear how this will work once React.PropTypes\nis replaced by the external PropTypes library. Some options;\na) Deprecate context, either in v16 or shortly after. Seems reasonable\nbased on the intense warnings against using context that we have in the\ndocs -\nhttps://facebook.github.io/react/docs/context.html#why-not-to-use-context\nExcept that probably some widely used libraries depend on it, like\nReact-Router.\nb) Expect users will use external PropTypes library when defining\ncontextTypes and just don't do our checkReactTypeSpec against them\nany more in v16.\nc) Stop masking context and pass the whole context\nunmasked everywhere. Worst option, do not recommend.\nI went with b and assume that, for now, we will get users to use the\nexternal PropTypes when defining context. I will update this PR if we\nwant a different approach.\n\nRemove 'addons' items from left nav, and deprecate 'addons' doc page\n\nThe plan:\n[X] Remove links to 'addons' items from main navigation\n[X] Add deprecation notices where appropriate, and update syntax to show\nusing the separate modules.\n[ ] Update other references to 'React.addons' in docs. Coming in next\ncommit.\n--- blocked but coming in future PRs\n[ ] Link to a blog post describing the new locations of add-ons in the\ndeprecation notice on the '/docs/addons.html' page. Blocked until we\nactually publish that blog post.\n[ ] Move the docs for each add-on to the actual github repo where it now\nlives.\n[ ] Redirect the old add-ons doc permalinks to the docs in the separate\ngithub repos for those modules.\n[ ] Remove the old add-ons doc markdown files from React core docs.\n\nRemove references to React.addons from docs\n\nJust misc. places where we referenced the 'addons' feature. All gone!", "Update example snippet in old 'React.addons' doc page (#9363)\n\nUpdate example snippet in old 'React.addons' doc page\n\nThis makes the example more consistent.\n\nAdd back the pointers in docs that were mistakenly removed\n\nIn https://github.com/facebook/react/pull/9359 we accidentally removed\npointers in some doc pages. Putting them back now.\n\nLink to npm package instead of github page\n\nThis seems like a more stable place to link to in the 'context'\ndocument.\nBased on @bvaughn's feedback in https://github.com/facebook/react/pull/9359", "Merge branch '15.5-dev' into 15-stable", 'Update yarn lockfile', '15.5.0']v15.4.2 15.4.2 (January 6, 2017)
React

Fixed build issues with the Brunch bundler. (@gaearon in #8686)
Improved error messages for invalid element types. (@spicyj in #8612)
Removed a warning about getInitialState when this.state is set. (@bvaughn in #8594)
Removed some dead code. (@diegomura in #8050, @dfrownfelter in #8597)

React DOM

Fixed a decimal point issue on uncontrolled number inputs. (@nhunzaker in #7750)
Fixed rendering of textarea placeholder in IE11. (@aweary in #8020)
Worked around a script engine bug in IE9. (@eoin in #8018)

React Addons

Fixed build issues in RequireJS and SystemJS environments. (@gaearon in #8686)
Added missing package dependencies. (@kweiberth in #8467)
 ['docs update for v15.4.1', "Merge branch '15-dev' into 15-stable", ':clap: designers are friends, not fodder for jokes (#8523)\n(cherry picked from commit 17f8e947fb368ce3dd2364d2bfe7f2299807c4ec)', 'Add a document on higher-order components (#7869)', 'Update tutorial.md (#8328)\n\nUpdate tutorial.md\n\nfix "unknown: Unexpected token" in "codepen.io".\n\ntweaks per suggestion\n', "Add a couple missing SVG tags to DOM Elements docs (#8383)\nMy first contribution to React!\nWhile upgrading a React project, I found some suspect SVG that needed updating, so I dug in after checking the docs. I knew that support for some SVG properties had been added (namely xmlns and xmlnsXlink), but I noticed them missing from the reference's attribute list. This pull request updates reference-dom-elements.md by adding said properties.", 'remove dead link (#8411)', "fix typo 'miss-configured' to 'misconfigured' (#8412)", "update example to use this.state (#8425)\n\nIn the previous example, the code works even without using bind(this) in the constructor.\nthe reason being handleClick doesn't even use this and its just calling the global function alert.\nthis change make use of this via access this.state.\n", 'Nitpick: use FB style in doc', 'Update reference-react.md', 'Add return to render', 'Fix casing typo in jsx-in-depth.md (#8542)', 'Consistent CodePen links in docs', 'Update conditional-rendering.md (#8636)\nStating the fact that component lifecycle methods will still fire as normal even though you return null from the render method.', "'npm init' needed before installing react via npm. (#8649)\n\n'npm init' needed before installing react via npm.\n\nI was trying to install react in my django project directory and was getting warnings about package.json not being present. Started this SO post (http://stackoverflow.com/questions/41340909/npm-cant-find-package-json-when-installing-react/41340975#41340975) to figure it out. I think it'll be useful to others too if we add it in the documentation itself.\n\nTweak instructions\n", "Changed webpack's hyperlink (#8650)\n..to point to 2.x documentation instead of 1.x (and to be consistent with other links on the page)", 'Merge pull request #8671 from bonham000/update-docs\nupdate to codebase-overview.md', 'Merge pull request #8674 from neeldeep/patch-1\nUpdate conferences.md', 'Merge pull request #8679 from bvaughn/fix-react-conf-2017-name\nRenamed React.js Conf to React Conf in conferences.md', 'Fixed stray text appearing on top of the navbar at small screen sizes (#8681)', '[docs] Add a note about componentWillReceiveProps (#8234)\n\n\nComponent Lifecycle In Depth documentation\n\n\nfirst steps to improve react component reference\n\n\nimproved react component reference\n\n\nremove the component-lifecycle-in-depth\n\n\nadd a note for usage of ReactDOM.findDOMNode\n\n\none note on componentWillReceiveProps\n\n\nremove old useless images for lifecycle docs\n\n\nTweak wording\n\n', 'Update blog post link (#8421)', "Update state-and-lifecycle.md (#8424)\n\nUpdate state-and-lifecycle.md\n\nIsn't  clock state and props the same in this example?\n\nClarify\n", '[Docs] Fixed anchor links in Animations section (#8453)', "Fix typo in Proposing a Change section in how-to-contribute.md (#8498)\n\nFix typo in Proposing a Change section in how-to-contribute.md\n\nNot sure if it was actually intended or was a typo but changed 'If you intend to change to the public API' --> 'If you intend to make a change to the public API'\n\nSimplify\n", 'Fix typos (#8632)\n\n\nFix typos\n\n\nPut back x in Latinx\n\n', 'Replace Starter Kit with doc link (#8682)\n\n\nReplace Starter Kit with doc link\n\n\nhttps in Babel link\n\n', 'Bump React version on website', 'Higher-Order Components docs withSubscription() example fix (#8694)\n(cherry picked from commit a52db12abf303385fe438f5b15fe2d50076c31ed)', '"Don\'t Mutate the Original Component" example and description mismatch (#8695)\n(cherry picked from commit df0d2a5106a225ae94ec978a99342443d57f83c2)', 'Fix uncontrolled input decimal point "chopping" on number inputs, and validation warnings on email inputs (#7750)\n\n\nOnly assign defaultValue if it has changed.\n\n\nImprove comment about reason for defaultValue conditional assignment\n\n\n(cherry picked from commit 0d20dcf9108811f632bfeb76a6bd3bf05d11865b)', 'Injected Host Component classes are not being considered by the reconciler (#8050)\n\n\nConsider Host Component classes when creating a new internal instance\n\n\nRemove unused tagToComponentClass & injectComponentClasses from ReactHostComponent\n\n\n(cherry picked from commit 461a74115caf103b46d1ba93d3cba6fa7780d009)', "Correctly render placeholder for textarea in IE11 (#8020)\n\nCheck if textContent should be set for textarea\n\nshouldSetNodeTextContent returns whether a node.textContent should be\nupdated. Currently it only covers one case, which is to avoid setting\nthe textContent if the text is empty and a placeholder exists.\n\nOnly set node.value if it's equal to initialValue\n\nIn IE11 textContent is populated when the placeholder attribute is set.\nWithout this check, we end up setting node.value equal to the\nplaceholder text, causing the textarea to actually render with the text\ninside.\nThis check makes sure that textContent is equal to our expected\ninitialValue, which should be the case when using defaultValue.\n\nRemove placeholder/textarea check, use contentToUse instead\n\n(cherry picked from commit e644faa6104ca6301c88ce4a535237b76450422b)", 'Refactor precacheChildNodes slightly (#8018)\nThis ‘fixes’ a bizarre IE9 script engine issue. #7803\n(cherry picked from commit 6ce8f1f93c1d8758fcaa819ab18c70a7dd65b6aa)', 'Update release checklist (#8389)\n(cherry picked from commit a98e8227b88741fec0f0b9c7541beacbe624fcf9)', 'add dependencies to react-test-renderer and react-addons (#8467)\nWhat and Why:\n\nWhen using npm version 2, object-assign and fbjs were not getting properly installed\nThis PR adds object-assign and fbjs as explicit dependencies to both react-test-renderer and react-addons\n(cherry picked from commit 7cd26024ceffafc61a744325ef71b583db2ac1cd)\n', "Merge pull request #8594 from bvaughn/dont-warn-about-getInitialState-on-class-if-state-set\nDon't warn about class components using getInitialState if state is set\n(cherry picked from commit 3c6d4bacddf9f37e0edeadc7116053e84290f934)", 'Delete fiveArgumentPooler (#8597)\n(cherry picked from commit b106ca0c8e5c1514b9fbfc69bd60c0c18ad47214)', 'Improve error messages for invalid element types (#8612)\n(cherry picked from commit eca5b1d48e71218800156ce474ec79b990b09fbd)', "Fix AMD and Brunch issues (#8686)\n\n\nAdd manual build fixtures\n\n\nInject ReactDOM into ReactWithAddons from ReactWithAddons\n\n\nWe used to read ReactDOM as a global inside ReactAddonsDOMDependenciesUMDShim.\nThis didn't work in AMD environments such as RequireJS and SystemJS.\nInstead, I changed it so that ReactDOM gets injected into ReactWithAddons by ReactDOM itself.\nThis way we don't have to try to require it (which wouldn't work because AMD doesn't handle circular dependencies well).\nThis means you have to load ReactDOM first before using ReactDOM-dependent addons, but this was already the case before.\nThis commit makes all build fixtures pass.\n\n\nMemoize ReactDOM to avoid going into require on every access\n\n\nAdd Brunch fixture\n\n\nInline requires to work around Brunch bug\n\n\nSee #8556 and https://github.com/brunch/brunch/issues/1591#issuecomment-270742503 for context.\nThis appears to be a Brunch bug but we can keep a temporary fix until the next major.\n(cherry picked from commit ca2c71c0c5e8bb9722b58b0309398c69d1b9642d)", "Merge branch '15-dev' into 15-stable", 'Update shrinkwrap', 'Add 15.4.2 changelog', '15.4.2']v15.4.1 React

Restructure variable assignment to work around a Rollup bug (@gaearon in #8384)

React DOM

Fixed event handling on disabled button elements (@spicyj in #8387)
Fixed compatibility of browser build with AMD environments (@zpao in #8374)
 ['Update website for 15.4.0', 'Add 15.4.0 blog post', 'Replaced old refs with new callback refs (#8254)\n(cherry picked from commit 3e708497d2593b9a99be41acc1837ad18e6e3985)', 'Fix typos in Shallow Rendering Documentation (#8226)\n\n\nFix typos in Shallow Rendering Documentation\n\n\nFix another occurrence\n\n\n(cherry picked from commit 2317fcaccb3f255e13f1f72f384eee695bb68830)', "Remove string ref from function component example (#8244)\nRefs can't be attached to stateless functional components.\n(cherry picked from commit 3668a2e678e6d87b63300aa779481b25105f2092)", 'fix broken docs links (#8163)\n\n\nfix broken links to outdated code\n\n\nanother broken links to outdated code\n\n\nupdate hash commit & folder structure to current\n\n\n(cherry picked from commit b847226ec4e9ad071d1752b53fe789b9179baf1c)', 'Update refs-and-the-dom.md (#8250)\nSince a lot of projects use airbnb eslint config where this rule is enabled (and its a good rule) some people might get confused when they are trying this out in their project.\n(cherry picked from commit f4059e5e5b426224721b19f03fecea94335a5d3b)', 'Correct a method param in Implementation Notes (#8252)\n(cherry picked from commit fa4710fe5136e5feceed09b54c2ff49d012b8c15)', 'Make the Shallow Rendering example clearer (#8269)\n\nMake the Shallow Rendering example clearer\n\nI was reading through the documentation, and I found that the render call on the renderer was missing.\n\nUse a regular function to define MyComponent\n\n(cherry picked from commit 53e45e78e42501b769e81af561059af826208853)', 'Add freenode #reactjs link to support.md (#8270)\n\n\nAdd freenode #reactjs link to support.md\n\n\nChanged irc link to http webchat link.\n\n\n(cherry picked from commit 9d201918bf4432fd3e231088d4cdb8146a1c7861)', 'Update reference-react-dom.md (#8285)\nAdd missing closing bracket\n(cherry picked from commit cdcbf2f39b7cf2df9a9efaa456510f5283f9b69d)', 'Merge pull request #8277 from qiuyuntao/master\ndocs: delete unnecessary brackets\n(cherry picked from commit 024f62ecfe915387a8a5d0ee972598b75799cb38)', 'Clarity on constructor of Board object for tutorial.md (#8224)\n\nUpdate tutorial.md\n\nIs it possible to be more clear here?\n This implies that we are removing the constructor from GAME, and not board (which is what I believe the author is trying to say).\nIt took me several reads to understand. \nWith this edit, it is now clear that the adjustment is being made to -Board- and not to -Game-\n\nalso remove "for Board earlier"\n', 'Remove spread operator (#8273)\n\nRemove spread operator\n\nI believe what was meant here was to express that you would create the new player object with all the previous properties of the existing player object in addition to now updating the score value. That being said, this is a simple example, and the player object clearly has no other values. Objects are not (by default) iterable using this operator, so this little piece does more harm than good. I believe the new example to be much clearer.\n\n\nUsing Object.assign()\n\n\nTweak wording\n\n', 'include the version number in the header (#8315)', 'fix(a11y): add missing labels to forms doc\nShowing how to create a form without labeling inputs is an accessibility anti-pattern. This change adds labels to the examples to address that. Codepen may still need to be updated depending on how that example is created.', 'Tweak examples', 'Merge pull request #8332 from gaearon/prod-dev\n[Docs] Expand Installation and clarify why use bundlers', 'Merge pull request #8335 from lacker/newlink\nadd link to useful doc', 'Merge pull request #8339 from nolanlawson/patch-1\nUpdate 2016-11-16-react-v15.4.0.md', 'Merge pull request #8345 from shubheksha/docs/improve-introducing-jsx\nImproved some sections of the introducing JSX docs', 'Merge pull request #8346 from shubheksha/docs/improve-state-and-lifecycle\nImproved sections of state and lifecycle docs', 'update react-without-es6.md (#8351)', 'Fix link to PureComponent in docs (#8375)', "Fix object spread operator (#8378)\nObject spread operator performs shallow copy of object's arguments, so it should be placed before new properties are assigned.", "Merge remote-tracking branch 'upstream/15-stable' into 15-dev", 'Restructure code to work around a Rollup bug (#8384)', "Fix browser bundle for AMD (#8374)\n\n\nFix browser bundle for AMD\n\n\nFinal fix for standalone browser build.\n\n\nMuch more scientific than the rest so it should stick.\n\nThrow when we can't find code we need to replace.\n\n(cherry picked from commit a3ba48bf724de4c23d7c32f1b381476bcd3bb6fa)", "Stopgap fix for element disabling (#8387)\nFix for #8308. This is a bad hack -- EventPluginHub.getListener isn't even DOM-specific -- but this works for now and lets us release 15.4.1.\n(cherry picked from commit c7129ce1f0bba7d04e9d5fce806aaeed40730b17)", 'shrinkwrap', '15.4.1 changelog', '15.4.1']v15.4.0 React

React package and browser build no longer "secretly" includes React DOM. (@sebmarkbage in #7164 and #7168)
Required PropTypes now fail with specific messages for null and undefined. (@chenglou in #7291)
Improved development performance by freezing children instead of copying. (@keyanzhang in #7455)

React DOM

Fixed occasional test failures when React DOM is used together with shallow renderer. (@goatslacker in #8097)
Added a warning for invalid aria- attributes. (@jessebeach in #7744)
Added a warning for using autofocus rather than autoFocus. (@hkal in #7694)
Removed an unnecessary warning about polyfilling String.prototype.split. (@nhunzaker in #7629)
Clarified the warning about not calling PropTypes manually. (@jedwards1211 in #7777)
The unstable batchedUpdates API now passes the wrapped function's return value through. (@bgnorlov in #7444)
Fixed a bug with updating text in IE 8. (@mnpenner in #7832)

React Perf

When ReactPerf is started, you can now view the relative time spent in components as a chart in Chrome Timeline. (@gaearon in #7549)

React Test Utils

If you call Simulate.click() on a <input disabled onClick={foo} /> then foo will get called whereas it didn't before. (@nhunzaker in #7642)

React Test Renderer

Due to packaging changes, it no longer crashes when imported together with React DOM in the same file. (@sebmarkbage in #7164 and #7168)
ReactTestRenderer.create() now accepts {createNodeMock: element => mock} as an optional argument so you can mock refs with snapshot testing. (@Aweary in #7649, #8261)
 ['Update website for 15.3.2', 'Fix formatting of 15.3.2 changelog', 'Adding the published ReactRally videos section (#7681)\nReactRally came and went, and it was splendid.\n(cherry picked from commit 90a120c60338392f0b902d446d351d12c059aecc)', 'Update 14-communicate-between-components.md (#7680)\nTo demonstrate multiple arguments bind(this, arg1, arg2, ...), also not to pass in for than what handleClick needed, namely props, or maybe even pass item itself, etc.\nGoing to change the kor file after review.\n(cherry picked from commit 05cbc9340120fec618c728e9d71db811a5149c45)', 'Update 14-communicate-between-components.ko-KR.md (#7686)\nApply the same change made in #7680.\n(cherry picked from commit 2fc7125d49f207e5bdda0097ed01dc87d06ecec9)', 'Proper font-family for docs input fields (#7706) (#7708)\n(cherry picked from commit b87bcb96acf25d06e5546b5eda91cafc6185230f)', 'Add Russian translation for introduction of tips (#7690)\n(cherry picked from commit 4dd44e77f8fc368218f3c1f22f32263cc6cbd7b7)', 'Update OWASP link in docs for dangerous innerHTML (#7710)\n(cherry picked from commit 616e468987fc655bf5e7bc62b97fc86d3b5917e7)', 'Fix Russian translation of  introduction to be more technical (#7727)\n(cherry picked from commit 7d76bdad694e6a4118379f70c33ad1e224b0b7f5)', 'Russian translation for inline styles of tips (#7717)\n(cherry picked from commit fcc37ccaa2f10a3fbbe6a2852c3309a98ad486bd)', 'Russian translation if-else in JSX of tips (#7726)\n(cherry picked from commit 79367b09f76fcd12d537dada51c44d01301dbab5)', 'Russian translation for self-closing-tag of tips (#7729)\n\n\nRussian translation for self-closing-tag of tips\n\n\nFix next link for inline styles tip\n\n\nUpdate 04-self-closing-tag.ru-RU.md\n\n\n(cherry picked from commit 7d5c70d98c0b0dae6d0a70d4868b80d8e6ef8a36)', 'Russian translation for max. numbers of jsx root nodes (#7738)\n\n\nRussian translation for max. numbers of jsx root nodes\n\n\nUpdate 05-maximum-number-of-jsx-root-nodes.ru-RU.md\n\n\n(cherry picked from commit 8176f4970ceb3bea8a1b90394459b33a7e575da0)', 'Russian translation for style props value px of tips (#7742)\n\n\nRussian translation for style props value px of tips\n\n\nUpdate 06-style-props-value-px.ru-RU.md\n\n\n(cherry picked from commit 4dd554c9b70ecc0ffb09579e8f27474c0c5b7059)', 'Fix links and ids for tips in docs (#7766)\n(cherry picked from commit 2ec2d8f7f75f0441c51e0fea743be82a3d1dde4f)', '[docs] Update React Rally 2016 videos link (#7771)\n(cherry picked from commit 2058d47e7bfaccf0983aaf673d86acd89d7918ce)', 'Update broken JSFiddle in Why React blog post (#7783)\nFixes #7782\n(cherry picked from commit 13692d59add7cfffe06e69f8d4fe2488d0a55514)', 'Change [API参考] from "top-level-api.html" to "top-level-api-zh-CN.html" (#7790)\n(cherry picked from commit 5331dfd1a509aeaffb33d9096941c02c11d9eb58)', 'Change [入门教程] from "tutorial.html" to "tutorial-zh-CN.html" (#7789)\n(cherry picked from commit d9957ac0759a6d1ff5e44b6356e91fe8ed83fafb)', 'Update 07-forms.ko-KR.md (#7809)\nfix spelling\n(cherry picked from commit 603249155513668bdb65b712d52bc258a932762a)', 'Move How to Contribute to documentation and update it (#7817)\n\n\nMove How to Contribute to documentation and update it\n\n\nConsistent formatting\n\n', "Reduce confusion in testing documentation. (#7818)\n\nReduce confusion in testing documentation.\n\nJust wanted to add some clarity to this page and link to the react tutorial on Jest's website to give people more information. Also changed enzyme's definition from library to utility to help reduce the confusion. Hope this makes sense to everybody :)\nSee https://twitter.com/damusnet/status/780752042675597312\ncc @lelandrichardson\n\nUpdate 10.4-test-utils.md\n\n(cherry picked from commit 0990c938063f0604373bb4bdd156d31ecf700599)", 'Our first 50,000 stars blogpost', 'typos fix (#7822)', 'Add Codebase Overview (#7828)\n\n\nAdd Codebase Overview\n\n\nUpdate codebase-overview.md\n\n\nUpdate codebase-overview.md\n\n', 'Docs to ES6: Displaying data example.', 'Reusable Components ES6 Update', 'Add-Ons: Animation updated with ES6 examples', 'Keyed Fragment of AddOns ported to ES6', 'Update remarkable to 1.7.1 (#7851)\nFixes a subtle XSS hole.\n(cherry picked from commit f88c1d38bef076a25fad3f55cff9374307e3b750)', 'Note that getInitialState is not used in ES6 classes in docs (#7748)\n(cherry picked from commit a2bb55e3f49ab13734031653f1da05f39669f9fe)', 'Fix mistakes in the codebase overview (#7834)\n(cherry picked from commit 16ac141f44583bd59f95f5b420a66bfcef01865e)', 'Update babel link (#7837)\n(cherry picked from commit e32196222b83a2b21fc44bfd3f6cb9335ccae8db)', "Merge remote-tracking branch 'upstream/15-stable' into 15-dev", 'PropTypes: distinguish nullable from optional object field (#7291)\n\nPropTypes: distinguish nullable from optional object field\n\nThis gives a more precise message (no type semantics change) to the case of passing a field in an object, but whose value is null:\nBefore:\njs\npropTypes: {\n  foo: React.PropTypes.number.isRequired\n}\nWould scream "Required prop foo was not specified in MyComp".\nNow it\'ll be "Required prop foo was specified in MyComp, but its value is null.".\nWorks as expected in nested objects.\nThis fixes the issue of a component transitively passing a null, specifying the correct field to the child but have the child tell it that it didn\'t provide the prop.\nOptional field and nullable are two different things anyway.\n\n\nAdd missing test case.\n\n\nReword messages.\n\n\n(cherry picked from commit 0292d3404787b08b19267a3c951170a0dabd0e98)', 'Merge pull request #7248 from sebmarkbage/fibercleanup\n[Fiber] Various minor tweaks and a few big ones\n(cherry picked from commit a8c81912646378ac6c0a1966b3f3f7cd5fcb6726)', 'Fix batchedUpdates return value (#7444)\n(cherry picked from commit 7d57c1f0c17eff5aa868791a7496cecd2f7ca392)', "Bundle DOM renderers into their individual UMD bundles (#7164)\n\nCut out isomorphic dependencies from the renderers\n\nThese files reaches into isomorphic files.\nThe ReactElement functions are exposed on the React object anyway\nso I can just use those instead.\nI also found some files that are not shared that should be in\nrenderers shared.\n\nFound a few more shared dependencies\n\nrenderSubtreeIntoContainer is only used by the DOM renderer.\nIt's not an addon.\nReactClass isn't needed as a dependency since injection doesn't\nhappen anymore.\n\nUse a shim file to load addons' dependencies on DOM\n\nBy replacing this intermediate file we can do the lazy loading\nwithout needing any lazy requires. This set up works with ES\nmodules.\nWe could also replace the globalShim thing with aliased files\ninstead for consistency.\n\nBundle DOM renderers into their individual UMD bundles\n\nInstead of exposing the entire DOM renderer on the react.js\npackage, I only expose CurrentOwner and ComponentTreeDevtool which\nare currently the only two modules that share state with the\nrenderers.\nThen I package each renderer in its own package. That could allow\nus to drop more server dependencies from the client package. It\nwill also allow us to ship fiber as a separate renderer.\nUnminified DEV            after     before\nreact.js                  123kb     696kb\nreact-with-addons.js      227kb     774kb\nreact-dom.js              668kb     1kb\nreact-dom-server.js       638kb     1kb\nMinified PROD             after     before\nreact.min.js               24kb     154kb\nreact-with-addons.min.js   37kb     166kb\nreact-dom.min.js          149kb     1kb\nreact-dom-server.min.js   144kb     1kb\nThe total size for react.min.js + react-dom.min.js is +19kb larger\nbecause of the overlap between them right now. I'd like to see\nwhat an optimizing compiler can do to this. Some of that is fbjs\nstuff. There shouldn't need to be that much overlap so that's\nsomething we can hunt. We should keep isomorphic absolutely\nminimal so there's no reason for other React clones not to use it.\nThere will be less overlap with Fiber.\nHowever, another strategy that we could do is package the\nisomorphic package into each renderer bundle and conditionally\ninitialize it if it hasn't already been initialized. That way\nyou only pay an overlap tax when there are two renderers on the\npage but not without it. It's also easier to just pull in one\npackage. The downside is the versioning stuff that the separate\nnpm package would solve. That applies to CDNs as well.\nReactWithAddons is a bit weird because it is packaged into the\nisomorphic package but has a bunch of DOM dependencies. So we have\nto load them lazily since the DOM package gets initialized after.\n(cherry picked from commit 8ef00dbb7de944da0e7b14438baffd37df01bf37)", 'Fix trailing build issues (#7450)\nUse relative path for addons UMD shim module\nUse explicit top level wrapper marker for top level elements\n(cherry picked from commit 34c4474472d6877f970c3763de4769d2b98718ab)', "Include React itself in the list of shims (#7453)\nWithout this we end up bundling all of the isomorphic React into\nthe DOM bundle. This was fixed in #7168 too but I'll just do an\nearly fix to ensure that #7168 is purely an npm change.\n(cherry picked from commit ca9167c20270613e87f969292e55aaffefbed9a2)", "Mock ReactDOM for Fiber Tests (#7206)\nWe currently write all our tests against the DOM implementation.\nI need a way to run the Fiber tests against it. But I don't want\nto take on any package dependencies on Fiber modules yet.\nThere's a problem with jest right now where you can't globally\nmock modules that already exist. So I have to add a global call\nto jest.mock.\nLuckily we already have a way to test the useCreateElement paths\nusing a feature flag. I won't activate this flag in travis until\nit passes, but the idea is to run all three variants in travis.\nI'm not sure that invoking rAF and rIC synchronously is the best\nway to test this since it doesn't capture the backwards\ncompatibility aspect. I.e. the fact that people might be relying\non the synchronous nature in real apps too. It's a start.\nIdeally, jest would have these built-in.\n(cherry picked from commit c06a68a10b8c43922acff58dcad803412954bca0)", 'Build renderers into their individual npm packages (#7168)\nThis copies modules into three separate packages instead of\nputting it all in React.\nThe overlap in shared and between renderers gets duplicated.\nThis allows the isomorphic package to stay minimal. It can also\nbe used as a direct dependency without much risk.\nThis also allow us to ship versions to each renderer independently\nand we can ship renderers without updating the main react package\ndependency.\n(cherry picked from commit 0f004efce2dcd0189a663f5724853eab261782e6)', 'Build React DOM Fiber package (#7173)\nThis builds a react-dom-fiber.js bundle which exposes ReactDOMFiber.\nThis allows early experiments with the new Fiber reconciler.\nI also expose it in the npm package through react-dom/fiber.\n(cherry picked from commit f7e0db9a181f042c4c7ec55250786ac2e96e40db)', 'Require the isomorphic React instead of internals from renderers (#7473)\nThis is needed for flat builds. It also lets us get rid of a bunch\nof special cases in the build scripts.\nIt also allow us to just copy the source files into React Native\ninstead of having to build first to resolve the special cases.\n(cherry picked from commit 1c5a639c37039a9c60752980dfee168129b76b32)', 'Use aliasify everywhere instead of browserify-global-shim (#7476)\nI already had to aliasify to have better control over the requires\nso we might as well do it everywhere for consistency.\nThis probably makes it easier to rebase the rollup work too\nbecause aliases seems to be how you solve this in that world.\n(cherry picked from commit c8f7215b200e37f1679da2bebfc2b68876fb15a3)', 'Show React events in the timeline when ReactPerf is active (#7549)\n\nShow React events in the timeline when ReactPerf is active\n\nThis currently only seems to work on Chrome.\n\nAddress Chrome issue\n\n(cherry picked from commit 0a248ee7b953d5c207b87d2840bd4295891760e2)', 'Update flow to 0.31 (#7557)\n(cherry picked from commit 08614db025b59d55701d0c6e02e8b3948a036f9f)', 'Type ReactPropTypeLocationNames (#7503)\n(cherry picked from commit 7f64baad785ee649530599bdc7784e74ead0b156)', 'Type ReactPropTypeLocations (#7502)\n(cherry picked from commit ad3c65186e4bdd3da84f300cd8c658b1d9f63831)', 'Type canDefineProperty (#7500)\n(cherry picked from commit 18003578b19efa9b2c72136398756c96ccb2c76f)', 'Type ReactErrorUtils (#7565)\n(cherry picked from commit 03e8c0eb754f142997094374baa7785e510392e3)', 'Type ReactElementSymbol (#7564)\n(cherry picked from commit a72a156f5827359bafae8b81d07749cdba9d7360)', 'Type ReactPropTypesSecret (#7501)\n(cherry picked from commit 563f3bbab4b189bc821d70d7b6c6c0da67a77174)', "Type ReactComponentTreeHook (#7504)\nFor this one, I wanted to type a non-trivial piece of the codebase and ran into the fact that we do not have types for ReactElement nor ReactInstance, so I had to create them.\nI'll add comments inline\n(cherry picked from commit ea494a2c1082c705ef79d0b73516aa6923a4c75a)", "Fix lint errors (#7568)\nIn Type ReactComponentTreeHook #7504, I merged even though travis didn't report green (travis for all the fb repos has been backlogged like crazy since this morning) by manually doing npm test and npm run flow but I didn't ensure that lint was all green.\n@millermedeiros pinged me about it so here's a quick fix\n(cherry picked from commit 66e77f696afa387811cbc40b7ee31d7f41b38e42)", 'Type ReactComponentEnvironment (#7566)\n(cherry picked from commit f784a2d50a4ec404de8239047088c72a9062fefe)', "Remove unneeded declare (#7570)\nIt turns out that we don't need it, flow is smart enough to realize that the function is declared in the two branches :)\n(cherry picked from commit b977cf13c4ddb9a26a91c38eb6b99b5a51f767a6)", 'Type ReactChildrenMutationWarningHook (#7571)\n(cherry picked from commit e2ddbac35e227278a5a8fd7b15758eb419c4b23c)', 'Type ReactInvalidSetStateWarningHook (#7572)\n(cherry picked from commit 09887e03119537818e29471505a78ec264761259)', 'Type ReactDebugTool (#7576)\n(cherry picked from commit c086e5f94efe71612696744a9c6feae745618533)', "Type ReactPerf (#7585)\nWe need to export FlushHistory type and I submitted a PR on flow to fix the type of console.table which is too restrictive.\nI'm already starting to see the benefits of flow, I can look at random variables in the code and flow knows what shape the objects are! It's really useful to try and understand what's going on :)\n(cherry picked from commit 2fb5eae3723ff0fb31c2826dcb928c4f7d4eaff7)", "Type ReactDebugTool (#7586)\nFlow doesn't really support the concept of variables that are non-null but only inside of a __DEV__ block. There's an internal post about it ( https://www.facebook.com/groups/flowtype/permalink/1132437726804841/ ) and the conclusion is that we should force it to be non-null and trust the developer to put the proper DEV checks in place.\n(cherry picked from commit 0d927844fba35df4956e904fdb33e2f7a034eace)", 'Remove keyMirror in ReactPropTypeLocations (#7592)\nThis one involves a bit more work as I added "phantom" flow types to a bunch of places where the type is a ReactPropTypeLocations even though those files are not @flow yet.\nA good side effect is that ReactPropTypeLocationNames keys are now correctly typed, this means that they cannot go out of sync without breaking flow :)\n(cherry picked from commit 84084153edbeab515f9955b4c5b955ef95167787)', 'Remove keyMirror in ComponentLifeCycle (#7591)\nSee rationale in https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/\n(cherry picked from commit a35387c030ce6f18f3386f163e42ddacdabd5297)', 'Remove keyMirror in SpecPolicy (#7590)\nAs discussed in my RFC: https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/\n(cherry picked from commit e3b2c6e650d80bfcfd32eb47354eb269269f77c8)', "Type ReactMultiChildUpdateTypes (#7589)\nAs mentioned in https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/ I'm going to kill this instance of keyMirror and use a plain string instead with a type union.\nThe current type union is unused right now but when I type ReactMultiChild I will use it.\n(cherry picked from commit c9e03f0a859180a150d14f61f5e57148a013259e)", "Type ReactOwner (#7587)\nIncrementally type ReactInstance by adding the types of attach/detachRef.\nI moved isValidOwner as a function inside of the file since it's never used externally.\n(cherry picked from commit fa9869b5a080506571c91b09a845dcf01b99e71f)", "Type PooledClass (#7578)\nThis one was really interesting to type as it's doing a lot of unusual JavaScript. Fortunately flow is now pretty kick ass and I've been able to mostly type it. The only missing piece is that it won't check the constructor arguments.\nIf you are a fb employee, you can follow the discussion here: https://www.facebook.com/groups/flowtype/permalink/1132359430146004/\n(cherry picked from commit 19b8eadb242054e2668cf90e83490ef552bcdbfe)", 'Remove the Mixin layer of indirection on ReactCompositeComponent (#7599)\nAs mentioned in https://github.com/facebook/react/pull/7581#issuecomment-242952042 we can remove the Mixin layer of indirection as it only exports a Mixin and I find it confusing.\n(cherry picked from commit dd0c65c6aa7c80eeeb0783e29bef89399b5796af)', 'Type Transaction (#7581)\nThis one is interesting because we have transaction objects being passed around everywhere in the codebase but there\'s actually no Transaction class. It\'s a "mixin" that comes to life by being Object.assigned to the prototype of a real "class" (before class was cool!). Therefore, we can\'t just say var Transaction = require(\'Transaction\'); (transaction: Transaction) => { } because it would be the object that contains a mixin and not an instance of a transaction.\nThe trick I use is to export TransactionType and alias it to Transaction in the file as it doesn\'t actually require transaction. In case they do, we\'ll figure it out, but in the few files I looked at, it doesn\'t seem to be the case.\nFor the perform function, it actually typechecks pretty well!\n(cherry picked from commit a3e576e1bb80f674fa685966ce415fc65238638c)', 'Ignore bundle.js for examples (#7498)\n\n\nIgnore bundle.js for examples\n\n\nMove ignored bundle.js under examples directory\n\n\n(cherry picked from commit 5331fd00bc3936d19916d934a0fb0e549499ca4e)', 'Cleanup ReactErrorUtils (#7610)\nThis cleans up the Flow annotations and brings the implementations in line.\n(cherry picked from commit 395888435b44b18b339f7626df5c472335601a11)', 'Remove keyMirror in PropagationPhases (#7596)\nSee rationale in https://www.facebook.com/groups/2003630259862046/permalink/2097088000516271/\n(cherry picked from commit 738a9e3ef25db863126cd7ec2b37b9ba0bd1c7c2)', "Remove keyMirror in TopLevelTypes (#7597)\nThis is the last callsite of keyMirror! It removes 0.5k gzipped :)\nThe only trick with this one is that ReactTestUtils actually iterates over the list of all the events. Instead of duplicating the logic, I used the $Enum feature of flow that lets us statically extract out the type from the dynamic value. Inside of react-dom we're no longer requiring the file directly so it doesn't bloat the file size, and we still get to have static typing, best of both worlds!\n(cherry picked from commit 2f9a9dc4c56c1caee250626c54c587c5f233fcab)", 'Kill keyOf :) (#7615)\n(cherry picked from commit f7076b7759c57b95da21ffca892ddbdcf3ffed02)', 'Merge pull request #7625 from vjeux/jest15\nUpdate to jest 15\n(cherry picked from commit 1bd55c8cbdb456890cfbaad0759f15edfd37d080)', 'Remove String.prototype.split polyfill warning (#7629)\n(cherry picked from commit 5c4792038474fe2c8107f925c066c260be09b2a5)', 'Remove the Flow experimental.strict_type_args option (#7631)\n(cherry picked from commit 355c49065386cbe33c026ba573c88c4e459ea328)', 'Merge pull request #7634 from spicyj/flowfix\nSmall flow fixes\n(cherry picked from commit 0c62d121c5db133f6c3d88e68c270c161e499573)', 'Generate SimpleEventPlugin data structures at runtime (#7616)\nWe used to copy and paste the same big blob many times in order for it to work with keyOf which is no longer a constraint. This pull request takes a list of all the events as string and generate those data structures at runtime.\nIt reduces the size of React by 1k post gzip and flow is able to extract the structure out of it :)\n(cherry picked from commit 1229a238c491fbaf4c1596f82115b71524d0e56f)', 'Merge pull request #7644 from flarnie/flowifyEventPluginRegistry\nType EventPluginRegistry\n(cherry picked from commit 9a88e593ed6f3a13f431048f0ee427255718ddbf)', 'Type ReactRef (#7600)\nNothing out of the ordinary on this one.\n(cherry picked from commit 31dd6944d34f404ec1caabc54c53f7f79d616214)', 'Restore coverage in Travis (#7628)\nWe disabled coverage in Travis because the implementation was crashing ( https://github.com/facebook/react/issues/6290 ). Since we upgraded to Jest 15, the entire coverage implementation is brand new so we should give it another try.\n(cherry picked from commit 839697f60c6117e3a562c91142bda4c12acc4146)', "Convert CallbackQueue to a class (#7647)\nIt turns out that flow cannot type this with a function constructor + prototype overrides. Turning it to a class makes flow happy and has minimal impact on the output.\nIn open source, we already use the loose version of the class transform and internally we have one that's outputting even less code if you have @preventMunge in the header.\nSee discussion in https://www.facebook.com/groups/2003630259862046/permalink/2098480820376989/\n(cherry picked from commit a70acb37d9dc392b395bd921d90d5488542c2402)", 'Type ReactCurrentOwner (#7648)\nSimpler than ReactOwner :)\n(cherry picked from commit 2559030c344a0e03e2ca03a231c7220671620170)', 'Flow: bool -> boolean (#7650)\n(cherry picked from commit 7b247f3609ad25d79ae267b4b5c919a35da45cb4)', 'Use proper render method in static markup event listener test (#7652)\n(cherry picked from commit 40c90a6499cd835a8f3093b52aecbcfc2685370a)', "Don't bundle ReactComponentTreeHook in production (#7653)\nFixes #7492.\nThis was a build size regression introduced in #7164.\n(cherry picked from commit a09d158a7cc66634ae5c92649193c83fa69963c1)", 'Remove unnecessary var declaration (#7666)\n(cherry picked from commit 0c77b2f3eb28471ad664b6272b7426603b757527)', 'I wrote it live! (#7663)\n(cherry picked from commit 334b8bdf165c47336b467a4092e3f51893a83c0d)', "Flow type event plugins (#7667)\n\n\nType SimpleEventPlugin and TapEventPlugin\n\n\nRenamed file from 'ReactSynteticEvent' to 'ReactSyntheticEventType'\n\nFills in the 'any' holes that were left in DispatchConfig type and the\n  type annotations in EventPluginRegistry.\nAdds polymorphic PluginModule type and related types\nUses hack to support indexable properties on 'Touch' type in\n  TapEventPlugin\n\nThe issue in TapEventPlugin is that the code is accessing one of four\npossible properties on the 'Touch' type native event using the bracket\naccessor. Classes in Flow don't support using the bracket accessor,\nunless you use a declaration and the syntax [key: Type]: Type.1 The\ndownside of using that here is that we create a global type, which we\nmay not need in other files.\nOther options:\n- Use looser typing or a '@FixMe' comment and open an issue with Flow to\n  support indexing on regular classes.\n- Rewrite TapEventPlugin to not use the bracket accessor on 'Touch'. I\n  thought the current implementation was elegant and didn't want to\n  change it. But we could do something like this:\nif (nativeEvent.pageX || nativeEvent.pageY) {\n   return axis.page === 'pageX' ? nativeEvent.pageX : nativeEvent.pageY;\n } else {\n   var clientAxis = axis.client === 'clientX' ? nativeEvent.clientX : nativeEvent.clientY;\n   return nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];\n }\n(cherry picked from commit 7b2d9655da218f8311d1dab4ab1142c35c3eef3b)", "Trim and inline ReactInstanceHandles (#7676)\nReact IDs have been killed and there was one call site left in a test. I trimmed down the implementation to keep only what is actually used and inlined it inside of the test so we don't get more people using it in the future.\n(cherry picked from commit 82598eec799d746d5f012a566978c895c2459d4b)", "Type ReactHostOperationHistoryHook (#7672)\nIn order to properly type an Operation, we need to change the call site from having two arguments: one for type and one for payload into an object that contains both. This isn't a perf regression because we were already constructing this object in the first place and doesn't change the emitted event so shouldn't affect the dev tools.\nNone of the call sites are actually flow-ified so it isn't technically used but once we will, it'll make sure that we don't send random strings and payload through those very generic methods.\n(cherry picked from commit eaefd9052ae41d3318a2add286828a75da362193)", 'Run codemod react-codemod/transforms/class again (#7679)\nref. #7321\n(cherry picked from commit df033180f0b56443985ad6e79c2eafdcc49384f7)', 'Move mouse event disabling on interactive elements to SimpleEventPlugin. Related perf tweak to click handlers. (#7642)\n\n\nCull disabled mouse events at plugin level. Remove component level filters\n\n\nDisabledInputUtils tests are now for SimpleEventPlugin\n\n\nAdd click bubbling test\n\n\nAdd isInteractive function. Use in iOS click exception rules\n\n\nInvert interactive check in local click listener. Add test coverage\n\n\nReduce number of mouse events disabable. Formatting in isIteractive()\n\n\nSwitch isInteractive tag order for alignment\n\n\nUpdate formatting of isInteractive method\n\n\n(cherry picked from commit 73c50e7d006856e37a22f3de390cbed859d9dce3)', 'jest@15.1.1 (#7693)\n(cherry picked from commit e3e03b30b21dbf9e0bf37e6c3579a7337fb41795)', "Fix Flow errors in Event Plugins (#7698)\nDue to a typo in PR#7667 where I put 'DispatchConfig' when the type was\n'EventTypes', there were some flow errors being thrown.\nThen PR#7642 fixed a bug in SimpleEventPlugin and added some untyped\nmethods, which threw more flow errors.\nLast, while fixing this, I fixed two eslint errors in the\nSimpleEventPlugin test.\n(cherry picked from commit 54cbe2926249b0d8c1da17b6ecb19484cc409df1)", 'changed ReactChildrenMutationWarningHook to Object.freeze (#7455)\n\nonly freeze children array created by createElement\n(cherry picked from commit 38c4ade6cc2588e28090385ec989997363bcb782)\n', 'Implement createNodeMock for ReactTestRenderer (#7649)\n\n\nImplement optional mockConfig and getMockRef\n\n\ndefault mockConfig, walk render tree\n\n\nPass mockConfig to transaction\n\n\nAttach mockConfig to transaction\n\n\ntype mockConfig in ReactRef\n\n\nExpect object in native component ref test\n\n\nFix argument name for attachRefs\n\n\nAdd mockConfig support to legacy refs\n\n\nPass transaction to getPublicInstance\n\n\nImplement getMockConfig on ReactTestReconcileTransaction\n\n\nMerge defaultMockConfig and mockConfig options\n\n\nRename mockConfig to testOptions\n\n\nBreak getPublicInstnce into three lines\n\n\ncreateMockRef -> createNodeMock\n\n\n(cherry picked from commit f3569a2c311808d4d6d2b9dcf7ec6df064bce76e)', 'Merge pull request #7636 from sebmarkbage/fiberrefactor\n[Fiber] Refactor Pending Work Phase and Progressed Work\n(cherry picked from commit a19fede67c96eed553e1b36f0d7786d1d668b61b)', 'Merge pull request #7344 from acdlite/fibersetstate\n[Fiber] setState\n(cherry picked from commit 3e54b28c20e0efc663ce8ea1d2e1269615a6f573)', '[Fiber] Animation priority work (#7466)\n\nHigh priority work\n\nAdds the ability to schedule and perform high priority work. In the\nnoop renderer, this is exposed using a method performHighPriWork(fn)\nwhere the function is executed and all updates in that scope are given\nhigh priority.\nTo do this, the scheduler keeps track of a default priority level.\nA new function performWithPriority(priority, fn) changes the default\npriority before calling the function, then resets it afterwards.\n\nRename overloaded priority terms\n\n"High" and "low" priority are overloaded terms. There are priority\nlevels called HighPriority and LowPriority. Meanwhile, there are\nfunctions called {perform,schedule}HighPriWork, which corresponds\nto requestAnimationFrame, and {perform,schedule}LowPriWork, which\ncorresponds to requestIdleCallback. But in fact, work that has\nHighPriority is meant to be scheduled with requestIdleCallback.\nThis is super confusing.\nTo address this, {perform,schedule}HighPriWork has been renamed\nto {perform,schedule}AnimationWork, and\n{perform,schedule}LowPriWork has been renamed to\n{perform,schedule}DeferredWork. HighPriority and LowPriority\nremain the same.\n\nPriority levels merge fix\n\n(cherry picked from commit 6144212a8634948faf18cce8211c71e6f9d0667e)', 'Unify branches in cloneFiber (#7723)\n(cherry picked from commit 9eba80825f0931794e4553db1806e78de3a218de)', 'Clean up ReactTestRenderer (#7716)\n\n\ncreate ReactTestTextComponent fil\n\n\ncreate ReactTestEmptyComponent\n\n\nUse class for ReactTestRenderer\n\n\nAdd flow to ReactTestRenderer\n\n\n(cherry picked from commit 5a3abab66085433c35e1138ecfdeea35c8d9327a)', "Update ignores in flowconfig (#7722)\nThis ensures we ignore relative to our project root and won't be tripped up by issues where checkouts in other places result in Flow passing when it shouldn't (eg on Travis CI where the checkout path is /home/travis/build/facebook/react)\n(cherry picked from commit 864bc7b939ca8a93583087d1ff596cd8049b4162)", "simplify npm link script a little bit (#7862)\nWe don't need to remove the folders before linking the modules", 'Update 04-multiple-components.md (#7861)\nadded missing map bracket', 'Fix minor typo in closing H1 tag (#7855)', 'Use ES6 in Language Tooling doc', 'Fix initial state example for Recat.createClass (#7867)\nIn the example there was a typo with setting initial state using getInitialState method', 'Update the homepage with ES6 (#7868)\n\n\nUpdate the homepage with ES6\n\n\nAvoid array spread and stale state\n\n', "Simplify event phases. Use explicitly 'captured' and 'bubbled'. (#7741)\n(cherry picked from commit 65870dcaee6a3fac0932c284f720275812bb358f)", 'Adjust code to handle more availability of function.name (#7670)\n(cherry picked from commit 00ac1797d75cea4b42d46c0161ee77acec5125f3)', 'Clarify manual PropType calls warning (#7777)\n(cherry picked from commit b7c70b67af77fa8611d4b13315bf57df15c4d35b)', 'Introduce facts-tracker (#7747)\n\nIntroduce facts-tracker\n\nWe want to be able to track various things like number of files that are flowified, number of tests passing with Fiber...\nThis introduces a tool that lets you do that. The API is very simple, you execute the script with a list of tuples [key value] and it\'s going to create a facts branch and put a txt file for each fact and values over time.\nnode scripts/facts-tracker/index.js \\\n  "flow-files" "$COUNT_WITH_FLOW/$COUNT_ALL_FILES"\nTest Plan:\nThis is tricky to test because Travis only exposes the private variables (github token) when it processes a committed file and not on branches. The reason is that otherwise anyone could send a pull requests that does echo $GITHUB_TOKEN and steal your token.\nGiven this constraint, I did all the work using two of my repos:\n- https://github.com/vjeux/facts-tracker\n- https://github.com/vjeux/facts-tracker-test\nand am sending this pull request that should work as is /fingers crossed/, but we won\'t be able to test it out until it is committed.\nNote that once this lands, I\'m going to kill those two repos.\n\n\nUpdate with all the suggested changes\n\n\nBranch on a flow type in travis.yml\n\n\nUse $GITHUB_TOKEN\n\n\nproperly escape it\n\n\n(cherry picked from commit dbd9c4b205321b9d881966256f9b7203fc794277)', 'Update travis.yml to use $GITHUB_USER_NAME and $GITHUB_USER_EMAIL (#7811)\nSee https://github.com/facebook/react/pull/7747#issuecomment-249677880 for discussions\n(cherry picked from commit fb1e7075edc53f6548693a973258ecb6cb11b5c5)', 'Track fiber tests (#7812)\nUse the newly added tracking system to track the number of fiber tests that are passing/failing.\nI first tried to modify the grunt lint rule for it and send the output in stdout but unfortunately grunt displays the rule + done messages there. I had like 30 lines of js already and I figured I could just write 3 lines of bash and it would work the same. Let me know if you want me to use another approach for it.\nTest Plan:\nRun the commands that have been introduced in this commit but the facts-tracker one\nRun echo $FIBER_TESTS and make sure it prints 666/1434\n(cherry picked from commit 84f8df1f891285b8ff85880631d7882c30b2ced3)', "Fix total count in flow tracker (#7813)\nWhen you put the output of a bash command in a variable, it replaces the \\n with a space. Using ls instead of echo fixes it\nTest Plan:\nRun\nALL_FILES=`find src -name '*.js' | grep -v umd/ | grep -v __tests__ | grep -v __mocks__`\nCOUNT_ALL_FILES=`ls $ALL_FILES | wc -l`\necho $COUNT_ALL_FILES\nMake sure that it outputs 221\n(cherry picked from commit 72ed5df5a4ec25ed76808186555e012799ff5299)", 'React dom invalid aria hook (#7744)\n\n\nAdd a hook that throws a runtime warning for invalid WAI ARIA attributes and values.\n\n\nResolved linting errors.\n\n\nAdded a test case for many props.\n\n\nAdded a test case for ARIA attribute proper casing.\n\n\nAdded a warning for uppercased attributes to ReactDOMInvalidARIAHook\n\n\n(cherry picked from commit 59ff7749eda0cd858d5ee568315bcba1be75a1ca)', 'Fixes #7824 (#7832)\n(cherry picked from commit dae3043897ef581cf399e688739fb58d23b86c7d)', 'Add unknown property warning for use of autofocus (#7694)\n(cherry picked from commit f6fdfd1bf0d13e51098a6009c2c85687b1245c9b)', 'Fix UMD bundles, making safe to use as required modules (#7840)\n(cherry picked from commit 92c84a6f37245f4fbe3ce5dc50845856201637fa)', "Interleave trials in benchmark script\nThis should be more of a fair A/B test so the timings aren't affected by having different load on your system when testing the two alternatives.\n(cherry picked from commit c0007d56e9d653d42276dcc10dd1896507346bff)", 'Make benchmark script work in React 15\n(cherry picked from commit cab835d3a0b4a128ddc3e612fc05e432df20204d)', 'Fix benchmarks (#7704)\n(cherry picked from commit 3fcba2044af17ac309c21dbc88e814a94245987b)', 'Refactor ShallowRenderer (#7739)\n\n\nSeparate ReactShallowRenderer from TestUtils\n\n\nUse ES classes to ReactShallowRenderer\n\n\n(cherry picked from commit 85b0377bfd1b7f3598b7ae5ccea3234a6453a0eb)', 'Fix confusing variable names (#7863)\n(cherry picked from commit 30067fa8caa829cc4470925ceb0687c1698ca277)', 'Update comment to refer to correct method name (#7873)', 'Resolve Flow & Test issues with ReactTestRenderer\nThis is a manual cherry-pick of 2 PRs, updated to handle differences in the stable branch:\n- c78464f8ea9a5b00ec80252d20a71a1482210e57 - Resolve flow errors with ReactTestRenderer (#7736)\n- 7dfa01f9fa3bd4205a3c0faa386319eee2493cea - Revert ReactMultiChild to plain object (#7757)', '15.4.0-rc.1', 'Fix npm package builds (#7888)\n\n\nEnsure lib/ is packaged for react-test-renderer\n\n\nRun npm pack from right working directory\n\n\nWe were running this on the original packages not the compiled ones, resulting in missing files\n(cherry picked from commit 077d660a2727e3d3d6629d3a62693f8509100139)', '15.4.0-rc.2', 'Add Implementation Notes and amend Codebase Overview (#7830)\n\n\nAdd more to Codebase Overview\n\n\nWIP\n\n\nStart a reconciler overview\n\n\nAdd a few more sections\n\n\ntodo\n\n\nWIP\n\n\nFinish it\n\n\nWhitespace\n\n\nMinor tweaks\n\n\nMinor tweaks\n\n', 'removing parent/child references in props section of tutorial (#7887)', 'Fix typo in more-about-refs.md (#7933)', 'Update codebase-overview.md (#7934)\nFix typo', 'Typo fixes in codebase-overview.md (#7938)', 'build: strip @providesModule from output modules (#7968)\nFB tools such as Flow and Jest are having issues finding duplicate modules\nnow that React internal modules are duplicated across packages.', '15.4.0-rc.3', "Fix whitespace in headers (#7980)\nThe script that strips providesModule is very sensitive.\nTest plan:\nSearched for providesModule in build. No more.\nreactComponentExpect used to have problems too but doesn't seem\nto anymore. Don't know why.", '15.4.0-rc.4', 'New Documentation', 'Minor doc tweaks', 'Fix redirects', 'Fix a typo in the doc (#7969)', 'correct order of params in documentation (#7989)', 'Fix grammatical error', "Wrong library name reference in tutorial.MD (#8038)\n\nUpdate tutorial.md\n\nSeems like you are talking about immutable.js and not immutability.js which doesn't exist :)\n\nCapitalize Immutable.js\n", 'Convert the Number component to ListItem (#8039)\n\n\nConvert the Number component to ListItem\n\n\nAdd updated example CodePen\n\n\nAlso fixes typos.', 'Fix anchor link for displayName (#8040)', 'Fix relative link in Hello World (#8041)\n\nFix relative link in Hello World\n\nThis links https://facebook.github.io/docs/installation.html which redirects to https://code.facebook.com/\n\n\nUpdate hello-world.md\n\n\nFix link\n\n', "Fix erroneous '}' in JSX examples (#8043)", 'Fix typo in new tutorial code (#8045)', 'Fix typo in tutorial.md (#8047)\nchangges -> changes', 'Replace vars with let and const (#8051)', 'Update react-without-jsx.md\nFacebook codestyle', 'Update components-and-props.md\nfb indent style', "Update website on Travis when only new files are added (#8037)\nThis build didn't commit the new files because no existing files were changed:\nhttps://travis-ci.org/facebook/react/jobs/169622664\nThis should work better.", 'Fix for typos (#8046)', 'Fix illogical code in tutorial.md (#8048)\nThe tutorial wants to throw a \'warning\' and explains about \'key\' of React\'s list, but it throws nothing since there is sensible key.\n"key={move}" should be removed, and added after explaining about key.', 'Fix typo (#8056)', 'Update handling-events.md (#8057)', 'Update tutorial.md, Taking Turns (#8058)', 'Docs replace reference to \'getInitialState\' with \'state\' instance property in "Thinking in React" (#8059)', 'Link to lifecycle methods from Context doc (#8062)', 'Remove references to createClass in createElement docs (#8064)', 'Fix typos (#8067)', 'Docs : Fix createClass reference (#8073)\nCurrently react.createClass is wrongly referenced to #react.createclass. Changed it to #createclass!', 'Add more highlighting to docs (#8076)\n\n\nTweak JSX in Depth\n\n\nAdd highlighting to Refs and the DOM\n\n\nMore tweaks\n\n', "removed duplicated 'the' (#8081)", 'Update lists-and-keys.md (#8090)\nThere is mismatching variable name both definition and usage.\nIn line 156, an argument name called item is change to match the usage in line 158.', 'Fix an argument name of TestUtils.renderIntoDocument (#8104)', "Use const instead of var (#8107)\nIt clarifies that history and current won't be reassigned.", 'Fix typo in reconciliation.md (#8110)', 'Forms Update (#8112)\n\n\nReapplied fixes to updated docs from master\n\n\nReapplied fixes to Forms, removed ES2016 function includes()\n\n\nMissing carriage return\n\n\nAdding back some line breaks\n\n\nMaking requested changes.\n\n\nMaking space changes\n\n', 'Docs update - Additional (#8115)\n\n\nReapplied fixes to updated docs from master\n\n\nReapplied fixes to Forms, removed ES2016 function includes()\n\n\nMissing carriage return\n\n\nAdding back some line breaks\n\n\nMaking requested changes.\n\n\nMaking space changes\n\n\nFixed typo and removed unnecessary hyphen.\n\n\nReworded select, and highlighted line\n\n\nFixed string styles\n\n\nRefactored  to use htmlFor\n\n\nAnother refactor of \n\n\nRemoved name prop from radiobutton\n\n', 'Tweak Forms', 'Update forms.md (#8121)', 'added word break (#8120)', 'Correct usage of formatName() function in docs (#8122)\nThe code section above these changes defines a formatName function\nthat expects a parameter user. The code section containing these\nchanges incorrectly called formatName(user.name). For those following\nalong with CodePen, this section should correctly call\nformatName(user).', 'Fix: Remove unneeded else branches from documentation examples', 'Improve devtools image size for the tutorial (#8114)', 'Clarify how transition props work (#8124)', 'Update reference-react-component.md (#8126)\nline 320: For example, this code ensures that the color prop is a string', 'update-unknown-warning-page - add a reason for the warning (#8131)\n\n\nupdate-unknown-warning-page - add a reason for this warning\n\n\nMinor tweaks\n\n', "In the community support doc, I noticed that the React Facebook (#8138)\npage link is broken since it's missing '.com'.", 'add missing verb (#8139)\nwhy is an should be why it is an', "Update codebase-overview.md (#8142)\n\nUpdate codebase-overview.md\n\nFix the broken source code URL in 'Event System' section.\n\nUpdate codebase-overview.md\n\nRe-fix link name", 'Remove duplicated word in doc (#8157)\nGets rid of an obsolete word in the documentation for "State and Lifecycle":\n"Consider the ticking clock example from the one of the previous sections."\n->\n"Consider the ticking clock example from one of the previous sections."', 'Fix method markdown highlight (#8218)', 'Add React Remote Conf 2016. (#8094)\nAdd video links to some conferences.', 'Organize and add confs (#8129)\nUpcoming proximity followed by past chronological.', 'Add Agent Conference to conferences docs (#8196)\n\n\nAdd Agent Conference to conferences docs\n\n\nMove Agent Conference to upcoming conferences\n\n', "Add React Amsterdam 2017 (#8235)\nWe've recently announced the dates for our next React Amsterdam edition, looking forward on adding it to the list.", 'Docs: add a bunch of redirects (#8137)\n\n\nadd a bunch of redirects\n\n\nadd more redirects\n\n', 'Fix error codes (#7999)\n\n\ntook codes.json from the 15-dev branch\n\n\nfixed react:extract-errors task in gulpfile\n\n\ngenerated error codes\n\n\nRevert "generated error codes"\n\n\nThis reverts commit b8f3aeed9d8f0d469edd5f6623fa6090930594d8.\n\nAdded a README for the error code system\n', 'Fix error codes (#7999)\n\n\ntook codes.json from the 15-dev branch\n\n\nfixed react:extract-errors task in gulpfile\n\n\ngenerated error codes\n\n\nRevert "generated error codes"\n\n\nThis reverts commit b8f3aeed9d8f0d469edd5f6623fa6090930594d8.\n\nAdded a README for the error code system\n', 'forms breakup', 'Fix captured/bubbled in ReactNativeTreeTraversal (#8019)\nFollow-up to #7741. Added a test for RN event bubbling that fails before the fix.\n(cherry picked from commit a8beab3341f699efcbc886b0b63710891a688db4)', 'Shares debugID information across modules (#8097)\nPrior to this, React was using a nextDebugID variable that was locally\nscoped to both instantiateReactComponent and ReactShallowRenderer.\nThis caused problems when the debugIDs would collide, the itemMap in\nReactComponentTreeHook would be overwritten and tests would fail\nwith the message "Expected onBeforeMountComponent() parent and\nonSetChildren() to be consistent".\nThis change shares the debugID with both modules thus preventing any\ncollisions in the future.\n(cherry picked from commit 6eebed0535a5e28effb7200783cede7a4bdab7ec)', "Use _hostContainerInfo to track test renderer options (#8261)\n\nUse _hostContainerInfo to track test renderer options\n\nThe transaction is not available when unmounting or updating the\ninstance, so we track it using _hostContainerInfo\n\n\nThrow if hostContainerInfo is not populated in getPublicInstance\n\n\nLinting fixes\n\n\nRemove transaction from ref lifecycle code path\n\n\nWe don't need to pass the transaction around anymore since we store the\ntest options on _hostContainerInfo instead\n\nRemove unused argument\n\n(cherry picked from commit e43aaab2547870bc80c0b778604c5ee55b1d87f0)", 'Update dependencies / shrinkwrap', 'Update error codes', "Merge branch '15-dev' into 15-stable", 'Update Changelog & Readme for 15.4.0', '15.4.0']v15.3.2 React

Remove plain object warning from React.createElement & React.cloneElement. (@spudly in #7724)

React DOM

Add playsInline to supported HTML attributes. (@reaperhulk in #7519)
Add as to supported HTML attributes. (@kevinslin in #7582)
Improve DOM nesting validation warning about whitespace. (@spicyj in #7515)
Avoid "Member not found" exception in IE10 when calling preventDefault() in Synthetic Events. (@g-palmer in #7411)
Fix memory leak in onSelect implementation. (@AgtLucas in #7533)
Improve robustness of document.documentMode checks to handle Google Tag Manager. (@SchleyB in #7594)
Add more cases to controlled inputs warning. (@marcin-mazurek in #7544)
Handle case of popup blockers overriding document.createEvent. (@Andarist in #7621)
Fix issue with dangerouslySetInnerHTML and SVG in Internet Explorer. (@zpao in #7618)
Improve handling of Japanese IME on Internet Explorer. (@msmania in #7107)

React Test Renderer

Support error boundaries. (@millermedeiros in #7558, #7569, #7619)
Skip null ref warning. (@Aweary in #7658)

React Perf Add-on

Ensure lifecycle timers are stopped on errors. (@gaearon in #7548)
 ['Update website for 15.3.1', 'Link to Create React App (#7654)\n\n\nLink to Create React App\n\n\nReword\n\n', 'add explicit link to http://bower.io/ (#7546)\n(cherry picked from commit 32e60fecdcfa63c7e99712b91e99ca25c5354d9e)', 'doc: npm ls react is a better advice (#7513)\nRefs Must Have Owner Warning\nnpm ls react is a better advice than npm ls | grep react\n(cherry picked from commit 517a0dc051541fcf3dd6d5ac03d0fc272d1399d3)', 'docs: re-position comments to account for code sample width (#7602)\n(cherry picked from commit 9511b4fe291885f49f204e0324d5b8cc6d22b018)', 'Adds minor additions clarifying questions I had reading intro tutorial (#7595)\n(cherry picked from commit ee199381def77ed55551dfeca2d6604c1967b516)', 'Add line breaks to examples on 10.1-animation docs per (#7606)\ncomments to issue #7317.\nUpdated JP doc examples to match other languages\nReformat to match JSX multi-line style #7550\n(cherry picked from commit 3071f31d04d4763ccd6c7627f2818693ce52b704)', 's/npmcdn/unpkg/g (#7609)\nnpmcdn.com is moving to unpkg.com. Same backend, one less letter in the\ndomain name. Boom.\n(cherry picked from commit 9fd42264fe1fc22f37d5b9cab863dd5b9319be9e)', 'docs:translate doc 11-advanced-performance to chinese (#7584)\n(cherry picked from commit 4c365ea9573f2f4b0af6ddebc9397fc778b65712)', 'Fix the HTML for package management (#7656)\n(cherry picked from commit ed8a753346661ca8ecff04385f6cf4abe87167c1)', "Merge remote-tracking branch 'upstream/15-stable' into 15-dev", 'Improve validateDOMNesting message for whitespace (#7515)\nFor #5071.\n(cherry picked from commit 6a659606415d4853026df6e6d525274fdc7d35ea)', 'Avoid "Member not found" error in IE (#7411)\nExplanation, discussion, and similar change as #7343\nAddresses #7320\n(cherry picked from commit a8741963dc661432caa906c295a0477691bad614)', 'Add missing KeyUp eventType (#7533)\nFixes #7222.\n(cherry picked from commit 869cb05b7649a6787bf64ab50d584e9d664c5cd2)', 'Add playsInline as an allowed HTML property (#7519)\nThe WHATWG has unprefixed -webkit-playsinline as playsinline (see: https://github.com/whatwg/html/pull/1444) and iOS 10 intends to use it (https://webkit.org/blog/6784/new-video-policies-for-ios/).\n(cherry picked from commit 7b11aa9450e3040199ca83faa8c191956e82e99c)', 'Ensure lifecycle timers are stopped on errors (#7548)\n\nEnsure lifecycle timers are stopped on errors\n\nFixes #7349\n\nAddress review feedback and add an extra test\n\n(cherry picked from commit a229cdba7fd00799d82c1bab23704220d47e6331)', 'Support error boundaries on ReactTestRenderer (#7558)\n(cherry picked from commit 38f74bcaf4a4a787dc5634c56c660beacd7df074)', 'Changed to !document.documentMode (#7594)\n(cherry picked from commit 8397ef58db543bc63bfa3b45d7b8d15ac9c1e409)', 'Warn if input changes controlledness - also for null (#7544) (#7603)\n(cherry picked from commit ba84b5b0a7047115e60a8fc68d563782a5756fba)', "Add 'as' keyword (#7543) (#7582)\n\n\nAdd 'as' keyword (#7543)\n\n\nfix commenting to adhere to styling\n\n\nfix grammar in comment\n\n\n(cherry picked from commit c85f46320e6062097c1e02d39944d697e5dd3cf3)", 'Add checkpoint/rollback to ReactNativeReconcileTransaction (#7619)\n(cherry picked from commit 51f04fdbc10041106eee45ca539d842bc74c5c80)', 'Improve error boundaries tests (#7569)\n(cherry picked from commit 7d7defe30f9e8124185676fa7e2c841ffee17ed5)', 'Guarded ensureScrollValueMonitoring against some malicious script on the Internet overriding native document.createEvent (fixes #6887) (#7621)\n(cherry picked from commit 51476de9134f1a9d060dfe7566a1c752b68b381f)', 'Copy all SVG child nodes when using setting innerHTML in IE (#7618)\n(cherry picked from commit c73d8633c371cce6535c1f04cbfd5e09e9ee2069)', 'Add more specific link to react-addons-shallow-compare readme (#7608)\n(cherry picked from commit 2e38fcf355b62d80a3a6bdd85744eee290fb8def)', 'Use compositeType in warning invariant for refs (#7658)\n(cherry picked from commit 06ea71d3fdd614e12c659c2f08f371c6b01fe880)', 'BeforeInput is fired with a wrong text at a wrong time on IE (#7107)\n(cherry picked from commit a64ca9b697d0808a2966465fea2e658e4f310080)', 'remove plain object warning (#7724)\n(cherry picked from commit b2297ae6c3117ca9b3e15aedaf73d9187eb88e6c)', '15.3.2-rc.1', "Merge branch '15-dev' into 15-stable", 'Update Changelog & Readme for 15.3.2', '15.3.2']v15.3.1 React

Improve performance of development builds in various ways. (@gaearon in #7461, #7463, #7483, #7488, #7491, #7510)
Cleanup internal hooks to improve performance of development builds. (@gaearon in #7464, #7472, #7481, #7496)
Upgrade fbjs to pick up another performance improvement from @gaearon for development builds. (@zpao in #7532)
Improve startup time of React in Node. (@zertosh in #7493)
Improve error message of React.Children.only. (@spicyj in #7514)

React DOM

Avoid <input> validation warning from browsers when changing type. (@nhunzaker in #7333)
Avoid "Member not found" exception in IE10 when calling stopPropagation() in Synthetic Events. (@nhunzaker in #7343)
Fix issue resulting in inability to update some <input> elements in mobile browsers. (@keyanzhang in #7397)
Fix memory leak in server rendering. (@keyanzhang in #7410)
Fix issue resulting in <input type="range"> values not updating when changing min or max. (@troydemonbreun in #7486)
Add new warning for rare case of attempting to unmount a container owned by a different copy of React. (@ventuno in #7456)

React Test Renderer

Fix ReactTestInstance::toJSON() with empty top-level components. (@Morhaus in #7523)

React Native Renderer

Change trackedTouchCount invariant into a console.error for better reliability. (@yungsters in #7400)
 ['Update website for 15.3.0', "Add “Don't Call PropTypes” warning (#7219)\n(cherry picked from commit 8329856a3f8a357e7c217bd02cade89cb84fa7b0)", '[docs] Add permalink to PropTypes warning page (#7377)\nFollowup to #7219, which was created before the Jekyll 3 upgrade, which needs the permalink field.\n(cherry picked from commit 25aa5e36c9ff00bb4cb06a7563042c52eb22432d)', 'Update tutorial with reference to autobinding docs (#6870)\n\n\nUpdate tutorial with reference to autobinding docs\n\n\nUpdate tutorial to clarify that autobinding happens specifically with createClass() API\n\n\n(cherry picked from commit f329099831b2cfafffc5fedf8f27497697ba4bff)', '[docs] add permalink for newly translated page (#7380)\n(cherry picked from commit 57ae3b389d61a82e2883c30288f45421cbf819b8)', '[docs] Use npmcdn (#7394)\n(cherry picked from commit 1bb257de93a17279e6301801abdb93e4e22192f2)', '[docs] Use appropriately sized og:image (#7417)\nAlso runs through Imageoptim for smaller size.\n(cherry picked from commit b910a1478de7661734759b0b66802e999ed67a3f)', 'Relay blog post (#7433)\n(cherry picked from commit aca62e7d24f78fbe41cc1622c766c8741b089017)', 'Fix link formatting on Relay blog post (#7434)\n(cherry picked from commit ba2230df29b9d2073cdd0a606194993bea95d885)', "Merge branch '15-stable' into 15-dev", 'Add babel-plugin-transform-class-properties (#7322)\n\n\nadded babel-plugin-transform-class-properties\n\n\nremoved babel-plugin- prefix\n\n\n(cherry picked from commit fc04e853f8204ff2311a3d08b159aa5475a34d41)', 'Avoid validation warning when inputs change type (#7333)\nFor controlled inputs, updateWrapper was getting called before the\ntype prop had a chance to update. This could lead to a case where\nswitching from the text to number type caused a validation error\nthat would prevent the proper input value from being assigned.\nThis commit moves the call to ReactDOMInput.updateWrapper below\n_updateProperties to avoid this situation.\n(cherry picked from commit 08a0895887c82e379d7717439c7a8d0b015e0696)', 'Merge pull request #7321 from keyanzhang/codemod-es6-component\nCodemod tests from createClass to ES2015 classes\n(cherry picked from commit 484f96bb618948443285f0314d0df34b419a45a5)', 'fix doc for React Native mountComponent (#7313)\n(cherry picked from commit 85dcbf83c5c0c9165dfe7fc440faf9e019ba8642)', 'Remove unused unmountIDFromEnvironment (#7259)\nI got rid of the need for this a few months ago.\n(cherry picked from commit 30aa84181d98dc9498f7e1eb3ded817d8faf65f6)', 'Avoid "Member not found exception" in IE10 (#7343)\n\'change\' custom events raise "Member not found" in <= IE10. To\ncircumvent this, the SyntheticEvent class now checks for "typeof\nevent.cancelBubble !== \'unknown\'". This eliminates this exception and\nmaintains the expected bubbling functionality.\nAddresses #7320.\n(cherry picked from commit 2823dfcbfbf1602086a5cc64aea1c9859f67c38c)', 'Merge pull request #7381 from keyanzhang/rename-hooks\nRename Devtool to Hook\n(cherry picked from commit 328fc75bc910032ff37dc9d93429fb14b476bd0d)', 'Change trackedTouchCount invariant into a console.error (#7400)\n\n\nChange trackedTouchCount invariant into a console.error\n\n\nFix ResponderEventPlugin lint warning\n\n\n(cherry picked from commit 0fb8febd0ab40d97a936a6c89412f28080e56903)', 'Fix  with type date/time/etc. issue on mobile browsers (#7397)\nFix  with type date/time/etc. issue on mobile browsers\n(cherry picked from commit 8af6f9e5a2f74256b6dc955bbc8be3d90435151e)', 'Specify "files" field for npm packages (#7396)\n(cherry picked from commit c5cb5b8bd86e03867e0c0a4fdd7dbf61b3f9f055)', 'Fix JSON in package.json (#7408)\n(cherry picked from commit d1cff59ddcdfe3dcd00fea5c1af665b872fc43f6)', 'Remove unused createHierarchyRenderer (#7454)\n(cherry picked from commit c848b65378ac15b5b98a1e486f76945e9a6426c1)', "Fix memory leak in ReactChildrenMutationWarningHook for SSR (#7410)\n\n\ncorrected ReactChildrenMutationWarningHook's name\n\n\nchanged onComponentHasMounted to onMountComponent\n\n\nand get element from ReactComponentTreeHook instead of keeping an internal store\n(cherry picked from commit 5514ea369d7f60127ae15774e1276b21cd7c0107)", "Prevent performance regression in DEV due to warning arguments (#7461)\n\nPrevent internal performance regression\n\nThis only affects Facebook website, not open source version of React.\nOn the Facebook website, we don't have a transform for warnings and invariants.\nTherefore, expensive arguments will be calculated even if the warning doesn't fire.\nThis fixes a few cases where that calculation might be more expensive than usually.\nIn my testing, this brings down average row click time in Power Editor from ~300ms to ~220ms in DEV (vs ~40ms in prod).\n\nPut warning() that shows up in profile behind condition\n\n(cherry picked from commit 178cb7d3392505cd393b68e4e061c6ef860344a1)", 'Fix unmounting performance regression in DEV (#7463)\n\n\nComment previous occurrences of this issue\n\n\nFix DEV performance regression in V8\n\n\nExtract try/catch into a separate function when calling hooks\n\n\n(cherry picked from commit afa27bc4d572b4855949e643d77f080b94528ab6)', "Remove unnecessary indirection and events from the hooks (#7464)\n\n\nRemove unnecessary indirection from the tree hook\n\n\nReplace onSetDisplayName, onSetOwner, onSetText with one event\n\n\nLess events is better.\nonSetDisplayName, onSetOwner, and onSetText only existed because we didn't initially track elements.\n\nRemove unused variables\n\n(cherry picked from commit 1f31357a2e6643ae3ff8e8a583a2c773d7b2209e)", "Consolidate hook events (#7472)\n\nRemove onBeforeMountComponent hook event\n\nIt is unnecessary.\nWe now pass the element as part of onInstantiateComponent, and it can't change before mounting.\n\nRemove onComponentHasMounted hook event\n\nIt is unused after #7410.\n\nReplace on(Begin|End)ReconcilerTimer hook events\n\nWe already have onBeforeUpdateComponent.\nLet's just have on(Before?)(Mount|Update|Unmount)Component and stick with them.\nThis removes double event dispatches in some hot spots.\n\nRemove onComponentHasUpdated hook\n\nThe tests still pass so presumably it was not necessary.\n\n\nAdd missing DEV to TestUtils code\n\n\nReplace on(InstantiateComponent|SetParent) with onBeforeMountComponent\n\n\nThis lets us further consolidate hooks.\nThe parent ID is now passed as an argument to onBeforeMountComponent() with the element.\n\nRemove onMountRootComponent hook event\n\nIt is unnecessary now that we pass the parent ID to onBeforeMountComponent.\n\nUse parentDebugID = 0 both for roots and production\n\nThis removes some awkward branching.\n(cherry picked from commit 0e976e136c0d0841aec71de4a4f6163963763d3f)", 'Improve DEV performance in Chrome (#7483)\n\n\nEnsure this._domID is always a number\n\n\nEnsure this._rootNodeID is always a number\n\n\n(cherry picked from commit 4b734f7a025c828be8c5d85f7c8d88679ae8f952)', 'Remove ReactDOMInstrumentation (#7481)\nIts events are not being used anywhere.\n(cherry picked from commit cba2b19b84b339e937b4bbc258cd09b2b8303391)', 'Regenerate error codes', '15.3.1-rc.1', 'Add some semicolons for linting. (#7390)\n(cherry picked from commit 8aed0cd67ec7c52a689bd729ad4ec9ee4a80b45b)', 'Fix ReactComponentTreeHook.getRegisteredIDs() to work with inlined content (#7490)\nI broke this in #7463: parseInt() cuts off #text at the end.\nChanging to just use negative numbers instead.\n(cherry picked from commit a73886456e0cd07d2c9c93459d3f7625876ff7c9)', "Don't define key or ref dummy props if none were provided (#7488)\n\nDon't define key or ref dummy props if none were provided\n\nThis fixes a performance regression.\n\nStyle nit\n\n(cherry picked from commit a56e105081e27877a2ecbfdc8d591e3b151b2af1)", 'Fix typo in changelog (#7468)\n(cherry picked from commit fdc91e016fc4b065ee82e31481ae7a3a66fedbfa)', 'Use ES6 Map in ReactComponentTreeHook if available (#7491)\n\n\nUse ES6 Map in ReactComponentTreeHook if available\n\n\nMake getRootIDs fast again\n\n\nOnly use native Map\n\n\n(cherry picked from commit db452bd20bb2f4f7f0a5621c07c6eec6dc618179)', 'Avoid object iteration when creating DOM factories (#7493)\n(cherry picked from commit e5f9ae27058052e72d6fb6d89c6ca93075e4089a)', 'Remove last use of mapObject (#7494)\n(cherry picked from commit 8d1e416d9a56bb126d2f50038acb3663f7655ed0)', 'Avoid indexOf() during unmounting a root in the hook (#7496)\n\n\nAvoid indexOf() during unmounting a root in the hook\n\n\nCheck for (Map|Set).prototype.keys\n\n\n(cherry picked from commit 48475787b470f559be0a10229510fdb2c4640b42)', 'Fix flow (#7499)\nReactElement requires a generic argument now and the return function of render is a ReactTestInstance and not a ReactElement.\n(cherry picked from commit 9a48b5ca7b007c850054fef7a7439f06b3e10f80)', 'Fix for #7170 (#7486)\n\n\nWrite failing test\n\n\nEnsure .min and .max are set before .value\n\n\nAdjusting test for false negative\n\n\nRevert test adjustment (apparently it was only failing locally)\n\n\n(cherry picked from commit 3013afe2d566cc0f76eae39817815541bd78b67c)', '15.3.1-rc.2', 'change a word in performance docs (#7442)\n(cherry picked from commit 0833d897835b1fd20ebca043b9448981e87521f7)', 'Capitalize AJAX (#7435)\n(cherry picked from commit 43674d989d792fc72534b3cc275723a552c12ab8)', 'Add propsTypes and defaultProps example for stateless functions (#7458)\n\n\nAdd propsTypes and defaultProps example for stateless functions\n\n\nUpdate 05-reusable-components.md\n\n\nUpdate 05-reusable-components.md\n\n\n(cherry picked from commit 09f0a06b8ac86195f16aa476dbd85233d7b42a9a)', 'React.Children.toArray() changes keys (#7495)\nAs noted by @spicyj in #5541\n(cherry picked from commit aa48c82b0dd088730062b2904c64f91b3220dfcf)', 'Update 09.2-package-management.md (#7520)\n(cherry picked from commit db6f36bdce783ddc9c317fe76ffe96fa97f8fd24)', 'Fix header link generation for non-English docs (#7497)\n(cherry picked from commit 11c0adcc9574ad7eda53aa3e797681630b0b7c76)', 'Fix slow performance of PropTypes.oneOfType() on misses (#7510)\nIt used to be slow whenever a type miss occurred because expensive Error objects were being created. For example, with oneOfType([number, data]), passing a date would create an Error object in number typechecker for every item.\nThe savings depend on how much commonly you used oneOfType(), and how often it had “misses”. If you used it heavily, you might see 1.5x to 2x performance improvements in __DEV__ after this fix.\n(cherry picked from commit 680685bec4f260fe635c66297fc3fb38a5116e07)', 'Update onlyChild invariant message (#7514)\n(cherry picked from commit 921d8c151ba8114a2314f32cd453d8954aeb19fc)', "Warn if using React.unmountComponentAtNode on a different React instance's tree. (#7456)\n\nWarn when using React.unmountComponentAtNode on a different React instance's tree\n\nhttps://github.com/facebook/react/issues/3787\n\n\nAdding tests.\n\n\nImplementing recommended changes.\n\n\nhttps://github.com/facebook/react/issues/3787\n(cherry picked from commit a9e681a82818bc92a512383caf060b4114a9eb97)", 'Fix ReactTestInstance::toJSON() with empty top-level components (#7523)\n(cherry picked from commit 9f5b009f056d90e8d6a2a78c0e1292b00d33e019)', 'Upgrade to fbjs v0.8.4 (#7532)\n(cherry picked from commit 944be183571b79e596cd6202d767cf6e56bdc100)', 'regenerate error codes', 'Update deps and re-shrinkwrap', "Merge branch '15-dev' into 15-stable", 'Update changelog for 15.3.1', 'Update readme for 15.3.1', '15.3.1']v15.3.0 React

Add React.PureComponent - a new base class to extend, replacing react-addons-pure-render-mixin now that mixins don't work with ES2015 classes. (@spicyj in #7195)
Add new warning when modifying this.props.children. (@jimfb in #7001)
Fixed issue with ref resolution order. (@gaearon in #7101)
Warn when mixin is undefined. (@swaroopsm in #6158)
Downgrade "unexpected batch number" invariant to a warning. (@spicyj in #7133)
Validate arguments to oneOf and oneOfType PropTypes sooner. (@troydemonbreun in #6316)
Warn when calling PropTypes directly. (@Aweary in #7132, #7194)
Improve warning when using Maps as children. (@keyanzhang in #7260)
Add additional type information to the PropTypes.element warning. (@alexzherdev in #7319)
Improve component identification in no-op setState warning. (@keyanzhang in #7326)

React DOM

Fix issue with nested server rendering. (@Aweary in #7033)
Add xmlns, xmlnsXlink to supported SVG attributes. (@salzhrani in #6471)
Add referrerPolicy to supported HTML attributes. (@Aweary in #7274)
Fix issue resulting in <input type="range"> initial value being rounded. (@troydemonbreun in #7251)

React Test Renderer

Initial public release of package allowing more focused testing. Install with npm install react-test-renderer. (@spicyj in #6944, #7258, @iamdustan in #7362)

React Perf Add-on

Fix issue resulting in excessive warnings when encountering an internal measurement error. (@sassanh in #7299)

React TestUtils Add-on

Implement type property on for events created via TestUtils.Simulate.*. (@yaycmyk in #6154)
Fix crash when running TestUtils with the production build of React. (@gaearon in #7246)
 ['Update website for 15.2.1', 'Changelog fixes', 'Fix typo in previous changelog update', 'Merge pull request #7229 from zpao/blog-post-errorcodes\nBlog post for error codes\n(cherry picked from commit 92492e08b2193cd4c0e2ef9d51b7116d6b439071)', 'Add a new blog post about mixins', 'Fix typos in “Mixins Considered Harmful” (#7275)\n\n\nFix typos in “Mixins Considered Harmful”\n\n\nUse consistent code style\n\n', 'Reformat event names in Media Events section (#7250)\n(cherry picked from commit 45223dc8bf498c59bef5fd769b9d56cfe0467a64)', 'Remove uneccesary colon (#7238)\nOnly use a colon after a statement that is a complete sentence, like Grammer Girl says.\n(cherry picked from commit 473097144cbfa183bdc3c4e7d2b742affd2fc7f2)', "Merge branch '15-stable' into 15-dev", 'Warn if people mutate children. (#7001)\n(cherry picked from commit 49238b944046abf086ba80ab5e984ce8a8175a1d)', 'Resolve refs in the order of the children (#7101)\n\nResolve refs in the order of the children\n\nReact makes no guarantees about ref resolution order. Unfortunately, some of the internal Facebook component APIs (specifically, layer dialogs) currently depend on the ref resolution order. Specifically, the assumption is that if the layer dialog is placed as a last child, by the time it mounts or updates, the refs to any previously declared elements have been resolved.\nWith the current ReactMultiChild, this is usually the case but not always. Both initial mount and an update of all components satisfy this assumption: by the time a child mounts or updates, the previous children’s refs have been resolved. The one scenario where it isn’t true is when a new child is mounted during an update.\nIn this case, the mountComponent() call used to be delayed until ReactMultiChild processes the queue. However, this is inconsistent with how updates normally work: unlike mounting, updating and unmounting happens inside ReactChildReconciler.updateChildren() loop.\nThis PR changes the mountComponent() to be performed inside ReactChildReconciler, just like receiveComponent() and unmountComponent(), and thus ensures that attachRef() calls are enqueued in the order the children were processed, so by the time the next child flushes, the refs of the previous children have been resolved.\nThis is not ideal and will probably be broken by incremental reconciler in the future. However, since we are trying to get rid of mixins in the internal codebase, and layered components are one of the biggest blockers to that, it’s lesser evil to temporarily make ref resolution order more strict until we have time to fix up the layer APIs to not rely on it, and are able to relax it again (which would be a breaking change).\n\nUse array instead of object to avoid lookups\n\n(cherry picked from commit 83cbc3e5fb700f45c48214c3785d8b44ab5ebdce)', '[TestUtils] Copy type to nativeEvent in Simulate. (#6154)\nAlthough it is unreasonable to set every possible property for\nsimulated events, type is useful for event handlers that are shared\nbetween types and potentially have different behaviors.\n(cherry picked from commit 5a20d449f64ff2d9ef3d4346655244f435880327)', 'Warn if the included mixin is undefined (#6158)\n(cherry picked from commit 18bad0669f6ee698da40878adcf3e6a718d1e601)', 'Fix tests from #6158 to use Jasmine 2 (#7126)\n(cherry picked from commit a49b7a2dfb57852264eb83a7510490d19268089c)', 'Make "unexpected batch number" a warning (#7133)\nThis was added to catch internal errors in React but doesn\'t seem to be doing much good except frustrating people more when their apps throw (#6895, FB-internal t11950821). Until more proper error boundaries land, let\'s make this a warning.\n(cherry picked from commit abcd5673251b3e17fc42ea9c93a2c6bd4068855e)', 'Fix for #5468: Validate PropTypes.oneOf(Type) arguments early (#6316)\n\nFix for 5468: Validate proptype definitions sooner\n\nAdded typeCheckWarn() func and updated the oneOf/oneOfType tests\nAdded DEV warning for invalid oneOf/OneOfType args\n\n\nSuppress redundant error on warn; typeCheckWarn() removed\n\n\nReturn no-op\n\n\nUsing emptyFunction module for consistency\n\n\nRemove createChainableTypeChecker() call\n\n\nAdjust test to assert type check passes when warned\n\n\n(cherry picked from commit 6cc037bd0d49f1f55cbdd36fbfd395118c64d393)', 'Warn if PropType function is called manually (#7132)\n\n\nWarn if PropType function is called in production\n\n\nCheck if console is undefined before warning\n\n\nRandomize value of ReactPropTypesSecret\n\n\nRemove dev environment tests\n\n\nRename typeCheckPass to productionWarningCheck\n\n\nRename productionWarningCheck to expectWarningInProduction\n\n\nCall toString on Math.random()\n\n\nRename test block for React type checks\n\n\nMake sure warning isnt emitted for failing props\n\n\nCache warning by component and prop, warn in dev\n\n\nPass ReactPropTypesSecret to internal checks\n\n\nMove tests to ReactPropTypes-test.js\n\n\nUpdate the warning message to include link\n\n\nDo not test warning for unions  with invalid args\n\n\n(cherry picked from commit 95ac239cf3c527b70daeb433b7aeeaf9e41be9e5)', 'Use hardcoded value for PropType secret (#7194)\nRename secret!\n(cherry picked from commit 2c93a41580030ae44105626cdd19c97704128771)', 'consistent owner for stateless component (#6534)\n(cherry picked from commit b11540ccb2321aeb7259fcf0b3a38aeeea35231d)', "Add React.PureComponent (#7195)\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use React.Component.\nInheriting from React.PureComponent indicates to React that your component doesn't need to rerender when the props are unchanged. We'll compare the old and new props before each render and short-circuit if they're unchanged. It's like an automatic shouldComponentUpdate.\n(cherry picked from commit c8fbdac22717e91d1f1638a932eed3ce4cc39ff7)", 'Fix unmounting performance regression in V8 (#7232)\nAs reported in #7227, unmounting performance regressed with React 15.\nIt seems that delete has become much slower since we started using numeric keys.\nForcing dictionary keys to start with a dot fixes the issue.\n(cherry picked from commit 64e7602b3b9af9a43fd2f3495d3b13a398bb94d9)', 'Add xmlns and xmlns:xlink attributes (#6471)\n(cherry picked from commit 9a80d428176143babced0b7ed609e4d95b901b22)', 'Fixed all eslint warnings (#7230)\n(cherry picked from commit c52a2b9ab0d86079f0b24163cc74eac321906fe1)', 'Add link to video chat with @spicyj (#7252)\n(cherry picked from commit 12bc80a6dc05773c0b5fb7f5c2191b7920f7f4f9)', "Update benchmarks to be more realistic polymorphically (#7255)\nPreviously, the extract-components script would create the same number of layers of composites as the page it captures, but it would output a new class for each time any composite is used (since we don't want to replicate all the component logic).\nI changed the script to output a single type for each type in the input -- and each generated component takes an index for which output it should return. This should be closer to how the original code behaves, especially with respect to VM function call lookups where the amount of polymorphism makes a difference.\nI re-recorded the benchmarks with the new scripts. They run significantly faster:\n```\nComparing old.txt (control) vs new.txt (test)\nSignificant differences marked by ***\n% change from control to test, with 99% CIs:\n\nssr_pe_cold_ms_jsc_jit\n    % change: -41.73% [-43.37%, -40.09%]  ***\n    means: 39.3191 (control), 22.9127 (test)\nssr_pe_cold_ms_jsc_nojit\n    % change: -44.24% [-46.69%, -41.80%]  ***\n    means: 45.8646 (control), 25.5764 (test)\nssr_pe_cold_ms_node\n    % change: -45.61% [-47.38%, -43.85%]  ***\n    means: 90.1118 (control), 49.0116 (test)\n```\n\nThis is probably in part due to the changes here, but also the page I captured has changed somewhat in the meantime and there seem to be slightly fewer components in the hierarchy, so they're not really comparable. But going forward we can use this benchmark which should be more accurate. I also included an identical copy that uses stateless functional components so we can test optimizations to those later.\n(cherry picked from commit e5513eceff9ce8ae24f1d4de934408e2cc47311b)", 'Test renderer improvements (#7258)\nAdds .update(newElement) and .unmount() and makes children reorders and composite type swapping work.\nPart of #7148.\n(cherry picked from commit caec8d5ce719997c15a4d586ceb771fcfbb5ccf7)', 'warn for using maps as children with owner info (#7260)\n(cherry picked from commit 5103e1d6a122685d9a44931163c7ee7d70bc2819)', 'Regenerate error codes', '15.3.0-rc.1', 'Inject default batching after pending transactions (#7033)\n(cherry picked from commit b6e1eb27185dd90e74ad8a67f98f6c5b35043c1a)', 'Add referrerPolicy to HTMLDOMPropertyConfig (#7274)\n(cherry picked from commit cccef3c68310df3bd611df2a7b98a530645c67c0)', 'Renaming: ReactDOM (#7265)\nRename React with ReactDOM\n(cherry picked from commit 2da50a0f181904cb3eecc46a9e0290d75387be85)', 'Fix #7099 (#7251)\n\n\nSet step prop before value prop\n\n\nEmbed comments on .step sequence behavior\n\n\n(cherry picked from commit fc0431079272c8de0207f465f09691d155e870b8)', '15.3.0-rc.2', 'Add mixins property to context example (#7277)', 'Add Design Principles to the docs (#7282)', 'Minor tweaks to Design Principles (#7283)', 'Clarify the section about dogfooding (#7292)', 'Update 03-interactivity-and-dynamic-uis.md (#6972)\n(cherry picked from commit bf0572dde744e7e4a5510b79a3a54d9067ae6de8)', '[docs] Follow up to 6972 - update docs code (#7278)\n(cherry picked from commit 0bfaf5156dfb13d025e696a1095eb1e3d95991af)', 'Merge pull request #7308 from zpao/jekyll3\nUpgrade to Jekyll 3\n(cherry picked from commit 5e3959e071b0750713bddf13e05319cd272a7b05)', 'Switch Travis CI to Trusty Beta (#7309)\n(cherry picked from commit 5ac1bae58eafc1c4967ce3c53041204393e91ed6)', 'Fix TestUtils crash with NODE_ENV=production (#7246)\nI caused it with #7189.\nWe generally don’t recommend running TestUtils in production environment but this is technically a regression.\nFixes #7231.\n(cherry picked from commit 27d7592cf63253b318c9feac564c8ea2fe9d8383)', 'Eagerly evaluate inline requires in Jest (#7245)\n\nEagerly evaluate inline requires in Jest\n\nI inlined some requires in #7188 to fix the build size regression.\nHowever this caused an issue with Jest due to it resetting module registry between tests.\nThis is a temporary fix to #7240.\nIt should be reverted as part of #7178.\n\nMake the hack work in all environments\n\n(cherry picked from commit 15ae5857f6a86ead4143dc100c61d27736cf29d9)', 'prevent spamming warnings related to performance measurement code (#7299)\n\n\nprevent spamming warnings related to performance measurement code\n\n\nminor changes in names and such\n\n\n-\n\n\n-\n\n\n(cherry picked from commit 1cc9a5dc718b7af8801a8ea00b00cf5043bc84d7)', 'Mention actual prop type in element type checker (#7319)\n(cherry picked from commit 8bcea5310e4ac21c7c4f0552c01a270c4746b08b)', 'improved warning in ReactUpdateQueue (#7326)\n(cherry picked from commit 3fd582643ef3d222a00a0c756292c15b88f9f83c)', '15.3.0-rc.3', 'Add blog post', 'Correct grammatical error (subject-verb agreement) (#7338)\n"It is worth repeating: there is no configuration files or complicated folder structures." > "It is worth repeating: there are no configuration files or complicated folder structures."\n(cherry picked from commit c0b7d818727af75b76349f41f2c11530ef5a6902)', 'Host our own images for the blog, use https links (#7339)\n(cherry picked from commit 7614c12ed71e7a76128da62e8eac7835502b6626)', 'Blog post: Fixed typo in post (#7336)\n(cherry picked from commit 1fc5f284c0a3d20fd6e38dddeb2a9756e975a6bd)', 'Wording change in doc (#7348)\n(cherry picked from commit 08059218833b4ebf75d60adae0f201e23dd9b74c)', "Update docs zh cn (#7254)\n\n\nupdate 03-interactivity-and-dynamic-uis.zh-CN\n\n\nupdate 04-multiple-components.zh-CN\n\n\nupdate 05-reusable-components.zh-CN\n\n\nupdat 06-transferring-props.zh-CN\n\n\nupdate 07-forms.zh-CN\n\n\nupdate 08-working-with-the-browser.zh-CN\n\n\nupdate 08 and 08.1\n\n\nupdate 09-tooling-integration.zh-CN\n\n\nrevise\n\n\ndon't use ES6\n\n\n(cherry picked from commit 5b06667efd6d097834f9fa3358733cd8a6fd49a7)", '"transient dependencies" -> "transitive dependencies" (#7341)\nI think that\'s what you meant -- although with npm dependencies are kind of transient :P\n(cherry picked from commit d157827311d85dafbb1c38b9b659f349e44300ae)', 'Added ReactNL conference (#7342)\n(cherry picked from commit 9d33fb0b76af78e0e288f441fe77534bf97443c5)', 'Create 02-displaying-data.zh-TW.md (#7284)\n\n\nCreate 02-displaying-data.zh-TW.md\n\n\nUpdate 02-displaying-data.zh-TW.md\n\n\n(cherry picked from commit fe5128fe8f3bd79a87865cbcbc9c26201e5b19e9)', 'fixed incorrect doc location (#7365)\n(cherry picked from commit c9dc2ab0ecc1ff6c179cae850f296509067866cf)', 'ReactTestRenderer package (#7362)\n(cherry picked from commit 7e874f59f5097f3800539172b5a0e2ee0d898b49)', 'Update version of react-test-renderer', "Merge branch '15-dev' into 15-stable", 'Changelog for 15.3.0', 'Update readme for 15.3.0', '15.3.0']v15.2.1 React

Fix errant warning about missing React element. (@gaearon in #7193)
Better removal of dev-only code, leading to a small reduction in the minified production bundle size. (@gaearon in #7188, #7189)

React DOM

Add stack trace to null input value warning. (@jimfb in #7040)
Fix webcomponents example. (@jalexanderfox in #7057)
Fix unstable_renderSubtreeIntoContainer so that context properly updates when linked to state. (@gaearon in #7125)
Improve invariant wording for void elements. (@starkch in #7066)
Ensure no errors are thrown due to event handlers in server rendering. (@rricard in #7127)
Fix regression resulting in value-less submit and reset inputs removing the browser-default text. (@zpao in #7197)
Fix regression resulting in empty name attribute being added to inputs when not provided. (@okonet in #7199)
Fix issue with nested server rendering. (@Aweary in #7033)

React Perf Add-on

Make ReactPerf.start() work properly during lifecycle methods. (@gaearon in #7208).

React CSSTransitionGroup Add-on

Fix issue resulting in spurious unknown property warnings. (@batusai513 in #7165)

React Native Renderer

Improve error handling in cross-platform touch event handling. (@yungsters in #7143)
 ['Update website for 15.2.0', 'Fix formatting of changelog', 'Add PropTypes.symbol to reusable components doc (#7171)\n(cherry picked from commit 3946ac33b8bad5ad67e6ba887c312312476179f3)', 'Import warnings that currently live in gists. (#7175)\n(cherry picked from commit 26ed910f287b497d19326cefb579265d79f27850)', "Merge branch '15-stable' into 15-dev", 'Move null-input-value-prop warning into devtool, add stack trace (#7040)\n(cherry picked from commit 97d89fa5bf9a09efdac1d6deb3242d8f2cda0bf6)', 'Remove setProps and replaceProps from src (#7045)\n(cherry picked from commit e8fa464d6f4362cadcee625eb29dece56181eb13)', 'Specify possible need for C++ compiler (#7064)\n(cherry picked from commit 4886e028bfcb32c6cdfdf210802f862c1fca971f)', 'Merge pull request #7053 from vjeux/flow_accumulate\n[flow] annotate accumulate, accumulateInto and forEachAccumulated\n(cherry picked from commit 5b4dad31f8838d8752994c32862cedf7cee5a284)', '[flow] type KeyEscapeUtils (#7079)\nSummary:\nThe only call site ensures that the value is not null: https://github.com/facebook/react/blob/dc6fc8cc0726458a14f0544a30514af208d0098b/src/shared/utils/traverseAllChildren.js#L44\nkey is stringified inside of createElement, so we are guaranteed to receive a string right now: https://github.com/facebook/react/blob/dc6fc8cc0726458a14f0544a30514af208d0098b/src/isomorphic/classic/element/ReactElement.js#L142\nTest Plan:\nnpm run flow\nReviewers: @zpao @spicyj\n(cherry picked from commit 12a6ad1ef5e537d20817da93b2346064862589e3)', '[flow] type adler32 (#7080)\nThis one is trivial\nTest Plan:\nnpm run flow\nReviewers: @zpao @spicyj\n(cherry picked from commit 489caeb2d7d62895da7ea9afb0e97344d333a2b5)', '[cleanup] Move ReactStateSetters inside of addons/link (#7085)\nSummary:\nThe only callsite of ReactStateSetters is in LinkedStateMixin which lives in addons/link. Better move it there to avoid cluttering the other folder.\nTest Plan:\nNone\nReviewers: @zpao @spicyj\n(cherry picked from commit b0732ef881cf6fb6b6443d5b801e149b87df2bed)', 'fix webcomponent example issue #7056 (#7057)\n\n\nfix webcomponent example issue #7056\n\n\nupdate fix issue #7056, remove unused web component  callbacks\n\n\n(cherry picked from commit cd9ad90d0513acb835d5bf65cc72210f1028d82d)', 'Remove dead HAS_SIDE_EFFECTS logic (#6987)\n(cherry picked from commit 416b5ef17343acebfd19e1436e3b2990e99e1d0e)', '[flow] type deprecated (#7076)\nSummary:\nTest Plan:\nnpm run flow\nReviewers: @zpao @spicyj @gabelevi\n(cherry picked from commit 9342c2f02f45f290a0740b6bb5d342b55a42bcf9)', '[flow] add some typings to utils (#7104)\n\n\nadd some typings to utils\n\n\nadd typing of flattenChildren\n\n\nmore accurate typings for flattenChildren\n\n\n(cherry picked from commit 3b5c756c7ab711a938b9c10115698ae43eceac86)', 'Remove comment about PooledClass destructors being optional (#6560)\nThey are no longer optional since #4720\n(cherry picked from commit 752e1595fc630b3f632d1535c87d1e6b70c1009c)', 'Fix renderSubtreeIntoContainer to update context (#7125)\n\n\ncreate failing test case\n\n\nFix renderSubtreeIntoContainer to update context\n\n\nFixes #6599\n\n\nAlso test re-rendering due to prop update\n\n\nAddress review feedback\n\n\n(cherry picked from commit 25f9f4563edb0b0daa4687da0c75b3ae010e9816)', 'Reword invariant message about empty tags (fixes #7065) (#7066)\n\n\naddresses issue #7065\n\n\nfix test to use new message\n\n\nfix string in tests\n\n\nfix test string\n\n\nUpdate error message and tests\n\n\n(cherry picked from commit f94912516fc54f7ddd6fb3a2b6925efe6481b3d4)', 'Merge pull request #7034 from sebmarkbage/newreconciler\n[Fiber] Host Container Fiber and Priority Levels\n(cherry picked from commit 291f8e30a98c632cbfb204d35da14d85bcec1faf)', 'Merge pull request #7154 from sebmarkbage/sideeffects\n[Fiber] Host Side Effects\n(cherry picked from commit cf259a4ff82bb6248b41392e821d2822f9ce46c6)', "Unshare not actually shared files (#7167)\nThis moves some files out of shared that are not actually shared\nwith isomorphic. They're specific to the renderers.\n(cherry picked from commit 4bc1048e0dcf03c3f82f88475f1db23d7c969e55)", 'Removed transitionAppearTimeout to remove warning (#7165)\n\nRemoved the prop transitionAppearTimeout from\naddons/transitions/ReactTransitionGroup in order to remove a warning\nwhen passing unknown props to DOM elements.\n(cherry picked from commit 6e5dd8926c3b78626aaf2737ded36bdf23ef6de6)\n', "Trigger a proper no-op warning for async state changes on server (#7127)\nThis commit fixes #5473: ReactDOMServer.renderToString: presence of onClick\nhandler causes errors on async update\nThis commit performs the following changes:\n\nAdds a getUpdateQueue method to ReactServerRenderingTransaction,\n  ReactReconcileTransaction, ReactNativeReconcileTransaction and\n  ReactTestReconcileTransaction\nMake the ReactCompositeComponent call this getUpdateQueue instead of using\n  ReactUpdateQueue that was unwanted at certain moments on server\nOn ReactServerRenderingTransaction, dispatch ReactUpdateQueue's methods\n  while rendering and warning methods afterwards. This is done through the new\n  ReactServerUpdateQueue class\nAdded a series of tests that mimics the case presented in #5473 with setState,\n  forceUpdate and replaceState\nAdd flow typechecking on concerned files\n(cherry picked from commit dbdddf1c82884339cdef56326b336227ea51457d)\n", 'Remove Danger.dangerouslyRenderMarkup as it is dead code (#7185)\n(cherry picked from commit 7d0801e1a085ef7c52b0cc0212404335fa75c717)', '[flow] fix flattenChildren type (#7110)\nSummary:\nMake the debug attribute optional\nTest Plan:\nnpm run flow\nReviewers: @keyanzhang @chicoxyzzy\n(cherry picked from commit 07cfba17a9902e9072b9b73c17a375b2f6b53817)', 'Inline dev-only requires (#7188)\n\nInline dev-only requires\n\nThis reduces the production bundled build size.\n\nUse new references after resetting module registry in tests\n\nThis fixes the tests which were broken due to inlining some requires.\n(cherry picked from commit 8fe6b5fb46ab865381bf0485a0a285d820c6d278)', "[flow] isTextInputElement (#7075)\nSummary:\nI had to cast into any because flow doesn't think that checking the lowercase version of nodeName is a valid way to refine the variable from HTMLElement to HTMLInputElement. I'm also not confident enough in changing the implementation to an instanceof HTMLInputElement to please flow. It also takes care of the null check in the process.\nThe nodeName && condition wasn't useful since the two branches are checking it against concrete values and actually makes the type different since nodeName is not a boolean per se. I replaced them with if conditions to make it clearer what it actually did instead of doing boolean logic tricks.\nIt is unclear why I had to type supportedInputTypes, see this internal post for a discussion: https://www.facebook.com/groups/flowtype/permalink/1084168611631753/\nThe only difference in behavior is that I now explicitely convert to boolean the object dereference via !!.\nTest Plan:\nnpm run flow\nCareful inspection of the code\nReviewers: @zpao @spicyj\n(cherry picked from commit 309215fc40e81354bd06d11e108866f87156fb55)", 'Disable DebugTools in production (#7189)\n(cherry picked from commit 5d31ebcf5fc33732d0a9c8c7ff139f52a989fbd6)', 'Revise ResponderTouchHistoryStore Error Handling (#7143)\nTouch behavior is inconsistent across different platforms, and ResponderTouchHistoryStore currently fatals when assumptions are broken. In addition, the behavior differs between development and production.\nThis pull request does a few things to make ResponderTouchHistoryStore easier to deal with:\nAdds Flow to keep the TouchEvent, Touch, and TouchRecord types straight.\nChanges behavior to be consistent across environments. This means either always throwing or never throwing (and making use of warning and console.error as appropriate).\nWhen an orphaned move or end event is received, print debug information and ignore it instead of crashing and burning.\n(cherry picked from commit 2b226f5fa673207ef49aeb05f4c578296e0640db)', 'Gulp: lint, flow, and version-check (#7174)\n\n\nAdd plugin loading for gulp\n\n\nConvert lint task to gulp\n\n\nConvert flow task to gulp\n\n\nConvert version-check task to gulp\n\n\nAdd missing semicolons\n\n\n(cherry picked from commit 69703e04d559ff7089938bbdfd0d0ccf9b92d992)', "Move error boundaries test into reconciler (#7166)\nThe src/core folder moved while this PR was pending so this file\ndidn't move with it.\nLet's get rid of this annoying top level folder.\n(cherry picked from commit 4f7a38c3b726029216b2ec5d7c14494f7818bd46)", 'Pass shouldHaveDebugID flag to instantiateComponent (#7193)\n\n\nAdd failing tests for #7187 and #7190\n\n\nPass shouldHaveDebugID flag to instantiateComponent\n\n\nThis allows us to remove a hack that was added in #6770 and caused #7187 and #7190.\n\nMove logic for choosing whether to use debugID outside instantiate\n\n(cherry picked from commit d2ff462b79937ec3016dcba81d91d93a4a015c78)', "Don't detach value from defaultValue for submit/reset inputs (#7197)\n(cherry picked from commit 5c737b9550906879bfaa5f976a6251f858cf2aa8)", 'Do not render name attribute on INPUT if it is not supplied. Closes #7198. (#7199)\n(cherry picked from commit 0d892c03da1ac3bc8f6f8e2ce997a475b4f2db2b)', 'Remove duplicate line (#7210)\n(cherry picked from commit 21ce27161d1961b48c660b7524b59d154f510e99)', "Make ReactPerf.start() work during reconciliation (#7208)\n\n\nAdd failing test demonstrating a ReactPerf warning\n\n\nMake the failing ReactPerf test more precise\n\n\nMake ReactPerf.start() work during reconciliation\n\n\nReorder lifecycle methods for greater clarity\n\n\nFix memory leak\n\n\nError boundaries should not break ReactPerf\n\n\nPut onBeginFlush/onEndFlush into transaction wrappers\n\n\nThis looks cleaner even though it is not strictly necessary.\nWe still call them manually for unmounting because it doesn't have a transaction.\n(cherry picked from commit 1a0e3a32150468223d6f9fd0125db0f8503b76d6)", 're-shrinkwrap', 'Rebuild error codes', 'Add link to @troydemonbreun’s contribution\nWe missed this PR in the changelog\n(cherry picked from commit 36734f4d374aefe64d93db0d30d8cb437a6a7970)', 'Mention @Aweary’s #6933 in 15.2.0 changelog\n(cherry picked from commit 4aa860e1bbea8759237663d842e333c1e973f9d3)', 'Fixed PR link\n(cherry picked from commit 48ccab788b4b1569a27b97dce1b6046852d47674)', 'changelog for 15.2.1', "Merge branch '15-dev' into 15-stable", 'Update readme for 15.2.1', '15.2.1']v15.2.0 React

Add error codes to production invariants, with links to the view the full error text. (@keyanzhang in #6948)
Include component stack information in PropType validation warnings. (@spicyj in #6771)
Include component stack information in key warnings. (@keyanzhang in #6799)
Stop validating props at mount time, only validate at element creation. (@keyanzhang in #6823)
New invariant providing actionable error in missing instance case. (@yungsters in #6990)
Add React.PropTypes.symbol to support ES2015 Symbols as props. (@puradox in #6377)
Fix incorrect coercion of ref or key that are undefined in development (@gaearon in #6880)
Fix a false positive when passing other element’s props to cloneElement (@ericmatthys in #6268)

React DOM

Add warning for unknown properties on DOM elements. (@jimfb in #6800, @gm758 in #7152)
Properly remove attributes from custom elements. (@grassator in #6748)
Fix invalid unicode escape in attribute name regular expression. (@nbjahan in #6772)
Add onLoad handling to <link> element. (@roderickhsiao in #6815)
Add onError handling to <source> element. (@wadahiro in #6941)
Handle value and defaultValue more accurately in the DOM. (@jimfb in #6406)
Fix events issue in environments with mutated Object.prototype. (@Weizenlol in #6886)
Fix issue where is="null" ended up in the DOM in Firefox. (@darobin in #6896)
Improved performance of text escaping by using escape-html. (@aickin in #6862)
Fix issue with dangerouslySetInnerHTML and SVG in Internet Explorer. (@joshhunt in #6982)
Fix issue with <textarea> placeholders. (@jimfb in #7002)
Fix controlled vs uncontrolled detection of <input type="radio"/>. (@jimfb in #7003)
Improve performance of updating text content. (@trueadm in #7005)
Ensure controlled <select> components behave the same on initial render as they do on updates. (@yiminghe in #5362)

React Perf Add-on

Add isRunning() API. (@nfcampos in #6763)
Improve accuracy of lifecycle hook timing. (@gaearon in #6858)
Fix internal errors when using ReactPerf with portal components. (@gaearon in #6860)
Fix performance regression. (@spicyj in #6770)
Add warning that ReactPerf is not enabled in production. (@sashashakun in #6884)

React CSSTransitionGroup Add-on

Fix timing issue with null node. (@keyanzhang in #6958)

React Native Renderer

Dependencies on React Native modules use CommonJS requires instead of providesModule. (@davidaurelio in #6715)
 ['Update website for 15.1.0', 'Point people to prod build in perf docs (#6857)\n(cherry picked from commit 43b63995a8c7233569c142840ca73f653bbfcabf)', "Add permalink (#6813)\nAdd permalink to this doc,so we can access with 'prev' and 'next'\n(cherry picked from commit 09fdd1d578d1d98998054a7baf07ae5df70935bf)", 'Merge pull request #6814 from Ivanwangcy/master\nUpdate 03-interactivity-and-dynamic-uis.zh-CN.md\n(cherry picked from commit e1e34274f66be7385038764816f0c092673f25d3)', 'Interactivity and Dynamic UIs Docs page updated with ES6 Example (#6832)\n\n\nInteractivity and Dynamic UIs Pages ES6 Example\n\n\nChange bind handler\n\n\n(cherry picked from commit c7ef0af54b86f86acb2198bb2b7f921e205b06c3)', 'Context docs updated with ES6 examples (#6852)\n(cherry picked from commit 6a101b6c10ac279f9765d6dcf4865890012bc1af)', 'Clarify that string refs are considered legacy. (#6692)\n(cherry picked from commit d7ced68dcec476e5675b95a79af29f1835295a9a)', 'Merge pull request #6890 from grgur/patch-1\nAdded React Europe 2015 videos\n(cherry picked from commit 1d3aceb6c3707b8f21b2b1b382cbe51339e51000)', "switched to codemirror's jsx mode (#6898)\n(cherry picked from commit c8bab76091e0686fb07912b0ce7fe427966bc42f)", 'Add link to ReactJS.NET on server-side environments page (#6607)\n(cherry picked from commit d81f3297aaac134a2f443bc91fd7f31d4b25e4a1)', 'Move HTMLtoJSX page off React site. References https://github.com/reactjs/react-magic/issues/52 (#6608)\n(cherry picked from commit 871116f001f0ab1c62954a6f44cbde570c70eb99)', 'Add ReactNext 2016 conference (#6833)\n(cherry picked from commit b0cb4e850d444a84c9e15e535a3e4bf7113a3b1d)', '[docs] Use existing layout for redirecting html-jsx (#6904)\n(cherry picked from commit d87005e0b687aa3165a74b54fb84b0aaea6b6b05)', 'Remove getDOMNode from docs (#6919)\n(cherry picked from commit 97b44085ffc2308f0003f37b606d1c2fb93da78f)', 'Grammar: less dependencies -> fewer dependencies (#6917)\n\n\nGrammar: less dependencies -> fewer dependencies\n\n\nchangelog.md grammar: less dependencies -> fewer dependencies\n\n\n(cherry picked from commit 4e82e8b6e63b6cb75ba1ba2557bdda96af98f25b)', "Remove Flux from docs nav (#6945)\nMost people don't use the official Flux implementation or docs so I think this is likely to be more confusing than helpful. Maybe later we can add a better comparison of data management solutions.\n(cherry picked from commit 949874760695441ca97047f0443125fd9a0a0477)", 'Use remarkable instead of marked (#6961)\nhttps://github.com/reactjs/react-tutorial/issues/139\n(cherry picked from commit 1801d5650083bc26d0e195e28fd5c1d8029b64c1)', 'Update link and description of TypeScript support. (#6953)\n(cherry picked from commit 6b3f11cdd7fc6ce5335adf24c1dbfbb0b4854c14)', '[Docs] Error Decoder Page (#6946)\n(cherry picked from commit cf73de9459e48282e5c76be2f9a0a25260dfba5a)', 'Add a gulp script for extracting error codes (#6882)\n(cherry picked from commit bfd1531eca38e4e25a9517a00d5be1283bda6696)', 'temporarily disabled tests under ./scripts', 'Fix the typo in the documentaion pages for shallowCompare (#6980)\n\n\nfix the typo for the docs of shallowCompare at:\nhttps://facebook.github.io/react/docs/shallow-compare.html\n\n\nchange "value" to "values" to match the two objects.\n\n\n(cherry picked from commit 5331323cd2a689758d6cfea01d59f927b41fde50)', 'Updte tutorial to ja-JP (#6967)\n(cherry picked from commit 9c7f8957835b1dfd34cb12aa7ed8ffafae7d182a)', 'New marketing copy on homepage (#7012)\n(cherry picked from commit c7868cc7411694a7fd3b80aea589e280e88d926c)', 'Wordsmith the homepage (#7022)\n(cherry picked from commit 96d2a30c25437c6a0de8ef8264a577ab6a23d1eb)', 'Update 12-context.md (#6973)\nModify a clerical error\n(cherry picked from commit 665633a1b7d30c434479f56f3e74ec5e08e5c876)', 'Fix Japanese/Italian/Korean tutorials (#7020)\n\n\nFix japanese tutorial\n\n\nFix Italian tutorial as same as e4fe662\n\n\nFix Korean tutorial as same as e4fe662\n\n\n(cherry picked from commit e487c36ec049a93d4019661206c317ed716e831b)', 'Update 03-interactivity-and-dynamic-uis.md (#7015)\n(cherry picked from commit eda159cd28c9bcf0356b3d6159a76da05e109597)', 'Add React Amsterdam conference to the list (#7028)\n(cherry picked from commit 4577db6d3c8937742469cfd6cf6e0fadbf89164a)', 'Update 10.4-test-utils.md (#6971)\nThe find/scry methods which returns DOM component in react@0.13 now returns DOMElement in react@0.14 and later.\n(cherry picked from commit a394ed6a6c67768e04f957d29c9767da4e9d3278)', 'Merge pull request #6605 from gaearon/fix-warning-condition\nFix the warning condition in ReactDebugTool and ReactDOMDebugTool\n(cherry picked from commit 7dbc95f379780d0802b482abffcafac11dcd9d08)', 'fixed a minor typo (#6600)\n(cherry picked from commit aeda84602ffad382c48c73e670a2065ba0b78fdd)', 'Merge pull request #6638 from cpojer/master\nUpdate Jest’s grunt task.\n(cherry picked from commit 64401150a08ca538e5bbb5a53e76f63b96609fb4)', 'package(node-engine-version): accept 6.x versions (#6645)\n(cherry picked from commit 9d201abb2bc45d1399cc5f0152087955f2934485)', 'Remove errant console.log (#6664)\nThat crept in in c1e3f7ec14971dbf6.\n(cherry picked from commit 4f01b4b186368fe70cdd3853262f2b1856541b06)', 'Add test logic to make sure that events get tested when rendering on top of server-generated markup. (#6668)\n(cherry picked from commit 256753b83011f18dab8f6f12535afc78c5652b69)', "Set up Flow - Yay! (#6682)\nThis just configures flow to be checked and fixes our existing\nFlow typed files.\nPossible enhancements:\nExport .js.flow declarations from the build. Unclear whether this\nwill be a supported workflow in the future or not, so let's wait\non that.\nWe should fail builds and CI on Flow errors.\nIdeally we should lint for Flow style guides (like no space before\ncolon).\n(cherry picked from commit 771d938fc01b2f18e15b4c755b67896bbf5a1da9)", "grunt jest tasks shouldn't use watchman (#6675)\n(cherry picked from commit f25a88e96582663819fc14e8824dd051fe7142cf)", 'Fix for #6062 : Show source line number on unknown property warning  (#6398)\n\n\nNew approach for 6062 fix : Show source line number on unknown property warning\n\n\nWIP: ReactDebugToolEventForwarderDevTool\n\n\nUpdate event signature to debugID\n\n\nTrigger events in ReactDOMComponent\n\n\nRenamed to onMountDOMComponent; passing in element directly\n\n\nAdded debugID; updated simple test\n\n\nAdded test for multi-div JSX to ref exact line\n\n\nAdded test for composite component\n\n\n(cherry picked from commit 7cf61db257707c49b26c94cd32d5a5d1a5d784ae)', 'Setup grunt flow task and run on travis (#6684)\n(cherry picked from commit c9504d99a55d544b38ad452a776250e3ea6ee68c)', 'fixed transform-react-jsx-source devDep (#6697)\n(cherry picked from commit 9ce54210ea3a7d4568d306f526062c530ec3e839)', '[DOCS] ReactTextComponent was renamed ReactDOMTextComponent a while ago (#6700)\n(cherry picked from commit fbe900265f81ee36a07925374836b38a47fc3fb3)', 'Move dev-only flags to only exist on composites (#6709)\n_isOwnerNecessary was unused.\n(cherry picked from commit e01bf78a79b3562f2f6563b150b9c6affee5f2b9)', 'Cleanup: remove @nolint (#6703)\n(cherry picked from commit 873369cc7c19c3ae9bd8a1ce3f68167a5875df13)', 'Disable coverage on Travis (#6712)\n(cherry picked from commit 82ab58ea03fdf2e069a65bb1bd748aa14dddcf7f)', 'Get patch versions of Flow (#6716)\nBest practice or whatever.\n(cherry picked from commit 700b7148ef58ee9d84cfea03bc16ac40622a0213)', 'allow to ignore value attribute for option (#5362)\n(cherry picked from commit 904ee9a6787d74fcffcbf1ceece1c69a9014604d)', 'fix minor capitalzation typo (#6736)\n(cherry picked from commit 25be6dc0279cc0348bbc7743a85c712f74dbf897)', 'Merge pull request #6377 from puradox/proptypes-symbol\nAdd new primitive PropType Symbol\n(cherry picked from commit 7bf96c08e6c6c46e884fb1d5a4cd39d20326e646)', 'Fix flow errors (#6719)\nThe new flow somehow found these on my machine but nowhere else\nand not previously.\n(cherry picked from commit 069f8099d6279ffb16bdd9551480f7e8b5254727)', 'React Fiber Reconciler (#6690)\nThis is an outline for the new reconciler infrastructure.\nI created a noop renderer to have something to get started from.\nI split the reconciler folder into old and new, as well as shared.\nI put shouldUpdateReactComponent in shared as an example of a\nutility that can easily be shared between both. I plan on breaking\nout more utilities like these.\n(cherry picked from commit cf157886e9f8f05c645c6c13cf0be2c41a8fafee)', 'Rename host-y things to be "host" not "native" (#6754)\nFor clarity.\nI left "native event" as-is because there\'s a lot of it, it\'s not particularly ambiguous, and SimulateNative/nativeTouchData are public API in ReactTestUtils.\n(cherry picked from commit ba9b985406ff56c2dea192b119328b6096895097)', 'Fixed removing attributes during custom element update. Fixes #6747 (#6748)\n(cherry picked from commit 0e889d7c724fe41a16668d651ddb443b854397be)', 'Remove some dead code (#6764)\n(cherry picked from commit 20bcabb1ea4cf492ade240bd6915b4bd44f04895)', 'Merge pull request #6763 from nfcampos/is-running\nadded isProfiling() to ReactDebugTool and isRunning() to PerfTools\n(cherry picked from commit 5569d1d40e9537d1a87ad042c01fc40f97003b33)', 'Merge pull request #6767 from gaearon/fix-broken-master\nFix remaining onNativeOperation => onHostOperation rename\n(cherry picked from commit 74cce27fe049bbb677c7158de0f3daed5e013fde)', 'Fixed an invalid escape char in attribute name regexp (#6772)\nmore info: https://www.w3.org/TR/xml/#NT-Name\n(cherry picked from commit 32c750de5c47436168b742275ebe21852dcca172)', "Track source more generically in ReactComponentTreeDevtool (#6765)\nBeing able to get the source for your parent components seems useful, and ReactComponentTreeDevtool is best poised to be able to do that.\nI'm also not sure it makes sense to have separate DOM-specific onMountDOMComponent and onUpdateDOMComponent events, so I removed them for now. Even if we want them, their timing seemed sort of arbitrary.\nI also made it so DOM devtools can listen to non-DOM events too. Willing to change that if people think it's ugly though.\n(cherry picked from commit 03f4ba260b7cfe78ea15b34d8169e42fea2c874e)", 'Print stack in devtool exception warning (#6768)\n(cherry picked from commit 5b5bd5eb75f96630148bc337f163aa517c6bb89e)', "Fix severe perf problems in component tree devtool (#6770)\nOne of the ReactMultiChildText tests renders 2145 roots (and even more components) and unmounts none of them. Now we don't loop through them all a bunch of times so the test takes 20 seconds instead of 60.\nWe should clean up instantiateReactComponent somehow so that the onSetDisplayName call isn't produced for the TopLevelWrapper, which should allow us to just store an array of unmountedIDs instead of a hash map so we at least don't have double maps. This change mirrors the old logic though.\nReviewers: @gaearon, @sebmarkbage\n(cherry picked from commit 3cc733add482fd0f855d15ae8cbd75cc077bd674)", 'Show component stack in PropTypes warnings (#6771)\n(cherry picked from commit 378c879a6a65afe18acacb8e2a6fe6ea323974df)', 'Remove unnecessary require causing excess memory usage (#6781)\n(cherry picked from commit 3703b63a117055bd8c0e2d936ef5e6433588fc40)', "Embed JSX filename paths relative to repo root (#6778)\nTest Plan: Changed the preprocessor to log the output of babel.transform and saw\nvar _jsxFileName = 'src/isomorphic/modern/element/__tests__/ReactJSXElementValidator-test.js';\nin the resulting output, instead of an absolute path.\n(cherry picked from commit 6afd51061a251f39f7951063f41419917f626f02)", 'Require modules from React Native as node modules. (#6715)\n(cherry picked from commit 151e1d7014ed63452218be496a6edf2355eb6a11)', 'Merge pull request #6787 from gaearon/tree-devtool-test-tweaks\nRefactor ReactComponentTreeDevtool test\n(cherry picked from commit 503cbd33567d8f04bd52388f36889c6de654ee6f)', 'Fire unknown prop warning when rendering client side. (#6693)\n(cherry picked from commit 2e881aa4b432261e4ce8aba52d06cc616c8330f0)', 'Merge pull request #6789 from gaearon/tree-devtool-fixes\nMake sure element is reported correctly by tree devtool\n(cherry picked from commit 7f08961604bab6ebc96ab519e34e9d04b0ad59a7)', 'Merge pull request #6801 from iamdustan/instrumentation-to-shared\nMove instrumentation to renderers/shared. Closes #6797\n(cherry picked from commit d1256825bcab63f16d9335a2841558379e7cbddd)', 'Minor comment typo (#6808)\n(cherry picked from commit eda08d9656997cc8514bd1e4a9cfbd7d0133e836)', 'Merge pull request #6804 from dmitriiabramov/update_typescript\nUpdate typescript\n(cherry picked from commit 6a3e9d583bbff69e6e54ffebc525f3d7f94e753b)', 'Add component stack info to key validation warnings (#6799)\n\n\nAdd component stack info to key validation warnings\n\n\nAdd ReactComponentTreeDevtool.getStackAddendumByID\n(cherry picked from commit 47e49ae8b7e41b566db4cabb47ee2f31e5b9bf0b)\n\n', 'Support onLoad event on link element (#6815)\n(cherry picked from commit fd589fc8dd5c8f987c6496b203f7f45f1f1fbb2e)', 'Move ReactElementValidator to DEV block (#6830)\nIt saves some more bytes in production mode.\n(cherry picked from commit d955ee9fae71e2037e9c876e2ab8cb537a8c7e43)', 'Remove prop types checking in ReactCompositeComponent (#6824)\nRemove prop types checking in ReactCompositeComponent\n(cherry picked from commit c136369a811b591e537038106c9c034625f0c3ee)', 'Removed unnecessary null check (#6841)\n(cherry picked from commit 799eae2fafae6826380d1a7f1fa9619da6cfbd29)', 'Extract the type checker into a separate module (#6851)\nThe type checker is now a separate module under isomorphic/classic/types\n(cherry picked from commit db6ac5c01c4ad669db7ca264bc81ae5b3d6dfa01)', "Add test to ensure 'undefined' children is used (#6853)\n(cherry picked from commit fe2002c3d855904c8f272c402f7a321d5bac5c37)", 'Avoid directly calling hasOwnProperty (#6855)\n\n\nAvoid directly calling hasOwnProperty\n\n\nFix failing test case\n\n\n(cherry picked from commit c313baa0cae1006090274d329de0368f53fb5472)', 'Fix componentWillUnmount() not counted by ReactPerf (#6858)\n\n\nFix componentWillUnmount() not counted by ReactPerf\n\n\nTest that functional component render() time shows up in ReactPerf\n\n\nTest for setState() code path updates being included\n\n\n(cherry picked from commit 9ba5668d1828148c019aaf40ff7662824611d17c)', 'Merge pull request #6775 from spicyj/fix-art\nCopy React ART tests and add hacks to fix them\n(cherry picked from commit 531a6b32654dd00bf9d5750735fb9174529d4320)', 'Remove unknown props in ART (#6861)\n(cherry picked from commit cb4a0af7dd32130b58bcfe9bcf2bdb9978c92cf5)', 'Properly set value and defaultValue for input and textarea (#6406)\n\n\nHave defaultValue reach DOM node for html input box for #4618\n\n\nCleanup and bug fixes for merge.\n\n\n(cherry picked from commit 4338c8db4b03cb1ba5f2e229b1baa5a848fe65ab)', 'Add warning for unknown properties. (#6800)\n(cherry picked from commit de1de9e18f8faf153ad673c8206a2918e3e81035)', "Don't count the time inside flushes towards lifecycle hooks (#6860)\n\nDon't count the time inside flushes towards lifecycle hooks\n\nFixes #6842.\nWe keep the existing behavior of testing for matching onBeginLifeCycleTimer/onEndLifeCycleTimer calls, but we push the current timer onto the stack if we enter a flush.\nThis solves an issue with portals which cause updates while a lifecycle timer is already running.\nI chose to subtract the time spent in the flush from the time counted towards the lifecycle method because it would artificially inflate the “total” time of the component due to all the components inside the portal, so it would skew the exclusive table.\n\nFix up the comment\n\n(cherry picked from commit 8d7161e0047e5ae85701f5684d196e3898c65263)", "Fix instrumentation in shallow rendering (#6867)\nPreviously, this threw:\nFAIL  src/test/__tests__/ReactTestUtils-test.js (7.291s)\n● ReactTestUtils › it can fail context when shallowly rendering\n  - TypeError: Cannot read property '_source' of null\n        at describeID (src/renderers/shared/devtools/ReactComponentTreeDevtool.js:70:46)\n        at Object.ReactComponentTreeDevtool.getStackAddendumByID (src/renderers/shared/devtools/ReactComponentTreeDevtool.js:203:15)\n        at checkReactTypeSpec (src/isomorphic/classic/types/checkReactTypeSpec.js:76:58)\n        at ReactCompositeComponentMixin._checkContextTypes (src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:668:5)\n        at ReactCompositeComponentMixin._processContext (src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:607:14)\n        at ReactCompositeComponentMixin.mountComponent (src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:191:30)\n        at ReactShallowRenderer._render (src/test/ReactTestUtils.js:483:14)\n        at _batchedRender (src/test/ReactTestUtils.js:460:12)\n        at ReactDefaultBatchingStrategyTransaction.Mixin.perform (src/shared/utils/Transaction.js:140:20)\n        at Object.ReactDefaultBatchingStrategy.batchedUpdates (src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js:65:19)\n        at Object.batchedUpdates (src/renderers/shared/stack/reconciler/ReactUpdates.js:112:20)\n        at ReactShallowRenderer.render (src/test/ReactTestUtils.js:453:16)\n        at Spec.eval (src/test/__tests__/ReactTestUtils-test.js:289:34)\n        at jasmine.Block.execute (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:1067:17)\n        at jasmine.Queue.next_ (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2100:31)\n        at jasmine.Queue.start (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2053:8)\n        at Spec.jasmine.Spec.execute (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2380:14)\n        at jasmine.Queue.next_ (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2100:31)\n        at onComplete (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2096:18)\n        at Spec.jasmine.Spec.finish (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2354:5)\n        at eval [as onComplete] (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2381:10)\n        at jasmine.Queue.next_ (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2110:14)\n        at eval (node_modules/jest-jasmine1/vendor/jasmine-1.3.0.js:2090:18)\n        at Timeout.e [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:440:19)\n        at tryOnTimeout (timers.js:224:11)\n        at Timer.listOnTimeout (timers.js:198:5)\n(cherry picked from commit 510155e027d56ce3cf5c890c9939d894528cf007)", 'Merge pull request #6872 from gaearon/jest-cli@12\nUpdate to Jest 12.1.1 and Jasmine 2\n(cherry picked from commit c0ecde687ae3e599dced83a111e57ed49897b0b9)', 'Make sure cloneElement() supports prototype-less config (#6878)\nThis brings createElement() fix from #6855 to cloneElement().\n(cherry picked from commit e822cbd183bb6e531068ab8d3be1e1e79c632877)', 'Warn when element is missing in devtool (#6869)\n(cherry picked from commit 21d271f6d0ec971d6c5a0231b55086c65e941ebf)', 'Merge pull request #6880 from gaearon/clone-key-ref-props-2\nFix issues introduced by createElement() warning\n(cherry picked from commit 2d74280679e17d33ac25d3e24c860bfffa9ae661)', 'Merge pull request #6886 from Weizenlol/patch-1\nAdded own property check when deleting listeners.\n(cherry picked from commit ca5a0dad169de8a19f8df6097ea9bc1bb0924a3c)', 'Stop passing null as second argument to document.createElement() (#6896)\n\n\nStop passing null as second argument to document.createElement()\n\n\nrewrap check for props.is to make it more readable\n\n\n(cherry picked from commit 263615573c1812395ff0eb04911b3e55ac213bb1)', 'Merge pull request #6859 from sebmarkbage/newreconciler\n[Fiber] Child Reconciler + New Coroutines Primitive\n(cherry picked from commit 0f4a4df12e33df95601da79a422eb5e76d3b5bf8)', "Merge pull request #6677 from zpao/dont-warn-css-0-string\nDon't warn when style value is '0'\n(cherry picked from commit 5c6f9d31bdec63021f6ae7b651dc5af71281a487)", 'Followup to 6896, add explanation of workaround. (#6905)\n(cherry picked from commit ba3bfe3e31ae06ba2f3db792c0784c3ee58b76dd)', 'Added more specific warning for using onDblClick instead of onDoubleClick (#6881)\n(cherry picked from commit 38900cc7cad8906c19515c78fd082637c2046fbd)', 'Fix style test for Jasmine 2 (#6913)\n(cherry picked from commit e62384bca4e0438b572b0f99e9051dff54b1bc32)', 'Fix minor lint warnings (#6909)\n(cherry picked from commit 29ed7c6c8c2dd0546c453322d7549954b8bf6df0)', 'Merge pull request #6903 from sebmarkbage/newreconciler\n[Fiber] Transfer everything from Element onto the Fiber and use Tag instead of Stage\n(cherry picked from commit 7de23758f1b9e0801fc71f423641502d5e45e3ed)', 'Merge pull request #6931 from sebmarkbage/newreconciler\n[Fiber] Simple test assertions\n(cherry picked from commit dc5686a42f4b62e1abd560fb5088a12cc8a94290)', 'Add rudimentary test renderer (#6944)\n(cherry picked from commit 50982cea99fcb12d9a2f4bda82ab6735b5fc0149)', 'Add a gulp script for extracting error codes (#6882)\n(cherry picked from commit bfd1531eca38e4e25a9517a00d5be1283bda6696)', "Replace the implementation of escapeTextContentForBrowser with escape-html (#6862)\n\n\nReplacing the implementation of escapeTextContentForBrowser with escape-html for performance\n\n\nAddressing @spicyj's code review comment here: https://github.com/facebook/react/pull/6862#issuecomment-223102868 . Pulled the code of escape-html in to react and changed the encoding of single quote to '.\n\n\nAddressing code review comment https://github.com/facebook/react/pull/6862#discussion_r65462074 to make code more inlinable for v8. Thanks, @spicyj.\n\n\n(cherry picked from commit d6e70586b77d4d52c4046b007b8a619e4463058c)", 'Merge pull request #6957 from zpao/flow026\nUpgrade Flow\n(cherry picked from commit d3b36d5524594a76314717e06e14f8839640ecb7)', 'Fix null node issue in ReactCSSTransitionGroup (#6958)\n(cherry picked from commit c9eb572a6f6f97c919b2a736803cba61b01559e3)', "Fix function declaration in if statement (#6963)\nFirefox doesn't like these and throws.\n(cherry picked from commit 3c3c30a19a25fd542861e97f197d22b8f4c586de)", 'Warn that ReactPerf does not work in the production build (#6884)\nFixes #6871\n(cherry picked from commit 2a46103ac87aab9b6ab390bb26c94c04f6b7e419)', 'Tweak ReactPerf warning message and code style (#6977)\n(cherry picked from commit d101f68bce34a62613a3e86981266111e8950267)', 'Fix autofocus for input and textarea (#6986)\n(cherry picked from commit eb705d144849e39662c95e2c68f4ece428edf32d)', 'Merge pull request #6981 from sebmarkbage/newreconciler\n[Fiber] Add support for simple updates and fiber pooling\n(cherry picked from commit ccd26ee020852533a8342880d8b7a662bfe55678)', 'Add reactProdInvariant and corresponding babel rewrite pass (#6948)\n(cherry picked from commit 1abce1630c60b501ff187187d0bf2b5eb0d95dd7)', 'Improve error message for components in bad states (missing instance) (#6990)\n(cherry picked from commit 7988acaa95bb6cd889820ea07c960a824b43e9eb)', 'Merge pull request #6988 from sebmarkbage/newreconciler\n[Fiber] Minimize abuse of .alternate\n(cherry picked from commit 0cafd83834ea9c218d64fd5ccbff4d01bce8db16)', 'Fix #6950, work around IE missing innerHTML on SVG nodes (#6982)\n\n\nWorkaround IE lacking innerHTML on SVG elements\n\n\nAdd tests for setInnerHTML\n\n\nCorrectly check if node has innerHTML property\n\n\nEnsure tests for setInnerHTML actually tests both codepaths\n\n\nProvide mock element for setInnerHTML tests\n\n\nOnly use SVG setInnerHTML workaround for SVG elements\n\n\n(cherry picked from commit 99d8524d2398910fff8c351b5307a0dd9f0133a4)', 'Fix #5839 Add error event to source element (#6941)\n\n\nFix #5839 Add error event to source element\n\n\nAdd test case for \n\n\n(cherry picked from commit 518336e2fbe2c1371d24401ee4c43de0edb8c303)', 'Warn if childContextType is defined on SFC (#6933)\nAdd console.error message content check\nUse appropriate name in warning/test\n(cherry picked from commit c47830d12c495bd8e02c5e84f2de9e9384165047)', 'Fix IE11 placeholder textContent value bug. (#7002)\n(cherry picked from commit f0b140d7266708e360d98127a6ee0f47dd2419bd)', 'Fix controlled/uncontrolled validation for radio+checkbox inputs (#7003)\n(cherry picked from commit 0bb0fe8d0006c6f26e64723ffdbce3baf74c9ab1)', 'Remove console.log from test (#7006)\n(cherry picked from commit 2282894d52aea538df6e2b71797d37762939deb1)', 'pinned babylon version for eslint to work (#7008)\n(cherry picked from commit 46cd6a0b62166b09bfb73f99006dc3a38266757e)', 'Performance: setTextContent should attempt to set TextNode nodeValue where possible (#7005)\n(cherry picked from commit 40f6d3eacad563c67bea0aa1c2220de6239ece43)', 'Add symbol to identify a ReactTestComponent instance. (#7035)\n(cherry picked from commit 6b8db0e1113581602199d7c6cf7a284a9654ef1a)', 'Update readme to latest React description (#7014)\n\n\nUpdate readme to latest React description\n\n\nUpdate readme to latest wordsmithing\n\n\n(cherry picked from commit b618b786a976627bdbc6f38d2878b488cd571f98)', 'Revert part of createElement validation changes from #6859', 'Update the error codes', "Don't build fiber files into package", 'Merge pull request #7042 from zpao/15-dev-fixups\n15 dev fixups', 'Re-shrinkwrap for latest dependency changes & updates', '15.2.0-rc.1', 'Remove setProps and replaceProps from docs (#7044)\n(cherry picked from commit 718c07c9150042c8af503b584537458f4e6ad5e1)', 'Standardise format of the three "state" questions. (#7046)\n\nStandardise format of the three "state" questions.\n\nThe original format follows the template:\n\n\nx? if x then probably isn\'t state\ny? if !y then probably isn\'t state\nz? if z then it\'s not state\n\n\nThis caused both me and a hallway tester to do a double take.\nThe proposed reformulation allows the answers to follow the same template.\nIn the same spirit, it uses the same contraction pattern in the last answer (it\'s not state-> it isn\'t state). This has the welcome side effect to make the lack of "probably" stand out more.\n\nUpdate phrasing in thinking in reacr\n\n(cherry picked from commit 5bca3773ab8ae385b41b44282f5a5086185b6457)', 'update babel-core to 5.8.34 in tutorial docs (#7059)\n(cherry picked from commit a8d82102225c946758efe4481784bdf23d810b96)', '[docs] Update share button (#7097)\n(cherry picked from commit 4f00553c15446cc85f2ef0a50d4592e0cc43b01a)', 'webcomponents should use attachedCallback instead of createdCallback. (#7102)\n(cherry picked from commit c7ba16fbbfbeefd9cb6fa309e2b815d25b706c22)', 'Clarify purpose of state property  in ES6 classes (#7109)\n(cherry picked from commit 60760eb915d699eab0e688effbb4134698f81624)', 'Add autoFocus to list of whitelisted dom element props. (#7098)\n(cherry picked from commit b4fc27357c9d8ce89a0c3c24c3e3d51cbb72d0c6)', 'Group warnings for unknown DOM properties (#7153)\n(cherry picked from commit 39265cb89266a90dcab4830133979038aeffd8e3)', '15.2.0-rc.2', 'Changelog for 15.2.0', "Merge branch '15-dev' into 15-stable", 'Update readme for 15.2.0', '15.2.0']v15.1.0 React

Ensure we're using the latest object-assign, which has protection against a non-spec-compliant native Object.assign. (@zpao in #6681)
Add a new warning to communicate that props objects passed to createElement must be plain objects. (@richardscarrott in #6134)
Fix a batching bug resulting in some lifecycle methods incorrectly being called multiple times. (@spicyj in #6650)

React DOM

Fix regression in custom elements support. (@jscissr in #6570)
Stop incorrectly warning about using onScroll event handler with server rendering. (@Aweary in #6678)
Fix grammar in the controlled input warning. (@jakeboone02 in #6657)
Fix issue preventing <object> nodes from being able to read <param> nodes in IE. (@syranide in #6691)
Fix issue resulting in crash when using experimental error boundaries with server rendering. (@jimfb in #6694)
Add additional information to the controlled input warning. (@borisyankov in #6341)

React Perf Add-on

Completely rewritten to collect data more accurately and to be easier to maintain. (@gaearon in #6647, #6046)

React Native Renderer

Remove some special cases for platform specific branching. (@sebmarkbage in #6660)
Remove use of merge utility. (@sebmarkbage in #6634)
Renamed some modules to better indicate usage (@javache in #6643)
 ['Update website for 15.0.2', "Get rid of transformMatrix/decomposeMatrix special case (#6660)\nThis is no longer needed on the native side.\nThis is also the last use of the Platform flag. React Core is now\nplatform agnostic with regard to React Native. So I'll remove\nthe mocks and dependency.\n(cherry picked from commit 0e4b04663422d217f5a796936435603037b08bb5)", 'Use spread instead of deprecated merge utility (#6634)\n(cherry picked from commit 72ba5971ae76b8889ceed84c70aa107fc7cfce3b)', 'Move ReactIOS components to native subfolder (#6643)\n\nMove ReactIOS components to ReactNative\nDrop ReactNative subfolder\n(cherry picked from commit 222f5087fe1267921aaa5e2f600ea94455ee6d2a)\n', 'Remove some mocks that are already packaged by InitializeJavaScriptAppEngine (#6642)\n(cherry picked from commit 760b1ef4c3b4706584f973bbcab273d86fa0a799)', "Ensure we're using latest object-assign (#6681)\nThis picks up the change to feature test against order bugs.\n(cherry picked from commit 468901c336c8562d3fdb8f4c985b579761d48778)", '15.0.3-alpha.1', 'Shrinkwrap to account for updated object-assign', 'Update tutorial - add link for starting server (#6602)\nTo be extra helpful to beginners, and avoid questions like this: http://stackoverflow.com/questions/35758956/react-tutorial-how-do-i-start-the-server\n(cherry picked from commit f4e608fc2e8d9197db3f6f2a9050e19170a1b421)', 'adds ReactRally & Reactive 2016 + conf locations (#6623)\n(cherry picked from commit 71179459dee629b4c34ae85d74299dd673dcc419)', 'Merge pull request #6628 from sheerun/patch-1\nDocument stateless components in formal types\n(cherry picked from commit af1a21289b0f8f3efce7a1c00a69904eb0db4e76)', 'Add note on how to submit a form (#6594)\n(cherry picked from commit 772468183f66de15d02de6e29772808c33d61545)', 'Create 01-why-react.zh-TW.md (#6470)\n\nCreate 01-why-react.zh-TW.md\n\nTranslation for language code zh-TW\n\nUpdate 01-why-react.zh-TW.md\n\nchange "封裝性非常好" to "封裝性高"\n(cherry picked from commit 44f84634d7980830fe73ae5e48dfc2864adac525)', 'Create 01-why-react.ru-RU.md (#6659)\n\n\nCreate 01-why-react.ru-RU.md\n\n\nCreate 01-why-react.ru-RU.md\n\n\nTranslation for language code ru-RU\n\nCreate 01-why-react.ru-RU.md\n\nErrors fixes\n\nUpdate 01-why-react.ru-RU.md\n\nисправил "чтобы решить".\nспасибо за отзывчивость. надеюсь дальнейшие переводы хоть немного помогут распространению React в России :)\n(cherry picked from commit 08e568cfc8b2acc75bd97e87f9951c763388d176)', 'Merge pull request #6669 from dotu/patch-2\nCreate 02-displaying-data.ru-RU.md\n(cherry picked from commit 4ed46ec52fa2bc6a7a5614fb27b18b7eed8ae1fd)', 'Fix broken link to TypeScript docs (#6687)\n(cherry picked from commit 3370db14bb47d9ab2a3c04628a4d0336f26e406e)', 'Merge pull request #6696 from dotu/patch-3\nCreate 03-interactivity-and-dynamic-uis.ru-RU.md\n(cherry picked from commit 590ee490f9a4be335558666b46a68d7d3fa0e6d5)', 'refine the translation of chapter 12-context (#6665)\n(cherry picked from commit 9ddf9e137e35b9efc041b86dbe9b3faabac9dc5e)', "Merge pull request #6730 from elas7/fix-docs\n[docs] Remove mention of 'nested object' as an allowed children in React.Children.map\n(cherry picked from commit 982e096eb56d46406b6a33ea8131bf9bbd0fe63e)", 'Fix ru-RU doc page permalinks\nFixes #6735', 'Fix zh-TW permalink', 'Allow custom elements extending native ones (#6570)\n...by passing the is attribute as the second param to createElement.\nSee http://webcomponents.org/polyfills/custom-elements/\n(cherry picked from commit 3d31361cfbe2ceb74a3f365515cd4a3298b021f9)', 'Return early from enqueuePutListener for SSR (#6678)\n(cherry picked from commit eb116482a34a65c52f7de92493985852371da727)', 'Grammar correction in ReactDOMInput.js warning (#6657)\nChanged "a uncontrolled input" to "an uncontrolled input".\n(cherry picked from commit 393a1798fadb42852b2c7ae6babdc596e423c917)', 'Update examples/basic-commonjs/package.json (#6685)\n(cherry picked from commit 83521bddb00988531c852122f89417d40e13caa9)', 'DOMLazyTree, populate  before insertion into DOM (#6691)\n(cherry picked from commit 2af4765a2af0d4de81d2f23f702d9d39d8917a0b)', 'Basic SSR support for error boundaries (#6694)\n(cherry picked from commit 96cb8c5fc4ca20ff7393b5e7fd0271bd7c18cb7d)', 'Ensure babelrc gets added to zipfile too (#6688)\n(cherry picked from commit 48f4684b5ff09fd76c223c598aa7bde4ac2ee848)', '15.0.3-alpha.2', 'Merge pull request #6134 from richardscarrott/master\nWarn if props obj passed into createElement / cloneElement inherits from anything other than Object\n(cherry picked from commit 7b47e3e537c91bc5e43de087d831e4abf017ad96)', "Merge pull request #6341 from borisyankov/master\nAdd more information to warning 'Input elements must be either controlled or uncontrolled'\n(cherry picked from commit 006058daa5e1413bc46bd52f87385a1297101b63)", "Merge pull request #6364 from p-jackson/issue-5700\nDon't wrap drag events in IE/Edge in dev builds\n(cherry picked from commit 2e8f28c29fd366d83cdbfc00e2b2dcb526e25202)", 'Merge pull request #6549 from gaearon/instrumentation-new\nProvide info about component tree to devtools\n(cherry picked from commit 76a4c46dbaadfd4e717aec7a9e401251cb9b402c)', 'Merge pull request #6612 from gaearon/instrumentation-new-operations\nAdd ReactNativeOperationHistoryDevtool to track native operations\n(cherry picked from commit 3bdf09e86f84dbd822bb678ab2b4a78b567e4a63)', 'Merge pull request #6046 from gaearon/new-perf\nAdd new ReactPerf\n(cherry picked from commit 98a8f49068df73d32b9395f75095574134b0d558)', 'Merge pull request #6620 from cpojer/master\nUpdate to Jest 12. Codemod to new Jest APIs.\n(cherry picked from commit d07b554291d85f07b6c1dc76b7f3ebb612ff0195)', 'Merge pull request #6633 from gaearon/native-tree-devtool\nMake ReactComponentTreeDevtool work with React Native\n(cherry picked from commit 45ec1265ebc4fce60ec94cec9d229dae76a3c9d2)', 'Fix bug with double updates in a single batch (#6650)\nFixes #2410. Fixes #6371. Fixes #6538.\nI also manually tested the codepen in #3762 and verified it now works.\n(cherry picked from commit c1e3f7ec14971dbf678a731408d38959545793eb)', 'Add links to docs for addons and top level API (#6555)\nThis makes it easier to figure out where the docs live.\nGoogling for e.g. react-addons-update also works, but this should\nmake things easier for people that hyperclick directly to the source.\n(cherry picked from commit db175052c00a65e6a852011f889c12fea50bb34b)', 'Merge pull request #6647 from gaearon/bye-bye-reactperf\nReplace ReactPerf with new implementation\n(cherry picked from commit b6a60781677bcdace8f41457d50412096f98d74a)', 'Shrinkwrap to pick up jest upgrade', '15.1.0-alpha.1', 'Revert "Don\'t wrap drag events in IE/Edge in dev builds" (#6741)\n(cherry picked from commit 98cb2f8507fe1a7120d7d2b2e517bca1ef332e5b)', "Add permalink (#6713)\nAdd permalink to docs, so we can access with 'prev' and 'next'\n(cherry picked from commit 92bebcad5fc1a111535c1d123e4ae48cbc11ffbe)", 'Fix grammar on homepage (#6746)\n\n\nFix grammar in README\n\n\nChange DOM abstraction grammar on homepage\n\n\n(cherry picked from commit 01b060d7dc9dc85a1aeba86e6d0af2def4edf601)', 'Add information on JSX element keys (#6751)\n(cherry picked from commit 5d64199bb6d5a875206cdcc552cdcb4bf32c7e97)', 'Refer to correct example (#6760)\nI think this should refer to the second example, where the instance to the ref is stored. In any case please can someone confirm for my own understanding?\n(cherry picked from commit 712b1f75bf34c0d2f64e977f4c6c35c3bff8f3c5)', 'make test utils format consistent (#6777)\n(cherry picked from commit 207fe0b478cd78212028a9f4880207b349579af2)', 'Merge pull request #6752 from facebook/fix-6742\nFix ReactPerf.printOperations() crash\n(cherry picked from commit 027d9a919b10e994cb17248059d1d69f3955787f)', 'Merge pull request #6753 from facebook/fix-6750\nFix a memory leak in ReactComponentTreeDevtool\n(cherry picked from commit de1bb7a71f863fab972bef0ce514e011aff24417)', 'Changelog for 15.1.0', "Merge branch '15.1.0-dev' into 15-stable", 'Update readme for 15.1.0', '15.1.0']v15.0.2 React

Removed extraneous files from npm package. (@gaearon in #6388)
Ensure componentWillUnmount is only called once. (@jimfb in #6613)

ReactDOM

Fixed bug resulting in disabled buttons responding to mouse events in IE. (@nhunzaker in #6215)
Ensure <option>s are correctly selected when inside <optgroup>. (@trevorsmith in #6442)
Restore support for rendering into a shadow root. (@Wildhoney in #6462)
Ensure nested <body> elements are caught when warning for invalid markup. (@keyanzhang in #6469)
Improve warning when encountering multiple elements with the same key. (@hkal in #6500)

React TestUtils Add-on

Ensure that functional components do not have an owner. (@gaearon in #6362)
Handle invalid arguments to scryRenderedDOMComponentsWithClass better. (@ipeters90 in #6529)

React Perf Add-on

Ignore DOM operations that occur outside the batch operation. (@gaearon in #6516)

React Native Renderer

These files are now shipped inside the React npm package. They have no impact on React core or ReactDOM.
 ['15.0.1 blog post', 'Update website for 15.0.1', 'Actually bump version on website', 'Merge pull request #6443 from Aweary/patch-1\nGrammar fix for 15.0 blog post\n(cherry picked from commit 09022b165f7fdec4a1aaf6475936629aab76e4a9)', 'Use the same changelog format as 15.0 post', 'Create section on using React with package managers.\n(cherry picked from commit c01c46b88aa07b4c735b110a5a49e9dd88d83acc)', 'Added docs for environment integration.\n(cherry picked from commit 66bfee6543fe007048a751f7c1c8db26ed3fcdf5)', 'Merge pull request #6338 from sebmarkbage/reactnative2\nMove React Core Integration and Injection to the Core Repo\n(cherry picked from commit c84ad52ddbb74095200215bc9c6abf51118e7f64)', 'Merge pull request #6553 from zpao/cleanuppkg\nClean up package.json after #6338\n(cherry picked from commit bddecc96963f75d0eade5bc303c09c0ebc9c0086)', '15.0.2-alpha.1', 'Merge pull request #6572 from spicyj/rn-batch\nBatch event handling in React Native', '15.0.2-alpha.2', 'Changed example json value.', 'Merge pull request #6576 from yuji0602/tutorial_md_sample_json_change\nChanged example json value.', 'Mention Enzyme on the test utils page. (#6523)\n(cherry picked from commit a12aab10cbf142ae0770311e3885ee0acf11c5c4)', 'Minor fixes (#6527)\n\n\nFix typos in CHANGELOG.md\n\n\nFix typos in 2014-11-24-react-js-conf-updates.md\n\n\n(cherry picked from commit 8156ee0cab60209b1f311b338524dd6e1982ec73)', 'ref-09-webcomponents.zh-CN.md (#6561)\n(cherry picked from commit b7a2409919215179d7d291c62b0ef8499616f91c)', 'Merge pull request #6519 from zpao/envdocsfixup\nCleanup environments doc\n(cherry picked from commit befb70e42fc612a2f1328b53f3bc8df840be5c7f)', 'Remove mention of deprecated ReactLink add-on (#6535)\n(cherry picked from commit de7d1da997bceaccf4e51ec825286062b9723c91)', "Merge pull request #6584 from sahrens/patch-1\n[RN] Don't hold interaction handles for all touches\n(cherry picked from commit aacb5467a0cb8be33fe3ca3241ae6c3dcd927fd2)", 'Merge pull request #6587 from sahrens/patch-2\nMove PanResponder back to react-native repo temporarily.\n(cherry picked from commit ea504521d589f4395038e11e5a2a934f058581b3)', 'Merge pull request #6588 from sahrens/patch-3\nDelete ReactNativeGlobalInteractionHandler.js\n(cherry picked from commit 2f2ed71bd005853a03c9fd7cf459b9946676ec35)', "Ignore events fired on missing React Native instances\nThis can happen if something gets unmounted before the event gets\ndispatched. I'm not sure how this works out exactly but this\npreserves previous behavior in this scenario.\n(cherry picked from commit 69b6869a3e6861b325ca2e9bb2d938cb81c7a090)", '15.0.2-alpha.3', 'Merge pull request #6215 from nhunzaker/nh-fix-disabled-inputs\nDisabled inputs should not respond to clicks in IE\n(cherry picked from commit 36e4fe54a801a325d30359653e588e9705e7532b)', 'Merge pull request #6362 from gaearon/no-owner-in-test-utils\nElements from functional components in TestUtils should have no owner\n(cherry picked from commit ae569105738de9bd732d121b0098e0a2ed01baa5)', 'Merge pull request #6388 from gaearon/bye-bye-deprecated-utils\nRemove OrderedMap and ReactPropTransferer\n(cherry picked from commit b8f8360b5ceece894265f3e7015b6ed287603d03)', 'Merge pull request #6442 from trevorsmith/master\nCorrectly select options when nested inside an optgroup\n(cherry picked from commit 5ac51c39a07a018de75f3bbe49dba159b70395a7)', 'Merge pull request #6462 from Wildhoney/master\nRe-added support for attaching events to document fragments\n(cherry picked from commit 0b1fd186855a48dff78987f13466cec1e579b78c)', 'Merge pull request #6469 from keyanzhang/validate-foreignObject-children\nEnsure validateDOMNesting catches nested body elements\n(cherry picked from commit 4016e71609df9db2fb22867c4be6f03e8a6ce461)', 'Helper for escaping and unescpaing component keys (#6500)\n\nAbstract escaping\nProvide human readible same key warnings\n(cherry picked from commit dc6fc8cc0726458a14f0544a30514af208d0098b)\n', 'Merge pull request #6504 from alexlur/patch-1\nReplaces Array#map with Array#forEach\n(cherry picked from commit 932334d3d46627adb08013e8e1d1097c469597cc)', 'Merge pull request #6516 from gaearon/ignore-dom-writes-outside-batch\nIgnore DOM writes outside the batch in ReactPerf\n(cherry picked from commit 6a93137f0e52ba39c5d6570c1642a40e50226d06)', 'properly handling invalid scryRenderedDOMComponentsWithClass args (#6529)\nproperly handling invalid scryRenderedDOMComponentsWithClass args\nproperly handle invalid scryRenderedDOMComponentsWithClass args\n(cherry picked from commit 9df54e0fce209a60c49145da9fc3f15b2671e719)', "Fix mapFunction parameters in mapChildren's JSDoc (#6569)\nRemove 'key' parameter from 'mapFunction(child, key, index)'. It is no longer called with 'key'.\n(cherry picked from commit 9462d0d0404a9a2d2cc6afbef801f0ecf4018560)", "Fix return type in onlyChild's JSDoc (#6573)\nThe return type is a 'ReactElement' instead of a 'ReactComponent'.\n(cherry picked from commit 416f315c962c74e057e420b5c24e4e89744174f0)", 'ComponentWillUnmount should only ever be invoked once (#6613)\n(cherry picked from commit 8dfdac67803d8dd50fb614d6a115e68c9dc8efe6)', '15.0.2-alpha.4', 'Ensure babelrc file gets packaged for starter kit (#6617)\n(cherry picked from commit 096e5c7cf77acb8deca389b4e3a7bb210744542f)', 'Changelog for 15.0.2', "Merge branch '15.0.2-dev' into 15-stable", 'Update readme for 15.0.2', '15.0.2']v15.0.1 React

Restore React.__spread API to unbreak code compiled with some tools making use of this undocumented API. It is now officially deprecated. (@zpao in #6444)

ReactDOM

Fixed issue resulting in loss of cursor position in controlled inputs. (@spicyj in #6449)
 ['Add React 15 post', '[docs] Update site for v15', 'Update Changelog for v15', 'Update readme for v15', 'Merge pull request #6419 from IvanVergiliev/master\nAdd documentation about empty functional components\n(cherry picked from commit 62f64a84a43b9d8288df5136b816d76dcc7e3321)', 'Merge pull request #6400 from jimfb/return-value-legacy\nDocument legacyness of the return value of ReactDOM.render()\n(cherry picked from commit 1dc7c581db9d33a49da3b2f50bf03ecf9b03b0f3)', 'Add the missing download\n(cherry picked from commit 1aee28ef1b1489caae70954b99fd1a1dbc5da1bb)', '[docs] Clarify data-reactid in v15 post\n(cherry picked from commit 6fd2b29ec871be80bff9f18ffc19df4f269e0b35)', 'Fix extraneous markup in changelog', 'Merge pull request #6444 from zpao/re__spreadwarn\nAdd back React.__spread and make it warn\n(cherry picked from commit 516c1d809ea56dbd109f54712efea6923ac76ee6)', 'Merge pull request #6449 from spicyj/option-value\nSet value using attribute only on initial option render\n(cherry picked from commit 2b1bd1d7fecb46f9776692613501b8b7ede82bca)', 'Update changelog & readme for 15.0.1', '15.0.1']v15.0.0 Major changes

Initial render now uses document.createElement instead of generating HTML. Previously we would generate a large string of HTML and then set node.innerHTML. At the time, this was decided to be faster than using document.createElement for the majority of cases and browsers that we supported. Browsers have continued to improve and so overwhelmingly this is no longer true. By using createElement we can make other parts of React faster. (@spicyj in #5205)
data-reactid is no longer on every node. As a result of using document.createElement, we can prime the node cache as we create DOM nodes, allowing us to skip a potential lookup (which used the data-reactid attribute). Root nodes will have a data-reactroot attribute and server generated markup will still contain data-reactid. (@spicyj in #5205)
No more extra <span>s. ReactDOM will now render plain text nodes interspersed with comment nodes that are used for demarcation. This gives us the same ability to update individual pieces of text, without creating extra nested nodes. If you were targeting these <span>s in your CSS, you will need to adjust accordingly. You can always render them explicitly in your components. (@mwiencek in #5753)
Rendering null now uses comment nodes. Previously null would render to <noscript> elements. We now use comment nodes. This may cause issues if making use of :nth-child CSS selectors. While we consider this rendering behavior an implementation detail of React, it's worth noting the potential problem. ()@spicyj in #5451)
Functional components can now return null. We added support for defining stateless components as functions in React 0.14. However, React 0.14 still allowed you to define a class component without extending React.Component or using React.createClass(), so we couldn’t reliably tell if your component is a function or a class, and did not allow returning null from it. This issue is solved in React 15, and you can now return null from any component, whether it is a class or a function. (@jimfb in #5884)
Improved SVG support. All SVG tags are now fully supported. (Uncommon SVG tags are not present on the React.DOM element helper, but JSX and React.createElement work on all tag names.) All SVG attributes that are implemented by the browsers should be supported too. If you find any attributes that we have missed, please let us know in this issue. (@zpao in #6243)

Breaking changes

No more extra <span>s.
React.cloneElement() now resolves defaultProps. We fixed a bug in React.cloneElement() that some components may rely on. If some of the props received by cloneElement() are undefined, it used to return an element with undefined values for those props. We’re changing it to be consistent with createElement(). Now any undefined props passed to cloneElement() are resolved to the corresponding component’s defaultProps. (@truongduy134 in #5997)
ReactPerf.getLastMeasurements() is opaque. This change won’t affect applications but may break some third-party tools. We are revamping ReactPerf implementation and plan to release it during the 15.x cycle. The internal performance measurement format is subject to change so, for the time being, we consider the return value of ReactPerf.getLastMeasurements() an opaque data structure that should not be relied upon. (@gaearon in #6286)

Removed deprecations
These deprecations were introduced nine months ago in v0.14 with a warning and are removed:
- Deprecated APIs are removed from the React top-level export: findDOMNode, render, renderToString, renderToStaticMarkup, and unmountComponentAtNode. As a reminder, they are now available on ReactDOM and ReactDOMServer. (@jimfb in #5832)
- Deprecated addons are removed: batchedUpdates and cloneWithProps. (@jimfb in #5859, @zpao in #6016)
- Deprecated component instance methods are removed: setProps, replaceProps, and getDOMNode. (@jimfb in #5570)
- Deprecated CommonJS react/addons entry point is removed. As a reminder, you should use separate react-addons-* packages instead. This only applies if you use the CommonJS builds. (@gaearon in #6285)
- Passing children to void elements like <input> was deprecated, and now throws an error. (@jonhester in #3372)
- React-specific properties on DOM refs (e.g. this.refs.div.props) were deprecated, and are removed now. (@jimfb in #5495)
New deprecations, introduced with a warning
Each of these changes will continue to work as before with a new warning until the release of React 16 so you can upgrade your code gradually.
- LinkedStateMixin and valueLink are now deprecated due to very low popularity. If you need this, you can use a wrapper component that implements the same behavior: react-linked-input. (@jimfb in #6127)
- Future versions of React will treat <input value={null}> as a request to clear the input. However, React 0.14 has been ignoring value={null}. React 15 warns you on a null input value and offers you to clarify your intention. To fix the warning, you may explicitly pass an empty string to clear a controlled input, or pass undefined to make the input uncontrolled. (@antoaravinth in #5048)
- ReactPerf.printDOM() was renamed to ReactPerf.printOperations(), and ReactPerf.getMeasurementsSummaryMap() was renamed to ReactPerf.getWasted(). (@gaearon in #6287)
New helpful warnings

If you use a minified copy of the development build, React DOM kindly encourages you to use the faster production build instead. (@spicyj in #5083)
React DOM: When specifying a unit-less CSS value as a string, a future version will not add px automatically. This version now warns in this case (ex: writing style={{'{{'}}width: '300'}}. Unitless number values like width: 300 are unchanged. (@pluma in #5140)
Synthetic Events will now warn when setting and accessing properties (which will not get cleared appropriately), as well as warn on access after an event has been returned to the pool. (@kentcdodds in #5940 and @koba04 in #5947)
Elements will now warn when attempting to read ref and key from the props. (@prometheansacrifice in #5744)
React will now warn if you pass a different props object to super() in the constructor. (@prometheansacrifice in #5346)
React will now warn if you call setState() inside getChildContext(). (@raineroviir in #6121)
React DOM now attempts to warn for mistyped event handlers on DOM elements, such as onclick which should be onClick. (@ali in #5361)
React DOM now warns about NaN values in style. (@jontewks in #5811)
React DOM now warns if you specify both value and defaultValue for an input. (@mgmcdermott in #5823)
React DOM now warns if an input switches between being controlled and uncontrolled. (@TheBlasfem in #5864)
React DOM now warns if you specify onFocusIn or onFocusOut handlers as they are unnecessary in React. (@jontewks in #6296)
React now prints a descriptive error message when you pass an invalid callback as the last argument to ReactDOM.render(), this.setState(), or this.forceUpdate(). (@conorhastings in #5193 and @gaearon in #6310)
Add-Ons: TestUtils.Simulate() now prints a helpful message if you attempt to use it with shallow rendering. (@conorhastings in #5358)
PropTypes: arrayOf() and objectOf() provide better error messages for invalid arguments. (@chicoxyzzy in #5390)

Notable bug fixes

Fixed multiple small memory leaks. (@spicyj in #4983 and @victor-homyakov in #6309)
Input events are handled more reliably in IE 10 and IE 11; spurious events no longer fire when using a placeholder. (@jquense in #4051)
The componentWillReceiveProps() lifecycle method is now consistently called when context changes. (@milesj in #5787)
React.cloneElement() doesn’t append slash to an existing key when used inside React.Children.map(). (@ianobermiller in #5892)
React DOM now supports the cite and profile HTML attributes. (@AprilArcus in #6094 and @saiichihashimoto in #6032)
React DOM now supports cssFloat, gridRow and gridColumn CSS properties. (@stevenvachon in #6133 and  @mnordick in #4779)
React DOM now correctly handles borderImageOutset, borderImageWidth, borderImageSlice, floodOpacity, strokeDasharray, and strokeMiterlimit as unitless CSS properties. (@rofrischmann in #6210 and #6270)
React DOM now supports the onAnimationStart, onAnimationEnd, onAnimationIteration, onTransitionEnd, and onInvalid events. Support for onLoad has been added to object elements. (@tomduncalf in #5187,  @milesj in #6005, and @ara4n in #5781)
React DOM now defaults to using DOM attributes instead of properties, which fixes a few edge case bugs. Additionally the nullification of values (ex: href={null}) now results in the forceful removal, no longer trying to set to the default value used by browsers in the absence of a value. (@syranide in #1510)
React DOM does not mistakingly coerce children to strings for Web Components. (@jimfb in #5093)
React DOM now correctly normalizes SVG <use> events. (@edmellum in #5720)
React DOM does not throw if a <select> is unmounted while its onChange handler is executing. (@sambev in #6028)
React DOM does not throw in Windows 8 apps. (@Andrew8xx8 in #6063)
React DOM does not throw when asynchronously unmounting a child with a ref. (@yiminghe in #6095)
React DOM no longer forces synchronous layout because of scroll position tracking. (@syranide in #2271)
Object.is is used in a number of places to compare values, which leads to fewer false positives, especially involving NaN. In particular, this affects the shallowCompare add-on. (@chicoxyzzy in #6132)
Add-Ons: ReactPerf no longer instruments adding or removing an event listener because they don’t really touch the DOM due to event delegation. (@antoaravinth in #5209)

Other improvements

React now uses loose-envify instead of envify so it installs less transitive dependencies. (@qerub in #6303)
Shallow renderer now exposes getMountedInstance(). (@glenjamin in #4918)
Shallow renderer now returns the rendered output from render(). (@simonewebdesign in #5411)
React no longer depends on ES5 shams for Object.create and Object.freeze in older environments. It still, however, requires ES5 shims in those environments. (@dgreensp in #4959)
React DOM now allows data- attributes with names that start with numbers. (@nLight in #5216)
React DOM adds a new suppressContentEditableWarning prop for components like Draft.js that intentionally manage contentEditable children with React. (@mxstbr in #6112)
React improves the performance for createClass() on complex specs. (@spicyj in #5550)
 ['Adding support for CSS3 Grid layout module.\ngrid-row and grid-column must be unitless numbers.', "Don't build up mount-ready queue for server side rendering\nThis is a little faster when rendering iframe/img/form/video/audio on the server.", 'Expose component instance in shallow rendering\nFixes #4056', '[react] making sure ReactDOMServer always uses ServerReactRootIndex, even on an environment that can use DOM', 'Perform transaction around shallow render to run lifecycle methods', 'Update CommonJS example with build script', 'Add rudimentary jsc perf-counters runner\nWorks at least on a CentOS 7 machine after running sudo yum install\nwebkitgtk webkitgtk-devel.\nThe only globals you get are print and PerfCounters. No console nor the other globals provided by the jsc command-line tool (load, readFile, etc) though they\'re probably not hard to implement.\nYou can disable the JIT by setting the environment variable JSC_useJIT=false.\nTest Plan:\n~/local/react/scripts/perf-counters$ make\n~/local/react/scripts/perf-counters$ build/jsc-perf <(echo \'PerfCounters.init(); var a = PerfCounters.getCounters().instructions; print("moo"); var b = PerfCounters.getCounters().instructions; print(b - a);\')\nmoo\n72182\n~/local/react/scripts/perf-counters$', 'Added warning for use of ReactLink.', 'Revert "Revert "Remove dependence on ES5 shams per #4189""', 'Always use ANONYMOUS const in  ReactPropTypes.js', 'Bump version in master for 0.15 development', 'Update Pure Render Mixin docs to point to new npm package', '[docs] Update acknowledgements for 0.14', 'Final docs update for 0.14', 'Merge pull request #5073 from mfunkie/patch-2\nUpdate Pure Render Mixin docs to point to new npm package', 'Update downloads page for 0.14', 'Merge pull request #4779 from mnordick/master\nSupport CSS3 Grid Layout Module for inline styles', 'Merge pull request #4947 from fabiomcosta/server_render_index\n[react] making sure ReactDOMServer always uses ServerReactRootIndex, …', 'Merge pull request #4918 from glenjamin/shallow-getinstance\nExpose component instance in shallow rendering', 'Don\'t use existing "root" ID if non-root\nBefore, if you had\ncontainer = <div data-reactid=".0"><div data-reactid=".0.0" /></div>;\nand did ReactDOM.render(<span />, container) you would get\n```\n\n;\n```\n(along with a warning not to replace React-rendered children with a new tree like that). But that makes no sense -- the span should have a new index, not truncate the ID of the old child it\'s replacing.\n(Now tests pass again with useCreateElement on; before they threw a "valid but unequal" on our test for this warning.)', 'Cache native node on native components, return it when unmounting\nThis is probably slightly slower for unmounts in the case that no updates were ever performed, but caching the node on the instance should make updates faster. In any case, the more important consequence of this change is that we can fix the current memory leak that happens when swapping composite types.', "Use returned native node for composite type-change\nWith this change, all unmounted components should be properly purged from ReactMount's cache.", 'Rewrite ReactInstanceHandles-test to be less brittle', 'ReactMount now never expects invalid nodes in its cache\nIt never really made sense for us to have "invalid" nodes in the cache -- when we unmount things, we should always remove them from the cache properly. Now that swapping composite types doesn\'t repopulate the cache, we should be okay to now assume that everything in the cache is good.', 'Merge pull request #5066 from camsong/patch-2\nAlways use ANONYMOUS const in  ReactPropTypes.js', 'Merge pull request #4983 from spicyj/id-swap\nRefactor how composite type changes work, fix memory leak in ReactMount caching', 'Merge pull request #5075 from spicyj/docs-downloads\nUpdate downloads page for 0.14', 'Merge pull request #5032 from jimfb/remove-react-link\nAdded warning for use of ReactLink.', 'Merge pull request #5063 from facebook/revert-5062-revert-4959-no-shams\nRemove dependence on ES5 shams per #4189', 'Add docs for React.Children.toArray in 0.14.0.\n\nUpdate the docs to change return type of React.Children.map from object to array.\n', 'Merge pull request #5078 from nickpresta/master\nAdd docs for React.Children.toArray in 0.14.0.', "Text fix in ReactClass.js\nRename 'component class' to 'function' as it should be.", 'Merge pull request #5057 from camsong/patch-1\nText fix in ReactClass.js', 'Move escapeTextContentForBrowser and quoteAttributeValueForBrowser to DOM directory\nOnly DOM files use these.', 'Extract defineProperty feature testing to one file\nThis makes it slightly more bearable to debug in IE8 with an exception breakpoint. Also the old way was just silly and could mask other bugs.', 'Merge pull request #5084 from spicyj/rearrange-utils\nMove escapeTextContentForBrowser and quoteAttributeValueForBrowser to DOM directory', "Don't break on SVG tags in scryRenderedDOMComponentsWithClass\nFixes #5076.", "Merge pull request #5081 from spicyj/svg-tu\nDon't break on SVG tags in scryRenderedDOMComponentsWithClass", 'Merge pull request #5085 from spicyj/cdp\nExtract defineProperty feature testing to one file', 'fix(docs): adjust babel release to match the babel.js changelog', 'Warn when using a minified copy of dev React\nFixes #4842.', 'Merge pull request #5096 from songawee/docs_babel_fix\nfix(docs): adjust babel release to match the babel.js changelog', 'Merge pull request #5083 from spicyj/warn-min\nWarn when using a minified copy of dev React', 'Remove duplication in ReactServerRendering', 'Merge pull request #5100 from spicyj/ssr-dupe\nRemove duplication in ReactServerRendering', '[docs] fix forms Default Value example\nThe Default Value section in the forms docs says "This example will function much like the Controlled Components example above."\nThe example actually functions like the Uncontrolled Components example, not the Controlled Components example.', 'Fixed punctuation', 'Merge pull request #5102 from TracyJordan/master\nFixed some comment punctuation in ReactDOMComponent.js', "Grammar\nI'm assuming this was meant to say that the JSX spread syntax saves typing, not copying attributes.", 'Merge pull request #5107 from mbrookes/patch-1\nGrammar', 'Added changelog for 0.14', '[docs] Sync up tutorial.zh-CN with en(a440f40)\n[docs] Amend wrong words in zh-CN\n08.1-more-about-refs.zh-CN.md\nUpdate zh-CN docs\nadd thinking-in-react.zh-CN.md\n[docs] Update two zh-CN docs\n   new file:   ref-01-top-level-api.zh-CN.md\n   new file:   ref-02-component-api.zh-CN.md\n', 'Merge pull request #4981 from iamchenxin/zh_docs\n[docs] Sync up tutorial.zh-CN with en(a440f40)', 'Merge pull request #5101 from bcbcb/patch-1\n[docs] fix forms Default Value example', 'Merge pull request #5105 from jimfb/changelog-0.14\nAdded changelog for 0.14', 'add test to show this is indeed undefined - closes #3613', 'validateDOMNesting: parentTag -> current', 'Merge pull request #5111 from spicyj/vdn-current\nvalidateDOMNesting: parentTag -> current', 'Merge pull request #5109 from Josh-a-e/undefined_this_on_controlled_components\nadd test to show this is indeed undefined - closes #3613', '[docs] Fix line highlights for linked-state-mixin', 'Document context\nFixes #580.', 'Merge pull request #5113 from spicyj/document-context\nDocument context', 'Make Danger-test simpler and more robust', "Thread native-parent pointers through everything\nNow we don't repurpose context for our own secret needs (hi Dan). In this diff I avoid storing the native parent on native (DOM) components and store it only on composites, but we'll probably want to store it on native components too soon for event bubbling.", 'Add SVG/MathML support for createElement mode', 'Merge pull request #5014 from spicyj/native-parents\nThread native-parent pointers through everything', 'Added react-dom to individual downloads', 'Merge pull request #5116 from jimfb/download-page-links\nAdded react-dom to individual downloads', 'Update Readme with for 0.14', 'Include react-dom\nFixes Uncaught ReferenceError: ReactDOM is not defined', 'Merge pull request #5120 from abloomston/patch-1\nInclude react-dom', '\nBring back JSX compiler styling still being used on HTML JSX page\n\nFixes [#5121]', 'File Cleanup.', 'Merge pull request #5123 from vipulnsward/fix-html-jsx-page\n\nBring back JSX compiler styling still being used on HTML JSX page\n', 'Merge pull request #5126 from bhamodi/white-space\nFile Cleanup.', 'Consistently use calls.length instead of callCount for Jasmine spies, take II\nSee #3105 for take I', 'Merge pull request #5129 from matiassingers/jasmine-spy-calls-length-consistency\nJasmine spies call count property consistency, take II', 'Consistently use calls[n].args[n] instead of argsForCall[n][n] for Jasmine spies', 'Removed eslint warning.', 'Merge pull request #5141 from pluma/patch-2\nRemoved ESLint warning', 'Use the right gulp executable on Windows', 'Merge pull request #5130 from matiassingers/jasmine-spy-call-args-consistency\nJasmine spies call args property consistency', 'Merge pull request #5144 from zpao/grunt-gulp-windows\nUse the right gulp executable on Windows', 'Documentation cleanup.', 'Merge pull request #5124 from bhamodi/master\nDocumentation Cleanup Round 1.', 'added selection and composition events to reference page\nadded composition events to reference page\nadded selection events to reference page', 'Merge pull request #5142 from MaxPRafferty/add-selection-and-composition-events-on-reference-page\nAdd selection and composition events on reference page', "Don't execute ", "Merge pull request #5146 from spicyj/ce-scripts\nDon't execute ", '\nAdded tests to compare testing of components using different types of element creation\n\nFixes [#2576]\n\nFixed Lint warnings and errors\n', 'Merge pull request #5137 from vipulnsward/2576-add-comparison-tests\nAdded tests to compare testing of components using different types of element creation', 'Updated node version requirement in README.md', 'Merge pull request #5150 from jimfb/node-v4-readme\nUpdated node version requirement in README.md', 'add npm 3.x to devengines', 'Stop generating gh-pages during release, update message', 'Mention codemods more prominently in release blog', 'Merge pull request #5156 from spicyj/bp-codemods\nMention codemods more prominently in release blog', "Use 'document.createEvent' not 'new Event'\nFixes #5153.\nThis seems to work in all browsers I tested, including old Android and all IE > 8 which didn't work before.", 'Merge pull request #5147 from zpao/update-release-task\nStop generating gh-pages during release, update message', "Merge pull request #5157 from spicyj/createevent\nUse 'document.createEvent' not 'new Event'", "Fetch node to unmount separately from unmounting\nMy last strategy of getting each node recursively while unmounting was a pain to make work properly with ReactMount's confusing cache. Now, we get the node before unmounting anything in the subtree (and we don't try to find the nodes of descendants).\nThis is a temporary solution and can go away when we get rid of the giant ReactMount node hash map.\nFixes #5151.", 'Merge pull request #5160 from spicyj/gh-5151\nFetch node to unmount separately from unmounting', 'Correctly handle 0 in CSSTransitionGroup timeout props', 'Merge pull request #5164 from zpao/fix-csstransitiongroup-proptype\nCorrectly handle 0 in CSSTransitionGroup timeout props', "Be more lenient with invalid nodes in the cache\nThis matches our old behavior. I was a little too aggressive in turning on this\nerror and it's still possible to trigger it (using the test added here).", 'Add feature test for document.createEvent\nSee #5157.', 'Merge pull request #5165 from spicyj/cache-lenient\nBe more lenient with invalid nodes in the cache', 'Merge pull request #5166 from spicyj/gh-5157\nAdd feature test for document.createEvent', 'Fix #1357. Warn when appending "px" to strings.', 'Merge pull request #5140 from pluma/patch-1\nFix #1357. Don\'t append "px" suffix to CSS string values.', 'Add srcLang and kind to better support track elements', 'Walk down internal tree to find DOM node\nThis reduces our reliance on hierarchical IDs.', 'Merge pull request #4988 from spicyj/fdn\nWalk down internal tree to find DOM node', "Don't test frag cases in ReactMultiChildText-test\nThese are now just testing the same as the array cases directly above. This should make this test a bunch faster because it (intentionally) has n^2 runtime.", 'Merge pull request #5174 from zpao/dom-attributes-track\nAdd srcLang and kind to better support track elements', 'Tweak wording when talking about props changing', "Merge pull request #5175 from spicyj/text-no-frag\nDon't test frag cases in ReactMultiChildText-test", 'Fix blog post authors', 'Issue: 5013 Added necessary code for firing warning if value is null\nFixed the lint issues\nAdded logic for handling the warning only once and added the test cases for the same. Also moved the warning part to only DEV mode\nChanged few lines related to the formatting issues\nRemoving the empty whitespace', 'Merge pull request #5048 from antoaravinth/PR-5013\nIssue: 5013 Added necessary code for firing warning if value is null', 'Fix indentation issues', 'Merge pull request #5184 from zpao/fix-style-issues\nFix indentation issues', 'Merge pull request #5178 from jimfb/multiple-authors\nFix blog post authors', 'Add support for "invalid" event within Form elements\nFixes #5152', "[docs] Don't make authors links on all posts page", 'Merge pull request #5176 from jimfb/tweak-props-change-wording\nTweak wording when talking about props changing', 'Remove unnecessary indirection in events', 'opt out of input events for ie 10 and 11\nwhile supported then Input event is too noisy in IE. Firing on\nplaceholder sets, and when an input is focused with a placeholder.\nfixes #3377 and fixes #3484', 'update enqueueCallback invariant to more specifically explain what caused error', 'Specify focus events work on all elements in the React DOM\nGenerally, focus/blur events only apply to focusable elements found in forms. In React, you can listen to focus/blur events on any element.', 'Merge pull request #5193 from conorhastings/enqueue-callback-error\nupdate enqueueCallback invariant to more specifically denote type of passed callback', 'Fix buggy DOM nesting warning for text components\ncf. #5071', 'Merge pull request #5198 from spicyj/gh-5071a\nFix buggy DOM nesting warning for text components', 'Merge pull request #5195 from trickford/patch-1\nSpecify focus events work on all elements in the React DOM', 'Print number of matches (previously unclear if zero or multiple)', 'Merge pull request #5199 from jimfb/number-found\nPrint number of matches (previously unclear if zero or multiple)', 'Remove "Invariant Violation: " from Invariant Error Messages', 'Upgrade dependency fbjs@0.4.0', 'Merge pull request #5187 from tomduncalf/support_invalid_event-issue_5152\nAdd support for "invalid" event within Form elements', 'Merge pull request #5192 from spicyj/ev-ind\nRemove unnecessary indirection in events', 'Merge pull request #4051 from jquense/ie-noisy-input-event\nopt out of input events for ie 10 and 11', 'update Chinese docs to 0.14', 'Merge pull request #5203 from WanderWang/docs-cn\nupdate Chinese docs to 0.14', 'Reactiflux is moving to Discord blog post', 'Merge pull request #5211 from vjeux/reactiflux\nReactiflux is moving to Discord blog post', 'Fix up stray markdown in blog post', 'Follow-ups to #5187', 'Merge pull request #5213 from spicyj/gh-5187-f\nFollow-ups to #5187', 'small edit on reactiflux blog post', 'Merge pull request #5214 from benigeri/patch-1\nsmall edit on reactiflux blog post', 'Merge pull request #5185 from yungsters/invariant\nRemove "Invariant Violation: " from Invariant Error Messages', 'Merge pull request #5154 from cmatheson/master\nadd npm 3.x to devengines', 'Remove react-codemod', 'Update blog posts linking to react-codemod', 'Merge pull request #5217 from zpao/rm-react-codemod\nMove react-codemod to standalone repo', 'Update tutorial.ja-JP.md', 'Updating "JSX Gotchas" docs for Custom Attributes\nAdds note that custom attributes are supported on custom elements.', 'fix wrong method name', 'Merge pull request #5230 from kohashi/patch-1\nFix tutorial.ja-JP.md', "Update syntax in older Relay blog post that may be causing confusion\nJust seen on Stack Overflow a question that suggests people may be\nconfused if they run across some of the old syntax in one of our old\nblog posts:\nhttp://stackoverflow.com/questions/33261751/why-does-relay-ql-result-in-unterminated-string-constant-error/\nIdeally people would consult the (up-to-date) documentation instead, and\nwe don't want to have to maintain old blog posts, but in this case the\ncost of updating the syntax was low so I just went ahead and did it.", 'Merge pull request #5233 from yiminghe/fix-typo\nfix wrong method name', 'Fix lint for eslint 1.7', 'add default attribute for use with track element', 'Merge pull request #5236 from spicyj/eslint-17\nFix lint for eslint 1.7', "[lint] Lock eslint version\nThe automatic updating really sucks here as bugs are fixed / behavior of rules changes. Local versions are updated, cached versions on Travis aren't. It's messy. Now we must explicitly update for any thing to change.", 'Merge pull request #5250 from conorhastings/track-default-property\nadd default attribute for use with track element', 'Perf: Insert nodes top-down in IE and Edge', "Don't set DOM props when switching between unset/undefined/null", 'Use attributes to set .type\nAccording to the internet, this should work and it appears to work fine on all the browsers I tested.', 'Merge pull request #5253 from spicyj/dt-lazy\nPerf: Insert nodes top-down in IE and Edge', 'Merge pull request #5261 from spicyj/dom-null-undef\nBug fixes for createElement mode', 'Update addons paths in npm react README', 'Merge pull request #5263 from spicyj/npmreactreadme\nUpdate addons paths in npm react README', "Two more fixes for document.createElement mode\nIs this all of them? I hope so.\n\nSet text content after creating hierarchy, like the text is a child. I should've done this originally but I guessed it wouldn't matter. I was wrong (~20% perf difference in IE11).\nIE throws when setting an enum-like property to an invalid value. I tried setting every property to the string 'a' and changed the ones that threw to be MUST_USE_ATTRIBUTE. I think these are all correct -- encType is the most suspicious one based on the existing comments but I tested in IE8 and it works fine as an attribute.\n", "Update README's example\nAccording to current React version, when I use React.render, console shows React.render is deprecated. Please use ReactDOM.render from require('react-dom') instead..\nSo this PR is a tiny update for the README example.", "Merge pull request #5268 from dnshi/update-readme\nUpdate README's example", 'Corrected highlighted line in tutorial example in tutorial7.js', 'Merge pull request #5274 from SpartaSixZero/master\nCorrected highlighted line in tutorial example in tutorial7.js', 'Avoid lastProps[key] lookup in initial render\nThis makes both Firefox and IE 15-20% faster in initial render (!!). On my PE benchmark, createElement is now on par with HTML in Firefox and faster in IE11 (before, it was slower).', 'Add react-dom.js to tutorials', 'Merge pull request #5286 from translucens/add_reactdom_js\nAdd react-dom.js to tutorials', 'Merge pull request #5252 from zpao/eslintlock\n[lint] Lock eslint version', 'Create 01-why-react.de-DE.md\nTranslation of 01-why-react.de-DE.md to German', 'Merge pull request #5089 from thomasp9/patch-1\nCreate 01-why-react.de-DE.md', 'Merge pull request #5266 from spicyj/lt-fix-2\nThree more fixes for document.createElement mode', 'Updated conference info', 'Update 2015-05-01-graphql-introduction.md', 'Update 2015-05-01-graphql-introduction.md', 'Merge pull request #5289 from jonathanp/patch-1\nUpdate 2015-05-01-graphql-introduction.md', "Fix cycle in AutoFocusUtils\nIn 5c5d2ec182e4f517b7f3b865d0277ed0dc4f0abd I accidentally introduced a dependency cycle:\nAutoFocusUtils -> findDOMNode -> ReactDOMComponent -> AutoFocusUtils\nThis breaks some tools internally. We're not actually using findDOMNode in AutoFocusUtils any more so we can just delete it.", 'Merge pull request #5291 from spicyj/afu-cycle\nFix cycle in AutoFocusUtils', 'Fix for the issue #5189\nFix for lint issues\nAdded the test cases for the issue 5189\nRemoving empty space\nRemoving the Eventplugin instrumentation code\nRemoving unwanted white space', 'Mangle __html in prop validation.', 'Took keyOf outside the function.', 'Merge pull request #5297 from quadrupleslap/master\nMangle __html in prop validation.', "Merge pull request #5209 from antoaravinth/5189\nDon't instrument listeners for ReactDefaultPerf", 'Make sure top-level callback has correct context\nCloses #5125 -- incorporates essentially the same fix with a much simpler test case. Thanks @yiminghe for reporting!', 'Merge pull request #5237 from spicyj/gh-5125\nMake sure top-level callback has correct context', '[lint] Make eqeqeq a failure', 'Add non-standard property for supporting Safari mask-icon.\nSee also: https://developer.apple.com/library/prerelease/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9.html#//apple_ref/doc/uid/TP40014305-CH9-SW20', 'Merge pull request #5304 from evanvosberg/master\nAdd non-standard property for supporting Safari mask-icon.', 'Add a simple initial-render benchmark test case', 'Merge pull request #5309 from spicyj/bench\nAdd a simple initial-render benchmark test case', 'Bring over updates for 0.14.1 release\nUpdate changelog for 0.14.1\n(cherry picked from commit aaf8f870cb242750e842d21ac7ae2f72876f6346)\nUpdate readme for 0.14.1\n(cherry picked from commit c2dde8df0b365f341416201d1794b0c5e96d1951)\n0.14.1 blog post\n(cherry picked from commit 6e2450e8f29f336ffe9c80d067c8df816957a349)\nUpdate website for 0.14.1\n(cherry picked from commit f0782e2b2ec79af37987eead2464ac9f303183f5)', 'update Korean docs to 0.14\nUpdate getting-started in Korean', 'Update 02.1-jsx-in-depth.md\nUpdate 02.1-jsx-in-depth.md', 'Merge pull request #5316 from Third9/master\nupdate Korean docs to 0.14', 'Merge pull request #5317 from nickbalestra/patch-1\nUpdate 02.1-jsx-in-depth.md', 'simple fix to prevent overwriting of mutated props', 'Update jest.', 'Codemod old APIs away.', "'grunt lint' now works on Windows", "Merge pull request #5326 from tbroadley/grunt-lint-windows\nFix for 'grunt lint' on Windows", "Use a getter for canDefineProperty check.\nThis ensures that we treat es5-sham as a broken implementation of defineProperty and we won't try to use it.", "Use a custom event type for our event dispatching in ReactErrorUtils\nIt turns out that IE doesn't like when native events types are used. There may\nhave been more involved at play but this fixes the issue.", 'Merge pull request #5327 from zpao/definepropgetter\nUse a getter for canDefineProperty check.', 'Remove generateFromMetadata and getMetadata usage.', 'Fix shallow renderer with ref as function', 'Merge pull request #5328 from zpao/non-native-event-name-dispatch\nUse a custom event type for our event dispatching in ReactErrorUtils', 'classes in the tests when can', 'Merge pull request #5320 from drdelambre/overwrite_props\nOverwriting of mutated props in constructor', 'fix for TypeScript test on Windows', 'Merge pull request #5321 from cpojer/update-tests\nUpdate tests', 'Revert "Overwriting of mutated props in constructor"', 'Merge pull request #5334 from facebook/revert-5320-overwrite_props\nRevert "Overwriting of mutated props in constructor"', 'Merge pull request #5300 from zpao/lint-eqeqeq\n[lint] Make eqeqeq a failure', 'Merge pull request #5235 from wincent/update-blog-syntax\nUpdate syntax in older Relay blog post that may be causing confusion', 'Fixed unclear wording in comment\nPerhaps not understanding what "key a set a fragment..." is supposed to mean.  Hopefully I\'m not misreading this as a typo.', 'Merge pull request #5049 from xelad1/patch-1\nFixed unclear wording in comment', 'update deps', 'Added a note about finding a good-first-bug', 'Merge pull request #5339 from jimfb/contributing-first-bug\nAdded a note about finding a good-first-bug', 'Merge pull request #5293 from chicoxyzzy/update-deps\nupdate dependancies', 'Should not coerce children prop on custom elements to a string.  Fixes #5088', 'Add integrity to HTML property config', 'Merge pull request #5341 from zpao/domprop-integrity\nAdd integrity to HTML property config', 'Merge pull request #5093 from jimfb/avoid-children-to-string-coercion\nShould not coerce children prop on custom elements to a string.  Fixes #5088', 'use path library to normalize filepath', 'Merge pull request #5331 from tbroadley/typescript-test-windows\nFix for TypeScript test on Windows', 'Merge pull request #5023 from spicyj/jsc-perf\nAdd rudimentary jsc perf-counters runner', 'maskedContext should not be instantiated as null', 'Merge pull request #5344 from chicoxyzzy/update-rcc\nmaskedContext should not be instantiated as null', 'add docs for babel 6', 'Merge pull request #5348 from hzoo/patch-2\nadd docs for babel 6', 'Correct Babel 6 command line usage instructions.\nThe user should install the babel-cli package, see http://babeljs.io/docs/usage/cli/.', 'add Node 5 to devEngines', 'fix shallowRenderer.getRenderOutput() return type in docs', 'Make React a peerDep of react-dom', 'Add package.json for react-haste package\nThis will probably go away in a release or two.', 'Merge pull request #5366 from zpao/react-dom-peer-dep\nMake React a peerDep of react-dom', 'Merge pull request #5367 from spicyj/haste-manifest\nAdd package.json for react-haste package', "adler32: Properly break loop into 4096-char blocks\nI believe this was lost in translation in #4400. Can't say I fully understand why this is significant at all though...", 'Merge pull request #5350 from ludovicofischer/master\nCorrect Babel 6 command line usage instructions.', '[docs] Update Getting Started for babel 6', '[docs] Update tooling integration for more babel 6', 'Update getting-started.ko-KR.md\ncorrecting misspelled words', 'Merge pull request #5370 from zpao/babel6docs\nUpdate docs for Babel 6', 'Show a friendly error when using TestUtils.Simulate with shallow rendering', 'Merge pull request #5358 from conorhastings/invariant-testutils-simulate-shallow-render\n5284 - Show a friendly error when using TestUtils.Simulate with shallow rendering', 'Merge pull request #5356 from rpominov/patch-1\nfix shallowRenderer.getRenderOutput() return type in docs', 'Merge pull request #4993 from jsdf/shallow-render-lifecycle\nRun all component lifecycle methods when shallow rendering', 'Test fixups after #4993', 'Merge pull request #5376 from spicyj/gh-4993\nTest fixups after #4993', 'Warn on missing event handler properties\nFixes #3548. Warns on properties that are case-insensitive matches for\nregistered event names (e.g. "onclick" instead of "onClick").', 'Merge pull request #5361 from ali/warn-on-missing-event-handlers\nWarn on missing event handler properties', 'Merge pull request #5372 from csbok/patch-1\nUpdate getting-started.ko-KR.md', 'Add additional secret property and build for react-dom-server\nUpdate eslintrc, travis build and add task to Gruntfile', 'Make ReactEmptyComponent-test not swallow logs', 'Remove obsolete tests with new tree-walking', 'Make ReactDOMComponent-test pass with useCreateElement', 'Always do useCreateElement for updates\nInitial render can still be a markup string.', "ReactDOMComponentTree\nNew module! With this, we have a new module that uses the component tree to store DOM nodes. Most of the logic in this file relates to markup adoption -- if we were to drop that (along with server rendering) this file could just be a return inst._nativeNode;.\nThis works with useCreateElement only because we need to reference each node as it's created.\nEvents is now the only thing using ReactMount.getNode -- I'll introduce pointers back from the DOM nodes (and a ReactDOMComponentTree.getInstanceFromNode) and make that work.", 'Add functions to find the instance given a node', 'Events: Pass native instances up until propagation\nNext step: take advantage of having the native instances in EventPropagators instead of converting right back to IDs.', 'Propagate events based on component tree, not IDs', "put/deleteListener take an instance, not an ID\nThis removes SimpleEventPlugin's dependency on ReactMount.getID.", 'Kill ReactMount.getNode/getID/purgeID with fire', 'Perf: Static children count for wasted time', 'Stop relying on hierarchical IDs in ReactDefaultPerf', "Turn ReactInstanceHandles-test into ReactDOMTreeTraversal-test\nThis test relied on the fact that ReactDOMComponent still produced hierarchical IDs -- although this module could be used standalone, we're replacing it completely so it makes more sense to just move the tests over to test ReactDOMTreeTraversal.", 'Use incrementing numerical IDs to identify DOM components', 'Remove now-unused _rootNodeID from composites', 'Remove unused modules\n\nRemove last references to ReactInstanceHandles (still used in responder unit test)\nRemove ClientReactRootIndex/ServerReactRootIndex\n', 'Add hooks back for devtools', "Don't put IDs in the DOM in createElement mode", 'Merge pull request #5205 from spicyj/cotree-num\nUse incrementing numerical IDs to identify DOM components', 'Adding validation for arrayOf and objectOf in ReactPropTypes', 'Update Korean translation to 84af306', 'Merge pull request #5385 from marocchino/update-korean\nUpdate korean translation to 84af306', 'Merge pull request #5353 from chicoxyzzy/patch-1\nadd Node 5 to devEngines', 'Changelog for 0.14.2\n(cherry picked from commit c2dd57c6a68b642cc46568f9d957cfdd300a2e14)', 'Blog post for 0.14.2\n(cherry picked from commit a4fd08973bb7d41d1d36420c76f69142e8d102f6)', 'Update readme for 0.14.2\n(cherry picked from commit 01622a4442c10ab983f8dfe9619a1bdb056f271b)', 'Update website for 0.14.2\n(cherry picked from commit fdf6f6bbb0b1a07f198d5b4be4faa7c82a78bca8)', "Revert #4993 with an added test for refs\nWe were shallow-rendering a component that used refs at FB so this can't go in as-is. It's a little unclear what we should do though, since there is nothing to hold a ref to (since we're shallowly rendering) and we generally promise that child refs are resolved before a parent's componentDidMount. Also, changing shallow rendering to use the original _renderValidatedComponent (instead of _renderValidatedComponentWithoutOwnerOrContext) breaks tests because now the _owner field doesn't match up for toEqual (non-null in getRenderOutput but null if constructed in a test).", 'Merge pull request #5394 from spicyj/tu-shallow-ref\nRevert #4993 with an added test for refs', 'remove eslint-disable when possible and update eslint version', 'review fixes', 'update eslint and eslint-plugin-react', 'Merge pull request #5352 from chicoxyzzy/eslint-upgrade\nremove eslint-disable when possible and update babel-eslint version', 'update error messages', 'Make sure npm packages have repo and keywords set', 'Generate better readmes for addons npm packages', "Merge pull request #5396 from zpao/packagejsons\nImprove npm packages' metadata", 'ReactDOMComponent should throw error when provided children for void elements', 'Merge pull request #5231 from davidkpiano/patch-1\nUpdating "JSX Gotchas" docs for Custom Attributes', 'Clear transition timeouts when component unmounts. Fixes #4876', 'Merge pull request #5391 from zjjw/transition_timeouts\nClear transition timeouts when component unmounts. Fixes #4876', 'More consistent error message for findRenderedDOMComponentWithX', 'Updates the warning that is displayed when setState is called\nwithin either render or a component constructor.\nFollow up to #5343', 'Merge pull request #5405 from yangshun/inconsistent-error-messages\nMore consistent error message for findRenderedDOMComponentWithX', 'Fixed ReactEurope date', 'Merge pull request #5287 from benhalpern/patch-1\nUpdated conference page', 'Reset state if comment submit fails', 'ReactShallowRenderer.render returns the rendered output', 'Removed unnecessary whitespace before closing bracket', 'Merge pull request #5424 from stowball/animation-docs-whitespace\nRemoved unnecessary whitespace before closing bracket', 'Fixed broken links in changelog', 'Merge pull request #5430 from jimfb/changelog-broken-links\nFixed broken links in changelog', 'Ensure license and patents files are packaged for npm', 'Unmount children before unsetting DOM node info', 'Handle multiple DOM updates without interference\nThis test failed before! How embarrassing.', 'Merge pull request #5433 from spicyj/unmount-children-order\nUnmount children before unsetting DOM node info', 'Merge pull request #5434 from spicyj/two-reconcile\nHandle multiple DOM updates without interference', 'State that Math.random() is not a good way to generate keys', 'Merge pull request #5403 from yuyokk/patch-1\nClarify note about stable keys', 'Allow nonce attribute', 'Merge pull request #5416 from bbrooks/undo-optimistic-update-on-error\nReset state if comment submit fails', 'Merge pull request #5442 from nickclaw/patch-1\nAllow nonce attribute', 'Add more documentation to Context page', 'Merge pull request #5412 from yangshun/document-next-context\nAdd more documentation to Context page', 'Merge pull request #5431 from zpao/license-in-packages\nEnsure license and patents files are packaged for npm', 'update instructions of the following examples: basic-commonjs, basic-jsx-external and basic-jsx-precompile', "Use comment nodes for empty components\nThis makes more sense and avoids DOM nesting problems.\n\n(ReactSimpleEmptyComponent isn't used here but React Native can use it as it currently does.)", 'Merge pull request #5387 from MattijsKneppers/master\nupdated Basic Example with External JSX instructions', 'Merge pull request #5406 from acdlite/better-error-message-for-setState-in-constructor\nUpdates the warning that is displayed when setState is called within either render or a component constructor.', 'Merge pull request #5390 from chicoxyzzy/arrayof-objectof-tests\nAdd validation for arrayOf and objectOf in ReactPropTypes', 'Merge pull request #5368 from spicyj/adler32\nadler32: Properly break loop into 4096-char blocks', 'Revert class name manipulation doc to english', 'Allow all characters (except astral) specified in XML specs. fixes #2329', 'Merge pull request #5456 from hugo-agbonon/fix-classname-manipulation-doc\nRevert class name manipulation doc to english', 'Warns when mutated props are passed.', 'update deps', '[tutorial] Use ids in comments data', 'Merge pull request #5444 from zpao/tutorial-ids-for-data\n[tutorial] Use ids in comments data', '[docs] Use updated Korean translation\nSee #5456 for details', '[docs] Properly fix Korean docs', 'Merge pull request #5458 from chicoxyzzy/update_deps\nUpdate deps', 'Added info (example+doc) about react with webcomponents', "Remove rendundant 'the'; keep iff (if and only if)", 'Merge pull request #2774 from jimfb/webcomponents\nAdded info (example+doc) about react with webcomponents', 'Merge pull request #5481 from hejld/master\nFixed typo', 'Fix typos and redundant words', 'Merge pull request #5489 from hejld/master\nFix typos and redundant words', 'Finish comment in ReactDOMComponentTree', 'Merge pull request #5493 from spicyj/gh-4589\nFinish comment in ReactDOMComponentTree', 'Remove legacy dom node/ref stuff.', 'Merge pull request #5381 from kevinrobinson/react-dom-server-package\nAdd additional secret property to build artifact for react-dom-server', 'Followup to #5381\n\nExport to the right variable\nSimplify lintignore\nFix cURL command for TravisCI\n', 'Merge pull request #5496 from zpao/reactdomserverfollowup\nFollowup to #5381', 'Support reversed for s', '[docs] Use controlled components for tutorial', 'Merge pull request #5445 from yangshun/controlled-components-in-tutorial\nUse controlled components in tutorial', 'Merge pull request #5417 from zpao/ol-reversed\nSupport reversed for s', 'Merge pull request #5330 from laskos/fix-shallow-rendering-function-refs\nFix shallow renderer with ref as function', 'Update DOM_OPERATION_TYPES mappings for ReactDefaultPerfAnalysis', 'Make sure react-dom-server is shipped in release process\nAlso removed some duplicated code to simplify a bit', 'Merge pull request #5501 from zpao/release-react-dom-server\nMake sure react-dom-server is shipped in release process', "benchmarking: measure and analyze scripts\nThis uses wall-clock time (for now) so it's noisier than alternatives\n(cachegrind, CPU perf-counters), but it's still valuable. In a future diff we\ncan make it use those.\nmeasure.py outputs something that analyze.py can understand, but you can use analyze.py without measure.py too. The file format is simple:\n$ cat measurements.txt\nfactory_ms_jsc_jit 13.580322265625\nfactory_ms_jsc_jit 13.659912109375\nfactory_ms_jsc_jit 13.67919921875\nfactory_ms_jsc_nojit 12.827880859375\nfactory_ms_jsc_nojit 13.105224609375\nfactory_ms_jsc_nojit 13.195068359375\nfactory_ms_node 40.4891400039196\nfactory_ms_node 40.6669420003891\nfactory_ms_node 43.52413299679756\nssr_pe_cold_ms_jsc_jit 43.06005859375\n...\n(The lines do not need to be sorted.)\nComparing 0.14.0 vs master:\n```\n$ ./measure.py react-0.14.0.min.js >014.txt\nMeasuring SSR for PE benchmark (30 trials)\n..............................\nMeasuring SSR for PE with warm JIT (3 slow trials)\n...\n$ ./measure.py react.min.js >master.txt\nMeasuring SSR for PE benchmark (30 trials)\n..............................\nMeasuring SSR for PE with warm JIT (3 slow trials)\n...\n$ ./analyze.py 014.txt master.txt\nComparing 014.txt (control) vs master.txt (test)\nSignificant differences marked by ***\n% change from control to test, with 99% CIs:\n\nfactory_ms_jsc_jit\n    % change:  -0.56% [ -2.51%,  +1.39%]\n    means: 14.037 (control), 13.9593 (test)\nfactory_ms_jsc_nojit\n    % change:  +1.23% [ -1.18%,  +3.64%]\n    means: 13.2586 (control), 13.4223 (test)\nfactory_ms_node\n    % change:  +3.53% [ +0.29%,  +6.77%]  ***\n    means: 42.0529 (control), 43.54 (test)\nssr_pe_cold_ms_jsc_jit\n    % change:  -6.84% [ -9.04%,  -4.65%]  ***\n    means: 44.2444 (control), 41.2187 (test)\nssr_pe_cold_ms_jsc_nojit\n    % change: -11.81% [-14.66%,  -8.96%]  ***\n    means: 52.9449 (control), 46.6953 (test)\nssr_pe_cold_ms_node\n    % change:  -2.70% [ -4.52%,  -0.88%]  ***\n    means: 96.8909 (control), 94.2741 (test)\nssr_pe_warm_ms_jsc_jit\n    % change: -17.60% [-22.04%, -13.16%]  ***\n    means: 13.763 (control), 11.3439 (test)\nssr_pe_warm_ms_jsc_nojit\n    % change: -20.65% [-22.62%, -18.68%]  ***\n    means: 30.8829 (control), 24.5074 (test)\nssr_pe_warm_ms_node\n    % change:  -8.76% [-13.48%,  -4.03%]  ***\n    means: 30.0193 (control), 27.3964 (test)\n$\n```\n", 'Changelog for 0.14.3\n(cherry picked from commit 55b6839684148636ad8922239e557fad69f54e98)', 'v0.14.3 blog post\n(cherry picked from commit f92a630737ada4093401e55c661637a19bb362e6)', 'Update readme for 0.14.3\n(cherry picked from commit 1cef6ebabf278d9eb5645731a0cc27b97bb3c3a4)', 'update website for 0.14.3\n(cherry picked from commit 3f2f763dea095951258306289d8f196931c530c8)', 'Add in missing closing  for docs template', 'Merge pull request #5495 from jimfb/remove-public-dom-instance\nRemove legacy dom node/ref stuff.', 'Removed unnecessary variables/assertions.', 'Merge pull request #5510 from jimfb/useless-find-dom-nodes\nRemoved unnecessary variables/assertions.', 'Typo', 'Merge pull request #5508 from yangshun/patch-1\nAdd in missing closing  for docs template', 'Merge pull request #5511 from KeweiCodes/patch-1\nTypo', 'Merge pull request #5451 from spicyj/empty-comments\nUse comment nodes for empty components', 'Merge pull request #5503 from spicyj/measure-analyze\nbenchmarking: measure and analyze scripts', 'Rest/Spread Properties may not be part of ES7\nAccording to the http://www.2ality.com/2015/11/tc39-process.html it is\nnot a good idea to guess target ES version until the proposal reaches\nlater phases.\nEven the proposal repository now states\n\nIt is a Stage 2 proposal for ECMAScript. <\n(it has been changed in https://github.com/sebmarkbage/ecmascript-rest-spread/commit/e9813ac78ad59994585f12e17be57e776378fdc4)\n', 'Merge pull request #5411 from simonewebdesign/master\nReactShallowRenderer.render returns the rendered output', 'Merge pull request #5500 from hejld/master\nUpdate DOM_OPERATION_TYPES mappings for ReactDefaultPerfAnalysis', 'Merge pull request #5518 from mhujer/docs-spread-fix\nDocs: Rest and Spread Properties - ECMAScript', "Remove unreachable return from shouldUpdateReactComponent\nEslint didn't catch this (we do have this rule turned on) because it's a\nbig. There are no other locations I think. Detected that when I minified\nsome code.", '[docs] Use id for TodoApp example', 'Merge pull request #5524 from chenglou/woohoo-its-me\nRemove unreachable return from shouldUpdateReactComponent', "Use null instead of '' in ternary expression\nA blank string ('') resolves to  which produces a warning when place inside a ", "Merge pull request #5533 from kryogenic/patch-1\nUse null instead of '' in ternary expression", "Don't use key when defined on String, Number prototypes", 'add highlight to a line of code to tutorial20.js (all languages included)', 'Add missing sections to events reference page in IT and CN', 'Clarify wording in the tutorial\nreactjs/react-tutorial#103', 'Merge pull request #5539 from matthewlooi/addCodeHighlightToTutorialDoc\nAdd highlight to a line of code to tutorial21.js', 'Merge pull request #5523 from hejld/add-selection-and-composition-events-on-reference-page\n[docs] Add missing sections to events reference page in IT and CN', '[docs] Single Child\n\nSingle Child belongs to Prop Validation, so it was moved there.\n"throw" was changed to "warn".\n', 'Merge pull request #5543 from spicyj/rt103\nClarify wording in the tutorial', 'Turn on useCreateElement by default\nFacebook has been running with this on for a couple weeks now with no ill effects.', 'Kill global queue in ReactMultiChild\nAs we move away from using HTML for updates, this becomes less useful.', 'Merge pull request #5547 from spicyj/mc-noq\nKill global queue in ReactMultiChild', 'Add createClass stress test\nRunning this is left as an exercise for the reader, since my measure.py isn\'t designed for this at present. But something like this might work:\n```diff\ndiff --git a/scripts/bench/measure.py b/scripts/bench/measure.py\nindex 4cedf47..627ec97 100755\n--- a/scripts/bench/measure.py\n+++ b/scripts/bench/measure.py\n@@ -79,15 +79,12 @@ def _measure_ssr_ms(engine, react_path, bench_name, bench_path, measure_warm):\n             if (typeof React !== \'object\') throw new Error(\'React not laoded\');\n             report(\'factory_ms\', END - START);\n\nglobalEval(readFile(ENV.bench_path));\nif (typeof Benchmark !== \'function\') {\nthrow new Error(\'benchmark not loaded\');\n}\nglobalEval("bm = (function(){" + readFile("bench-createclass-madman.js") + "})");\nbm();\n             var START = now();\nvar html = React.renderToString(React.createElement(Benchmark));\nhtml.charCodeAt(0);  // flatten ropes\nbm();\n             var END = now();\nreport(\'ssr_\' + ENV.bench_name + \'_cold_ms\', END - START);\n\nreport(\'cc_\' + ENV.bench_name + \'_cold_ms\', END - START);\n     var warmup = ENV.measure_warm ? 80 : 0;\n     var trials = ENV.measure_warm ? 40 : 0;\n\n@@ -119,7 +116,7 @@ def _main():\n     return 1\n react_path = sys.argv[1]\n\n\ntrials = 30\n\n\ntrials = 60\n     sys.stderr.write("Measuring SSR for PE benchmark (%d trials)\\n" % trials)\n     for i in range(trials):\n         for engine in [\n@@ -132,7 +129,7 @@ def _main():\n         sys.stderr.flush()\n     sys.stderr.write("\\n")\n\n\ntrials = 3\n\ntrials = 0#3\n     sys.stderr.write("Measuring SSR for PE with warm JIT (%d slow trials)\\n" % trials)\n     for i in range(trials):\n         for engine in [\n```\n', 'Make createClass 10-15% faster on complex specs', "Transform rest and spread properties using Babel 6\n\nOut of the box Babel doesn't do anything. In order to actually do\nanything to your code you need to enable plugins.\n(https://babeljs.io/docs/plugins/)\n", "Avoid mutating state in the example code\nAccording to react documentation it is advised to: \nNEVER mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\nhttps://facebook.github.io/react/docs/animation.html\nIn this particular case it is probably doesn't matter since setState is called directly after mutation, but it does provide a bad example of state mutation.\nAnother way of removing an item from an array can be newItems = this.state.slice(0,i).concat(this.state.slice(i+1)) however the meaning can be less obvious to some.", 'Merge pull request #5556 from timuric/patch-1\nAvoid mutating state in the example code', 'Merge pull request #5546 from cody/singlechild\n[docs] Single Child', 'Merge pull request #5520 from mhujer/docs-spread-fix-babel\nDocs: Transform rest and spread properties using Babel 6', 'Merge pull request #5526 from yangshun/todo-app-id\n[docs] Use id for TodoApp example', 'Fix file reference typo in starter', 'Merge pull request #5564 from jackiewung/master\nFix file reference typo in starter', 'Remove setProps and replaceProps.', 'add marked source in tutorial doc\nupdate wording of later section\nno first, no next\nmore on wording', "Merge pull request #5536 from zpao/keys-on-prototypes\nDon't use key when defined on String, Number prototypes", 'Update 08.1-more-about-refs.md', 'Merge pull request #5581 from yuyokk/patch-1\nUpdate 08.1-more-about-refs.md', 'Log top-level renders with console.time\nBehind a flag.', 'Merge pull request #5576 from spicyj/log-top-level\nLog top-level renders with console.time', 'shallow render: fix setState in componentWillMount', 'Merge pull request #5561 from graue/setstate-cwm\nshallow render: fix setState in componentWillMount', 'Update ref-10-glossary.md', 'Merge pull request #5584 from zwhitchcox/patch-2\nUpdate ref-10-glossary.md', 'Merge pull request #5559 from shogunsea/docs-add-marked\n[docs]Add marked source in tutorial doc', 'Merge pull request #5570 from jimfb/remove-setprops-replaceprops\nRemove setProps and replaceProps.', 'Rename minlength to minLength in the tags and attributes documentation page', 'Merge pull request #5589 from wrakky/fix-minlength-docs\nRename minlength to minLength in the tags and attributes documentation page', 'Increase severity of setprops and replaceprops deprecations, since their removal is now imminent.', 'Merge pull request #5588 from jimfb/setprops-replaceprops-deprecated\nIncrease severity of setprops and replaceprops deprecations, since their removal is now imminent.', 'Fix single select incorrectly updating\nCloses #5592', 'adding documentation pages for shallowCompare addon', 'Change release to multi task\nMore concise and consistent with the other multitasks', 'chore(ReactComponentWithPureRenderMixin.js): made "Mixin" lowercase\nWhen referring to mixin, the rest of the comment is in lowercase; see line 36 and line 37. \nThis change helps with the consistency of the usage of "mixin", and not to confuse it with a variable name.', 'Merge pull request #5595 from remko/select-bug\nFix single select incorrectly updating', 'Merge pull request #5600 from zwhitchcox/patch-4\nChange release to multi task', 'Merge pull request #5603 from henryw4k/patch-3\nchore(ReactComponentWithPureRenderMixin.js): made "Mixin" lowercase', '[blog] Diversity Scholarship 2016', "Remove dead code\nThis isn't used anywhere in React", 'Merge pull request #5593 from zwhitchcox/patch-3\nRemove dead code', 'Adding class->className as a JSX gotcha\nIt\'s mentioned as a note in "JSX in Depth" however I think for clarity and ease of look-up, it would be a good idea to also include it in the JSX Gotchas list?', 'Clean up caller sites of instantiateReactComponent\nThe 2nd argument was removed since #4139.', 'Merge pull request #5611 from dittos/irc-remove-2ndarg\nClean up caller sites of instantiateReactComponent', "Avoid negative lookahead in regular expression\nI'm trying to use React with otto\n(https://github.com/robertkrimen/otto), which is implemented in Go and\ndoes not support lookaheads or backreferences in regular expressions.\n(Unfortunately that does mean that otto isn't fully compatible with\nthe ECMA5 spec; but since this is the only lookahead I am aware of in\nthe React codebase, this change makes React once again compatible with\notto, and any other JS implementation that may not be fully compliant on\nregular expressions).\nAs far as I can tell, the previous code replaced a sequence of slash\ncharacters with one more slash than before. The new code avoids the\nnegative lookahead by matching any sequence of slash characters and then\nusing the special $& placeholder to replace the matched sequence with\nthe original sequence, plus one more slash.", 'Merge pull request #5614 from mark-rushakoff/avoid-negative-lookahead\nAvoid negative lookahead in regular expression', 'added nuance about identifiers used in custom elements', 'Change devtools install message on file: URLs', 'Merge pull request #5610 from yangshun/change-devtools-message\nChange devtools install message on file: URLs', 'Remove @typechecks\nThese don\'t really do anything.\ncodemod.py -d src --extensions js -m \'\\s* \\* @typechecks.*?\\n\' \'\\n\'\nwith "yes to all".', 'Merge pull request #5640 from spicyj/no-typechecks\nRemove @typechecks', "Clarify usage of .propTypes and .defaultProps when using stateless functional components\nI've seen some people unaware about the fact that you can still specify .propTypes and .defaultProps when you are defining a functional component by setting them as properties of the function.\nI thought clarifying this in the docs could help!", 'Merge pull request #5609 from vitorbal/patch-1\nClarify usage of .propTypes when using functional components', 'Fix wrong script name (showdown -> marked)\njp: チュートリアル内のshowdown を marked に修正', 'Merge pull request #5643 from koh-taka/patch-1\nFix wrong script name (showdown -> marked)', 'Helps avoid a common Issue when following tutorial\nhttps://github.com/reactjs/react-tutorial/issues/87', 'Merge pull request #5644 from AndrewHenderson/patch-1\nHelps avoid a common Issue when following tutorial', 'Finalized wording', 'Merge pull request #5605 from thekevlau/patch-1\nAdding class->className as a JSX gotcha', 'Fix few typos in React docs and comments', 'Correct highlight in tutorial7.js snippet', 'Merge pull request #5654 from jutaz/bugfix/typos\nBugfix - Typos', 'Merge pull request #5655 from adraeth/patch-1\nCorrect highlight in tutorial7.js snippet', 'Autocorrect and autocapitalize should not be property\nFixes facebook/react#5436', "Clarify dependency installation\nSplit browserify and webpack to separate sections.\nRemove babelify from the webpack section since it's only for browserify", 'Merge pull request #5658 from applegrain/clarify-dependency-installation\nClarify dependency installation', 'Merge pull request #5623 from freddyrangel/autocorrect_autocapitalize\nAutocorrect and autocapitalize should not be property', 'Merge pull request #5550 from spicyj/cc-speed\nMake createClass 10-15% faster on complex specs', "Merge pull request #4888 from spicyj/ssr-no-queue\nDon't build up mount-ready queue for server side rendering", 'Initial outline for new devtools api', 'Moved unknown-prop warning into a devtool', 'Rephrase comment to better describe use of warning()', 'Merge pull request #5663 from jonathanp/fix-code-comment\nRephrase comment to better describe use of warning()', 'Added post about upgrading your code to avoid isMounted()', 'fixed docs on ReactElement that were out of sync with code', 'Merge pull request #5587 from jimfb/ismounted-alternatives\nAdded post about upgrading your code to avoid isMounted()', 'Merge pull request #5673 from DJCordhose/reactelement-doc-fix\nfixed docs on ReactElement that were out of sync with code', 'Error boundaries.', 'Merge pull request #5602 from jimfb/error-boundaries\nError boundaries', 'Merge pull request #5599 from zramaekers/shallow-compare-docs\nAdd documentation for shallowCompare addon', 'Merge pull request #5216 from nLight/number-in-data-attrs-2329\nAllow numbers after data- in custom attributes fixes #2329', 'Merge pull request #5346 from prometheansacrifice/warn-immutable-props\nWarns when mutated props are passed.', "Don't build vendor files into build/modules", "Merge pull request #5683 from zpao/build-no-vendor\nDon't build vendor files into build/modules", 'Use duck typing instead of allocating event objects', 'Improve documentation for using React with Webpack\nFixes #5679', 'Get rid of getNativeNode()', 'A couple small style fixups that were missed in recent PRs', 'Added post about components, elements, and instances', 'Merge pull request #5692 from zpao/small-style-fixups\nA couple small style fixups that were missed in recent PRs', 'Merge pull request #5693 from gaearon/elements-post\nAdded post about components, elements, and instances', 'Make sure div > html nesting is considered invalid\nSee #5128.', 'Merge pull request #5694 from spicyj/div-html-nesting\nMake sure div > html nesting is considered invalid', 'Fix children to be a prop in the blog post example', 'Fix minor typos in the blog post', 'improved react-addons-update tests', 'Remove smart quotes from code snippet\n"Smart" quotes aren\'t actually very smart.', 'Merge pull request #5698 from facebook/Daniel15-patch-1\nRemove smart quotes from code snippet in blog post', 'Merge pull request #5697 from kolodny/stricter-update-tests\nimproved react-addons-update tests', 'Fix typo', 'Fix typo\nFix the conference talk youtube url.', 'Merge pull request #5701 from cesarwbr/patch-1\nFix typo in youtube url for video in blog post.', 'Mention that Jest can be used directly in Contributing', "Remove mention of grunt test --debug from README\nIt isn't supported anymore.", 'Merge pull request #5702 from gaearon/patch-3\nMention that Jest can be used directly in Contributing', 'Merge pull request #5695 from gaearon/patch-2\nFix children to be a prop in the blog post example', 'Mention how to run specific tests in Jest', 'Merge pull request #5699 from jwworth/pull-request-1450702663\nFix typo (duplicate word)', 'Merge pull request #5705 from facebook/gaearon-patch-1\nMention how to run specific tests in Jest', 'Fix the incorrect Jest watch command in Contributing', 'Fix a minor typo in Contributing', 'Capitalizes first letter of first word in the Step 1 instruction\nThis proposed change makes the documentation formatting more consistent.', 'Corrects grammatical errors', 'Merge pull request #5708 from kchia/patch-4\nCorrects grammatical errors in tutorial', 'Merge pull request #5706 from kchia/patch-3\nCapitalizes first letter of first word in the Step 1 instruction', '[docs] fixup other broken youtube-nocookie uses', 'Add coveralls.', 'Update zh-docs with 7e2a7f0', 'Merge pull request #5709 from zpao/youtubenocookie\n[docs] fixup other broken youtube-nocookie uses', 'Merge pull request #5707 from jdalton/coveralls\nAdd coveralls support.', "Split jest task into two\nThis ensures that we don't make jest do the additional tracking it needs to make coverage work.", "Remove coverage options from package.json\nThey don't provide any value and since one of them isn't a valid config usage,\nit blurs the line. Instead just store these pieces in the tasks and write them\nto the temp config.", 'Addjust travis for jest coverage', 'Merge pull request #5713 from zpao/jest-coverage-followups\nFollowups to get test coverage reporting to coveralls', 'Merge pull request #5711 from iamchenxin/docs122215\n[docs] Update zh-docs with 7e2a7f0', 'Ensure build directory works when running jest:coverage on its own', 'Update badges to include coverage\nAlso switch to use a different badge provider for consistent styling', 'Import ResponderEventPlugin changes from RN', 'Merge pull request #5308 from spicyj/rep\nImport ResponderEventPlugin changes from RN', 'Fix misunderstanding in tutorial', 'Merge pull request #5712 from dortonway/master\nFix misunderstanding in tutorial', 'Remove fast_finish in travis.yml.', 'Fix typos in posts', 'Clarify React class constructor comments\n\nThe constructor is not always overridden by mocks. Makes viewing this constructor during debugging less confusing.\n', 'Merge pull request #5721 from jdalton/fast-finish\nRemove fast_finish in travis.yml.', 'Merge pull request #5716 from jwworth/pull-request-1450816256\nFix typos in posts', 'Merge pull request #5725 from RochesterinNYC/patch-1\nClarify React class constructor comments', 'Remove now-unused instancesByReactID in DOMInput', 'Set input .type before .value always\nIn IE11 (and below), if you run\nvar input = document.createElement(\'input\');\ninput.value = \'wat\';\ninput.type = \'radio\';\nconsole.log(input.value);\nyou get the string "on" logged. Because that makes sense.\nSo we set the type first.', 'Merge pull request #5729 from spicyj/input-type-value\nSet input .type before .value always', 'Add another test for #5729', 'Merge pull request #5730 from spicyj/input-type-value\nAdd another test for #5729', 'Merge pull request #5590 from jimfb/use-devtool-for-unknown-property-warning\nUse devtool for unknown property warning', 'update zh-docs (v0.14.3+)', 'deleting some unecessary newline', "Pass SVG attributes through\nAll attributes defined on SVG elements will now be passed directly regardless of the whitelist. The casing specified by user will be preserved, and setAttribute() will be used.\nIn the future we will remove support for the camel case aliases to the hyphenated attributes. For example, we currently map strokeWidth to stroke-width but this is now deprecated behind a warning. When we remove support for this we can remove some of the code paths introduced in this commit.\nThe purpose of this change is to stop maintaining a separate SVG property config. The config still exists for two purposes:\n\nAllow a migration path for deprecated camelcased versions of hyphenated SVG attributes\nTrack special namespaced attributes (they still require a whitelist)\n\nHowever it is no longer a blocker for using new non-namespaced SVG attributes, and users don't have to ask us to add them to the whitelist.\nFixes #1657", 'Move SVG attribute deprecation warnings into a devtool\nIn #5590 a new system was introduced for tracking dev-time warnings.\nThis commit uses it for reporting SVG attribute deprecation warnings.', 'Move the specific else if clause up', 'Use JSX in the new tests', 'Merge pull request #5714 from gaearon/passthrough-svg-attributes\nPass all SVG attributes through', 'Document changes in #5714', 'Merge pull request #5736 from gaearon/document-svg-passthrough\nDocument changes in #5714', 'Remove extraneous comment\nThis little guy should have been removed in https://github.com/facebook/react/commit/6bd6ef208b302879eb38018d4192a054f40c1c8b', 'Merge pull request #5741 from mziwisky/patch-1\nRemove extraneous comment', 'Year-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.', 'Add shim files for RN in npm package', 'Merge pull request #5749 from spicyj/lib-native\nAdd shim files for RN in npm package', 'Upgrade fbjs to 0.6\n(counterpart to a29b4938a8e26be3ad3557877d8902db935a84ca)', 'Changelog for 0.14.4\n(cherry picked from commit 3f355d99c5ebc448164e13f3380cf7cda9053613)', 'Update readme for 0.14.4\n(cherry picked from commit 0516e74473bae9fd7e80b81bc54d74cfa1c88615)', 'update website for 0.14.4\n(cherry picked from commit c8398491d85c284858499e1ddaa2e7748c8bed1c)', 'Update a few changelog things forgotten in 3f355d99\n(cherry picked from commit 0d5d0b2688cf9f413f772fb0a86108447ef30a6d)', '0.14.4 blog post', 'Upgrade fbjs to 0.6 in npm package too\n(cherry picked from commit a9732ba548ec3d4b831cbcf5b077f0583509f294)', 'Changelog for 0.14.5\n(cherry picked from commit e7b178390da7647f0c1789ccbc4f4e881c68b60f)', 'Readme for 0.14.5\n(cherry picked from commit d6a0a083e4341fe94336cf32573aac368d9161dc)', 'Website for 0.14.5\n(cherry picked from commit fb6b3b05f41d02734c055681130503fd60c5c6d7)', 'Merge pull request #5748 from rickbeerendonk/year-agnostic-copyright\nYear-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.', 'Update 10.4-test-utils.md\nAdded var renderer = ReactTestUtils.createRenderer(); (Line 235) to clarify where renderer (Line 236) comes from.', 'Merge pull request #5767 from yhagio/patch-2\nUpdate 10.4-test-utils.md', "Fix wording to make it more clear that checkbox (input) supports defaultChecked\nFix some confusion about why input would support defaultChecked (it's because you can have an input of type checkbox).  This has come up a couple of times (https://github.com/facebook/react/pull/5633, https://github.com/facebook/react/pull/5774) but both those PRs were wrong and it was just easier to fix it myself.", 'Merge pull request #5775 from facebook/fix-checkbox-wording\nFix wording to make it more clear that checkbox (input) supports defaultChecked', "support onLoad synthetic event attribute on 'object' tags - useful for telling when SVGs embedded as objects have loaded", 'Merge pull request #5689 from jimfb/cleanup-5151\nGet rid of getNativeNode()', 'Revert "Merge pull request #5689 from jimfb/cleanup-5151"\nThis reverts commit 067547c1d156ea9527dc8f4b4036d2824b651790, reversing\nchanges made to 102cd291899f9942a76c40a0e78920a6fe544dc1.', "Move nodes around by reference instead of by index\nThis makes things easier if we ever want to use more than one DOM node for a component. Notably, this is more convenient if we want to remove the wrappers around text components (since text nodes can be split and joined however a browser feels like) or if we want to support returning more than one element from render (#2127).\nI left the old indexes so that implementations aren't forced to use the node/image if they prefer indices, because I'm not sure yet whether the changes corresponding to my rewrite of DOMChildrenOperations are easy or hard yet in React Native. (The tests pass with and without the DOMChildrenOperations changes here.)", 'Remove now-unused prepareToManageChildren\nThis was a temporary hook needed for the DOM implementation. We no longer need it because we now necessarily load every node into cache (via calling getNativeNode on it) before manipulating any of its siblings.', 'Merge pull request #5782 from spicyj/img\nMove nodes around by reference instead of by index', 'Removed note explaining why the logic is there, since the justification is now different.', 'Merge pull request #5784 from jimfb/getNativeNode\nAdd getNativeNode back, so we can get the native node when performing reorderings (instead of relyin', 'Updated ReactCompositeComponent to trigger componentWillReceiveProps when either props or context change. Fixes issue #5756', 'Merge pull request #5787 from milesj/receive-props-context-fix\nTrigger componentWillReceiveProps when context changes', 'Fix typo in ref-08-reconciliation.md', 'Merge pull request #5799 from gmcquistin/patch-1\n[docs] Fix typo in ref-08-reconciliation.md', 'Upgrade to fbjs@^0.6.1\n(cherry picked from commit f305deb0658f0fa21e2f2eb36396b0b77e5851c9)', 'Changelog & Readme for v0.14.6\n(cherry picked from commit 06cad05d49897ece8ff17dd6f969e9c6dafe66ef)\n(cherry picked from commit 44e90c040d397189bc3dbd8da6e3ef3fc238e2a6)', 'Update website for 0.14.6\n(cherry picked from commit d5bf8c553f6a5e0674fc49a2279051cb267f1825)', 'Blog post explains to verify prop mutations in componentWillReceiveProps', '[docs] Bigger jsfiddle embeds', 'Merge pull request #5801 from zpao/docs-bigger-embeds\n[docs] Bigger jsfiddle embeds', 'Merge pull request #5790 from jimfb/componentWillReceiveProps-blogPost\nBlog post explains to verify prop mutations in componentWillReceiveProps', 'Update thinking-in-react.zh-CN.md', 'Merge pull request #5806 from Zhangjd/master\nUpdate thinking-in-react.zh-CN.md', '[docs] Updated supported attrs', '[docs] remove unnecessary findDOMNode from example\nThis call is not needed anymore due to https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#dom-node-refs', 'Sort attrs in HTMLDOMPropertyConfig', 'Merge pull request #5813 from graue/tips-unneeded-finddomnode\n[docs] remove unnecessary findDOMNode from example', 'Use removeAttribute to forcefully remove properties from the DOM, drop MUST_USE_ATTRIBUTE and manage all regular properties as attributes instead', 'Merge pull request #5814 from zpao/docs-update-attrs-0.14.6\n[docs] Updated supported attrs', 'Merge pull request #5686 from vitorbal/master\nImprove documentation for using React with Webpack', 'Fixed typo in shouldComponentUpdate.png\nReconciiation -> Reconciliation', 'Warn when both value and defaultValue or both check and defaultChecked props are specified on input, textarea, or select elements', 'Merge pull request #5823 from mgmcdermott/master\nWarn when value and defaultValue props are both specified on input or textarea.', 'Fixup style for long lines', 'Merge pull request #5829 from zpao/style-followup\nFixup style for long lines', 'Remove references to IE 8 in docs', 'Removed getDOMNode from react classes.', 'Remove DOM functions from top-level isomorphic API', 'Fixup jsdoc for SyntheticEvent', 'Merge pull request #5826 from jacenko/master\nFixed typo in shouldComponentUpdate.png', 'Merge pull request #5836 from koba04/fixup-jsdoc-for-syntheticevent\nFixup jsdoc for SyntheticEvent', 'blog post: Discontinuing IE 8 Support in React DOM', 'Merge pull request #5834 from spicyj/no-ie8\nblog post: Discontinuing IE 8 Support in React DOM', 'Merge pull request #5732 from iamchenxin/en-docs\n[docs] deleting some unecessary newline', 'Merge pull request #5728 from spicyj/input-gc\nRemove now-unused instancesByReactID in DOMInput', '[docs] Small fixes to "more about refs"\n\nAdd a null check to "A Complete Example".\nFix outdated comment. (Found by @mjomble)\nReplace short dash - with longer dash –.\nRemove backticks from state, because it is not code.\n', 'Merge pull request #5735 from cody/refs\n[docs] Small fixes to "more about refs"', 'Added LinkedInput addon.', 'Merge pull request #5833 from jimfb/remove-getDOMNode\nRemoved getDOMNode from react classes.', 'Merge pull request #5718 from jimfb/linked-input\nAdded LinkedInput addon.', 'Merge pull request #5832 from jimfb/cleanup-top-level-dom-api\nRemove DOM functions from top-level isomorphic API', 'Added additional detail to "props-in-getInitialState" anti-pattern doc\nWhile seemingly self-explanatory, this clarifies the reasons props usage in getInitialState might be considered an antipattern.', 'Merge pull request #5849 from david0178418/master\nAdded additional detail to "props-in-getInitialState" anti-pattern doc', 'Release syntheticEvent.target on the destructor', 'update zh-docs14.3 ,fixed confliction', 'Merge pull request #5724 from iamchenxin/docs122315\nUpdate zh-docs with 4865ddf(v0.14.3+)', 'Merge pull request #5840 from koba04/release-event-target-on-destructor\nRelease syntheticEvent.target on the destructor', 'Removed cloneWithProps addon.', 'Merge pull request #5859 from jimfb/clonewithprops\nRemoved cloneWithProps addon.', 'update react example basic-jsx-precompile comand line on markdown file,new version of babel needed a react presets dependency.', 'Add warning for NaN in style object', 'Remove the recommendation to use isMounted from beginner docs', 'Merge pull request #5870 from SimenB/patch-1\nRemove the recommendation to use isMounted from beginner docs', 'Fix example from #5870 to avoid double rendering', 'Merge pull request #5872 from SimenB/patch-1\nFix example from #5870 to avoid double rendering', 'Merge pull request #5865 from leeyoungalias/master\nupdate react example basic-jsx-precompile comand line', 'Merge pull request #5811 from jontewks/warn-nan-style\nWarn when a style object has NaN for a value', 'Clarify stateless function component optimizations.\nAs discussed on Discord.', 'Merge pull request #5885 from knpwrs/patch-1\nClarify stateless function component optimizations.', 'Only add children when there are children', 'Merge pull request #5886 from goatslacker/cant-dangerouslysetinnerhtml-for-option\nOnly add children in ReactDOMOption when there are children', 'Fixup missing semi-colon\nan inconsistency with a missing semi-colon on a variable', 'Merge pull request #5887 from natejlee/patch-1\nFixup missing semi-colon', 'Add semicolon for react-dom source files.', 'Enable null return values in plain functions', "Merge remote-tracking branch 'facebook/master'", 'ReactChildren.map: only add slash if new child has key\nSee the new test for the scenario I am trying to fix; if you clone an\nelement in React.cloneElement, vs just returning it directly, you will\nget a different key (with a slash in front) even though the two\nchildren are identical.', 'v0.15.0-alpha.1', 'Fix mistranslation "never write to this.props."', 'Merge pull request #5900 from tmysz/ja-doc\nFix mistranslation "never write to this.props."', 'Merge pull request #5891 from zpao/vendor-semi\nAdd semicolon for react-dom source files.', 'Clean up ununsed devDeps\nAlso removed object-assign. We only support building with node v4+ which has Object.assign.', 'Overflow problem fixed', 'Merge pull request #5904 from sercaneraslan/master\nOverflow problem fixed', 'Fix broken guide example in "Motivation: Separation of Concerns"\nThe code example in Motivation: Separation of Concerns now fetches the Engineering facebook page instead of the user pwh.\nWith the current version of the graph api, it is impossible to fetch the user picture from an username. However it is still doable for public pages.', 'fix homepage URLs in package.json files', 'Merge pull request #5917 from zeke/homepage-urls\nFix homepage URLs in package.json files', 'Small copy changes to TestUtils and Perf summaries', 'Merge pull request #5912 from chrisbolin/patch-1\nSmall copy changes to TestUtils and Perf summaries', "Add empty dependencies for packages\nThis ensures that broken npm versions won't crash when doing install --production", 'Merge pull request #5922 from zpao/package-empty-deps\nAdd empty dependencies for packages', 'Add a link to the list of supported events', 'Merge pull request #5928 from scjody/patch-1\nAdd a link to the list of supported events', 'Merge pull request #5911 from Mathieuu/patch-1\nFix broken guide example in "Motivation: Separation of Concerns"', 'Merge pull request #5903 from zpao/rm-build-deps\nClean up ununsed devDeps', 'Update CHANGELOG.md and README.md\n(cherry picked from commit 741124548d152d7e8fa1be6f3e6f7601141a30bc)', 'Update website for 0.14.7\n(cherry picked from commit e48343bd038bff190d2566a4f9c6f70babbfa02b)', 'Update 12-context.md\nContext was missing info on how to update the context after the initial render. Added a simple blurb and an example.\n[Docs] 12-context.md code review changes', 'Merge pull request #5923 from puppybits/patch-1\nUpdate 12-context.md', 'Use const instead of var (ES6 best practices)', 'Merge pull request #1510 from syranide/propattr\nUse removeAttribute to forcefully remove properties from the DOM', 'Merge pull request #3372 from jonhester/void-elements\nReactDOMComponent should throw error when provided children for void elements', 'Merge pull request #5884 from jimfb/component-extends-react-component\nEnable null return values in plain functions', 'Fixes highlight issue for code blocks with overflow', 'Merge pull request #5946 from tjfryan/fix-docs-css\nFixes highlight issue for code blocks with overflow (css)', 'Add note in "Fetching from the server" section.', 'Merge pull request #5955 from pekeq/patch-docs-1\nAdd note in "Fetching from the server" section.', "test: get rid of 'should be 1' comment\nThis should not be 1, since boolean properties always get set.", "Merge pull request #5953 from davidvgalbraith/dont-redundantly-set\ntest: get rid of 'should be 1' comment", "Fixes #5959 - jquery-bootstrap example uses  which does not exist\n\nAdd a handleHidden method to the BootstrapModal component.\nAdd an event listener for 'hidden.bs.modal' on the modal root\nAdd a new onHidden prop to the BootstrapModal component.\nAdd a new 'handleModalDidClose' method to the Example component to be used as the onHidden prop of it's modal component.\n", 'Merge pull request #5961 from MarkMurphy/issue-5959\nFixes #5959 - jquery-bootstrap example uses handleHidden which does not exist', 'Fix for #5957: Bug on resolving default props (HTMLAllCollection)', 'Unnecessary type comparisons have been changed to value comparison', 'Merge pull request #5965 from karczk/issue-5957\nFix for #5957: Bug on resolving default props (HTMLAllCollection)', 'Remove instance of invoking ReactElement with new operator', 'Improve definition of the controlled and uncontrolled input.', 'warn when an input switches between controlled and uncontrolled\nadded controlled key to DEV\nwarn for checkbox inputs\nwarn for radio inputs\ncompute controlled instead of value\ndisplaying owner name in warning\ndisplaying input type in warnings', 'Merge pull request #4437 from gajus/patch-1\nImprove definition of the controlled and uncontrolled input', 'Error boundries should not unmount composite components which were not mounted.', 'Merge pull request #5982 from jimfb/error-boundaries-composite-unmount\nError boundries should not unmount composite components which were not mounted.', 'Fix lint\n\nUpgrade babel-eslint\nIgnore coverage\nFix actual lint warning\n', 'Merge pull request #5986 from zpao/fix-lint\nFix lint', '[docs] Fix typo in blog\nFound a spelling mistake -\nwritting > writing', 'Merge pull request #5992 from pra85/patch-1\n[docs] Fix typo in blog', 'Use HTTPS protocol for jsdelivr.com URL', 'Do not get process object by using require\nBecause process object is globally available in Node.js.', 'Merge pull request #5999 from shinnn/https\nUse HTTPS protocol for jsdelivr.com URL', 'Update jsdelivr url', 'Merge pull request #6000 from shinnn/process\nDo not get process object by using require', 'Merge pull request #5977 from jfairbank/remove-new-call\nRemove instance of invoking ReactElement with new operator', 'Resolve default prop values in cloneElement\nIn cloneElement, when key in input config is set to undefined, the associated\nprop value should be resolved to default prop values', 'Included SRI hashes for fb.me links on download page', 'Remove React.addons.batchedUpdates', 'Merge pull request #6004 from TheBlasfem/sri-links\nIncluded SRI hashes for fb.me links on download page', '[docs] Automate SRI hash generation with rake task', '[docs] Reformat script tags on download page', 'Merge pull request #6016 from zpao/rm-batched-updates-addons\nRemove React.addons.batchedUpdates', 'Merge pull request #5909 from rajatsehgal/patch-1\nUse const instead of var (ES6 best practices)', 'Merge pull request #5892 from ianobermiller/children-map-key-slash\nReactChildren.map: only add slash if new child has key', 'Enable module pattern.', 'Merge pull request #6008 from jimfb/module-pattern\nEnable module pattern.', 'Errors in componentWillUnmount should be caught by error boundary on initial render.', 'Merge pull request #6009 from jimfb/error-boundaries-initial-render-componentWillUnmount\nErrors in componentWillUnmount should be caught by error boundary on initial render.', "Fix for issue/6027.\nReactDOMSelect's _handleChange function tries to set\nthis._wrapperState.pendingUpdate = true after executing the onChange\nfunction. However, if the select was removed as a result of said\nfuction, this._wrapperState would be null. Resulting in an\nUncaught TypeError: Cannot set property 'pendingUpdate' of null.", "Forgot to 'not' the pendingUpdate condition.", 'Add thanks for the react org', 'Merge pull request #6030 from facebook/vjeux-patch-1\nAdd thanks for the react org', 'Merge pull request #5864 from TheBlasfem/master\nWarn when an input switches between controlled and uncontrolled', 'Add npm install instructions to readme', 'Update HTMLDOMPropertyConfig.js', 'Merge pull request #6031 from jontewks/update-docs\nAdd npm install instructions to readme', 'Merge pull request #6032 from saiichihashimoto/allow-profile-attr\nAllow Profile attr', 'Remove check for _wrapperState.pendingUpdate.\nWe can just set it to true regardless.', 'Merge pull request #6028 from sambev/issue/6027-uncaught-type-error\nFix for issue/6027.', 'Update documentation to stateless components\nRef #5949 @jimfb', 'Fix typo in Chinese tutorial', 'Merge pull request #6044 from bellanchor/master\nFix typo in Chinese tutorial', 'Warns on access of props.key and props.ref', 'Merge pull request #5744 from prometheansacrifice/warn-if-user-accesses-key-ref-props\nWarns on access of props.key and props.ref', 'Merge pull request #6017 from zpao/docs-sri-task\nGenerate SRI hashes for docs', 'Update jQuery and marked versions in tutorial', 'Merge pull request #6048 from mxstbr/update-tutorial-versions\nUpdate jQuery and marked versions in tutorial docs', 'Merge pull request #6039 from mxstbr/convert-docs-to-stateless\nUpdate documentation to stateless components', 'Update to jest-cli 0.9.', 'Merge pull request #6052 from cpojer/master\nUpdate to jest-cli 0.9.', 'Fix #4963 - SVG  swallows click events', 'Merge pull request #5720 from edmellum/master\nFix #4963 - SVG  swallows click events', 'Remove "construct" call except on composites\nThis is a little simpler (and a teeny tiny bit faster). The one in ReactCompositeComponent stays because of the way we create ReactCompositeComponentWrapper inside instantiateReactComponent.', 'Merge pull request #4940 from spicyj/no-construct\nRemove "construct" call except on composites', 'Clearify callback text in the tutorial', 'Fix merge conflict in #4940', 'Wrap insertBefore in Windows 8 apps', 'Merge pull request #6063 from Andrew8xx8/master\nWrap insertBefore in Windows 8 apps', 'Create ms-unsafe functions in one place, simplifies code.', 'warn(SyntheticEvent): Warn when accessing or setting properties on released syntheticEvents\nCloses #5939', 'Merge pull request #5940 from kentcdodds/pr/warn-event-pool-access\nAdd warning when reading from event which has been returned to the pool', 'Update comments for EventPluginHub.js', 'Merge pull request #6065 from benjycui/fix-comments\nUpdate comments for EventPluginHub.js', 'Add a warning for adding some properties in the SyntheticEvent object if Proxy is supported', 'Merge pull request #6059 from jimfb/tutorial-children-callback\nClearify callback text in the tutorial', 'Merge pull request #6064 from jimfb/provide-msunsafe-wrapper\nCreate ms-unsafe functions in one place, simplifies code.', "Don't wrap text in  elements\nInstead, use opening and closing comment nodes to delimit text data.", '[docs] Use consistent formatting for headers', "Merge pull request #5753 from mwiencek/no-text-span-2\nDon't wrap text in  elements", 'Add ReactInstrumentation\nThis adds ReactInstrumentation for the isomorphic package that uses the same approach as ReactDOMInstrumentation. Currently it is gated behind __DEV__ but we will likely change this later to a runtime flag determined by whether there are any active listeners.\nThe first few events we add here should be sufficient for React DevTools, as determined by the hook.emit() calls in https://github.com/facebook/react-devtools/blob/d90c43201617d5aef378669da926d79515b6a811/backend/attachRenderer.js.\nThese events will also be useful for reconstructing the parent tree in the ReactPerf rewrite in #6046.', "Fix text component rendering with server markup\nThese weren't caught by CI in #5753 because we don't automatically test that yet... fixing that next.", "Fix build for useCreateElement: false, run Travis\nIt's important that we keep these code paths working because they're the only comprehensive test of adopting server-rendered HTML that we have right now. This is terrible and hacky but I am hopeful that it will at least catch stuff.", 'Merge pull request #6070 from spicyj/server-text\nFix build for useCreateElement: false, run Travis', 'Versioning Blog Post', 'Merge pull request #6073 from sebmarkbage/versionpost\nVersioning Blog Post', 'Hashrockets', "Clarify what the current version scheme is\nIn case you don't remember what version we're currently on.\nAlso, clarify that this is semver and that v1.0 comes with preconceived\nnotions.", 'Merge pull request #6074 from sebmarkbage/versionpost\nClarify what the current version scheme is', 'Merge pull request #5997 from truongduy134/clone-element\nFix #5929. Resolve to default props when config key is set to undefined in cloneElement', 'Remove unused enqueueSetProps methods', 'Replace the code sample in all the languages.\nReplace the code sample in all the languages.\nBut I leave below sample code because of wording relation.\n\ntutorial6:see 25ef456\nfrom tutorial16:see 3812b95\n', 'Merge pull request #6071 from nakazye/fix_highlight\nfix sample code highlight', 'Add deprecation notice.', 'Change script src for htmltojsx.min.js to referral target to fix https error', 'Merge pull request #6089 from chromakey/bb-fix-htmltojsx-script-link\nFix script source HTTPS error in html-jsx.md doc', 'Merge pull request #6085 from srph/patch-1\nAdd ReactLink deprecation notice', 'Fix inverted definition of Controlled component', 'Merge pull request #6092 from dpercy/patch-2\nFix inverted definition of Controlled component', 'Added icon for external links in Docs nav and unlinked Complementary Tools and Examples in favor of this icon', 'add "cite" attribute to whitelist for  elements (fixes #6084)', 'Merge pull request #6094 from AprilArcus/cite-attribute\nadd "cite" attribute to whitelist for  elements', 'Add suppressContentEditableWarning\nSee #5837', 'Merge pull request #6112 from mxstbr/surpressContentEditableWarning\nAdd suppressContentEditableWarning', 'Merge pull request #5947 from koba04/add-warning-for-adding-synthetic-event-property\nAdd a warning for adding a property in the SyntheticEvent object', 'fix instance null when involve async destruction', 'Clarify a step in the quick start \nI propose to add a sentence to indicate the page is ready, and the next step (Separate File) is optional. IMMO, the quick-start guide should be really short so that readers can see the result asap. Furthermore, the "Separate File" might not work for readers using Chrome anyway.', 'Merge pull request #6123 from changhw01/patch-1\nClarify a step in the quick start', 'Moved LinkedInput from addons to packages.', 'Added support for synthetic animation/transition events.', 'Clarify error when passing class to render()', 'Merge pull request #5877 from spicyj/mount-class-error\nClarify error when passing class to render()', 'Merge pull request #6082 from spicyj/nq-set-props\nRemove unused enqueueSetProps methods', 'Merge pull request #6068 from gaearon/react-instrumentation\nAdd ReactInstrumentation', 'Merge pull request #6127 from jimfb/LinkedInput-to-packages\nMoved LinkedInput from addons to packages.', 'Disable ViewportMetrics unless MouseEvent lacks support for pageX/pageY', 'Merge pull request #6129 from gaearon/syranide-lessvpm\nDisable ViewportMetrics unless MouseEvent lacks support for pageX/pageY', 'Fix the lint issue introduced in #6129', 'Update to Babel 6', 'Merge pull request #6113 from kittens/babel-6\nUpdate to Babel 6', 'support standard "cssFloat" css property\nFor tools that compile CSS may have already converted the name.\nMore info:\nhttps://npmjs.com/camelcase-css\nhttps://npmjs.com/postcss-js', 'Merge pull request #6133 from stevenvachon/patch-1\nsupport standard "cssFloat" css property', 'Merge pull request #6005 from milesj/synthetic-transition\nAdded support for synthetic animation/transition events.', 'Fix renderToStaticMarkup invariant', 'remove babel-browser link', 'Merge pull request #6139 from mxstbr/fix-rendertostaticmarkup-invariant\nFix renderToStaticMarkup() invariant', 'Update 10.2-form-input-binding-sugar.zh-CN.md\ntranslation other English Party to Chinese.', 'Merge pull request #6141 from wikinee/master\nUpdate 10.2-form-input-binding-sugar.zh-CN.md', 'Using Object.is implementation when compare values inside React.PropTypes.oneOf', 'Merge pull request #6132 from chicoxyzzy/use_object_is_in_oneof_validate_method\nUsing Object.is implementation when compare values inside React.PropTypes.oneOf', 'Merge pull request #6140 from NogsMPLS/removeBabelBrowser\n[Docs] Remove babel-browser link', 'Merge pull request #6090 from joecritch/docs-external-link-icon\n[Docs] Added icon for external links in nav', 'Don\'t add class="" if we don\'t need to', 'Add redirect layout (again) and use it', 'Updated code fragment for correctness.', 'Merge pull request #6151 from zpao/docs-external-sidebar-followup\nDocs external sidebar followup', 'Merge pull request #6152 from jimfb/fix-blog-code-fragment\nUpdated code fragment for correctness.', "Copy and paste no-jsx note from top of file to places where it's used\nCloses #6157", "Don't interpret reserved props as attributes for SVG elements\nThis fixes a bug introduced in #5714.\nThe code paths are now similar to web components where we worked around the same issue in #5093.\nAdditionally, we also skip dangerouslySetInnerHTML and suppressContentEditableWarning.", "Merge pull request #6164 from gaearon/fix-svg\nDon't set children attribute on SVG nodes", 'Merge pull request #6159 from mxstbr/move-jsx-comment\nMove no-jsx note in ReactElement tests', 'Fixed some linting warnings and some mis-spacing in SyntheticEvent warnings.', 'Merge pull request #6172 from mgmcdermott/master\nFixed linting warnings and some mis-spacing in SyntheticEvent warnings', 'Convert to .eslintrc.js', 'Remove dead code.', 'Update lint config, dependencies, fix issues\nThis also fixes messages from new synthetic events warnings', 'Merge pull request #6175 from zpao/eslintrc-fixes\nESLint upgrade & fixes', 'Warn about SVG attributes once\nThis fixes a missing check in #5714', 'Fixed typo in reconciliation docs.', 'Merge pull request #6184 from gaearon/fix-svg-warning\nWarn about deprecated SVG attributes only once', 'Merge pull request #6183 from jimfb/rec-update\nFixed typo in reconciliation docs.', 'Extend the correct object in the SyntheticEvent proxy', 'Merge pull request #6189 from zpao/sythetic-events-fix\nFix issue with SyntheticEvents and Proxies', '[docs] keep position of "Edit on GitHub" link fixed', 'Update PureRenderMixin docs, adding ES6 example', 'Merge pull request #6180 from camjc/master\nUpdate PureRenderMixin docs, adding ES6 example', 'Upgrade fbjs, fbjs-scripts', 'Merge pull request #6177 from yuanyan/patch-1\nRemove dead code.', 'Fix #6114 - Calling setState inside getChildContext should warn', 'Merge pull request #6121 from raineroviir/rainer\nFix #6114 - Calling setState inside getChildContext should warn', 'Add benchling articles about perf to docs\nTemporary solution until new react perf is released.\nRef #6174', 'Merge pull request #6185 from zpao/fbjs-upgrade\nUpgrade fbjs, fbjs-scripts', 'Reset Jest to use Jasmine1 so Tests pass again\nfixes #6198', 'Merge pull request #6199 from jquense/patch-4\nReset Jest to use Jasmine1 so tests pass again', 'Update to jest 0.9.0.', "Merge pull request #5781 from ara4n/master\nsupport onLoad synthetic event attribute on 'object' tags", '[docs] Upgrade to work with babel 6, fetch remote babel-browser for now', 'Merge pull request #6200 from cpojer/master\nUpdate to jest 0.9.0.', 'Merge pull request #6201 from zpao/docs-babel-6\n[docs] Upgrade to work with babel 6, fetch remote babel-browser for now', 'Introduce search\nPowered by the awesome Algolia :)', 'Revert "Change release to multi task"\nThis reverts commit c77f0b2fc57df9f4b7d632e325fe236c452af6a5.', 'v15.0.0-rc.1', 'v15.0 rc1 blog post', 'v15 rc1 starter kit', 'Remove a couple old updates from blog post', 'Merge pull request #6207 from zpao/15rc-blog-post-corrections\nRemove a couple old updates from blog post', 'Missed parentheses for matchMeida parameter\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia', 'Merge pull request #6208 from JinxiuLee/patch-2\nMissed parentheses for matchMeida parameter', 'added border-image-outset CSS property to unitless properties\nAccording to\nhttps://drafts.csswg.org/css-backgrounds-3/#border-image-outset it\nsupports both number and length values.\nAlways applying ‘px’ might in that case perhaps return unwanted\nbehavior.', 'Fix a mixin name in a blog post', 'Merge pull request #6214 from koba04/patch-6\nFix a mixin name in a blog post', '[fix] key/ref warnings incorrectly throw on DOM Elements', 'Merge pull request #6095 from yiminghe/fix-async-ref-destruct\nfix instance null when involve async destruction', 'Merge pull request #6223 from lelandrichardson/patch-1\n[fix] key/ref warnings incorrectly throw on DOM Elements', 'Add a warning for adding properties into ResponderSyntheticEvent\nThis is a additional work for #5947.', 'Bug fix for issue 5202', 'set value property explicitly for "option" element even if value is empty', 'Fix style= formatting in v15 rc blog post', 'Merge pull request #6224 from koba04/adding-a-warning-for-responder-synthetic-event\nAdd a warning for adding properties into ResponderSyntheticEvent', 'update to set value property with empty string; add test; update ReactDOMComponent test', 'added component name to css property warnings', 'Fix ReactMarkupChecksum.addChecksumToMarkup() adds checksum to comments\nReactMarkupChecksum.addChecksumToMarkup() should not add checksum to\ncomment markup, which is generated from components returns null. This\nfixes #6209.', 'Merge pull request #6233 from sairion/15rc1-comment-bug\nFix ReactMarkupChecksum.addChecksumToMarkup() adds checksum to comments', 'Fix markup.test is not a function', 'Merge pull request #6245 from koba04/fix-test-is-not-a-function\nFix markup.test is not a function', 'Add nodes to DocumentFragments before attaching', 'Merge pull request #6251 from zpao/docfragfix\nAdd nodes to DocumentFragments before attaching', 'Revert "Merge pull request #5736 from gaearon/document-svg-passthrough"\nThis reverts commit 713401f2eb4b892f872ec61b15fdb597c4eeaae6, reversing\nchanges made to 53dabe748c6817cbb7b43f975e24b61331011077.', 'Revert "Merge pull request #6164 from gaearon/fix-svg"\nThis reverts commit 4bbd8d25e19e42533ba69c8fc995bb0cd74427bf, reversing\nchanges made to 56c423afd66f7f1363dee87d25795418d5e74a30.', 'Revert "Merge pull request #6184 from gaearon/fix-svg-warning"\nThis reverts commit 36798f7395d9b2e1cfaed988133d11fa88afa8f1, reversing\nchanges made to b89e7d25d5695952f7d201f516451c4dc241c023.', 'Revert "Merge pull request #5714 from gaearon/passthrough-svg-attributes"\nThis reverts commit 53dabe748c6817cbb7b43f975e24b61331011077, reversing\nchanges made to 82fe64a4564238f8923020f6f4ab4864d1459533.', 'Stop specifying MUST_USE_ATTRIBUTE again (bring back null)', 'Scrape MDN for latest SVG', 'Consolidate SVG config to avoid some duplication', "Use 0 instead of null in property config\nWe're using this value to check bits and null is 0 in that sense anyway. This shaves off a few bytes (though as expected, gzip is virtually unchanged)", 'Remove attributes already specified in the HTML config', 'Fix lint warnings due to backouts', 'Update DOMLazyTree fragments comment to reflect reality', 'Merge pull request #6243 from zpao/fuck-svg-2\nRevert SVG passthrough and expand whitelist', 'Merge pull request #6210 from rofrischmann/unitless-border-image-outset\nadded borderImageOutset to unitless CSS properties', 'Merge pull request #6202 from vjeux/search\nIntroduce search', '[DOCS] Update zh-docs to v15-rc.1 (with #3240c09)', 'Merge pull request #6256 from iamchenxin/zh_docs031316\n[DOCS] Update zh-docs to v15-rc.1 (with #3240c09)', 'Update 02-displaying-data.zh-CN.md\n每三个是子节点 --> 第三个是子节点', '[DOCS] Update zh-docs to v15-rc.1 (with #3240c09)', 'Merge pull request #6258 from iamchenxin/zh_docs031316rest\n[DOCS] Update zh-docs to v15-rc.1 (with #3240c09)', 'Merge pull request #6260 from iawia002/master\nUpdate 02-displaying-data.zh-CN.md', 'Add focusable attribute to SVG whitelist\nFixes #6212', 'Add vector-effect to SVG whitelist\nRequested in https://github.com/facebook/react/issues/1657#issuecomment-148420568', 'added several new unitless properties', 'Merge pull request #6267 from gaearon/svg-whitelist\nAdd more properties to the SVG whitelist', 'Merge pull request #6226 from antoaravinth/PR-5202\nBug fix for issue 5202', 'Merge pull request #6270 from rofrischmann/unitless-css-property\nadded several new unitless properties', 'getEventKey unit tests\nAdds unit tests to getEventKey function.', 'Revert "Bug fix for issue 5202"', 'Merge pull request #6274 from facebook/revert-6226-PR-5202\nRevert "Bug fix for issue 5202"', 'Skip all special props when setting attributes on web components', 'v15.0.0-rc.2', 'Add v15 RC2 blog post', 'Add v15 RC2 download', 'Merge pull request #6276 from gaearon/fix-custom-components\nSkip all special props when setting attributes on web components', 'Merge pull request #6273 from cbrwizard/getEventKey_tests\ngetEventKey unit tests', 'Remove react/addons', 'Make ReactPerf measurements opaque\nWe intend to change the measurement format significantly in #6046. In order to introduce the new ReactPerf during 15.x release cycle, we are making the measurement structure opaque-ish in 15.0.', 'Merge pull request #6286 from gaearon/opaque-perf-measurements\nMake ReactPerf.getLastMeasurements() opaque', 'Fix the ReactDefaultPerf test to match changes in #6286', 'Merge pull request #6285 from gaearon/no-addons\nRemove react/addons', 'Add missing semicolon in test-utils part of docs', 'Rename ReactPerf methods to match the upcoming ReactPerf revamp', 'Merge pull request #6287 from gaearon/rename-perf-methods\nRename ReactPerf methods to match the upcoming ReactPerf revamp', 'Strip complex values from ReactPerf.printDOM() output\nFixes #6288', 'Try disabling coverage on master to prevent Travis crashes\nWe suspect that memory overhead caused by coverage might be the reason Travis fails on master. No guarantees it will work but worth a try.', 'Merge pull request #6289 from gaearon/strip-circular-refs\nStrip complex values from ReactPerf.printDOM() output', 'Merge pull request #6281 from rgarifullin/microfix_docs\nMicrofix docs', 'Remove unused export from DOMChildrenOperations', 'Merge pull request #6301 from gaearon/remove-dead-export\nRemove unused export from DOMChildrenOperations', 'getEventCharCode unit tests\nAdds unit tests to getEventCharCode.', 'Free memory allocated by testElement after usage\nIE11 reports testElement as detached DOM node consuming memory. It is captured in closure of setInnerHTML function and could be safely cleared after feature test.', 'Merge pull request #6309 from victor-homyakov/patch-1\nFree memory allocated by testElement after usage', 'Use loose-envify instead of envify\nThis reduces the number of transitive dependencies and decreases the build time (by ~6% on my machine).', 'Merge pull request #6303 from qerub/use-loose-envify\nUse loose-envify instead of envify', "[website] Fix jump on the header\nAlgolia adds two inline styles\ncss\n  position: relative;\n  vertical-align: top;\nto the element once the script inserted at the end of the page runs which super slightly moves the header. The fix is to always apply those two rules this way it doesn't jump. I did not notice it on my machine because it doesn't move when custom fonts are not being used.\nTest Plan:\n- Open two tabs: reactjs.com and localhost:4000/react\n- Click around on reactjs.com to prime the cache with the fonts\n- Switch tabs and click around on localhost (but do not force refresh!)\n- Now you get custom fonts loaded locally and it doesn't jump when you change tabs", 'Make setState() callback error message more descriptive\nFixes #6306', 'Use specific method names in error messages', 'Merge pull request #6312 from vjeux/fix_docs_jump\n[website] Fix jump on the header', "Removed script security attributes, since fb.me isn't setting the proper headers.", "Merge pull request #6313 from jimfb/script-integrity-attribute\nRemoved script security attributes, since fb.me isn't setting the proper headers.", 'Add bad callback invariants to ReactDOM.render() calls', 'Change message format to be more consistent with other errors', 'Merge pull request #6307 from cbrwizard/getEventCharCode_unit_tests\ngetEventCharCode unit tests', 'Add warnings for onFocusIn and onFocusOut props', "Highlight 'NOT' word in example page.", "Merge pull request #6257 from terry3/highlight-not-working\nHighlight 'NOT' word in example page.", 'Merge pull request #6310 from gaearon/setstate-warning\nAdd more specific error messages for bad callback in setState, replaceState, and ReactDOM.render', 'Add missing set -e to Travis builds\nFixes #6150, corrects a mistake made in d138b286db4fcb7137f9267a30ec64b657d3cfb4', 'Merge pull request #6242 from edvinerikson/add-origin-to-css-warnings\nadded component name to css property warnings', 'Merge pull request #6191 from strawbrary/edit-on-github-position\n[docs] keep position of "Edit on GitHub" link fixed', 'Fix ReactPerf.printOperations() test to work with createElement = false', 'Merge pull request #6326 from gaearon/fix-test\nFix ReactPerf.printOperations() test to work with createElement = false', 'Merge pull request #6195 from mxstbr/perf-links\nAdd benchling engineering articles about perf to docs', 'Updated react conf links\n\nAdded React Conf 2016\nFixed Links for React Conf 2015\n', 'Merge pull request #6296 from jontewks/add-warnings\nAdd warnings for onFocusIn and onFocusOut props', 'Merge pull request #6330 from speedskater/patch-1\nUpdated react conf links', 'add beginner friendly resource for learning how to PR', 'add prs welcome badge', 'Merge pull request #6333 from kentcdodds/pr/beginner-friendly-badge\nadd prs welcome badge', 'Make Browserify-specific modules to remove DOM dependencies from npm package', 'Merge pull request #6331 from zpao/isonpmorphic\nMake Browserify-specific modules to remove DOM dependencies from npm package', 'Merge pull request #6332 from kentcdodds/pr/beginner-friendly\nadd beginner friendly resource for learning how to PR', "Test to verify findDOMNode does not throw in willMount\nAdds a test to prevent a regression of throwing an error when\ncalling findDOMNode(this) in a component's componentWillMount\nfunction. This previously used to throw an invariant violation but\nnow does not any more.", 'Merge pull request #6305 from maherbeg/maher-error-find-dom-node\nTest to verify findDOMNode does not throw in willMount', 'Rename example package.json command for consistency with README', "Merge branch 'andreypopp-patch-1'", 'Translate thinking-in-react.md to Japanese', 'Blog post for React 0.14.8', 'Update README and CHANGELOG for 0.14.8', 'Merge pull request #6370 from gaearon/148-post\nBlog post for React 0.14.8', 'Fix whitespace in 0.14.8 blog entry', 'Update examples for v15\n\nUpdate commonjs example to use Babel 6\nUpdate click counter example to match other examples\nUpdate jquery example\nStop shipping webcomponents.js in starter kit\n', 'Merge pull request #6337 from zpao/15-examples\nUpdate examples for 15 (and other examples fixes)', 'SyntheticKeyboardEvent unit tests\nAdds unit tests for SyntheticKeyboardEvent.', 'Merge pull request #6360 from cbrwizard/SyntheticKeyboardEvent_unit_tests\nSyntheticKeyboardEvent unit tests', 'Update ES6 class documentation with binding perf\nAdding a note in the ES6 class documentation about function binding.  Recommending that you bind your handlers in the constructor so that they are referentially the same function every time render is invoked (helps with child components that might potentially call shouldComponentUpdate)', 'Merge pull request #6373 from mfunkie/patch-2\nUpdate ES6 class documentation with binding perf', 'Link to "No Autobinding" section for ES6 classes.\nThere\'s a more descriptive section about the lack of Autobinding in ES6 classes and suggestions around it, so this commit adds a link to that section.', 'Merge pull request #6374 from mfunkie/patch-3\nLink to "No Autobinding" section for ES6 classes.', 'Fixed paren balance in the doc', 'Document how to avoid wrapper in ReactTransitionGroup\nThanks to @rayshan for some rewording tips too!', 'Merge pull request #6363 from facebook/gaearon-patch-1\nDocument how to avoid wrapper in ReactTransitionGroup', 'SyntheticClipboardEvent unit tests\nAdds unit tests for a SyntheticClipboardEvent.', "Spy at warnings consistently inside test cases\nWe move any spies on console.error() from beforeEach() to the individual it() tests. This means that if a new test is introduced in these suites, it does not ignore warnings by default, but fails on any unexpected warning, which is Jest's default behavior.\nWe also change a few old instances of direct console.error = jest.genMockFn() assignment to use spyOn() for consistency with the rest of the tests.", 'Merge pull request #6383 from gaearon/consistent-spies\nSpy at warnings consistently inside test cases', 'Merge pull request #6367 from sottar/translate-thinking-in-react.md-to-Japanese\nTranslate thinking-in-react.md to Japanese', 'Merge pull request #6381 from cbrwizard/clipboard_event_unit_tests\nSyntheticClipboardEvent unit tests', 'Add ReactDebugInstanceMap\nThis PR is the first in a series of pull requests split from the new ReactPerf implementation in #6046.\nHere, we introduce a new module called ReactDebugInstanceMap. It will be used in __DEV__ and, when the __PROFILE__ gate is added, in the __PROFILE__ builds. It will not be used in the production builds.\nThis module acts as a mapping between “debug IDs” (a new concept) and the internal instances. Not to be confused with the existing ReactInstanceMap that maps internal instances to public instances.\nWhat are the “debug IDs” and why do we need them? Both the new ReactPerf and other consumers of the devtool API, such as React DevTools, need access to some data from the internal instances, such as the instance type display name, current props and children, and so on. Right now we let such tools access internal instances directly but this hurts our ability to refactor their implementations and burdens React DevTools with undesired implementation details such as having to support React ART in a special way.1\nThe purpose of adding ReactDebugInstanceMap is to only expose “debug IDs” instead of the internal instances to any devtools. In a future RP, whenever there is an event such as mounting, updating, or unmounting a component, we will emit an event in ReactDebugTool with the debug ID of the instance. We will also add an introspection API that lets the consumer pass an ID and get the information about the current children, props, state, display name, and so on, without exposing the internal instances.\nReactDebugInstanceMap has a concept of “registering” an instance. We plan to add the hooks that register an instance as soon as it is created, and unregister it during unmounting. It will only be possible to read information about the instance while it is still registered. If we add support for reparenting, we should be able to move the (un)registration code to different places in the component lifecycle without changing this code. The currently registered instances are held in the registeredInstancesByIDs dictionary.\nThere is also a reverse lookup dictionary called allInstancesToIDs which maps instances back to their IDs. It is implemented as a WeakMap so the keys are stable and we’re not holding onto the unregistered instances. If we’re not happy with WeakMap, one possible alternative would be to add a new field called _debugID to all the internal instances, but we don’t want to do this in production. Using WeakMap seems like a simpler solution here (and stable IDs are a nice bonus). This, however, means that the __DEV__ (and the future __PROFILE__) builds will only work in browsers that support our usage of WeakMap.', 'Link to the meeting notes', 'Merge pull request #6392 from facebook/gaearon-add-meeting-notes\nLink to the meeting notes from Contributing', 'Merge pull request #6389 from gaearon/reactperf-reactdebuginstancemap\nAdd ReactDebugInstanceMap', 'Update ReactDOMProduction-test.js', 'Merge pull request #6399 from facebook/gaearon-flip-dev\nFlip DEV assignments in ReactDOMProduction-test', 'Added new documentation showing use of a custom validator for arrayOf or objectOf, specifically how the method signature for such a validator differs from the customProp validator method signature. Made minor edits to error message for customProp example to match error messages found in src.', 'Merge pull request #5731 from MatthewHerbst/docs-arrayof-custom-validator\nDocumentation for arrayOf custom item validator', 'Clarify that ReactPerf.getLastMeasurements() is now opaque', 'Merge pull request #6405 from facebook/gaearon-patch-2\nClarify that ReactPerf.getLastMeasurements() is now opaque', 'Update authors for v15\n\n\nfix conor\n\n\none fewer jonathan\n\n\nnakazye\n\n\nThird9 & translucens\n\n\nzjjw\n\n\nrebase on master to pick up recent changes\n\n\nrebase\n\n\nshogunsea\n\n\ncouple names for mailmap\n\n\niawia002\n\n\nrebase\n\n\nterry3, speedskater\n\n\nrebase, handle duplicate mark\n\n\nmore\n\n', 'Use Object.assign directly and inject object-assign at compile', 'Merge pull request #6376 from zpao/object.assign\nUse object-assign instead of our own dated "polyfill"', 'Remove 15 RC1 changelog entry that was fixed in 0.14', 'Remove another 0.14 changelog entry for 15 RC1 release notes', "Remove jsx task & jsx-internal script\nThese haven't been used in a long time so it's time to get rid of them.", 'Upgrade fbjs', 'Upgrade browserify', 'Merge pull request #6228 from everdimension/fix_option_value\nset value property explicitly for "option" element even if value is empty', 'Merge pull request #6408 from facebook/gaearon-patch-2\nRemove 15 RC1 changelog entry that was fixed in 0.14', 'Fix typo\nResets currentTarget on the pooled event instead of adding an\nexpando.', 'Merge pull request #6415 from sebmarkbage/typofix\nFix typo', "Make sure simulated events don't warn when providing extra event properties", 'Fix tests for value change', 'Merge pull request #6413 from zpao/deps-cleanup\nUpgrade a few package dependencies, remove unused task', "Merge pull request #6380 from zpao/simulatewarning\nMake sure simulated events don't warn when providing extra event properties", '[docs] Update supported attrs, clarified what supported elements actually means', 'Fix "vice versa" in warning message\nThe phrase is 2 words, not 1.', 'Fix briefly confusing typo\nThere are two examples of a text input with initial value  of "Hello!" on this page, a controlled and an uncontrolled. The explanation for the uncontrolled version mistakenly says it works much like the earlier "uncontrolled" example, but the earlier example was the controlled version.', 'Merge pull request #6426 from zpao/valuetest\nFix tests for value change', 'Merge pull request #6430 from formido/patch-1\nFix briefly confusing typo', 'Merge pull request #6429 from zpao/viceversa2words\nFix "vice versa" in warning message', 'Kill React.__spread\nThis was only for a JSTransform related experiment that is now\ndead along with JSTransform.', 'Ensure default injection is injected for test utils', 'Merge pull request #6432 from zpao/testutilsinlinerequiresinject\nEnsure default injection is injected for test utils', 'Merge pull request #6431 from sebmarkbage/killspread\nKill React.__spread', 'Merge pull request #6428 from zpao/15-docs-attrs\n[docs] Update supported attrs, clarified what supported elements actually means', 'Shrinkwrap for release branch', '[docs] Update acknowledgements for v15', 'v15.0.0']v0.14.8 React

Fixed memory leak when rendering on the server
 ['Update website for 0.14.7', 'Merge pull request #5911 from Mathieuu/patch-1\nFix broken guide example in "Motivation: Separation of Concerns"\n(cherry picked from commit 4b2b7b0d3edf1ace0e070960d764073b9c2040eb)', 'Merge pull request #5923 from puppybits/patch-1\nUpdate 12-context.md\n(cherry picked from commit 9c3f595597f167fef9b0679f716216bb56e25a14)', 'Merge pull request #5992 from pra85/patch-1\n[docs] Fix typo in blog\n(cherry picked from commit 725a723e27b776863c2be1661d9b7317e4e086ce)', 'Merge pull request #4437 from gajus/patch-1\nImprove definition of the controlled and uncontrolled input\n(cherry picked from commit 220b4b6b50eb146c6e18934aa86afaa3250247ab)', 'Add thanks for the react org', 'Merge pull request #5955 from pekeq/patch-docs-1\nAdd note in "Fetching from the server" section.\n(cherry picked from commit 823966ef33211f94f1ebc517a42812bfe6c0fbba)', 'Merge pull request #6004 from TheBlasfem/sri-links\nIncluded SRI hashes for fb.me links on download page\n(cherry picked from commit bd3979980fa5e30cb6df824f1eea2883dc9dac52)', 'Merge pull request #5909 from rajatsehgal/patch-1\nUse const instead of var (ES6 best practices)\n(cherry picked from commit b560fea08d0c160b3f5099ffd62fdf376bbe3f81)', 'Merge pull request #6044 from bellanchor/master\nFix typo in Chinese tutorial\n(cherry picked from commit ee64241e90c028645538c31b9c77405976e1a1df)', 'Merge pull request #6017 from zpao/docs-sri-task\nGenerate SRI hashes for docs\n(cherry picked from commit 41dea65abf66de0845f120a91d6c90b2fc368559)', 'Merge pull request #6048 from mxstbr/update-tutorial-versions\nUpdate jQuery and marked versions in tutorial docs\n(cherry picked from commit 356fa4e8c09f4e515dd155b6b0c13dba8eed1fd5)', 'Merge pull request #6039 from mxstbr/convert-docs-to-stateless\nUpdate documentation to stateless components\n(cherry picked from commit 73ad44567c76a98912645a6c3e4efdaeca3bf5f2)', 'Versioning Blog Post', 'Hashrockets\n(cherry picked from commit 628a16c84d0380613adf3ab8fbe431273ad60c88)', "Clarify what the current version scheme is\nIn case you don't remember what version we're currently on.\nAlso, clarify that this is semver and that v1.0 comes with preconceived\nnotions.", 'Merge pull request #6059 from jimfb/tutorial-children-callback\nClearify callback text in the tutorial\n(cherry picked from commit efa8624eb9f41ee8938cc3b7d89305f2e8c9d773)', 'Merge pull request #6071 from nakazye/fix_highlight\nfix sample code highlight\n(cherry picked from commit 5ebb784be555a97993c9e2c9f5cd070f895aac82)', 'Merge pull request #6089 from chromakey/bb-fix-htmltojsx-script-link\nFix script source HTTPS error in html-jsx.md doc\n(cherry picked from commit 5652c710c040b8441a12eeefd5df0a6ccf02e14a)', 'Merge pull request #6092 from dpercy/patch-2\nFix inverted definition of Controlled component\n(cherry picked from commit de09e0acd82d2de955af4c395fd9066292adef70)', 'Register null component IDs at componentDidMount\nThis pushes registering of null component IDs to componentDidMount.\nThe result that null component IDs are never registered during\nserver-side rendering, which fixes a memory leak with null component\nIDs never being cleaned up server-side.', 'Merge pull request #6123 from changhw01/patch-1\nClarify a step in the quick start\n(cherry picked from commit e2866ae412c1b2499fd64651690837ac9864fd61)', 'Merge pull request #6140 from NogsMPLS/removeBabelBrowser\n[Docs] Remove babel-browser link\n(cherry picked from commit a026b3562622ae408837d92dbaa4de850166f735)', 'Merge pull request #6090 from joecritch/docs-external-link-icon\n[Docs] Added icon for external links in nav\n(cherry picked from commit 8f2b7d8e7141d5719591c7b0fcf3a6cfd5606a69)', 'Merge pull request #6151 from zpao/docs-external-sidebar-followup\nDocs external sidebar followup\n(cherry picked from commit 4da7e7ef9c44f92d2cf3c0a4b873864be29bc345)', 'Merge pull request #6152 from jimfb/fix-blog-code-fragment\nUpdated code fragment for correctness.\n(cherry picked from commit 56c423afd66f7f1363dee87d25795418d5e74a30)', 'Merge pull request #6183 from jimfb/rec-update\nFixed typo in reconciliation docs.\n(cherry picked from commit 25c2bfcd520b9e6ac46529a1582c6c5ac97d2298)', 'Merge pull request #6180 from camjc/master\nUpdate PureRenderMixin docs, adding ES6 example\n(cherry picked from commit 1dc705aa0bd3200aeeb90c355e2679de0283a7af)', 'v15.0 rc1 blog post', 'Merge pull request #6207 from zpao/15rc-blog-post-corrections\nRemove a couple old updates from blog post\n(cherry picked from commit bb9629476ecede0b7de7acb64443ac303d2e9b25)', 'Fix style= formatting in v15 rc blog post\n(cherry picked from commit 8c57fd9d311c62f71a6e54462f161e857c78a550)', 'Merge pull request #6208 from JinxiuLee/patch-2\nMissed parentheses for matchMeida parameter\n(cherry picked from commit f6463576ee3bd71fa4da7b3a97d0d67b8370aeed)', 'Merge pull request #6214 from koba04/patch-6\nFix a mixin name in a blog post\n(cherry picked from commit 11b55231c4318cc34270f489a7d4d518c7c99693)', 'Add v15 RC2 blog post', 'Merge pull request #6202 from vjeux/search\nIntroduce search\n(cherry picked from commit 3240c09a060e0744bf317cb006e4daeb0331189f)', 'Merge pull request #6256 from iamchenxin/zh_docs031316\n[DOCS] Update zh-docs to v15-rc.1 (with #3240c09)\n(cherry picked from commit c927cfa0b4f60001249dd518bb5b85c712130e85)', 'Merge pull request #6258 from iamchenxin/zh_docs031316rest\n[DOCS] Update zh-docs to v15-rc.1 (with #3240c09)\n(cherry picked from commit b8682e0f20bb547aff4c7a3711e41e6cbd334d71)', 'Merge pull request #6260 from iawia002/master\nUpdate 02-displaying-data.zh-CN.md\n(cherry picked from commit 9e1a6376444952be6e3687ae8da2e8a64f4fbddd)', 'Merge pull request #6281 from rgarifullin/microfix_docs\nMicrofix docs\n(cherry picked from commit 2f24f89111f957e536f574759409197a1e0377af)', "Merge pull request #6313 from jimfb/script-integrity-attribute\nRemoved script security attributes, since fb.me isn't setting the proper headers.\n(cherry picked from commit d433c2f3766f34a9eb86c8688e783b0201d8edfd)", 'Merge pull request #6312 from vjeux/fix_docs_jump\n[website] Fix jump on the header\n(cherry picked from commit 39ccdccef1a42651a2a970d882e85f890a6223e5)', '[debug] log npm packages', 'Use babel 5 bin, not cached babel 6 cli', 'Bump version of 0.14.8 dev', "Merge remote-tracking branch 'iancmyers/icm/cleanup-react-empty-component-registry' into 0.14-stable", 'Update README and CHANGELOG for 0.14.8', 'v0.14.8']v0.14.7 React

Fixed bug with <option> tags when using dangerouslySetInnerHTML
Fixed memory leak in synthetic event system

React TestUtils Add-on

Fixed bug with calling setState in componentWillMount when using shallow rendering
 ['Update website for 0.14.6', 'Changelog should say today is 2016, not 2015', 'Merge pull request #5767 from yhagio/patch-2\nUpdate 10.4-test-utils.md\n(cherry picked from commit bdcb69f43dbf67df86ca4db80e2db28aae34abb8)', 'Merge pull request #5775 from facebook/fix-checkbox-wording\nFix wording to make it more clear that checkbox (input) supports defaultChecked\n(cherry picked from commit 102cd291899f9942a76c40a0e78920a6fe544dc1)', 'Merge pull request #5799 from gmcquistin/patch-1\n[docs] Fix typo in ref-08-reconciliation.md\n(cherry picked from commit 78be6f45cc8b904c754619697d23e9ccb07f9687)', 'Merge pull request #5801 from zpao/docs-bigger-embeds\n[docs] Bigger jsfiddle embeds\n(cherry picked from commit 31fc7fd62700e10d3971331d2ec309c53d53d432)', 'Merge pull request #5790 from jimfb/componentWillReceiveProps-blogPost\nBlog post explains to verify prop mutations in componentWillReceiveProps\n(cherry picked from commit a1584053cc16d0054e52e58d56effc341eff0c42)', 'Merge pull request #5806 from Zhangjd/master\nUpdate thinking-in-react.zh-CN.md\n(cherry picked from commit 23167f287eda5ee23725a099e67d6086baa8e300)', 'Merge pull request #5834 from spicyj/no-ie8\nblog post: Discontinuing IE 8 Support in React DOM\n(cherry picked from commit dd93eb7f40b37881345648bea84400c3842ad031)', 'Merge pull request #5813 from graue/tips-unneeded-finddomnode\n[docs] remove unnecessary findDOMNode from example\n(cherry picked from commit ea0ac61945724288d133ba69a7355701aebd282a)', 'Merge pull request #5814 from zpao/docs-update-attrs-0.14.6\n[docs] Updated supported attrs\n(cherry picked from commit 67e85df1fae3df0e23c8617f3d563c7537b9b50d)', 'Merge pull request #5686 from vitorbal/master\nImprove documentation for using React with Webpack\n(cherry picked from commit f7850dd3d78d313a9e7774870e85c32719fbe233)', 'Merge pull request #5826 from jacenko/master\nFixed typo in shouldComponentUpdate.png\n(cherry picked from commit 70097ea27c3b2f9bbdd0de9df7f5bba7ebcb8d5a)', 'Merge pull request #5732 from iamchenxin/en-docs\n[docs] deleting some unecessary newline\n(cherry picked from commit 9494ec80c2ecc89a951b15fa93fd503814d27121)', 'Merge pull request #5735 from cody/refs\n[docs] Small fixes to "more about refs"\n(cherry picked from commit 1da992a0abb4c377eedcb91e6012dea595914225)', 'Merge pull request #5849 from david0178418/master\nAdded additional detail to "props-in-getInitialState" anti-pattern doc\n(cherry picked from commit f1c15444019587783d1afd181c8cc15ea3b04ff2)', 'Merge pull request #5724 from iamchenxin/docs122315\nUpdate zh-docs with 4865ddf(v0.14.3+)\n(cherry picked from commit 909cba225461a14bad100717819f54326f77f38a)', 'Merge pull request #5870 from SimenB/patch-1\nRemove the recommendation to use isMounted from beginner docs\n(cherry picked from commit e09dfe1e0e49110b3b3319e8500aae5bffd36301)', 'Merge pull request #5872 from SimenB/patch-1\nFix example from #5870 to avoid double rendering\n(cherry picked from commit c7808cac6946414093136732bc91c2b948af2140)', 'Merge pull request #5885 from knpwrs/patch-1\nClarify stateless function component optimizations.\n(cherry picked from commit 7cee5022f8f34f3d92bd3620fc001f5d3174ebed)', 'Merge pull request #5904 from sercaneraslan/master\nOverflow problem fixed\n(cherry picked from commit 096115c5c92f760f5896cf7ac0d13a6e9587622b)', 'Merge pull request #5912 from chrisbolin/patch-1\nSmall copy changes to TestUtils and Perf summaries\n(cherry picked from commit 6f5e619fae3901bbe6684cd489ad04d1bec3e39c)', 'Merge pull request #5928 from scjody/patch-1\nAdd a link to the list of supported events\n(cherry picked from commit fc547e8380cfe778d0995dc452b56e8d15b87cf4)', 'Bump version for 0.14.7 dev', 'Merge pull request #5886 from goatslacker/cant-dangerouslysetinnerhtml-for-option\nOnly add children in ReactDOMOption when there are children', 'Merge pull request #5891 from zpao/vendor-semi\nAdd semicolon for react-dom source files.', 'Merge pull request #5387 from MattijsKneppers/master\nupdated Basic Example with External JSX instructions', 'Merge pull request #5840 from koba04/release-event-target-on-destructor\nRelease syntheticEvent.target on the destructor', 'Merge pull request #5561 from graue/setstate-cwm\nshallow render: fix setState in componentWillMount\n(cherry picked from commit 8557cc0d676f81670079e2b81a9fb461fd280141)', 'fix shallow renderer setState test', 'Merge pull request #5917 from zeke/homepage-urls\nFix homepage URLs in package.json files\n(cherry picked from commit ea79138156f65db5140b4d69df638db9c72870ef)', 'Merge pull request #5922 from zpao/package-empty-deps\nAdd empty dependencies for packages\n(cherry picked from commit ed40119db81e0e29dc4681add0ecbe84ee7f077b)', 'Update CHANGELOG.md and README.md', 'v0.14.7']v0.14.4 React

Minor internal changes for better compatibility with React Native

React DOM

The autoCapitalize and autoCorrect props are now set as attributes in the DOM instead of properties to improve cross-browser compatibility
Fixed bug with controlled <select> elements not handling updates properly

React Perf Add-on

Some DOM operation names have been updated for clarity in the output of .printDOM()
 ['update website for 0.14.3', 'Merge pull request #5508 from yangshun/patch-1\nAdd in missing closing  for docs template\n(cherry picked from commit aa1e58a41b5810ec4102e631bd48fa84b460c368)', 'Merge pull request #5511 from KeweiCodes/patch-1\nTypo\n(cherry picked from commit 1cdbff26ab571854d775b2d18b90114bf4311c8e)', 'Merge pull request #5518 from mhujer/docs-spread-fix\nDocs: Rest and Spread Properties - ECMAScript\n(cherry picked from commit c5867ea401eee56ed40cdfb121d76c508ebc0826)', 'Merge pull request #5520 from mhujer/docs-spread-fix-babel\nDocs: Transform rest and spread properties using Babel 6\n(cherry picked from commit f48bb3a274558c7e886958927791cc494909449e)', 'Merge pull request #5523 from hejld/add-selection-and-composition-events-on-reference-page\n[docs] Add missing sections to events reference page in IT and CN\n(cherry picked from commit 54e6057b1a30a34ef62731f67e8f6ee18cae3955)', 'Merge pull request #5526 from yangshun/todo-app-id\n[docs] Use id for TodoApp example\n(cherry picked from commit 34fbcf20d8b1a0101e51f455a5de8d2e0752113a)', "Merge pull request #5533 from kryogenic/patch-1\nUse null instead of '' in ternary expression\n(cherry picked from commit d01188133e9e9195c2315a5c92e669d4edc15674)", 'Merge pull request #5539 from matthewlooi/addCodeHighlightToTutorialDoc\nAdd highlight to a line of code to tutorial21.js\n(cherry picked from commit e95d3dd8128c43b7954eda0aeac15fd351a28b45)', 'Merge pull request #5543 from spicyj/rt103\nClarify wording in the tutorial\n(cherry picked from commit 3722616349401134e13bd2190d98fd17bbe9e25e)', 'Merge pull request #5546 from cody/singlechild\n[docs] Single Child\n(cherry picked from commit 6b641de6b8cbf9f917cf78ffd977eb872e14fefa)', 'Merge pull request #5556 from timuric/patch-1\nAvoid mutating state in the example code\n(cherry picked from commit d54b151bc25ab6ea90d836b9565d60f4cd5224e5)', 'Merge pull request #5581 from yuyokk/patch-1\nUpdate 08.1-more-about-refs.md\n(cherry picked from commit f5840e685ecb431db23345ebeda838b80fa482b1)', '[blog] Diversity Scholarship 2016', '[blog] Fix typo in diversity post', '[blog] Another typo fix for diversity post', 'Merge pull request #5584 from zwhitchcox/patch-2\nUpdate ref-10-glossary.md\n(cherry picked from commit 3ca15b00900a09b5805212566bb70b1e12282d1d)', 'Merge pull request #5559 from shogunsea/docs-add-marked\n[docs]Add marked source in tutorial doc\n(cherry picked from commit 0be7786e1cdd0fa682ff3c78236ab3f3971ed691)', 'Merge pull request #5589 from wrakky/fix-minlength-docs\nRename minlength to minLength in the tags and attributes documentation page\n(cherry picked from commit 526d5c0edce1faea0101ca2bbfcd6b87f3d9d5b0)', 'Merge pull request #5588 from jimfb/setprops-replaceprops-deprecated\nIncrease severity of setprops and replaceprops deprecations, since their removal is now imminent.\n(cherry picked from commit f4744f3a70f3c07e7dfa1e849adcefce4c4528e5)', 'Merge pull request #5644 from AndrewHenderson/patch-1\nHelps avoid a common Issue when following tutorial\n(cherry picked from commit f282710072590eec605ed690529d94cd57578132)', 'Merge pull request #5643 from koh-taka/patch-1\nFix wrong script name (showdown -> marked)\n(cherry picked from commit eeee272268981cfd0a1eabb03d8588d9dd51274c)', 'Merge pull request #5609 from vitorbal/patch-1\nClarify usage of .propTypes when using functional components\n(cherry picked from commit bb084eba24e20e5ac5c3570f08ba8abb1f1393be)', 'Merge pull request #5605 from thekevlau/patch-1\nAdding class->className as a JSX gotcha\n(cherry picked from commit 410cc30bf9631911c9c6b8c90640ef617f7c399c)', 'Merge pull request #5655 from adraeth/patch-1\nCorrect highlight in tutorial7.js snippet\n(cherry picked from commit 55bd2033101fcff1396c4f8329b5a17e0171575b)', 'Merge pull request #5658 from applegrain/clarify-dependency-installation\nClarify dependency installation\n(cherry picked from commit b6a01d7733b4e9bca078632f3b1c8f64df4702e0)', 'Merge pull request #5587 from jimfb/ismounted-alternatives\nAdded post about upgrading your code to avoid isMounted()\n(cherry picked from commit ccb97d8e5992ca5cecc180b43d0ddd560e7b6b21)', 'Merge pull request #5693 from gaearon/elements-post\nAdded post about components, elements, and instances\n(cherry picked from commit bdca170d2a3e8d088a61cbbb8bb291fbff1f23c5)', 'Merge pull request #5695 from gaearon/patch-2\nFix children to be a prop in the blog post example\n(cherry picked from commit 50af0341081460968cae4b739758266d032166fc)', 'Merge pull request #5599 from zramaekers/shallow-compare-docs\nAdd documentation for shallowCompare addon\n(cherry picked from commit ab37776cc23e355ab1fb60bbcfc8a98be38e6365)', 'Merge pull request #5698 from facebook/Daniel15-patch-1\nRemove smart quotes from code snippet in blog post\n(cherry picked from commit 1b85c9a6c433e0ee3625f2c0af0d96516b5967be)', 'Merge pull request #5699 from jwworth/pull-request-1450702663\nFix typo (duplicate word)\n(cherry picked from commit 9c57c300494f2d92935ef2dcd950340bfd9977e8)', 'Merge pull request #5701 from cesarwbr/patch-1\nFix typo in youtube url for video in blog post.\n(cherry picked from commit 8d0efaf980741b360b76a7b832de060e3d6791b5)', 'Merge pull request #5708 from kchia/patch-4\nCorrects grammatical errors in tutorial\n(cherry picked from commit 88ce0fc95f87bfd25017d8ed09078293fd23fd56)', 'Merge pull request #5709 from zpao/youtubenocookie\n[docs] fixup other broken youtube-nocookie uses\n(cherry picked from commit 5b98152a3d4ea6429880bb50975370726535def8)', 'Merge pull request #5711 from iamchenxin/docs122215\n[docs] Update zh-docs with 7e2a7f0\n(cherry picked from commit 1d8b8164968c2aaebbdd87ff10e8eb787a69875b)', 'Merge pull request #5712 from dortonway/master\nFix misunderstanding in tutorial\n(cherry picked from commit 4865ddf7ea4ef7e82eeb04ce1fb743dcba507e75)', 'Merge pull request #5716 from jwworth/pull-request-1450816256\nFix typos in posts\n(cherry picked from commit a0741ab468a44a202e2d9459852e4457209ebfd0)', 'Bump version for 0.14.4 dev', 'Merge pull request #5500 from hejld/master\nUpdate DOM_OPERATION_TYPES mappings for ReactDefaultPerfAnalysis\n(cherry picked from commit 812e1a877f6a7a7c7df6357fe74d78977c322dac)', 'Merge pull request #5564 from jackiewung/master\nFix file reference typo in starter\n(cherry picked from commit 940a75b1fe10286bb75f7aa645fdc9669b8a7418)', 'Merge pull request #5595 from remko/select-bug\nFix single select incorrectly updating\n(cherry picked from commit 2f7736786303d3b6d845bea13a971700254a78a1)\nConflicts:\n    src/renderers/dom/client/wrappers/tests/ReactDOMSelect-test.js', 'Merge pull request #5623 from freddyrangel/autocorrect_autocapitalize\nAutocorrect and autocapitalize should not be property\n(cherry picked from commit eee5d466a6bf7e967863b3b25872281c09fb5a9d)', 'Import ResponderEventPlugin changes from RN\n(manual cherry-pick of bb11639e25461a61d65af06308152dd7892cafa2)', 'Add shim files for RN in npm package\n(cherry picked from commit c29642d6edbc80188d2f21d3395276e1c1989d0a)', 'Remove "Invariant Violation: " from Invariant Error Messages\n(cherry picked from commit cdaea311a3d99137578f63d0c40836a40c6ea2db)\nConflicts:\n    src/isomorphic/classic/class/tests/ReactClassMixin-test.js\n    src/isomorphic/modern/element/tests/ReactJSXElementValidator-test.js\n    src/renderers/dom/server/tests/ReactServerRendering-test.js\n    src/renderers/shared/reconciler/tests/ReactInstanceHandles-test.js', 'Upgrade fbjs to 0.6, shrinkwrap', 'Changelog for 0.14.4', 'Update readme for 0.14.4', 'v0.14.4']v0.14.3 React DOM

Added support for nonce attribute for <script> and <style> elements
Added support for reversed attribute for <ol> elements

React TestUtils Add-on

Fixed bug with shallow rendering and function refs

React CSSTransitionGroup Add-on

Fixed bug resulting in timeouts firing incorrectly when mounting and unmounting rapidly

React on Bower

Added react-dom-server.js to expose renderToString and renderToStaticMarkup for usage in the browser
 ['Update website for 0.14.2', 'Merge pull request #5370 from zpao/babel6docs\nUpdate docs for Babel 6\n(cherry picked from commit b9371bc2167bb6d71adb419438bceaf256aaafba)', 'Merge pull request #5356 from rpominov/patch-1\nfix shallowRenderer.getRenderOutput() return type in docs\n(cherry picked from commit 17289020f7e414e45376a424b7af3e8013c9261c)', 'Merge pull request #5372 from csbok/patch-1\nUpdate getting-started.ko-KR.md\n(cherry picked from commit 84af306044ba4684fc0346a448fb8f1da44d33e1)', 'Merge pull request #5385 from marocchino/update-korean\nUpdate korean translation to 84af306\n(cherry picked from commit 4fae0362690b73f4a9077453c1a0924c5fb2a5b5)', 'Merge pull request #5231 from davidkpiano/patch-1\nUpdating "JSX Gotchas" docs for Custom Attributes\n(cherry picked from commit 22b8952fbf510f2f637c4e342bd86eac4208afaa)', 'Merge pull request #5287 from benhalpern/patch-1\nUpdated conference page\n(cherry picked from commit 99fbde54a1486fe67b9f715950bfbf66bf3c881c)', 'Merge pull request #5424 from stowball/animation-docs-whitespace\nRemoved unnecessary whitespace before closing bracket\n(cherry picked from commit a88c39be86854a8aa8a145bdf91f9da5efd9e172)', 'Merge pull request #5403 from yuyokk/patch-1\nClarify note about stable keys\n(cherry picked from commit d6a547f7934edce9ea411d681c94357cd6842939)', 'Merge pull request #5412 from yangshun/document-next-context\nAdd more documentation to Context page\n(cherry picked from commit 4cb210a9dae14a8cee82410a36d6b7faf511e845)', 'Merge pull request #5416 from bbrooks/undo-optimistic-update-on-error\nReset state if comment submit fails\n(cherry picked from commit eecd2953cd4abb22dff48743d448e87f49484916)', 'Merge pull request #5444 from zpao/tutorial-ids-for-data\n[tutorial] Use ids in comments data\n(cherry picked from commit 09b7ff1fc43c1e5737290644dc56aa927b2f72d0)', 'Merge pull request #5456 from hugo-agbonon/fix-classname-manipulation-doc\nRevert class name manipulation doc to english\n(cherry picked from commit 2d5612913f59d29c98eb800322ff81eda146b475)', '[docs] Use updated Korean translation\nSee #5456 for details\n(cherry picked from commit 72d9a8bc15e1c1bdddef59a8db0f8747f43f55d5)', '[docs] Properly fix Korean docs\n(cherry picked from commit 034cfc96c7c116f140194d5c9c220d639d621e9d)', 'Merge pull request #2774 from jimfb/webcomponents\nAdded info (example+doc) about react with webcomponents\n(cherry picked from commit 80bcc519d78abfa75cd5069825869b2eadebc6b6)', 'Merge pull request #5445 from yangshun/controlled-components-in-tutorial\nUse controlled components in tutorial\n(cherry picked from commit 904e9e3ea654a811b1d455eed58a3364337c487b)', 'Bump version for 0.14.3 dev', "Merge pull request #5396 from zpao/packagejsons\nImprove npm packages' metadata\n(cherry picked from commit 6d5fe44c8602f666a043a4117ccc3bdb29b86e78)", 'Merge pull request #5391 from zjjw/transition_timeouts\nClear transition timeouts when component unmounts. Fixes #4876\n(cherry picked from commit 59dd7b33eec82fe269fb03220aa40f00ad333d93)', 'Merge pull request #5442 from nickclaw/patch-1\nAllow nonce attribute\n(cherry picked from commit 575d1a5093dc04be1848cb0b3cb1a9818498bc28)', 'Merge pull request #5417 from zpao/ol-reversed\nSupport reversed for s\n(cherry picked from commit e7a5a9804472cd4c8325f89fd09a307355b450b1)', 'Merge pull request #5431 from zpao/license-in-packages\nEnsure license and patents files are packaged for npm\n(cherry picked from commit fc245226f93146a47aea5f52633598989bf92443)', 'Merge pull request #5330 from laskos/fix-shallow-rendering-function-refs\nFix shallow renderer with ref as function\n(cherry picked from commit 1a6d1e74e0491eda75f9ea03622c53cfcf7c218e)', 'Merge pull request #5381 from kevinrobinson/react-dom-server-package\nAdd additional secret property to build artifact for react-dom-server\n(cherry picked from commit c07b304c76ac9cdc4bae875391e7902cf0e8e2f3)', 'Merge pull request #5496 from zpao/reactdomserverfollowup\nFollowup to #5381\n(cherry picked from commit 60cba8fcf74d10107ff8978b225a9b06865bba17)', 'Merge pull request #5501 from zpao/release-react-dom-server\nMake sure react-dom-server is shipped in release process\n(cherry picked from commit d1eba1f78cc0490c3bd0f280f1963ee46b33e729)', 'Changelog for 0.14.3', 'v0.14.3 blog post', 'Update readme for 0.14.3', 'v0.14.3']v0.14.2 React DOM

Fixed bug with development build preventing events from firing in some versions of Internet Explorer & Edge
Fixed bug with development build when using es5-sham in older versions of Internet Explorer
Added support for integrity attribute
Fixed bug resulting in children prop being coerced to a string for custom elements, which was not the desired behavior
Moved react from dependencies to peerDependencies to match expectations and align with react-addons-* packages
 ['Update website for 0.14.1', 'Merge pull request #5317 from nickbalestra/patch-1\nUpdate 02.1-jsx-in-depth.md\n(cherry picked from commit 01341480c2f32d8ae429f77b2b9bae8d70587819)', 'Merge pull request #5316 from Third9/master\nupdate Korean docs to 0.14\n(cherry picked from commit fbf4cbbae68fe93532144cfb1da254921702afae)', 'Merge pull request #5235 from wincent/update-blog-syntax\nUpdate syntax in older Relay blog post that may be causing confusion\n(cherry picked from commit c35b4384f7b71624e19eda4e957f868f2e0842a7)', 'Merge pull request #5348 from hzoo/patch-2\nadd docs for babel 6\n(cherry picked from commit 88bae3fb73511893519195e451c56896463f669b)', 'Bump version for 0.14.2-alpha', 'Merge pull request #5327 from zpao/definepropgetter\nUse a getter for canDefineProperty check.\n(cherry picked from commit 606aa61209aa1c4a867e10d024daf83c02800d76)', 'Merge pull request #5328 from zpao/non-native-event-name-dispatch\nUse a custom event type for our event dispatching in ReactErrorUtils\n(cherry picked from commit 12c214a9920323e74fde8fef63f6cc5a8be1a044)', 'Merge pull request #5341 from zpao/domprop-integrity\nAdd integrity to HTML property config\n(cherry picked from commit 0c790baf31873cb28cd4f912f76abdbefa93bced)', 'Merge pull request #5093 from jimfb/avoid-children-to-string-coercion\nShould not coerce children prop on custom elements to a string.  Fixes #5088\n(cherry picked from commit a2d26c82ea435fd140ce928a1f071d419b469d3d)', 'Merge pull request #5366 from zpao/react-dom-peer-dep\nMake React a peerDep of react-dom\n(cherry picked from commit a82400faa270acb9ceb031d421f0d732ee53161d)', 'Merge pull request #5367 from spicyj/haste-manifest\nAdd package.json for react-haste package\n(cherry picked from commit 72a11421d2ba0c054303c1c22b0a725ddcf0640a)', 'Update haste package version for branch', 'Changelog for 0.14.2', 'Blog post for 0.14.2', 'Update readme for 0.14.2', 'v0.14.2']v0.14.1 React DOM

Fixed bug where events wouldn't fire in old browsers when using React in development mode
Fixed bug preventing use of dangerouslySetInnerHTML with Closure Compiler Advanced mode
Added support for srcLang, default, and kind attributes for <track> elements
Added support for color attribute
Ensured legacy .props access on DOM nodes is updated on re-renders

React TestUtils Add-on

Fixed scryRenderedDOMComponentsWithClass so it works with SVG

React CSSTransitionGroup Add-on

Fix bug preventing 0 to be used as a timeout value

React on Bower

Added react-dom.js to main to improve compatibility with tooling
 ['Final docs update for 0.14', 'Merge pull request #5073 from mfunkie/patch-2\nUpdate Pure Render Mixin docs to point to new npm package\n(cherry picked from commit 926f372dc5f786d68a90cc5c1830d951c432f1cd)', 'Update downloads page for 0.14\n(cherry picked from commit e1d4668fd5453157083665dbe034590b54ac83c0)', 'Add docs for React.Children.toArray in 0.14.0.\n\nUpdate the docs to change return type of React.Children.map from object to array.\n\n(cherry picked from commit 319b37409769ee32f6a3f5a80a986298f8fd06e4)', 'Merge pull request #5096 from songawee/docs_babel_fix\nfix(docs): adjust babel release to match the babel.js changelog\n(cherry picked from commit c511f161dfe1e1bbadef0fb652733ecdd22f9a91)', 'Merge pull request #4981 from iamchenxin/zh_docs\n[docs] Sync up tutorial.zh-CN with en(a440f40)\n(cherry picked from commit e8be7013baaa07eec5cfd5148b105c7f6bb4134d)', 'Merge pull request #5101 from bcbcb/patch-1\n[docs] fix forms Default Value example\n(cherry picked from commit 3359e2f64c1d57b6451d8dfef5038fc12a690aff)', 'Merge pull request #5102 from TracyJordan/master\nFixed some comment punctuation in ReactDOMComponent.js\n(cherry picked from commit 1a7c0a4b16c1a2347caa860b73102c7d5ea06e5a)', 'Merge pull request #5107 from mbrookes/patch-1\nGrammar\n(cherry picked from commit 407e88d6c8860a73d59100bdb123eb5764d99eeb)', '[docs] Fix line highlights for linked-state-mixin\n(cherry picked from commit 09b688efcefeb617919364cd3bce79ea51a36bc1)', 'Revert "Merge pull request #5102 from TracyJordan/master"\nThis reverts commit 5039dad05396ba68033f01377aa2cbab67b5edc0.', 'Document context\nFixes #580.\n(cherry picked from commit 28b10a9d6a29e1ffe4496108331a212279159913)', 'Added react-dom to individual downloads\n(cherry picked from commit f6e09f190308214c4b084c36b334a422e73e6714)', 'Update Readme for 0.14', 'Merge pull request #5120 from abloomston/patch-1\nInclude react-dom\n(cherry picked from commit 0b29035484f428cb56e7e1c04a88f66ac020d1d4)', 'Merge pull request #5123 from vipulnsward/fix-html-jsx-page\n\nBring back JSX compiler styling still being used on HTML JSX page\n(cherry picked from commit 0b21632f8e2fed9e1a83909faff8c299fa77f000)\n', 'Merge pull request #5126 from bhamodi/white-space\nFile Cleanup.\n(cherry picked from commit 5dc2858bc96f02cf60d33579325ffb4c867a7d8b)', 'Merge pull request #5124 from bhamodi/master\nDocumentation Cleanup Round 1.\n(cherry picked from commit abaf0051de16316f315856c86deb2c3cca9cc71f)', 'Merge pull request #5142 from MaxPRafferty/add-selection-and-composition-events-on-reference-page\nAdd selection and composition events on reference page\n(cherry picked from commit 37c71a6e1f7638b7b176ca74679c10ab5294841b)', 'Mention codemods more prominently in release blog\n(cherry picked from commit 4a37796f8878aca348827c17b473a76c8890d0de)', 'Reactiflux is moving to Discord blog post\nConflicts:\n    docs/_data/authors.yml', 'Fix up stray markdown in blog post\n(cherry picked from commit 8f1ce99cc3c40d5b052cd84b313150c8e7ebf54b)', 'Merge pull request #5176 from jimfb/tweak-props-change-wording\nTweak wording when talking about props changing\n(cherry picked from commit ed7ab7b94acd6fcda8d8d4ab3d44c3f601d28ff7)', 'Merge pull request #5178 from jimfb/multiple-authors\nFix blog post authors\n(cherry picked from commit ccfc2d80491a2b754e833d99f6b284925130e21f)', "[docs] Don't make authors links on all posts page\n(cherry picked from commit e12ee95e09dff09a6b205d84c4efde91cc5e6213)", 'Merge pull request #5203 from WanderWang/docs-cn\nupdate Chinese docs to 0.14\n(cherry picked from commit 9cb01de1bcffd627a4f010dfbe3db0a09d77778f)', 'Merge pull request #5214 from benigeri/patch-1\nsmall edit on reactiflux blog post\n(cherry picked from commit 244dd5da4cf0297ad245922bf8f2bd7ff93fe8a6)', 'Update blog posts linking to react-codemod\n(cherry picked from commit 8848984c467961894981c55878d954acfd50a7fd)', 'Merge pull request #5230 from kohashi/patch-1\nFix tutorial.ja-JP.md\n(cherry picked from commit 1dafac9e0cbb210b3bdc0c8467fe636a16d1fc96)', 'Merge pull request #5274 from SpartaSixZero/master\nCorrected highlighted line in tutorial example in tutorial7.js\n(cherry picked from commit 56c91248fdc86b1762a0fbb5a38e81a46de5d148)', 'Merge pull request #5089 from thomasp9/patch-1\nCreate 01-why-react.de-DE.md\n(cherry picked from commit d17ad0f0c0ef44371a260964b9b8f6e45d3eeace)', 'Merge pull request #5286 from translucens/add_reactdom_js\nAdd react-dom.js to tutorials\n(cherry picked from commit 11919b6d90f2e5782d1577c01ad5d9b081fa5b19)', 'Merge pull request #5289 from jonathanp/patch-1\nUpdate 2015-05-01-graphql-introduction.md\n(cherry picked from commit 0f76873ebb93afd54a16653ef56b889ed08d3568)', 'Added changelog for 0.14\n(cherry picked from commit 72e70f345b82f5ac4e85b110eccf17e52f1dbe8d)', "Update README's example\nAccording to current React version, when I use React.render, console shows React.render is deprecated. Please use ReactDOM.render from require('react-dom') instead..\nSo this PR is a tiny update for the README example.\n(cherry picked from commit 2b136a4f84d0a8b9e9422358210bec45e182166c)", 'Bump version for dev', "Merge pull request #5081 from spicyj/svg-tu\nDon't break on SVG tags in scryRenderedDOMComponentsWithClass\n(cherry picked from commit 4fb39ce9842811b39314503874b56d925bd28a09)", 'Merge pull request #5085 from spicyj/cdp\nExtract defineProperty feature testing to one file\n(cherry picked from commit 2253405dcc7cfa17a53c430caf9ed8f8101aefde)', 'Merge pull request #5164 from zpao/fix-csstransitiongroup-proptype\nCorrectly handle 0 in CSSTransitionGroup timeout props\n(cherry picked from commit af99b2c2a30d926b58c22067b83a734f97b7c0a7)', "Merge pull request #5157 from spicyj/createevent\nUse 'document.createEvent' not 'new Event'\n(cherry picked from commit 194ab16d7b8be720aca41e87831e33dd8a4353ba)", 'Merge pull request #5166 from spicyj/gh-5157\nAdd feature test for document.createEvent\n(cherry picked from commit da1135618e7742a32fbc7d411dd3ee080624c54f)', 'Merge pull request #5174 from zpao/dom-attributes-track\nAdd srcLang and kind to better support track elements\n(cherry picked from commit 8e9682c542e08b4e5d019a3d93d86931bd36df0e)', 'Merge pull request #5263 from spicyj/npmreactreadme\nUpdate addons paths in npm react README\n(cherry picked from commit 8aaa66c292714865250b14cdd63a61b3e3fe84c1)', 'Merge pull request #5250 from conorhastings/track-default-property\nadd default attribute for use with track element\n(cherry picked from commit 4d41cf740a629dccc719bdbac73270fbc088bc2d)', 'Merge pull request #5297 from quadrupleslap/master\nMangle __html in prop validation.\n(cherry picked from commit 517872817f4c764a24b88177094980bd9f29b50a)', 'Merge pull request #5237 from spicyj/gh-5125\nMake sure top-level callback has correct context\n(cherry picked from commit b0a7a00dba1372ad2901495e33c43d345f4cc4c6)', 'Merge pull request #5304 from evanvosberg/master\nAdd non-standard property for supporting Safari mask-icon.\n(cherry picked from commit 2c176da7e8adf0f0d0b27bc7540903bdfeb7d9b3)', 'Update changelog for 0.14.1', 'Update readme for 0.14.1', '0.14.1 blog post', '0.14.1']v0.14.0 See http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html. ["Fix ReactTransitionGroup behavior when removing several children at once\nIf several children complete leaving before rendering TransitionGroup,\nonly the last one was removed. This could easily happen if\ncallback in componentWillLeave is called synchronously and several items\nare removed from array. The other case is when ReactCSSTransitionGroup\nhas transitionLeave={false} and array is also cleaned up.\nThe bug was happening because this.state.children was used as a base for\nchildren removal and it wasn't updated until the render, so only the last\nremoval was actually happening.\nFix involves keeping the updated children state between invocations of\n_handleDoneLeaving. After updating this.state and rendering,\nupdatedState is cleaned up and ready for subsequent array modifications.\nTest case included.", 'Add additional supported methods to event documentation\nisPropagationStopped and isDefaultPrevented methods do in fact exist on SyntheticEvent', 'Add displayName to nested render warnings [#1726]', 'Fix warning messages wording and access of displayName', 'document checkbox using click handlers for change events\nI hit an issue related to this earlier today. Feels like a short paragraph warning of potential issues would be of benefit.  Discussed with @zpao on IRC, agreed to make PR.\nFor more info:\n* https://github.com/facebook/react/issues/3005#issuecomment-72513965\n* https://github.com/facebook/react/blob/c7e4f55eb061b578497ed316d3e9e0dfa7026f46/src/browser/eventPlugins/ChangeEventPlugin.js#L287', "Make Simulate.mouseEnter/Leave use direct dispatch\nFixes #1297.\nonMouseEnter and onMouseLeave shouldn't actually use direct dispatch, but doing so is more useful than doing nothing (and I don't think it precludes adding proper enter/leave dispatching later, either).\nTest Plan:\ngrunt test", 'Allow rendering into document fragments. Fixes #840', "Modify sample CSS so that it works in Safari\nWhen animating the max-height property in Safari, entering the leave state would trigger an animation to max-height: 0. Then when the active state kicked in, it would jump and didn't really look right. Moving the transition css property to the active version fixed the issue for me and worked on Safari, Chrome and Firefox. Unfortunately I'm not in a position to test in IE at the moment, but I'll do that at my first convenience tomorrow.", 'make dev and production environment consistent', 'CSS property', "Merge branch 'master' of https://github.com/facebook/react\n\n'master' of https://github.com/facebook/react: (30 commits)\n  Expose --target flag on jsx executable\n  Contributing: cleanup quote style\n  Add Relay blog post\n  Fix long lines in vendor/fbtransform/visitors\n  lint vendor/*.js\n  fix .eslintignore\n  remove ballmer example\n  Fix a doc. cloneWithProps clones a ReactElement.\n  lint from root\n  Fixed mistake in jsdocs types for cloneWithProps\n  Put deprecation warning for classSet\n  Lint vendor/fbtransform as well\n  More warnings to ReactFragment.create\n  Warn when using constructor function directly\n  Move option parsing into react-tools proper.\n  Remove lodash devDependency\n  Added the immutability talk to the React.js Conf update.\n  Use same pathways for browser transforms as we use in react-tools\n  lint: remove spaces from array brackets\n  lint: remove spaces from object braces\n  ...\n", 'Revert "Revert #1536"\nFormerly "Attach empty onclick listener to each node". This reverts commit 431155d2e231cfb65e236f9289fddf8cea291185.', "Only call put/deleteListener with truthy listeners\nWithout this, transitioning from <div onClick={null} /> to <div /> triggered willDeleteListener to delete the click handler which caused problems; now, we only call putListener and deleteListener when we have an actual listener.\nI now also clean up the onClickListeners map upon deletion and don't double-listen when updating the event listener.", 'Fix comment to reflect the new (non-deprecated) way of accessing a class type.', 'ReactDOMComponent should warn when provided children for void elements', 'Added the key attribute into the todo example\nThis is to solve the warning (that the key should be set) that was being raised when adding a new item.', 'Modified the todo example.\nInstead of only using the index to supress the warning it now uses the\ntext + index to also ensure object iteration order.', 'shallowEqual: bail if either argument is falsey\nAlso add some unit tests.', 'Bringing the code to one style.', 'warn if IE8 is in compatibility mode', 'check that console exists before warning\nConsole is undefined in earlier versions of IE when it is not open. This causes an uncaught exception, and breaks applications in these versions of IE when attempting to warn when the  console is closed.\nAdmittedly, console will usually be open when testing in development, but still React should not break the application when it is not.', 'use warning module instead of console.debug', 'initialize dev variables in dev mode only', 'Add shallowCompare module and use it in PureRenderMixin + tests', 'Bump version in readme', 'Bump version so we can get back to work', 'v0.13 starter kit', 'Merge pull request #2266 from syranide/voidelem\nReactDOMComponent should not accept children for void elements', 'Merge pull request #2868 from chicoxyzzy/dev_and_prod_environments_consistancy\nmake dev and production environment consistent', 'Merge pull request #2946 from benmoss/nested-render-warning\nAdd displayName to nested render warnings [#1726]', 'Warn when rendering directly into document.body\nThis is in response to #3207 to address concerns regarding third-party\nscripts and browser plugins potentially altering DOM nodes within\ndocument.body, causing problems with reconciliation.\nCloses #3211.', 'Merge pull request #3230 from nmn/master\nAdd numeric CSS property - stroke width', 'Merge pull request #3246 from spicyj/onclick\nRevert "Revert #1536"', 'Merge pull request #3253 from jsfb/fix-comment-to-reflect-class-type-usage\nFix comment to reflect the new (non-deprecated) way of accessing a class type.', 'Merge pull request #3310 from darcyadams/console-exists-before-warn\nCheck that console exists before warning', 'Merge pull request #3321 from Smert/master\nBringing the code to one style.', 'Merge pull request #3327 from Simek/initialize-variables-fix\ninitialize dev variables in dev mode only in shouldUpdateReactComponent.js', 'Merge pull request #3323 from jonhester/ie8-compat-mode\nwarn if IE8 is in compatibility mode', 'Fix comma splice and line length', 'Merge pull request #3317 from ianobermiller/fix-shallow-equal\nshallowEqual: bail if either argument is falsey', 'foo.getDOMNode => React.findDOMNode(foo)', 'Add some important getDOMNode tests back.', 'Fixed shallowEqual implementation to handle the case when inputs are not objects.\nIf either argument is not an object and unequal, then shallowEqual should return false.\nIf only one argument is an object, then shallowEqual should return false.\nFixes #3369', 'Add docs/docs 01', 'translate examples.md', 'translate videos.md', 'Translate 03 to Korean\n\nUp to 9f18ccd\n', 'Fix some words, Translate title\n\nUp to 9f18ccd\n', 'translated docs/docs/02-displaying-data.md into Korean\nUp to b25e2e70d8ed7eb17a18d57f16c03390767a194a', 'translate complementary-tools', 'translate thinking-in-react.ko', 'Create ref-01-top-level-api.ko-KR.md\nBased on 4f50071de0ac1dd6ce6aeda4f3dd9549fb9e36ba', 'Create ref-02-component-api.ko-KR.md', 'Create ref-03-component-specs.ko-KR.md\nBased on 08c5e42649c85048b9035b3485c7b675e99ade3c', 'Create ref-09-glossary.ko-KR.md', 'Translate getting-started to Korean\n\nUp to b3cd299\n', 'Translate 04 to Korean\n\nUp to e4352ef\n', 'Translate flux-docs to Korean\n\nUp to 6c19040\n', 'Translate 07 to Korean\n\nUp to bb52715\n', 'translate 10.6-update.ko-KR.md\napply comments\napply comments\napply comments', 'Translate ref 04 to Korean\n\nUp to a4c96d6\n', 'Translate ref 05 to Korean\n\nUp to c0e33e8\n', 'Translate ref 06 to Korean\n\nUp to 4c7cd13\n', 'Translate ref 07 to Korean\n\nUp to 6f44f60\n', 'Translate tutorial to Korean\n\nUp to a19966f\n', 'Update docs to v0.13.0-beta.2\n\nUp to 5126cee\n', 'Translate 02.1 to Korean\n\nUp to 513433b\n', 'Update content\n\nUp to 5ab7fde\n', 'Translate 02.3 to Korean\n\nUp to 6f44f60\n', 'Translate 10 to Korean\n\nUp to a911513\n', 'Update think-in-react.ko-KR\n\nUp to 5ab7fde\n', 'Fix links', 'Translate 02.2 to Korean\n\nUp to fc91d2f\n', 'Translate 09 to Korean\n\nUp to 2de44cf\n', 'Revise Korean translations', 'Unify words', 'Update Translation to 673874d', 'Merge pull request #3370 from varunrau/master\nFixed shallowEqual for arguments that are not objects', 'Translate 08 to Korean\n\nUp to b7a548c\n', 'Translate 10.4 to Korean\n\nUp to 2e232f8\n', 'Translate 10.8 to Korean\n\nUp to ab512af\n', 'Translate 10.5 to Korean\n\nUp to 60e96ed\n', 'Translate conferences to Korean\n\nUp to 1b86246\n', 'Translate 10.3 to Korean\n\nUp to 5ab7fde\n', 'Translate 10.7 to Korean\n\nUp to 0bf88f2\n', 'Translate 08.1 to Korean\n\nUp to b7a548c\n', 'Translate 10.2 to Korean\n\nUp to b7a548c\n', 'Update Translation to b95ad29', 'translation of 05-reusable-components-ko-KR.md', 'Translate 10.1 to Korean\n\nUp to 678ec31\n', 'Translate 11 to Korean\n\nUp to 83e4409\n', 'Apply review\n\nUp to 60e96ed\n', 'Translate 06 to Korean\n\nUp to 8326a9f\n', 'ref-08-reconciliation (based on 941cba6)', 'Update Translation to 91b4564', 'Merge pull request #3356 from cpojer/findDOMNode\nfoo.getDOMNode => React.findDOMNode(foo)', 'Revise Korean translation - final', 'Fix module option parsing of jsx command', '[PropTypes] Add warnings if PropTypes return functions\nSummary:\nRight now, if a component specifies a propType as, for example,\nmyProp: React.PropTypes.shape, without an actual shape\nparameter, any prop type will be accepted, because\nReact.PropTypes.shape returns a function (the actual validator),\nnot an Error, currently indicating that propType checking passed.\nThis can create an unfortunate situation where a component looks\nlike it has fully specified propTypes, but in fact does not.\nThis commit addresses this by warning if a propType checker returns\nanything non-falsy that is not an Error (currently all the library\nPropTypes return null or an Error).\nTest Plan:\nAdded a unit test; ran jest in the root repo directory.\nAlso ran grunt lint and grunt test', "[docs] it's --> its", 'It\\ns -> Its', '[PropTypes] Make invalid proptype warning clearer\nAddresses comments on #3383, making the invalid proptype specification\nwarning clearer and making the tests for it a bit clearer.', 'Merge pull request #3383 from ariabuckles/proptype-warnings\n[PropTypes] Add warnings if PropTypes return functions', 'Fix grammar in warning message', 'Fix jsx_orphaned_brackets_transformer using jstransformer with an older esprima version', 'Merge pull request #3384 from syranide/npmjobt\nFix jsx_orphaned_brackets_transformer using jstransformer with an older esprima version', 'jsx_orphaned_brackets_transformer v1.0.1', "Nominalized 'shallow copy'\nI mis-parsed 'shallow copies' as adjective noun, instead of as a compound verb. I've adjusted the text to make it easier to parse on the first read, which should also help ESL learners to be able to parse it easier.", "Merge pull request #3385 from RichardLitt/patch-2\nNominalized 'shallow copy'", 'Fix in docs: getDOMNode --> findDOMNode', 'Merge pull request #3394 from cody/getDOMNode\nFix in docs: getDOMNode --> findDOMNode', 'toBeDOMComponentWithChildCount readability', 'Merge pull request #3355 from cpojer/shallowCompare\nAdd shallowCompare module and use it in PureRenderMixin + tests', 'ESLint ignores built files', 'Merge pull request #3397 from koba04/eslint-ignore-built-files\nESLint ignores built files', 'Fix for empty  elements with value\nThere is an exception when value or defaultValue is set but there are no\nchildren as ReactDOMSelect tries to mark the first children as selected\neven if there are no children.', 'Fix incorrect update of style when props.style transitions from null to non-null\nReactDOMComponent maintains a copy of the previous style\nobject to support in-place mutations of props.style.\nThis cached object was not cleared when the style\nproperty was removed in a props update.\nFixes #3409', 'Merge pull request #3410 from robertknight/3409-style-null-to-nonnull\nFix incorrect update of style when props.style transitions from null to non-null', 'Squash getDOMNode warning from isDOMComponent\nFixes #3329.', 'Merge pull request #3412 from spicyj/gh-3329\nSquash getDOMNode warning from isDOMComponent', 'Merge pull request #3402 from vkramskikh/fix-empty-selects-with-value\nFix for empty  elements with value', "Update TravisCI to use exiting env var\n$TRAVIS_COMMIT_RANGE was broken but it seems what we're doing is worse and\nresulting in false negatives.\nThe result of the bad range was that we weren't running lint or tests for\nthings we should have been. It actually looks like $TRAVIS_COMMIT has been\nwrong and it's not clear why this has been working at all.", "Fix up Perf a bit better for 0.13\n_mountImageIntoNode moved into ReactMount and wasn't being counted where it was supposed to be. In addition, all DOM elements are now wrapped in a composite wrapper but for the perf tools we want to skip over those or else we'll double-count (at least with the current accounting -- and that's effectively what we did before so this brings us back up to parity).\nFixes #3407.\nTest Plan:\nUsed the jsbin from #3407 and saw similar output from this branch and 0.12:\n", 'Generate XML-compatible tags and boolean attributes', 'Use a Polyglot HTML-safe method of escaping leading newline in rawtext elements', 'Update tests to use Polyglot profile of HTML', "Add back \\n-to-be-eaten for the plain-text elements\nThe comment hack to enable polyglot HTML isn't cross-browser, or simply doesn't work.", 'Move list of newline-eating tags to variable', 'Appease eslint', 'Link to inserting raw HTML document', 'Merge pull request #3413 from zpao/travis\nFix TravisCI fast bail check', 'Fix small typo', 'Merge pull request #3422 from jviereck/doc-typo-fix\nFix small typo ("of" instead of "or")', 'Merge pull request #2842 from Acubed/master\nGenerate XML-compatible void tags and boolean attributes', 'Merge pull request #3419 from xmo-odoo/patch-1\nLink to inserting raw HTML document', 'Merge pull request #3381 from zpao/jsx-nonstrictmodule\nFix module option parsing of jsx command', 'Fix PureRender test to use providesModule', 'Merge pull request #3414 from spicyj/gh-3407\nFix up Perf a bit better for 0.13', 'Merge pull request #3425 from zpao/fix-pure-test\nFix PureRender test to use providesModule', 'Ensure FullPageComponents are treated as DOM components\nWe currently override a couple DOM components. We need to ensure everything we\noverride is still treated as a DOM component, even if it has a composite\ncomponent wrapper.', 'Merge pull request #3427 from zpao/full-page-dom-components\nEnsure FullPageComponents are treated as DOM components', 'Add a note about react classe name convention\nI lost quite some time trying to figure out what was happening. No error in console and nothing showing up.', 'fix grammer in comments', 'Merge pull request #3395 from Simek/reactComponentExpect-cleanup\ntoBeDOMComponentWithChildCount readability', 'Merge pull request #3169 from jsfb/mount-into-shadowdom\nAllow rendering into document fragments. Fixes #840', 'Added webcomponents.js and a simple unit test verifying a document fragment as a valid React container.', 'Merge pull request #3176 from jsfb/webcomponent-to-vendor-thirdparty\nAdded webcomponents.js and a simple unit test verifying a document fragment as a valid React container', 'Changelog for 0.13.1', 'Update Readme for 0.13.1', '0.13 blog post, starter kit', "Don't use owner to determine statefulness\nThis reverts an early commit that made it so that elements from two\ndifferent owner in the same slot wouldn't share state.\nThat behavior was helpful, and we did hit a case which was solved by this.\nHowever, this pattern is extremely uncommon. I've yet to even find the\noriginal case, let alone any existing cases in our codebase.\nTherefore, we're dropping this to simplify elements and enable new\noptimizations.", "Merge pull request #3431 from sebmarkbage/ignoreowner\nDon't use owner to determine statefulness", 'Include the owner name when warning about createElement(null/undefined).\nMakes it easier to find the callsite that needs to be fixed.', 'Merge pull request #3433 from mihaip/master\nInclude the owner name when warning about createElement(null/undefined).', 'Merge pull request #3430 from fourcolors/patch-1\nfix grammar in comments', 'Lint fixes', 'Use console.error to show stack trace in console\nBetter version of #3277.\nTest Plan: jest, grunt test', 'Remove perf folder', 'Add warning for getDOMNode calls.', "Kill React.initializeTouchEvents for good\nNow that #1169 is fixed, the only thing this is used for is to determine whether onTouchTap causes touch listeners to be added. The only internal uses of TapEventPlugin are where touch events are already initialized (so this doesn't make a difference) and we don't support onTouchTap as part of the public API so this should be safe.", 'Merge pull request #3439 from cpojer/dom-node-warn\nAdd warning for getDOMNode calls.', 'Merge pull request #3438 from spicyj/lint\nLint fixes', 'More lint fixes', 'Merge pull request #3441 from cpojer/rm-perf\nRemove perf folder', 'Fix HTML to JSX converter to work with https', 'Merge pull request #3456 from cody/html-jsx\nFix HTML to JSX converter to work with https', 'Building with Relay blog post', 'Merge pull request #3463 from josephsavona/relay-components\nBuilding The Facebook News Feed With Relay', 'Fix the closing html paragraph tag.', 'Merge pull request #3464 from martomi/html-tags\nExamples - Fix a closing html paragraph tag.', 'Merge pull request #3442 from spicyj/kill-initializeTouchEvents\nKill React.initializeTouchEvents for good', 'Use full chain of member expressions when generating display names.\nAssumed to be namespaced names (with the exception of "exports", which is\nspecial-cased).', 'fix doc comments and typos', 'Merge pull request #3471 from mertkahyaoglu/master\nfix doc comments and typos', 'Put comma after any non-comments, non-whitespace in JSXEspression\nFixes #1673\nCloses #3129', 'Merge pull request #3129\nPut comma after any non-whitespace non-comment characters in JSXExpression', 'move getReactRootElementInContainer to ReactMount.js\ngetReactRootElementInContainer.js file contains one function used only\nin ReactMount.js.', 'Merge pull request #3472 from mertkahyaoglu/master\nmove getReactRootElementInContainer to ReactMount.js', 'Validate node nesting, take 3\nNicer version of #644 and #735. Fixes #101. Context is neat.', 'Add missing semicolon', 'Merge pull request #3475 from MaximAbramchuck/patch-1\nAdd missing semicolon', 'minor fixes in package.json', "Docs: do not render components to document.body\nRendering to document.body in the examples is conveniently short, but it can\nbe misleading at the same time, especially for newcomers.\nWhile it's possible to render React components to document.body, any 3rd\nparty scripts can also mess up with it, and it can have unintended consequences\nand be source of difficult-to-trace bugs.", 'Treat flexPositive/Negative/boxFlex as unitless styles', 'Update unprefixed css props doc', 'Merge pull request #3481 from mertkahyaoglu/master\nminor fixes in package.json', 'Merge pull request #3483 from julen/docs/document-body-footgun\nDocs: do not render components to document.body', '[docs] Videos: use https, right width videos\nI also added some s in there, which helps a little bit with spacing.', 'Removed build:test from test:coverage.\nThis was a duplicate task for build:withCodeCoverageLogging.\nIt should now properly output the lines which are not covered.', 'Merge pull request #3488 from delftswa2014/grunt-coverage-fix\nRemoved build:test from test:coverage.', 'Merge pull request #3271 from delftswa2014/fix/todo-example\nAdded the key attribute into the todo example', 'Remove classSet/cx', 'Remove mention from docs', 'adding docs for componentWillAppear and componentDidAppear', 'Fix the context handling when updating a rendered component.', 'Don\'t add \'px\' to strokeDashoffset CSS Properties\nThis is a SVG CSS Property. The standard expects values or percentages, and adding "px" to the value will break it.\nhttp://www.w3.org/TR/SVG/painting.html#StrokeDashoffsetProperty', 'Merge pull request #3440 from spicyj/console-error\nUse console.error to show stack trace in console', 'Merge pull request #3467 from spicyj/valid-3\nValidate node nesting, take 3', 'Fix tests after merge\nTest Plan: jest', 'Merge pull request #3490 from chenglou/remove-class-addon\nRemove classSet/cx', 'Merge pull request #3502 from spicyj/tests\nFix tests after merge of #3440', 'Reordered properties to maintain ABC order', "Merge pull request #3499 from sverrejoh/patch-1\nDon't add 'px' to strokeDashoffset CSS Properties", 'Merge pull request #3491 from bobbyrenwick/transition-group-appear-docs\nadding docs for componentWillAppear and componentDidAppear', 'Merge pull request #3487 from zpao/doc/video\n[docs] Videos: use https, right width videos', 'npm without -g should never need sudo', 'add scoped property to the list of DOM standard properties', 'Minor space change to be in line with coding style everywhere else', "Added support for the 'low', 'high', and 'optimum' attributes that the  tag requires.", 'Merge pull request #3511 from AnSavvides/glossary-space\nMinor space change to be in line with coding style everywhere else', 'Merge pull request #3507 from dpellier/master\nAdd scoped property to the list of DOM standard properties', 'Merge pull request #3503 from aredridel/patch-1\nnpm without -g should never need sudo', 'Merge pull request #3494 from letiemble/B_Context_Rerender\nFix the context handling when updating a rendered component.', 'Fix failing test\nPR #3494 was based on master before we shifted to using console.error. This\njust fixes the new test case.', "Merge pull request #3513 from agelter/master\nAdded support for the 'low', 'high', and 'optimum' attributes that are missing from the  tag.", 'Translate 2 docs into Japanese', 'Fix the locale id', 'Include latest version of jQuery in tutorial\nInclude latest version of jQuery 2.x in tutorial', 'Add skeleton for react-codemod', 'Add ReactUtils and array polyfills.', 'Add findDOMNode transform', 'Add pure-render-mixin transform', 'Add ES6 class transform', 'Update README for npm-react-codemod', 'Merge pull request #3506 from cpojer/react-codemod\nAdd npm-react-codemod', 'npm-react-codemod: Class transform doesn’t need an alias for module.exports = React.createClass any longer.\nBefore: module.exports = class __exports extends React.Component {}\nAfter: module.exports = class extends React.Component {}\nSee https://github.com/benjamn/ast-types/commit/638ef2b9d2f43938f64677c1109188092393b644', 'Merge pull request #3515 from cpojer/fix-class-transform\nnpm-react-codemod: Class transform doesn’t need aliases', "Validate only against problematic tag nesting\nTurns out lots of people write invalid HTML all the time and no one, including your browser or React, cares. Most invalid HTML combinations don't cause magic reparented nodes; only some do. The HTML5 parsing spec (https://html.spec.whatwg.org/multipage/syntax.html) specifies which tag combinations cause strange parsing behavior. I did my best to encode the logic here. It's more lenient than before in some cases, but more strict in others (before we didn't look at the whole stack of tags; now we warn with deeply nested p or form or a tags).", 'Only run src/ and vendor/fbtransform/ tests in jest\nTest Plan: jest', 'Merge pull request #3498 from AnSavvides/patch-1\nInclude latest version of jQuery in tutorial', 'Merge pull request #3516 from spicyj/valid-4\nValidate only against problematic tag nesting', 'Merge pull request #3517 from spicyj/jest-config\nOnly run src/ and vendor/fbtransform/ tests in jest', 'Remove stray console.log comment', "Docs: Clarify that React.PropTypes.node accepts fragments\nAs of #3293 ReactFragment counts as a node, but this isn't made clear in the docs.", 'Merge pull request #3504 from clariroid/docsJP\nTranslate 2 docs into Japanese', 'Merge pull request #3518 from alopatin/patch-1\nDocs: Clarify that React.PropTypes.node accepts fragments', "Tweak validation message, add html support\nThe old message made no sense if you had a > div > a or similar. I'm clearly feeling sloppy today.", 'Merge pull request #3520 from spicyj/validate-message\nTweak validation message, add html support', 'Add missing semicolon', 'Display error when trying to create an element of type boolean. Fixes #3478', '[docs] Update site nav', 'Disable numeric element types', 'Add React Native blog post', '[docs] Tweak words on homepage', 'remove unrelated doc line', '[docs] Split up second sentence more', 'Merge pull request #3525 from spicyj/home-3\n[docs] Tweak words on homepage', "Swapping defaultChecked and defaultValue \nThe current documentation states that the <select> tag supports defaultChecked, but it actually doesn't. I believe this documentation was meant to be written in the proposed order. \nNon-working fiddle using defaultChecked: http://jsfiddle.net/jqs1hsLr/1/\nWorking fiddle using defaultValue: http://jsfiddle.net/nv7z0yzL/1/", 'Merge pull request #3529 from uzarubin/patch-1\nSwapping defaultChecked and defaultValue', 'Merge pull request #3527 from mertkahyaoglu/master\nremove unrelated doc line', 'Merge pull request #3521 from grant/master\nDisplay error when trying to create an element of type boolean. Fixes #3478', 'Merge pull request #3240 from reactkr/translate-ko-release\nKorean translation for docs', "Update index.html\n'current' makes more sense than 'start' as the value increments passed it's start value.", 'Update to ed257cb', 'Translate tips 01..04 (based on 157d7770c99be26a9e0557d00978f15f6d9db794)', 'Translate tip-14 to Korean\n\nUp to 92c37ff\n', 'Translate tip-15 to Korean\n\nUp to 52494f9\n', 'Translate tip-16 to Korean\n\nUp to 1cb3f25\n', 'Translate tip-17 to Korean\n\nUp to 6f44f60\n', 'Translate tip-18 to Korean\n\nUp to 6f44f60\n', 'Translate tips 05..10\n\nUp to 3fd6ac5\n', 'Update Korean translation to b3c75d8', "'New' note", 'Update README.md', 'Update README.md', 'Update tutorial.md\nGrammar fix', "Keep docs/js/{react,JSXTransformer}.js in repo\nThis way we don't need to rebuild them each time for the website.", 'Merge pull request #3539 from russellpwirtz/patch-1\nUpdate tutorial.md', 'Fixed link to displayName component spec from JSX in depth article', 'Merge pull request #3544 from prathamesh-sonpatki/fix-link-to-display-name\nFixed link to displayName component spec from JSX in depth article', 'Roundup 26', 'Merge pull request #3545 from vjeux/roundup_26\nRoundup 26', "Add IE-specific 'unselectable' attribute\nI ended up needing to add this attribute to work around a common IE bug, that clicking on a scrollbar gives focus to the scroll container. I needed to set it as MUST_USE_ATTRIBUTE or the attribute would not be passed through by React successfully.\nremove trailing spaces", 'Merge pull request #3543 from spicyj/keep-docs-js-react\nKeep docs/js/{react,JSXTransformer}.js in repo', "Autobuild website on Travis from stable branch\n$REACT_WEBSITE_BRANCH in https://travis-ci.org/facebook/react/settings/env_vars now needs to point to the stable branch (currently 0.13-stable). I haven't tested the commit-and-push part of this but everything else works so I'm hopeful.", 'Merge pull request #3540 from spicyj/auto-gh-pages\nAutobuild website on Travis from stable branch', '[docs] English tweaks (and testing Travis)', 'Set git name and email for Travis', 'Set name and email a different way', 'Squelch git warning on Travis', 'Sync transforms from internal', 'Merge pull request #3445 from mihaip/master\nUse full chain of member expressions when generating display names.', 'Merge pull request #3549 from spicyj/trans-sync\nSync transforms from internal', 'Merge pull request #3537 from marocchino/korean-update\nUpdate Korean translations', "Merge pull request #3519 from jonchester/patch-1\nAdd IE-specific 'unselectable' attribute", 'Remove caching from for loops\nRemoved caching from for loops as it does not seem to increase\nperformance and makes the code harder to read.', 'Merge pull request #3552 from James-Dunn/fix-for-loops\nRemove caching from for loops', 'Merge pull request #3534 from tonyspiro/master\nUpdate index.html in transitions example', 'Import ResponderEventPlugin from react-native\nThis is a direct import of the files from react-native, with the license headers updated.', 'Fix small typo in 11-advanced-performance.md.\n"React didn\'t even had"->"React didn\'t even have"\nhttp://english.stackexchange.com/questions/204603/proper-usage-of-didnt-had-or-didnt-have', 'Merge pull request #3556 from wali-s/patch-1\nFix small typo in 11-advanced-performance.md.', 'Fix unused variable lint from #3552', 'fix render order error in safari', 'use ie8 feature detect instead of try catch', 'deal IE8 out of size error', 'update comment', 'Rename 19--dangerouslySetInnerHTML.md -> 19-dangerously-set-inner-html.md\n\nIt had double dash.\nIts name was inconsistent. Other tips are named by their IDs.\n', 'Merge pull request #3562 from dalinaum/rename\nRename 19--dangerouslySetInnerHTML.md -> 19-dangerously-set-inner-html.md', "Fix immutability helper to check hasOwnProperty safely\nThis makes update({}, {'hasOwnProperty': {$set: 'yolo'}}) work.", 'Merge pull request #3563 from quizlet/fix-addons-hasownproperty\nFix immutability helper to check hasOwnProperty safely', 'Merge pull request #2549 from ashtuchkin/fix-transitiongroup-multiremove\nFix ReactTransitionGroup behavior when removing several children at once', 'Use setState transaction for TransitionGroup instead of extra property', 'Fix inverted feature test in .travis.yml\nI messed this up in #3540.', 'Merge pull request #3564 from spicyj/travis\nFix inverted feature test in .travis.yml', 'Merge pull request #3560 from mariodu/mariodu\nfix render order error in safari.  Fixes #3560.', 'Set up style mutation monitoring\nThis works by storing the style and its copy onto the component, and do\nthe appropriate comparison during _updateDOMProperties.', "use 'forEach' instead of 'map' when clearing intervals", "Increase speed of shallowEqual\nAll testes successfully completed.\n\nfor-in in browsers is slow, i replaced him by Object.keys + for(array)\nsimple check of lengths let us not iterate if not same\nnow we dont need to test for B's keys missing from A, because if length's is same and prev check success - objB hasn't more keys\nmicro optimize: calling objB.hasOwnProperty\nmicro optimize: replaced !objA || !obj for more speedy check === null\n\ninspiredby https://github.com/jurassix/react-immutable-render-mixin/pull/4", 'Update shallowEqual.js\noptimize for lint rules', "Merge pull request #3572 from iamdoron/patch-1\nuse 'forEach' instead of 'map' when clearing intervals", 'Update shallowEqual.js', 'Fix ResponderEventPlugin to work in core React again\nTest Plan: jest, grunt fasttest', 'Merge pull request #3574 from rogozhnikoff/patch-1\nIncrease speed of shallowEqual', 'Merge pull request #3555 from spicyj/native-overrides\nImport ResponderEventPlugin from react-native', 'Remove some getDOMNode from docs and examples', 'Remove last call to getDOMNode in tests', 'Merge pull request #3576 from chenglou/last-getdomnode\nRemove last call to getDOMNode in tests', 'Merge pull request #3567 from chenglou/rm-getdomnode\nRemove some getDOMNode from docs and DOMComponent test', 'Warn when multiple instances of React are loaded on the same page\nThis causes a variety of hard-to-debug issues.\nSee #2402 for examples.\nFixes #2402', '[docs] Fix type on renderIntoDocument\nFixes #3581.', 'More Uniform Formating\nCorrected so the formatting in this document matches the same as others.', "Kill ReactPutListenerQueue\nAs far as I can tell, this is almost equivalent and is simpler. When a component's componentDidMount is called, all the listeners for that subtree will have been attached which I think is all that matters.", 'Update Korean translation to d402bd3', 'Merge pull request #3588 from marocchino/ko-update\nUpdate Korean translation to d402bd3', 'component.render method returns a ReactElement.', 'Merge pull request #3590 from koba04/patch-1\ncomponent.render method returns a ReactElement.', 'Fixed typo / grammar docs', "Documentation: Suggested edit adds clarity regarding when 'shouldComponentUpdate' is triggered and what the 're-rendering' process entails.", 'Fixes for several failing tests in Firefox and Safari', 'Mention Flux in “communicate between components”', 'Fix for style not always reset when set to null\nWhen the style property existed, but was set to null, this._previousStyleCopy\nwas not set back to null causing an old value to persist. This broke setting\nthe style to null the next time.\nFixes #3606.', 'Merge pull request #3614 from kassens/set_style_null\nFix for style not always reset when set to null', 'Merge pull request #3612 from gaearon/patch-1\nMention Flux in “communicate between components”', 'Switch to parent-based context.  Fixes #2112.', 'Fix server-side rendering of \nFixes #1398.', 'Merge pull request #3595 from spicyj/select-ssr\nFix server-side rendering of ', "Merge pull request #3589 from theseyi/master\nDocumentation: Fixed typo / grammar in 'clone with props'", 'Document new es6module flag in react-tools README', 'Update ReactCompositeComponentNestedState-test.js', 'Merge pull request #1 from bhamodi/2015-update\nUpdate ReactCompositeComponentNestedState-test.js', 'Update ReactDOMIframe-test.js', 'Merge pull request #2 from bhamodi/bhamodi-patch-1\nUpdate ReactDOMIframe-test.js', 'Merge pull request #3621 from bhamodi/master\nUpdate Copyright notices to include 2015', 'Add copyright headers to npm-react-codemod.', 'Merge pull request #3622 from cpojer/copyright-headers\nAdd copyright headers to npm-react-codemod.', 'Merge pull request #3618 from TimeBomb/master\nDocument new es6module flag in react-tools README', 'Merge pull request #3604 from Charca/firefox-tests-fixes\nFixes for several failing tests in Firefox and Safari', '[docs] Fix typo\nIntroduced in #3589', 'Docs: Fix example JSX output', 'Merge pull request #3587 from spicyj/kill-plq\nKill ReactPutListenerQueue', 'Refer to cloneElement in mutation warning', 'Kill ReactDoNotBindDeprecated\nNo one uses this.', 'Merge pull request #3628 from spicyj/do-not-bind\nKill ReactDoNotBindDeprecated', 'Merge pull request #3584 from ThornWinters/patch-1\nMore Uniform Formating', 'Merge pull request #3627 from spicyj/mut-warn-clone\nRefer to cloneElement in mutation warning', 'Merge pull request #3580 from robertknight/2402-warn-multiple-copies-of-react-on-same-page\nWarn when multiple instances of React are loaded on the same page', 'clarify sentence', 'Add target option to npm readme', 'check if type.prototype is object', 'Merge pull request #3635 from garethnic/reuseCompDoc\nClarify sentence in Reusable Components doc', 'check if is undefined', 'Merge pull request #3636 from cody/jsx-target\nAdd target option to npm readme', 'Merge pull request #3638 from devicehubnet/master\ncheck if type.prototype is object in instantiateReactComponent', 'Merge pull request #3615 from jsfb/enable-new-context\nSwitch to parent-based context.  Fixes #2112.', 'Updating es5-shim URL', 'Merge pull request #3641 from ljharb/patch-1\nUpdating es5-shim URL', 'Create 13-false-in-jsx.ko-KR.md\nBased on 52494f9d723f4b2db12a0bf16a07b243076c15cf', 'Create 12-initial-ajax.ko-KR.md\nBased on 52494f9d723f4b2db12a0bf16a07b243076c15cf', 'Translate tips 11 to Korean\n\nCreate 11-dom-event-listeners.ko-KR.md\nUpdate 03-interactivity-and-dynamic-uis.ko-KR.md to add an anchor.\n\nBased on 52494f9d723f4b2db12a0bf16a07b243076c15cf', 'Update Korean translation to 0185c68', 'Skip SelectEventPlugin extraction if no listeners\nIf there are no listeners for onSelect yet, do not extract events. This way we can avoid issues where listeners have been set up for some event dependencies for SelectEventPlugin, but not all.\nFor instance, if topMouseDown has been registered but not topMouseUp, event extraction will set the mouseDown flag to true but never unset it. This leads to bugs when onSelect is registered and should be firing during normal key behavior. Since no topMouseUp has yet occurred to unset the flag, onSelect fails to fire.', 'Merge pull request #3639 from salier/select-event-plugin\nSkip SelectEventPlugin extraction if no listeners', 'Merge pull request #3642 from marocchino/ko-update\nUpdate Korean translation to 0185c68', 'Add webkitdirectory and nwdirectory attributes for input file\nAdd attributes for \n* webkitdirectory\n* nwdirectory', 'Merge pull request #3644 from gregorym/patch-1\nAdd webkitdirectory and nwdirectory attributes for input file', 'Revert "Add webkitdirectory and nwdirectory attributes for input file"', 'Merge pull request #3645 from facebook/revert-3644-patch-1\nRevert "Add webkitdirectory and nwdirectory attributes for input file"', 'Update Patent Grant\nhttps://code.facebook.com/posts/1639473982937255/updating-our-open-source-patent-grant/', 'Revert "Warn when multiple instances of React are loaded on the same page"', 'Merge pull request #3646 from facebook/revert-3580-2402-warn-multiple-copies-of-react-on-same-page\nRevert "Warn when multiple instances of React are loaded on the same page"', "Don't thread index through traverseAllChildren\nI'm not super attached to this, but this feels cleaner to me. Might even be faster since flattenChildren doesn't use the index. Probably no change though.", 'Fixed typo', 'Merge pull request #3658 from sbezludny/patch-1\nFixed typo', "Update uglify dependency\nApparently we needed to get to v2.4.17 to get the fix for #2247. We\nshrinkwrapped on the same day but the timing didn't work out so we missed it.", 'Merge pull request #3662 from zpao/update-uglify\nUpdate uglify dependency', 'Replace hasOwnProperty in child processing with typeof undefined check', 'Merge pull request #1366 from spicyj/enterleave-testutils\nMake Simulate.mouseEnter/Leave use direct dispatch', '[docs] Use marked instead of Showdown and escape HTML\nFixes #3501.', 'Merge pull request #3663 from spicyj/san-md\n[docs] Use marked instead of Showdown and escape HTML', 'Update index.html\ngetting rid of magic numbers', 'Merge pull request #3668 from elquatro/master\nGet rid of magic numbers in transitions example', 'Update code style', 'Merge pull request #3485 from jnu/ie10-flex-unitless\nTreat flexPositive, flexNegative as unitless styles', '"Advanced performance" typo fix\nExample code used the key "propsTypes" - correct to "propTypes"', 'Merge pull request #3673 from ultrafez/patch-1\n"Advanced performance" typo fix', 'Add warning for getDefaultProps on ES6 classes\nFixes #3655.', 'Merge pull request #3675 from spicyj/gh-3655\nAdd warning for getDefaultProps on ES6 classes', 'Remove withContext from top-level API', 'Create 19-dangerously-set-inner-html.ko-KR.md\nBased on 2e1ccae2758e61ab86bc79bdcac0d61747065a4a', 'Update Translation to 6a7a4fd', 'React Native 0.4 Blog Post', 'Update 2015-04-17-react-native-v0.4.md', 'Merge pull request #3684 from vjeux/react-native-0-4\nReact Native 0.4 Blog Post', 'Merge pull request #3678 from marocchino/update-korean\nUpdate Translation to 6a7a4fd', 'Merge pull request #3625 from dmin/patch-1\nDocs: Fix example JSX output', "Add 'cache: false' to $.ajax when fetching comments", 'Changelog for 0.13.2\n(cherry picked from commit 4f1c61f915d4a2818eff2789b9afe67b8f127b15)', 'Readme for 0.13.2\n(cherry picked from commit e1437078fc459384d0102edcaf0b19afe78b3489)', 'Update website with 0.13.2 builds\n(cherry picked from commit 179f90452570193b4e1037698bafe5628afe5e7b)', 'v0.13.2 blog post\n(cherry picked from commit 6ed202288be889a1541853af53d9d18cf309d217)', 'Tweak wording in 0.13.2 blog post', 'Fix missing line highlight in tutorial', "SSL/TLSize all the things! (convert http:// to https:// where appropriate)\nUpdate links to use https:// where it is supported. There's probably a lot\nmore that could be fixed, but these are the core ones I found (especially\nthe download links in order to prevent MITM attacks). Note that there are\nsome fb.me links that will redirect to http:// even while accessed over\nhttps://, but this seemed like the best way to fix those for now.\nNOTE: Only non-third-party files were modified. There are references to\nhttp:// URLs in vendored/third-party files, but seems appropriate to fix\nupstream for those rather than editing the files.\nAlso, copy one image locally to the blog, as it was hotlinking to a site\nthat did not support https://.\nLast, use youtube-nocookie.com instead of youtube.com for video embeds,\nas the former doesn't try to set a cookie on load (privacy enhancement).", 'Merge pull request #3694 from adamzap/fix-tutorial-line-highlighting\nFix missing line highlight in tutorial', 'should call new and old constructor with arguments', 'Example is JSX not JS.', 'Merge pull request #3703 from JimBobSquarePants/patch-1\nExample is JSX not JS.', '[docs] Update supported HTML attributes', 'Merge pull request #3697 from basecode/improve-pooler-tests\nImprove PooledClass tests', 'Merge pull request #3705 from zpao/doc/update-supported-attrs\n[docs] Update supported HTML attributes', 'Merge pull request #3693 from reedloden/swap-http-to-https\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)', "Remove ReactRAFBatchingStrategy\nWe don't use or support this, so let's just delete it. (#3570)", 'Merge pull request #3706 from spicyj/no-raf\nRemove ReactRAFBatchingStrategy', 'Update Changelog for 0.13 to mention JSXTransfomer change', 'Merge pull request #3712 from zpao/changelog-jsxtransformer\nUpdate Changelog for 0.13 to mention JSXTransfomer change', 'Shallow render components that define contextTypes\nYou now no longer have to pass an undocumented extra argument to the\nshallow renderer for rendering components with contextTypes to work.\nFixes #3696', 'Fix line highlighting in code blocks due to addition of extra example code', 'Merge pull request #3676 from zpao/rm-withContext\nRemove withContext from top-level API', "Merge pull request #3691 from jonscottclark/patch-1\nAdd 'cache: false' to $.ajax when fetching comments (docs/tutorial)", 'Merge pull request #3716 from graue/optional-shallow-render-context\nShallow render components that define contextTypes', 'Merge pull request #3665 from mridgway/replaceHasOwnProperty\n[performance] Replace hasOwnProperty in child processing with typeof undefined check', 'Fix bad links in docs.  Fixes #3654.', 'Merge pull request #3723 from jsfb/fix-bad-homepage-link\nFix bad links in docs.  Fixes #3654.', 'Provide top level method for rendering subtree (passes context)', 'Merge pull request #3640 from jsfb/render-subtree-pass-context\nProvide top level method for rendering subtree (passes context)', 'Merge pull request #3429 from AoDev/patch-1\nAdd a note about react classe name convention', 'Relax dangerouslySetInnerHTML validation\nFixes #3460.', 'Update cloneWithProps documentation\nUpdated documentation to reflect that using React.cloneElement is the new way to copy an element and preserve key and ref.\nFixes #3432, closes #3447.', 'Merge pull request #3727 from spicyj/dsih\nRelax dangerouslySetInnerHTML validation', 'Update Translation to 0183f70', 'Merge pull request #3734 from marocchino/update-korean\nUpdate Translation to 0183f70', 'Merge pull request #2027 from chenglou/warn-style-mutation\nSet up style mutation monitoring', 'Tweak style mutation warning, remove test comment', 'Merge pull request #3739 from chenglou/style-mut-comments\nTweak style mutation warning, remove test comment', 'Treat boxOrdinalGroup and flexOrder as unitless.', 'Fixed Formatting.', 'Missing punctuations in comments.\nAdded periods to two comment lines to ensure uniform format.', 'Merge pull request #3747 from jayeszee/patch-1\nMissing punctuations in comments.', 'src/core/ReactChildReconciler.js::unmountChildren was missing an Object.hasOwnProperty check', 'Merge pull request #3749 from VictorKoenders/master\nunmountChildren was missing an Object.hasOwnProperty check (src/core/ReactChildReconciler.js)', "Add missing super() calls\nBabel complains without these because it's invalid ES6.", 'Merge pull request #3757 from spicyj/es6\nAdd missing super() calls', 'Add key warning to nested collections\nAlso when reusing elements in multiple contexts -- before we were mutating each element to indicate its validity; now we mutate the array containing it (which we create, in the case of rest-arg children).\nFixes #2496. Fixes #3348.', 'Merge pull request #3758 from spicyj/keys-keys-keys\nAdd key warning to nested collections', 'Added unit test to verify that context treats the component doing a render() as the parent.', 'Added support for SVG clipPath element and clip-path attribute', 'Add forgotten clipPath wrapper in getMarkupWrap', 'Merge pull request #3740 from jsfb/element-is-parent-of-render-result-test\nAdded unit test to verify that context treats the component doing a render() as the parent.', 'Allow ReactCSSTransitionGroup to also take in object containing classNames instead of relying on manipulation of the transitionName property', 'Update 10.1-animation.md\nCustom classes', 'Fix differences a jQuery CDN URLs, fixes #3750.\nunify to https://code.jquery.com/jquery-2.1.3.min.js.', 'Merge pull request #3767 from kubosho/patch-1\nUse jQuery 2.1.3 (latest) to be up-to-date and consistent with other docs)', 'Use local grunt executable on Travis\nBuilds have been flaky lately. Maybe this will help?', 'Merge pull request #3722 from spicyj/travis-rel-grunt\nUse local grunt executable on Travis', 'DRY quadratic formula example', 'Merge pull request #3779 from katzoo/dry-quadratic-example\nDRY quadratic formula example', "Fix infinite recursion in browsers with iterators\nMy old code here didn't work properly -- for a string child, getIteratorFn would return an iterator that gave each character as its own string, and we'd attempt to loop over that too.\nTests now work in Chrome again.", 'Add punctuation', 'Merge pull request #3784 from ef718/docs-punctuation\nAdd punctuation', 'Merge pull request #3781 from spicyj/elval\nFix infinite recursion in browsers with iterators', 'Add more context to DOM nesting warning\nBetter version of #3578.', 'check that React renders the menuitem closing tag', 'Merge pull request #3786 from HurricaneJames/master\ncheck that React renders the menuitem closing tag', 'npm build: create addons directory that loads from lib. Closes #3780', 'Merge pull request #3785 from iamdustan/addons\nnpm build: create addons directory that loads from lib. Closes #3780', 'Fixed jsfiddles broken from https conversion.  Fixes 3735', 'Batch updates within top-level unmount\nAnalogous change to #2935.', 'Merge pull request #3795 from spicyj/batch-unmount\nBatch updates within top-level unmount', 'Update Korean Translation to 9484d0f', 'Merge pull request #3794 from jsfb/fix-thinking-in-react-blog-post\nFixed jsfiddles broken on https.  Fixes 3735.', 'GraphQL Introduction Blog Post', 'Fix a couple grammar issues in GraphQL blog post', 'Better warning messages for deprecated methods', 'Update 2015-05-01-graphql-introduction.md\nTypo', 'Merge pull request #3802 from spicyj/cleaner-depr\nBetter warning messages for deprecated methods', 'Merge pull request #3797 from marocchino/update-korean\nUpdate Korean Translation to 9484d0f', 'Removed redundant grave accent character from Component API docs', 'Merge pull request #3805 from hejld/master\nRemoved redundant grave accent character from Component API docs', 'jsdoc fixes', 'Use Babel to build React\nSize comparison:\nraw     gz Compared to master @ 6ed98ec0c83918d91b16517544e658e2ec068070\n     =      = build/JSXTransformer.js\n-15736  -3247 build/react-with-addons.js\n  +287     +7 build/react-with-addons.min.js\n-14412  -2887 build/react.js\n  +274    +15 build/react.min.js\nDifferences mostly look to be various bits of whitespace that Babel ends up removing during its transforms (https://gist.github.com/spicyj/21ef31f4d95fb7a58daf). In minified files, mostly additions of "use strict";.', 'Remove es3ify', 'Merge pull request #3801 from spicyj/babel\nUse Babel to build React', 'updated some typos, grammers, and made sentences sound better', 'Merge pull request #3778 from masterfung/docs-update\nupdated some typos, grammers, and made sentences sound better', "Replace vendor/constants recast transform with babel\nBuilt files look the same up to parenthesization and quoting. This only saves 1.5 seconds out of ~20 on a clean build but it's a little simpler.", 'Merge pull request #3813 from spicyj/babel\nReplace vendor/constants recast transform with babel', 'IsMounted should always return a boolean.\nFixes #3814. isMounted used to return undefined if internalInstance\nwas undefined after component was unmounted.', 'Merge pull request #3815 from neojski/isMounted-should-return-boolean\nIsMounted should always return a boolean.', 'Remove transforms from repo, react-tools\nTime to just use jstransform.', 'Merge pull request #3777 from zpao/deprecate-react-tools\nDeprecate react-tools', 'Added support for namespace attributes', 'Follow-ups for #3718\n\nRename NamespaceProperties to DOMAttributeNamespaces\nMake tests pass in jest\nRemove unnecessary xmlns attributes\n', 'Merge pull request #3718 from framp/master\nAdded support for namespace attributes', 'add a badge with latest npm package published', 'ReactMultiChildText-test.js fix __html typo', 'Formatting of line 19 ReactNativeComponent.js\nCorrected formatting error on line 19 of ReactNativeComponent.js by adding a period in order to be consistent with the other comments in the file.', 'Merge pull request #3830 from gberg1/patch-1\nFormatting of line 19 ReactNativeComponent.js', 'Merge pull request #3829 from murashki/ReactMultiChildText-test.js-__html-typo\nReactMultiChildText-test.js fix __html typo', 'Merge pull request #3828 from chicoxyzzy/patch-1\nadd a badge with latest npm package published', 'Add support for unitless tabSize/tab-size', 'Merge pull request #3831 from MadLittleMods/tab-size-unit-less\nAdd support for unitless tabSize/tab-size', 'remove jslint comments', 'Followup to #3758 so we actually test things', 'Merge pull request #3835 from zpao/fix-keys-keys-keys-test\nFollowup to #3758 so we actually test things', 'Follow-up to follow-up to #3718\nCleaned up a few more ununsed things.', 'added animate initial mounting section to animation docs', 'Preserve prototype with replaceState\nFixes #3418.', 'Merge pull request #3841 from spicyj/yolo\nPreserve prototype with replaceState', 'Add Wikipedia link to Cross-site scripting on "XSS attack" string', 'Merge pull request #3852 from thewarpaint/patch-1\nAdd Wikipedia link to Cross-site scripting article on "XSS attack" string', 'Fix esprima-fb dependency', '0.14.0-alpha1', 'Merge pull request #3837 from davidneat/transition-group-appear-high-level-docs\nAdded transitionAppear docs', 'Merge pull request #3834 from chicoxyzzy/remove_jslint\nremove jslint comments', 'Change object typo to objects', 'Merge pull request #3856 from chaseadamsio/chaseadamsio-patch-1\nChange object typo to objects', 'Set _reactChildKeysValidated in dev mode only', 'Merge pull request #3857 from spicyj/dev-rckv\nSet _reactChildKeysValidated in dev mode only', 'Split out warning message for nested key warning\nAlso make sure to mark child array as validated in cloneElement as well.', 'bower.json: remove moot version field\nPer https://github.com/bower/bower.json-spec/commit/a325da3d79baab018c572d75dc1781b12322f6cd', "Don't run non-existant fbtransform tests", '[docs] Move pre-compiled JS files', 'Merge pull request #3864 from cvrebert/patch-1\nbower.json: remove moot version field', 'Merge pull request #3861 from spicyj/nested-v\nSplit out warning message for nested key warning', 'Clarify ReactElement prop validation message\nFixes #3865.', 'Merge pull request #3870 from spicyj/gh-3865\nClarify ReactElement prop validation message', 'Deprecate reactjs Google Group', 'Merge pull request #3871 from spicyj/group\nDeprecate reactjs Google Group', 'Split message for deep numeric key warning too', 'Use Babel to transform JS in docs, update other calls', 'Merge pull request #3869 from zpao/jsx-cleanup\nJSX -> Babel cleanup', 'Merge pull request #3872 from spicyj/nested-num\nSplit message for deep numeric key warning too', 'Update CONTRIBUTING.md\nMake the contributing sentence make a little bit more sense.', 'Better warnings for nested propTypes\narrayOf, shape and objectOf warnings now display the full path of\nthe invalid key.', ' added children flatten, & warn if invalid', 'Add punctuation', "Merge pull request #3651 from spicyj/tac-noi\nDon't thread index through traverseAllChildren", 'Merge pull request #3719 from spicyj/vdn2\nAdd more context to DOM nesting warning', 'Merge pull request #3847 from bloodyowl/option-flatten-children\n added children flatten, & warn if invalid', 'Get HTML5 minlength working.\nAdding minLength=X to an input element would not work, whereas maxLength=X would work.\nThis change gets minLength=X working.', 'Merge pull request #3882 from wali-s/get-html5-minlength-working\nGet HTML5 minlength working.', 'Followup to #3852, use https', 'Merge pull request #3881 from ef718/docs-grammar\nFix punctuation and grammar', 'Merge pull request #3874 from bhamodi/patch-1\nUpdate CONTRIBUTING.md', 'Merge pull request #3746 from chrisgrovers/patch-1\nFixed Formatting.', 'Reorganize Src Files for Isomorphic React Package\nThe new folder structure is organized around major packages that are expected to ship separately in some form.\n/isomorphic\nI moved classic/modern and children utils into a directory called "isomorphic" with the main export being ReactIsomorphic. This will eventually become the "react" package.\nThis includes all the dependencies that you might need to create a component without dependencies on the renderer/reconciler.\nThe rest moves into decoupled renderers.\n/renderers/dom/client - This is the main renderer for DOM.\n/renderers/dom/server - This is the server-side renderer for HTML strings.\n/addons and /test - Same as before for now.\nYou\'re not supposed to take on a dependency inside another package.\nShared code is organized into a "shared" directory which is intended to support all the packages in that subdirectory. Meaning that once we swap to CommonJS modules, the only time you should use .. is to target ../shared/ or ../../shared.\nE.g. /shared/ is common utils that are used by everything.\n/renderers/shared/ is code that is shared by all renderers, such as the main reconciliation algorithm.\nShared code will likely be copied into each package rather than referenced. This allow us to have separate state and allow inlining and deadcode elimination.', 'Merge pull request #3866 from sebmarkbage/coreapi\nReorganize Src Directory for Isomorphic React Package', 'Document boolean attributes in JSX', 'Update Korean Translation to 5275244', 'change wording', "Merge pull request #3889 from garethnic/WorkBrowser\nchange wording in 'Working with the Browser'", 'Merge pull request #3888 from marocchino/korean-update\nUpdate Korean Translation to 5275244', 'Merge pull request #3737 from Morhaus/nested-proptypes-warnings\nBetter warnings for nested propTypes', '[docs] Clarify wording in Working with the Browser\nI think the change in #3889 misinterpreted this slightly; this makes it clearer.', 'Update Styling Guide in Contributing Docs', 'Ignore third_party JS in internal transform step', 'Merge pull request #3892 from spicyj/docs-wwb\n[docs] Clarify wording in Working with the Browser', 'Merge pull request #3894 from bhamodi/patch-2\nUpdate Styling Guide in Contributing Docs', 'Revert "Add key warning to nested collections"\nThis heuristic isn\'t great because it relies on inspecting deep children which aren\'t guaranteed to be React elements. In particular, this was causing stack overflows in a component we had that used a DOM node as children, like <DOMContainer>{node}</DOMContainer>.\nThis reverts commits:\n0a3aa8493aa014668f5dd3bac30868c18397538e\n64c9d9d7629600da81ceefcaa59c46e64d030874\n0c58f4f6b12bd7856b73f14163db905cb13c5fc7\n8cf226e44241aeafe147f6256a1351b46ac3cf91\n086636747f26b577b4a4577a0888118310ee91b3', 'Add test for DOM node as this.props.children', 'Merge pull request #3883 from spicyj/revert-nested\nRevert "Add key warning to nested collections"', 'Replaced call to deprected .getDOMNode() with React.findDOMNode().\nThe code sample in tip 18 in the docs contained a call to the\n.getDOMNode() method which has been deprecated. The method call was\nreplaced with a call to React.findDOMNode(), which is the preferred way\nof getting DOM nodes from a ref.', 'Merge pull request #3905 from troeggla/replace-getdomnode\nReplaced call to deprected .getDOMNode() with React.findDOMNode().', 'Remove unused variable', 'Merge pull request #3908 from spicyj/lint\nRemove unused variable', 'Clarify tutorial instructions\nFixes #3904.', 'Merge pull request #3910 from spicyj/gh-3904\nClarify tutorial instructions', '[docs] Fix 404 due to relative url\nCloses #3914', 'Merge pull request #3896 from zpao/babel-ignore-web-components\nIgnore third_party JS in internal transform step', 'Pass context to DOM wrappers, use it in ', '0.14.0-alpha2', 'Merge pull request #3917 from spicyj/option-context\nPass context to DOM wrappers, use it in ', 'Add shallow context pass test', 'Merge pull request #3912 from laskos/shallow-context-pass\nAdd shallow context pass test', 'Fix docs for #3690\n(cherry picked from commit 2668de126c3d861d9bae8109a02fa3a70ebe3cdc)', 'Readme for 0.13.3\n(cherry picked from commit 1d950ddbd441416feb0757c71e35bc907180227f)', 'Changelog for 0.13.3\n(cherry picked from commit 95e864fd07398d3a5b09c082189fae9c108f974d)', 'v0.13.3 blog post\n(cherry picked from commit 179b6380cf31b735d3fb4d820099c3653127c3dd)', 'Update website with 0.13.3 builds\n(cherry picked from commit 107ce2b80d1f3609b5c684c29c552f8995dfeb2f)', '[docs] Give authors links.', 'Merge pull request #3803 from zpao/docs-fancy-authors\n[docs] Give authors links.', 'Update Korean transltaion to 5bee4a5', 'Merge pull request #3931 from marocchino/update-korean\nUpdate Korean transltaion to 5bee4a5', 'Better invariant / warning replacement', 'Merge pull request #3788 from zpao/better-invariantwarning-replacement\nBetter invariant / warning replacement', "Redirect Thinking in React blog post to docs\nMuch easier to keep this updated if it only exists in one place. Added the byline because otherwise the voice of the post doesn't sound quite right.", 'Merge pull request #3909 from spicyj/tir-redirect\nRedirect Thinking in React blog post to docs', 'Dedupe warnings in validateDOMNesting\nFixes #3921.', 'Docs: value for transitionAppear must be boolean', 'Merge pull request #3935 from julen/docs/transition-group\nDocs: value for transitionAppear must be boolean', 'Merge pull request #3934 from spicyj/gh-3921\nDedupe warnings in validateDOMNesting', '[Blog post] React Native Release Process', 'Merge pull request #3938 from vjeux/blog_rn_release_process\n[Blog post] React Native Release Process', 'Process childContextTypes via internal constructor', 'Assert instance type using internal constructor', "Fixed failing unit tests in browsers that don't support WebComponents", "Merge pull request #3923 from jimfb/fix-grunt-test-debug\nFixed failing unit tests in browsers that don't support WebComponents", 'Add capture to supported attributes', 'Merge pull request #3950 from cody/capture\nAdd capture to supported attributes', 'Adding validation for array in ReactPropTypes.', 'Merge pull request #3963 from alansouzati/REACT_PROP_ARRAY_VALIDATION\nAdding validation for array in ReactPropTypes.', 'Remove web worker test', 'Merge pull request #3966 from spicyj/no-worker-test\nRemove web worker test', "Added challenge, keyParams and keyType on \nChrome allowed some of these to be 'null' (allow node.challenge etc),\nbut FF didn't work. This will tell React to use node.setAttribute() to\nset these values.\nTested in FF, Chrome, Safari.  isn't supported on IE.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen", "Fix PropTypes.{oneOf, oneOfType} validation\nFollow-up to #3963. (Returning an Error wasn't useful; it just caused a later error when actually using it because type checkers need to be functions.)", 'Merge pull request #3969 from spicyj/pt\nFix PropTypes.{oneOf, oneOfType} validation', 'Removed ReactElement._context (cleanup)', '0.14.0-alpha3', 'Merge pull request #3970 from jimfb/remove-_context\nRemoved ReactElement._context (cleanup)', 'Merge pull request #3967 from jamischarles/master\nAdded challenge, keyParams and keyType on ', 'Use babel-eslint and update eslint\n\nRemoves esprima-fb dependency\nTightens up eslintrc with some minor rules we were pretty-much\n    following anyways.\nAdds pretty colors to the grunt lint output\nBreaks block-scoped-var :(\n', 'Update Korean transltaion to 58fb322', 'Retain lines in babel under jest\nNow stack trace lines are actually useful.', 'Merge pull request #3977 from spicyj/jest-lines\nRetain lines in babel under jest', 'Revert links to non-https fiddles back to http in old blog posts', 'Merge pull request #3980 from cody/http\nRevert links to non-https fiddles back to http in old blog posts', 'Merge pull request #3975 from marocchino/update-korean\nUpdate Korean transltaion to 58fb322', 'Addition of troubleshooting section', 'Remove envify from the basic-commonjs example\nenvify is installed as a dependency of the react package. There is no need in installing it one more time', 'Merge pull request #3992 from thorn0/patch-1\nRemove envify from the basic-commonjs example', 'added missing DOCTYPE', 'Merge pull request #3993 from arianf/doctype\nadded missing DOCTYPE', 'Trivial mispelling in docs', 'Merge pull request #3997 from donabrams/patch-1\nTrivial misspelling in enqueueForceUpdate docs', "Enable linting for tests\nCloses #3971.\n\nAfter #3968, the next thing we should do is start linting our tests.\nHistorically we've ignored them due to lack of parser compatibility.\nBut that shouldn't be a problem anymore. We may want to integrate\nhttps://www.npmjs.com/package/eslint-plugin-react to more aggressively\nlint our JSX in tests.\n\nI understand this diff touches a lot of stuff, so I tried to keep it to\na near-minimal set of changes to make eslint happy.", 'Merge pull request #3985 from PiPeep/eslint-tests\nEnable linting for tests', 'Merge pull request #3988 from jrobison153/troubleshooting_docs\nTroubleshooting documentation', 'Removed ReactContext (cleanup)', 'Merge pull request #3999 from jimfb/more-context-cleanup\nRemoved ReactContext (cleanup)', "Make DOM wrapper component using lower-level primitives\nIntroducing: a really lame version of composite components, right inside of ReactDOMComponent!\nNow ReactDOMInput isn't an actual component. This brings us closer to exposing DOM nodes as refs.", 'Merge pull request #3976 from spicyj/no-wrapper\nMake DOM wrapper component using lower-level primitives', "Added 'is' attribute", "Merge pull request #3930 from Wildhoney/add-is-attribute\nAdded 'is' attribute for custom elements", 'Remove debug message', 'Merge pull request #4006 from cody/console\nRemove debug message', 'Support arbitrary attributes on elements with dashes in the tag name.', 'Kill .type (was deprecated in 0.13, to be removed in 0.14)', 'Merge pull request #4009 from jimfb/kill-.type\nKill .type (was deprecated in 0.13, to be removed in 0.14)', "Switch to using comma-dangle: always-multiline\nThis is a machine-generated codemod, but it's pretty safe since it was\ngenerated by hooking into eslint's own report.\nA few files had to be touched up by hand because there were existing\nformatting issues with nested arrays/objects:\nsrc/shared/utils/tests/OrderedMap-test.js\nsrc/shared/utils/tests/Transaction-test.js\nsrc/shared/utils/tests/traverseAllChildren-test.js\nsrc/isomorphic/children/tests/ReactChildren-test.js", "Remove /eslint-disable comma-dangle/ comments\nCommit 9d3f7f30ba3ba55cbfd98b26fdd2cc7289716650 reverses the rule, so\nthese comments aren't needed anymore.", 'Merge pull request #3998 from PiPeep/comma-dangle\nSwitch to using comma-dangle: always-multiline', 'Inline createFullPageComponent in ReactDOMComponent', 'Merge pull request #3067 from jimfb/arbitrary-attributes-for-dash-elements\nSupport arbitrary attributes on elements with dashes in the tag name.', 'Use correct location when running LinkedValueUtils proptype checks', 'Add custom eslint rule for warning and invariant\nSee #2869\nChecks that the second argument of warning and invariant are a literal\nstring, or a concatination of literal strings, and that the number of\narguments is correct based on the number of %s substrings.\nThis commit also fixes a few places where the existing code had broken\nerror messages!\nThe rule itself is pretty straightforward, although adding the tests\nended up being a bit painful, as eslint-tester depends on mocha, and\ntherefore needs to be run in a separate grunt task.', 'Remove the codes relating to jshint', 'Merge pull request #4021 from PiPeep/warning-invariant-rules\nAdd custom eslint rule for warning and invariant', 'Merge pull request #3416 from koba04/remove-jshint\nRemove the codes relating to jshint', 'Enable more eslint-plugin-react rules\nThis should contain all the rules we probably want to use, except\nreact/wrap-multilines, which requires a larger codemod, and would\nclutter this commit.', 'Enable react/wrap-multilines eslint rule\nMultiline jsx literals in a return should be paren-wrapped.', 'Merge pull request #4007 from PiPeep/eslint-plugin-react\nEnable more eslint-plugin-react rules', 'Fix wording of warning-and-invariant-args linter\nThe wording for an incorrect number of arguments based on counting %s\nsubstitutions. The previous wording was backwards and a bit yoda-like\nleading to possible ambiguity.', 'Merge pull request #4011 from spicyj/cfpc\nInline createFullPageComponent in ReactDOMComponent', 'Added component displayName to warning message in ReactUpdateQueue.js', 'reversed line 54 (no-op message) in ReactUpdateQueue.js and added it to the line above', 'Merge pull request #4022 from zpao/fix-undefined-location\nUse correct location when running LinkedValueUtils proptype checks', 'Fix npm run lint\nBroke in #4021.', 'Merge pull request #3941 from troutowicz/testing_type\nAssert instance type using internal constructor', 'Convert ReactDOMTextarea to not be a wrapper', 'Merge pull request #4028 from spicyj/npm-run-lint\nFix npm run lint', 'Merge pull request #4027 from spicyj/dc-textarea\nConvert ReactDOMTextarea to not be a wrapper', 'Merge pull request #3940 from troutowicz/context_processing\nProcess childContextTypes via internal constructor', 'Convert ReactDOMButton', 'Check warning/invariant calls have good messages\nThe warning implementation checked that the message is long enough to\nbe useful. See commit f5038829d for more information.\nIt makes more sense to move this into a lint rule, and also to apply it\nfor both warning and invariant. We can safely remove stuff from the\nwarning implementation as we replace the function internally anyways.\nhttps://github.com/facebook/react/pull/4021#issuecomment-108694976\n@spicyj', 'Merge pull request #4030 from spicyj/dc-button\nConvert ReactDOMButton', 'Merge pull request #3913 from edvinerikson/edvinerikson/better-warning-message\nAdded component displayName to warning message in ReactUpdateQueue.js', "Attempt to simplify/fix warnAndMonitorForKeyUse\n\nThe two callers of this function have different warning configs\ninternally (static_upstream/core/createWarning.js) so we can't sync it\nlike this without changing behavior. We should just split this out\ninto two separate warning calls probably – this code is a little\noverabstracted.\n\nhttps://github.com/facebook/react/pull/4021#discussion_r31690020\n@spicyj\nI think completely removing warnAndMonitorForKeyUse is a bit difficult, without\nduplicating a ton of code. This at least ensures that the format string passed\nto warning is unique. Plus, because the FB internal code in question only\nmatches the beginning of the format string, I think there should be zero\ninternal changes that need to be made to support this refactor.", 'Merge pull request #4029 from PiPeep/warning-invariant-rules-take-two\nFix problems with/improve warning and invariant rules (take two)', 'Roll back to babel-eslint 3.1.9\nspicyj noticed newer versions of babel-eslint seemed not to error on\nno-unused-vars, and I was able to repro. It seems like something broke\nbetween 3.1.9 and 3.1.10. (Smaller repro case and babel-eslint bug\nreport to come)\nHis commit failed on travis, but not on his local machine:\nhttps://travis-ci.org/facebook/react/jobs/65468729', 'Convert form, iframe, img to not use wrappers\nTest Plan:\nTested manually that rendering an <img /> triggers its onLoad handler.', 'Merge pull request #4032 from PiPeep/babel-eslint-no-unused-vars\nRoll back to babel-eslint 3.1.9', 'Load custom eslint rules as plugin, w/o --rulesdir\nThis allows us to load the eslint rules without requiring command-line\narguments, which avoids breaking editors with eslint plugins.\nhttps://github.com/eslint/eslint/issues/2180#issuecomment-87722150', 'Merge pull request #4033 from spicyj/dc-events\nConvert form, iframe, img to not use wrappers', 'Convert select/option to not use wrappers', "Remove line length lint warning\n...because the current situation isn't helpful; no one looks at the list. Our style guide hasn't changed.", 'Only enqueue attachRefs if refs are present\nfor #4036', 'Merge pull request #4034 from PiPeep/eslint-rules-as-a-plugin\nLoad custom eslint rules as plugin, w/o --rulesdir', 'Merge pull request #4035 from spicyj/dc-os\nConvert select/option to not use wrappers', 'Merge pull request #4037 from spicyj/ref-trans\nOnly enqueue attachRefs if refs are present', ':memo: document changes for classes \nTaking https://github.com/facebook/react/pull/4013#discussion_r31829922 into account', 'Always toLowerCase when comparing nodeName or tagName\nIn xml node name casing is exactly the same as the node was originally named.\nMake sure to convert node and tag names to lower case before making any node\nand tag name checks.\nFixes #3960.', "[#3964] Add note about React's onChange vs. DOM's oninput", 'Update docs to new method of accessing addons', 'Update eslint-related dependencies\n\nbabel-eslint ^3.1.14 fixes babel/babel-eslint#120\nbabel updated from ^5.3.3 to ^3.5.5, which changes stuff, I guess\neslint updated from ^0.21.2 to ^0.22.1, which makes no-shadow also\n  check class declarations\n', 'Warn when accessing .props, .setProps on DOM components', 'Merge pull request #4042 from spicyj/warn-dom-props\nWarn when accessing .props, .setProps on DOM components', 'Merge pull request #4043 from spicyj/80\nRemove line length lint warning', 'Merge pull request #3984 from neojski/uppercase-node-name\nAlways toLowerCase when comparing nodeName or tagName', 'Merge pull request #4054 from jquense/patch-2\nUpdate npm Readme to new method of accessing addons', 'fix my embarrassing amount of typos in this 4 line change', 'Merge pull request #4040 from PiPeep/eslint-updates\nUpdate eslint-related dependencies', 'Merge pull request #4059 from jquense/patch-3\nfix my embarrassing amount of typos in this 4 line change', 'Merge pull request #3884 from glenjamin/patch-3\nDocument boolean attributes in JSX', 'Fix addon name in npm Readme', 'Fix docblock of ReactFragment', 'Merge pull request #4060 from cody/addons\nFix addon name in npm Readme', 'Added warning for mispelling of componentWillReceiveProps and updated tests', 'Merge pull request #4045 from davemeetsworld/add-warning-for-mispelling-of-componentWillReceiveProps\nAdded warning for mispelling of componentWillReceiveProps and updated…', 'fix japanese docs permalinks', ':memo: link to docs and not the blog post', 'Merge pull request #4063 from zpao/fix-ja-docs\nfix japanese docs permalinks', 'Merge pull request #4046 from basarat/patch-2\n:memo: document changes for classes', "Merge pull request #4003 from AnSavvides/on-change-vs-on-input\n[#3964] Add note about React's onChange vs. DOM's oninput", 'optimize className check', 'Fix code of getting-started-ja-JP', 'Merge pull request #4070 from tako-black/fix_md_file\nFix code of getting-started-ja-JP', 'Fix IE8', 'Fixed confusing use of the word/name  in documentation', 'Add xmlns to svg wrap\nCloses #4072.', 'Ignore whitelisted attributes for native custom elements that use the is attribute.', 'Merge pull request #4071 from spicyj/warn-dom-props\nFix IE8', 'Merge pull request #3752 from jhicken/Custom-Element-Support\nIgnore whitelisted attributes for native custom elements.', 'Merge pull request #4077 from neojski/svg-namespace\nAdd xmlns to svg wrap', 'Merge pull request #4074 from jimfb/docs-context-parameter-confusing\nFixed confusing use of the word/name context in documentation', "Remove stray call to ReactDOMTextarea.unmountWrapper\nReactDOMInput has this but ReactDOMTextarea doesn't so we shouldn't try to call it.", 'Merge pull request #4086 from spicyj/ta\nRemove stray call to ReactDOMTextarea.unmountWrapper', 'Fix Class tests\nThese were introduced in #4045 as a result of jest not running properly in CI.\nI also fixed the places where we misspelled "misspelling".', 'Merge pull request #4088 from zpao/fix-class-test\nFix Class tests', 'Use the public render API in ReactDOMComponent-test\nAvoids testing a non-public API. First step towards refactoring more of\nthese internals to not be instances. Also gets rid of an _owner usage.', 'Merge pull request #4090 from sebmarkbage/fixdomcomponentest\nUse the public render API in ReactDOMComponent-test', 'Make setState in render a warning, not an invariant\nWe keep track of the fact that something is rendering for a bunch of\nwarnings. (ReactCurrentOwner.current !== null)\nOnce we get rid of owner for string refs, I\'ll convert those to something\nlike "isRendering" instead. The interesting part is that feature __DEV__\nonly. It is only used for warnings. Except for this case.\nThis means that we can get rid of the special case for the isRendering\nstack on in prod.', 'update code style', 'update code style', '[lint] Ignore generated docs', 'Merge pull request #4058 from yiminghe/className_contains\nfix className check in scryRenderedDOMComponentsWithClass when encounter new line', 'Update jest to latest', 'Merge pull request #4095 from zpao/update-jest\nUpdate jest to latest', 'Inline requires in Gruntfile\nI think this makes it quite a bit easier to understand.', 'Merge pull request #4098 from spicyj/grunt\nInline requires in Gruntfile', 'Fixed grammar in CLA section of contribution guide\ntook out quotation marks from CLA header as per MLA standards', 'Merge pull request #4102 from tomarak/patch-1\nFixed grammar in CLA section of contribution guide', 'Update Korean transltaion to 4c778e2', 'Move isMounted logic into the ReactUpdateQueue\nThis is kind of a confusing place for it but it is intimitely tied to the\nupdate life cycle which is what the update queue is about.\nThis kills some dependencies from isomorphic to the renderer.', 'Merge pull request #4091 from sebmarkbage/updatequeuewarning\nMake setState in render a warning, not an invariant', 'Remove extra period', 'Merge pull request #4112 from kevhuang/doc/readme-grammar\nRemove extra period', '[blog] Deprecate JSTransform & react-tools', 'Reduce hash lookups for DOM properties', 's/parse/parser in jstransform deprecation blog post', 'Add owner to void element children warning', 'Merge pull request #4114 from spicyj/void-warn\nAdd owner to void element children warning', 'Merge pull request #4119 from iamdustan/patch-1\ns/parse/parser in jstransform deprecation blog post', 'Corrected spelling\nReactReconcileTransaction.js', 'Merge pull request #4123 from carterchung/patch-1\nCorrected spelling in ReactReconcileTransaction.js', 'Fix typos in ReactServerRenderingTransaction.js\n\nThere were some more occurrences of typos fixed in\n   https://github.com/facebook/react/pull/4123.\n', 'Merge pull request #4128 from prathamesh-sonpatki/more-typos\nFix typos in ReactServerRenderingTransaction.js', "update script sources to be even with the example file in reactjs/react-tutorial repo ... apply to japanese and korean translation (+2 squashed commit)\nSquashed commit:\n[4564e55] Ensures we don't need to update this page for every release.\n[b0d60f9] update script sources to be even with the example file in reactjs/react-tutorial repo", 'Translate 01-why-react.md to Japanese', 'Merge pull request #4132 from tako-black/translate_why-react_to_japanese\nTranslate 01-why-react.md to Japanese', 'Merge pull request #4103 from marocchino/ko-update\nUpdate Korean transltaion to 4c778e2', 'Build react-dom package', 'Merge pull request #4097 from zpao/react-dom-package\nBuild react-dom package', 'Add support for appear and appear-active classes', 'Merge pull request #4115 from spicyj/dom-hash\nReduce hash lookups for DOM properties', 'Remove _setPropsInternal\nNothing uses this.', 'Merge pull request #4137 from spicyj/setpropsinternal\nRemove _setPropsInternal', "Move ReactErrorUtils out of vendor\nSome other small changes now that it's linted.", 'Add IIFE example to JSX documentation', 'Update 2015-06-12-deprecating-jstransform-and-react-tools.md\nAdd paragraph about parsing JSX after deprecation of esprima-fb.', 'Merge pull request #4105 from sebmarkbage/moveismounted\nMove isMounted logic into the ReactUpdateQueue', 'Merge pull request #4145 from RReverser/patch-1\nUpdate 2015-06-12-deprecating-jstransform-and-react-tools.md', 'npm script to run lint only on changed files', 'Merge pull request #4142 from zpao/lint-changed\nnpm script to run lint only on changed files', 'Merge pull request #4121 from cristovaov/tutorial-doc/script-src\nupdate script sources to be even with the example file ...', 'Wrap calls to deprecated functions with a warning.', "Invert logic in findAllInRenderedTreeInternal\nWith DOM components we won't be able to go from public instance to internal instance reliably, so do the traversal on internal instances.", "Disallow passing a DOM component to findAllInRenderedTree\nWe won't be able to support this after DOM-components-as-refs but we don't expect many people to be passing DOM components to this function anyway, and it should be fairly straightforward for people to clean up failing unit tests using this function.", "Disallow passing a DOM component to reactComponentExpect\nWe won't be able to support this after DOM-components-as-refs but we don't expect many people to be passing DOM components to this function anyway, and it should be fairly straightforward for people to clean up failing unit tests using this function.\n(This module also isn't public API and never has been.)", 'Merge pull request #4151 from spicyj/fairti\nDisallow passing a DOM component to findAllInRenderedTree', 'Merge pull request #4152 from spicyj/rce\nDisallow passing a DOM component to reactComponentExpect', 'Fix link of getting-started.ja-JP.md', 'Rewrite SVG initialization in getMarkupWrap', 'Update getMarkupWrap with list of SVG supported in ReactDOM', 'Support SVG image', 'Merge pull request #4140 from zpao/mv-errorutils\nMove ReactErrorUtils out of vendor', 'Merge pull request #4100 from zpao/deprecate-react-calls\nDeprecate non-isomorphic react methods in npm module', 'Merge pull request #4157 from zpao/svg-image\nSupport SVG image, other related cleanup', 'Merge pull request #4156 from tako-black/fix_link\nFix link of getting-started.ja-JP.md', 'Move npm packages into folder', 'Improve error message when mounting non-string/function elements', 'Merge pull request #4158 from zpao/mv-packages\nMove npm packages into folder', 'Merge pull request #2981 from hzoo/jsdoc-fixes', 'Merge pull request #4154 from spicyj/gh-3478\nImprove error message when mounting non-string/function elements', 'Inject the update queue into classes\nThis decouples the stateful imperative API from the class creation.\nInstead, they get injected into the class from the renderer. Stateful\nmodules should always be injected.\nAs a convenience, just like props/context/refs, we set it up after\nconstruction using mutation. That way it is optional to pass it along\nthe super call constructor chain.', 'Fix exceptions when running grunt test --debug', 'Move current owner to isomorphic\nThis should only be used for tracking string refs. For that purpose, we\nneed a single central stateful module that is coupled to createElement.\nWhich is why it needs to live in isomorphic.\nEventually this will go away completely.', "Remove an unnecessary warning\nIt was impossible to get here because if you enqueue something\nAlso ensure that they're only used in DEV because we will be reading\nstate that is DEV only here.", 'Remove currentlyUnmountingComponent\nThis was used for any invariant that was subsequently removed. It turns\nout that this is completely unnecessary now. Any setState calls will\nenqueue and update and the component added to the update queue. However,\nsince the pending fields are reset after componentWillUnmount, any update\nwill still be ignored.', "Use a custom batching strategy for server rendering\nThis simply ignores any enqueued actions. This means that we don't have to have special logic for componentWillMount. It is just that those updates are never enqueued.", "Let updates be enqueued during render\nThis allows updates to be enqueued during render. setState in\ncomponentWillMount will still be collected as part of the first pass so\nif nothing else get added as pending, they won't trigger a second rerender.\nThis allow us to get rid of one more stateful special case.", 'Allow callbacks to be enqueued during componentWillMount\nSince I fixed the server-side rendering it is now possible to trigger these\ncallbacks on the client alone. They will still be queued up on the server\nbut they are never executed.', 'Use hack to support isMounted without stateful module\nThis hack allow us to get rid of the stateful module ReactLifeCycle since\nwe can infer the value of isMounted even without it. This gets rid of\nthe try/catch which is deopting all mountComponent calls.\nAs a next step we could deprecate isMounted completely and avoid stateful\nAPIs. Since it can be easily simulated if you truly need it.', 'Lint fixes', 'Freeze ReactElement.props in dev mode', 'Unit tests for unmounted setState and isMounted', 'Merge pull request #4171 from sebmarkbage/simplifylifecycle\nSimplified Life Cycles', 'Guard against a null node\nThis could fix #2619', 'Merge pull request #4172 from jimfb/freeze-props\nFreeze ReactElement.props in dev mode', 'Merge pull request #4170 from johanneslumpe/patch-1\nGuard against a null node', 'Fix typo in blog post\n(#4183)', 'Move renderSubtreeIntoContainer into ReactDOMClient', 'Build standalone react-addons packages', 'Don\'t try building a %s module.\nReact\'s build tools are reading the require("react") and react("%s") inside the warning string and thinking they are actual requires.', 'Add a comment about why the string is split up. For future readers of this file.', 'Show warning when componentDidUnmount is defined\nFixes #4194', 'Merge pull request #4164 from spicyj/jest-wc\nFix exceptions when running grunt test --debug', "Merge pull request #4190 from dantman/fix-%s-module\nDon't try building a %s module.", 'Update warn message and move it to the error-catching block', 'Merge pull request #4196 from oluckyman/componentDidUnmount-warning\nShow warning when componentDidUnmount is defined', 'Wrap all top-level components for consistency', 'DOM components as refs\nStill missing: .props/.getDOMNode warnings.', 'Add legacy methods to DOM components for compatibility', "Remove constructAndRenderComponent\nThese were never part of the public API and shouldn't have been part of the React object. Now they're not.", 'Merge pull request #4084 from spicyj/carc\nRemove constructAndRenderComponent', 'Merge pull request #4139 from spicyj/dom-refs\nDOM components as refs', 'Allow deeper trees\nNo reason to limit at 100. I can\'t imagine a reasonable tree with depth over 10,000 but that should still be small enough to "catch infinite loops" quickly.', 'Prevent creating invalid closing tags\nfixes #2756', 'Merge pull request #4188 from jisaacks/master\nGenerate reasonable markup even if tags have unexpected case.', 'Translate 02-displaying-data.md to Japanese', 'Fix docs typo: "overridden" -> "overwritten"\nI think this was meant to say "overwritten", since "the statement overwrites the data" makes more sense than "the statement overrides the data".', 'fix change event type', 'Add site title to first code snippet of getting started', 'optimize spec', 'Merge pull request #4207 from yangshun/patch-1\nAdd site title to first code snippet of getting started', 'Check for warning when testing to see if error is thrown when render not defined', 'Allow iterables to pass node prop type check', 'Merge pull request #4202 from tako-black/translate_displaying-data_to_japanese\nTranslate 02-displaying-data.md to Japanese', 'Merge pull request #4206 from yiminghe/fix_change_type\nSet change event type in SyntheticEvent', 'Merge pull request #4208 from battaile/master\nMinor cleanup of ReactES6Class-test output by expecting the warning', 'check entry type iterables\ncheck that the value is a node for map iterables', 'Set this.props on elements in prod mode\nOops. Introduced in https://github.com/facebook/react/pull/4172.', 'Merge pull request #4200 from spicyj/ten-thousand\nAllow deeper trees', 'Merge pull request #4215 from spicyj/prod-props\nSet this.props on elements in prod mode', 'Fix travis artifact upload\nChanges:\n - moves after_script to script\n - adds set -e\n - creates a seperate matrix \'build\'\nWay at the bottom of the travis output:\n1571: curl: (26) couldn\'t open file "build/react.tgz"\nThis seems to be broken since 12c9fee94ed97dee1ae0dad701c03d4fc14ca0a7', 'Merge pull request #4217 from brigand/patch-5\nFix travis after_script', "Drop react-codemod.tgz from travis build\nThis didn't work anyway. See #4217.", 'Remove warnings in tests\nFor #3890.\nSquashed merge, closes #3925.', 'Translate 02.1-jsx-in-depth.ja-JP.md to Japanese', 'Merge pull request #4222 from tako-black/translate_jsx-in-depth_to_japanese\nTranslate 02.1-jsx-in-depth.ja-JP.md to Japanese', 'Merge pull request #4204 from dpercy/patch-1\nFix docs typo: "overridden" -> "overwritten"', "Don't bail out of reconsiliation if context changes.", 'Translate 02.2-jsx-spread.md to Japanese', 'update git ignore', 'click conter example', 'use react from bild', 'rename folder', 'update click message', 'add new line at and of some files', 'Update script source (c227a39)', 'Add site title to first code snippet of getting started (bd9d4b2)', 'Merge pull request #4232 from marocchino/update-docs\nUpdate translated docs', 'More conservative dependency update.', 'R: handleClick function', "Change 'Javascript' to 'JavaScript'", "Merge pull request #4239 from tako-black/change_word_to_uppercase\nChange 'Javascript' to 'JavaScript'", 'Translate 02.3-jsx-gotchas.md to Japanese', 'Merge pull request #4240 from tako-black/translate_jsx-gotchas_to_japanese\nTranslate 02.3-jsx-gotchas.md to Japanese', 'Stop building react-source gem\nfixes #4069', 'Translate 03-interactivity-and-dynamic-uis.md to Japanese', 'Merge pull request #4242 from tako-black/translate_interactivity-and-dynamic-uis_to_japanese\nTranslate 03-interactivity-and-dynamic-uis.md to Japanese', 'Merge pull request #4229 from tako-black/translate_jsx-spread_to_japanese\nTranslate 02.2-jsx-spread.md to Japanese', 'Translate 04-multiple-components.md to Japanese', 'Merge pull request #4249 from tako-black/translate_multiple-components_to_japanese\nTranslate 04-multiple-components.md to Japanese', 'Fail tests on any un-spied warnings\nFixes #3890.', 'Merge pull request #4223 from spicyj/check-no-warn\nFail tests on any un-spied warnings', 'Update React Link\nSaves a redirect from occurring.', 'Merge pull request #4252 from bhamodi/patch-2\nUpdate url to save a redirect', 'lowercase index file', 'used JSX', 'update title', 'Typo fix', 'Merge pull request #4258 from mjomble/patch-1\nTypo fix', 'Merge pull request #4162 from sebmarkbage/updator\nInject the update queue into classes', 'Removed redundant word', 'Add IE-only security attr to HTMLDOMPropertyConfig\nSee https://msdn.microsoft.com/en-us/library/ms534622(v=vs.85).aspx for an in-depth specification.\nThis fixes #4169.', 'Translate 05-reusable-components.md to Japanese', 'Merge pull request #4266 from tako-black/translate_reusable-components_to_japanese\nTranslate 05-reusable-components.md to Japanese', 'Merge pull request #4262 from coryhouse/patch-1\nRemoved redundant word', 'Merge pull request #4231 from DarkScorpion/clickCounter\nClick counter example', 'Merge pull request #4259 from janraasch/patch-1\nAdd IE-only security attr to HTMLDOMPropertyConfig', 'Merge pull request #4238 from bhamodi/bhamodi/update-dependency-notation\nMore conservative dependency update.', 'Removed setProps and replaceProps (both previously deprecated)', 'Make events propagate through shadow DOMs.', 'Merge pull request #4150 from jimfb/event-path\nMake events propagate through shadow DOMs.', 'Merge pull request #4221 from jimfb/ryans-context-bug\nupdateComponent should update the context iff it has changed', 'Merge pull request #4268 from jimfb/remove-setprops\nRemoved setProps and replaceProps (both previously deprecated)', 'Fixed header comment spacing.\nFixed header comment spacing in the header for ReactComponentWithPureRenderMixin.', 'Merge pull request #4270 from kamronbatman/patch-1\nFixed header comment spacing in ReactComponentWithPureRenderMixin.', 'Merge pull request #4184 from zpao/move-from-addons\nMove renderSubtreeIntoContainer into ReactDOMClient', 'Fix jest tests', "Merge commit 'pr/4185'\nCloses #4185.", 'Finish addons packaging\n\nAdd missing object-assign dependency\nAdd batchedUpdates to ReactDOMClient, rename the two addons to unstable_\nDelete react/addons/* (leaving react/addons with a slightly updated warning)\nAdd README.md, LICENSE, PATENTS to each addons package\n', 'Merge pull request #4273 from spicyj/addons\nFinish addons packaging', 'Translate 06-transferring-props.md to Japanese', 'Merge pull request #4276 from tako-black/translate_transferring-props_to_japanese\nTranslate 06-transferring-props.md to Japanese', 'Revert "Removed setProps and replaceProps (both previously deprecated)"\nThis reverts commit 721fe7354142c866db2ebcc727a2472a3f3e0cc6. We\'ll keep these with a warning for one more release.', 'Removed most uses of setProps in unit tests\nPicked from 721fe7354142c866db2ebcc727a2472a3f3e0cc6.', 'Add setProps/replaceProps warning', 'Bump version to beta1', 'beta1 blog post\nCloses #4275.', 'Add missing semicolon', 'Add inputMode to HTML DOM Property Whitelist', 'Merge pull request #3798 from levibuzolic/attribute-inputmode\nAdd inputMode to allowed HTML DOM properties', 'Rename react-addons-updates to react-addons-update', 'Merge pull request #4278 from koba04/fix-addons-update-package\nFix a library path for react-addons-updates', 'Fix react-addons-update package name', 'Remove unnecessary semicolon;\nFor the God of css', 'add IntelliJ IDEA project related ignores', 'semicolon cleanup\nOne unnecessary semicolon removed and few missing added.', 'Fix typos\nJust s/Javascript/Javascript/g and punctuation changes.', 'Merge pull request #4289 from joshuago/patch-1\nFix typos', 'Merge pull request #4284 from Simek/patch-3\nadd IntelliJ IDEA project related ignores', 'Merge pull request #4283 from Yeti-or/patch-1\nRemove unnecessary semicolon;', 'Suggest open index.html in browser regularly.', "indicate file name requried for static file\nthe text doesn't say explicitly to call your file comments.json, nor to put it in the public directory.", "Update 2015-07-03-react-v0.14-beta-1.md\nHighlight all packages names so that they're easier to read /cc @spicyj", 'Merge pull request #4287 from Simek/semicolon-cleanup\nsemicolon cleanup', 'Merge pull request #4292 from dariocravero/patch-1\nUpdate 2015-07-03-react-v0.14-beta-1.md', 'Merge pull request #4209 from aruberto/iterable_node_proptype\nAllow iterables to pass node prop type check', 'Enclose a value of variable in back quote', 'Translate 07-forms.md to Japanese', 'Merge pull request #4300 from tako-black/translate_forms_to_japanese\nTranslate 07-forms.md to Japanese', 'Merge pull request #4299 from tako-black/enclose_a_value_in_back_quote\nEnclose a value of variable in back quote', 'Clarify React.render note in documentation', 'Blog: move "refs to custom components..." fixes #4305\nJust to prevent the TL;DR confusion. Separate paragraph and moved up above the code block. s/References/Refs for consistency.', 'Merge pull request #4290 from rwoodnz/patch-1\nSuggest open index.html in browser regularly.', 'Add backticks to highlight comment.json file name', 'Enclose a value of variable in back quote', 'Merge pull request #4310 from tako-black/enclose_a_value_of_variable_in_back_quote\nEnclose a value of variable in back quote', 'Fix event target for input change events.  Fixes #4288', 'Translate 08-working-with-the-browser.md to Japanese', 'Merge pull request #4312 from tako-black/translate_working-with-the-browser_to_japanese\nTranslate 08-working-with-the-browser.md to Japanese', 'Fix typo on line 91 of tutorial.md', 'Merge pull request #4314 from devonharvey/patch-1\nFix typo on line 91 of tutorial.md', 'Concatenate warning message, due to parsing issues\nThe addons module warning is currently causing issues with babel/JSPM due to the warning message getting parsed as a require statement. Adding a break using string concatenation appears to prevent any issues.\nExample error using JSPM:\nError loading "react-addons-{addon}" from...', 'Add comment to explain string concatenation', 'respect NODE_ENV environment variable if set when building', 'Merge pull request #4309 from mmoss/addons-warning-fix\nConcatenate warning message, due to parsing issues', 'Merge pull request #4318 from jlongster/master\nrespect NODE_ENV environment variable if set when building', 'Handle escaping when comparing server/client markup', 'Enclose a name of function in back quote', 'Merge pull request #4319 from tako-black/enclose_a_name_of_function_in_back_quote\nEnclose a name of function in back quote', 'Translate 08.1-more-about-refs.md to Japanese', 'Add runtime deprecation warning for cloneWithProps', 'Merge pull request #4317 from koba04/add-deprecation-warning-for-clonewithprops\nAdd runtime deprecation warning for cloneWithProps', 'Merge pull request #4320 from tako-black/translate_more-about-refs_to_japanese\nTranslate 08.1-more-about-refs.md to Japanese', 'Properly handle rendering into document when comparing markup', 'Fix some lint', 'Fix checksum hash attribute insertion for self-closing root tags.  Fixes #4323', 'Merge pull request #4325 from jimfb/self-closing-checksum\nFix checksum hash attribute insertion for self-closing root tags.  Fixes #4323', 'Add unit test: should generate simple markup for attribute with > symbol', 'Use a test case that demonstrates the fix.', 'Merge pull request #4311 from jimfb/fix-input-events\nFix event target for input change events.  Fixes #4288', 'Merge pull request #4327 from jimfb/markup-unit-test\nAdd unit test: should generate simple markup for attribute with > symbol', 'Reset module cache between tests\nThis ensures that module caches for warnings is reset between runs. This makes\nit so the deprecations warnings always fire.', 'Merge pull request #4329 from zpao/fix-jest\nReset module cache between tests', 'Use jest for eslint-rules', 'Only perform expensive checks in DEV, clean up after inserted iframe', "Run eslint tests with jest\nTurns out eslint-tester works with jest (!)\nWe take advantage of this internally at FB, so we'll do it here too.\nFixes #4328", 'Merge pull request #4332 from bgw/eslint-tests-use-jest\nRun eslint tests with jest', 'Merge pull request #4330 from zpao/eslint-jest\nUse jest for eslint-rules', 'Add meta tag in the header of HTML', 'Change number of html{} to highlight correct line', 'Merge pull request #4334 from tako-black/add_meta_tag_in_the_header_of_html\nAdd meta tag in the header of HTML in translated documentation.', 'ID not Id', 'Translate 09.tooling-integration.md to Japanese', 'Merge pull request #4336 from zpao/ID-not-Id\nID not Id', 's/currentPathElemenID/currentPathElementID', 'Merge pull request #4337 from tako-black/translate_tooling-integration_to_japanese\nTranslate 09.tooling-integration.md to Japanese', 'Merge pull request #4338 from dcousens/patch-1\ns/currentPathElemenID/currentPathElementID', 'Remove the unexpected character in ReactEventListener', 'Merge pull request #4342 from laiso/unexpected_character\nRemove the unexpected character in ReactEventListener', 'Merge pull request #4324 from drd/improve-warning-in-react-mount\nImprove warning in react mount', 'fix typo', 'Merge pull request #4346 from makky3939/fix_typo_09-tooling-integration_ja-JP_md\nfix typo 09-tooling-integration.ja-JP.md', 'remove controll character from 02-displaying-data.ja-JP.md', 'remove type="text/javascript"', 'Translate 10-addons.md to Japanese', 'Merge pull request #4348 from himkt/master\nremove controll character from 02-displaying-data.ja-JP.md', 'Merge pull request #4351 from tako-black/translate_addons_to_japanese\nTranslate 10-addons.md to Japanese', 'Merge pull request #4349 from makky3939/remove_type_attribute_in_script_tag\nRemove type attribute in script tag', 'change http-equiv with charset', 'fix typo', 'remove controll character from 07-forms.ja-JP.md, 10-addons.ja-JP.md and 10-addons.ja-JP.md', 'Merge pull request #4358 from makky3939/remove_controll_character_from_jp_docs\nRemove controll character from jp.md', 'Merge pull request #4356 from makky3939/fix_03-interactivity-and-dynamic-uis_ja-JP_md\nUpdate 03-interactivity-and-dynamic-uis.ja-JP.md', 'Translate 04-self-closing-tag.md to Japanese', 'Merge pull request #4362 from makky3939/translate_04_self_closing_tag\nTranslate 4-self-closing-tag.md to Japanese', 'Change css to uppecase', 'Merge pull request #4363 from tako-black/change_css_to_uppercase\nChange css to uppercase', 'Merge pull request #4355 from makky3939/use_html5_meta_charset_tag\nUse html5 meta charset tag', 'Add warning for protocol sandboxing near pain point in Getting Started', 'Merge pull request #4357 from yangmillstheory/docfix\nWarn against JSX transform failure for non-HTTP-served JSX', 'Merge pull request #4291 from rwoodnz/patch-2\nindicate file name requried for static file', 'Merge pull request #4144 from lukehorvat/docs/iife-jsx\nAdd IIFE example to JSX documentation', "Don't skip reconcilation if context differs", 'traverseAllChildren code clarity', 'Add wrap attribute', 'Merge pull request #4237 from jas14/issue-4226\nAllow wrap attribute in textarea', 'Translate 10.1-animation.md to Japanese', 'Merge pull request #4371 from tako-black/translate_animation_to_japanese\nTranslate 10.1-animation.md to Japanese', 'Delete unnecessary control code.', 'Merge pull request #4377 from sugarshin/typo_docs\nDelete unnecessary control code.', "Add more information about defaultValue\nI came across an issue on a React project where I needed to programatically set the default value of an input as the result of an async call.  (I was prepopulating a zip code field from the Google Maps Geocoding API).  It didn't work when I passed in an updated defaultValue prop, until I came across this StackOverflow: http://stackoverflow.com/questions/30146105/react-input-defaultvalue-doesnt-update-with-state.  I was able to get it to do what I wanted by passing in the value prop instead.", 'Translate 10.2-form-input-binding-sugar.md to Japanese', 'Enclose a name of library in back quote', 'Use more specific ignore pattern for jest\nTravisCI clones into /home/travis/build/facebook/react, which /build/ matches so we never ran any of our tests.', 'Merge pull request #4384 from zpao/jest-on-travis-again\nUse more specific ignore pattern for jest', 'Merge pull request #4383 from tako-black/translate_form-input-binding-sugar_to_japanese\nTranslate 10.2-form-input-binding-sugar.md to Japanese', 'Merge pull request #4382 from tako-black/enclose_a_name_of_library_in_back_quote\nEnclose a name of library in back quote', '[#4369] Make getting started a little less confusing', 'Remove AnalyticsEventPlugin\nWe only ever had a couple internal users of this, and now we have none. Removing it from the repo for cleanliness.', 'Merge pull request #4306 from brigand/patch-5\nBlog: move "refs to custom components..." fixes #4305', 'Review changes\nFixing spelling errors and revising based on feedback.', 'split code block for readability', 'Translate 10.3-class-name-manipulation.md to Japanese', 'Merge pull request #3186 from benekastah/patch-1\nModify sample CSS so that it works in Safari', 'Merge pull request #4409 from tako-black/translate_class-name-manipulation_to_japanese\nTranslate 10.3-class-name-manipulation.md to Japanese', 'Merge pull request #4407 from Simek/patch-4\nsplit code block for readability', 'Merge pull request #4379 from eriklharper/patch-1\nAdd more information about defaultValue', 'Switch to using comma-dangle: always-multiline', 'Tweaks to new content in forms documentation', 'Remove in-browser unit testing\nRely on jest for now until we get a better and less hacky solution to running tests in the browser, probably a totally different test suite with different behavior/goals.', 'Merge pull request #4393 from zpao/rm-browser-tests\nRemove in-browser unit testing', 'Merge pull request #4413 from zpao/more-default-value-docs-chagnes\nTweaks to new content in forms documentation', 'Merge pull request #4412 from hawsome/patch-2\nSwitch to using comma-dangle: always-multiline', 'Enable linting in src/tests, cleanup', 'Merge pull request #4414 from zpao/lint-src-test\nEnable linting in src/tests, cleanup', 'Fixed basic-jsx example, which got clobbered during a prior bug investigation', 'invert few if-else with negation for readability', 'Merge pull request #4419 from Simek/invert-if-else-with-negation\ninvert few if-else with negation for better readability', 'Removed flattened children object for initial render.  Fixes #4405', 'Merge pull request #4408 from jimfb/remove-children-map\nRemoved flattened children object.  Fixes #4405', "Make component api docs clearer\nI'm proposing these changes because I found some repetition / lack of\nclarity and some language that suggested that you could mutate\nthis.state directly.", 'Merge pull request #4387 from spicyj/aep\nRemove AnalyticsEventPlugin', 'add animationIterationCount in isUnitlessNumber', 'counterexample -> antipattern', 'Upgrade eslint\nFixes #4428.', 'Merge pull request #4432 from spicyj/eslint-upg\nUpgrade eslint', 'Fix typo in removeComponentAsRefFrom error message.', 'Merge pull request #4435 from rtfeldman/fix-error-message\nFix typo in removeComponentAsRefFrom error message', 'Merge pull request #4092 from mking/remove-react-source-gem\nStop building react-source gem', "Fix switching between dangerouslySetInnerHTML and children\nWith this, ReactMultiChild handles all of the children-related operations for ReactDOMComponent so that we don't process operations out of order. This is necessary because ReactMultiChild does its own batching so there's no way without its cooperation to get the timing right here.\nIdeally we'll factor this logic out a bit better in subsequent updates but this is the simplest way to fix #1232 which has embarrassingly been open for over a year.", 'Merge pull request #4427 from spicyj/gh-1232\nFix switching between dangerouslySetInnerHTML and children', 'Improved performance for our adler32 implementation', 'Merge pull request #4400 from jimfb/adler32\nImproved performance for our adler32 implementation.', 'Translate 10.4test-utils.md to Japanese', 'Add period', 'Merge pull request #4444 from tako-black/Add_period\nAdd period', 'Merge pull request #4443 from tako-black/translate_test-utils_to_japanese\nTranslate 10.4test-utils.md to Japanese', 'Merge pull request #4404 from jbonta/component_api_docs\nMake component api docs clearer', 'Pull out tag end regex\nFor perf -- avoids allocating another object.', 'Merge pull request #4447 from spicyj/tag-end\nPull out tag end regex', 'Lock babel @ 5.6.x.\n5.7 and 5.8 are having big issues with linting', 'improve ReactTestUtils.Simulate documentation', 'Merge pull request #4449 from zpao/lock-babel\nLock babel @ 5.6.x.', 'Update Korean translation to e928c65', 'Merge pull request #4455 from marocchino/update-korean\nUpdate Korean translation to e928c65', 'Upgrade babel, babel-eslint; remove babel-core dep', 'Rename ReactDOMClient to ReactDOM\nThis closer matches the npm package name and (I assume) is what we want to call it internally.', 'Translate 10.5-clone-with-props.md to Japanese', 'Enclose variables in back quote', 'Merge pull request #4459 from tako-black/translate_clone-with-props_to_japanese\nTranslate 10.5-clone-with-props.md to Japanese', 'Merge pull request #4460 from tako-black/enclose_variables_in_back_quote\nEnclose variables in back quote', 'Use old event propagation if path is not reasonable (eg. detached DOM).  Fixes #4452', 'Merge pull request #4456 from zpao/babel58\nUpgrade babel, babel-eslint; remove babel-core dep', 'remove markdown remnant & unnecessary whitespace', 'Docs: Fix jsx iife example', 'Merge pull request #4471 from Yeti-or/yeti-or.fix-docs\nDocs: Fix jsx iife example', 'Translate 10.6-create-fragment.md to Japanese', 'Merge pull request #4472 from tako-black/translate_create-fragment_to_japanese\nTranslate 10.6-create-fragment.md to Japanese', 'Merge pull request #4466 from jimfb/path-events-in-detached-nodes\nUse old event propagation if path is not reasonable (eg. detached DOM).  Fixes #4452', 'Merge pull request #4453 from spicyj/react-dom\nRename ReactDOMClient to ReactDOM', 'Lock typescript dep at 1.4', 'Merge pull request #4474 from zpao/ts14\nLock typescript dep at 1.4', 'Merge pull request #4395 from wibud/v0.0.1\nadd animationIterationCount in isUnitlessNumber', 'Merge pull request #4386 from AnSavvides/4369-walkthrough-clarification\n[#4369] Make getting started a little less confusing', 'Merge pull request #4367 from Simek/traverse-children-cleanup\ntraverseAllChildren code clarity', "Use fbjs package from npm, gulp\nThis reworks a few things in building and distributing React. The biggest change is using fbjs to share dependencies with other libraries. We're also using Gulp for some build steps.", 'Replace grunt-jest with our own runner\nThis gives us more control', "Enable (and apply) global transforms with browserify\nThis ensures that we can consume code from npm that has our process.env pattern. Unfortunately we'll run the same transform on minified builds but it's pretty quick.", 'Allow classes created with React.createClass to opt out of autobinding', 'Translate 10.7-update.md to Japanese', 'Merge pull request #4478 from tako-black/translate_update_to_japanese\nTranslate 10.7-update.md to Japanese', 'Merge pull request #4167 from zpao/vendor2fbjs\nMove vendor to fbjs package', 'add tests for React.addons.TestUtils.Simulate.change', 'Fix gulp', 'Update Korean translation to 991c437', 'Merge pull request #4483 from marocchino/update-korean\nUpdate Korean translation to 991c437', 'Fix grammar', 'Merge pull request #4486 from yangmillstheory/docfix\nFix grammar', 'ensure tags are upperCase before comparing. #4388', 'remove footnote reference asterisk, no longer needed', 'Translate 10.8-pure-render-mixin.md to Japanese', 'Merge pull request #4495 from tako-black/translate_pure-render-mixin_to_japanese\nTranslate 10.8-pure-render-mixin.md to Japanese', 'Merge pull request #4469 from KevinTCoughlin/kevintcoughlin/#4265\nFixes #4265 - Clarify React.render note in documentation', 'Update fbjs dependency\n\nremove a file that got moved over there\nupdate for renamed babel transform\n', 'Merge pull request #4499 from zpao/update-fbjs\nUpdate fbjs dependency', 'Build perf and test-utils addon npm packages', 'Cleaned up a few names in the reconciler.', 'Merge pull request #4422 from jimfb/reconciler-cleanup\nCleaned up a few names in the reconciler.', 'Removed npm run jest script.  Users can use npm test instead.', 'Merge pull request #4503 from jimfb/remove-npm-run-jest\nRemoved npm run jest script.  Users can use npm test instead.', 'Translate 10.9-perf.md to Japanese', 'Merge pull request #4506 from tako-black/translate_perf_to_japanese\nTranslate 10.9-perf.md to Japanese', 'Note that npm >= 2.0.0 is required for building', 'Explicitly call out code of conduct in CONTRIBUTING', 'Merge pull request #2664 from jasonwebster/patch-1\nAdd additional supported methods to event documentation', 'Merge pull request #3742 from mminer/order-css-vendor-prefixes\nTreat boxOrdinalGroup and flexOrder as unitless', 'Merge pull request #3761 from alexpien/CustomClassesForReactCSSTransitionGroup\nCustom class names in ReactCSSTransitionGroup', 'Fix a couple lint issues as a followup for #3761', 'Merge pull request #4493 from dmatteo/scryRenderedDOMComponents.bug\nensure tags are upperCase before comparing. #4388', 'Fixed global events (like enter/leave events) when event has path.', 'Merge pull request #4512 from zpao/codeofconduct\nExplicitly call out code of conduct in CONTRIBUTING', 'Merge pull request #4513 from jimfb/fix-global-events\nFixed global events (like enter/leave events) when event has path.', 'Add MediaEvent Handlers for Video/Audio components', 'Merge pull request #4370 from blainekasten/video-events\nAdd Video/Audio Media Events', "Move react-tools from root.\nReactTools is deprecated, it doesn't belong at the root of the project. We'll remove it after 0.14 but for now this moves it so that it's contained and not intermixed with the rest of the project. The currect behavior of copying src/ into the package is maintained.", 'Remove react-tools completely', 'Merge pull request #4010 from zpao/really-deprecate-react-tools\nRemove react-tools', 'Merge pull request #4501 from zpao/build-more-addons\nBuild perf and test-utils addon npm packages', 'Update fbjs dependency', '0.14.0-beta2', "Update 02.1-jsx-in-depth.md\n'setup' is a noun, not a verb", 'Merge pull request #4537 from afhole/patch-1\nUpdate 02.1-jsx-in-depth.md', 'Simplify react-codemod.', 'Merge pull request #4528 from cpojer/codemod-updates\nSimplify react-codemod.', 'removed dangling comma that messes up loading in IE8', 'Listen to encrypted event, not onencrypted', 'Merge pull request #4539 from zpao/fix-encrypted-media-event\nListen to encrypted event, not onencrypted', 'Update Korean translation to e88c7bf', 'added suggested comment to get file to pass es-lint', 'Merge pull request #4541 from marocchino/update-korean\nUpdate Korean translation to e88c7bf', 'Update addons.js', 'remove two ideas from why react to add clarity', 'Merge pull request #4381 from mikrofusion/clarify-main-ideas\nclarify the two main ideas behind react.', 'Merge pull request #4545 from salzhrani/patch-2\nUpdate addons.js', '0.14.0-beta3', 'Add blog post about the new devtools beta', 'Merge pull request #4473 from facebook/devtools-blog-post\n[docs] Add blog post about the new devtools beta', 'Include Haskell language', 'Merge pull request #4552 from psibi/patch-1\nInclude Haskell language', 'Added events documentation for  elements', 'Use onSelect fallback in IE\nIn response to https://github.com/facebook/react/issues/2722. Use the Firefox selection change fallback for IE.', 'Remove fasttest task. fasttest is not fast', 'Merge pull request #4565 from koba04/remove-fasttest\nRemove fasttest task. fasttest is not fast', 'Fix lint', 'Merge pull request #4559 from salier/ie-selection\nUse onSelect fallback in IE', 'Set the owner during traverseAllChildren\nThis is basically just adding some context to the warning in ReactFragment\nso that we can more easily find the callers.', 'Merge pull request #4569 from sebmarkbage/ownersforcontext\nSet the owner during traverseAllChildren', 'Add stop-opacity to unitless style properties', 'Revert change to docs/js/reactj.js', 'Merge pull request #4577 from marjan-georgiev/add-stopOpacity-to-unitless-props\nAdd stop-opacity to unitless style properties', 'Only set the owner during flattening\nThis used to do the update as well, which could have side-effects that\nrely on owner being null.', 'Merge pull request #4579 from sebmarkbage/ownersforcontext\nOnly set the owner during flattening', 'Fix missing change event target in old IE\nEvents have .srcElement in old IE, not .target.\nFixes #4578.', 'Merge pull request #4580 from spicyj/gh-4578\nFix missing change event target in old IE', "Update 2015-05-01-graphql-introduction.md\nOr the alternative:\nREST is an acronym for Representational State Transfer, which is an architectural style rather than a formal protocol.\nSorry , I'am not a native speaker:)", 'Merge pull request #4554 from chernysh/chernysh-added-docs-img-events\nAdded documentation for  events', "reactComponentExpect fails silently\nreactComponentExpect fails silently when passed an undefined  value. It calls ReactTestUtils.isCompositeComponent with the undefined value, in which a render property is accessed, throwing a prop on undefined not found error which isn't surfaced to jest.\nTypeError: Cannot read property 'render' of undefined\n        at Object.ReactTestUtils.isCompositeComponent (./react/test/ReactTestUtils.js:127:23)\n        at new reactComponentExpect (./react/test/reactComponentExpect.js:46:20)\n        at reactComponentExpect (./react/test/reactComponentExpect.js:40:12)\nExpecting the passed-in instance to not be undefined surfaces this issue in the test runner.", "Disable event.path handling\nLooks like #4558 isn't ready yet and we'd like an interim fix.", 'Merge pull request #4585 from spicyj/disable-path\nDisable event.path handling', "Deduplicate logic in ReactElementValidator\nShouldn't be much change. Notably, this calls .getName() instead of trying to derive it manually, which is more consistent.", "Minimal implementation of stateless components\nStateless pure-function components give us more opportunity to make performance optimizations. For now, we'll do a minimal implementation which has similar performance characteristics to other components in the interests of shipping 0.14 and allowing people to begin writing code using this pattern; in the future we can refactor to allocate less and avoid other unnecessary work.", 'Merge pull request #4581 from Youmoo/patch-1\nUpdate 2015-05-01-graphql-introduction.md', 'Add property key names + type of value to fragment warning\nThis provides useful context in the logs to help us filter out things like\n{__html:...}.', 'Merge pull request #4588 from sebmarkbage/ownersforcontext\nAdd property key names + type of value to fragment warning', 'Fixed consistency of behavior boolean properties', 'Merge pull request #4584 from jessebeach/jessebeach-reactComponentExpect-silent-fail\nreactComponentExpect fails silently', 'adding __self and __source special props', 'Clean up files before automated codemod', "Apply codemod for React -> ReactDOM split\nRan the codemod automatically then ran\ncodemod.py -m -d src '(var React\\b[^\\n]*;)\\n\\n(var ReactDOM)' '\\1\\n\\2'\nto clean up spacing of requires.", 'Merge pull request #4597 from spicyj/coco\nApply codemod for React -> ReactDOM split', 'Merge pull request #4596 from jaredly/add-source-self\nadding __self and __source special props', 'Upgrade ESLint, fix code', 'Merge pull request #4587 from spicyj/stateless-fn\nMinimal implementation of stateless components', 'Merge pull request #4598 from zpao/eslint-1.1\nUpgrade ESLint, fix code', 'Change tutorial.ja-JP.md to use marked', 'Merge pull request #4602 from tako-black/update_tutorial_ja-JP\nChange tutorial.ja-JP.md to use marked', "Merge pull request #4344 from jimfb/update-children-because-context\nDon't skip reconcilation if context differs", "Move guards from auto binding to event dispatch\nThis wraps a proper guard around event dispatching so that errors doesn't\ninterupt other event callbacks.\nInstead we rethrow the first error after all callbacks have been invoked.\nFor DEV mode we use native event dispatching if available. This has the\nbenefit that caught exceptions show up in the dev tools even without caught\nexceptions being turned on. Yet, all callbacks are guaranteed to fire.", 'Simplify event dispatching\nThis simplifies event dispatching by removing the return false special\ncase for the SimpleEventPlugin which allow us to inline much more here\nand the code becomes easier to follow.', 'Merge pull request #4182 from sebmarkbage/fixguards\nMove guards from auto binding to event dispatch', 'Relay Technical Preview - blog post\n(cherry picked from commit cac6bc870dc4e345ae1c949def31c87580fa16d8)', 'Added note about multiple Reacts, since this error commonly implies that.', 'Add React.Children.toArray', 'Merge pull request #3650 from spicyj/toarray\nAdd React.Children.toArray', 'Merge pull request #4470 from jimfb/ref-error-means-multiple-react\nAdded note about multiple Reacts, since this error commonly implies that.', 'Warn with two copies of React', 'Merge pull request #3332 from spicyj/warn-r2\nWarn with two copies of React', 'Merge pull request #4477 from mridgway/autobind-opt-out\nAllow classes created with React.createClass to opt out of autobinding', 'Remove accidental .only', 'Merge pull request #4609 from spicyj/warn-r2\nRemove accidental .only', 'Fix typecheck', 'Translate 11-advanced-performance.md to Japanese', 'Merge pull request #4613 from tako-black/translate_advanced-performance_to_japanese\nTranslate 11-advanced-performance.md to Japanese', 'update devtools post to note beta 2', 'Merge pull request #4619 from jaredly/beta-2\nupdate devtools post to note beta 2', 'Fix grammar in Relay blog post\nBrings in #4617 properly', 'update component api docs', 'Translate 01-introduction.md to Japanese', 'Merge pull request #4623 from tako-black/translate_introduction_to_japanese\nTranslate 01-introduction.md to Japanese', "swap places of mounted and pending update checks\nprevents a type error if the component isn't mounted", 'Fix Markdown conversion with marked', 'Merge pull request #4626 from yoshuki/fix-markdown-conversion\nFix Markdown conversion with marked', 'Merge pull request #4610 from lili21/fix-component-api-doc\nupdate component api docs', 'Merge pull request #4624 from Torwori/null-check-fix\nSwap places of mounted and pending update checks', 'ReactEurope roundup blog post', 'Added support for more HTML attributes: summary\nThis attribute is used on  to support screen readers.\nIt is deprecated, so take a look at  instead.', 'Merge pull request #4607 from hekar/add/html-table-summary-attr\nAdded support for more HTML attributes: summary', 'Translate ref-01-top-level-api.md to Japanese', 'Merge pull request #4627 from tako-black/translate_top-level-api_to_japanese\nTranslate ref-01-top-level-api.md to Japanese', 'Report the actual type when PropTypes.instanceOf fails', 'fix(es6-import-export): initial commit actually applying', 'Support export default in the class codemod.', 'Merge pull request #4622 from jorrit/instanceofreporttype\nReport the actual type when PropTypes.instanceOf fails', 'tiny code tweak in ReactMultiChild', 'react-codemod-lint-fix', 'Merge pull request #4632 from Simek/react-codemod-lint-fix\nreact-codemod lint fix', 'Merge pull request #4631 from Simek/tiny-code-tweak-reactMultiChild\ntiny code tweak in ReactMultiChild', 'Added documentation about pooled events', 'Updated event pooling note in docs', 'Updated the Performance tools doc page.\nNow it’s possible to read the page from top to the bottom without\nasking oneself “Ok, but how do I get these measurements?”', 'examples jquery-mobile thirdparty files move', 'Merge pull request #4643 from yasaricli/master\nExamples jquery-mobile thirdparty files move', 'Merge pull request #4641 from mik01aj/master\nUpdated the Performance tools doc page.', 'Merge pull request #4481 from dmatteo/Simulate.change-tests\nadd tests for React.addons.TestUtils.Simulate.change', 'Merge pull request #4634 from edvinerikson/event-pooling\nAdded documentation about pooled events', 'Merge pull request #4451 from dmatteo/TestUtils.Simulate-docs\nimprove ReactTestUtils.Simulate documentation', "Remove _isReactElement\nAs of this commit, we still support objects as maps so if anyone has an object with keys 'type' and 'props' this will change behavior, but otherwise this should be pretty safe.", 'Merge pull request #4652 from spicyj/no-isre\nRemove _isReactElement', "Don't use owner to determine if the auto-bailout should be used\nI didn't realize that we actually special cased this. This is an\nunfortunate heuristic but it helps minimize the harm that this optimization\ndoes.", "Use createElement instead of HTML generation\nBehind a feature flag. This is a relatively simple change; adopting this strategy universally would mean that we could clean up a lot of code but this doesn't attempt to restructure more than necessary.", 'Merge pull request #4611 from spicyj/create-element\nUse createElement instead of HTML generation', "Merge pull request #4089 from sebmarkbage/killowner\nDon't use owner to determine if the auto-bailout should be used", "Update Advanced Performance code examples so they would output values\nNoticed the code examples in Advanced Performance wouldn't be rendering the example props, this could lead to some minor confusion for new users.", 'Merge pull request #4655 from levibuzolic/patch-1\nUpdate Advanced Performance code examples so they would output values', "hax to make jest fast\nTurns out jest is incredibly slow at resolving require paths like require('fbjs/lib/foo'). Like several milliseconds per require. Really adds up when all our files require invariant and warning. Here's a temporary hack to make things fast again.\nTest Plan:\nnpm test src/renderers/shared/reconciler/__tests__/ReactCompositeComponent-test.js\nhas a self-proclaimed runtime of ~8 seconds now instead of ~35 seconds.", 'Merge pull request #4656 from spicyj/jest-fast\nhax to make jest fast', 'Re-sort some constants', "Check for compatible node,npm versions on install\nThis is only for building React and doesnn't apply to production installs.", 'Merge pull request #4657 from zpao/abcorderevents\nRe-sort some constants', 'Clarify invocation order of componentDidMount\nOP is delivering on promise made here: https://discuss.reactjs.org/t/how-do-you-invoke-the-render-callback-in-jsx/1744', 'Merge pull request #4567 from koba04/fix-set-boolean-properties\nFixed consistency of behavior boolean properties', 'Merge pull request #4660 from TylerBrock/patch-2\nClarify invocation order of componentDidMount', 'Spruce up refs docs\nFixes #4651.', 'Merge pull request #4664 from spicyj/ref-docs\nSpruce up refs docs', 'Apply CSS shorthand expansion to IE8 only\nCloses #1953.', 'Ensure IE8 style expansion list is up to date\nIn conjunction with #1953, fixes #2407. This seems to be all of the shorthand style properties that IE8 supports, excluding a few nonstandard ones.', 'Merge pull request #4665 from spicyj/gh-2407\nEnsure IE8 style expansion list is up to date', 'ReactCSSTransitionGroup timeouts\nAs discussed in issue 1326\n(https://github.com/facebook/react/issues/1326) transitionend events are\nunreliable; they may not fire because the element is no longer painted,\nthe browser tab is no longer focused or for a range of other reasons.\nThis is particularly harmful during leave transitions since the leaving\nelement will be permanently stuck in the DOM (and possibly visible).\nThe ReactCSSTransitionGroup now requires timeouts to be passed in\nexplicitly for each type of animation. Omitting the timeout duration\nfor a transition now triggers a PropTypes warning with a link to the\nupdated documentation.', 'Merge pull request #4561 from djrodgerspryor/css_transition_group_robust_cleanup\nRobust animation-end handling in ReactCSSTransitionGroup', 'Add a simple production-mode sanity check test', 'Merge pull request #4666 from spicyj/prod\nAdd a simple production-mode sanity check test', 'Update tooling docs to suggest babel\nreact-tools is deprecated, babel is our future\n\nhttps://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html\nhttps://babeljs.io/docs/usage/jsx/\n', 'Merge pull request #4546 from rgbkrk/patch-1\nUpdate tooling docs to suggest babel', 'Capitalize Babel', 'Merge pull request #4654 from zpao/checkversionsoninstall\nCheck for compatible node,npm versions on install', 'Merge pull request #4540 from scottburch/ie8-fix\nremoved dangling comma that messes up loading in IE8', 'Allow results and autosave attributes (WebKit/Blink)', 'Merge pull request #2081 from rexxars/search-input-attributes\nAllow results and autosave attributes (WebKit/Blink)', "Remove redundancy regarding 'latest React news'\nPreviously, it repeated 'latest React news' when the first sentence already begins with the same words.", "Fix typo\nCan not should be a single word: 'cannot'", 'Merge pull request #4679 from ning-github/patch-2\nFix typo', "Fix repetition by editing second sentence\nedited based on paul's input", "Merge pull request #4678 from ning-github/patch-1\nRemove redundancy regarding 'latest React news'", 'Update Gruntfile.js\nAdded punctuation to make the comment consistent with other comments.', 'Update 10.1-animation.md\nChanged "if" to "even when" for clarity.', 'Update 08.1-more-about-refs.md\nChange render to render() for consistency within the paragraph.', 'Update 06-transferring-props.md\n"This ensures that" sounds a better than "That ensures that." This change is just my personal opinion, so I totally understand my change doesn\'t get merged.', 'Update 04-multiple-components.md\nAdded an extra word to make the sentence read a little easier.', 'Update 02.3-jsx-gotchas.md\nFix typo.', 'Merge pull request #4685 from lyip1992/patch-4\nUpdate 08.1-more-about-refs.md', 'Merge pull request #4688 from lyip1992/patch-7\nUpdate 02.3-jsx-gotchas.md', 'Merge pull request #4687 from lyip1992/patch-6\nUpdate 04-multiple-components.md', 'Merge pull request #4686 from lyip1992/patch-5\nUpdate 06-transferring-props.md', 'Merge pull request #4684 from lyip1992/patch-3\nUpdate 10.1-animation.md', 'Merge pull request #4682 from lyip1992/patch-2\nUpdate Gruntfile.js', 'Make createFragment return an array, disallow objects as children', 'Make findDOMNode error clearer\nFixes #4233.', 'Add deprecation notice for React.addons.batchedUpdates\nFixes #4525.', 'Clarify use of arrow functions\nPer https://github.com/facebook/react/commit/1db20999f0336cfacc6af5ee6f5a77803d74381b#commitcomment-12865588.', 'Added warning when calling methods on a released event.', 'Fix formatting in test utils docs', 'Merge pull request #4703 from spicyj/rarr\nClarify use of arrow functions', 'Merge pull request #4701 from spicyj/gh-4525\nAdd deprecation notice for React.addons.batchedUpdates', 'Merge pull request #4700 from spicyj/frag-array\nMake createFragment return an array, disallow objects as children', 'Make definitions more readable & optional params more obvious', 'Enable no-undef for eslint', 'Merge pull request #4732 from spicyj/eslint-undef\nEnable no-undef for eslint', 'resolves issue #4168, style prop error now names React class that erroring element is a child of.', 'Merge pull request #4482 from niole/issue4168\nAdd additional contextual information to invalid-style-prop warning', "Add destructors to pooled classes in ReactChildren\nAnd make destructors mandatory so we're less likely to forget again.", 'Merge pull request #4720 from spicyj/destructor\nAdd destructors to pooled classes in ReactChildren', 'Reverse condition of a ternary for readability', 'Merge pull request #4734 from zpao/reverse-logic\nReverse condition of a ternary for readability', 'Merge pull request #4727 from spicyj/gh-4233\nMake findDOMNode error clearer', 'Better error for invalid element when shallow rendering\nFixes #4721, fixes #4730.', 'Update 02-displaying-data.ja-JP.md\n\nFixed a spelling mistake to be more readable.\nRemoved the English lines that were already translated below.\n', '[adler32] fix wrong name', 'Merge pull request #4737 from oliviertassinari/patch-1\n[adler32] fix wrong name', 'docs: "also lets pass" -> "also lets you pass"', 'Merge pull request #4635 from edvinerikson/event-pooling-warning\nAdded warning when calling methods on a released event.', 'Fix code style/grammar on synthetic event warning', 'Merge pull request #4739 from henrik/patch-1\ndocs: "also lets pass" -> "also lets you pass"', 'Merge pull request #4744 from spicyj/gh-4635-f\nFix code style/grammar on synthetic event warning', 'Merge pull request #4735 from spicyj/shallow-error\nBetter error for invalid element when shallow rendering', 'Upgrade to fbjs, fbjs-scripts @ 0.2', "Make React.Children.map do one pass only\nChanged: createFragment no longer includes nulls in its output (since toArray doesn't and they share code).\nChanged: React.Children.map no longer warns for clashing keys; traverseAllChildren will later when rendering.\nAlso change the generated key format around to accomodate. My keys are probably not bulletproof but should definitely be safe against accidental collisions.", 'Merge pull request #4731 from spicyj/map-one-pass\nMake React.Children.map do one pass only', 'Merge pull request #4750 from zpao/fbjs-0.2\nUpgrade to fbjs, fbjs-scripts @ 0.2', 'Update warning messages to use ReactDOM and ReactDOMServer as appropriate\nFixes #4710.\n\nReact.findDOMNode => ReactDOM.findDOMNode\nReact.render => ReactDOM.render or "top-level render" (depends on whether we\'re in DOM-specific usage or generic cases)\nReact.renderToString => ReactDOMServer.renderToString\nReact.renderToStaticMarkup => ReactDOMServer.renderToStaticMarkup\n', 'Merge pull request #4755 from MichelleTodd/react-warnings-0.14\nUpdate warning messages to use ReactDOM and ReactDOMServer as appropriate', 'Use eslintrc from fbjs', 'Merge pull request #4746 from zpao/use-fbjs-lint\nUse eslintrc from fbjs', 'Fix diverging behavior of ReactFragment in __DEV__\nWe could also remove the return statements but this is not a hot path and this seems safer.', 'Make TypeScript test work with ReactDOM', 'Add linting pre-commit hook\nAnyone who wants it will have to do\nln -s scripts/git/pre-commit .git/hooks/pre-commit\nor similar.', 'Merge pull request #4762 from spicyj/ts\nMake TypeScript test work with ReactDOM', 'Merge pull request #4763 from spicyj/pre-commit\nAdd linting pre-commit hook', 'React -> ReactDOM in test files', 'Remove leftover env variable logic in pre-commit hook', 'Add warnings to React module', 'Merge pull request #4764 from spicyj/pre-commit\nRemove leftover env variable logic in pre-commit hook', 'Merge pull request #4702 from spicyj/react-mod-depr\nAdd deprecation warnings to React module', 'Merge pull request #4759 from spicyj/devprod\nFix diverging behavior of ReactFragment in __DEV__', 'Add react-to-react-dom codemod\nI ran it over Facebook so it probably works.', 'New devtools blog post', 'Merge pull request #4773 from spicyj/new-dt-blog\nNew devtools blog post', 'avoid the phrase "key property"\nReact components can be assigned a special property named key. Therefore, it\'s helpful to avoid the phrase "key property" unless you\'re talking about the key property :)\nI\'m not sold on the replacement phrase, though... I think it\'s solid, but two fancy words like "fundamental" and "invariant" next to each other just seem a bit unwelcoming xP then again, we\'re talking about some heavy technical stuff; if there aren\'t any lighter words that are equally precise, then these should probably stand.', 'Merge pull request #4780 from matchu/patch-1\navoid the phrase "key property"', 'Add insert_final_newline to editorconfig', 'Update console messages regarding devtools', 'Merge pull request #4781 from jontewks/master\nAdd console message to get devtools for firefox', 'Make ReactElement really a plain object\nThis should guarantee that the hidden class is the same after inlining.', 'Merge pull request #3942 from spicyj/el-plain-obj\nMake ReactElement really a plain object and freeze it', 'Warn when passing invalid containers to render and unmountComponentAtNode', 'Update wording and style for #2065', 'Merge pull request #2065 from crm416/container-warnings\nWarn when passing invalid containers to render and unmountComponentAtNode', 'Do not codemod classes with invalid fields, fixes #4628', 'simplify valid attribute regex in DOMPropertyOperations', 'Update docs to match standard HTML attribute support', 'Merge pull request #4788 from jontewks/html-attribute-docs\nUpdate docs to match standard HTML attribute support', '[docs] Updated SVG attributes\nAdded all properties listed in the SVGDOMPropertyConfig.js file to the SVG attributes\nsection in the docs.', 'Merge pull request #4767 from spicyj/com\nAdd react-to-react-dom codemod', 'Resolve eslint error', 'Merge pull request #4786 from jontewks/master\nResolve eslint error', 'Merge pull request #4787 from Simek/patch-5\nsimplify valid attribute regex in DOMPropertyOperations', 'Require instantiable components to extend React.Component', 'Merge pull request #4663 from spicyj/isreactclass\nRequire instantiable components to extend React.Component', 'Move version to standalone module in preparation for reuse', 'Fetch DOM node lazily for updates\nPreviously, we fetched the node once for every changed attribute. In my createElement diff, I changed it to fetch the node (once) regardless of if there were changes -- fetching it once only if there are changes is even better.', 'Merge pull request #4798 from zpao/pull-out-version\nMove version to standalone module in preparation for reuse', "Don't crash in event handling when mixing React copies\nShould fix #1939.\nTest Plan:\nWith two copies of React, render a div using React1 and use that as a container to render a div with React2. Add onMouseEnter/onMouseLeave to both divs that log. Mouse around and see correct logs (as if each React was isolated), no errors.", 'Move headers to shared location, use grunt templates', 'Actually build react-dom file with the build', 'Add react-dom to bower when releasing', 'Upload new build files to build server', 'Merge pull request #4814 from zpao/build-react-dom-browser-2\nBuild react dom browser 2', 'Fix travis cURL call', 'Fix lint warning in react-dom codemod', 'Merge pull request #4793 from edvinerikson/document-svg-attributes\n[docs] Updated SVG attributes', 'Merge pull request #4724 from AnSavvides/test-util-readability\nMake definitions more readable & optional params more obvious', 'Fix typo combatibility => compatibility', 'Merge pull request #4818 from gdi2290/patch-1\nFix typo combatibility => compatibility', "Fix name prop-type on CSS transition group child\nAnd share it with the parent. There's now a test for varying class names by transition-type.", 'Add react-dom to dist/ in npm package', 'Merge pull request #4796 from spicyj/lazy-node\nFetch DOM node lazily for updates', 'Fix up style in #4719', 'Merge pull request #4719 from djrodgerspryor/fix_css_transition_group_child_props\nFix transitionName prop-type on CSS transition group child\nCloses #4719.', "Don't try to iterate over non-objects\nFixes #4776.", 'Pre-fill tag when asking a Stack Overflow question', 'Merge pull request #4824 from facebook/prefill-stack-overflow-tag\nPre-fill tag when asking a Stack Overflow question', 'Merge pull request #4821 from spicyj/dom-dist\nAdd react-dom to dist/ in npm package', "Merge pull request #4823 from spicyj/gh-4776\nDon't try to iterate over non-objects", "Refactor empty component handling\nNow doesn't use ReactCompositeComponent and ._currentElement is actually null/false.", 'Preserve DOM node when updating empty component\nFixes #2770.', 'occured -> occurred', 'Merge pull request #4827 from spicyj/occured\noccured -> occurred', 'Merge pull request #4825 from spicyj/gh-2770\nPreserve DOM node when updating empty component', "Merge pull request #4747 from spicyj/gh-1939\nDon't crash in event handling when mixing React copies", 'Use a Symbol to tag every ReactElement\nFixes #3473\nI tag each React element with $$typeof: Symbol.for(\'react.element\'). We need\nthis to be able to safely distinguish these from plain objects that might have\ncome from user provided JSON.\nThe idiomatic JavaScript way of tagging an object is for it to inherent some\nprototype and then use instanceof to test for it.\nHowever, this has limitations since it doesn\'t work with value types which\nrequire typeof checks. They also don\'t work across realms. Which is why there\nare alternative tag checks like Array.isArray or the toStringTag. Another\nproblem is that different instances of React that might have been created not knowing about eachother. npm tends to make this kind of problem occur a lot.\nAdditionally, it is our hope that ReactElement will one day be specified in\nterms of a "Value Type" style record instead of a plain Object.\nThis Value Types proposal by @nikomatsakis is currently on hold but does satisfy all these requirements:\nhttps://github.com/nikomatsakis/typed-objects-explainer/blob/master/valuetypes.md#the-typeof-operator\nAdditionally, there is already a system for coordinating tags across module\nsystems and even realms in ES6. Namely using Symbol.for.\nCurrently these objects are not able to transfer between Workers but there is\nnothing preventing that from being possible in the future. You could imagine\neven Symbol.for working across Worker boundaries. You could also build a\nsystem that coordinates Symbols and Value Types from server to client or through\nserialized forms. That\'s beyond the scope of React itself, and if it was built\nit seems like it would belong with the Symbol system. A system could override\nthe Symbol.for(\'react.element\') to return a plain yet\ncryptographically random or unique number. That would allow ReactElements to\npass through JSON without risking the XSS issue.\nThe fallback solution is a plain well-known number. This makes it unsafe with\nregard to the XSS issue described in #3473. We could have used a much more\nconvoluted solution to protect against JSON specifically but that would require\nsome kind of significant coordination, or change the check to do a\ntypeof element.$$typeof === \'function\' check which would not make it unique to\nReact. It seems cleaner to just use a fixed number since the protection is just\na secondary layer anyway. I\'m not sure if this is the right tradeoff.\nIn short, if you want the XSS protection, use a proper Symbol polyfill.\nFinally, the reason for calling it $$typeof is to avoid confusion with .type\nand the use case is to add a tag that the typeof operator would refer to.\nI would use @@typeof but that seems to deopt in JSC. I also don\'t use\n__typeof because this is more than a framework private. It should really be\npart of the polyfilling layer.', 'Merge pull request #4832 from sebmarkbage/xssfix\nUse a Symbol to tag every ReactElement', 'Update Korean translation', 'Stop building JSXTransformer\nPick of/closes #4148.', "Don't copy JSXTransformer in grunt release", '0.14.0-rc1', '0.14 RC blog post', 'Merge pull request #4797 from spicyj/rc14blog\n0.14 RC blog post', 'Add Babel version to blog post', 'Update Japanese translation to 75fafe1', 'Merge pull request #4802 from 8398a7/patch-1\nUpdate Japanese translation to 75fafe1', 'Merge pull request #4833 from youngminz/master\nUpdate Korean translation', '[docs] Add jsfiddle integration for Babel', 'Maintain why-react-zh-CN sync to the current why-react', 'Update translation for jsx-in-depth-zh-CN', 'Merge pull request #4855 from iamchenxin/master\nMaintain why-react-zh-CN sync to the current why-react', 'Better simulate Symbol-less environment\nThis ensures that our tests expecting Symbol not to exist pass.', 'Merge pull request #4861 from zpao/symbol-test-node4\nBetter simulate Symbol-less environment', 'Community Roundup #27 – Relay Edition', '--no* options automatically set to false', 'Merge pull request #4845 from steveluscher/community-roundup-27-relay-edition\nCommunity Roundup #27 – Relay Edition', 'Make "Component API" more readable', 'Make "Component Specs and Lifecycle" more readable', 'Make it easier to create an issue', 'Use same type of markdown as everywhere else for Glossary', 'Merge pull request #4866 from andrewsokolov/bug/--no-explicit-require-didnt-works\n[react-codemod] --no* options automatically set to false', 'DOCS - typo in ref callback example\ndeleted extra ending curly brace in arrow function', 'Merge pull request #4869 from arush/patch-1\nDOCS - typo in ref callback example', 'Merge pull request #4868 from AnSavvides/docs-readability\nMake docs more consistent', "[docs] Use a generator to assign complete author data before generating site\nThis makes sure that post.author will be the actual data we want and we don't have to assign it every time, potentially messing it up.", 'Merge pull request #4829 from zpao/docs-jekyll-feed\n[docs] Use a generator to assign complete author data before generating site', 'Clarifies "Fetching from the server"', 'Merge pull request #4874 from brigand/patch-6\nClarifies "Fetching from the server"', 'Fix syntax errors', 'Merge pull request #4884 from moretti/patch-1\n[docs] Fix syntax errors in Animation', 'Check input and textarea propTypes only in DEV', 'Merge pull request #4887 from spicyj/form-proptypes-dev\nCheck input and textarea propTypes only in DEV', 'Support arrow functions as stateless components', 'Merge pull request #4859 from zpao/stateless-arrow-functions\nSupport native arrow functions as stateless components', 'Upgrade eslint to 1.4.1', 'Merge pull request #4858 from zpao/eslint-1.4\nUpgrade eslint to 1.4.1', 'Fix documentation errata', 'Merge pull request #4891 from igncp/documentation-fix\nFix documentation errata', '[docs] Remove unused file', 'Update zh-CN translation.\nTo keep up with en docs.', 'Merge pull request #4899 from iamchenxin/master\nUpdate zh-CN docs.', "Don't install npm 3 on Travis", 'Just ignore events on unmounted components\nFixes #4865 and also seems to fixes #3790.', "Merge pull request #4904 from spicyj/npm-2\nDon't install npm 3 on Travis", 'Build ReactDOM browser builds into react-dom/dist', 'Add hardware-counter.cpp and deps from HHVM', 'Update license to match React repo license', 'Make hardware-counter.cpp compile\ng++ -std=c++11 -lpthread src/hardware-counter.cpp\nsrc/thread-local.cpp src/test.cpp works and runs where src/test.cpp is:\n```\nint main() {\n  bool enable = true;\n  std::string events = "";\n  bool recordSubprocesses = false;\n  HPHP::HardwareCounter::Init(enable, events, recordSubprocesses);\nHPHP::HardwareCounter::s_counter.getCheck();\nint64_t start = HPHP::HardwareCounter::GetInstructionCount();\n  volatile int x;\n  for (int i = 0; i < 1000000; i++) {\n    x += i;\n  }\n  int64_t end = HPHP::HardwareCounter::GetInstructionCount();\nprintf("%d\\n", end - start);\n}\n```', 'Add node bindings', 'Update 03-interactivity-and-dynamic-uis.md\nThis clarifies when autobinding does and does not happen. I spun my wheels on this for a while.\nhttps://medium.com/@goatslacker/react-0-13-x-and-autobinding-b4906189425d', "Merge pull request #4921 from benjaffe/master\n[docs] Clarify when autobinding does(n't) happens", 'Extracted "safe taint" in docs/homepage to align with best practice #4212', 'Merge pull request #4903 from spicyj/event-unmounted\nJust ignore events on unmounted components', 'Merge pull request #4931 from bspaulding/safe-taint-docs\nExtracted "safe taint" in docs/homepage to align with best practice', 'add RDFa attributes not already covered', 'Composite component throws on attaching ref to stateless component #4939', 'Merge pull request #3069 from WickyNilliams/patch-1\ndocument checkbox using click handlers for change events', 'Remove SyntheticEvent.path', "Fix ReactDOMSelection to avoid erroring on Firefox's anonymous divs", "Don't use magic browser event dispatching for simulated events\nWhen calling ReactTestUtils.Simulate, sometimes you want to test that an exception is thrown by the event handler. This lets you do that without relying on the fact that old jsdom doesn't implement Event.", 'Merge pull request #4916 from spicyj/hwc\nAdd perf-counters npm module to scripts', "Merge pull request #4945 from spicyj/nocatch-sim\nDon't use magic browser event dispatching for simulated events", 'Improve error for style mutation\nFixes #4877. I opted not to change shallowEqual for this since it seems relatively one-off.', 'Merge pull request #4946 from spicyj/nan\nImprove error for style mutation', 'updates printWasted', "Merge pull request #4935 from saifelse/fix-firefox-dom-sel\nFix ReactDOMSelection to avoid erroring on Firefox's anonymous divs", 'Merge pull request #4683 from JaeHunRo/master\ntemporarily fixes printWasted abnormality', 'Merge pull request #4944 from zpao/rm-event-path\nRemove SyntheticEvent.path', 'Improve traverseAllChildren object error message\nFixes #4840.', 'Merge pull request #4951 from spicyj/gh-4840\nImprove traverseAllChildren object error message', 'Upgrade to node@4, jest@0.5', 'Use main document for getTestDocument\nThis should be fine in a jest environment, which is all we really care about now.', 'Cleanup Jest preprocessor, use cache key', 'Merge pull request #4658 from zpao/iojs\nUpgrade to node@4, jest@0.5', 'doc: typo existant to existent', 'Merge pull request #4956 from reggi/patch-1\ndoc: typo existant to existent', '[docs] Sync up zh-CN docs\nSync up with current en docs.', 'Merge pull request #4960 from iamchenxin/translate\n[docs] Sync up zh-CN docs', "Fix syntac error\nSplit {{ in example code to avoid an Exception in jekyll.\n\nLiquid Exception: Variable '{{' was not properly terminated with regexp: /}}/ in docs/10.1-animation.md\n", 'Merge pull request #4961 from iamchenxin/en_docs\n[docs] Fix syntac error', 'Renamed componentInstance to publicComponentInstance', 'attachRef to a stateless component warns instead of throwing #4939', '[docs] Update zh-CN docs.\nadd  08.1-more-about-refs.zh-CN.md', 'Merge pull request #4853 from zpao/jsfiddle-babel\n[docs] Add jsfiddle integration for Babel', '[examples] Assume es5 compatible browsers with console', '[exmaples] Remove local 3rd party code, use CDN (mostly)', '[examples] Use Babel', '[examples] Use ReactDOM for appropriate APIs', '[examples] Fix transtion example with timeout prop', '[examples] Update basic-commonjs for new React, watchify', '[examples] Use refs instead of findDOMNode', 'Merge pull request #4914 from zpao/0.14-examples\nUpdate examples for Babel, 0.14; remove 3rd party code', '[examples] Remove Server Rendering', '[docs] Update zh-CN docs\nUpdate\n    09-tooling-integration.zh-CN.md\n    10-addons.zh-CN.md\n    10.1-animation.zh-CN.md', 'Merge pull request #4966 from zpao/examples-rm-server-rendering\n[examples] Remove Server Rendering Example', 'Published with https://stackedit.io/', 'Merge pull request #4942 from darobin/rdfa-attributes\nAdd RDFa attributes not already covered (fixes #3459)', 'Merge pull request #4967 from zhangjg/zhangjg-br\nTranslation  08.1-more-about-ref.md to Chinese', 'Merge pull request #4965 from iamchenxin/translate\n[docs] Update zh-CN docs.', '[lint] Update and fix', 'Merge pull request #4973 from zpao/lint-again\n[lint] Update and fix', "Don't blow up on missing _store in element validation\nSeems better to fail gracefully, especially now that we support inlining. If people do this by accident we can figure out how to add a helpful warning instead.\nFixes #3285.", "Merge pull request #4975 from spicyj/gh-3285\nDon't blow up on missing _store in element validation", "Don't store  instance until mount-ready\nFixes #4870.\nThis more or less matches what we were doing with the old wrapper components (not storing until componentDidMount).", "Merge pull request #4976 from spicyj/gh-4870\nDon't store  instance until mount-ready", "Actually don't store  until mount-ready\nSo #4976 was a lie. Fixes #4870 for real (thanks @STRML).", "Merge pull request #4977 from spicyj/gh-4870\nActually don't store  until mount-ready", 'Updated stateless ref warning message with more info', '[docs] Make the server required for the tutorial', 'Merge pull request #4978 from zpao/tutorial-server\n[docs] Make the server required for the tutorial', '[docs] Stop supporting our JSX compiler page\nLink to Babel REPL directly instead.', '[docs] Remove mentions of react-tools/jsx command', '[docs] Update script mimetypes: text/jsx -> text/babel', '[docs] Remove JSXTransformer from tutorial', '[docs] Remove JSXTransformer, react-tools from downloads page', 'Merge pull request #4846 from zpao/docs-use-babel\n[docs] Remove references to react-tools, JSXTransformer, replace with Babel.', '[docs] Replace JSXTransformer with babel/browser\nCloses #4131', 'Fix documentation of event propagation: 0.13 to 0.14', 'Merge pull request #4893 from jw-00000/patch-1\nFix documentation of behavior of v0.12 and v0.13', 'Add trailing commas to react-codemod output by default.', "Correct the CSS example for 'appear' transition\nMove transition from .example-appear to .example-appear.example-appear-active", 'Add unit test to ensure DOM mutations are instrumented', 'Make new perf unit test pass', "Merge pull request #4985 from mbrookes/patch-1\nCorrect the CSS example for 'appear' transition", 'Make ReactTestUtils.scryRenderedComponentWithClass find multiple classes', 'Merge pull request #4953 from zpao/test-utils-scry\nMake ReactTestUtils.scryRenderedComponentWithClass find multiple classes', 'Merge pull request #4901 from zpao/npm-react-dom-dist\nBuild ReactDOM browser builds into react-dom/dist', 'Merge pull request #4987 from spicyj/perf\nAdd unit test to ensure DOM mutations are instrumented', 'Rename TYPE_SYMBOL to REACT_ELEMENT_TYPE\nSee D2454031 for context.', 'Merge pull request #4995 from gregrperkins/master\nRename TYPE_SYMBOL to REACT_ELEMENT_TYPE', 'Fail jest tests on any un-spied warnings\nOriginally #4223 -- we lost this when we switched to jest.', 'Improve warning for old element objects\nFixes #4996.', 'Merge pull request #5002 from spicyj/check-no-warn-jest\nFail jest tests on any un-spied warnings', 'Merge pull request #5003 from spicyj/gh-4996\nImprove warning for old element objects', 'Add missing comma (,) between propTypes and render\nAdd missing comma (,) between propTypes and render', 'Added a note about needing document globally available\nAdded a note in `10.4-test-utils.md about needing window, document and\ndocument.createElement globally available before importing React.', 'Merge pull request #4980 from edvinerikson/add-window-document-note\nAdded a note about needing document globally available', 'Merge pull request #4736 from yhagio/patch-1\nUpdate 02-displaying-data.ja-JP.md', 'Merge pull request #5008 from james4388/patch-3\nAdd missing comma (,) between propTypes and render', 'Make scry* look through stateless components\nFixes #4882.', 'Fix dev/prod mismatch in context === bailout\nFixes #5005.', "Don't throw for onClick={false} in initial render\nI accidentally regressed this in #3246. Now this matches what we already checked for updates.", "Merge pull request #5018 from spicyj/ev-l-bool\nDon't throw for onClick={false} in initial render", 'Merge pull request #5017 from spicyj/gh-5005\nFix dev/prod mismatch in context === bailout', "Enforce NODE_ENV=test\nYou could make the argument that this should be optional, but it doesn't\nwork without it so we might as well just enforce it.\nMakes jest work by default.", 'Merge pull request #5020 from sebmarkbage/fixjestcli\nEnforce NODE_ENV=test', "isReactClass -> .prototype.isReactComponent\nPut the flag on the prototype instead to help certain limited forms\nof class extensions that doesn't properly transfer static properties.\nFixes #4836", 'Added documentation for stateless components, condensed the two pages about refs into a single page.', 'Merge pull request #4964 from jimfb/stateless-functions-and-render-docs\nDocumentation for stateless functions/components, condensed two pages about refs into one', 'clarify that events work for elements not for components', 'fix isDefaultPrevented() and isPropagationStopped() methods of SyntheticEvent notation', 'Merge pull request #5025 from chicoxyzzy/fix-event-methods-notation\nfix methods notation of SyntheticEvent in docs', '[docs] Fix typo in videos.md\nLine 111: "integate" =>  "integrate".\nThanks to all core contribs for open sourcing such a great tool!', 'Merge pull request #5029 from jabbrass/patch-1\n[docs] Fix typo in videos.md', 'Merge pull request #5026 from chicoxyzzy/clarify-events-doc\nclarify that events work for elements not for components', 'Merge pull request #5021 from sebmarkbage/prototypetag\nisReactClass -> .prototype.isReactComponent', 'Blog post for react render and top level API', 'Merge pull request #5016 from spicyj/tu-stateless\nMake scry* look through stateless components', "Update to fbjs@0.3\nAs far as we're concerned, the only difference is that we moved some files from React to fbjs.", 'Merge pull request #5034 from zpao/fbjs-0.3\nUpdate to fbjs@0.3', 'Translate documentation to Italian', 'Merge pull request #5001 from claudiopro/master\n[docs] Italian localization of documentation', 'make properties notation in docs consistent', 'Merge pull request #5038 from chicoxyzzy/docs-notation-fixes\nmake properties notation consistent over docs', 'Merge pull request #5019 from jimfb/renderer-blog-post\nBlog post for react render and top level API', "Don't blow up in key warning for undefined type", 'rename renderSubtreeIntoContainer.js to renderSubtreeIntoContainer-test.js\nTo distinguish between testing file and implementation file.', 'Merge pull request #5045 from CoderK/master\nrename renderSubtreeIntoContainer.js to renderSubtreeIntoContainer-test.js', "Merge pull request #5041 from spicyj/val-key-err\nDon't blow up in key warning for undefined type", 'React->ReactDOM in src/', 'Merge pull request #5056 from jimfb/reactdom-in-src\nReact->ReactDOM in src/', 'React -> ReactDOM for render() and findDOMNode()', 'Wrapping StatelessComponent ref warning in DEV block', 'Remove dependence on ES5 shams per #4189\nDocs not updated', 'Merge pull request #4959 from dgreensp/no-shams\nRemove dependence on ES5 shams per #4189', 'Revert "Remove dependence on ES5 shams per #4189"', 'Merge pull request #5062 from facebook/revert-4959-no-shams\nRevert "Remove dependence on ES5 shams per #4189"', 'Merge pull request #4943 from bspaulding/throw-stateless-ref\nComposite component throws on attaching ref to stateless component #4939', 'Merge pull request #5055 from jimfb/reactdom-render\nReact -> ReactDOM for render() and findDOMNode()', 'Update some more docs for package split', 'Updat docs for refs/findDOMNode', 'Merge pull request #5065 from spicyj/docs-pkgs\nUpdate some more docs for package split', 'Fix bower info in RC blog post\nFixes #5054.', 'Copy 0.14 RC blog post to 0.14 blog post', 'Write 0.14 blog post', 'Merge pull request #5072 from spicyj/14blog\n0.14 blog post', 'Update AUTHORS for 0.14', 'Merge pull request #4785 from zpao/0.14-authors\nUpdate AUTHORS for 0.14', 'npm shrinkwrap', '[docs] Update acknowledgements for 0.14', 'v0.14.0']v0.13.3 React Core
New Features

Added clipPath element and attribute for SVG
Improved warnings for deprecated methods in plain JS classes

Bug Fixes

Loosened dangerouslySetInnerHTML restrictions so {__html: undefined} will no longer throw
Fixed extraneous context warning with non-pure getChildContext
Ensure replaceState(obj) retains prototype of obj

React with Add-ons
Bug Fixes

Test Utils: Ensure that shallow rendering works when components define contextTypes
 ['Update website with 0.13.2 builds', 'v0.13.2 blog post', 'Tweak wording in 0.13.2 blog post\n(cherry picked from commit feef6e885bfa97ecbc68942154e486d14ae5a9a0)', 'Merge pull request #3705 from zpao/doc/update-supported-attrs\n[docs] Update supported HTML attributes', 'Merge pull request #3703 from JimBobSquarePants/patch-1\nExample is JSX not JS.', 'Merge pull request #3694 from adamzap/fix-tutorial-line-highlighting\nFix missing line highlight in tutorial', 'Merge pull request #3693 from reedloden/swap-http-to-https\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)', "Reset changes to code made in #3693\nReverting this bit in the stable branch so builds aren't changed. We can pick\nthis up again if we do a 0.13.3.", 'Update cloneWithProps documentation\nUpdated documentation to reflect that using React.cloneElement is the new way to copy an element and preserve key and ref.\nFixes #3432, closes #3447.\n(cherry picked from commit 39442aaa8447df39519a387fbed2894da395a8e4)', 'Merge pull request #3429 from AoDev/patch-1\nAdd a note about react classe name convention', "Merge pull request #3691 from jonscottclark/patch-1\nAdd 'cache: false' to $.ajax when fetching comments (docs/tutorial)", 'Merge pull request #3723 from jsfb/fix-bad-homepage-link\nFix bad links in docs.  Fixes #3654.', 'Merge pull request #3734 from marocchino/update-korean\nUpdate Translation to 0183f70', 'Merge pull request #3767 from kubosho/patch-1\nUse jQuery 2.1.3 (latest) to be up-to-date and consistent with other docs)', 'Merge pull request #3784 from ef718/docs-punctuation\nAdd punctuation', 'Merge pull request #3794 from jsfb/fix-thinking-in-react-blog-post\nFixed jsfiddles broken on https.  Fixes 3735.', 'GraphQL Introduction Blog Post\n(cherry picked from commit 693da719a38ef313d193802a7e957ef49a628236)', 'Fix a couple grammar issues in GraphQL blog post', 'Update 2015-05-01-graphql-introduction.md\ntypo fix', 'Bump version for dev', 'Added support for SVG clipPath element and clip-path attribute', 'Merge pull request #3716 from graue/optional-shallow-render-context\nShallow render components that define contextTypes', 'Merge pull request #3727 from spicyj/dsih\nRelax dangerouslySetInnerHTML validation', 'Merge pull request #3802 from spicyj/cleaner-depr\nBetter warning messages for deprecated methods', 'Fix context warning with non-pure getChildContext\nFixes #3709.', 'Add forgotten clipPath wrapper in getMarkupWrap\n(cherry picked from commit 3b10a7b0386bf6787e6da58fea696f7a9d6f802c)', 'Revert "Reset changes to code made in #3693"\nThis reverts commit 405346545ffdc066d00949e7602b2a73f14335db.', 'Merge pull request #3841 from spicyj/yolo\nPreserve prototype with replaceState', 'Changelog for 0.13.3', 'Readme for 0.13.3', 'v0.13.3']v0.13.2 React Core
New Features

Added strokeDashoffset, flexPositive, flexNegative to the list of unitless CSS properties
Added support for more DOM properties:
scoped - for <style> elements
high, low, optimum - for <meter> elements
unselectable - IE-specific property to prevent user selection

Bug Fixes

Fixed a case where re-rendering after rendering null didn't properly pass context
Fixed a case where re-rendering after rendering with style={null} didn't properly update style
Update uglify dependency to prevent a bug in IE8
Improved warnings

React with Add-Ons
Bug Fixes

Immutabilty Helpers: Ensure it supports hasOwnProperty as an object key

React Tools

Improve documentation for new options
 ['0.13 blog post, starter kit', 'Merge pull request #3463 from josephsavona/relay-components\nBuilding The Facebook News Feed With Relay', '[docs] Update site nav\n(cherry picked from commit ca663994022415897358e0fa1eb60003d737b268)', 'Add React Native blog post\n(cherry picked from commit 951adcdd4c260ccf6267c5470195b544ed5afde8)', '[docs] Tweak words on homepage\n(cherry picked from commit cf956ac8becd9e8cdda0e5f839911f7baa07913f)', '[docs] Split up second sentence more\n(cherry picked from commit eef22ece37e36f3d9e2f3515ffe2afca51fa2b04)', 'Roundup 26', "Update TravisCI to use exiting env var\n$TRAVIS_COMMIT_RANGE was broken but it seems what we're doing is worse and\nresulting in false negatives.\nThe result of the bad range was that we weren't running lint or tests for\nthings we should have been. It actually looks like $TRAVIS_COMMIT has been\nwrong and it's not clear why this has been working at all.\n(cherry picked from commit 08b1515f7fb82c64b3f218bf60964b6b75fa6be6)", "Keep docs/js/{react,JSXTransformer}.js in repo\nThis way we don't need to rebuild them each time for the website.\n(cherry picked from commit 0b6c7c29fe5618246af3ab41c7403628710ca183)", "Autobuild website on Travis from stable branch\n$REACT_WEBSITE_BRANCH in https://travis-ci.org/facebook/react/settings/env_vars now needs to point to the stable branch (currently 0.13-stable). I haven't tested the commit-and-push part of this but everything else works so I'm hopeful.\n(cherry picked from commit accb4f6047ac5d8ff2907e32fbf9c1a68691aa83)", '[docs] English tweaks (and testing Travis)\n(cherry picked from commit b7c4da59ca19eba52c5f46cc2e1f6fa279a81877)', 'Set git name and email for Travis\n(cherry picked from commit be566e0aa6fe78fbede6e987343ed79099736014)', 'Set name and email a different way\n(cherry picked from commit 76805fdfda062807efea547c3ab0c1a645b35fb5)', 'Squelch git warning on Travis\n(cherry picked from commit 835fc3d0fb53852ae18407f8ea987ff92e71e282)', 'Fix small typo in 11-advanced-performance.md.\n"React didn\'t even had"->"React didn\'t even have"\nhttp://english.stackexchange.com/questions/204603/proper-usage-of-didnt-had-or-didnt-have\n(cherry picked from commit 4fe1b5984913b1556538e436875988540c19b4cb)', 'Fix inverted feature test in .travis.yml\nI messed this up in #3540.\n(cherry picked from commit 9c12e48f68dee39a295e877e391e81ca4af313be)', '[docs] Fix type on renderIntoDocument\nFixes #3581.\n(cherry picked from commit d402bd383185b1d9571b5898c764fed528b3b75d)', 'Merge pull request #3240 from reactkr/translate-ko-release\nKorean translation for docs', 'Merge pull request #3271 from delftswa2014/fix/todo-example\nAdded the key attribute into the todo example', 'Merge pull request #3483 from julen/docs/document-body-footgun\nDocs: do not render components to document.body', 'Merge pull request #3487 from zpao/doc/video\n[docs] Videos: use https, right width videos', 'Merge pull request #3491 from bobbyrenwick/transition-group-appear-docs\nadding docs for componentWillAppear and componentDidAppear', 'Merge pull request #3498 from AnSavvides/patch-1\nInclude latest version of jQuery in tutorial', 'Merge pull request #3504 from clariroid/docsJP\nTranslate 2 docs into Japanese', 'Merge pull request #3511 from AnSavvides/glossary-space\nMinor space change to be in line with coding style everywhere else', 'Merge pull request #3529 from uzarubin/patch-1\nSwapping defaultChecked and defaultValue', 'Merge pull request #3537 from marocchino/korean-update\nUpdate Korean translations', 'Merge pull request #3539 from russellpwirtz/patch-1\nUpdate tutorial.md', 'Merge pull request #3544 from prathamesh-sonpatki/fix-link-to-display-name\nFixed link to displayName component spec from JSX in depth article', 'Merge pull request #3562 from dalinaum/rename\nRename 19--dangerouslySetInnerHTML.md -> 19-dangerously-set-inner-html.md', 'Merge pull request #3567 from chenglou/rm-getdomnode\nRemove some getDOMNode from docs and DOMComponent test', 'Merge pull request #3588 from marocchino/ko-update\nUpdate Korean translation to d402bd3', "Merge pull request #3589 from theseyi/master\nDocumentation: Fixed typo / grammar in 'clone with props'", 'Merge pull request #3590 from koba04/patch-1\ncomponent.render method returns a ReactElement.', 'Merge pull request #3612 from gaearon/patch-1\nMention Flux in “communicate between components”', '[docs] Fix typo\nIntroduced in #3589', 'Merge pull request #3584 from ThornWinters/patch-1\nMore Uniform Formating', 'Merge pull request #3635 from garethnic/reuseCompDoc\nClarify sentence in Reusable Components doc', 'Merge pull request #3641 from ljharb/patch-1\nUpdating es5-shim URL', 'Merge pull request #3642 from marocchino/ko-update\nUpdate Korean translation to 0185c68', 'Merge pull request #3658 from sbezludny/patch-1\nFixed typo', 'Merge pull request #3663 from spicyj/san-md\n[docs] Use marked instead of Showdown and escape HTML\n(cherry picked from commit be03fa7f467a0e7bdfba24d9ee5f31321daf0d57)', 'Merge pull request #3456 from cody/html-jsx\nFix HTML to JSX converter to work with https', 'React Native 0.4 Blog Post', 'Update 2015-04-17-react-native-v0.4.md', 'Merge pull request #3625 from dmin/patch-1\nDocs: Fix example JSX output', 'Merge pull request #3673 from ultrafez/patch-1\n"Advanced performance" typo fix', 'Merge pull request #3678 from marocchino/update-korean\nUpdate Translation to 6a7a4fd', 'Version bump for dev', 'Merge pull request #3494 from letiemble/B_Context_Rerender\nFix the context handling when updating a rendered component.', "Merge pull request #3499 from sverrejoh/patch-1\nDon't add 'px' to strokeDashoffset CSS Properties", 'Merge pull request #3507 from dpellier/master\nAdd scoped property to the list of DOM standard properties', "Merge pull request #3513 from agelter/master\nAdded support for the 'low', 'high', and 'optimum' attributes that are missing from the  tag.", "Merge pull request #3519 from jonchester/patch-1\nAdd IE-specific 'unselectable' attribute", 'Merge pull request #3563 from quizlet/fix-addons-hasownproperty\nFix immutability helper to check hasOwnProperty safely', 'Merge pull request #3614 from kassens/set_style_null\nFix for style not always reset when set to null', 'Merge pull request #3618 from TimeBomb/master\nDocument new es6module flag in react-tools README', 'Merge pull request #3627 from spicyj/mut-warn-clone\nRefer to cloneElement in mutation warning', 'Merge pull request #3636 from cody/jsx-target\nAdd target option to npm readme', 'Merge pull request #3662 from zpao/update-uglify\nUpdate uglify dependency', 're-shrinkwrap', 'Merge pull request #3638 from devicehubnet/master\ncheck if type.prototype is object in instantiateReactComponent', 'Update test for backporting #3507', 'Merge pull request #3485 from jnu/ie10-flex-unitless\nTreat flexPositive, flexNegative as unitless styles', 'Merge pull request #3675 from spicyj/gh-3655\nAdd warning for getDefaultProps on ES6 classes', 'Changelog for 0.13.2', 'Readme for 0.13.2', 'Update Patent Grant\nhttps://code.facebook.com/posts/1639473982937255/updating-our-open-source-patent-grant/', 'v0.13.2']v0.13.1 React Core
Bug Fixes

Don't throw when rendering empty <select> elements
Ensure updating style works when transitioning from null

React with Add-Ons
Bug Fixes

TestUtils: Don't warn about getDOMNode for ES6 classes
TestUtils: Ensure wrapped full page components (<html>, <head>, <body>) are treated as DOM components
Perf: Stop double-counting DOM components

React Tools
Bug Fixes

Fix option parsing for --non-strict-es6module
 ['v0.13 starter kit', 'Merge pull request #3394 from cody/getDOMNode\nFix in docs: getDOMNode --> findDOMNode', 'Merge pull request #3422 from jviereck/doc-typo-fix\nFix small typo ("of" instead of "or")', 'Merge pull request #3419 from xmo-odoo/patch-1\nLink to inserting raw HTML document', 'version bump for dev', 'Merge pull request #3381 from zpao/jsx-nonstrictmodule\nFix module option parsing of jsx command\n(cherry picked from commit b0a59a643a4e88832cbedf7a9b816fdc2839b9cd)', 'Merge pull request #3402 from vkramskikh/fix-empty-selects-with-value\nFix for empty  elements with value\n(cherry picked from commit 68a2f89cc60dedf33f4cdb44b4590b36653fe8b2)', 'Merge pull request #3410 from robertknight/3409-style-null-to-nonnull\nFix incorrect update of style when props.style transitions from null to non-null\n(cherry picked from commit bcd70ad500612eb49c34412625577eaeb85c75b8)', 'Merge pull request #3412 from spicyj/gh-3329\nSquash getDOMNode warning from isDOMComponent\n(cherry picked from commit ed257cb691775c508ab19eee69c87c773ec79649)', 'Merge pull request #3414 from spicyj/gh-3407\nFix up Perf a bit better for 0.13\n(cherry picked from commit 0a312bba89be2a40ee811800d52567d7ef85eff1)', 'Merge pull request #3427 from zpao/full-page-dom-components\nEnsure FullPageComponents are treated as DOM components\n(cherry picked from commit dacd4db1fa7fc49272b83348d0524fb59e8b0277)', 'Changelog for 0.13.1', 'Update Readme for 0.13.1', 'v0.13.1']v0.13.0 React Core
Breaking Changes

Deprecated patterns that warned in 0.12 no longer work: most prominently, calling component classes without using JSX or React.createElement and using non-component functions with JSX or createElement
Mutating props after an element is created is deprecated and will cause warnings in development mode; future versions of React will incorporate performance optimizations assuming that props aren't mutated
Static methods (defined in statics) are no longer autobound to the component class
ref resolution order has changed slightly such that a ref to a component is available immediately after its componentDidMount method is called; this change should be observable only if your component calls a parent component's callback within your componentDidMount, which is an anti-pattern and should be avoided regardless
Calls to setState in life-cycle methods are now always batched and therefore asynchronous. Previously the first call on the first mount was synchronous.
setState and forceUpdate on an unmounted component now warns instead of throwing. That avoids a possible race condition with Promises.
Access to most internal properties has been completely removed, including this._pendingState and this._rootNodeID.

New Features

Support for using ES6 classes to build React components; see the v0.13.0 beta 1 notes for details.
Added new top-level API React.findDOMNode(component), which should be used in place of component.getDOMNode(). The base class for ES6-based components will not have getDOMNode. This change will enable some more patterns moving forward.
Added a new top-level API React.cloneElement(el, props) for making copies of React elements – see the v0.13 RC2 notes for more details.
New ref style, allowing a callback to be used in place of a name: <Photo ref={(c) => this._photo = c} /> allows you to reference the component with this._photo (as opposed to ref="photo" which gives this.refs.photo).
this.setState() can now take a function as the first argument for transactional state updates, such as this.setState((state, props) => ({count: state.count + 1})); – this means that you no longer need to use this._pendingState, which is now gone.
Support for iterators and immutable-js sequences as children.

Deprecations

ComponentClass.type is deprecated. Just use ComponentClass (usually as element.type === ComponentClass).
Some methods that are available on createClass-based components are removed or deprecated from ES6 classes (getDOMNode, replaceState, isMounted, setProps, replaceProps).

React with Add-Ons
New Features

React.addons.createFragment was added for adding keys to entire sets of children.

Deprecations

React.addons.classSet is now deprecated. This functionality can be replaced with several freely available modules. classnames is one such module.
Calls to React.addons.cloneWithProps can be migrated to use React.cloneElement instead – make sure to merge style and className manually if desired.

React Tools
Breaking Changes

When transforming ES6 syntax, class methods are no longer enumerable by default, which requires Object.defineProperty; if you support browsers such as IE8, you can pass --target es3 to mirror the old behavior

New Features

--target option is available on the jsx command, allowing users to specify and ECMAScript version to target.
es5 is the default.
es3 restores the previous default behavior. An additional transform is added here to ensure the use of reserved words as properties is safe (eg this.static will become this['static'] for IE8 compatibility).
The transform for the call spread operator has also been enabled.

JSX
Breaking Changes

A change was made to how some JSX was parsed, specifically around the use of > or } when inside an element. Previously it would be treated as a string but now it will be treated as a parse error. The jsx_orphaned_brackets_transformer package on npm can be used to find and fix potential issues in your JSX code.
 ['Add documentation for shallow testing\nSee #2393 for the original issue, and #2497 for the implementation.', "Mention shallow rendering's limitations\nAlso, move it to the bottom of the test utils documentation and mention that it's experimental.", '[docs] show line numbers in online jsx compiler', 'Community Roundup #25 blog post', 'Update 2015-03-03-community-roundup-25.md', 'Update 2015-03-03-community-roundup-25.md', 'Update 2015-03-03-community-roundup-25.md', 'v0.13.0-rc2 starter kit', 'There was a redundant word in the sentence', 'v0.13 rc blog post', 'Facebook, not FaceBook', 'Merge pull request #3305 from brafdlog/patch-1\nThere was a redundant word in the sentence', 'Merge pull request #3304 from facebook/matthewjohnston4-croundup-1\nCommunity Roundup #25 blog post', 'Update round-up 25\n(cherry picked from commit 40336d81442882272b73cbb3c2b587d24d3f2da3)', "[docs] Fox Ryan's name: #3311", 'Merge pull request #3294 from zpao/jsxcompiler-linenumbers\n[docs] show line numbers in online jsx compiler', 'Add warning when using non-component element types\nThis should make debugging easier for people who missed callsites when fixing up their JSX/non-JSX usage.', '[Docs] Add \'ing\' to make "opening" and "closing" line up\nTest Plan:\nNone', 'Merge pull request #3333 from ariabuckles/docs\n[Docs] Add \'ing\' to make "opening" and "closing" line up', 'Updated docs examples/recommendations to use findDOMNode instead of getDOMNode', 'Merge pull request #2802 from jsfb/findDOMNode-in-docs\nUpdated docs examples/recommendations to use findDOMNode instead of getDOMNode', 'Allow null and undefined values in non-frag object passed to PropTypes.node', 'Fix documentation typo in ReactComponent', 'Update reactComponentExpect.js', 'Merge pull request #3336 from facebook/cpojer-patch-1\nFix documentation typo in ReactComponent', 'Update jstransform and esprima-fb dependencies', 'Add documentation about JSX and displayName.\nThe section that described how JSX transform handles displayName was lost in commit 9b1ee4de4636fcc9af1cf93099e062a3f6eb96f5\nFixes #3338', 'Add onContextMenu to events doc', 'Merge pull request #3343 from BinaryMuse/docs/bkt-add-contextmenu-event\nAdd onContextMenu to events doc', 'Update to derequire@^2.0.0', 'Merge pull request #3341 from rickbeerendonk/3338-documentation-issue\nAdd documentation about JSX and displayName.', 'Merge pull request #3339 from gabelevi/patch-1\nUpdate jstransform and esprima-fb dependencies', 'Merge pull request #3331 from zpao/null-frag-proptypes\nAllow null and undefined values in non-frag object passed to PropTypes.node', 'Merge pull request #3337 from facebook/cpojer-patch-2\n"Better" duck typing in reactComponentExpect', 'Merge pull request #3345 from zertosh/update-derequire\nUpdate derequire (and greatly improve build speed)', 'Merge pull request #3330 from spicyj/no-render\nAdd warning when using non-component element types', 'Fix Perf displayName with ES6 classes', 'Merge pull request #3347 from koba04/fix-perf-displayname\nFix addons.Perf displayName with ES6 classes', 'Update relevant URLS to HTTPS\nUpdate relevant URLS to HTTPS', 'Add docs for createFragment', 'Merge pull request #3353 from spicyj/frag\nAdd docs for createFragment', 'Merge pull request #2963 from graue/document-shallow-testing\nAdd documentation for shallow testing', 'Merge pull request #3358 from coliff/patch-1\nUpdate relevant URLS to HTTPS', 'Add deprecation note for deprecated component APIs', "Deprecate replaceProps\nThis isn't supported on plain JS classes anyway, so this is just adding\na warning in DEV before the code throws.", 'Merge pull request #3361 from zpao/deprecate-replaceprops\nDeprecate replaceProps', 'Merge pull request #3360 from zpao/0.13-docs-api-deprecations\nAdd deprecation note for deprecated component APIs', '[docs] React.cloneElement', 'Added docs about the first-parameter-is-function version of setState.', 'Update the examples for 0.13\nThe only substantial difference here is that I made the harmony example use ES6\nclasses. The server rendering example was pretty wacky and hard to run but\nI did confirm that it works.', 'Merge pull request #3354 from zpao/0.13-examples\nUpdate the examples for 0.13', 'Merge pull request #3362 from jsfb/docs-for-setstate\nAdded docs about the first-parameter-is-function version of setState.', '0.13 blog post', 'Added docs about the ref-as-callback.', 'Merge pull request #3364 from jsfb/refs-docs\nAdded docs about the ref-as-callback.', 'A couple small changes to the changelog for 0.13', 'Merge pull request #3363 from zpao/0.13-docs-cloneelement\n[docs] React.cloneElement', 'Changelog for 0.13', 'Update AUTHORS for 0.13', 'Merge pull request #3283 from zpao/0.13-authors\nUpdate AUTHORS for 0.13', '[docs] Update acknowledgements\nMissed updating this in #3283 before merging.', 'Add deprecation note to blog post and changelog', 'ES6 Class Docs\nSome minor burried docs.', 'Merge pull request #3366 from sebmarkbage/docs2\nES6 Class Docs', 'with the exception for -> with the exception of', 'shrinkwrap', 'Update readme for 0.13', 'v0.13.0']v0.13.0-rc2  ['v0.13.0-rc1 starter kit', 'Make cloneWithProps typechecks static-only', 'clarifies forceUpdate method', 'do not show empty "docs-prevnext" div on single page\nto remove additional necessary spacing between content and footer', 'Merge pull request #3251 from Simek/empty-docs-prevnext-fix\ndo not show empty "docs-prevnext" div on single page', 'Add Blog Post about ReactElement Changes in 0.13\nExplains some of the rationale for the new warnings added in 0.13.', 'Merge pull request #3250 from sebmarkbage/blogpost\nAdd Blog Post about ReactElement Changes in 0.13', '[Blog] Fix post code snippet display\nI think nokogiri (is that what we use?) accidentally escaped this\nsnippet. Simply putting spaces between braces fixes it.', 'Merge pull request #3255 from chenglou/fix-blog-post\n[Blog] Fix post code snippet display', 'Fix typo\n(cherry picked from commit 4d90b9bdf3fc4ccfd2ccbaf9a590b16f06746b55)', 'v0.13 RC blog post\nNote: we need to manually specify date in these files so that the sort order is\ncorrect (2 posts on the same day). Otherwise it will just be ABC order, which\nis wrong.\nCloses: #3256', 'Add mention of go and php server implementations in React tutorial', 'Merge pull request #3257 from danmane/update-tutorial-md\nAdd mention of go and php server implementations in React tutorial', 'beta1 blog entry: Fix CoffeeScript example\nFix the constructor call and make code more idiomatic.', 'Merge pull request #3239 from rralian/update/docs-clarify-forceUpdate\nDocs: clarifies forceUpdate method', 'Avoid passing this of a static object\nRefactoring artifact.', "Add cloneElement Implementation\nThis is a new version of cloneWithProps but this one is moving out of\nadd-ons. Unlike cloneWithProps, this one doesn't have special logic for\nstyle, className and children.\nThis one also preserves the original ref. This is critical when upgrading\nfrom a mutative pattern where a child might have a ref on it.\nIt also preserves context, which is similar to how context would work when\nit is parent based. It also ensures that we're compatible with the old\nmutative pattern which makes updates easier.", 'Merge pull request #3265 from sebmarkbage/shouldupdaterefs\nAvoid passing this of a static object', "Don't use undefined as parent name in key warning\nFixes #3222.", 'Add regression test for scry order\nFixes #2978.', 'Add note about enter/leave bubbling\nFixes #2826.', 'Changed the url of the video in community-round-up-4\nThe url was using http instead of https, which results in an error.', 'Fixed the url in community-roundup-5\nusing http resulted in an error, changing it to https fixes it', 'Fixed the url in community-roundup-9\nusing http resulted in an error, changing it to https fixes it', 'Merge pull request #3263 from wmertens/patch-1\nbeta1 blog entry: Fix CoffeeScript example', 'XJS -> JSX\nPart 1: change all of our methods and AST node types.\nPart 2: Rename files so there is no trace of XJS', 'Remove unnecessary variable from test', 'Merge pull request #3288 from apaatsio/remove-unnecessary-variable-in-test\nRemove unnecessary variable from test', 'Upgrade package dependencies for new esprima/jstransform', 'ReactFragment counts as a node without warning\nFixes #3286.', 'Add a code format in 2015-02-24-react-v0.13-rc1.md', 'Merge pull request #3295 from koba04/patch-1\nAdd a code format in 2015-02-24-react-v0.13-rc1.md', 'Merge pull request #3284 from delftswa2014/bugfix/blog/https-urls\nFixed the http url in the blog pages', 'Merge pull request #3293 from spicyj/gh-3286\nReactFragment counts as a node without warning', 'Merge pull request #3266 from sebmarkbage/cloneelement\nAdd cloneElement Implementation', 'Merge pull request #3276 from spicyj/gh-2978\nAdd regression test for scry order', "Merge pull request #3275 from spicyj/gh-3222\nDon't use undefined as parent name in key warning", "Always use a static message formats\nThese are the only places that seems to be including environment specific\nvariables in the message format.\nBy ensuring that they're static, we make it easier to group logs by\nformat. I also ensure that I keep each addendum separate so that they can\nbe filtered/grouped separately.", 'Merge pull request #3299 from sebmarkbage/fixwarningformats\nAlways use a static message formats', 'Merge pull request #3264 from zpao/transform-jsx\nXJS -> JSX', "Sync out another jsx transform test.\nWe added this test internally and it never got added here. We haven't broken it\nwith any transforms yet but it's still good to actually run all of our tests\nhere too.", '[lint] fix errors from new test', 'Update bower release task\nThis makes it so we only delete some files during the buld process. We were\nlosing the LICENSE and PATENTS files.', 'v0.13.0-rc2']v0.13.0-rc1  ['IE8 does not have a setter for property "enctype"', "add a section at 'jsx-in-depth' talking about namespaced components", 'change the global variable to a new sample component', 'Error when unmountComponentAtNode receives non-node', 'change note comment about namespaced components', 'Highlighted changed lines in examples', 'Fix: Always return boolean from isNullComponentID', 'avoid reading the scroll position twice', "Allow iterables in traverseAllChildren\nThis lets you use any kind of iterable as a container of react child elements. It also preserves keys when possible if the iterable is keyed.\n\nUse an ES6 Map or Set to hold children.\nUse an Immutable-js collection to hold children.\nUse a function* which yields children.\n\nConcretely, this removes the necessary conversion to JS objects if you're mapping over Immutable-js collections to get children, i.e.:\n```\n\n  {myImmutable.map(val => {val}).toJS()\n\n```\nNow we can remove the toJS() and the intermediate allocation along with it.\nThis also cleans up the traverseAllChildrenImpl method.", 'Bump version to 0.13.0-alpha', 'Added missing semicolon after statement.', 'Add \\n after  to fix missing linebreaks\nSame for  and . Browsers are crazy.\nTest Plan: jest, verify in Chrome that starting textareas with a value starting with two newlines renders both newlines instead of one newline, as it did before.', "Refactor composite component update flow\nFixes #1392.\nPreviously, ReactComponent.updateComponent set the new props and owner and updated the component's refs. Because it did the actual props assignment, it had to be called by ReactCompositeComponent between componentWillMount and componentDidMount, meaning that it was skipped if shouldComponentUpdate returned false. Now, updateComponent takes the old and new descriptors and only updates refs, allowing a subclass to call updateComponent at a convenient time (specifically, it can be before this._descriptor is updated if the subclass also overrides performUpdateIfNecessary).\nThe new update cycle for composites is:\n\nreceiveComponent is called which stores this._pendingDescriptor and calls performUpdateIfNecessary directly or a state update is enqueued, in which case ReactUpdates will call performUpdateIfNecessary\nperformUpdateIfNecessary ensures that an update is still pending (which might no longer be the case if an update is queued for a subcomponent that was updated through a parent's reconciliation) and calls updateComponent with the old and new descriptors\nupdateComponent calls super to update refs, then calls componentWillReceiveProps (if applicable) and shouldComponentUpdate -- if shouldComponentUpdate returns false, this._descriptor, this.props, and this.state are updated and the update is skipped; else, _performComponentUpdate is called\n_performComponentUpdate calls componentWillUpdate and _updateRenderedComponent, and enqueues the componentDidUpdate call (in that order)\n_updateRenderedComponent calls render and updates the rendered component appropriately\n\nFor DOM components (essentially unchanged):\n\nreceiveComponent is called which does a short-circuit check for descriptor equality and delegates to super (which stores this._pendingDescriptor and calls performUpdateIfNecessary)\nperformUpdateIfNecessary (not overridden) sets new values for this.props, etc. and calls updateComponent\nupdateComponent does the DOM property and children updates (some synchronously, some queued for the transaction close)\n\nFor text and ART components (unchanged):\n\nreceiveComponent updates the DOM or ART directly based on the new props\nupdateComponent is never called\n\nNotable changes:\n\nWhen shouldComponentUpdate returns false, refs are still updated\nReactDefaultPerf now includes lifecycle methods in component timings\nupdateComponent's signature changed (technically this is part of the public API, though we've never documented it)\n\nTest Plan: jest", 'Merge pull request #2376 from leebyron/iterable\nAllow iterables in traverseAllChildren', 'Introduce React Class as an alias for Composite Component\nThis is in preparation for the separation of Composite Component internals\nfrom the Class abstraction.', 'Move Class Creation Concerns to ReactClass\nThis moves logic responsible for class creation and mixins into\nthe ReactClass module. This currently creates a class that extends\nthe ReactCompositeBase but in the future, this will be decoupled as\nReactCompositeComponent will compose these classes.\nThis is just a cut/paste.', 'Added missing semicolons identified by using grunt jshint:project.', "Merge remote-tracking branch 'upstream/master' into fix-gruntfile", 'Merge pull request #2397 from mjul/fix-gruntfile\nAdded missing semicolon after statement.', 'Hide ReactElement constructor\nThis prevents feature tests like:\nvar ReactElement = React.createElement(...).constructor;\nif (element.constructor === ReactElement)\nThis is intentional so that we have the option to make these plain objects.\nE.g. for direct inlining or replacing them with value types.', 'Merge pull request #2396 from sebmarkbage/classmodule\nMove Class Creation Concerns into a ReactClass Module', 'Merge pull request #2387 from fabiomcosta/avoid_double_scrollread\navoid reading the scroll position twice', 'Merge pull request #2084 from kimagure/unmount-comp-error\nError when unmountComponentAtNode receives non-node', 'TodoMVC live demos have moved.', 'Remove obsolete jshint options', 'Merge pull request #2409 from enaqx/master\nRemove obsolete jshint options', 'Move Object.assign file to align with internal', 'React.js Conf blog post\nCloses #2412', 'Changing api documentation for jsx transformer\nHi in chrome debugger, the files that use sourcemaps from the transformer get "null" as the filename during debug, https://github.com/facebook/react/blob/master/main.js#L15 "sourceFilename" is used instead of "filename" to specify the filename in the sourcemap.', "Moved key requirement note into 'getting started'\nIt's an important note and it was buried too far down the page. Now it's more prominent and harder for people to miss (like I did).", "Merge pull request #2414 from benleiken/patch-1\nMoved key requirement note into 'getting started'", 'Merge pull request #2413 from LeonFedotov/patch-1\nChanging api documentation for jsx transformer', "Ensure PropTypes test works when warning module is replaced\nFor example, warning might be replaced with a module that throws errors,\nas is the case internally when running tests. Previously we were\nwhitelisting this test to provide time to update callsites. Now we\naren't and it fails.", 'Fixing touch/mouse issues with TapEventPlugin\nOn ios device, browser simulates mouse events, but does that with\na delay, because of double tap gesture. The problem is that\nTapEventPlugins listens to both types of events, so it fires twice\nEverytime there is a touch event, we should ignore mouse events that\nfollow it.  This way, we still respond to both mouse and touch events,\njust ignore the device generated ones.', 'Update jstransform version to ^7.0.0', "Merge branch '0.12-stable'", 'Correct changes from 0.12-stable merge', 'Change the date and the link url to match the proper roundup', 'Add 0.12 starter kit', 'Added comma to increase readability.\nWhen thumbing through the docs, I noticed a few missing commas. I inserted two commas and did not alter any source code.', 'Merge pull request #2418 from spencer48/patch-1\n(docs) Added commas to increase readability.', 'Merge pull request #2415 from zpao/sync-internal\nSync internal', 'Merge pull request #2416 from zachasme/update-jstransform\nUpdate jstransform version to 7.0', 'Drop ReactDOM from internal DOM extensions\nThese used to be exposed as strings on the legacy factories but are now\ngone.', "Drop Legacy Factories Around Classes\nClasses are now pure classes without a legacy factory around them.\nSince classes will become just any function that returns a valid instance,\nlet's drop isValidClass.\nThere's some hacks in here for auto-mocking frameworks (jest) that mock the\nprototype of these classes. These hacks allow these classes to be mounted.", 'Drop internal uses of .type on the class', 'Add comma for readability in tutorial', 'Merge pull request #2375 from sebmarkbage/droplegacyfactories\nDrop Legacy Factories', 'Followup fix for React.PropTypes.node\nThis should have gone in as a part of #2343', 'React.renderComponent --> React.render\nAlso fixed a spelling mistake.', 'Merge pull request #2428 from cody/fixes\nReact.renderComponent --> React.render', 'Extending period in which click events are ignored', 'Merge pull request #2431 from wassil/master\nExtending period in which click events are ignored', 'Merge pull request #2419 from johnheroy/patch-1\nAdd comma for readability in tutorial.md', 'Bring in jsfiddle integration script, add harmony', 'Update deprecated propTypes', "Use dump cache and remove factory from ReactElement-test\nWe need to use dump cache because we don't enable it by default internally.\nWhile I'm at it, I might as well kill the ComponentFactory variable which\nis now just an alias.", 'Merge pull request #2434 from Shraymonks/propTypes-docs\nUpdate deprecated propTypes', 'Cleanup a couple unused variables', 'Merge pull request #2437 from zpao/lint-cleanup\nCleanup a couple unused variables', 'Merge pull request #2435 from sebmarkbage/fixretest\nUse dump cache and remove factory from ReactElement-test', 'Fix typo in If/Else JSX doc.', 'Merge pull request #2443 from kruppel/kurt/minor-tip-typo\nFix typo in If/Else JSX doc.', 'Merge pull request #2433 from zpao/fiddle-integration\nBring in jsfiddle integration script, add harmony', 'Remove unrelated comment\nThis is no longer unwrapping a legacy factory (which are gone).', 'Use double quote for transformed displayName and data-*\nJSX currently transforms everything to double quote except these two. This way, it\'s at least consistent and will satisfy half of the people who do put a strict quotation linting on their project.\nTest: jest, check the double quoted transformed data-bla="something".', "Add 'use strict' to statisfy linter rules", 'Trailing commas break old IE versions', 'ReactDOMSelect makeover, fix edge-case inconsistencies and remove state', "[traverseAllChildren] fix out-of-scope var use.\nDear ES6 gods, bring us let soon.\nThis fixes an issue where non-keyed iterables are used as children and the value of i would be undefined because its used out of scope. This adds a separately scoped iteration index value and appropriately increments it as iteration continues. Doi.\nWhile I'm in there, make the usage of falsey nameSoFar more obvious and more consistent with the existing usage on L115\nTest plan: first wrote a test covering this previously untested path. Saw an identical issue as was experienced in development environment. Then ensured test passed after this diff.", 'Merge pull request #2458 from leebyron/fix-iterable\n[traverseAllChildren] fix out-of-scope var use.', 'Update React.renderToString argument type in docs\nrenderToString and renderToStaticMarkup now take a ReactElement.\nUpdate the documentation to reflect this recent change.', 'Merge pull request #2463 from fson/render-to-string-docs\nUpdate React.renderToString argument type in docs', 'Remove esprima-fb and use Syntax from jstransform', 'Merge pull request #1708 from chenglou/displayName\nUse double quote for transformed displayName', 'Merge pull request #2224 from zertosh/remove-esprima-fb-dep\nRemove esprima-fb and use Syntax from jstransform', "Merge branch 'master' into docs-namespace-in-jsx\n\nmaster: (113 commits)\n  Remove esprima-fb and use Syntax from jstransform\n  Update React.renderToString argument type in docs\n  [traverseAllChildren] fix out-of-scope var use.\n  Use double quote for transformed displayName and data-*\n  Remove unrelated comment\n  Fix typo in If/Else JSX doc.\n  Cleanup a couple unused variables\n  Use dump cache and remove factory from ReactElement-test\n  Update deprecated propTypes\n  Bring in jsfiddle integration script, add harmony\n  Extending period in which click events are ignored\n  React.renderComponent --> React.render\n  Followup fix for React.PropTypes.node\n  Add comma for readability in tutorial\n  Drop internal uses of .type on the class\n  Drop Legacy Factories Around Classes\n  Drop ReactDOM from internal DOM extensions\n  Added comma to increase readability.\n  Add 0.12 starter kit\n  Change the date and the link url to match the proper roundup\n  ...\n\nConflicts:\n    docs/docs/02.1-jsx-in-depth.md", 'update namespaced component to adapt with the v0.12', 'Fixing some newline-preserving issues\nDone internally as part of\nhttps://github.com/facebook/jstransform/commit/f9836a39126675fd37b40a3598c539b50a1ec69b', 'Merge pull request #2452 from Shahor/master\nTrailing commas break old IE versions', 'Merge pull request #2408 from Peeja/patch-1\nTodoMVC live demos have moved.', "Merge pull request #2446 from enaqx/master\nAdd 'use strict' to statisfy linter rules", 'bugfix: remove conflict comment', 'Initial implementation of new-style refs\ncf. #1373\nThis implementation can be used in any situation that refs can currently be used (and can also be used without an owner, which is a plus).', 'Add SSR at SoundCloud talk', 'Merge pull request #2241 from syranide/selectvalue\nReactDOMSelect makeover, fix edge-case inconsistencies and remove state', 'Use adjective "too" instead of "to"\nThe author clearly intended to use the adjective "too" to mean "excessively" instead of the preposition "to".', 'Merge pull request #2475 from jsfb/master\nUse adjective "too" instead of "to"', 'Merge pull request #2473 from zertosh/docs-ssr-at-sc\nAdd React at SoundCloud talk', 'Using semicolon instead of "and" conjunction\nThe use of the conjunction "and" leads to an improper assertion about what should/shouldn\'t be done.  Using a semicolon resolves this by indicating the contrasting alternative.', 'Merge pull request #2476 from jsfb/patch-1\nUsing semicolon instead of "and" conjunction', 'Separate React Composite and Class\nReactClass is now composed by ReactCompositeComponent rather than\ninherit from it.\nThe state transition functions currently use ReactInstanceMap to map an\ninstance back to an internal representation.\nI updated some tests to use public APIs. Other unit tests still reach into\ninternals but now we can find them using ReactInstanceMap.\nI will do more cleanup in follow ups. The purpose of this diff is to\npreserve semantics and most of the existing code.\nThis effectively enables support for ES6 classes. All you would need to\nexpose is ReactClassMixin.', 'Merge pull request #2445 from sebmarkbage/classes\nSeparate React Composite and Class', 'Fix odd formatting in ReactDOMComponent-test\nTest Plan: Crossed fingers.', "Test that text spans aren't remounted needlessly\nWhile working on #2382, I accidentally broke this behavior (causing text components to get unmounted and remounted for any update) but we didn't have any unit test for it. Now we do.\nTest Plan: jest TextComponent", 'Fix some minor typos in doc comments / code comments.', 'Merge pull request #2479 from spicyj/nitfix\nFix odd formatting in ReactDOMComponent-test', "Merge pull request #2480 from spicyj/text-stability\nTest that text spans aren't remounted needlessly", 'Merge pull request #2481 from mjul/fix-typos\nFix some minor typos in doc comments / code comments.', 'Add strokeOpacity to unitless CSS properties', 'Merge pull request #2482 from BinaryMuse/bkt/fix-stroke-opacity\nAdd strokeOpacity to unitless CSS properties', 'Add Attributes formAction, formEncType, formMethod and formTarget\nThis resolves #2425.', "There's no isComponentOfType() anymore", "Merge pull request #2498 from ikr/patch-1\nThere's no isComponentOfType() anymore", "Removing unecessary resize listener\nmonitorScrollValue is only called with ViewportMetrics.refreshScrollValues (https://github.com/facebook/react/blob/master/src/browser/ReactBrowserEventEmitter.js#L333-L334) and the window scroll properties (scrollTop and scrollLeft) don't change on resize (from my testings), so there is no need to listen for window resizes.\nI also tried to see why the resize listener was added from the history but it was introduced on the initial commits.\nI created a simple page that shows that http://jsbin.com/nuhice, open the console.", 'Adding "appear" phase to ReactTransitionGroup and ReactCSSTransitionGroup.\n"appear" differs from "enter" in that all children of a transition group at mount time will "appear" but will not "enter". All children later added to an existing transition group will "enter" but not "appear".\nThis extra transition phase allows for animation-on-mount effects.\nA mirroring "appear" prop has been added to ReactCSSTransitionGroup, however for reverse-compatibility (and because "appear" is less common) it defaults to false.\nThanks to @afa for his work investigating the possible ways to implement this.', 'Update ref-09-glossary.md', 'Merge pull request #2512 from leebyron/transition-appear\nAdding "appear" phase to ReactTransitionGroup and ReactCSSTransitionGroup', 'Merge pull request #2514 from jvalente/patch-1\nUpdate ref-09-glossary.md', 'Warn when casing CSS vendor prefixes incorrectly\nFixes #2487.\nTest Plan: jest', 'Stop treating key={null} as an unspecified key\nThis reverts commit dd92786fb038c4eb7c6545928646ec8aa9ecfa36, which was intended to be temporary for the 0.12 release.\nFixes #2394.', 'Update stripTypes transform to use fixed up jstransform transform', 'Merge pull request #2385 from shripadk/bool-fix\nFix: Always return boolean from isNullComponentID', "Make ReactTextComponent properly injectable\nReactTextComponent's implementation is DOM-specific; instead of flattenChildren creating the ReactTextComponent instances, ReactNativeComponent now takes care of having ReactTextComponent injected and creating the component instance. I also renamed ReactTextComponent to ReactDOMTextComponent and moved it to browser/ui/ where it belongs. ReactDOMTextComponent no longer inherits directly from ReactComponent and instead implements construct and {mount,receive,unmount}Component directly.\nThis diff removes ReactTestUtils.isTextComponent which should have previously never returned true when using public APIs.\nTest Plan: jest, use ballmer-peak example.", 'Fix problems with empty component ID registration\nFixes #2493, also closes #2353 as it incorporates a variant of that fix.\n\nInstead of having getEmptyComponent return <noscript /> directly, wrap it in a class that we can easily identify later as being an empty component\nCache the empty component element instead of recreating one each time\nAvoid touching the nullComponentIdsRegistry dictionary at all when not dealing with empty components\nMove empty-component tests to a separate file\n\nTest Plan: jest', 'Merge pull request #2527 from gabelevi/master\nUpdate stripTypes transform to use fixed up jstransform transform', 'Wrap every DOM node in a Composite Component\n...unless they already have a wrapper. Also, add tagName to every wrapper.\nThis ensures that refs are consistent. They always look like composite\ncomponents. This effectively hides the internal implementation details of\nreal DOM components since you can no longer get a ref to one.\nIn the future we might want to drop this wrapper and have refs refer\ndirectly to the DOM node.\nI currently use a hacky way of auto-wrapping inside of ReactNativeComponent\nso that any given string can be wrapped. Better suggestions are welcome.', "Inject browser mixin before full-page components\ncreateFullPageComponent doesn't reference ReactBrowserComponentMixin directly so the mixin should get injected before the components are created. Previously, this test failed because getDOMNode wasn't present on the component instance.\nTest Plan: jest", 'Merge pull request #2537 from sebmarkbage/hidedomcomponentinternals\nWrap every DOM node in a Composite Component', 'Fix up variable names and types to be correct\nTest Plan: jest', "Don't mutate .props.style in ReactDOMComponent\nWe currently make a copy of .style because we support mutating the style object in place. Instead of storing it back on props, store it separately on the component instance so that we don't mutate props anywhere. This is gross but should all be cleaned up after #2008 is resolved.\nTest Plan: jest", "Remove transferPropsTo\nI'd like to outlaw prop mutation altogether, and now seems like a fine time to remove transferPropsTo.\nTest Plan: jest", 'Move logic for null to instantiateReactComponent\nThis cleans up the code a bit and also brings us closer to allowing any ReactNode to be rendered at the top level.\nTest Plan: jest', 'Drop inaccessible methods\nThese are no longer accessible and the isOwnedBy check is only used in\na method that is not accessible.', 'Drop this.props', 'Drop ReactOwner.Mixin\nThis is not used anywhere else. To avoid overabstraction we should just\ninline this.', 'Drop the _owner and _lifeCycle field on internal instances\nThe _owner field is unnecessary since it\'s reachable from _currentElement.\nThe _lifeCycle field is unnecessary because an internal component should\nnot even need to exist at all if it\'s unmounted. It should be dereferenced\ninternally, and never exposed externally.\nThe only case where it\'s important is for batching updates where we\ncurrently avoid calling performUpdateIfNecessary if it\'s mounted. However,\nthis function is already only executed "if necessary" so we just make sure\nthat it\'s not necessary after unmount by resetting all the pending fields.', "Add test for warning in ReactElementValidator\nI previously had a mistake here, so I'm adding a unit test to ensure that I\ndon't make the same mistake again.", 'Merge pull request #2539 from sebmarkbage/cleanupinternals\nClean up a bunch of internal methods and fields that are now unnecessary', 'Update 10.4-test-utils.md\nThis adds minimal valid event data to the Simulate.change example for a text input field.', "Shallow rendering support (#2393)\nNow handles updating. Haven't looked at refs yet.", 'Merge pull request #2497 from graue/2393-v1\nBasic shallow rendering support (#2393)', "Move mountComponentIntoNode and setProps out of ReactComponent\nThis is part of moving more logic out of the base classes.\nsetProps, replaceProps etc. are not accessible from anything other than\nReactClass so we can safely move it to ReactCompositeComponent.\nmountComponentIntoNode is tightly coupled to ReactMount. It's part of the\nouter abstraction, the mount point, not the individual component.", 'Move _pendingX into ReactCompositeComponent\nSince setProps can no longer be called on anything but composites, we can\nmove this complexity into ReactCompositeComponent.', "Ensure that all internal instances have consistent properties\nUse preventExtensions so that we can't add expando properties to internal\ninstances. This ensures that the hidden class is kept more consistent.", 'Unused variables', 'Merge pull request #2546 from sebmarkbage/cleanupinternals\nMove more stuff out of ReactComponent', 'Added warning if owner-based and parent-based contexts differ.', 'Merge pull request #2509 from jsfb/use-parent-context\nInitial implementation of issue #2112', "Fixed 'imports' to resolve merge conflict", "Move ComponentEnvironment out of ReactComponent\nWe currently have three DOM specific hooks that get injected. I move those\nout to ReactComponentEnvironment. The idea is to eventually remove this\ninjection as the reconciler gets refactored.\nThere is also a BackendIDOperation which is specific to the DOM component\nitself so I move this injection to be more specific to the DOMComponent.\nE.g. it makes sense for it to be injectable for cross-worker DOM operations\nbut it doesn't make sense for ART components.", 'Merge pull request #2508 from jsfb/monitor-with-context\nStart monitoring uses of withContext, related to issue #2112', 'Merge pull request #2550 from sebmarkbage/cleanupinternals\nMove ComponentEnvironment out of ReactComponent', 'Permit th  attribute', 'Update tutorial language to be more explicit.\nThe word "Friends" does establish a relationship however it does not fit in the vernacular of react. \nThis change makes the phrase more explicit and more familiar.', "Stop Mutating Merged Lifecycle Results\nSummary:\nCurrently, ReactClass mutates values returned by getDefaultProps, getInitialState, and getChildContext. This is bad because the objects may, for example, be cached and re-used across instances of a React component.\nThis changes ReactClass to instead create a new object. In return for allocating a new object, I've replaced mapObject with a for ... in so that we are no longer allocating an unused object.\nFair trade, IMO.\nTest Plan:\nRan unit tests successfully:\nnpm run jest\nConflicts:\n    src/core/ReactCompositeComponent.js\nConflicts:\n    src/class/ReactClass.js", 'Merge pull request #2464 from yungsters/immutable\nStop Mutating Merged Lifecycle Results', 'Animation documentation for ReactTransitionGroup\nUpdate to the animation documentation for ReactTransitionGroup to clear the air on where one can use it.\nIf someone tries to use it off of React.addons.ReactTransitionGroup, which is undefined, instead of its real location, React.addons.TransitionGroup, they get a vague error about being unable to set defaultProps of undefined in the React createElement body.', 'Preserve Implicit Method Names\nSummary:\nChanges the way we instrument methods for ReactPerf so that developer tools can assign implicit method names to measured functions.\nReviewers: @zpao @sebmarkbage', 'Merge pull request #2465 from yungsters/perf\nPreserve Implicit Method Names', "Remove some invariants and deadcode\nThese are not necessary if we enable type checks. Static or dynamic.\nThey're distracting my greppability.\nAlso, some dead code in shallow rendering.", 'Merge pull request #2552 from sebmarkbage/cleanupinternals\nRemove some unnecessary code in ReactComponents', 'Merge pull request #2555 from mfunkie/patch-1\nAnimation documentation for ReactTransitionGroup', 'Merge pull request #2554 from samccone/patch-1\nUpdate tutorial language to be more explicit.', 'Merge pull request #2544 from mjul/patch-1\nUpdate 10.4-test-utils.md', 'Summary:\nCurrently, ReactUpdates updates dirty components in increasing order of mount depth. However, mount depth is only relative to the component passed into React.render. This breaks down for components that invoke React.render as an implementation detail because the child components will be updated before the parent component.\nThis fixes the problem by using the order in which components are mounted (instead of their depth). The mount order transcends component trees (rooted at React.render calls).\nReviewers: @sebmarkbage @zpao\nTest Plan:\nRan unit tests successfully:\nnpm run jest', 'Merge pull request #2570 from yungsters/updates\nUpdate Dirty Components in Mount Ordering', 'Replace mountDepth with isTopLevel\nSummary:\nAfter #2570, mountDepth is only used to enforce that setProps and replaceProps is only invoked on the top-level component. This replaces mountDepth with a simpler isTopLevel boolean set by ReactMount which reduces the surface area of the internal API and removes the need to thread mountDepth throughout React core.\nReviewers: @sebmarkbage @zpao\nTest Plan:\nRan unit tests successfully:\nnpm run jest', 'Merge pull request #2571 from yungsters/cleanup\nReplace mountDepth with isTopLevel', 'Removed context paremeter to renderToString/renderToStaticMarkup.', 'Merge pull request #2565 from jsfb/fixwhitespace\nRemoved context paremeter to renderToString/renderToStaticMarkup.', 'Separate Child Reconciliation Step from Diffing\nThis separates the reconciliation step of children into a separate module.\nThis is the first step towards prerendering.\nThe stateful instances are reconciled and put into a "rendered children"\nset. Updates creates a new of these sets. These two sets are then diffed\nto create insert/move/remove operations on the set.\nThe next step is to move the ReactChildReconciler step to before the\nnative DOM component. That way it\'s possible to rely on child\nreconciliation without relying on diffing.', 'Merge pull request #2567 from sebmarkbage/childrenreconciler\nSeparate Child Reconciliation Step from Diffing', 'Update variable name and doc type to be accurate\nTest Plan: Crossed fingers.', 'Finish renaming renderComponent -> render\nTest Plan: jest', 'Fix typo in comment of jquery-bootstrap example', 'Merge pull request #2581 from spicyj/rm-elt-docs\nUpdate variable name and doc type to be accurate', 'Merge pull request #2582 from spicyj/rendercomponent\nFinish renaming renderComponent -> render', 'Add example for how to use style properly\nTest Plan: jest', 'Merge pull request #2583 from spicyj/style-example\nAdd example for how to use style properly', 'react.js conf updates', 'better wording thanks to @jwalke', 'Mention that talks will be recorded', 'Use warning module for context warning instead of invoking console.warn and monitorCodeUse directly.  Depends on https://phabricator.fb.com/D1695279', 'Merge pull request #2579 from jsfb/context-to-warning-module\nUse warning module for context warning instead of invoking console.warn ...', "Add additional field for ART reconciler\nART, just like MultiChild adds an expando property to manage it's diffing\nstate. This is ugly and bad. We should be moving this state outside the\ncomponent for use by the diffing algorithm. This state is not needed by\ncomponents nested in composites, and varies by diffing algorithm.\nIt sucks that I have to add it to every component just to support ART,\nbut that's the quickest solution, other than disabling preventExtensions.\nAt least now we know that it sucks.", 'Merge pull request #2593 from sebmarkbage/mountImage\nAdd additional field for ART reconciler', 'Wrote Community Roundup #24', 'Community #24: New Carousel link, spelled react-prism correctly, and removed the whale-speak.', 'reactComponentExpect expects itself\nThis was a bug when reactComponentExpectInternal was separated from\nthe normal reactComponentExpect flow.', 'Merge pull request #2594 from steveluscher/community-round-up-24\nWrote Community Roundup #24', 'Replaced document.createElement with ReactTestUtils.renderIntoDocument where container was not subsequently utilized.\nFixes #1250', 'Fix lint warnings, style fixups\nFollowup work for recent PRs', "Use jest for npm test\nI've given in and this is easier than npm run jest. grunt test still\nexists and is used by Travis so this has no CI implications.", 'Merge pull request #2566 from zpao/style-fixup\nFix lint warnings, style fixups', "Remove fbtransform/syntax.js\nThis was a file we probably never should have synced out in the first\nplace. We don't use it and it provides the same basic functionality that\nbin/jsx provides.", 'Merge pull request #2597 from jsfb/render-into-document\nReplaced document.createElement with ReactTestUtil', 'Merge pull request #2601 from zpao/rm-fbtransform-syntax\nRemove fbtransform/syntax.js', 'Revert "Remove fbtransform/syntax.js"', 'Merge pull request #2603 from facebook/revert-2601-rm-fbtransform-syntax\nRevert "Remove fbtransform/syntax.js"', 'Warn if context values differ, related to issue #2112', 'Merge pull request #2602 from jsfb/context-tripple-equals\nWarn if context values differ, related to issue #2', 'Merge pull request #2600 from zpao/npm-test\nUse jest for npm test', 'Merge pull request #2596 from sebmarkbage/rce\nreactComponentExpect expects itself', 'Merge pull request #2553 from mhuggins/headers-attribute\nPermit th headers attribute', 'Update commonjs example for 0.12', 'Merge pull request #2610 from zpao/update-commonjs-example\nUpdate commonjs example for 0.12', 'Monitoring code use of cloneWithProps', 'Merge pull request #2613 from jsfb/monitor-cloneWithProps\nMonitoring code use of cloneWithProps', 'Add top-level API docs section for React.createElement.', 'Adding link to wiki\nBased on conversation in https://github.com/facebook/react/pull/2501. A good place to guide people further in finding the complete set of tools needed to build an application.', 'add note re: handling events in capture phase', 'fix typo in addons.update() $splice command help', 'Merge pull request #2630 from shamrin/patch-1\nfix typo in addons.update() $splice command help', 'Give context aware message if markup reuse fails\nThe context is an extra message with comparison of where server and\nclient markup started to differ.', 'Merge pull request #2629 from arnihermann/diff-msg-on-checksum-fail\nGive context aware message if markup reuse fails', 'Fix addons documentation of development only part', 'Added checks for incorrect usage of innerHTML. Fixes #1370', 'Merge pull request #2633 from koba04/fix-addons-document\nFix addons documentation of development only part', 'Update ref-05-events.md\nuse backticks and change example into its own sentence', '[docs] Clarify when state may duplicate props', '[docs] Remove generic spread, Object.assign  mentions', 'Merge pull request #2616 from christianalfoni/patch-3\nAdding link to wiki', 'Own our fiddles so we can update them more easily', 'Screencast interfacing react + backbone', 'Merge pull request #2623 from jbhatab/patch-1\nScreencast interfacing react + backbone', 'Merge pull request #2622 from rafd/patch-1\nadd note re: handling events in capture phase', 'Merge pull request #2636 from zpao/docs/spread-assign-update\n[docs] Remove generic spread, Object.assign  mentions', 'Merge pull request #2615 from af/createElement-docs\nAdd top-level API docs section for React.createElement.', 'Remove unused require from ReactDOM-test\nThis happened internally in a codemod', "In Transferring Props guide, Manual Transfer section will lead an error\nc\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var fancyClass = this.props.checked ? 'FancyChecked' : 'FancyUnchecked';\n    return (\n      <div className={fancyClass} onClick={this.props.onClick}>\n        {this.props.children}\n      </div>\n    );\n  }\n});\nReact.render(\n  <FancyCheckbox checked={true} onClick={console.log}>\n    Hello world!\n  </FancyCheckbox>,\n  document.body\n);\nWhen click Hello world! will lead a Uncaught TypeError: Illegal invocation error", 'Use String.charAt for character by index lookup\nUsing object property accessor for string character lookup breaks in\nnon-modern browsers.', 'Merge pull request #2651 from arnihermann/use-charat-not-string-index-markup-diff\nUse String.charAt to lookup string characters by index', 'Merge pull request #2649 from cookfront/master\nIn Transferring Props guide, Manual Transfer section will lead an er...', 'Merge pull request #2639 from zpao/own-jsfiddle\nOwn our fiddles so we can update them more easily', 'Merge pull request #2635 from zpao/docs/props-state-clarification\n[docs] Clarify when state may duplicate props', 'Use getSelection in IE where available\nIE9+ has support for window.getSelection, but we’re still using\ndocument.selection for IE9/10. Only use the old IE selection API if the\nmodern one is unavailable.', 'Merge pull request #2653 from salier/ie-selection\nUse getSelection in IE where available', 'Support marginHeight and marginWidth attributes\nmarginHeight and marginWidth are used on iframes to set the default body margin inside the iframe.', "Don't need MUST_USE_ATTRIBUTE for margin(Width|Height)", 'Merge pull request #2489 from cody/form\nAdd Attributes formAction, formEncType, formMethod and formTarget', 'Merge pull request #2658 from ianobermiller/margin-attrs\nSupport marginHeight and marginWidth attributes', 'Update 10.6-update.md\nSpelling fix.', 'Merge pull request #2671 from benkeen/patch-1\nUpdate 10.6-update.md', 'The same problem in issue #2648', 'Merge pull request #2672 from cookfront/master\nThe same problem in issue #2648', 'Add type signature info to top-level API docs.', 'Add top-level API docs for React.createFactory.', "Fix new lint errors\nWe'll get to lint parity soon and then not need to do this.", 'Merge pull request #2677 from zpao/lint-internal\nFix new lint errors', 'Add missing verb\nThis adds a missing verb in JSX-in-depth doc.', 'Merge pull request #2679 from tschaub/patch-1\nAdd missing verb in docs', 'Add Chinese translation of jsx-in-depth', 'Combine BeforeInput and Composition event plugins\nIn order to improve support for Chinese and Japanese IME input in\nInternet Explorer, use a fallback composition state to determine\ninserted text. IE composition events are mostly okay, except for\ncertain punctuation characters that are ignored. Using the fallback, we\ncan detect these characters.\nThe fallback is also useful for emitting beforeInput events, so it\nmakes sense to simply combine these plugins.\nThis change also incorporates a recent change to the Google Input Tools\nbrowser extension that exposes a data field via the detail object\non the custom composition events it emits.', 'Update BeforeInputEventPlugin.js', 'Merge pull request #2689 from camsong/master\nAdd Chinese translation of jsx-in-depth', 'Fixed ReactTestUtils scry for TextComponents.  Fixes issue #2654.', 'Merge pull request #2695 from jsfb/fix-scry2\nFixed ReactTestUtils scry for TextComponents.  Fix', 'Merge pull request #2690 from salier/before-input\nCombine BeforeInput and Composition event plugins', 'Add Chinese translation of js-spread', 'Merge pull request #2694 from camsong/master\nAdd Chinese translation of js-spread', 'Move ReactClass, ReactElement and ReactPropTypes into "traditional"\nThis moves ReactClass, ReactElement and ReactPropTypes into a legacy folder\nbut since it\'s not quite legacy yet, I call it "classic".\nThese are "classic" because they are decoupled and can be replaced by\nES6 classes, JSX and Flow respectively.\nThis also extracts unit tests from ReactCompositeComponent, which was\nterribly overloaded, into the new corresponding test suites.\nThere is one weird case for ReactContextValidator. This actually happens in\ncore, and technically belongs to ReactCompositeComponent. I\'m not sure\nwe will be able to statically validate contexts so this might be a case\nfor dynamic checks even in the future. Leaving the unit tests in classic\nuntil we can figure out what to do with them.', 'Merge pull request #2700 from sebmarkbage/classic\nMove ReactClass, ReactElement and ReactPropTypes into "classic"', 'Add Chinese translation of jsx-gotchas', 'Update 02-displaying-data.md\nTypo fix', 'Add Chinese translation of interactivity-and-dynamic-uis', 'Sync up previous Chinese documents and several minor updates on formats.', 'Enable strip-types transform for internal code\nFlow is coming so we need to be ready.', 'Merge pull request #2705 from Swader/patch-1\nUpdate 02-displaying-data.md', 'Merge pull request #2708 from zpao/strip-types\nEnable strip-types transform for internal code', 'Add toBeTextComponentWithValue to reactComponentExpect\nThis was previously possible by looking at renderedChildren and props\nbut this feels better.', 'Remove deprecated methods since 0.12 shipped', 'Merge pull request #2655 from zpao/rm-deprecated\nRemove deprecated methods since 0.12 shipped', 'Merge pull request #2647 from zpao/text-component-expect\nAdd toBeTextComponentWithValue to reactComponentExpect', 'Fix lint', 'Docs: ReactComponent -> ReactClass in a few places', 'Merge pull request #2710 from zpao/lint-fix-again\nFix lint', 'Delete extraneous period', 'Merge pull request #2716 from RichardLitt/patch-2\nDelete extraneous period', 'Update tutorial.md for grammatical changes\nUpdate tutorial.md to improve grammatical parallelism in features list. Also added periods to follow first item\'s syntax.\nBEFORE: "Live updates: as other users comment we\'ll pop them into the comment view in real time"\nAFTER: "Live updates: other users\' comments are popped into the comment view in real time."\nBEFORE: "Markdown formatting: users can use Markdown to format their text"\nAFTER: "Markdown formatting: users can use Markdown to format their text."', 'Include 0.12.1 starter kit\n(cherry picked from commit e9dde653413bd2f185cfdc855ca4d2c704b109ac)', 'Changelog, Readme updates for v0.12.1\n(cherry picked from commit a067fc0feef9e8b02cc3e9331360c57082afea19)', 'Merge pull request #2718 from alextsg/patch-1\nUpdate tutorial.md for grammatical changes', 'Update NPM dependencies\nThis was mostly to update Jest, but the others were the safe ones from\nnpm outdated --depth=0', 'Protect better against createElement(null/undefined)\nThis adds a warning to React.createElement in DEV about using null\nor undefined. This is technically valid since element creation can be\nconsidered safe and usable in multiple rendering environments. But\nrendering in a DOM environment with an element with null/undefined type\nis not safe.', 'Use containers on TravisCI\nThis should enabled the caching of node_modules for faster builds. We\nmay need to tweak this later to make sure node_modules gets updated\nSee http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/', 'Merge pull request #2726 from zpao/createElement-undefined-null\nProtect better against createElement(null/undefined)', "Added note for proper example display\njsfiddles weren't showing up for me. Upon further investigation I found that changing to http fixes the embedding.", 'Merge pull request #2733 from morenoh149/patch-1\nAdded note for proper example display', 'Merge pull request #2732 from zpao/travis-container\nUse containers on TravisCI', 'Merge pull request #2727 from zpao/update-npm-deps\nUpdate NPM dependencies', 'add Forms doc Chinese translation', 'add Event System doc Chinese translation', 'Improve comment in example code\nThis should make it more clear that even though $ is used in 4 methods, only 2 of them are crucial for integrating the modal into the components lifecycle methods and the other 2 are just helpers.', 'Revert "Monitoring code use of cloneWithProps"', 'Merge pull request #2740 from facebook/revert-2613-monitor-cloneWithProps\nRevert "Monitoring code use of cloneWithProps"', 'update docs for 0.12.2 changes\n(cherry picked from commit e6e60c4fa848d1c9ce1349eff750cfa2faf156dc)', 'Readme + Changelog for 0.12.2\n(cherry picked from commit 7468f092ae08d6d184175432d38d64d4ea4ec02a)', 'v0.12.2 blog post\n(cherry picked from commit 2f6a95d5a214bd0145c864604bc884c73ee6f865)', '0.12.2 starter kit\n(cherry picked from commit 6c5cb72cdc344e561fde6609b83c91f945127897)', 'Renamed classic/propTypes to classic/types\nI want to create a parallel folder for static type checking in the\n"modern" folder so lets use the generic "types" name.', 'Merge pull request #2744 from sebmarkbage/types\nRenamed classic/propTypes to classic/types', 'Add placeholders for static prop type tests\nThis is where tests of static prop types should go when we have the\ninfrastructure set up to handle it.', 'Added findDOMNode, as we move toward deprecating getDOMNode', 'Merge pull request #2586 from RileyTomasek/master\nFix typo in comment of jquery-bootstrap example', 'Find cases where shouldUpdateReactComponent is determined by the owner.', 'Merge pull request #2745 from sebmarkbage/types\nAdd placeholders for static prop type tests', "Separate createElement and JSX tests\nThis essentially copies all classic element creation tests to the modern\nJSX tests. The classic tests doesn't use JSX and modern tests do.\nThe idea is that the JSX tests can start dropping dynamic checks once\nwe have Flow support for those features. JSX won't be necessary for\ndropping dynamic checks. Plain object will also work. Flow will also not\nbe necessary for JSX. However, the tests should test for the suggested\ncombination (JSX + Flow).\nThis also moves some misplaced tests to ReactDOM and Validator.\nNote that the modern tests uses ES6 classes. I will add separate tests for\nthose. However, these are not guaranteed to have .displayName so all our\nerror messages should check .name if available instead. This should be\nbetter abstracted but I just adhoc fix this for now.", 'Merge pull request #2748 from sebmarkbage/modern\nSeparate createElement and JSX tests', 'Diversity Scholarship blog post', 'Fix conference year typo in blog post content', 'Merge pull request #2752 from peterblazejewicz/fix/blog-typo\nFix conference year typo in blog post content', 'Fix version typo in grunt task', 'Merge pull request #2754 from songawee/fix_version_typo\nFix version typo in grunt task', 'Update 05-maximum-number-of-jsx-root-nodes.md', 'Update 14-communicate-between-components.md', 'Merge pull request #2646 from jsfb/getDOMNode-becomes-findDOMNode\nAdded findDOMNode, as we move toward deprecating getDOMNode', 'Check for lineNumber support before using it', 'Merge pull request #2759 from alextsg/patch-2\nUpdate 05-maximum-number-of-jsx-root-nodes.md for capitalization', 'Merge pull request #2760 from alextsg/patch-3\nUpdate 14-communicate-between-components.md for grammatical changes', 'v0.13.0-alpha.1\nBumping version numbers so we can push to npm.', 'Removed some duplicate tests\nThese tests are duplicates of the same test in the same file. Copy/paste\nfail.', 'Throw a caught error in the default warning module\nThis throws an error that is immediately caught. This allows you to use the\ndebugger\'s "break on caught exception" feature to break on warnings.\nThis should help with tracking down these warnings using the stack.\nHowever, it could also add more noise to other debugging pattern.', 'Temporarily fix EmptyComponents\nThis a workaround for the problem described in #2770. It should be\ntemporary because this is really just working around the real problem.', 'Merge pull request #2771 from zpao/temp-fix-empty-component\nTemporarily fix EmptyComponents', 'Fixup jsdoc for findDOMNode', 'Merge pull request #2772 from zpao/fixjsdoc\nFixup jsdoc for findDOMNode', "Update ref-01-top-level-api.md\nReact isn't framework, it's library for UI!?", 'Merge pull request #2773 from vanesyan/patch-1\nUpdate ref-01-top-level-api.md', 'Merge pull request #2769 from sebmarkbage/breakonwarning\nThrow a caught error in the default warning module', 'Fix typo in warning message for invalid reused markup', 'Merge pull request #2768 from sebmarkbage/duplicatetests\nRemoved some duplicate tests', 'Merge pull request #2783 from dylanharrington/master\nFix typo in warning for invalid reused markup', "Add late class validation warnings for statics\nES6 classes won't have an early validation step. Therefore I added some\nextra validation later on in the process. These would've normally have\nbeen caught by createClass in classic React.", 'Merge pull request #2767 from sebmarkbage/moderntypevalidation\nAdd late class validation warnings for statics', 'Update 02-displaying-data.md\nJust a couple of minor grammatical fixes.', 'Merge pull request #2785 from c-das/patch-1\nUpdate 02-displaying-data.md', 'SyntheticEvent.timeStamp is a number, not a Date\nAlso makes the a few other attribute types use lowercase (primitive) naming, to be consistent.', 'Update ref-09-glossary.md\nMinor grammatical fix.', 'use bundle-collapser to reduce browserified file size', '[Docs] Tip on integration with other libraries\nChose this title because it\'s more eye-catchy than "third-party integration".', 'Wrap setInnerHTML in Windows 8 apps', 'Update docs to indicate that componentDDidUpdate is fired after changes are flushed to the DOM.  Fixes #2796', 'Merge pull request #2788 from mihaip/master\nSyntheticEvent.timeStamp is a number, not a Date', 'Merge pull request #2791 from rickbeerendonk/patch-1\nUpdate ref-09-glossary.md', 'code formatting fixes', 'Merge pull request #2801 from jsfb/componentDidUpdate-docs\nUpdate docs to indicate that componentDDidUpdate is fired after changes are flushed to the DOM.  Fix', 'Fix Outdated Copyright Year\nFix outdated copyright year (update to 2015)\nThe copyright year was out of date. Copyright notices must reflect the current year. This commit updates the listed year to 2015.', 'apply browserify bundle collapser to all build type', 'Minor updates to findDOMNode, as per additional post-commit CR feedback.', 'Merge pull request #2800 from jsfb/getDOMNode-becomes-findDOMNode\nMinor updates to findDOMNode, as per additional post-commit CR feedback.', 'Merge pull request #2614 from jsfb/monitor-should-update-owner-is-useful\nFind cases where shouldUpdateReactComponent is det', 'Merge pull request #2520 from jsfb/warn-for-dangerouslySetInnerHtml\nAdded checks for incorrect usage of innerHTML. Fixes #1370', 'Merge pull request #2807 from JoshSGman/patch-1\nFix Outdated Copyright Year', 'Merge pull request #2793 from huang47/improve/use-bundle-collapser-to-reduce-file-size\nuse bundle-collapser to reduce browserified file size', 'Added jasmine matcher that expects calls to console.warn.', 'suggesting the use of immutable js for comparisons', 'Add boxFlex and boxFlexGroup to CSS Unitless Properties\nFixes #2812', "Remove LegacyImmutableObject\nWe don't use it and it's not part of the build so nobody else is using\nit. You should probably use immutable instead anyway.", 'Merge pull request #2814 from jsfb/testutils-consolemock\nAdded jasmine matcher that expects calls to console.warn.', 'Merge pull request #2822 from zpao/rm-immutable\nRemove LegacyImmutableObject', 'Remove period from findDOMNode test filename', 'Merge pull request #2799 from stkb/master\nWrap setInnerHTML in Windows 8 apps (Fixes #441)', "[docs] Talk about running a server in tutorial\nWe've talked about this a few times and even half done it. This is for\nreal.", 'Update 07-forms.md', 'Removed unknown tag warning/whitelist.', 'Merge pull request #2832 from kikyous/patch-1\nUpdate 07-forms.md', 'Warn when mutating props on a ReactElement\nTest Plan: jest. Also used ballmer-peak in IE8 to verify that it still works.', 'Merge pull request #2830 from jsfb/remove-tag-warning\nRemoved unknown tag warning/whitelist.', 'Update README.md insert comma\nThe file change inserts a missing comma.\nBest,\nHou', 'Merge pull request #2844 from kchia/patch-1\nUpdate README.md insert comma', 'Context warning should fire on update, not just initial mount.\nRenamed a couple instances of context to make it clear if it was masked/unmasked', "Introducing ReactComponentBase base class\nThis is the base class that will be used by ES6 classes.\nI'm only moving setState and forceUpdate to this base class and the other\nfunctions are disabled for modern classes as we're intending to deprecate\nthem. The base classes only have getters that warn if accessed. It's as if\nthey didn't exist.\nReactClass now extends ReactComponentBase but also adds the deprecated\nmethods. They are not yet fully deprecated on the ReactClass API.\nI added some extra tests to composite component which we weren't testing\nto avoid regressions.\nI also added some test for ES6 classes. These are not testing the new\nstate initialization process. That's coming in a follow up.", 'Merge pull request #2805 from sebmarkbage/baseclass1\nIntroducing ReactComponentBase base class', 'Warn when defined methods are used in plain JS classes\nIn ReactClass we use early validation to warn you if a accidentally defined\npropTypes in the wrong place or if you mispelled componentShouldUpdate.\nFor plain JS classes there is no early validation process. Therefore, we\nwait to do this validation until the component is mounted before we issue\nthe warning.\nThis should bring us to warning-parity with ReactClass.', 'Merge pull request #2806 from sebmarkbage/baseclass\nWarn when defined methods are used in plain JS classes', "Use eslint\nThese rules are very close to what we have internally. We may still miss\na couple things (jsdoc params being a big one) but it's good enough.\nThis is also more restrictive than what we enforce internally, but it's\nfor the best.", 'The unique key warning should only happen in dev.', 'Merge pull request #2662 from zpao/eslint\nUse eslint', 'Merge pull request #2818 from jsfb/unmasked-context-in-performContextUpdate\nContext warning should fire on update, not just initial mount.\nRenamed a couple instances of context', 'codemod "use strict" to \'use strict\' for better linting', '[lint] convert to single quotes', '[lint] Fix majority of issues eslint found', "[lint] Fix reasonable lines to 80\nI don't agree with 80 on principal but it's what we have for now.\nThis fixes the reasonable cases. Most of the long lines are in docblocks\nwith long type information or containing links.", "[lint] disable a couple rules since rest args aren't processed right", '[lint] fix consistent-returns', 'Merge pull request #2751 from zpao/eslint-fixup\nEslint fixup', "Eliminate context warnings when component isn't reading the conflicting context variable.", 'Add eslint grunt task, fail travis for it\nThis is it...', 'Merge pull request #2852 from zpao/lint-fail-travis\nAdd eslint grunt task, fail travis for it', 'Fix lint on travis\nPR #2852 was not quite correct', 'Merge pull request #2540 from spicyj/no-mutate-props\nWarn when mutating props on a ReactElement', 'ref-08-reconciliation.md: grammar/punctuation fixes', 'Merge pull request #2859 from javawizard/patch-1\nref-08-reconciliation.md: grammar/punctuation fixes', 'Revert "Merge pull request #2814 from jsfb/testutils-consolemock"\nThis reverts commit 9514861d9397e22d41d59d1e8cdd6de92fa74204, reversing\nchanges made to cdec83732df3ec19fafaceafd8b930129222e4bd.', 'Merge pull request #2865 from zpao/revert-jasmine-helper\nRevert "Merge pull request #2814 from jsfb/testutils-consolemock"', "Don't bind callbacks to setState, setProps etc.\nWe added a bind to the public instance, but instead we can just pass the\npublic instance as the context when we execute.\nThis avoids a warning that fires when we call bind on auto-bound methods.", 'Merge pull request #2851 from jsfb/unique-key-in-dev-only\nThe unique key warning should only happen in dev.', "Merge pull request #2866 from sebmarkbage/fixbindwarning\nDon't bind callbacks to setState, setProps etc.", "Don't warn about plain classes when in mocked components\nMocking both doesn't copy properties that start with an underscore, nor\ndoes it copy values, only nested objects.", "Merge pull request #2867 from zpao/no-warn-mock-methods\nDon't warn about plain classes when in mocked components", 'Update package deps', 'v0.13.0-alpha.2', 'Merge pull request #2502 from fabiomcosta/patch-4\nRemoving unecessary resize listener', 'Merge pull request #2824 from zpao/docs-tutorial-server\n[docs] Talk about running a server in tutorial', 'Merge pull request #2795 from chenglou/tips-lib\n[Docs] Tip on integration with other libraries', 'Merge pull request #2734 from Minwe/master\nadd Forms and Event System docs Chinese translation', 'Merge pull request #2707 from camsong/master\nMore Chinese Doc Translation', 'Merge pull request #2360 from beausmith/patch-1\nHighlighted changed lines in examples', 'Merge pull request #2675 from af/topLevelAPIDocs\nTop level api docs for createFactory', "Merge pull request #2297 from pedronauck/docs-namespace-in-jsx\nAdd a section at 'jsx-in-depth' talking about namespaced components", "Friends don't let friends look foolish on the internet\nUpdated your footer =)", 'Merge pull request #2874 from Carlsson87/patch-1\nUpdate footer with correct year', 'Update 03-interactivity-and-dynamic-uis.md: correct typo\nMy file change corrects a typo in the document.\nBest, \nHou', "Add Chinese translation to 7 more pages.\nTranslate 'Note' to '注意' instead of '提示' to make it more sensible.", "Merge pull request #2853 from jsfb/warn-only-on-read\nEliminate context warnings when component isn't reading the conflicting context variable", 'New class instantiation and initialization process\nThis allows state to be set up in the constructor instead of through\ngetInitialState. getInitialState is now considered part of "classic".\nTherefore, they move into ReactClass\'s constructor.\nAs a consequence of this, we no longer have a mapping between the internal\nrepresentation and the public instance during the mounting process.\nBecause the constructor hasn\'t returned yet.\nWe used to have a special case for calling setState in getInitialState\nwhich was just ignored. This makes that throw and the component is\nconsidered unmounted during the construction phase.', 'Merge pull request #2808 from sebmarkbage/modernclasses\nNew class instantiation and initialization process', "Fix ES6Class test so it runs in browsers\ndocument.createElement throws an error if you don't pass it any\narguments. Neither PhantomJS nor jest (via jsdom at version jest is\nusing) behave as browsers do now so this went unnoticed.", 'Fix lint', 'Merge pull request #2881 from camsong/master\nAdd Chinese translation to several pages.', 'Merge pull request #2875 from kchia/patch-2\nUpdate 03-interactivity-and-dynamic-uis.md: correct typo', 'Temporarily comment out bundle-collapser for JSXTransformer\nThis will at least make the examples run while we fix the issue.', 'Fix strict mode violoation in test', 'Merge pull request #2884 from chenglou/fix-ex-source-map\nTemporarily comment out bundle-collapser for JSXTransformer', 'adds a composite component for an iframe to handle load events\nThis is basically a copy of ReactDOMImg', 'Repair ReactDefaultPerf\nUpdate ReactDefaultPerf to properly record component names.', 'Update 02.1-jsx-in-depth.md', 'Merge pull request #2889 from salier/react-default-perf\nRepair ReactDefaultPerf', 'Document justification for dangerouslySetInnerHTML, fixes #2256\nConflicts:\n    docs/_data/nav_tips.yml\n    docs/tips/17-children-undefined.md', 'Throw for Misue of LocalEventTrapMixin\nSummary:\nIf getDOMNode() returns null in LocalEventTrapMixin, listener will also be null and accumulateInto will throw. This changes LocalEventTrapMixin to throw a more helpful error message.\nTest Plan:\nRan unit test successfully:\nnpm test LocalEventTrapMixin-test.js', 'Merge pull request #2894 from yungsters/local-event-trap-mixin\nFix LocalEventTrapMixin for Bad Tree State', 'Fix inaccurate spec description\nThe string here was initially accurate, but got out of sync with reality\nwhen the commit was revised (as 892e357fd5acc).', 'Correctly highlight changed line in tutorial.\nThis excerpt adds the onSubmit handler to the form element, but the line was not highlighted as having been modified.', 'Add npm run build\nIt\'s a "shortcut" to grunt build', 'Merge pull request #2900 from wincent/test-desc-fix\nFix inaccurate spec description', 'Merge pull request #2890 from amykyta/patch-1\nUpdate 02.1-jsx-in-depth.md', 'Add Chinese translation of multiple-components', 'Add Chinese translation of reusable-components', 'Merge pull request #2902 from swestwood/patch-2\nCorrectly highlight changed line in tutorial.', 'Merge pull request #2518 from jsfb/documentation-for-dangerouslySetInnerHtml\nDocument justification for dangerouslySetInnerHTML, fixes #2256', "[docs] Use current date in copyright footer\nThis will be based on the site generation time, making doc generation\nslightly less deterministic but that's ok. Now we won't depend on\nhelpful community members updating it for us (#2874) when we forget,\nit'll just happen naturally the next time the site is generated.", 'Merge pull request #2903 from tendant/merge-conflicts-in-translation\nUpdate documents for Chinese translation', 'Added fb.me url to error message.', 'Merge pull request #2765 from zpao/jsxtransformerlinenumber\nCheck for lineNumber support before using it', 'Add warning when accessing .type on a component class\nSince we removed the wrapper factory around classes, the class is just\nthe class now so there is no need for this indirection property.', 'Merge pull request #2913 from sebmarkbage/typewarning\nAdd warning when accessing .type on a component class', "Fix a couple small lint issues\nThese aren't caught by eslint yet :(", 'Merge pull request #2915 from zpao/lint-fixup\nFix a couple small lint issues', 'Move ref code to ReactCompositeComponent\nYou can only get a ref to a ReactCompositeComponent, so move the ref code here which gives us more flexibility to put it at the correct time in the lifecycle.\nThere should be no behavior change in this commit.\nTest Plan: jest', 'Merge pull request #2916 from spicyj/ref-composite\nMove ref code to ReactCompositeComponent', 'Merge pull request #2892 from jsfb/fbme-url-for-dangerouslySetInnerHtml\nAdded fb.me url to error message.', 'Switch first-class refs to use functions\nCloses #1373.\nTest Plan: jest', 'Merge pull request #2917 from spicyj/ref-composite\nSwitch first-class refs to use functions', "Remove React.createRef API\nThis API was removed so this won't work.", 'Merge pull request #2919 from sebmarkbage/removecreateref\nRemove React.createRef API', 'Updated tutorial to be more clear about the dependence on the --harmony flag.', 'Typo in first commit.', 'Move component class instantiation into ReactCompositeComponent\nWe need to move instantiation into the mount phase for context purposes.\nTo do this I moved the shallow rendering stuff into ReactTestUtils and\nreused more of the existing code for it by instantiating a noop child.\nEverywhere we refer to the "type" we should pass it to ReactNativeComponent\nto resolve any string value into the underlying composite.', 'Pass context to the constructor\nThis should reenable reading this.context from getInitialState.\nAdded a bunch of tests for this too.', 'Merge pull request #2918 from sebmarkbage/fixcontexts\nMove Component Class Instantiation into ReactCompositeComponent', 'Update .mailmap for me', "Replace ReactComponentMixin with ReactReconciler\nInstead of putting the shared code in a base class method, we use a wrapper\ncall around all invokations. That way they're free to add code before AND\nafter the non-shared code.\nThat way we ensure that component extensions don't need to implement\nReactComponentMixin and do super() calls into it. This helps to create a\ntighter API for custom component extensions.\nThis provides the first step towards moving these methods to static\nmethods which allows to use a different dispatch mechanism instead of\nvirtual method calls. E.g. pattern matching.", 'Merge pull request #2923 from sebmarkbage/dropcomponentmixin\nReplace ReactComponentMixin with ReactReconciler', 'Remove _pendingContext\nThere is no way to queue an update to a context so there is no need for\nthis field. The only way to get a new context is from above.\nSoon _pendingElement will get the same treatment. Once _setPropsInternal\ncan be removed.', 'Merge pull request #2933 from sebmarkbage/pendingcontext\nRemove _pendingContext', 'Update 06-transferring-props.md', "Add CoffeeScript Class Test\nAs part of the new class effort it is now possible to define React\nComponents using any type of generic JavaScript class syntax.\nThis includes CoffeeScript. This test ensures that we don't regress that\nsupport, and also serves as an example for using React in CoffeeScript.\nThis test fail trails the ReactES6Class-test file. Some manual tweaking is\nrequired when converting tests.", 'Merge pull request #2944 from sebmarkbage/coffeescript\nAdd CoffeeScript Class Test', 'Add Meta Matchers for Testing Tests\nThis adds a matcher called toEqualSpecsIn which executes two test suites,\nwithout reporting the result. It then compares the specs and the number\nof expects executed by each spec.\nThis will be used to ensure that tests written in other languages test the\nsame thing as the base line, ES6 classes.\nSets up CoffeeScript equivalence test.', 'Merge pull request #2942 from sebmarkbage/metamatchers\nAdd Meta Matchers for Testing Tests', 'Merge pull request #2939 from patlaughlin/patch-1\nUpdate 06-transferring-props.md', 'Provide warning when using styles containing a semicolon', 'Fixing lint failures', 'Moar tests', 'Renaming assertValidStyle to warnValidStyle', "Add Basic TypeScript Class Test\nAs part of the new class effort it is now possible to define React\nComponents using any type of generic JavaScript class syntax.\nThis includes TypeScript classes. This test ensures that we don't regress\nthat support, and also serves as an example for using React in TypeScript.\nTypeScript provides a good demo of where we think property initializers\nare going.\nWe don't have any official type support for TypeScript yet.\nThis test trails the ReactES6Class-test file. Some manual tweaking is\nrequired when converting tests.", 'Better tests', 'Using %s in warning message', 'Move component class instantiation into ReactCompositeComponent\nWe need to move instantiation into the mount phase for context purposes.\nTo do this I moved the shallow rendering stuff into ReactTestUtils and\nreused more of the existing code for it by instantiating a noop child.\nEverywhere we refer to the "type" we should pass it to ReactNativeComponent\nto resolve any string value into the underlying composite.', 'Move propType validation to element instead of class.\nConflicts:\n    src/classic/element/ReactElementValidator.js', 'Merge pull request #2952 from sebmarkbage/typescript\nAdd Basic TypeScript Class Test', 'Merge pull request #2920 from jsfb/move-proptype-validation\nMove propType validation to element instead of class.', 'Merge pull request #2951 from mzabriskie/semicolon\nProvide warning when using styles containing a semicolon', 'Update warning calls to use %s #2870', 'update to use spyOn for console.warn #2749', 'Merge pull request #2941 from kevinold/2870-update-warning-calls\nUpdate warning calls to use %s #2870', 'Add Tests to Callbacks of the Life Cycles\nThis adds some much needed tests of the callbacks to setState, setProps\nand render.', 'Merge pull request #2953 from sebmarkbage/callbacktests\nAdd Tests to Callbacks of the Life Cycles', "Fix broken jest test\njest accidentally picked up this .d.ts file as a test.\nI'll just move it out to fix it.", "Extract setState, setProps etc into ReactUpdateQueue\nI originally did this work so that we could allow setState to be called\nbefore the internal ReactCompositeComponent was constructed. It's unlikely\nthat we'll go down that route now but this still seems like a better\nabstraction. It communicates that this is not immediately updating an\nobject oriented class. It's just a queue which a minor optimization.\nIt also avoids bloating the ReactCompositeComponent file.\nSince they both depend on the life cycle I break that out into a common\nshared dependency. In a follow up I'll refactor the life-cycle management.", 'Merge pull request #2930 from sebmarkbage/updatequeue\nExtract setState, setProps etc into ReactUpdateQueue', 'Batch updates in initial render\nCurrently, the first setState that happens during initial render will\nstart a new batch. Any subsequent updates will be batched. That means that\nthe first setState is synchronous but any subsequent setStates are\nasynchronous.\nThis commit makes it so that the batching starts at the root. That way all\nthe setStates that happen within life-cycle methods are asynchronous.', 'Merge pull request #2935 from sebmarkbage/batchupdates\nBatch updates in initial render', "Use Singleton LifeCycle State\nAll entry points are for reconciliation are within batching strategies.\nSince we don't have any batching strategies with synchronous updates,\nthere can't be more than one life-cycle method on the stack at any given\ntime.\nTherefore, it's safe to move the composite life cycle flag to a singleton.\nThis saves us some memory management.\nI think that we can get rid of these life cycle states completely in the\nfuture.", 'Merge pull request #2936 from sebmarkbage/refactorlifecycles\nUse Singleton LifeCycle State', "don't validate propTypes in production\nSwitch to warnings so code execution doesn't differ between prod and\ndev.", "Rename ReactComponentBase -> ReactComponent\nWe freed up this internal name by removing the internal base class.\nWe're now free to use this name as it was intended.\nReactDOMComponent and ReactCompositeComponent are still confusing as\nthey're internal but we'll rename them later.", "We don't currently have a way to trace the origin of a mixin\nThis makes it more difficult to find bugs in mixins both dynamically\nand using a static type system.\nWe also don't have a way to find these to be upgraded to a new mixin\nsyntax if we needed to.\nThis hook is currently an optional noop but could be made required to\ncreate a mixin class.", 'Merge pull request #2957 from sebmarkbage/renamecomponent\nRename ReactComponentBase -> ReactComponent', "Merge pull request #2959 from sebmarkbage/createmixin\nWe don't currently have a way to trace the origin of a mixin", 'Merge pull request #2948 from jergason/master\ndo not validate propTypes in production', 'Rewording for clarity', 'Update 02.1-jsx-in-depth.md', 'Merge pull request #2961 from ClimbsRocks/patch-1\nRewording for clarity', 'Merge pull request #2962 from ClimbsRocks/patch-3\nDocs wording tweak for clarity', 'Merge pull request #2940 from kevinold/2749-consistent-use-of-spys-or-mocks\nupdate to use spyOn for console.warn #2749', 'Remove "derequire" from minified bundles', 'Update 04-multiple-components.md', 'Merge pull request #2965 from ClimbsRocks/patch-4\nDocs wording tweak: subject verb agreement', "[testing] dump the cache when depending on warning messages\nIt's possible to configure Jest to not dump the module cache between\nspecs. This makes it tricky when we silence warnings one a 2nd call.\nIn this case, the same message was getting logged so when we expected\nthe count of warning calls to increment, it didn't.", "Run jest with grunt, add to travis\nThis is to make sure we don't end up with differences in our different\ntesting methods. We may switch out the failure allowances later (maybe\njust jest will be good enough and we can let phantom fail for a little\nbit).", '[jest] Use persistModuleRegistryBetweenSpecs\nThis more closely matches how we have jest configured at FB, so when we\npull in and run internally we will have fewer things to waste time on.', 'Update tutorial.md', 'Merge pull request #2964 from zertosh/no-derequire-when-minifying\nRemove "derequire" from minified bundles', 'Merge pull request #2966 from zpao/grunt-jest\nRun jest with grunt, add to travis', 'Merge pull request #2967 from zpao/jest-match-internal\n[jest] Use persistModuleRegistryBetweenSpecs', 'v0.13.0-beta.1', 'Update thinking-in-react.md\nMake style consistent with tutorial.md', 'Add detectable prefix to ReactElement proptype warning.', 'Pull in 0.13 beta blog post from 0.12-stable branch', 'Merge pull request #2960 from jsfb/add-detectable-prefix-to-reactelement-warning\nAdd detectable prefix to ReactElement proptype warning.', 'Fixed linewrap issue on markdown output css.  Fixes #2986', 'Merge pull request #2987 from jsfb/fix-markdown-output-wrap\nFixed linewrap issue on markdown output css.  Fixes #2986', 'Only purgeID on ReactDOMComponent and ReactDOMTextComponent unmount', 'Documents that classSet concatenates its arguments\nJust wanted it to be noted that classSet operates in two ways, both of which are valuable.', 'Merge pull request #2990 from jeffkole/patch-1\nDocuments that classSet concatenates its arguments', 'Merge pull request #1568 from syranide/dompurge\nOnly purgeID on ReactDOMComponent and ReactDOMTextComponent unmount', 'Warn if mounting into node with dirty rendered markup', 'Merge pull request #1912 from syranide/safereuse\nWarn if mounting into node with dirty rendered markup', 'Update copyright headers for 2015', 'Documents that JSX tool is transforming files with .js extension (and not .jsx) by default', 'Add Conferences section to the Community Resources on the website', 'Changed unit to pixels due to inconsitent font-size rendering of code elements.', 'Set HTML DOM property "open" to HAS_BOOLEAN_VALUE', 'remove extraneous comma in tutorial', 'Add note linking to up-to-date doc on Flux website', 'Fix consistency of component api document', "Use TypeScript Compiler API Directly\nIn 1.4.0 we can use the TypeScript API directly to preprocess our files.\nThis lets us get rid of a dependency.\nhttps://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API\nWe can also use this to provide our default libraries so that we don't\nneed to keep the references in the test file.", 'Document React.addons.TestUtils.isElement()', 'Merge pull request #2999 from sedovsek/master\nChanged unit to pixels due to inconsistent font-size rendering of code elements.', 'Merge pull request #2995 from rickbeerendonk/copyright-2015\nUpdate copyright headers for 2015', 'Merge pull request #3001 from rgarcia/patch-1\nremove extraneous comma in tutorial', 'Merge pull request #3011 from koba04/fix-coponent-api-doc\nFix consistency of component api document', 'Removing unnecessary returns', 'Merge pull request #3012 from sebmarkbage/typescript\nUse TypeScript Compiler API Directly', 'Merge pull request #3007 from JoelOtter/patch-2\nAdd note linking to up-to-date doc on Flux website', 'Merge pull request #2997 from rickbeerendonk/2943-jsx-build-tool-documentation\nDocuments that JSX tool is transforming files with .js extension (and no...', 'Try/catch property deprecation warnings to support IE8', 'Merge pull request #3000 from syranide/openbool\nSet HTML DOM property "open" to HAS_BOOLEAN_VALUE', 'Expecting transform not to throw.  Removed meaningless comment.', 'Merge pull request #3018 from jsfb/assert-not-throw\nExpecting transform not to throw.  Removed meaningless comment.', 'Merge pull request #3017 from syranide/trydefine\nTry/catch property deprecation warnings to support IE8', 'Newlines handled incorrectly in innerText in IE8', 'Merge pull request #1864 from syranide/ie8text2\nNewlines handled incorrectly by innerText in IE8', 'Added jsx_orphaned_brackets_transformer for breaking JSX parser change', 'Added itemRef and itemId for complete microdata support.', 'Expose ReactReconciler\nThis can be used by devtools to monkey patch the reconciler and therefore\nget notified whenever any internal instance is updated.', "Always trigger an update when a callback is enqueued.\nenqueueCallbackInternal forgot to schedule an update.\nWe could rely on the implicit contract of enqueueElement to do it. However,\nif we're currently outside a transaction, it'll flush synchronously. Before\nwe enqueue the callback. We could also enqueueCallback before we\nenqueueElement, but that causes a fragile relationship between them. E.g.\nenqueueElement should not need to schedule an update if it is the same\nelement.", 'Changed itemId to itemID and added clarity to the comments of where it is specified.', 'Merge pull request #3025 from sebmarkbage/fixrendercallback\nAlways trigger an update when a callback is enqueued.', 'Merge pull request #3023 from sebmarkbage/devtoolsfix\nExpose ReactReconciler', 'Hot fix cyclic dependency\nWe accidentally created an unfortunate cyclic dependency because of the\nauto-wrapper hack that uses ReactClass.\nMaking it injected instead.', 'Merge pull request #3026 from sebmarkbage/fixdependency\nHot fix cyclic dependency', 'Fix highlighting', 'Merge pull request #3020 from syranide/jsxbracketcodemod\nAdded jsx_orphaned_brackets_transformer for breaking JSX parser change', 'Merge pull request #3016 from hnordt/patch-1\nRemoving unnecessary returns', "Set state takes a function\nThis diff enables setState to accept a function in addition to a state partial. If you provide a function, it will be called with the up-to-date state, props, context as arguments.\nThis enables some nicer syntax for complex setState patterns:\nIf setState is doing an increment and wants to guarantee atomicy, you need a function:\nthis.setState(state => ({ number: state.number + 1 }));\nThis atomicy is particularly important if setState is called multiple times in a single frame of execution as the result of complex user actions. It's a tricky bug to chase down and difficult to determine how to fix when you find it. The current pattern of reaching into _pendingState relies on an implementation detail.\nIn this example: props.doAction() may result in your ancestor re-rendering and providing you with new props. If setState is called directly with an object literal referencing this.props, it will use the old version of props, not the new value. Using a function solves for this case:\nthis.props.doAction();\nthis.setState((state, props) => ({ number: state.number * props.multiplier }));", 'Merge pull request #2991 from leebyron/state-queue\nSet state takes a function', 'Corrected documentation', 'Fix list formatting in glossary', 'Split escapeTextForBrowser into escapeTextContentForBrowser and quoteAttributeValueForBrowser', 'Merge pull request #2135 from syranide/ie8enctype\nIE8 does not have a setter for property "enctype"', 'Merge pull request #3036 from jergason/master\nFix list formatting in glossary', 'Merge pull request #3032 from germ13/patch-1\nCorrected documentation', 'Fix isMounted inside of render\nThis is apparently used to determine if you can access refs.\nBad pattern, but a pattern nonetheless.', 'Merge pull request #3039 from sebmarkbage/fixismounted\nFix isMounted inside of render', 'Merge pull request #3013 from akheron/patch-2\nDocument React.addons.TestUtils.isElement()', 'Merge pull request #2969 from gsklee/patch-1\nUpdate thinking-in-react.md', 'Merge pull request #3022 from btholt/master\nAdded itemRef and itemId for complete microdata support.', 'removes loose validation message', 'Merge pull request #3045 from milanlandaverde/removes-validation-msg\nremove extraneous argument to createChainableTypeChecker in ReactPropTypes', 'Add autoFocus to supported HTML attributes\nIt appears to be supported http://jsfiddle.net/9f48wbsa/1/', 'Merge pull request #1599 from syranide/escbrow\nSplit escapeTextForBrowser into escapeTextContentForBrowser and quoteAttributeValueForBrowser', 'Drop processAttributeNameAndPrefix and invalid attribute name escaping', 'Merge pull request #3046 from cobbweb/patch-1\nAdd autoFocus to supported HTML attributes', 'Merge pull request #3047 from syranide/escbrow2\nDrop processAttributeNameAndPrefix and invalid attribute name escaping', 'Warn only once for each class when accessing .type\nCurrently it is a bit too spammy.', 'Merge pull request #3068 from sebmarkbage/dedupwarning\nWarn only once for each class when accessing .type', "Sync internal modules\nWe've actually diverged more with some modules, but we don't want\na cascade of dependencies out here. Mostly, the changes internally that\nwe don't want are tied to FB infrastructure but otherwise are\nfunctionally equivalent (usually around error reporting, code monitoring).", 'Fix typos', 'Update tutorial.md', 'fix next page link typo\n下一页链接错误', 'sync up Chinese docs links', 'Chinese docs typo', 'Chinese docs Typesetting beautification & relate links', "Remove more upstream modules that aren't used\nImmutable* hasn't been used... ever?\ncopyProperties, merge were deprecated as part of 0.12. We've replaced\nthem with Object.assign.", 'Corrected pure-render-mixin documentation\nFixed the PureRenderMixin documentation which was incorrectly importing the base React library instead of ReactWithAddons.', 'Move keyMirror to vendor to match internal move', 'Merge pull request #3073 from gsklee/patch-3\nFix typos in animation.md', '[Docs] Add note on classSet deprecation', 'Merge pull request #3078 from vincentriemer/patch-1\nFixed pure-render-mixin documentation', 'Add React.js Conf Keynote talk (with playlist)', 'Merge pull request #3080 from zpao/upgrade-internal-modules\nUpgrade internal modules', 'Merge pull request #3074 from noyobo/master\nfix Chinese docs typos', 'Fix markdown parsing error\ncloses #3075', 'Merge pull request #2854 from cedrics/add-iframe-component\nAdds a composite component for an iframe to handle load events', "Merge pull request #2968 from ClimbsRocks/patch-5\nReordered 'Using Props' before 'Component Properties'", 'Merge pull request #3089 from iamdanfox/fix-markdown-parsing-error-3075\nFix markdown parsing error', 'Merge pull request #3082 from hzoo/patch-1\nAdd React.js Conf Keynote talk (with playlist)', 'Remove zerowidth space at the beginning of file', 'Make keyed object fragments an opaque type\nThis triggers a warning if you try to pass a keyed object as a child.\nYou now have to wrap it in React.addons.createFragment(object) which\ncreates a proxy (in dev) which warns if it is accessed. The purpose of\nthis is to make these into opaque objects so that nobody relies on its\ndata structure.\nAfter that we can turn it into a different data structure such as a\nReactFragment node or an iterable of flattened ReactElements.', "Upgrade to newer eslint, use esprima-fb\nEslint now allows us to use a different parser, which allows us to use\nesprima-fb explicitly. This means we don't have to wait for espree to add\nthings like rest-param parsing. Though we do need eslint to upgrade its rules\nto handle that AST.\nI had hoped to enable parsing of our tests but we can't do that until we\nchange esprima-fb's XJS nodes to JSX.\nWhile I was here, I also enabled the no-unused-vars rule since eslint\nunderstands template strings. I also made the single quote enforcement\nactually fail instead of just warn.", 'Merge pull request #2998 from rickbeerendonk/docs-conferences\nAdd Conferences section to the Community Resources on the website', 'Merge pull request #3097 from zpao/upgrade-eslint\nUpgrade to newer eslint, use esprima-fb', 'Merge pull request #3030 from sebmarkbage/fragments\nMake keyed object fragments an opaque type', 'Dead code\nMissed this because lint was off', 'Merge pull request #3100 from sebmarkbage/fragments\nDead code', "Warn when calling setState & other methods at wrong time\nCurrently we use an invariant to prevent this code pattern. That is really\naggressive for something that doesn't actually put React in a bad state. This\ndiff replaces invariants with warnings and makes those code paths no-ops.", 'Consistently use calls.length instead of callCount for Jasmine spies', 'Merge pull request #3105 from matiassingers/jasmine-call-count-consistency\nJasmine spies call count property consistency', "Warn if a non-object value is used in ReactFragment.create\nI made this mistake while upgrading a few callers.\nI'm leaving this as warning so that it is always safe to wrap any existing\nchild in React.addons.createFragment without breaking prod.\nThis makes upgrading easier.", 'Merge pull request #3103 from zpao/lifecyle-warn-not-throw\nWarn when calling setState & other methods at wrong time', 'rename Id suffix to ID to apply naming conventions', 'Updated CONTRIBUTING.md: Mention of "facebook.com" was not a link\nUpdated the mention of "facebook.com" on line 3 of the CONTRIBUTING.md file to link to Facebook. Previously, this mention was just in plain text.\nChanged from facebook.com to [facebook.com](https://facebook.com)\nNo other content has been changed. Content has not been removed from this file in any way.', "Flip console.warn to use warning module so users can intercept all warnings by shimming the warning module.\nThe two remaining console.warns are:\n/Users/jsproch/react/src/test/mock-modules.js:\n   19      return mocks.generateFromMetadata(mocks.getMetadata(exports));\n   20    } catch (err) {\n   21:     console.warn(err);\n   22      return exports;\n   23    }\n/Users/jsproch/react/src/vendor/core/warning.js:\n   39        var argIndex = 0;\n   40        var message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n   41:       console.warn(message);\n   42        try {\n   43          // --- Welcome to debugging React ---", 'Merge pull request #3117 from jsfb/use-warning-module\nFlip console.warn to use warning module.', "fix Microdata properties' commentaries", 'Advanced Performance Doc', 'Tweaks on Advanced Performance', 'Merge pull request #3118 from rkho/patch-1\nUpdated CONTRIBUTING.md: Mention of "facebook.com" was not a link', 'Merge pull request #3114 from chicoxyzzy/master\nrename Id suffix to ID to apply naming conventions', 'Merge pull request #3107 from sebmarkbage/fragments\nWarn if a non-object value is used in ReactFragment.create', 'update image perf', 'Update to CLA, CONTRIBUTING.md', 'Merge pull request #3126 from Sourdoughh/patch-1\nUpdate to CLA, CONTRIBUTING.md', "Moar warnings with solid prefixes!\nThis ensures that we have a prefix that can be easily identified in logs\nso that we can filter out warnings based on their prefix.\nThis also turns the remaining two monitorCodeUse callers into warnings.\nWe'll probably still use monitorCodeUse until we know if we want to\ndeprecate but most releases should only have warnings.", 'Merge pull request #3130 from sebmarkbage/identifiablewarnings\nMoar warnings with solid prefixes!', 'Add space-before-blocks rules, fix code', 'Fix license header to use BSD', 'Remove newline at beginning of file', 'Add indent lint rule, fix code', 'Merge pull request #3133 from zpao/more-lint\nMore lint rules, fixes', 'Bumps safe_yaml to 1.0.4 (was 1.0.3) to fix bug\nsafe_yaml 1.0.3 has some issues with Ruby 2.2.0:\nhttps://github.com/dtao/safe_yaml/issues/67', 'eslint', '.eslint in src is not necessary anymore', 'update eslint rules', 'fix linting', 'Only monitor components that are likely stateful (inputs and composites)', 'Merge pull request #3134 from briankung/update-safe_yaml\nFix for the jekyll docs build process', 'Merge pull request #3123 from chicoxyzzy/remove-jshint\nESLint coverage', 'Fixed Copyright year for three files and react.js licence to BSD-license.', 'Merge pull request #3132 from jsfb/warn-less-for-owner-necessary\nOnly monitor components that are likely stateful (inputs and composites)', 'Bump jstransform version to 9.1.0 to include new flow updates', 'Add --es6module and --non-strict-es6module flags to jsx bin', 'Merge pull request #3143 from jeffmo/flow_0_3_0\nUpdate jsx binary to latest jstransform + latest flow syntax features', 'Merge pull request #3139 from brianpchsu/master\nFixed Copyright year for three files and react.js licence to BSD-license', 'Update license for jsx_orphaned_brackets_transformer', 'Dedupe owner-is-important warning.', 'Merge pull request #3145 from jsfb/dedup-is-owner-important\nDedupe owner-is-important warning.', 'Remove references to vendor_deprecated', 'v0.13.0-beta.2', 'lint whitespace , trailing comma', 'remove space before round brace in function expressions', 'Prevent NaN props from triggering warnings\nPreviously, checkAndWarnForMutatedProps would flag NaN props as\nhaving been mutated, because NaN !== NaN. This prevents that warning\nfrom being emitted by explicitly checking for NaNs.', 'lint whitespace\n\nuse spaces\nremove space before paren in function\nremove space before colon in object\n', 's/upate/update', 'Fix ReactMount._renderNewRootComponent signature (ReactComponent -> ReactElement)', 'fix sourcemap filenames when using transformWithDetails. Fixes #3140', 'Merge pull request #3162 from vsiao/mount-element\nFix ReactMount._renderNewRootComponent signature', '[Docs] Reword section on React without JSX\nSummary:\nThis section was confusing. I reworded it from:\n"JSX is completely optional. You don\'t have to use JSX with React.\nYou can create these trees through React.createElement. The first\nargument is the tag, pass a properties object as the second\nargument and children to the third argument."\nto:\n"JSX is completely optional; you don\'t have to use JSX with React.\nYou can create React elements in plain JavaScript using\nReact.createElement, which takes a tag name or component, a\nproperties object, and variable number of optional child\narguments."\nand additionally added another child element to the example code.\nTest Plan:\nRead the new paragraph!', 'Merge pull request #3167 from MichelleTodd/docs-grammar\n[Docs] Reword section on React without JSX', "[Docs] Clarify section on namespaced components\nWhile going through the docs, I wasn't sure if the first example was\nsomething I should do or not. This makes the wording a bit more clear.", 'Merge pull request #3154 from iamdustan/patch-1\ns/upate/update', 'Merge pull request #3147 from hzoo/lint-fixes\nlint whitespace , trailing comma', "Warn if accessing .type on a factory\nThis was an important convenience as an upgrade path but shouldn't be\nnecessary if you're using best-practice of calling createFactory in the\nconsuming component.", 'Merge pull request #3164 from oiva/master\nFix sourcemap filenames when using transformWithDetails. Fixes #3140', 'Merge pull request #3168 from briankung/docs-jsx-namespacing\n[Docs] Clarify section on namespaced components', "Warn if using Maps as children\nWe're not sure if this is the way we want to support this API. It creates\ntwo ways of doing things.\nIt is convenient to avoid needing to explicitly redefine the key of Maps.\nHowever, this use case isn't as common as having an iterable where the\nkey is on the value, not the key.", 'Make tutorial CDN URLs use https', 'Warn if getDOMNode or isMounted is accessed in render\nThis is an anti-pattern that can be easily avoided by putting the logic\nin componentDidMount and componentDidUpdate instead.\nIt creates a dependency on stale data inside render without enforcing\na two-pass render.', 'Merge pull request #3170 from adelevie/patch-1\nMake tutorial CDN URLs use https', "Wrap jQuery Mobile example's components with React.createFactory to fix on v0.13.0. Fixes #2880", 'Merge pull request #3171 from sebmarkbage/moarwarnings\nMoar Warnings', 'Merge pull request #3148 from hmarr/fix-nan-mutation-warning\nPrevent NaN props from triggering warnings', 'Avoid reading the property if hasOwnProperty is false\nEasy with an Object.assign polyfill', 'Merge pull request #3175 from sebmarkbage/fixhasownorder\nAvoid reading the property if hasOwnProperty is false', 'Forgotten string\nWe forgot this %s as this was converted.', 'Merge pull request #3177 from sebmarkbage/fixbindwarningstring\nForgotten string', 'Support rendering to null in ShallowComponentRenderer\nReviewers: @sema, @zpao\nTest Plan:\n$ npm jest', 'Merge pull request #3183 from yungsters/master\nSupport rendering to null in ShallowComponentRenderer', 'Added special edition round-up for React.js Conf 2015\n(cherry picked from commit 233980826cb36244dbcd6de0f9bb9f0a3fcae1ac)', 'Replace Ballmer Peak example with Quadratic Formula', 'Merge pull request #3108 from zpao/quadratic-example\nReplace Ballmer Peak example with Quadratic Formula', 'Using https for embedded fiddles\nOfficial announcement from jsfiddle:\nhttps://twitter.com/jsfiddle/status/565041134435852289', 'Merge pull request #2821 from zpao/unitless-css-boxflex\nAdd boxFlex and boxFlexGroup to CSS Unitless Properties', 'Support unmounting in ReactShallowRenderer\nReviewers: @sebmarkbage, @zpao\nTest Plan:\n$ npm test ReactTestUtils', 'Merge pull request #3187 from yungsters/shallow\nSupport unmounting in ReactShallowRenderer', 'lint: remove spaces from object braces', 'lint: remove spaces from array brackets', 'Use same pathways for browser transforms as we use in react-tools\nThis makes sure we can use the same options everywhere, even from react-rails,\nwithout having to specify each one separately in JSXTransformer as well.', 'Added the immutability talk to the React.js Conf update.\n(cherry picked from commit de8b3eb9d4c87622282c1303c8dae62cf70881af)', 'Remove lodash devDependency', 'Move option parsing into react-tools proper.\nWe were doing some preprocessing for module options in the command line. Since\nwe also expose the same API via react-tools (and JSXTransformer), we need to do\nthe same processing from the API. So just move it all to the same place.', 'Merge pull request #3165 from oiva/jquery-mobile-example\nChange how components are rendered in jQuery Mobile example. Fixes #2880', 'Merge pull request #3189 from hzoo/more-lint\nMore lint - remove spaces in object braces / array brackets', 'Merge pull request #3180 from cody/https\nUsing https URLs for embedded fiddles', 'Warn when using constructor function directly\nWe no longer support the legacy factory style of calling component constructors\ndirectly. We only support createElement or the wrapping of classes with\ncreateFactory. Instead of letting this fail in a gross way as we try to run,\nadd a nice warning that shows up before the gross TypeError.', 'Merge pull request #3193 from fisherwebdev/remove_lodash\nRemove lodash devDependency', "More warnings to ReactFragment.create\nApparently I could've used these too because if you accept an arbitrary\nnode, then these could end up being objects, but those objects might\nalso be arrays or elements.", 'Lint vendor/fbtransform as well', 'Merge pull request #3205 from sebmarkbage/warningfixes\nMore warnings to ReactFragment.create', 'Merge pull request #3201 from zpao/non-factory-invariant\nWarn when using constructor function directly', 'Merge pull request #3198 from zpao/jsx-option-parsing\nMove option parsing into react-tools proper.', 'Merge pull request #3206 from zpao/lint-fbtransform\nLint vendor/fbtransform as well', 'Merge pull request #3191 from zpao/jsxtransformer-use-shared-code\nUse same pathways for browser transforms as we use in react-tools', 'Put deprecation warning for classSet\nAlso removes the one test that used the module.', 'Fixed mistake in jsdocs types for cloneWithProps', 'Merge pull request #3208 from jsfb/clonewithprops-jsdocs\nFixed mistake in jsdocs types for cloneWithProps', 'lint from root', 'Fix a doc. cloneWithProps clones a ReactElement.', 'remove ballmer example', 'Merge pull request #3161 from koba04/fix-clone-with-props-document\nFix a doc. cloneWithProps clones a ReactElement.', 'fix .eslintignore', 'lint vendor/*.js', 'Merge pull request #2921 from hanski07/updateTransferringPropsDocs\nUpdate transferring props docs', 'Merge pull request #2993 from chenglou/classset-ded\nPut deprecation warning for classSet', 'Fix long lines in vendor/fbtransform/visitors\nI meant to do this with #3206 but forgot to add them.', 'Merge pull request #3209 from chicoxyzzy/eslint-everywhere\nlint from root', 'Add Relay blog post\ncloses #3174', 'Contributing: cleanup quote style\nThe line above it recommends \' over ", and yet the line in question uses ".', 'Merge pull request #3212 from denis-sokolov/patch-1\nContributing: cleanup quote style', "Expose --target flag on jsx executable\nValid values are 'es3' and 'es5'.\nes3: perform reserved words quoting, don't use defineProperty\nes5: default, don't do the above, class methods non-enumerable", 'Merge pull request #2847 from zpao/jsx-es5\nExpose --target=esversion flag on jsx executable', 'Merge pull request #2994 from chenglou/docs-classset\n[Docs] Add note on classSet deprecation', 'wider Twitter timeline on support page', 'Add vendor/inline-source-map.js to package.json', 'Add support for jstransform es6-call-spread', 'Merge pull request #3233 from artnez/es6-call-spread\nAdd support for jstransform es6-call-spread', 'Merge pull request #3232 from artnez/master\nAdd vendor/inline-source-map.js to package.json', 'Merge pull request #3224 from Simek/patch-2\nwider Twitter timeline on support page', 'Update dependencies', 'v0.13.0-rc1']v0.12.2 React Core

Added support for more HTML attributes: formAction, formEncType, formMethod, formTarget, marginHeight, marginWidth
Added strokeOpacity to the list of unitless CSS properties
Removed trailing commas (allows npm module to be bundled and used in IE8)
Fixed bug resulting in error when passing undefined to React.createElement - now there is a useful warning

React Tools

JSX-related transforms now always use double quotes for props and displayName
 ['Merge pull request #2473 from zertosh/docs-ssr-at-sc\nAdd React at SoundCloud talk', 'Merge pull request #2475 from jsfb/master\nUse adjective "too" instead of "to"', "Merge pull request #2498 from ikr/patch-1\nThere's no isComponentOfType() anymore", 'Merge pull request #2514 from jvalente/patch-1\nUpdate ref-09-glossary.md', 'Merge pull request #2544 from mjul/patch-1\nUpdate 10.4-test-utils.md', 'Merge pull request #2554 from samccone/patch-1\nUpdate tutorial language to be more explicit.', 'Merge pull request #2555 from mfunkie/patch-1\nAnimation documentation for ReactTransitionGroup', 'react.js conf updates', 'better wording thanks to @jwalke', 'Mention that talks will be recorded', 'Wrote Community Roundup #24', 'Community #24: New Carousel link, spelled react-prism correctly, and removed the whale-speak.', 'Merge pull request #2630 from shamrin/patch-1\nfix typo in addons.update() $splice command help', 'Merge pull request #2633 from koba04/fix-addons-document\nFix addons documentation of development only part', 'Merge pull request #2616 from christianalfoni/patch-3\nAdding link to wiki', 'Merge pull request #2623 from jbhatab/patch-1\nScreencast interfacing react + backbone', 'Merge pull request #2622 from rafd/patch-1\nadd note re: handling events in capture phase', 'Merge pull request #2636 from zpao/docs/spread-assign-update\n[docs] Remove generic spread, Object.assign  mentions', 'Merge pull request #2615 from af/createElement-docs\nAdd top-level API docs section for React.createElement.', 'Merge pull request #2649 from cookfront/master\nIn Transferring Props guide, Manual Transfer section will lead an er...', 'Merge pull request #2639 from zpao/own-jsfiddle\nOwn our fiddles so we can update them more easily', 'Merge pull request #2635 from zpao/docs/props-state-clarification\n[docs] Clarify when state may duplicate props', 'Merge pull request #2671 from benkeen/patch-1\nUpdate 10.6-update.md', 'Merge pull request #2672 from cookfront/master\nThe same problem in issue #2648', 'Merge pull request #2679 from tschaub/patch-1\nAdd missing verb in docs', 'Merge pull request #2689 from camsong/master\nAdd Chinese translation of jsx-in-depth', 'Merge pull request #2694 from camsong/master\nAdd Chinese translation of js-spread', 'Merge pull request #2705 from Swader/patch-1\nUpdate 02-displaying-data.md', 'Merge pull request #2716 from RichardLitt/patch-2\nDelete extraneous period', 'Merge pull request #2718 from alextsg/patch-1\nUpdate tutorial.md for grammatical changes', 'Merge pull request #1708 from chenglou/displayName\nUse double quote for transformed displayName', 'Merge pull request #2452 from Shahor/master\nTrailing commas break old IE versions', 'Merge pull request #2482 from BinaryMuse/bkt/fix-stroke-opacity\nAdd strokeOpacity to unitless CSS properties', 'Merge pull request #2489 from cody/form\nAdd Attributes formAction, formEncType, formMethod and formTarget', 'Merge pull request #2610 from zpao/update-commonjs-example\nUpdate commonjs example for 0.12', 'Merge pull request #2658 from ianobermiller/margin-attrs\nSupport marginHeight and marginWidth attributes', 'Merge pull request #2726 from zpao/createElement-undefined-null\nProtect better against createElement(null/undefined)\nConflicts:\n    src/classic/element/tests/ReactElementValidator-test.js', 'update docs for 0.12.2 changes', 'Readme + Changelog for 0.12.2', 'v0.12.2 blog post', 'Bump version for 0.12.2', '0.12.2 starter kit', 'Merge pull request #2724 from zpao/release-0.12.2\nRelease 0.12.2']v0.12.1 React Tools

Types transform updated with latest support
jstransform version updated with improved ES6 transforms
Explicit Esprima dependency removed in favor of using Esprima information exported by jstransform
 ['Change the date and the link url to match the proper roundup', 'Add 0.12 starter kit', 'Merge pull request #2419 from johnheroy/patch-1\nAdd comma for readability in tutorial.md', 'Merge pull request #2428 from cody/fixes\nReact.renderComponent --> React.render', 'Merge pull request #2418 from spencer48/patch-1\n(docs) Added commas to increase readability.', 'Merge pull request #2443 from kruppel/kurt/minor-tip-typo\nFix typo in If/Else JSX doc.', 'Merge pull request #2433 from zpao/fiddle-integration\nBring in jsfiddle integration script, add harmony', 'Merge pull request #2434 from Shraymonks/propTypes-docs\nUpdate deprecated propTypes', 'Merge pull request #2463 from fson/render-to-string-docs\nUpdate React.renderToString argument type in docs', 'Update jstransform version to ^7.0.0\n(cherry picked from commit c260c45db31d550f914c626ed484a9d40e70f43f)', 'Remove esprima-fb and use Syntax from jstransform\n(cherry picked from commit bf0a857a9296046552c771ed983fd7e4761f894f)', 'Update stripTypes transform to use fixed up jstransform transform\n(cherry picked from commit 0d308add09df27456d2cd0bf99848d43b0115388)', "Re-shrinkwrap dependencies with new package.json\nAfter running npm install with the old shrinkwrap, I ran:\nrm -rf npm-shrinkwrap.json node_modules/esprima-fb/\nnpm install\nnpm install envify@3.0.0\nnpm shrinkwrap --dev\nand ended up with this file. (I had to re-install envify because it wants jstransform@'^6.1.0' but was getting the one at the root which is now 8.0.0. Now it uses its own copy in node_modules/envify/node_modules/jstransform/.)", 'Merge pull request #2543 from spicyj/strip-types-2\nCherry-pick jstransform, strip-types upgrades and re-shrinkwrap', 'v0.12.1', 'Needed to npm shrinkwrap with --dev', 'Update jstransform to version 8.2.0', 'Include 0.12.1 starter kit', 'Changelog, Readme updates for v0.12.1']v0.12.0 React Core
Breaking Changes

key and ref moved off props object, now accessible on the element directly
React is now BSD licensed with accompanying Patents grant
Default prop resolution has moved to Element creation time instead of mount time, making them effectively static
React.__internals is removed - it was exposed for DevTools which no longer needs access
Composite Component functions can no longer be called directly - they must be wrapped with React.createFactory first. This is handled for you when using JSX.

New Features

Spread operator ({...}) introduced to deprecate this.transferPropsTo
Added support for more HTML attributes: acceptCharset, classID, manifest

Deprecations

React.renderComponent --> React.render
React.renderComponentToString --> React.renderToString
React.renderComponentToStaticMarkup --> React.renderToStaticMarkup
React.isValidComponent --> React.isValidElement
React.PropTypes.component --> React.PropTypes.element
React.PropTypes.renderable --> React.PropTypes.node
DEPRECATED React.isValidClass
DEPRECATED instance.transferPropsTo
DEPRECATED Returning false from event handlers to preventDefault
DEPRECATED Convenience Constructor usage as function, instead wrap with React.createFactory
DEPRECATED use of key={null} to assign implicit keys

Bug Fixes

Better handling of events and updates in nested results, fixing value restoration in "layered" controlled components
Correctly treat event.getModifierState as case sensitive
Improved normalization of event.charCode
Better error stacks when involving autobound methods
Removed DevTools message when the DevTools are installed
Correctly detect required language features across browsers
Fixed support for some HTML attributes:
list updates correctly now
scrollLeft, scrollTop removed, these should not be specified as props
Improved error messages

React With Addons
New Features

React.addons.batchedUpdates added to API for hooking into update cycle

Breaking Changes

React.addons.update uses assign instead of copyProperties which does hasOwnProperty checks. Properties on prototypes will no longer be updated correctly.

Bug Fixes

Fixed some issues with CSS Transitions

JSX
Breaking Changes

Enforced convention: lower case tag names are always treated as HTML tags, upper case tag names are always treated as composite components
JSX no longer transforms to simple function calls

New Features

@jsx React.DOM no longer required
spread ({...}) operator introduced to allow easier use of props

Bug Fixes

JSXTransformer: Make sourcemaps an option when using APIs directly (eg, for react-rails)
 ['0.12 rc1 release materials\n\nblog post\nstarter kit\n', 'Merge pull request #2364 from zpao/0.12rc-blog-post\n0.12 rc1 release materials', 'Fix warning message for using React.DOM.* as type\nPreviously, this said \'Use the string "function() { [native code] }" instead.\'.', 'Community round-up #23', 'Merge pull request #2356 from vjeux/roundup_23\nCommunity round-up #23', 'Merge pull request #2368 from spicyj/use-the-string\nFix warning message for using React.DOM.* as type', 'Update 09.1-animation.md\nAdd note about ReactTransitionGroup, that any additional, user-defined, properties will be become properties of the rendered component.\nAnd example how to render a <ul> with css class.', 'Fix JSDoc tag in ReactElement.js', 'Deprecate isValidClass\nFixes #2374', 'Merge pull request #2381 from shripadk/jsdoc-fix\nFix JSDoc tag in ReactElement.js', 'Merge pull request #2373 from genbit/docs-animation-props\nUpdate 09.1-animation.md', "[Docs] Remove most of @jsx\nI kept some places intact (search for @jsx) because they require other bigger changes:\n\nref-01-top-level-api.md\ngrunt/tasks/npm.js\nold blog posts (don't change those)\nexamples/ folder, as they have their own package.json that rely on old dependencies (node-jsx, reactify) that haven't upgraded to 0.12\n", 'Merge pull request #2384 from sebmarkbage/deprecateisvalidclass\nDeprecate isValidClass', 'Support but warn on key={null}\nFixes #2386.\nTest Plan: jest', 'Merge pull request #2370 from chenglou/rm-school\n[Docs] Remove most of @jsx', 'Merge pull request #2388 from spicyj/null-key\nSupport but warn on key={null}', 'Update licenses for docs and examples\nDocs are now CC licensed\nExamples are under a separate license', 'Merge pull request #2322 from zpao/update-licenses-docs-examples\nUpdate docs/examples with licenses', 'Update docs to align with 0.12 better\n\nRename React.renderComponent -> React.render\nRemove most references to transferPropsTo\n', 'Merge pull request #2372 from spicyj/docs012-1\nUpdate docs to align with 0.12 better', 'Update travis-ci badge for 0.12-stable branch', 'Fix typo in 0.12 RC blog post', 'Hide ReactElement constructor\nThis prevents feature tests like:\nvar ReactElement = React.createElement(...).constructor;\nif (element.constructor === ReactElement)\nThis is intentional so that we have the option to make these plain objects.\nE.g. for direct inlining or replacing them with value types.', 'Merge pull request #2405 from sebmarkbage/hideelementconstructor\nHide ReactElement constructor', 'Update properties/elements', 'React.renderComponent -> React.render\nThis covers most everything. The perf suite still needs work for the\nElement updates. And the server rendering example needs to be done\nwholesale.', "Update server servering example\nIt's referencing packages that aren't published yet but it probably\nworks...", 'Remove @jsx from examples', '[docs] Glossary\nPulled in https://gist.github.com/sebmarkbage/fcb1b6ab493b0c77d589\nmostly verbatim', 'Use --harmomy in docs examples for cleaner code', 'Update React.DOM -> React.createElement through docs', 'Update Animation docs for createElement', 'Updated Docs for new JSX Changes\nMoved non-JSX explanation to Displaying Data.\nOverhauled JSX in Depth.\nAdded JSX Spread Section.', 'Replace transferPropsTo with transferring props patterns', 'More Descriptor -> Element renames', 'Update Docs Navigation', 'Merge pull request #2413 from LeonFedotov/patch-1\nChanging api documentation for jsx transformer', "Merge pull request #2414 from benleiken/patch-1\nMoved key requirement note into 'getting started'", 'React.js Conf blog post\nCloses #2412', 'Update Authors & Acknowledgements for 0.12', 'Update version references in the readme', 'Update cdnjs link, include jsdelivr in readme', '0.12 CHANGELOG', '0.12 blog post', 'Merge pull request #2399 from zpao/0.12-docs\nDocs updates for 0.12', 'v0.12.0\n\nupdate versions in packages, react\nupdate version in docs\nnpm shrinkwrap\n']v0.12.0-rc1  ["Only stop if the transition on this element ended\nThis way it doesn't end when some random element elsewhere on the page has an ending transition.\nIt must be noted that this is not a complete fix. If you have multiple transitions on the element, it still ends when the first ends.\nI ran into this not working (the transition ends almost immediately, because some unrelated transition ends). This fixes it for me, but I was wondering whether this cornercase was considered, and whether the other cornercase (multiple transitions) was considered.\nI think it's very hard to get this correct, and think it might be better to make the timeout explicit, or at least allow to set it explicit, and fall back to this behaviour. But I'm really interested in feedback on this one.", 'Add React.batchedUpdates to public API\nFixes #906.', 'Guard against contentEditable with children props', 'Added event parameter', 'Make sure it works when we have no css transitions', 'Apply component and mixins specs deterministically\nFixes #1589.', 'Warn when using hyphenated style property names', "Simplify composite lifecycle state\nWe now forbid calling setState or forceUpdate if any component's render function is higher in the stack, not just the component you're trying to update. (We do this already now for React.renderComponent and React.unmountComponentAtNode.)\nThis also has the advantage that we can now remove CompositeLifeCycle.RECEIVING_STATE, making _compositeLifeCycleState easier to reason about (not to mention that RECEIVING_STATE was a confusing name) and making it possible to remove a try/finally from the render path which might help with perf.", 'Also list  in error message as possible culprit', 'add translation for 02-displaying-data.md and change next link in 01-why-react.zh-CN.md', 'fix some translation bug', 'Fix IE8 potentially throwing during restoreSelection', 'Update videos.md\nAdding video for my recent talk in London about using React in large scale applications', 'Update videos.md\nreordering to spot #4', 'add picture element and related attributes', 'add picture to xjs.knownTags', 'Release materials for 0.11', 'Bump version for 0.12.0-alpha\n[skip ci]', 'Merge pull request #1835 from amm385/patch-1\nUpdate videos.md', 'Update 2014-07-17-react-v0.11.md', 'Fix appearance of video thumbnail', 'Merge pull request #1860 from KyleAMathews/patch-3\nNot a candidate anymore', 'fix typo\nCloses #1859.', 'Update Todo MVC example\nA small patch for the Todo MVC example to use React 0.11.0.\nThis then allows the MainSection to return null instead of\nprevious <noscript/>.', 'Add note about key prop being excluded by cloneWithProps\nWhilst this is intentional behaviour (see #1274), it is not documented anywhere, so it is worth mentioning.\nIt would also be nice if React issued a warning to console if a cloned component loses its key (as this will silently break reconciliation?)', 'getModifierState is case sensitive', 'Merge pull request #1837 from garrensmith/update-todo-example\nUpdate Todo MVC example', "Don't initialize reconcile transaction on server\n...when calling setState from within a componentWillMount. Fixes #1866.\nTest Plan: jest", 'Merge pull request #1869 from syranide/modistatecase\ngetModifierState is case sensitive', "Merge pull request #1870 from spicyj/gh-1866\nDon't initialize reconcile transaction on server", 'Fix browser-tranforms', 'Merge pull request #1876 from petehunt/fix-jsxt2\nFix JSXTransformer', "Move key/ref off props and prepare for new descriptor factories\nBreaking changes\n\n\nkey/ref are no longer accessible on props but they are accessible on the\n  descriptors. This means that parents/owners can access it but not the\n  component itself.\n\n\nDescriptor factories are now plain functions and you can't rely on the\n  prototype or constructors of descriptors to identify the component type.\n\n\nExisting descriptor factories are now wrapped in a legacy factory. Currently it\ndoes nothing but it will give us a hook to track callers to factories that are\nnot using JSX but just invoking the function directly. It also proxies static\nmethods/properties to the underlying class. The newer factories don't have this\nfeature.\nReactTextComponent has it's own little factory because it's props is not an\nobject. This is a detail and will go away once ReactTextComponent no longer\nneeds descriptors.", 'Avoid leading spaces when first argument to joinClasses is falsy.\nThis detail is going to become more important once the idiom\nclassName={joinClasses(this.props.className, newClass)} becomes more\ncommon, as it will when we move away from this.transferPropsTo.', 'Drop transferPropsTo usage in React core\nThese were completely unnecessary uses of transferPropsTo.', "Use Object.assign in merge/mergeInto\nRelax the argument type checks. Currently we throw for non-objects and terminals\nbut Object.assign does a coercion to Object instead. It also allows merging\nArrays as if they are objects.\nThis also relaxes the check for dependents such as ImmutableObject. This sucks\nbut it will allow us to use a fast code path to native Object.assign.\nWe always have the option of adding warnings to Object.assign or static type\nchecks.\nI'm keeping the null check. Object.assign throws for null checks.\nWe'll also start returning the result of coercions just like Object.assign.", "Don't call window.getSelection when it isn't defined.\nSadly, jsdom does not support window.getSelection yet, but\nExecutionEnvironment.canUseDOM is true in a jsdom environment.", 'Fix ReactTestUtils.mockComponent so that mockTagName is not ignored.\nThe mockTagName parameter was always optional, and so probably was not\nused very often. If you tried to use it, it would be shadowed by the\nvar mockTagName declaration in the render method, so only\nmodule.mockTagName or "div" were ever possible values.', 'When proxying statics functions, copy properties\nPort of 076047012adf8de9328e582eac35412e6bb808b2 which went in\nexternally before ReactLegacyDescriptor happened, so it needed to be\nported.', 'Deprecate transferPropsTo', 'Move defaultProps resolution to the descriptor factory\nMoves the defaultProps resolution to the descriptor factory.', 'getModifierState incorrectly exposed as SyntheticMouseEvent.getEventModifierState', 'Note how to access Perf in docs', 'Use faster cached regexps for tests in setInnerHTML', 'Reword sentence in reconciliation docs', 'JSXTransformer, stricter parsing of script type', 'Fix small issue in ReactContext comment\nNoticed this the other day and meant to fix it.', 'Remove _addPromise from Dispatcher code example \n_addPromise is not used in the provided Dispatcher example, nor does it exist in Dispatcher.js found here: https://github.com/facebook/react/blob/master/examples/todomvc-flux/js/dispatcher/Dispatcher.js', "[Docs] Add recent addons to addons.html; tweak wording\nAdd PureRenderMixin and Perf to this page. Also, I think it's better if the link titles reflect the name used by these addons.", 'Merge pull request #1893 from chenglou/docs-bar\n[Docs] Add recent addons to addons.html; tweak wording', 'Merge pull request #1882 from glenjamin/patch-1\nNote how to access Perf in docs', 'follow docs convention for notes', 'Merge pull request #1891 from robarnold/patch-1\nFix small issue in ReactContext comment', 'Merge pull request #1892 from thauburger/patch-1\nRemove _addPromise from Dispatcher code example', "Include Object.assign polyfill\nThis isn't a good final solution but it makes React actually usable on\nits own.\nThis also makes tests runnable, though only via jest\n(./node_modules/.bin/jest)", 'Simpler way to prevent flushing updates on server\nTest Plan: Only failing tests in jest are immutable tests that were already failing.', 'Merge pull request #1908 from spicyj/simpler-server-willmount\nSimpler way to prevent flushing updates on server', 'Add ReactUpdates.setImmediate for async callbacks\nCallbacks passed to this setImmediate function are called at the end of the current update cycle, which is guaranteed to be asynchronous but in the same event loop (with the default batching strategy).\nThis is useful for new-style refs (#1373, #1554) and for fixing #1698.\nTest Plan: jest', "Use setImmediate to defer value restoration\nDepends on #1758.\nFixes #1698.\nPreviously, controlled components would update too soon when using something like ReactLayeredComponentMixin (i.e., before the layer's updates could propagate from the parent), causing the cursor to jump even when always updating the new model value to match the DOM state. With this change, we defer the update until after all nested updates have had a chance to finish, which prevents the cursor from misbehaving.\nAlso cleaned up the logic around updating a bit -- the .value and .checked updates in ReactDOMInput weren't being relied on at all so I removed them and opted for a simple forceUpdate instead. I also got rid of _isChanging which hasn't been necessary since the introduction of update batching.\nTest Plan: Tested the example in http://jsfiddle.net/Bobris/ZZtXn/2/ and verified that the cursor didn't jump. Changed the code to filter out numbers and verified that the field prevents typing numbers (attempting to do so still causes the cursor to jump to the end). Also verified that controlled and uncontrolled radio buttons, textareas, and select boxes work.", 'Move react-source gem out of project root\nNow it requires a build step. At least the confusing lib directory is\ngone though.', 'Merge pull request #1909 from zpao/move-react-source\nMove react-source gem out of project root', 'Merge pull request #1879 from syranide/modistatewrong\ngetModifierState incorrectly exposed as SyntheticMouseEvent.getEventModifierState', 'Merge pull request #1774 from syranide/ie8focusthrow\nFix IE8 potentially throwing during restoreSelection', 'getModifierState should always return a boolean', 'Merge pull request #1865 from syranide/modistatefalse\ngetModifierState should always return a boolean', 'Remove empty TextNode left behind by IE8 setInnerHTML workaround', 'Merge pull request #1560 from spicyj/simplify-lifecycle\nSimplify composite lifecycle state', 'Merge pull request #1903 from syranide/ie8nmlb\nRemove empty TextNode left behind by IE8 setInnerHTML workaround', 'HAS_SIDE_EFFECTS properties must compare as property type', 'Use .bind when autobinding\nThis eliminates all of the boundMethod frames from call stacks when debugging and as far as I know should behave the same otherwise.\nTest Plan: jest', 'Merge pull request #1770 from eins78/master\nAlso list  in error message as possible culprit', 'Merge pull request #1511 from syranide/strsidefx\nHAS_SIDE_EFFECTS should compare by type-casting', '[docs] increase base font-weight\nCloses #1926', 'Merge pull request #1924 from spicyj/autobind-bind\nUse .bind when autobinding', 'ReactTransitionChildMapping comment typo', 'v0.11.1 release materials, update to 0.11.0 release materials\n\n0.11.1 blog post, changelog\nUpdate to 0.11.0 post, changelog\nUpdate version in site, add starter kit\n', 'Merge pull request #1929 from zertosh/master\nReactTransitionChildMapping comment typo', "Delete ImmutableObject-test.js\nOur syncing doesn't update these tests so just remove them.", 'Partially revert React.createDescriptor\nWe still have some issues to work out when the type argument is a mock.', 'Clarify animating one or zero items in docs\nWhen I first read these docs, it was not immediately clear to me that I could\nuse React.addons.CSSTransitionGroup to animate a single item coming into view,\nor an item replacing an item already there. This was partly due to the example\nwhich rendered a list of items.\nThis PR adds a blurb about being able to use\nReact.addons.CSSTransitionGroup with one or zero items, provides a code\nexample, and adds a note blockquote that a key attribute must always be\nprovided on each child of React.addons.CSSTransitionGroup. The latter point\nwas not immediately obvious from the original TodoList code example, since it\nrenders a list which would normally require key attributes anyway.\nTest Plan:\n- Refreshed http://localhost:4000/react/docs/animation.html, saw that the\n  docs additions rendered correctly.\n- Example code not tested (it was extracted from working code).', 'Community Round-up #20', 'Merge pull request #1942 from LoukaN/roundup_20\nCommunity Round-up #20', 'Wording tweaks to community roundup', "Fix typo for 'fundations'", "Merge pull request #1943 from shaneosullivan/patch-1\nFix typo for 'fundations'", 'Fix small language nits', 'Update 2014-07-28-community-roundup-20.md', 'Merge pull request #1941 from divad12/animating-one-or-zero-items-docs\nClarify animating one or zero items in animation docs', 'Merge pull request #1944 from shaneosullivan/patch-3\nFix small language nits', 'Rename "Ice Lab studio" to "Icelab"', 'Adding "Tutorial" label to Flux Todo List nav item', 'Updating "Tutorial" label as per suggestion', 'Merge pull request #1951 from JedWatson/patch-1\nAdding "Tutorial" label to Flux Todo List nav item', 'cssFloat is only accessible as styleFloat on IE8', 'Update 09.2-form-input-binding-sugar.md\nAdd better explanation for 2-way data binding to checkboxes using checkedLink. As mentionned here: https://github.com/facebook/react/issues/1930', 'Merge pull request #1854 from syranide/floatfix\ncssFloat is only accessible as styleFloat on IE8', 'Merge pull request #1758 from spicyj/setimmediate\nAdd ReactUpdates.setImmediate for async callbacks', 'Merge pull request #1759 from spicyj/gh-1698\nUse setImmediate to defer value restoration', 'Update 09.2-form-input-binding-sugar.md -> better checkedLink documentation', 'Fix typo', 'Merge pull request #1961 from knuton/patch-1\nFix typo', 'Flux blog post about dispatcher', 'Include image', 'fix spurious )', 'update background color for image', 'Update CONTRIBUTING.md', 'Merge pull request #1827 from syranide/jsxstrict\nJSXTransformer, stricter parsing of script type', 'Docs: added note about setState() side-effects', 'Merge pull request #1960 from julen/docs/setState\nDocs: added note about setState() side-effects', 'Merge pull request #1885 from syranide/testinnerhtml\nUse faster cached regexps for tests in setInnerHTML', 'Improve normalization of charCode, fix FF not reporting Enter', 'Merge pull request #1956 from syranide/ffenter\nImprove normalization of charCode, fix FF not reporting Enter', 'Update ref-08-reconciliation.md', "Adding a note just below the jQuery inclusion in the tutorial to inform that jQuery is not mandatory.\nIt's linked with #603", 'Community Roundup #21', 'typo', 'Merge pull request #1985 from jimobrien/master\nFix typo in test utils documentation', 'english + casing + 02 -> 03', 'Merge pull request #1976 from vjeux/community_21\nCommunity Roundup #21', 'typo "refere" -> "reference"', "Using the markdown's quote syntax and explaining why use include jQuery", 'Merge pull request #1972 from cutbko/patch-1\nUpdate ref-08-reconciliation.md', 'Wording tweaks to reconciliation docs', 'Slightly more considerate devtools warning\nSee #953.', 'Merge pull request #1993 from spicyj/devtools-warning-2\nSlightly more considerate devtools warning', '[docs] Add parens to defeat ASI in example\nFixes #1996.', 'Cancelling Travis build on commits with docs updates only.\nCurrently recognized patterns:\n\nany Markdown files (*.md)\nany files in docs or examples directories.\n\nCloses facebook/react#1768.', 'Simplified and improved test-cases for ReactMultiChildText-test', 'Merge pull request #1974 from jstoja/jquery-tutorial\njQuery note in tutorial', 'Merge pull request #1990 from syranide/rmctest\nSimplified and improved test-cases for ReactMultiChildText-test', "Add a 'note' about passing arrays into the value attribute\nThis is for #1700", 'Add createElement alias for createDescriptor', "Fire onBeforeUpdate for space on Android\nWe deliberately skip the event, but Android Chrome\ndoesn't fire the keypress, so this is wrong.", "Add ={true} so it's aligned with recommended practises", 'Remove quotes around the value attribute', 'Update ref-01-top-level-api.md\nAdded docs for React.isValidClass and React.isValidComponent. \nStill missing top level api:\n\nconstructAndRenderComponent\nconstructAndRenderComponentById\nwithContext\n', 'Merge pull request #2000 from RReverser/stop-travis-on-docs\nCancelling Travis build on commits with docs updates only.', 'Clarify section introducing props', 'Merge pull request #2016 from samselikoff/patch-1\nClarify section introducing props', 'Clarify section introducing callbacks', 'Merge pull request #2018 from samselikoff/patch-2\nClarify section introducing callbacks', 'Close  tag in sample markup', 'Copy edit (fix grammar)', 'Merge pull request #2021 from adammark/patch-1\nClose  tag in sample markup', 'Merge pull request #1662 from gaearon/warn-when-using-hyphenated-style-names\nWarn when using hyphenated style property names\nCloses #1662\nConflicts:\n    src/browser/ui/dom/CSSPropertyOperations.js', '\n-> null in todomvc-flux Footer', 'Remove TodoMVC flux example\nIt lives at https://github.com/facebook/flux/tree/master/examples/flux-todomvc now.', 'Merge pull request #2025 from zpao/rm-flux-todomvc\nRemove TodoMVC flux example', 'changed type info. added descriptor to descriptions', 'Improve Danger error message to not blame React', 'Fix typo', 'Merge pull request #2028 from andrezsanchez/patch-1\nFix typo', 'Add support for  tag.\nfixes #2017', 'Merge pull request #2026 from spicyj/likely-a-bug-in-the-framework\nImprove Danger error message to not blame React', 'Minimal updates for Jekyll 2.0', 'Reorder _config for sanity', 'Update Bourbon files (4.0.2)', "Default to layout: post for posts\nJust a little less boilerplate. This also removes a bit of trailing\nwhitespace because it shouldn't have been there.", 'Set default layout for docs', 'Use jekyll-redirect-from instead of our other redirect method', 'Autogenerate acknowledgements', 'Update README to use bundle exec *\nAlso, referenced rake release task', 'Add classid property for  tag\nThis properties needed to work with ActiveX objects in IE, created by\n\ntag.\nCloses #1526', 'Throw an error when functions on statics clash due to duplicate keys', 'More informative error message for mergeObjectsWithNoDuplicateKeys', 'Merge pull request #2035 from zpao/jekyll-update\n[Docs] Update Jekyll + more', 'Abbreviated error message', 'Merge pull request #1952 from slorber/master\nUpdate 09.2-form-input-binding-sugar.md -> document checkedLink', 'Merge pull request #1060 from spicyj/gh-906\nAdd React.batchedUpdates to public API', 'Move batchedUpdated to React.addons\nThis is a followup to #1060, where I did not read closely enough before\nmerging.', '[docs] Move "| React" to end of page title\nLooks better in search results', '[docs] Move "| React" to end of OG title\nFor consistency!', 'Merge pull request #2010 from nw/patch-1\nUpdate ref-01-top-level-api.md', "Merge pull request #2007 from janhancic/better-docs-for-select-multiple\nAdd a 'note' about passing arrays into the value attribute", 'Merge pull request #1867 from WickyNilliams/patch-1\nAdd note about key prop being excluded by cloneWithProps', 'Merge pull request #1832 from rayqian/master\nAdd chinese translation for 02-displaying-data.md', "Throw if a reserved property is defined in 'statics'", 'TestUtils docs: isComponentOfType -> isDescriptorOfType\nFixes #1946', 'Merge pull request #2038 from zpao/update-testutil-docs\nTestUtils docs: isComponentOfType -> isDescriptorOfType', "Deprecate 'return false' in event handlers", 'JSXTransformer respects async attribute\nConflicts:\n    vendor/browser-transforms.js', 'Re-add  with warning and monitorCodeUse', "Update recast to 0.6, update constants.js\nI dropped the part of constants.js that we weren't using (namely the\npart where we insert constants) but left it open to do that. It should\nbe trivial, we just aren't using it.\nFixes #1824", 'Merge pull request #2042 from zpao/update-recast\nUpdate recast to 0.6, update constants.js', 'Merge pull request #1826 from syranide/jsxasync\nJSXTransformer respects async attribute', 'Fixed style and comment nits', 'Test for both true and false', "Don't force sourcemaps on for JSXTransformer APIs\nIn case somebody doesn't want sourcemaps (eg, react-rails) or r.js", 'Merge pull request #1601 from gaearon/apply-component-and-mixin-spec-deterministically\nApply component and mixins specs deterministically', "docs(flux-todo-list): fix TodoStore syntax\nAdd missing semicolon behind `TodoStore#addChangeListener'", 'Merge pull request #2058 from chantastic/patch-2\ndocs(flux-todo-list): fix TodoStore syntax', "Fix bad merge from 04c9820694ac07bb88d3dda32bf35a063c3c61a4\nDidn't sync out correctly.", 'remove doubled whitespace chars in jsDoc', 'Upgrade Commoner\nIt no longer parses @providesModule directives by default.\nFixes #1145', 'Merge pull request #2062 from dmitriiabramov/patch-1\nremove doubled whitespace chars in jsDoc', "Merge pull request #2053 from zpao/jsx-transformer-optional-sourcemaps\nDon't force sourcemaps on for JSXTransformer APIs", 'Iterate over expectedFeatures correctly\nThis fails if Array.prototype is extended.', 'More info in monitorCodeUse call', 'Update 09.1-animation.md\nThe reason I chose to submit this is because it was initially unclear from the docs that the transition group needed to already be mounted in order for it to work properly.', 'Look on __reactBoundContext for displayName', 'Update 09.1-animation.md', 'Merge pull request #2068 from ChrisSki/patch-1\nUpdate 09.1-animation.md', 'Update vendored modules', "Make createDescriptor return a descriptor for components\nThis moves all logic around legacy descriptors to ReactLegacyDescriptor. This\nis responsible for the layer that knows that createClass exports a legacy\nfactory. When passed one of these classes, it unwraps it to be a real class.\nIf it is passed a non legacy factory, it is assumed to be a non-react component\nthat needs to be invoked as a plain function.\nThe semantic change is that a descriptor is now always returned if passed a\nlegacy factory. Even if that factory is a mock. A mock would previously return\nundefined.\nFor mocks, I treat the factory as the authoritative function. I call it to extract\nthe instance or fill it with an empty component placeholder.\nAdditionally, I make the classes take props as the first argument to the\nconstructor. This is what the new class system will do.\nWe currently need to set up some internals by calling the internal construct\nmethod. Instead of doing that automatically in the constructor, I now move that\nto a second pass so that mocks can get the plain props.\nThis means that we can assert that a mock has been called once it's mounted\nwith it's final props. Instead of the descriptor factory being called.", "Drop usage of plain functions to create descriptors\nReplace plain function calls to legacy factories with createFactory or\ncreateElement. For ReactDOMComponents the type should be replaced with\nstrings.\nBecause we don't have easy access to ReactLegacyDescriptor from within\nReact, we need to use the .type property to extract the real class.\nThis will go away later and is covered by unit tests.", "Start warning when calling a legacy factory\nLet's start warning when a legacy factory is called as a plain function call.", 'Check if a function has a prototype first\nBecause somehow someone used a prototype less function with JSX.', "ReactMount calls a legacy factory use createDescriptor instead\nThis fixes some log spew since this pattern is deprecated. This doesn't use\nthe validator in the descriptor creation so there's no prop type checks here.\nI guess that's fine because we still have the second prop type checks.\nWe need to use ReactLegacyDescriptor because the constructor here will be a\nlegacy factory that we need to unwrap.\nconstructAndRenderComponent should be deprecated.", "Sync out latest JSX transforms\nThe biggest change: instead of calling functions directly, we now use\nReact.createElement to wrap.\nThe other big change: this removes the need for the @jsx pragma.\nInstead we'll parse everything, assume React is in scope,\nand only look for the actual XJS parts in the AST (as opposed to only\nruning the transform when @jsx was specified in the docblock).\nNote: this is actually a series of commits internally and should have\nbeen syned out in pieces over the past several weeks.", 'Add 2048-react to open-source demos\nNothing too complicated, but I think it could be a fun beginner demo.', 'Update Object.assign polyfill\nThe spec changed to allow null & undefined sources without throwing.\nNow our code depends on this new behavior. The only browser that\nimplements Object.assign has also updated its native implementation to\nthis behavior (Firefox Nightly).', 'Make npm run-script jest available\nThis is slightly shorter than typing ./node_modules/.bin/jest.', 'Add example to if else in JSX.', 'Merge pull request #2076 from whatasunnyday/master\nAdd example to if else in JSX.', "[RFC] Use accumulateInto to save even more allocation\nTrying to make the event a bit more performant for events.\nFeel free to reject this because the API inevitably isn't great. It's good for perf though, and since we're only using accumulate in very restrained places, I think we're fine.\naccumulateInto is accumulate that mutates more and allocates less. I kept accumulate in case we want that in the future.", 'Merge pull request #2054 from chenglou/accum\n[RFC] Use accumulateInto to save even more allocation', 'Merge pull request #2037 from crm416/duplicate-key\nMore informative error message for mergeObjectsWithNoDuplicateKeys', 'Indentation for eventHandlerName', 'use attribute for media, srcSet and sizes', 'Including missing validation check\nThe validation check was removed from the update to the CommentForm handleSubmit function.', 'Removed monitorCodeUse call', '[docs] Update Flux TodoMVC Tutorial', 'Adding e.preventDefault() to handleSubmit, \nAlso added plain return, updated text.', '[docs] fix nits', '[docs] remove redundant paragraph', 'Merge pull request #2078 from michaelrp/patch-1\nIncluding missing validation check', 'Use warning module', '[Docs] Make retina react logo work\nBourbon now takes _2x instead of @2x.', 'Merge pull request #2083 from chenglou/docs-retina-icon\n[Docs] Make retina react logo work', "Docs: renamed input's state to message\nReaders might feel confused with the actual input's value attribute.", 'Merge pull request #2036 from crm416/static-functions\nThrow an error when functions on statics clash due to duplicate keys', "Merge pull request #2039 from crm416/return-false\nDeprecate 'return false' in event handlers", 'Fix typo', 'Improve debugging for methods using ReactPerf', 'Combine displayName using underscore', 'Merge pull request #2080 from fisherwebdev/master\n[docs] Update Flux TodoMVC Tutorial', 'Fix console warning in LegacyImmutableObject\nIt does check hasOwnProperty, but after accessing the field and therefore triggering enumerable getters in modified prototypes.', 'Add version to legacy factory monitoring', "Don't transfer props to mocked empty component\nWe currently automatically render empty components in place of mocks. However,\nwe were accidentally transferring the props from the mocked descriptor to the\nempty component placeholder. Even children.\nThis change just cleans that up and should only affect unit tests.", "Start warning for JSX on plain functions\nLet's also bump the version number for the log so that we can start filtering\nout the other logs.", 'Bumping version to help filtering.', 'Bumping version to help filtering.', 'Add newline before JSX spread when appropriate\nPreviously, we were losing the newline before a JSX spread attribute which would cause the lines to not match up; this fixes the problem.', 'Include vendor/ when running jest tests\nNow the two transform tests get run alongside the React core tests.\nTest Plan: jest', 'Enable ES7 spread transform when using --harmony\nTest Plan: echo "var o = {...x};" | bin/jsx --harmony outputs var o = Object.assign({},x);.', 'Merge pull request #2118 from spicyj/es7-spread\nEnable ES7 spread transform when using --harmony', 'Merge pull request #2117 from spicyj/jest-vendor\nInclude vendor/ when running jest tests', 'added production example\nAddition note: Scribbler.co uses an infinite.js/UITableView like rendering pattern with animations which is only possible because of React.', "SVG logo\nI traced the current logo in Illustrator to get a good version. And with\nSVG we don't need any 2x magic because it's already vector. I should\nprobably care about IE8, but I don't.", 'Merge pull request #2119 from naman34/patch-1\nadded production example', 'Merge pull request #2075 from IvanVergiliev/patch-1\nAdd 2048-react to open-source demos', "Merge pull request #2091 from julen/docs/LinkedState\nDocs: renamed input's state to inputValue", "Add support for  tag's open attribute.", 'Small tweaks to HTML to JSX page:\n - Remove "Compiled JS" tab since it doesn\'t make sense\n - Relabelled editor to "Live HTML Editor" rather than "Live JSX Editor"', 'Fix DOMProperty bitmask checking', 'Merge pull request #2101 from jeffchan/patch-1\nFix typo in ReactDefaultPerfAnalysis comment', 'Merge pull request #2124 from Daniel15/htmltojsx-fixes\nSmall tweaks to HTML to JSX page', 'Merge pull request #2120 from zpao/svg-logo\n[docs] SVG logo', 'Fix broken link in animation docs\nMissed in #2068', 'Merge pull request #2033 from pekim/master\nAdd support for  tag.', 'JSX spec blog post', 'Merge pull request #2106 from subtleGradient/subtleGradient/improve-ReactPerf-debugging\nImprove debugging for methods using ReactPerf', 'Comment typo', 'added the missing **\nMissed it the last time. Apologies.', 'Update Like button example verbiage\nChanges text "You unlike this" to "You liked this". Makes a bit more grammatical sense.\nCloses #2146.', 'corrected highlighted/updated line in tutorial example', 'Reduce unnecessary warning while including JSX transformer in browser', 'Merge pull request #2147 from naman34/patch-2\nadded the missing **', 'Fix check for commit ranges in racing PRs.\nSee #1768 / #2000 for original issue.\nSee https://github.com/travis-ci/travis-ci/issues/1719#issuecomment-51705110 for problem description and origin of this fix.\nThis is still a temporary fix until travis-ci/travis-core#383 is merged.', 'Merge pull request #2148 from nordstrom-innovation/docfix\ncorrected highlighted/updated line in tutorial example', 'Bump esprima + jstransform versions', 'Add support for a --strip-types flag to bin/jsx', 'Merge pull request #2153 from jeffmo/jsx_strip_types\nAdd --strip-types flag to bin/jsx', 'Merge pull request #2152 from RReverser/fix-pr-check\nFix check for commit ranges in racing PRs.', 'Merge pull request #2116 from spicyj/nl-jsx-spread\nAdd newline before JSX spread when appropriate', 'Update video.md with Forward JS 2014 talk\nAdded "React and Flux: Building Applications with a Unidirectional Data Flow" by Bill Fisher and Jing Chen.', 'Correct highlighted block', "Move htmltojsx.js to React-Magic project.\nThe HTMLtoJSX file is really a part of the React-Magic project, and should belong there rather than here:\n - It doesn't really follow the release cycle of React at all\n - It is totally standalone with no dependency on React\n - The only usage of this script is in React-Magic and on the HTML to JSX page on the React website (http://facebook.github.io/react/html-jsx.html)\nI've hotlinked it from the Github site for that project since this was the easiest way to pull it in.\nDue to the fact that Github Pages lacks redirects (among other basic web hosting functionality), I've replaced the html-jsx-lib.js file with a comment explaining where the file has moved to, just in case anyone was hotlinking it from the React site.", 'Merge pull request #2156 from simonwelsh/patch-1\nCorrect highlighted block', 'Merge pull request #2155 from rickbeerendonk/patch-1\nUpdate video.md with Forward JS 2014 talk', 'console.warn when html-jsx-lib.js is loaded', 'Merge pull request #2158 from Daniel15/htmltojsx-move\nMove htmltojsx.js to React-Magic project.', "Don't wrap values with ReactTextComponent in traverseAllChildren", 'Remove calls to Range.detach\nThis method is a no-op, as demonstrated by console warnings in Chrome and https://developer.mozilla.org/en-US/docs/Web/API/range.detach.\nRemove callsites.\nFixes #2142', 'Update Bootstrap example to 3.2.0', "Merge pull request #1988 from syranide/tacfix\nDon't wrap values with ReactTextComponent in traverseAllChildren (cloneWithProps)", 'Merge pull request #1848 from fgnass/master\nadd picture element and related attributes', 'Merge pull request #2144 from zertosh/master\nComment typo', 'Update 09.5-clone-with-props.md', 'Update ref-03-component-specs.md\nEdit the description of componentDidMount() to make clear that the function is called only once during the lifecycle of the component, after only the initial render() call. The description is now similar to that for componentWillMount(). The existing wording does not make it clear that the function is called only after the initial render. (Granted, it is possible to infer this from descriptions of the component lifecycle found elsewhere in the documentation, but I think explicit is better than implicit in this case).', 'Added extra explanation for require() statements', 'Merge pull request #2165 from DJCordhose/patch-1\nUpdate 09.5-clone-with-props.md', 'Merge pull request #2113 from BinaryMuse/fix_numeric_properties\nFix DOMProperty bitmask checking', 'Merge pull request #2167 from mhintz/patch-1\nUpdate ref-03-component-specs.md', 'Updated small change with zuggestions from @zpao', 'Merge pull request #2170 from undernewmanagement/patch-1\nAdded extra explanation for require() statements', 'Move IE8 onscroll check\nRather than checking if document.onscroll exists in EventPluginHub\n(which is agnostic of the DOM) do it in ReactDOMComponent', 'Explain where to provide the key for dynamic children.', 'Less -> Fewer\nbugs and bytes are countable, so should be fewer', 'Merge pull request #2178 from benfoxall/patch-1\nDocs grammar tweak', 'Merge pull request #2097 from fitzgen/explain-where-to-provide-key\nExplain where to provide the key for dynamic children.', 'Move onscroll warning test\nThis moves it to the appropriate place to accomodate the move of the check.', "Ignore .module-cache from jest [skip ci]\nI hit a case where running jest was including files from the module\ncache. I don't think that should have happened, but this works.", 'Merge pull request #2181 from zpao/move-onscroll-detection\nMove onscroll detection', 'Community roundup #22', 'Merge pull request #2186 from vjeux/roundup_22\nCommunity roundup #22', 'Update 2014-09-12-community-round-up-22.md', 'Merge pull request #1301 from markijbema/patch-1\nOnly stop if the transition on this element ended', 'Remove non-attribute scrollLeft and scrollTop from HTMLDOMPropertyConfig', 'Fix a comment typo', '[docs] Clarify wording on sub-tree reconciliation\nThe previous wording could be interpreted to mean sub-trees moving from\nwithin one sibling to within another, rather than the shuffling of siblings on\na single level as intended', 'Fix typo in documentation in Flux Todo List', 'Merge pull request #2211 from jacobgreenleaf/master\nFix typo in documentation in Flux Todo List', 'Improved readability by removing semicolon\nThe first sentence had an unnecessary semicolon which made the whole thing difficult to read.  The new syntax is not only easier to read but also more exciting.', 'extracts getMeasurementsSummaryMap from ReactDefaultPerf.printWasted', 'Add stripTypes option to npm docs', 'Fix inconsistency in mockComponent argument name\nThe second argument of mockComponent was listed as tagName, but referred to in the description as mockTagName. I changed the first one to mockTagName to be consistent.', 'Acknowledge ProjectMoon for allowing us to use the flux name on npm', "add tip for the important jsx convention\nI missed the convention and wast hours to figure out what's wrong. \nAdd this tip in the document for who would miss the importance comment.", 'Merge pull request #2218 from fisherwebdev/master\nAcknowledge ProjectMoon for allowing us to use the flux name on npm', 'Merge pull request #2223 from cody/stripTypes\nAdd stripTypes option to npm docs', 'Un-mixin ReactBrowserComponentMixin from ReactTextComponent', 'Move examples from the website to the wiki.', 'Merge pull request #2209 from glenjamin/patch-2\n[docs] Clarify wording on sub-tree reconciliation', 'Reword Component API intro\nFixes #2179', 'Merge pull request #2180 from zpao/fix-2179\nReword Component API intro', 'Merge pull request #2225 from jesseskinner/patch-1\nFix inconsistency in mockComponent argument name', 'Prefer window.getSelection for IE\nIE9+ supports window.getSelection() but SelectEventPlugin gives precedence to document.selection instead. document.selection is still available in later versions of IE, but the modern Selection object is preferable. Swap the two.', 'Update getting-started.md\nmerge the warn and explain for the @jsx', 'Merge pull request #2149 from imcotton/jsx-reduce-warning\nReduce unnecessary warning while including JSX transformer in browser', 'Add space after ellipses', 'Merge pull request #2212 from Oleg24/patch-1\nImproved readability by removing semicolon', 'Update getting-started.md\nfix grammar', 'fixes ReactDefaultPerf.getMeasurementsSummaryMap format style', '[blog] testing flux applications', 'Merge pull request #2234 from fisherwebdev/master\n[blog] testing flux applications', 'Merge pull request #2228 from XuefengWu/patch-1\nadd tip for the important jsx convention', 'fix typos', 'Remove superfluous classID from DOMAttributeNames', 'Update flux-todo-list.md\nYou have to instantiate a Dispatcher to use it, not just grab the prototype or it will fail when trying to grab instance properties like: this.$Dispatcher._callbacks.', 'Merge pull request #2237 from markhovskiy/patch-1\nfix typos in "Testing Flux Applications"', 'Merge pull request #2240 from christianalfoni/patch-1\nUpdate flux-todo-list.md', "Point to Flux site for Flux docs\nThis doesn't actually remove the pages, just the main content. Sidebar\nitems now link offsite. The pages doesn't automatically redirect, but we\ncould do that if we really wanted.\nFixes #2229", 'Merge pull request #2236 from zpao/rm-flux-docs', "Merge branch 'zpao-rm-flux-docs'", 'Add manifest to HTMLDOMPropertyConfig', 'Spelling fix\n\nPuting -> Putting\n', 'Merge pull request #1520 from syranide/ediblechildren\nWarn against contentEditable with children props', 'Merge pull request #1598 from syranide/nogettext\nUn-mixin ReactBrowserComponentMixin from ReactTextComponent', 'Merge pull request #2202 from syranide/noscroll\nRemove non-attribute scrollLeft and scrollTop from HTMLDOMPropertyConfig', 'Merge pull request #2208 from wincent/typo-fix-03\nFix a comment typo', 'Merge pull request #2219 from pablolmiranda/master\nCreates a getMeasurementsSummaryMap in ReactDefaultPerf', 'Merge pull request #2254 from jgable/spellingFix\nSpelling fix for "Testing Flux Applications"', '[docs] Use subitem in new nav generation\n(cherry picked from commit 995d0e588bf245cb585951f21dfcc3862a48f55a)', "Rename ReactUpdates.setImmediate to 'asap'\nPer https://github.com/facebook/react/pull/1554#issuecomment-57243842.\nTest Plan: jest", "Use strings as the type for DOM elements\nThis makes ReactDOM a simple helper for creating ReactElements with the string tag as the type. The actual class is internal and created by instantiateReactComponent. Configurable using injection.\nThere's not a separate class for each tag. There's just a generic ReactDOMComponent which could take any tag name.\nInvididual tags can be wrapped. When wrapping happens you can return the same tag again. If the wrapper returns the same string, then we fall back to the generic component. This avoids recursion in a single level wrapper.", 'Merge pull request #2287 from sebmarkbage/stringelements2\nUse strings as the type for DOM elements', 'Update React JSX Transforms\n\nExtract JSXDOM into separate transform\nRename lower case variables in JSX to upper case\nDrop React.DOM docblock, use string tags instead\n', "Rename lower case variables in JSX to upper case\nWe're trying to move to a convention where lower-case variables on JSX are always HTML/SVG tags rather than variables in scope. See:\nhttp://fb.me/react-jsx-lower-case\nTherefore, this diff renames existing uses to upper case variables.\nThis throws an error on all these files, so I manually go rename all the variables. I then run lint to ensure that the rename doesn't leave any undeclared variables.", "Don't use React.DOM\nI grepped for uses of React.DOM. This is going to be a set of helper functions\nto generate ReactElements without JSX.\nThey're not classes so they cannot be used where a React class is expected.\nSince we always use JSX, we should have no internal use for these helpers.\nWe can use strings instead.", "Start warning when React.DOM.x is passed into JSX\nReact.DOM is becoming helper factories to generate ReactElements. They're not\nclasses. It will be ok to call them directly as functions, but not to use them\nwhere a class is expected.", "Renamed Descriptor -> Element\nWe've decided on a new naming convention for ReactDescriptor. It's now\ncalled ReactElement, which is a subset of the ReactNode union type.", 'Merge pull request #2300 from sebmarkbage/descriptorstoelements\nRenamed Descriptor -> Element', "Merge pull request #2276 from spicyj/asap\nRename ReactUpdates.setImmediate to 'asap'", 'Merge pull request #2238 from syranide/noclassid\nRemove superfluous classID from DOMAttributeNames', 'Merge pull request #2252 from syranide/htmlmanifest\nAdd manifest to HTMLDOMPropertyConfig', 'Renamed ReactDescriptor-test\nI forgot to rename the test.', 'Merge pull request #2305 from sebmarkbage/missingrename\nRename ReactDescriptor followup', "Remove ReactBrowserComponent dependency from ReactTextComponent\nIt's no longer used as of #1598, which just missed the require.\nTest Plan: build, jest", "Use Object.assign instead of merge, mergeInto, mixInto and copyProperties\nThis makes it easier to contribute without having to learn a bunch of\nslightly different helpers and remember their slightly different\nsignatures and semantics.\nWe'll probably start using ES7 spread properties instead of merge in the\nfuture when at least one more transpiler supports it.", 'Merge pull request #2303 from sebmarkbage/dropmerge\nUse Object.assign instead of merge, mergeInto, mixInto and copyPropertie...', 'Drop the @jsx docblock from unit tests\nThis is no longer necessary in our transforms.', 'Merge pull request #2306 from zpao/cleanup-textcomponent-dep\nRemove ReactBrowserComponentMixin dependency from ReactTextComponent', "Update ReactServerRendering for the modern world\n\nReactComponents aren't really the thing we need, ReactElements are\nRemove the deprecation notice that we've had in there for a long time\n\nTest Plan: build, jest", 'Merge pull request #2304 from zpao/rm-server-rendering-deprecation-notice\nUpdate ReactServerRendering for the modern world', 'Add form "acceptCharset" to HTMLDOMPropertyConfig', 'Require list property to be accessed as an attribute', 'Merge pull request #2308 from sebmarkbage/dropdocblock\nDrop the @jsx docblock from unit tests', "Look for devtools global hook\nIt doesn't exist yet, but it could.\nThis also ensures we actually do our polyfill checks in all browsers,\nnot just Chrome.", 'Merge pull request #2310 from tmcw/list-require-attribute\nRequire list property to be accessed as an attribute', "Sanitize the string tag passed to DOM components\nBecause we're using innerHTML to generate DOM Elements, we need to make\nsure that the tag is sane and doesn't try to do injection.\nThis wouldn't be an issue if we used document.createElement instead.", 'React.renderComponent -> React.render\nAlso rename all the associated render methods and adds deprecation\nnotices.', 'Codemod deprecated API usage away', 'Merge pull request #2002 from zpao/rename-renderComponent\nReact.renderComponent -> React.render', 'Merge pull request #2316 from zpao/devtoolsmarker\nLook for devtools global hook', 'Sync upstream modules', "JSXTransformer: don't look for docblock", "Merge pull request #2320 from zpao/jsxtransformer-no-docblock\nJSXTransformer: don't look for docblock", 'Merge pull request #2313 from sebmarkbage/sanitizetags\nSanitize the string tag passed to DOM components', 'Merge pull request #2139 from syranide/acceptcharset\nAdd form "acceptCharset" to HTMLDOMPropertyConfig', 'BSD + PATENTS', 'Merge pull request #2312 from zpao/license-update\nUpdate Licenses', 'ballmer-peak: use composition instead of mutable state', 'fix: var name', 'Inject the runtime to a global instead of exposing internals\nSee https://github.com/facebook/react-devtools/commit/673de20a4a0654ab849575307b9cf87fde53439e', 'Merge pull request #2337 from sebmarkbage/devtoolshook\nInject the runtime to a global instead of exposing internals', 'Update @emails in react-displayName-test', "Ship merge to npm\nPeople may have a bad time if they're depending on these but we can\ndelay that a little bit. Unless they're using directly and not\npolyfilling Object.assign.", 'Use react.createElement in example in basic/', 'Merge pull request #2317 from zpao/npm-ship-merge\nShip merge, mergeInto, copyProperties to npm', 'React Elements blog post', 'Update dependencies, removed unused ones\nAlso picked up a bit of JSON reformatting, presumably from npm >= 2\nTest plan: build, run tests', 'Update PropTypes for ReactElement & ReactNode', 'browserify update', 'Merge pull request #2349 from zpao/update-deps\nUpdate npm dependencies, fix browserify task', 'Merge pull request #2343 from zpao/proptypes-deprecation\nUpdate PropTypes for ReactElement & ReactNode', 'Merge pull request #2330 from alexeyraspopov/patch-1\nuse function composition instead of mutable state', '2315 : Use of React.createFactory in example basic/', 'Fix typo in blog post', 'Merge pull request #2344 from ThomasCrvsr/master\nUse React.createFactory in examples/basic/', '0.11.2 release materials\nTODO: starter kit for cherry-pick to master\n(cherry picked from commit 732ffad3137773e72ca587decd20d2aff85200a2)', "[docs] Move React Elements post to right place, fix typo\nThe URL already made its way around so we can't just break it. We might\nwant to just live with it instead of even doing this redirect.\nhttps://github.com/plaxdan/react/commit/2b225446c03192b58e176f8885e60055cf5ea436#commitcomment-8176218", 'Merge pull request #2359 from zpao/fix-blog-post\n[docs] Move React Elements post to right place, fix typo', 'minor change to post\nHello,\nI was just reading through your post and noticed a minor change. The sentence originally read, "It\'s scaled very well for us...". I thought it was a little unclear since it\'s can mean "it has" or "it is", which can make this sentence take on a whole different meaning.', 'Merge pull request #2357 from jimjea/patch-1\nMinor grammar change to Thinking in React', "Hide Object.assign polyfill behind a module\nBecause the JS community's polyfilling infrastructure sucks and we'll\nhave to fix it for them before we require this.\nJSX spread uses React.__spread\n(which might get special behavior for key/ref, not sure yet)\nThis never uses the native implementation and throws for prototype chains.\nOnce the native implementations are faster, we'll start using them.", 'Merge pull request #2350 from sebmarkbage/assign\nHide Object.assign polyfill behind a module', "Use hasOwnProperty checks in Object.assign\nBecause IE8 polyfills add enumerable properties, this doesn't play nicely.\nSo for IE8 compatibility we add this check. Slower though. :(", 'Merge pull request #2363 from sebmarkbage/assign\nUse hasOwnProperty checks in Object.assign', 'v0.12.0-rc1']v0.11.2 React Core
New Features

Added support for <dialog> element and associated open attribute
Added support for <picture> element and associated media and sizes attributes
Added React.createElement API in preparation for React v0.12
React.createDescriptor has been deprecated as a result

JSX

<picture> is now parsed into React.DOM.picture

React Tools

Update esprima and jstransform for correctness fixes
The jsx executable now exposes a --strip-types flag which can be used to remove TypeScript-like type annotations
This option is also exposed to require('react-tools').transform as stripTypes
 ['v0.11.1 release materials, update to 0.11.0 release materials\n\n0.11.1 blog post, changelog\nUpdate to 0.11.0 post, changelog\nUpdate version in site, add starter kit\n', 'Community Round-up #20', 'Wording tweaks to community roundup\n(cherry picked from commit e30b60cc58fc5dd9e07fb9673eabace92325c364)', "Fix typo for 'fundations'\n(cherry picked from commit 0c4b2728c8c399c3bbcd210149b044f360bb9439)", 'Clarify animating one or zero items in docs\nWhen I first read these docs, it was not immediately clear to me that I could\nuse React.addons.CSSTransitionGroup to animate a single item coming into view,\nor an item replacing an item already there. This was partly due to the example\nwhich rendered a list of items.\nThis PR adds a blurb about being able to use\nReact.addons.CSSTransitionGroup with one or zero items, provides a code\nexample, and adds a note blockquote that a key attribute must always be\nprovided on each child of React.addons.CSSTransitionGroup. The latter point\nwas not immediately obvious from the original TodoList code example, since it\nrenders a list which would normally require key attributes anyway.\nTest Plan:\n- Refreshed http://localhost:4000/react/docs/animation.html, saw that the\n  docs additions rendered correctly.\n- Example code not tested (it was extracted from working code).\n(cherry picked from commit 721f3973037c8650b45a479c24c94e2bf7b9e22e)', 'Fix small language nits', 'Rename "Ice Lab studio" to "Icelab"', 'Flux blog post about dispatcher', 'Include image', 'fix spurious )', 'update background color for image', 'Community Roundup #21', 'english + casing + 02 -> 03', 'typo "refere" -> "reference"', 'Update 2014-07-28-community-roundup-20.md\n(cherry picked from commit 460ca72abb3eeef9cc4fa5551485e0292b929b17)', 'Update ref-08-reconciliation.md\n(cherry picked from commit d0494ac85c9aa15af86b4821a0ea5aa3b39cf4cf)', "Adding a note just below the jQuery inclusion in the tutorial to inform that jQuery is not mandatory.\nIt's linked with #603\n(cherry picked from commit 5eca8d604f5e8b9416d41e83dd652df4867bae01)", 'Docs: added note about setState() side-effects\n(cherry picked from commit 1219663e9a63862d39538c75f4a60993d5d4d48a)', 'typo\n(cherry picked from commit 0e7526e401922806e2fe4a6421890529e92e84ff)', "Using the markdown's quote syntax and explaining why use include jQuery\n(cherry picked from commit 46c0bbfb11446408edfdcd934be2b3f8e89e3b09)", 'Wording tweaks to reconciliation docs\n(cherry picked from commit e2dad02ef299a7c1c8528d5bcd357d8854106961)', '[docs] Add parens to defeat ASI in example\nFixes #1996.\n(cherry picked from commit e39a28c175bd54c8ace66b5b54c8995987591f6c)', 'Clarify section introducing props\n(cherry picked from commit 255f238ceea13f61ec41ab49e7a74cb697f90dbc)', 'Clarify section introducing callbacks\n(cherry picked from commit 90888debd00b752a0cdc446dae4067ee2ce7037f)', 'Close  tag in sample markup\n(cherry picked from commit 77d7b4928e47daba339a680ef24eabdf8c7dbcb4)', 'Copy edit (fix grammar)\n(cherry picked from commit 8642262aad73ada51698758572bf91bbb47e396d)', 'Remove TodoMVC flux example\nIt lives at https://github.com/facebook/flux/tree/master/examples/flux-todomvc now.\n(cherry picked from commit 1033c4805f64924c0656472333c5b143a4397155)\nConflicts:\n    examples/todomvc-flux/js/components/Footer.react.js\n    examples/todomvc-flux/js/components/MainSection.react.js\n    examples/todomvc-flux/js/stores/TodoStore.js\n    examples/todomvc-flux/package.json', 'Fix typo\n(cherry picked from commit 6f49827c12a2b2e2156c07b112e9d3f335e5d669)', 'Adding "Tutorial" label to Flux Todo List nav item\n(cherry picked from commit 2e6ff6449b1179d2bfdf1fbd3980fd638a6a42d9)', 'Updating "Tutorial" label as per suggestion\n(cherry picked from commit bfd0a53d3e249f556eb21632d480a21b7424a5c8)', 'Merge pull request #2035 from zpao/jekyll-update\n[Docs] Update Jekyll + more', 'Merge pull request #1952 from slorber/master\nUpdate 09.2-form-input-binding-sugar.md -> document checkedLink', '[docs] Move "| React" to end of page title\nLooks better in search results', '[docs] Move "| React" to end of OG title\nFor consistency!', 'Merge pull request #2010 from nw/patch-1\nUpdate ref-01-top-level-api.md', "Merge pull request #2007 from janhancic/better-docs-for-select-multiple\nAdd a 'note' about passing arrays into the value attribute", 'Merge pull request #1867 from WickyNilliams/patch-1\nAdd note about key prop being excluded by cloneWithProps', 'Merge pull request #1832 from rayqian/master\nAdd chinese translation for 02-displaying-data.md', 'Merge pull request #2038 from zpao/update-testutil-docs\nTestUtils docs: isComponentOfType -> isDescriptorOfType', 'Merge pull request #2058 from chantastic/patch-2\ndocs(flux-todo-list): fix TodoStore syntax', 'Merge pull request #2062 from dmitriiabramov/patch-1\nremove doubled whitespace chars in jsDoc', 'Merge pull request #2076 from whatasunnyday/master\nAdd example to if else in JSX.', 'Merge pull request #2078 from michaelrp/patch-1\nIncluding missing validation check', 'Merge pull request #2083 from chenglou/docs-retina-icon\n[Docs] Make retina react logo work', 'Merge pull request #2080 from fisherwebdev/master\n[docs] Update Flux TodoMVC Tutorial', 'Merge pull request #2119 from naman34/patch-1\nadded production example', 'Merge pull request #2075 from IvanVergiliev/patch-1\nAdd 2048-react to open-source demos', "Merge pull request #2091 from julen/docs/LinkedState\nDocs: renamed input's state to inputValue", 'Merge pull request #2124 from Daniel15/htmltojsx-fixes\nSmall tweaks to HTML to JSX page', 'Merge pull request #2120 from zpao/svg-logo\n[docs] SVG logo', 'Merge pull request #2068 from ChrisSki/patch-1\nUpdate 09.1-animation.md', 'Fix broken link in animation docs\nMissed in #2068', 'JSX spec blog post', 'Merge pull request #2147 from naman34/patch-2\nadded the missing **', 'Community roundup #22', 'Update 2014-09-12-community-round-up-22.md', "Add createElement for 0.11\nThis also adds the deprecation notice to createDescriptor. Chances are\nthat nobody is using that, but doesn't hurt.", 'Merge pull request #2177 from zpao/0.11-createElement\nAdd createElement for 0.11', 'Merge pull request #1848 from fgnass/master\nadd picture element and related attributes', 'Merge pull request #2033 from pekim/master\nAdd support for  tag.', 'Bump esprima + jstransform versions\nConflicts:\n    package.json', 'Update shrinkwrap', 'Update shrinkwrap again\nTravis ran into some problems, hopefully this fixes it.', 'Add support for a --strip-types flag to bin/jsx\n(cherry picked from commit 808730df59b8977f1b5e2b878fc44615a4fa9e56)\nConflicts:\n    vendor/fbtransform/visitors.js', 'v0.11.2']v0.11.1 React Core
Bug Fixes

setState can be called inside componentWillMount in non-DOM environments
SyntheticMouseEvent.getEventModifierState correctly renamed to getModifierState
getModifierState correctly returns a boolean
getModifierState is now correctly case sensitive
Empty Text node used in IE8 innerHTML workaround is now removed, fixing rerendering in certain cases

JSX

Fix duplicate variable declaration in JSXTransformer (caused issues in some browsers)
 ['Release materials for 0.11', 'Merge pull request #1835 from amm385/patch-1\nUpdate videos.md', 'Update 2014-07-17-react-v0.11.md\n(cherry picked from commit bd5e8aa076f257e739a965b46b0176e7ece64485)', 'fix typo\nCloses #1859.\n(cherry picked from commit 6d1ede34df619f3dbb1ec139450733095d8abbcf)', 'Note how to access Perf in docs\n(cherry picked from commit 83fd5583bf80cd5e6fc4722563a82af7ce4e7992)', 'Reword sentence in reconciliation docs\n(cherry picked from commit 93712246c83d0d8731ded31793e9a87afee71a5c)', 'Remove _addPromise from Dispatcher code example\n_addPromise is not used in the provided Dispatcher example, nor does it exist in Dispatcher.js found here: https://github.com/facebook/react/blob/master/examples/todomvc-flux/js/dispatcher/Dispatcher.js\n(cherry picked from commit c94bb20cb8ec2a477f5ac1e234d174cd2b8edf2d)', "[Docs] Add recent addons to addons.html; tweak wording\nAdd PureRenderMixin and Perf to this page. Also, I think it's better if the link titles reflect the name used by these addons.\n(cherry picked from commit d95a4ef983be51dabf8bbaf57654424abbb978cb)", 'getModifierState is case sensitive\n(cherry picked from commit 495d866a66d856d599fc79613ff488b60fd2e0b4)', "Don't initialize reconcile transaction on server\n...when calling setState from within a componentWillMount. Fixes #1866.\nTest Plan: jest\n(cherry picked from commit 54d91c293d39ea82a84f7c9ed4e492ff6c72a811)", 'getModifierState incorrectly exposed as SyntheticMouseEvent.getEventModifierState\n(cherry picked from commit 6f0db657773656867cb2b9eabc85a4e12abebe9c)', 'getModifierState should always return a boolean\n(cherry picked from commit 030071dd8b1eedb796747e51faaaa2b05e9e3c2d)', 'Remove empty TextNode left behind by IE8 setInnerHTML workaround\n(cherry picked from commit 8a135c0e75cfc3dfaba26deb49c8d85f12fa294b)', 'Fix browser-tranforms\n(cherry picked from commit e8efa2a1e915da7aab90f6ad2ffcb226b7016293)', 'Simpler way to prevent flushing updates on server\nTest Plan: Only failing tests in jest are immutable tests that were already failing.\n(cherry picked from commit 6259d88f0352f0ab4388412122d5c911a6fb9329)', '[docs] increase base font-weight\nCloses #1926\n(cherry picked from commit eb8f7660056ccc9a54ca4fc66220c351c2e35bdf)', 'v0.11.1']v0.11.0 React Core
Breaking Changes

getDefaultProps() is now called once per class and shared across all instances
MyComponent() now returns a descriptor, not an instance
React.isValidComponent and React.PropTypes.component validate descriptors, not component instances
Custom propType validators should return an Error instead of logging directly

New Features

Rendering to null
Keyboard events include normalized e.key and e.getModifierState() properties
New normalized onBeforeInput event
React.Children.count has been added as a helper for counting the number of children

Bug Fixes

Re-renders are batched in more cases
Events: e.view properly normalized
Added Support for more HTML attributes (coords, crossOrigin, download, hrefLang, mediaGroup, muted, scrolling, shape, srcSet, start, useMap)
Improved SVG support
Changing className on a mounted SVG component now works correctly
Added support for elements mask and tspan
Added support for attributes dx, dy, fillOpacity, fontFamily, fontSize, markerEnd, markerMid, markerStart, opacity, patternContentUnits, patternUnits, preserveAspectRatio, strokeDasharray, strokeOpacity
CSS property names with vendor prefixes (Webkit, ms, Moz, O) are now handled properly
Duplicate keys no longer cause a hard error; now a warning is logged (and only one of the children with the same key is shown)
img event listeners are now unbound properly, preventing the error "Two valid but unequal nodes with the same data-reactid"
Added explicit warning when missing polyfills

React With Addons

PureRenderMixin: a mixin which helps optimize "pure" components
Perf: a new set of tools to help with performance analysis
Update: New $apply command to transform values
TransitionGroup bug fixes with null elements, Android

React NPM Module

Now includes the pre-built packages under dist/.
envify is properly listed as a dependency instead of a peer dependency

JSX

Added support for namespaces, eg <Components.Checkbox />
JSXTransformer
Enable the same harmony features available in the command line with <script type="text/jsx;harmony=true">
Scripts are downloaded in parallel for more speed. They are still executed in order (as you would expect with normal script tags)
Fixed a bug preventing sourcemaps from working in Firefox

React Tools Module

Improved readme with usage and API information
Improved ES6 transforms available with --harmony option
Added --source-map-inline option to the jsx executable
New transformWithDetails API which gives access to the raw sourcemap data
 ['Add possessive to fix grammar', 'Verb agreement grammar fix', '[Docs] Document PureRenderMixin addon\nFixes #1816', 'Consolas > Courier New for monospace docs font [skip ci]', '0.11-rc blog post', 'Make code in headers not giant', 'Fix typo-ed "of"', 'Up-to-date React.Children\nMake sure we actually include .count', 'Merge pull request #1812 from baddox/patch-1\nAdd possessive to fix grammar', 'Merge pull request #1813 from baddox/patch-2\nVerb agreement grammar fix', '[Docs] Update addons.update\nFixes #1815.\nAdd the new $apply command, plus a few examples.\n@petehunt', 'Add note about higher/lower-level transition APIs', 'Merge pull request #1817 from chenglou/docs-PureRenderMixin\n[Docs] Document PureRenderMixin addon', '[Docs] Perf tools\nFixes #1814.\n@petehunt @joshduck\nThe images look blurry (taken on retina then shrank down to 50%...)', 'When proxying statics functions, copy properties\nTest Plan: jest', 'Add destructuring visitor to JSX harmony transform', 'Merge pull request #1842 from spicyj/jstransform-visitors\nAdd new jstransform visitors to JSX transform', 'Fix comma splice', 'Reorder reference pages\nThis order should make more sense; it moves important functions like React.renderComponent up and deprecated/discouraged ones like transferPropsTo and setProps down. No content changes.', 'Add "Edit on GitHub" link on docs pages\nEmber\'s docs do this and I rather like the idea of encouraging people to make improvements.', 'Merge pull request #1840 from spicyj/statics-proptypes\nWhen proxying statics functions, copy properties', 'Merge pull request #1821 from chenglou/docs-addons-perf\n[Docs] Perf tools', 'Merge pull request #1818 from chenglou/docs-apply\n[Docs] Update addons.update', 'Update authors/acknowledgements [skip ci]', 'Add React.Children.count docs', 'Remove stale deprecation note from unmounting docs', "Upgrade commoner dependency\n0.9.5 depended on Node 0.11+, so make sure we don't ever get that.\nSee https://github.com/reactjs/commoner/pull/65", 'Performance boost in some cases', 'shrinkwrap for 0.11 [skip ci]', 'Update version to 0.11.0']v0.11.0-rc1  ["Remove custom attrs properly when setting to null\nI don't think this particular codepath was exercised at all (because all the callers call deleteValueForProperty) but this fixes a bug here nonetheless.", 'add chinese translation for 01-why-react.md', 'fix some translation error', 'fix some translation error', "Merge branch 'master' of github.com:rayqian/react\nConflicts:\n    docs/docs/01-why-react.zh-CN.md", 'Normalize whitespace for transformed JSX code', 'Update jasmine-support.js\nfix typo in multiple error messages.', 'fix (', 'make translation better', 'add translation for getting-started.md', 'change some translation words', '0.10 release materials', 'version bump for 0.11 development', '[addons] Renamed update() directives to commands', 'Add client/server mention in componentDid/WillMount documentation', 'Rename objMap to mapObject\nmapObject fits better with other module names ("flattenChildren", "traverseAllChildren" etc.) and highlights that it only works with objects - which is going to be more important once we\'ll have an ES6 Map polyfill.', 'Remove objMapKeyVal', "TextInputEventPlugin, SyntheticTextInputEvent\nThis diff introduces TextInputEventPlugin and SyntheticTextInputEvent, which are based on Webkit's native textInput event.\nIn Chrome, Safari, and Opera, the textInput event fires prior to the insertion of character data into the document. For normal typing, for example, thevent sequence is: keydown, keypress, textInput, input, keyup. The textInput event contains a data field corresponding to the character data that will actually be inserted.\nThere is also a beforeinput event described by http://www.w3.org/TR/DOM-Level-3-Events/#event-type-beforeinput, and this is essentially that event, so it may make sense to rename the plugin.\nThis event is especially useful because it solves a number of issues we can't currently handle with only keypress and composition events:\n\nWindows Chrome: Trailing characters discarded in Korean IME. For instance, 안녕하세요 becomes 안녕하세 with the final character discarded by the final compositionend event. The textInput event fires correctly with the final character.\nWindows Chrome: Special characters discarded in IME. Certain ideographs are discarded in IME mode. In Japanese, typing the ideographic space character is not represented by keypress but //is// represented by the subsequent textInput. This issue also applies to punctuation characters in Chinese.\nOSX Chrome: Characters from palette discarded. Inserting characters from the OSX character palette fails, since no keypress is fired.\n\nThe plugin is useful for Firefox and IE. For these, we record inserted characters via keypress and compositionend events and dispatch the synthetic event with these characters as the data field to match the native textInput event.\n\nFirefox has no corresponding textInput event and has not yet implemented beforeinput.\nIE has a native textinput event, but it fires after the DOM mutation has already occurred, so it isn't very useful as an analog to the Webkit version. I'm just not going to bother with it.\n", "assertValidProps for updating DOM components through renderComponent\nrenderComponent(<div style={invalidType}/>, container) throws correctly,\nbut not when it's called a second time (i.e. updating rather than mounting).\nIt goes through ReactDOMComponent.updateComponent but there wasn't a\nprops assertion there.\n(Removed the assertion in receiveComponent)", "Remove last uses of {' '} in docs and tests\nWhitespace fix is in, so no need for {' '} anymore.", "Repair spacebar textInput\nBrowsers that natively support the textInput event appear to have a bug: when preventing default behavior for a textInput event occurring for a spacebar keypress, the character is prevented from being inserted but the browser scrolls down.\nMinimal repro example: http://jsfiddle.net/salier/bX4fw/\nThis is ridiculous, since scrolling makes no sense when the user is focused in a textinput or contenteditable. Preventing default at the textInput stage should mean to prevent the character from being inserted, and should have no impact at all on scrolling behavior. I have filed this as a Chromium bug (https://code.google.com/p/chromium/issues/detail?id=355103) but I'm not going to hold out much hope that they'll fix it.\nTo resolve this, I'm special-casing the spacebar character at the plugin level, in BeforeInputEventPlugin. I looked for ways to do this at the component level, but it seems to me that this is simply a browser bug and it's cleaner to handle it there.\nIn browsers that can use the native textInput event, I'm checking the code of the pressed key. If it's the spacebar, we dispatch the synthetic event as if there were no native textInput event -- as if we were running Firefox. Then, if the synthetic event is not canceled and we make it through to the native textInput event, bail if the character data is a space character.", 'TodoMVC Flux Example', 'added dx and dy for laying out text with relative offsets', 'Fix docstring arg order in createDOMComponentClass', 'add ReactComponentWithPureRenderMixin to addons', 'Merge pull request #1309 from spicyj/dom-arg-order\nFix docstring arg order in createDOMComponentClass', 'Fix hasOwnProperty check typo in mixStaticSpecIntoComponent', 'Remove extraneous assert', 'Clean up assertions on descriptors\nBy making this fail, we catch a lot of tests that are expecting rendered\ninstances but are actually operating on descriptors.', 'Support ms vendor prefix when generating markup', 'Update CONTRIBUTING.md\nUpdating doc to point to the brand new CLA form at https://code.facebook.com/cla', 'First phase to true descriptors\nThis moves all convenience constructors to use frozen ReactDescriptors.', "BeforeInputEventPlugin: Support Opera <= 12\nAdd support for Opera <= 12 (Presto) in BeforeInputEventPlugin.\nIt turns out that Opera 12 has a TextEvent in window, but doesn't actually fire any input events. Even input apparently doesn't fire. Fall back to keypress handling in this case.", 'Merge pull request #1310 from plievone/patch-1\nFix hasOwnProperty check typo in mixStaticSpecIntoComponent', '[blog] The Road to 1.0', "Fix spelling of 'existence'", 'Formatting\nAn extra "`" snuck in there.', 'Fix minor typo in update $push directive', 'Merge pull request #1320 from gasi/patch-2\nFix minor typo in update $push directive', "Merge pull request #1318 from spicyj/existence\nFix spelling of 'existence'", 'Add optional harmony support to browser transform\nThis mirrors the react-tools API; it doesn\'t include support (yet) for transforming <script type="text/jsx"> blocks with the ES6 transforms, mostly because I don\'t have a good API in mind there.\nTest Plan:\nRan\nJSXTransformer.transform("var two = () => 2;", {harmony: true}).code\n\nin Chrome\'s dev console and got back some ES5 code.', 'Merge pull request #1322 from spicyj/transformer-harmony\nAdd optional harmony support to browser transform', 'Merge pull request #1288 from vjeux/server_docs\nAdd client/server mention in componentDid/WillMount documentation', "Make EventPluginUtils clear dispatchIDs and dispatchListeners\nThe other dispatch utils clear these out and I found a bug where they weren't being cleared out.\nI'm thinking this should probably be done in the SyntheticEvent constructor but at least this way it's consistent. Also, I know no one else uses executeDispatchesInOrderStopAtTrue except the ResponderEventPlugin.", 'Add scrolling attribute for ', 'Remove leftovers from ReactTransitionGroup rewrite\nLooks like while rewriting @petehunt forgot to remove this block.\nSee: 9ac27cb551b85293d03d334363acd7cf9c77813a\nThis block used to contain the only runNextTick ocurrences in the whole project.\nNo tests broken after removal, no documentation affected.', 'Clone objects in immutable tests\nFixes #1314, fixes #1328.\nTest Plan:\ngrunt test, grunt test --debug in Chrome and Firefox.', '[Jshint] Allow Jasmine globals in *-test.js\nEditors that inline lint use`.jshintrc and directly lint the open\n*-test.js files. This makes those linters actually useful.', "Merge branch 'master' of github.com:facebook/react", 'Merge pull request #1332 from chenglou/linter\n[Jshint] Allow Jasmine globals in *-test.js', "Don't break on top-level non-numeric object keys\nPreviously, this threw (in __DEV__ only) in ReactCurrentOwner.current.constructor.displayName because ReactCurrentOwner.current is null:\nReact.renderComponent(<div>{{1: <div />, 2: <div />}}</div>, document.body);", "Merge pull request #1334 from spicyj/non-numeric-top-level\nDon't break on top-level non-numeric object keys", 'Fix jshint warnings in grunt/\nFixes #1052.\nTest Plan:\njshint grunt', 'Merge pull request #1330 from spicyj/clone-imm\nClone objects in immutable tests.', '[Docs] Consistent use of self-closing tags in layout', 'Merge pull request #1336 from Daniel15/making-zpao-happy\n[Docs] Consistent use of self-closing tags in layout', "[Docs][Tips] Entry on this.props.children and tweak component ref entry\nComponent ref entry wasn't registered in nav_tips.", 'Update mailmap post 0.10 (see #1283)', 'Merge pull request #1329 from irae/transition-group-leftovers\nRemove leftovers from ReactTransitionGroup rewrite', '[docs] Amend "References to components" tip to mention descriptors.', 'Simplify comment.', 'Remove erroneous line about static methods.', 'Merge pull request #1345 from kmeht/referenceDoc\n[docs] Amend "References to components" tip to mention descriptors.', 'Merge pull request #1308 from chenglou/pure\nadd ReactComponentWithPureRenderMixin to addons', 'Remove toJSON\nThis was temporarily needed since clone on mount introduced a cyclic reference\nin DEV. This reverts that change since we now have descriptors.\nTo avoid a problem where toJSON may collide.', 'Add callback to setProps docs', 'Add acknowledgement to Christopher Aue', 'Merge pull request #1313 from spicyj/ms-prefix\nSupport ms vendor prefix when generating markup', 'Merge pull request #1338 from chenglou/tip-children\n[Docs][Tips] Entry on this.props.children and tweak component ref entry', 'Merge pull request #1325 from venmo/add-scrolling-attribute\nAdd scrolling attribute for ', 'Merge pull request #1306 from twobit/master\nAdd dx and dy attributes for SVG text', 'Merge pull request #1258 from fisherwebdev/master\nTodoMVC Flux Example', 'Batch updates caused by handlers in multiple roots\nFixes #1227.\nIt seems rare that event handlers in two roots nested in the DOM will update the same component in the same tick, but if that happens, the updates should be batched together.', 'Merge pull request #1251 from davidxi/patch-1\nUpdate jasmine-support.js', 'Merge pull request #970 from syranide/jsxws\nNormalize whitespace for transformed JSX code', 'Fix appearance of code blocks in lists', 'ReactJS.NET blog post\nCloses #1354.', 'Initial add\nAdd readme\nremove gitignore\nfix graphic', 'Make MountReady more reusable, reduce allocations\nTest Plan:\ngrunt test', 'Add clearer invariants to composite spec mixing', 'Serve unminified react on docs site. Fixes #1359', "Don't forcibly wrap lines in git commit messages", 'Merge pull request #1356 from petehunt/server-rendering-example2\nReact server rendering example', 'Move complementary tools to wiki for easier management.', 'Ignore children with clashing keys\nFixes #566.', 'Merge pull request #1365 from akre54/unminified-docs-js\nServe unminified react.js on docs site', 'Merge pull request #1362 from spicyj/cb-queue\nMake MountReady more reusable, reduce allocations', 'Link to Events from Forms\ncloses #1372', "Warn better for key issues\nWe weren't warning for key issues at the top level (renderComponent)\nlevel at all. This makes us do that, even if it's not quite perfect.\ncloses #1351", 'Make rendering to null work and make it injectable\nThis allows render to return null. Under the hood, this renders a script tag.\ncloses #1127', 'Normalize view and detail properties', "Don't fail if target.ownerDocument is null\nSee f71dbab.", 'Let early returns do their thing', 'Merge pull request #813 from spicyj/e-view-detail\nNormalize view and detail properties', 'Document multiple ways to insert comments in JSX', 'Update 05-reusable-components.md\nany also seems to accept primitive values, not only objects. And since we already have React.PropType.object, the description was confusing.', 'Merge pull request #1379 from fkling/patch-1\nUpdate 05-reusable-components.md', 'fix typo in 09.4-test-utils.md', 'Merge pull request #1364 from spicyj/key-collisions-2\nIgnore children with clashing keys', 'Share reconcile transaction in batched updates\nShould make #1350 better and will also take away any performance hit from #1157.\nTest Plan:\ngrunt test', 'Merge pull request #1381 from marcinkwiatkowski/master\nfix typo in 09.4-test-utils.md', 'Carry ajax error checking from step #13 forward to other ajax steps\nThe following steps also have an ajax function, but the \'error:\' param\nis gone after #13:\n14\n17\n19\n20\nThis may be superfluous, but it helped me find an error with something I\nwas doing - Namely, in my .json file, I had single line javascript\ncomments ("//") that I copied from the tutorial. I couldn\'t find the\nissue on later steps, but was able to see my issue when the error\nhandler complained about an unexpected "/" in my file in step #13.', 'Add start property that is used by the  tag\nProperty was missing', 'Separate performanceNow into own project', 'Update invalid render error message\nforgot to update the message following the previous diff on rendering null.', "Revamp and fix PropTypes\nThis uses the return value (an Error or nothing) to indicate whether a prop passes validation or not. It used to be done through calling console.warn as a side-effect, except this didn't work well with and oneOfType, which calls each validator.\nThe solution was to insert a .weak prop to each validator to suppress the warning message. This is overkill and also doesn't work well in because it increases the potential API surface. Plus, letting the validators warn it can't be easily used for logging, especially for custom validators.\nSo .weak is no longer needed: fixes https://github.com/facebook/react/issues/863.\nBackward compatibility for custom validators: since they didn't return anything and directly call console.warn or something, this doesn't break them.\nImprovements:\n\narrayOf, oneOfType and oneOf got better message now, since they can get hold of their validator's message and output that instead of a generic warning: bla.\nMore complete tests, including testing custom types and isRequired on everything.\n\nBug fixes:\n\noneOfType(...).isRequired didn't work. The workaround was to use oneOfType(a.isRequired, b.isRequired, ...). This means oneOfType(a.isRequired, b) doesn't make sense. The new version simply makes oneOfType(...).isRequired possible.\noneOf([true]) worked for 'true' boolean because it converted everything to string before comparing. It no longer does.\noneOf([true]).isRequired didn't work.\n\n(see #1294)", '[Docs] Rendering null/false and getDOMNode.', 'Add tests for oneOfType with shape', 'Add test for isValidDescriptor\nFixes #1164.\nTest Plan: grunt test', 'docs remove comment section', 'Test for correct handling of "download" attribute\nThese tests currently fail as there is no special treatment for this kind of\nattribute.\nRelated: GH-1337', 'Support minimizable, non-boolean attributes\nFixes GH-1337', 'Rename CAN_BE_MINIMIZED to HAS_BOOLEANISH_VALUE', 'Combine valid value checks', 'Test more falsey values', 'Update tutorial.md', 'Merge pull request #1285 from justinj/weak-shape-checker\nAdd tests for oneOfType with shape', 'Merge pull request #925 from chenglou/rm-comm\n[Docs] Remove comment section', "Make PropType.object pass for Date and RegExp instances\n8855d6153e252c735de0e6cc373787d22c1a467b gave more accurate error messages for date and regexp by returning 'date' and 'regexp' respectively from getPropType.\nHowever, for the object primitive check, which compares the instance passed with getPropType's return string, object !== 'date'.\nThis adds special hanlding for those.", 'add displayName to component spec functions\ncloses #992', 'Merge pull request #1231 from spicyj/gh-1227\nBatch updates caused by handlers in multiple roots', "[Docs] new PropType behavior\n(Killed the TODOs since they're no longer valid).", 'Merge pull request #1390 from chenglou/doc-new-proptypes\n[Docs] new PropType behavior', 'Merge pull request #1190 from spicyj/custom-set-null\nRemove custom attrs properly when setting to null', 'Merge pull request #1394 from spicyj/gh-1164\nAdd test for isValidDescriptor', 'Consolidate innerHTML setting logic\nSee https://github.com/facebook/react/commit/7eb33ef#commitcomment-5447724.', 'Merge pull request #1184 from spicyj/setInnerHTML\nConsolidate innerHTML setting logic', 'Improve error for nested render calls\nIn the future we could consider wrapping the entire public API (renderComponent, setProps, setState, etc) in this check but this should do for now.\nTest Plan: grunt test', 'Restore CSSTransitionGroup tests\nNot sure what happened here.\nTest Plan: grunt test', 'Merge pull request #1324 from jordwalke/executeDispatchesInOrder\nMake EventPluginUtils clear dispatchIDs and dispatchListeners', 'Merge pull request #1405 from spicyj/css-tests\nRestore CSSTransitionGroup tests', "Make code spacing more consistent\nI'm a little surprised we don't have lint rules for this.", 'Merge pull request #1284 from plievone/directives-2-commands\n[addons] Renamed update() directives to commands', 'meta http-equiv attribute name', 'Merge pull request #1386 from georgesisco/master\nIn the tutorial, carry ajax error checking from step 13 forward to other ajax steps', 'Merge pull request #1384 from chenglou/render-docs\n[Docs] Rendering null/false and getDOMNode', 'Merge pull request #1403 from spicyj/keyword-spacing\nMake code spacing more consistent', 'Drastically improve test performance', 'Merge pull request #1406 from petehunt/testperf\nImprove grunt test performance', 'Add docs for fasttest', 'Update refs example code to use onChange\nFixes #1408.\nTest Plan: Copy each code snippet into jsbin; type in the text box successfully; click the button and see the input clear (and in the second example, get focused).', 'Fix preposition capitalization', 'Merge pull request #1183 from lrowe/patch-6\nmeta http-equiv attribute name', 'Fix PropType for travis\ncloses #1404', 'Rename "booleanish" to "overloaded boolean"', 'Guard top-level methods, not in every render call\nTest Plan: grunt test', "Don't try to detach a detached node\nTest Plan: grunt test", "Merge pull request #1410 from spicyj/sih\nDon't try to detach a detached node", 'Match setTimeout delay with documentation', 'Merge pull request #1412 from gasi/patch-3\nMatch setTimeout delay with documentation', 'Merge pull request #1340 from matthewwithanm/download-attribute\nSupport download attribute properly', 'Remove grunt-complexity\nThe report itself is more or less useful because it detects stuff like\nbig objects (e.g. CSSProperty) as being too complicated. Furthermore, afaik\nnobody refactors the code based on what the report says =).', "Add clearer invariant in processUpdates\nThe updatedChildren[j].parentNode.removeChild(updatedChildren[j]); line below can fail if (1) we're moving/moving the same node twice or (2) the node we're looking for is gone completely. This makes it easier to distinguish between the two cases.\nPerf shouldn't be a concern here because this is DOM code and invariants are fast in comparison.\nTest Plan: grunt test", 'Merge pull request #1419 from spicyj/inv-process\nAdd clearer invariant in processUpdates', 'Merge pull request #1188 from spicyj/comp-spec-inv\nAdd clearer invariants to composite spec mixing', 'Allow false as an acceptable renderable type value\nfalse is renderable.', 'Make custom PropTypes return error rather than whatever\nThe new rule for PropTypes is that it should return an error object if validation fails, not throw, not warn.', "Add typed ReactLink to ReactProps\nAdds a PropType that checks for proper use of the ReactLink API and optionally validates the type of value passed in via the link. Basically, it's a wrapper around PropTypes.shape that hides the implementation of ReactLink.", 'Remove function wrappers in DOMSelection\nThere is no point in doing the feature detection on every call, unless there is an IE bug where it is not sure about which support for selection it has (totally plausible).', "Fixed a bug in expectRenderedChildAt\nReact components have _mountIndex, that looks like it is their order in DOM.\nIf you swap 2 elements in DOM, their order in children array isn't changed, but their _mountIndex is", "unbreak server-side/web worker\nWe're now trying to access document directly at require time. Wrapping in a function prevented that before. But we can simply check what environment we're in first.", 'fix log spew from ReactDOMInput test\nThe prop validation threw a warning that either onChange or readOnly is required. Set the onChange where needed.', 'fix log spew from ReactDOMTextarea test\nSimilar to previous but for textarea. If value is set, we have to also set\nonChange to avoid warnings.', "better error message for React EventPlugin order check\nRan into this while inadvertently requiring multiple React versions in a separate project (require('react'); vs require('React');", "fix warnings in ReactComponentLifeCycle test\nDon't use inputs to avoid warnings in tests", "fix warnings in cloneWithProps test\nDon't test refs in this case, already testing warning above", 'Update videos.md', "Remove whitespace_transformer package\nThis was a one-time use thing, let's get rid of it. If we ever need to\npush an update, we'll do it from the 0.9-stable branch.", 'Split DefaultDOMPropertyConfig\nThis makes it a little easier to add SVG properties. It also makes use of that injection that we claim is easy to use and will likely start playing a bigger part soon.\nCloses #1009', 'Upgrade jstransform to 4.0\nAlso enables the object-concise-method transform for --harmony\ncloses #1438', "Don't let new keys on style from transferPropsTo override old ones\nPrevious behavior: transferPropsTo(<div style={{color: 'red'}} />) would get color overriden if we transfer in a style={{color: 'blue'}}. This is inconsistent with how other props are transfered.\nThis simply reverses the order of arguments.\ncloses #1435", 'Merge pull request #1441 from zpao/update-jstransform\nUpgrade jstransform to 4.0', 'Current set of must-have SVG attributes / tag\nThe current set of SVG attributes / tag I felt like I needed\nthem absolutely for my React/SVG editor app.', 'Add tspan to JSX transform', 'Fix IE11 collapsed ranges in ReactDOMSelection\nIn IE10/11, it is apparently possible to have a Selection or Range object that has the following properties:\n\nanchorNode === focusNode (Selection) or startContainer === endContainer (Range)\nanchorOffset === focusOffset (Selection) or startOffset === endOffset (Range)\nisCollapsed === false (Selection) or collapsed === false (Range)\n\nAs defined in http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html, this doesn\'t really make sense. Since the nodes and offsets are the same, the "collapsed" value should be true.\nMoreover, when calling selection.toString() in this case, it appears that the entire text contents of body -- including <script> tag contents -- are considered within the selection. I thought maybe the selected nodes were missing from the DOM or something, but no, they\'re there.\nSidestep all of this in ReactDOMSelection by calculating the collapsed property manually and setting the selection length directly to zero if it is actually collapsed.\nSide note: I think that for selection restoration on contenteditables, we shouldn\'t try to do this offset calculation. We should just use the structure provided natively (nodes and offsets) since we can restore using that structure as well.', 'Remove unnecessary tests from insertChildAt and inline it instead', 'Test innerText/textContent on document.documentElement instead', 'Merge pull request #879 from syranide/inlinechild\nRemove unnecessary tests from insertChildAt and inline it instead', 'Update build status svg badge', 'Merge pull request #1450 from sahat/patch-1\nUpdate build status svg badge', 'Merge pull request #887 from syranide/textdocument\nTest innerText/textContent on document.documentElement instead', 'Fix transition end detection for Android\nSome Android versions have the "transition" and "animation" properties\nset on element style objects despite not supporting un-prefxied animations\nand transitions.  This change adds an additional sanity check to make sure\nthe correct event handlers are added for transition groups.', 'Fix perf suite broken by descriptor change', 'Merge pull request #1452 from chenglou/perf-fix\nFix perf suite broken by descriptor change', 'Bump jstransform dependency to point at 4.0.1 or higher', 'Merge pull request #1455 from jeffmo/master\nBump jstransform dependency to point at 4.0.1 or higher', 'Warn instead of throw for nested render calls', "Merge branch 'spicyj-nested-render' from #1402", 'ReactTransitionGroup: Fix changing to null child\nFixes #1457.\nTest Plan: grunt fasttest', 'Merge pull request #1458 from spicyj/gh-1457\nReactTransitionGroup: Fix changing to null child', "Move tooling info to Complementary Tools wiki\nI moved the info that was here to the wiki page: https://github.com/facebook/react/wiki/Complementary-Tools; it doesn't need to live in the website any more.", 'Actually fix transitioning to null\nTest Plan: grunt fasttest', "Don't escape slash; it's unnecessary\nFixes #1444.\nTest Plan: grunt fasttest", 'Fix some linty things', 'Add basic CommonJS example with browserify', 'Merge pull request #1463 from andreypopp/example-commonjs\nAdd basic CommonJS example with browserify', 'Merge pull request #1459 from spicyj/ti\nMove tooling info to Complementary Tools wiki', 'Merge pull request #1462 from spicyj/lint\nFix some linty things', "Don't double-escape style names\nPreviously we were escaping both in createMarkupForStyles and then in createMarkupForProperty; now we escape only in the latter (otherwise the hypothetical style name b&ckground would become b&amp;amp;ckground).\nTest Plan: grunt fasttest", 'Update jsfiddles in thinking-in-react to remove onSubmit from forms', "link to tagtree 'Thinking in React' video", 'Normalize and polyfill KeyboardEvent further, also MouseEvent+TouchEvent\nKeyboardEvent now normalizes "charCode", "keyCode", "which" across all browsers\nKeyboardEvent has partial "key"-support for KeyDown/KeyUp and full "key"-support for KeyPress.\nKeyboardEvent, MouseEvent and TouchEvent now has "getModifierState", polyfill when not implemented.', 'Additional Flux documentation', 'Merge pull request #1476 from fisherwebdev/master\nAdditional Flux documentation', 'Add some backticks to flux docs', 'Typo', 'Merge pull request #1477 from KyleAMathews/patch-1\nTypo in Flux example readme', 'Fixed a couple of issues with link to tagtree.tv video', 'Clean up Flux documentation and add more info about managing dependencies between stores', 'Merge pull request #1479 from fisherwebdev/master\nClean up Flux documentation and add more info about dependencies btwn stores', "Merge pull request #1470 from hendrikswan/master\nLink to tagtree 'Thinking in React' video - on master", 'Fix ASCII-art arrow alignment', 'Update Dispatcher.js\nI think Array.filter expects a boolean return value, am I correct?', 'Update Dispatcher.js', 'Update Dispatcher.js', 'Update Dispatcher.js', 'Merge pull request #1468 from dschafer/tutorial\nUpdate jsfiddles in thinking-in-react to remove handleSubmit from forms', 'Merge pull request #776 from syranide/superkey\nEven better normalization of KeyboardEvent + MouseEvent', "Move envify from peerDependencies to dependencies\nFixes #1482, closes #1483.\nThis shouldn't make a practical difference to us and will apparently fix browserify-cdn.", 'Merge pull request #1032 from fforw/master\nAdditional SVG tag and attribute names', "Move defaultProps resolution and type validation to the descriptor\nThis copies the propType and contextType validation to a wrapper around the\ndescriptor factory. By doing the validation early, we make it easier to track\ndown bugs. It also prepares for static type checking which should be done at the\nusage site.\nThis validation is not yet active and is just logged using monitorCodeUse. This\nwill allow us to clean up callsites which would fail this new type of\nvalidation.\nI chose to copy the validation instead of abstracting it out to a common abstraction. This is just an\nintermediate step to avoid spamming consoles. The original validation in the instance will be deleted as soon as we can turn on the warnings at the callsite. Copy+Delete makes this a more a much cleaner diff review/history.\nAdditionally, getDefaultProps are moved to become a static function which is\nonly executed once. It should be moved to statics but we don't have a\nconvenient way to merge mixins in statics right now. Deferring to ES6 classes.\nThis is still a breaking change since you can return an object or array from\ngetDefaultProps, which later gets mutated and now the shared instance is\nmutated. Mutating an object that is passed into you from props is highly\ndiscouraged and likely to lead to subtle bugs anyway. So I'm not too worried.\nThe defaultProps are now resolved in the descriptor factory. This will enable\na perf optimizations where we don't create an unnecessary object allocation\nwhen you use default props. It also means that ReactChildren.map has access to\nresolved properties which gives them consistent behavior whether or not the\ndefault prop is specified.\nThis is a breaking change since it can affect how mapping over children and\ntransferPropsTo works together with defaultProps.", 'Embed video from F8\nEdited in githubs inline editor. Not tested!', 'Revert "Move defaultProps resolution and type validation to the descriptor"\nThis reverts commit ff52e3df00ab7ed1375f46d81c122a614e202bb9.\nToo many things broke with transferPropsTo', 'Adds svg mask and pattern dom components', 'Merge pull request #1480 from volkanunsal/patch-1\nUpdate Dispatcher.js', 'Fixed incorrect usage of github api in example\nmore: https://developer.github.com/v3/gists/#detailed-gist-representation', 'Added support for itemscope, itemtype, itemprop.', 'Updated documentation.', 'ReactTransitionGroup: Fix moving from falsey child\nSee http://stackoverflow.com/q/23510413/49485.\nTest Plan: grunt fasttest', 'Use camelCase and declare MUST_USE_ATTRIBUTE.', 'Small style fixup', 'Merge pull request #1276 from marcins/bugfix/1275-transitiongroup-android\nFix transition end detection for Android', 'Merge pull request #1490 from Vijar/master\nFixed incorrect usage of github api in example', 'Title case on videos page', 'Merge pull request #1486 from nbostrom/patch-1\nEmbed video from F8', 'Add support for JSX member expressions ', 'Merge pull request #1460 from spicyj/tg2\nActually fix transitioning to null', 'Adds svg pattern and mask components', 'Merge pull request #1492 from spicyj/rtg-from-false\nReactTransitionGroup: Fix moving from falsey child', 'Codemod mockDefaultReturnValue\nThe naming is super confusing.\nmockReturnValue -> mockReturnValueOnce\nmockDefaultReturnValue -> mockReturnValue', "Codemod mockReturnValue externally\n320024555cef1b826f8ba9e8bafccad8a5a118e7 didn't update the mocks module\nhere, just the callsites.", 'Move tagtree image to docs/\nMissed this in #1470', 'Flux blog post and tutorial', 'Merge pull request #1499 from vjeux/flux\nFlux blog post and tutorial', 'update Flux tutorial link', 'Stylistic changes.', 'Fix minor typo', 'Update flux-todo-list.md\nFix broken link to todomvc-flux repo\n@spicyj cla signed', 'Start Flux video at 10m21s', 'Merge pull request #1503 from dybskiy/patch-2\nUpdate flux-todo-list.md', 'Add missing emitChange() to Flux docs', 'Preemptively error when required ES5 shim/shams are not available', "todomvc-flux: Depend on uglify-js, not uglifyjs\nFixes #1505.\nConfusingly, the uglify-js package provides the uglifyjs binary and npm run-script build didn't work if uglify-js wasn't installed globally; now it does.", 'Update Flux README to point at website post/docs', 'Merge pull request #1516 from syranide/es5err\nPreemptively error when required ES5 shim/shams are not available', 'Merge pull request #1504 from spicyj/flux-621\nStart Flux video at 10m21s', "Make perf show all exclusive time, not just render time.\nCurrently require('ReactDefaultPerf').printExclusive() shows render\ntime and aggregate componentMount time.\nThis makes it show exclusive mount time by tracking a stack.", 'Merge pull request #1358 from spicyj/one-transaction\nShare reconcile transaction in batched updates', "Batch subupdates caused by any state update\nWith this, multiple setState calls triggered by a componentDidUpdate handler (or similar) will be batched together, regardless of if the original setState call was in a batching context.\nI also cleaned up some inconsistencies with the order of component updates and callbacks in situations where one component's update directly causes another to update.\nFixes #1147. Helps with #1353 and #1245 as well, though doesn't completely fix them yet.\nTest Plan:\ngrunt test", 'Merge pull request #1487 from somethingkindawierd/master\nAdds svg mask and pattern dom components', 'warn when shouldComponentUpdate() returns undefined', 'Add harmony transform support in browser (Fixes GH-1420)\nI implemented this by checking for type="text/jsx;harmony", since this\nhas a bit of a cleaner implementation rather than parsing a JSON object\nout of a data attribute. If in the future there are other options to\npass, it would make sense to move to a system like that.\nAlong with adding support, there is also a new example added that\'s\nthe basic-jsx example with Harmony syntax.', 'Change harmony option to "harmony=true"', 'Update Simulate docs to reflect reality\ncf. #1532, #1445.', 'Remove filterAttributes.js\nThis is no longer needed because of https://github.com/facebook/react/commit/089a494a1f0cc1892f1525fd746bac10c5a55175\nmutateHTMLNodeWithMarkup.js was the only one using it.', 'Merge pull request #1537 from chenglou/rm-filter-attrs\nRemove filterAttributes.js', 'Merge pull request #1491 from naturalatlas/itemscope\nAdded support for itemscope, itemtype, itemprop attributes.', "Add hasOwnProperty checks where appropriate\nFor boolean-like objects, I've added hasOwnProperty checks in addition to the existing truthiness check even though for most of these dicts, we leave out false keys instead of setting them explicitly to false.\nIn DOMPropertyOperations, we don't need to check hasOwnProperty if the property is in isStandardName because (with the exception of getPossibleStandardName) the dicts on DOMProperty will now be consistently populated with every valid attribute.", 'Remove references to autoflow\nMost references were removed in 6e59561; this should be the last.', 'Update Jasmine link', 'Merge pull request #1552 from t3chnoboy/master\nUpdate Jasmine link', 'Fixed spacing of invalid checksum warning', "Update Flux Dispatcher.dispatch and waitFor examples\nThe previous examples didn't properly work when 1) a Store callback does\nwaitFor on Stores that haven't been reached yet and 2) a Store callback\nwaits on another Store that is already waiting.\nThe updated example uses constructs Promises up front and then\nasynchronously resolves them.", 'Update todomvc dispatcher to match docs, add AppDispatcher test', 'Tweak getting started wording', 'Be more specific with createClass, renderComponent\nCloses #371.', 'Mention PropTypes in top-level API\ncf. #449', "Add sourceMap option to react-tools transform\nAllow tools like grunt-react to include inline source maps in the\ngenerated JavaScript. Browserify can then combine these source maps when\nbundling everything together.\nUsage:\nvar transform = require('react-tools').transform;\nvar output = transform(jsxContent, {\n  sourceMap: true,\n  sourceFilename: 'source.jsx'\n});\nThe output will have an inline source map comment appended.", 'Rebased on master', 'Asynchronously load scripts with JSX transformer.', 'Merge pull request #1558 from nhunzaker/fix-1530\nFix 1530 - Asynchronously load scripts with JSX transformer', 'Load scripts in parallel', "Allow unmounting title tag\ncf. #1376.\nThis is useful for SVG. Dynamically adding and removing <title> elements in SVG still won't work properly because of getMarkupWrap but this at least lets you include it in initial render and then unmount the entire <svg> without problems.", 'Merge pull request #1189 from spicyj/hasown\nAdd hasOwnProperty checks where appropriate', 'Use Object.prototype.hasOwnProperty for doc in IE8\nTest Plan: Loaded ballmer-peak example in IE8 without errors and interacted with the text field.', 'Merge pull request #1564 from spicyj/hop-ie8\nUse Object.prototype.hasOwnProperty for doc in IE8', "Don't fail Travis on sauce failures\nFixes #1496.", "Merge pull request #1563 from spicyj/travis-no-sauce\nDon't fail Travis on sauce failures", 'Add componentWillReceiveProps setState test', 'Switch style test to pass in jsdom\nThis should be testing approximately the same thing and passes in Jest.\nTest Plan: Cherry-pick Jest config from #1528 and verify that running jest.', "Add configuration for running tests with Jest\nCan be run with node_modules/.bin/jest for now; didn't want to disturb the grunt setup.\nRight now one test fails with:\nFAIL  browser/ui/__tests__/ReactDOMComponent-test.js (1.423s)\n● ReactDOMComponent › updateDOM › it should update styles when mutating style object\n  - Expected: '0' toEqual: '0.5'\n        at Spec.<anonymous> (src/browser/ui/__tests__/ReactDOMComponent-test.js:99:33)\nwhich I can only assume is a jsdom problem -- no other asserts fail.", 'Merge upstream changes', 'Merge pull request #1571 from spicyj/style-test\nSwitch style test to pass in jsdom', 'Merge pull request #1553 from givingstage/invalid_checksum_warning_spacing\nFixed spacing of invalid checksum warning', 'Merge pull request #1559 from spicyj/gh-1376\nAllow unmounting title tag', 'Make promise selection logic clearer', "Add shims to examples\nI find myself often using (modified) examples to test in IE and it's a pain to have to add the shims in every time. Might as well just add them in always.", 'better talk in russian', 'Improve readability of multi-line nav items.', 'Merge pull request #1577 from piranha/master\nbetter talk in russian', 'Load in parallel, evaluate linearly as they come in', 'Set executed after run', 'Fix nested UL spacing.', 'Merge pull request #1579 from gscottolson/master\nImprove readability of multi-line nav items.', 'Error in extractEvents\nIf the event is on the window object, topScroll, for instance, the topLevelTarget will not have getAttribute defined. Restore the previous || !topLevelTarget.attributes check to avoid an error on every scroll.', 'Merge pull request #1576 from spicyj/ex-shim\nAdd shims to examples', 'Merge pull request #1575 from spicyj/dispatch-index\nMake promise selection logic clearer', 'Merge pull request #1363 from spicyj/batch-all\nBatch subupdates caused by any state update', 'Merge pull request #760 from syranide/jsxns\nSupport for JSX tag namespaces ', 'Bump esprima-fb and jstransform versions\nFixes #1584, fixes #1475.', 'Handle className properly on SVG nodes\nThis strategy avoids a runtime check for every set (as opposed to using a mutation method).\nTest Plan: Verify that changing className works on a div and a rect in latest Chrome, latest Firefox, IE9. Verify that the div works in IE8.', "Remove event listeners from native dom wrapper components\nNot removing them resulted in leaks as we would hold on to removed nodes forever.\nThis really showed up with images and the load event where we would unmount and create a new img with the same react id as the old one. We properly cleared and primed the caches but we would handle the load event for both nodes. We would eventually hit an invariant in that path as we tried to handle the event for the removed node, which no longer matched the node we had in the cache.\nBy forcefully removing the listener, we'll avoid this problem entirely and we should leak fewer DOM nodes.", 'Fix doc typo and remove underscore from local var', 'Configure todomvc-flux npm test to use jest', 'Add more complicated fourth listener to AppDispatcher-test', 'remove spurios module ref\nlong long ago in a galaxy far away this was probably a dependency', 'Bump to React 0.10 in TodoMVC Flux', 'Merge pull request #1556 from joshma/flux-dispatcher-docs\nUpdate Flux Dispatcher.dispatch and waitFor examples', 'Run all tests, fix indentation', 'Fix typo in Flux TodoMVC Tutorial\nA sentence says "only handles one actionType" when the example code instead handles two.', 'Auto-bind before getDefaultProps\nFixes #1595.', 'Capitalize README for consistency', "Don't load todomvc-common/base.js\nFixes #1603.\nIt's unnecessary and makes a request to learn.json which doesn't exist.", 'Ignore built todomvc-flux bundles', "Updated the ajax to tip to also mention that you need to check\nthat the component is still mounted before updating it's state.\nCloses #1600.", 'Merge pull request #1596 from mindeavor/patch-1\nFix typo in Flux TodoMVC Tutorial', "Attach empty onclick listener to each node\nFixes #1169.\nThis is a more robust way of fixing what MobileSafariClickPlugin previously tried to. Now even if you don't want anything to do with touch events, click events still work properly.\nTest Plan: Added a click handler to an <img /> element and triggered it in the iOS simulator -- it didn't execute before.", 'Merge pull request #1536 from spicyj/gh-1169\nAttach empty onclick listener to each node', 'Merge pull request #1583 from nhunzaker/jsxtransform-parallel\nLoad external scripts in parallel in JSXTransformer', 'Merge pull request #1590 from spicyj/svg-classname\nHandle className properly on SVG nodes', 'Fix tutorial to have exact translation of example\nFixes #903.', 'Sync upstream modules\ncrateObjectFrom is no longer used (was used in ReactPropTypes). Others are small changes.', 'Update findComponentRoot and processUpdates warnings for SVG\nI ran into a really difficult-to-debug issue with a React app with SVG\nelements. Christopher sat down with me for a while and we finally figured out\nthat the browser was moving non-SVG elements out of a parent <svg> node which\ntriggered the processUpdates() invariant. This updates the error message\nthrown from there to include this scenario in the possible issues list.', '[docs] Fix grammar', 'Reference Jest in TestUtils documentation.', 'Merge pull request #1620 from kmeht/jestDoc\nReference Jest in TestUtils documentation.', 'Update todo example. fixes \'Create\' that shouldn\'t happen\nCurrently, an onBlur creates a new todo on TodoTextInput. This makes sense for existing items but not for new items. I.e consider the following: \n\ncursor on new item ("What needs to be done?")\nclick \'x\' on the first item. \n\nThis results in two actions being fired: \n\nTODO_CREATE, with an empty string as \'text\'\nTODO_DESTROY\n\nThe proposed fix doesn\'t send a TODO_CREATE if text.trim() === "")', '[Blog] One-year anniversary post', 'Merge pull request #1614 from chenglou/1-year\n[Blog] One-year anniversary post', 'Typo: ClosureScript -> ClojureScript', 'Merge pull request #1627 from Enome/master\nTypo: ClosureScript -> ClojureScript in latest blog post', "Update link to @petehunt's react-server-rendering GitHub repo", "Fix onLoad and onError on images\nFixes bug introduced in c62c2c5.\nTest Plan: Tested that the onLoad event was properly triggered on an image. Didn't test onError but I can only assume that it works equally well.", 'Merge pull request #1632 from spicyj/img-load-error\nFix onLoad and onError on images', 'Update 2014-03-21-react-v0.10.md\nFix link to React v0.10 RC', "Fix getEventModifierState, no allocations\nAlternative to #1637 that doesn't allocate on every event.\nTest Plan: Crossed fingers.", 'Merge pull request #1638 from spicyj/getmodifierstate-2\nFix getEventModifierState, no allocations', 'Fix ExecutionEnvironment.canUseDOM for IE8.', "Fix EnterLeaveEventPlugin-test in IE10\nPreviously this was failing because iframeDocument.body wasn't properly initialized. Creating the document this way seems to work in all environments\nTest Plan: Ran the test in jest, phantomjs, IE10, Chrome, and Firefox.", 'Fix submit-button value test in IE10\nTest Plan: Ran test in jest, phantomjs, IE10, Chrome, and Firefox.', 'Fix PropTypes test in IE10\nTest Plan: Ran the test in jest, phantomjs, IE10, Chrome, and Firefox.', 'Fix select switching to multiple in IE\nThis one was an actual behavioral bug rather than a bug with the tests; our intention was that the first element from the defaultValue array would remain selected but IE seemed to be choosing the last one instead. Now we set the value for uncontrolled components in componentDidUpdate when switching from multiple to non-multiple to ensure that a consistent option gets selected.\nTest Plan: Ran the ReactDOMSelect tests in jest, phantomjs, IE10, Chrome, and Firefox. Also tested an uncontrolled select manually to make sure that nothing crazy happened when switching between options.', '[docs] Point to renderComponent over setProps', 'Prevent null reference access when unsetting styles', 'Merge pull request #1636 from harshadsabne/master\nUpdate 2014-03-21-react-v0.10.md', "Merge pull request #1631 from dblandin/master\nUpdate link to @petehunt's react-server-rendering GitHub repo", 'Merge pull request #1597 from spicyj/defaultprops-autobind\nAuto-bind before getDefaultProps', 'Merge pull request #1660 from spicyj/test-ie10-proptypesname\nFix PropTypes test in IE10', 'Merge pull request #1671 from gasi/fix-unset-style\nPrevent null reference access when unsetting styles', 'Merge pull request #1659 from spicyj/test-ie10-iframe\nFix EnterLeaveEventPlugin-test in IE10', 'Merge pull request #1658 from spicyj/test-ie10-submit-label\nFix submit-button value test in IE10', "Added 'objectOf' PropType validator to iterate on object literals and\nvalidate properties.", "Fix wording.\nThe Ballmer Peak XKCD suggests that it's a graph of ability, rather than bug frequency, which should be inversely correlated with ability.  A simple change of the wording fixes this terrible mishandling of Ballmer Peak data.", 'Merge pull request #1685 from randallsquared/patch-1\nFix correlation direction of wording in Ballmer Peak example.', 'typo', 'Merge pull request #1687 from KyleAMathews/patch-2\ntypo fix', '$apply command for update', "Merge pull request #1611 from mathieumg/master\nAdded 'objectOf' PropType validator to iterate on objects and validate properties.", 'Merge pull request #1206 from brandonbloom/apply\n$apply directive for update', 'Merge pull request #1661 from spicyj/test-ie10-select-multiple\nFix select switching to multiple in IE', "Revert #1536\nIt's causing issues in product code. Reverting until it can be\ninvestigated further.", "Fix 'this' in static methods\nbinds static methods on the descriptor to the component's actual constructor, so that foo.constructor.bar() and Foo.bar() run with the same this.", 'Create ReactEventListener\nPer our discussion friday, this creates ReactEventListener and renames variables to use the "handle"\nnomenclature.', 'Remove bad perf metric\nRemove a bad perf metric. Will investigate later.', 'Remove unnecessary topLevelTypes indirection\ntopLevelTypes is a key mirror, so dependency and topLevelType are always the same here.', 'Merge pull request #1609 from spicyj/tlt-indirect\nRemove unnecessary topLevelTypes indirection', 'Merge pull request #910 from andrewdavey/react-transform-source-map\nAdd sourceMap option to react-tools transform', 'Fix tagtree.tv link\nFixes #1697.', 'Sync out camelize module\nFor use in #1662', "Update many npm dependencies\nSauce/connect related things need some more work and I didn't want to\nfigure those out right now.\nFixes #1701", 'Added example of objectOf usage in documentation.', 'Merge pull request #1712 from mathieumg/master\nAdded example of objectOf usage in documentation.', 'Clarify refs and setState callback documentation', 'Missing semicolon in TodoStore.js', 'Merge pull request #1713 from bmihelac/patch-1\nMissing semicolon in TodoStore.js', 'Merge pull request #1513 from danielschonfeld/shouldcomponentupdate-boolean\nWarn if shouldComponentUpdate returns anything other than true/false', 'Fugbix typo.', 'Merge pull request #1721 from whatthejeff/patch-1\nFugbix typo.', 'Removes value from rendered attributes of textarea', 'Merge pull request #1244 from rayqian/master\nadd chinese translation support', "Don't export (undefined) React in main.js\nPreviously, this was throwing an error. It was unintentionally (I assume) introduced in fc5bb9c.\nTest Plan: jest", '[jsx] Make sure we throw when we get XML namespaces\nhttps://github.com/facebook/esprima/commit/aad8a2b798ca80342a744aac2869fc1feb0065dd\nreplaced XJSIdentifer with XJSNamespacedName for namespaced items, so we\nneed to adjust here accordingly.', 'Sync out transform tests', "Merge pull request #1724 from spicyj/main-nor\nDon't export (undefined) React in main.js", 'Fix tests broken by undefined window references in ReactEventListener.\nThis test breakage blames to e1c2d02fddb40cb0b246d2c2da97b41b6ba378bc.', 'Merge pull request #1710 from benjamn/fix-tests-broken-by-undefined-window-references\nFix tests broken by undefined window references in ReactEventListener.', 'Fix ReactEmptyComponent disappearing and throwing in IE8', 'Merge pull request #1542 from remixz/gh-1420\nAdd harmony transform support in browser\nFixes #1420. Moved some code around in the merge to account for more\nchanges in the transform code.\nConflicts:\n    vendor/browser-transforms.js', 'Add support for SVG ellipse elements.\nCloses #1675', "Add support for patternUnits attribute.\nThe patternUnits attribute defines how a pattern's coordinate system is\ndefined (x, y, width, height). This is particularly important when using\nrepeatable patterns in SVG. This commit adds this attribute to the lists\nof known properties.\nCloses #1548", "Add 'patternContentUnits' to SVG attributes.\nCloses #1702", 'Added missing SVG attributes: fill-opacity, font-family, font-size, opacity, stroke-opacity.\nCloses #1557', "Merge pull request #1464 from spicyj/style-esc\nDon't double-escape style names", 'Expose React.addons.Perf', 'Fix example for animation\n\nHighlight the correct lines\nAdd missing text to button\nRemove unnecessary div\n', 'Merge pull request #1731 from cody/master\nFix example for animation', "Correctly trim strings for css properties\n\nIf a unitless value is passed with a space it'll return 1 px\n", 'Merge pull request #1495 from syranide/ie8noscript\nFix ReactEmptyComponent disappearing and throwing in IE8', '[Docs] Render null returns noscript now\nFollowing #1495.', "Add helpful message about pooled classes\nHopefully this will make fewer people confused at all of the null properties. The string won't wrap nicely so I tried to keep it pithy:\nhttps://s3.amazonaws.com/uploads.hipchat.com/6574/26709/v8vzKAC784QMkX2/upload.png", "Remove timing metrics from Transaction\nNo one uses these and they weren't meant to be left in.\nTest Plan: jest", 'Add missing markerStart, markerMid, markerEnd SVG attributes', 'Adds empty onChange handler to textarea test', 'Merge pull request #1664 from spicyj/warn-pooling\nAdd helpful message about pooled classes', 'Merge pull request #1737 from spicyj/notime\nRemove timing metrics from Transaction', "Simple custom 404 page.\nGithub doesn't let us handle 404s within a project repository, so we\nhandle them at the organization level. In order to handle graceully for\nspecific projects, we're setting up redirects to projects' own 404.html.", '2 docs fixes.\nFix 404 and extra slash in url', 'Merge pull request #1716 from somethingkindawierd/master\nRemoves value attribute from rendered html of textarea', 'Remove unused properties from ReactMount\n(useTouchEvents lives in EventPluginUtils.)\nTest Plan: jest', 'Merge pull request #1741 from spicyj/mount-unused\nRemove unused properties from ReactMount', 'Merge pull request #1642 from ryanseddon/trimCSSValues\nCorrectly trim strings for css properties', '{Blog] Community Round-up #19', "Change community roundup 19's React Bootstrap author to @stevoland", "Merge pull request #1748 from pieterv/community-roundup-19-fix\nChange community roundup 19's React Bootstrap author to @stevoland", 'Fix typo in blog post', 'Merge pull request #1738 from cassus/master\nAdd missing markerStart, markerMid, markerEnd SVG attributes', '[react jsx transform] Spread attribute -> Object.assign\nAdd support for spread attributes. Transforms into an Object.assign just\nlike jstransform does for spread properties in object literals.\nDepends on https://github.com/facebook/esprima/pull/22', "Preparing to move defaultProps resolution and type validation to the descriptor\nThis copies the propType and contextType validation to a wrapper around the\ndescriptor factory. By doing the validation early, we make it easier to track\ndown bugs. It also prepares for static type checking which should be done at the\nusage site.\nThis validation is not yet active and is just logged using monitorCodeUse. This\nwill allow us to clean up callsites which would fail this new type of\nvalidation.\nI chose to copy the validation of abstracting it out since this is just an\nintermediate step to avoid spamming consoles. This makes more a much cleaner\ndiff review/history. The original validation in the instance will be deleted as\nsoon as we can turn on the warnings.\nAdditionally, getDefaultProps are moved to become a static function which is\nonly executed once. It should be moved to statics but we don't have a\nconvenient way to merge mixins in statics right now. Deferring to ES6 classes.\nThis is still a breaking change since you can return an object or array from\ngetDefaultProps, which later gets mutated and now the shared instance is\nmutated. Mutating an object that is passed into you from props is highly\ndiscouraged and likely to lead to subtle bugs anyway. So I'm not too worried.\nThe defaultProps will later be resolved in the descriptor factory. This will\nenable a perf optimizations where we don't create an unnecessary object\nallocation when you use default props. It also means that ReactChildren.map\nhas access to resolved properties which gives them consistent behavior whether\nor not the default prop is specified.", 'Add simple React.createDescriptor hook\nThis is the minimal runtime change we need to switch the JSX syntax to resolve\nto React.createDescriptor(...)', 'Fix to sample code for href in ReactPropTypes\nError should be thrown in the previous condition is "not" meet. And the href propType is described as optional in the comment, but the null check was missing.', '[Blog] Update round-up #19 to include more credit', "Merge pull request #1622 from gebrits/patch-1\nUpdate todo example. fixes 'Create' that shouldn't happen", 'Fix code style in TodoMVC Flux example', 'Wrapped line to 80 chars in ReactPropTypes sample', 'Add --harmony option to live JSX compiler page', 'Merge pull request #1760 from spicyj/docs-harmony\nAdd --harmony option to live JSX compiler page', '[Docs] Put tutorial up-to-date with the code', 'Merge pull request #1763 from chenglou/docs-tut\n[Docs] Put tutorial up-to-date with the code', '[Docs] Fix tutorial line highlights, revert ajax in cb', 'Merge pull request #1765 from chenglou/docs-tut-again\n[Docs] Fix tutorial line highlights, revert ajax in cb', 'fix link in community roundup #18', 'Merge pull request #1767 from jgebhardt/fixlink\nfix link in community roundup #18', "Cache node_modules on Travis\nThis isn't actually enabled yet for public projects, but this will help\nus speed up builds when it does get enabled.\nhttp://docs.travis-ci.com/user/caching/", 'Merge pull request #1750 from protron/patch-1\nFix to sample code for href in ReactPropTypes', 'Add support to JSX transform for \nThis only adds support for whitelisted tags, not arbitrary ones.\nCloses #1539', "Support more properties for image maps\nSupporting the <area> tag is pretty useless if we don't support the necessary properties.", 'add count() method to ReactChildren\nadded ReactChildren.count() to count the number of children, and a test case.', 'Cleanup ReactChildren', "Remove jest usage in ReactDescriptorTest\nUntil we're only using jest on github, we should stick with Jasmine spies. Soon, hopefully.", "Stop running so many things in travis\nWe're not actively looking at most of these and they take up valuable\njob time.", 'Give context for owners of compenent instantiations with propType errors\nSee modification to the test-file: Basically we add a small hint at the end\nof the error warning for propType errors to help identify which instantiation\nof the component at hand is faulty.', 'Clarify when getDefaultProps is called\nFixes #1778.', 'Fix spelling/grammar in test comment', 'Fixing grunt jsx task in Windows\nSpawning node directly instead of relying on shebang in the jsx-internal script\nFixes #1292', 'Merge pull request #1779 from spicyj/spell-gram\nFix spelling/grammar in test comment', 'Merge pull request #1780 from jbrantly/issue-1292\nFixing grunt jsx task in Windows', 'Update React-tools to support transform as object\nThis change adds an additional function to the exported object to support getting access to the transformed result as an object rather than just a string result - the separate function designed to maintain backwards compatibility. \nThis facilitates tools that want the code separate from the sourcemap or anything else as time goes by.', 'Update npm dependencies [skip ci]', "Merge pull request #1461 from spicyj/no-esc-slash\nDon't escape slash; it's unnecessary", 'make invariant show formatted actual errors in all unminified environments\nBecause we can have !DEV but unminified, we still want to see the\nmessage in those cases.', "Give useful error when using two copies of React\nIf we don't error here, we end up with a confusing error later on in this.getDOMNode() where ReactMount doesn't have the proper container registered in its object.", 'Merge pull request #1531 from spicyj/two-face\nGive useful error when using two copies of React', 'Add the built source to npm package. See #1699', "Custom readme for react-tools\nOf course this means I can no longer just npm publish from the project\nroot, but I haven't been anyway.", 'Add a note about production mode for npm installs.', 'Abstracted out common code into innerTransform\nAs per feedback brought common logic from both transform and transformAsObject into its own innerTransform function.', 'Remove mention of envify since it is listed in package.json', 'Merge pull request #1793 from monsanto/browserify-note\nAdd a note about production mode for npm installs.', 'fix the disappearing footer on the todomvc-flux sample', 'Add displayName to ReactTransitionGroup + friends\nFixes facebook/react-devtools#42.\nTest Plan: Crossed fingers.', 'Merge pull request #1786 from zpao/react-tools-readme\nCustom readme for react-tools', 'Merge pull request #1797 from spicyj/transition-group-names\nAdd displayName to ReactTransitionGroup + friends', 'Merge pull request #1784 from wvl/package-built-source-with-npm\nAdd the built source to npm package. See #1699', 'another way to fix the footer that is not shown', 'Fix sourcemaps in JSXTransformer for Firefox\nFixes #1725', 'Merge pull request #1801 from zpao/jsxtransformer-sourcemaps\nFix sourcemaps in JSXTransformer for Firefox', 'Add docblocks and consistent styling to JSXTransformer', 'Merge pull request #1802 from zpao/jsxtransformer-cleanup\nJsxtransformer cleanup', 'Update AUTHORS for 0.11 [ci skip]', 'Update polyfills list in docs [skip ci]\nFixes #1744', 'Update supported elements and properties [skip ci]', 'Merge pull request #1796 from enguerran/footer\nfix the disappearing footer on the todomvc-flux sample', "tutorial: Fetch data in componentDidMount instead\nIn a world where this component was server-rendered, we wouldn't want to call the data-fetching code there so it makes more sense to have it in componentDidMount.", 'Docs: added note about renderComponent() requirement', 'Refactor transformAsObject to transformWithDetails\nThis matches current best thinking.', 'Update sourceMap to return .toJSON() output\nThis means we get a data object back rather than a SourceMapGenerator', 'Fix react-dislayName-test\n[skip ci]', 'Add String.prototype.trim to polyfill check\nAlso shortens the URL so it fits on 1 line', 'Update AUTHORS', 'Update acknowledgements page from AUTHORS', 'Fix up getDefaultProps docs', "Don't copy todomvc-flux into starter kit\nTest Plan: Ran grunt release:starter and looked in build/starter/ to see all the examples but not todomvc-flux.", 'Merge pull request #1799 from julen/patch-1\nAdded note about renderComponent() requirement', 'Tweak wording a bit on renderComponent note', 'Update AUTHORS and acknowledgements again', 'Merge pull request #1783 from avanderhoorn/patch-1\nUpdate React-tools to support transform as object', '[Docs] Better README for react-tools', 'Rewrap tags/attributes lists', 'Simplify shouldComponentUpdate example [skip ci]', 'Revert "Add helpful message about pooled classes"\nThis reverts commit e65f17b86cdfbe04453766161d5159203e672a7f. This might have a perf impact so we\'re not going to go with it for now.', 'Bump dependencies that are known safe\nMost of these would have been installed anyway, just making sure what\ngot shrinkwrapped is what others would experience.', 'Add support for inline sourcemaps in jsx executable\n--source-map-inline', 'Merge pull request #1825 from zpao/jsx-sourcemap\nAdd support for inline sourcemaps in jsx executable', '0.11.0-rc1']v0.10.0 React Core
New Features

Added warnings to help migrate towards descriptors
Made it possible to server render without React-related markup (data-reactid, data-react-checksum). This DOM will not be mountable by React. Read the docs for React.renderComponentToStaticMarkup
Added support for more attributes:
srcSet for <img> to specify images at different pixel ratios
textAnchor for SVG

Bug Fixes

Ensure all void elements don’t insert a closing tag into the markup.
Ensure className={false} behaves consistently
Ensure this.refs is defined, even if no refs are specified.

Addons

update function to deal with immutable data. Read the docs

react-tools

Added an option argument to transform function. The only option supported is harmony, which behaves the same as jsx --harmony on the command line. This uses the ES6 transforms from jstransform.
 ['[Docs] document optional param for renderComponentToString', '0.10rc blog post', 'Fix a minor typo in the update() docs', 'Merge pull request #1273 from wincent/typo-fix-02\nFix a minor typo in the update() docs', 'Upgrade Commoner to v0.9.2 to silence deprecation warnings.\nCloses #1278.', 'Merge pull request #1186 from chenglou/doc-toString-opt\n[Docs] document optional param for renderComponentToString', 'add CodeWinds episode 4 w/Pete Hunt to videos\nAdded to videos.md', 'Merge pull request #1282 from jeffbski/addCodewinds004Videos\nadd CodeWinds episode 4 w/Pete Hunt to videos', 'Update AUTHORS for 0.10', 'shrinkwrap deps', '0.10.0']v0.10.0-rc1  ["Ensure className={false} turns into string 'false'\nFixes inconsistency shown by http://jsfiddle.net/zpao/qeXLm/.", 'version bump to 0.10.0-alpha', "Addition of 'this.context' component breaking change\nthis.context on components is now reserved for internal use by React\ncloses #1141", 'Add context deprecation to changelog, reformat', 'Tweak tutorial wording to be more accurate', 'Add support for npm test', 'Merge pull request #1143 from jeffmo/npm_test\nAdd support for npm test', 'Update authors', "Allow rendering markup string without checksum and React ID\nThis fixes https://github.com/facebook/react/pull/994.\nAlso fixes https://github.com/facebook/react/issues/1079.\nServer-rendering without ID/checksum now works. Also won't call didMount.", "simplify mountImageIntoNode's way of putting markup in innerHTML\nInstead of removing the node from the document before changing its innerHTML, just do it directly.\nThe comment seems to be outdated for years. http://jsperf.com/detach-while-setting-innerhtml", 'Fix transaction test comments\nProbably got copy/pasted in.', 'update docblock\n...for typechecking.', 'Break more browser deps in core\nThis is part of what Sebastian suggested. We require it into every component that explicitly needs it and inject it as a default mixin for composite components in\nthe browser environment. This change frees us up to inject everything in ReactComponent.', 'Add html5shiv to polyfill docs\ncf. #1030', "incorrect include in css transition group example?\nTransitionGroup maps to ReactTransitionGroup, shouldn't it be a ReactCSSTransitionGroup?", 'Merge pull request #1146 from dlau/patch-1\nincorrect include in css transition group example?', "Make JSX transform not break on 'constructor' attr", 'docs: update react-router-component link', 'docs: update link for react-async', 'Merge pull request #1150 from andreypopp/update-react-router-component-link\ndocs: update react-router-component link', '.dataTransfer not .dragTransfer', 'Add update() docs', "Remove TodoMVCs from examples/\nFixes #1154.\nAdded a README to point to TodoMVC's site instead.", 'Merge pull request #1155 from petehunt/update-helper\nAdd update() docs', '[docs] Fix version in lifecycle argument note\nFixes #1163.', '[Docs] Consolidate the two examples sections\nAlso made the formatting more consistent between complementary-tools and\nexamples.', '[addons] update() immutability helper\nDealing with immutable data is hard. This provides a simple helper (ported from the IG codebase) that makes dealing with immutable JSON data easier. Designed to be familiar for people who use MongoDB.', 'Add update() to React.addons', 'Merge pull request #1174 from spicyj/addons-update\nAdd update() to React.addons', 'Community Round-up # 17', 'Merge pull request #1156 from chenglou/1154\nRemove TodoMVCs from examples/', 'Update README.md', 'fix typo in community round-up #17', 'Add acknowledgements page', "Merge pull request #1148 from spicyj/jsx-constructor\nMake JSX transform not break on 'constructor' attr", 'make  transform correctly', 'Merge pull request #1166 from chenglou/docs-examples-consolidate\n[Docs] Consolidate the two examples sections', 'Update complementary-tools.md', 'Test that Node is a function before using instanceof on it', 'omitClose for all void elements\nAccording to http://www.w3.org/TR/html5/syntax.html#void-elements the following elements should not specify end tags:\narea, base, br, col, embed, hr, img, input, keygen, link, meta, param, source, track, wbr', 'Tweak propTypes examples for clarity in oneOfType', 'Add polygon tag to transform\nFixes #1144.', "Merge pull request #1082 from spicyj/class-false\nEnsure className={false} turns into string 'false'", 'Add Shirtstarter to examples of production apps.\nShirtstarter is 100% built on React.', 'Merge pull request #1200 from ericflo/patch-1\nAdd Shirtstarter to examples of production apps.', 'Merge the lists of JSX integrations in the docs.\nThere were these two lists of JSX tools at Complimentary Tools\nand Tooling Integration, that were a bit out of sync with each other.\nBring them together and add a link to the former from the latter.', "Updated React Version 0.9.0\nUpdated Url's:\nCDN:\nhttp://fb.me/react-0.9.0.js\n\nhttp://fb.me/JSXTransformer-0.9.0.js\n\nStarter Kit\nhttp://facebook.github.io/react/downloads/react-0.9.0.zip\n", 'Merge pull request #1203 from fson/jsx-integrations\nMerge the lists of JSX integrations in the docs.', 'Merge pull request #1204 from jmingov/patch-1\nUpdated React Version to 0.9.0', 'Add missing backtick in complementary-tools.md', 'Fix docstring typo for pure render mixin', 'Merge pull request #1207 from passy/patch-2\nAdd missing backtick in complementary-tools.md', 'Add thinking in react to the official docs', 'fix', 'Merge pull request #1209 from petehunt/thinking-in-react\nAdd thinking in react to the official docs + cleanup', "Fix IE8 disabled input throwing on focus\nWhen IE8 focuses a disabled item, it throws\nThis makes sure the we're not focusing the item during selection restoration/autofocus when the element's disabled.", 'temporarily disable warning', 'Fix ReactPropTypesTest\nchildren should never be defined as propType, so changing the test to use an actual prop.', 'Better name for server-side rendering without React ID & checksum\n"staticMarkup" sounds way better than "noChecksumNoID".\nAlso avoids some double negations.', "Add monitor module for logging instrumentation\nThis adds an instrumentation hook for logging so that we can monitor invalid API\nusage before we're ready to issue a warning.\nI took the opportunity to update some console.warns to use the warning module\ninstead. The remaining console.warns\nwill be replaced by the warning module after we've cleaned up the callsites.", 'ReactRAFBatchingStrategy\nThis will go in React addons only for now until we figure out pendingState.', 'Refactor rendering to string without checksum & React ID\nFinalize API for rendering to static markup.\nInstead of passing a boolean option to renderComponentToString, just use another method.', 'Add more owner context to monitoring\nAlways include context and specifically include the component that was missing a key.', 'Unbreak refs\nIf no refs are rendered, this.refs is undefined. This is bad since it deopts & is hard to look for. Instead we should make this.refs an immutable empty object.', 'Move UI-thread-only browser modules to browser/ui/\nThis also deletes an unused module.', 'Sync more vendored modules', 'Fix verion-check to look in right place for React.js', 'Add Object.freeze to polyfill list', 'Add srcSet attribute\nChrome beta supports this now: http://blog.chromium.org/2014/02/chrome-34-responsive-images-and_9316.html.', "Fix stale usage of emptyObject in cloneWithProps-test.\nAfter we run require('mock-modules').dumpCache(), the object exported by\nthe emptyObject module will no longer be identical to previously\nexported objects, so tests like expect(component.refs).toBe(emptyObject)\nwill fail.\nNote that this behavior only manifests itself in tests, because of course\nwe do not call dumpCache in production code.\nWe could consider storing the emptyObject globally to thwart the effects\nof dumpCache, but it's more idiomatic simply to re-require the latest\nversion of emptyObject.", "Re-require cloneWithProps as well, for consistency.\nAnd don't mock emptyObject, since that might actually replace it with a\nmutable/non-frozen object.", 'Merge pull request #1215 from benjamn/fix-cloneWithProps-test\nFix stale usage of emptyObject in cloneWithProps-test.', 'LegacyImmutableObject module\nThis copies the old implementation of ImmutableObject into LegacyImmutableObject.', 'Add Immutable\nAs titled. First of 3 diffs to add Immutable, ImmutableMap, and ImmutableObject. No logic changes.', 'Allow falsy values in statics\nWe found that the component would break if we set any statics with the\nvalue 0. It turns out @chenglou already ran into this with\nd71736b3ed665d1ffcd0c34a55510ce266a30eb2 but the statics code was copied\nearlier, and still has this falsy check. Made the same change, updated\nthe unittest.', 'Merge pull request #1192 from spicyj/srcset\nAdd srcSet attribute', 'Merge pull request #1211 from spicyj/freeze\nAdd Object.freeze to polyfill list', 'Merge pull request #1208 from passy/patch-3\nFix docstring typo for pure render mixin', '[docs] Add more words to downloads page', 'Merge pull request #1222 from spicyj/npm-dl\n[docs] Add more words to downloads page', 'Fix empty JSX expressions sometimes emitting erroneous commas', 'Merge pull request #1180 from evanc/master\nTest that Node is a function before using instanceof on it', 'included link to React devtools in tooling-integration. fixes #791', 'Fix removing DOM property with mapped name', 'Remove obsolete VERSION references', 'Bring back grunt test --debug', 'Avoid JSX in ReactCSSTransitionGroup code\nSupposedly we want these to be plain JS.', 'Merge pull request #1228 from spicyj/grunt-debug\nBring back grunt test --debug', 'Merge pull request #1219 from syranide/jsxempty\nFix empty JSX expressions sometimes emitting erroneous commas', 'Switched from browserify to pure-cjs bundler.\nOptimizations and fix for JSXTransformer build.\nDropped dependency on emulation of Node.js native modules.\nAdded deamdify step for JSXTransformer build.', 'Update 08-tooling-integration.md\nemacs compatibility', 'Merge pull request #1235 from fxbois/master\nUpdate 08-tooling-integration.md', 'Merge pull request #1225 from spicyj/cprop\nFix removing DOM property with mapped name', "Clone on mount\nThis is the first step towards descriptors. This will start cloning the\ncomponent when it's mounted instead of mounting the first instance.\nThis avoids an issue where a reference to the first instance can hang around\nin props. Since a mounted component gets mutated, the descriptor changes.\nWe don't need to clone the props object itself. Mutating the shallow props\nobject of a child that's passed into you is already flawed. Those cases need to\nuse cloneWithProps. A props object is considered shallow frozen after it leaves\nthe render it was created in.", 'ReactDOMComponent optimization\nSlight optimization to not do unneeded reconciles of DOM components', 'Unbreak JSX comment comma fix', 'Remove unused variable', 'Merge pull request #1243 from jeffcarp/master\nRemove unused variable in ballmer-peak', 'Renamed browserify tasks/configs to cjs, updated pure-cjs to 1.9.0 for better build speed.', 'CommonJS builder config to Grunt style for easier handling and readability.', 'Merge pull request #1242 from syranide/jsxcomfix\nUnbreak JSX comment comma fix', "Remove Shirtstarter as an example application.\nWe have unexpectedly had to shut Shirtstarter down, so it won't serve as a good React.js example any more unfortunately -- sorry for the documentation churn.", 'Merge pull request #1246 from ericflo/patch-1\nRemove Shirtstarter as an example application.', 'Add svg text-anchor attribute.', 'Merge pull request #1181 from lrowe/patch-5\nomitClose for all void elements', 'Community Round-up #18', "Add support for {harmony: true} to react-tools\nrequire('react-tools').transform(code, {harmony: true});\nnow enables all the harmony es6 transforms that are supported.\nThis is modeled after https://github.com/facebook/react/blob/master/bin/jsx#L17-L23", "Reassign variable of rendered component\nThe component that gets passed into renderComponent isn't guaranteed to be the\ninstance that gets mounted. We want to clone the instance.\nUnit tests need to reason about the mounted instance. The first code mod changes:\nReactTestUtils.renderIntoDocument()\ninto\n = ReactTestUtils.renderIntoDocument()\nUsing this scripts:\nscripts/bin/codemod -m -d ~/www --extensions js \\\n   '^(\\s)ReactTestUtils.renderIntoDocument(\\s([$a-zA-Z0-9_]+)\\s*)' \\\n   '\\1\\2 = ReactTestUtils.renderIntoDocument(\\2)'\nIn the second case I do the same for React.renderComponent. However, there are\nalot more unnecessary matches so I only codemod if the same identifier occurs\nlater in the file.\nscripts/bin/codemod -m -d ~/www --extensions js \\\n   '^(\\s)React.renderComponent(\\s([$a-zA-Z0-9_]+)\\s?,(.?\\n?.*?\\s\\2\\b)' \\\n   '\\1\\2 = React.renderComponent(\\2,\\3'\nAnd one more for ReactMount.renderComponent used by internals.\nscripts/bin/codemod -m -d ~/www --extensions js \\\n   '^(\\s)ReactMount.renderComponent(\\s([$a-zA-Z0-9_]+)\\s?,(.?\\n?.*?\\s\\2\\b)' \\\n   '\\1\\2 = ReactMount.renderComponent(\\2,\\3'\nThis still matches many unnecessary cases where the second occurance of the\nidentifier is a redeclaration or comment. But this code mod doesn't hurt in\nthose cases.\nFinally I have to do the same for:\nthis. = React.renderComponent(this.,\nThis is a common pattern for production code but not tests. Some of these call\nsites will likely break when we move to true descriptors.\nscripts/bin/codemod -m -d ~/www --extensions js \\\n   '^(\\s)React.renderComponent((\\s)this.([$a-zA-Z0-9_.]+)\\s*?,' \\\n   '\\1this.\\3 = React.renderComponent(\\2this.\\3,'", 'Fix some invalid uses of instances\nBreaking this out of the other code mod.', "More actionable error message for  and nested \nThis bites people all of the time. Until we have a better solution, let's just make the error message more actionable (most people don't know how the DOM\ngets unexpectedly mutated).", "Fix ref behavior for remounting\nI'm thinking that setting up this.refs in mountComponent is better than construct. Followed the same pattern as ReactComponent.Mixin and nulling out\nthe value in construct and setting it to its initial value in mountComponent.", 'Merge pull request #1262 from vjeux/harmony-react-to\nAdd support for {harmony: true} to react-tools', 'Merge pull request #1229 from spicyj/no-jsx\nAvoid JSX in ReactCSSTransitionGroup code', 'Merge pull request #1248 from asolove/svg-text-anchor\nAdd svg text-anchor attribute', 'Merge pull request #1226 from LilyJ/master\nincluded link to React devtools in tooling-integration. fixes #791', 'Renamed commojs task to bundle, added failing build if bundler failed.', 'Merge pull request #1193 from spicyj/jsx-polygon\nAdd polygon tag to transform', 'Merge pull request #1234 from RReverser/pure-cjs\nSwitched from browserify to pure-cjs bundler.', 'Revert "Merge pull request #1234 from RReverser/pure-cjs"\nThis reverts commit 7987e6a51dd6e33d6736e98f038d4ace545feabe, reversing\nchanges made to d88d4796854569e9352a6d81489262f6566b75b4.', 'Sync latest Immutable changes', "Replace function expression with for loop\nisCustomAttribute used an anonymous function in place of a for loop.\nSwap it out so we're not allocating unnecessarily.", "don't try to use Object.prototype methods as transfer strategies in ReactPropTransferer.mergeProps\nWhile looking up a detail of how transferPropsTo() works I noticed that we never check TransferStrategies.hasOwnProperty(thisKey) when merging props, just newProps.hasOwnProperty(thisKey) and a truthy test for TransferStrategies[thisKey]. This means that if our newProps has keys like toString, valueOf, or constructor etc. set, we will pull these functions off TransferStrategies and invoke them when merging props. In most cases this will just result in a failure to merge and some code without side effects being run but in the case of valueOf it will actually generate an exception.", "Logging use of objects as maps for children\nLet's start logging objects as maps for children. We may want to deprecate this\nand replace it with ImmutableMap and Map data structures instead.\nThis should ideally be logged in the recursive function but since that loses the\nscope of where these children are passed it's easier to start tracking them\nhere to get an idea of how frequently and where it's used.", 'Separate immutable project\nThis moves Immutable and Immutable object into the new immutable project.', "Silence tests unsupported in PhantomJS.\nThese tests can still be run in the browser using grunt test --debug.\nThis is a repeat of 42f8d155f8f240c457c969ac683d8b25876708ee. For posterity, we\ndo this because Phantom has a problem with Object.freeze and the test runner\ncan't do DEV right (because we get rid of that in the build step).", 'Upgrade browserify', 're-enable moved root warning', 'update version for 0.10rc']v0.9.0 What’s New?
This version includes better support for normalizing event properties across all supported browsers so that you need to worry even less about cross-browser differences. We've also made many improvements to error messages and have refactored the core to never rethrow errors, so stack traces are more accurate and Chrome's purple break-on-error stop sign now works properly.
We've also added to the add-ons build React.addons.TestUtils, a set of new utilities to help you write unit tests for React components. You can now simulate events on your components, and several helpers are provided to help make assertions about the rendered DOM tree.
We've also made several other improvements and a few breaking changes; the full changelog is provided below.
JSX Whitespace
In addition to the changes to React core listed below, we've made a small change to the way JSX interprets whitespace to make things more consistent. With this release, space between two components on the same line will be preserved, while a newline separating a text node from a tag will be eliminated in the output. Consider the code:
``` html

  Monkeys:
  {listOfMonkeys} {submitButton}

```
In v0.8 and below, it was transformed to the following:
javascript
React.DOM.div(null,
  " Monkeys: ",
  listOfMonkeys, submitButton
)
In v0.9, it will be transformed to this JS instead:
javascript{2,3}
React.DOM.div(null,
  "Monkeys:",
  listOfMonkeys, " ", submitButton
)
We believe this new behavior is more helpful and elimates cases where unwanted whitespace was previously added.
In cases where you want to preserve the space adjacent to a newline, you can write {'Monkeys: '} or Monkeys:{' '} in your JSX source. We've included a script to do an automated codemod of your JSX source tree that preserves the old whitespace behavior by adding and removing spaces appropriately. You can install jsx_whitespace_transformer from npm and run it over your source tree to modify files in place. The transformed JSX files will preserve your code's existing whitespace behavior.
Changelog
React Core
Breaking Changes

The lifecycle methods componentDidMount and componentDidUpdate no longer receive the root node as a parameter; use this.getDOMNode() instead
Whenever a prop is equal to undefined, the default value returned by getDefaultProps will now be used instead
React.unmountAndReleaseReactRootNode was previously deprecated and has now been removed
React.renderComponentToString is now synchronous and returns the generated HTML string
Full-page rendering (that is, rendering the <html> tag using React) is now supported only when starting with server-rendered markup
On mouse wheel events, deltaY is no longer negated
When prop types validation fails, a warning is logged instead of an error thrown (with the production build of React, type checks are now skipped for performance)
On input, select, and textarea elements, .getValue() is no longer supported; use .getDOMNode().value instead

New Features

React now never rethrows errors, so stack traces are more accurate and Chrome's purple break-on-error stop sign now works properly
Added support for SVG tags defs, linearGradient, polygon, radialGradient, stop
Added support for more attributes:
crossOrigin for CORS requests
download and hrefLang for <a> tags
mediaGroup and muted for <audio> and <video> tags
noValidate and formNoValidate for forms
property for Open Graph <meta> tags
sandbox, seamless, and srcDoc for <iframe> tags
scope for screen readers
span for <colgroup> tags
Added support for defining propTypes in mixins
Added any, arrayOf, component, oneOfType, renderable, shape to React.PropTypes
Added support for statics on component spec for static component methods
On all events, .currentTarget is now properly set
On keyboard events, .key is now polyfilled in all browsers for special (non-printable) keys
On clipboard events, .clipboardData is now polyfilled in IE
On drag events, .dragTransfer is now present
Added support for onMouseOver and onMouseOut in addition to the existing onMouseEnter and onMouseLeave events
Added support for onLoad and onError on <img> elements
Added support for onReset on <form> elements
The autoFocus attribute is now polyfilled consistently on input, select, and textarea

Bug Fixes

React no longer adds an __owner__ property to each component's props object; passed-in props are now never mutated
When nesting top-level components (e.g., calling React.renderComponent within componentDidMount), events now properly bubble to the parent component
Fixed a case where nesting top-level components would throw an error when updating
Passing an invalid or misspelled propTypes type now throws an error
On mouse enter/leave events, .target, .relatedTarget, and .type are now set properly
On composition events, .data is now properly normalized in IE9 and IE10
CSS property values no longer have px appended for the unitless properties columnCount, flex, flexGrow, flexShrink, lineClamp, order, widows
Fixed a memory leak when unmounting children with a componentWillUnmount handler
Fixed a memory leak when renderComponentToString would store event handlers
Fixed an error that could be thrown when removing form elements during a click handler
Boolean attributes such as disabled are rendered without a value (previously disabled="true", now simply disabled)
key values containing . are now supported
Shortened data-reactid values for performance
Components now always remount when the key property changes
Event handlers are attached to document only when necessary, improving performance in some cases
Events no longer use .returnValue in modern browsers, eliminating a warning in Chrome
scrollLeft and scrollTop are no longer accessed on document.body, eliminating a warning in Chrome
General performance fixes, memory optimizations, improvements to warnings and error messages

React with Addons

React.addons.TestUtils was added to help write unit tests
React.addons.TransitionGroup was renamed to React.addons.CSSTransitionGroup
React.addons.TransitionGroup was added as a more general animation wrapper
React.addons.cloneWithProps was added for cloning components and modifying their props
Bug fix for adding back nodes during an exit transition for CSSTransitionGroup
Bug fix for changing transitionLeave in CSSTransitionGroup
Performance optimizations for CSSTransitionGroup
On checkbox <input> elements, checkedLink is now supported for two-way binding

JSX Compiler and react-tools Package

Whitespace normalization has changed; now space between two tags on the same line will be preserved, while newlines between two tags will be removed
The react-tools npm package no longer includes the React core libraries; use the react package instead.
displayName is now added in more cases, improving error messages and names in the React Dev Tools
Fixed an issue where an invalid token error was thrown after a JSX closing tag
JSXTransformer now uses source maps automatically in modern browsers
JSXTransformer error messages now include the filename and problematic line contents when a file fails to parse
 ["Add warning about object property order.\nIt's easy to misuse the properties-as-keys feature and end up with children rendered out of order. Add a note and example of how to avoid this.", 'Fix docs for React.Children.map, .forEach, .only.', 'Blog post for 0.9 release candidate', 'Add wingspan-forms to complimentary tools docs', 'Merge pull request #1110 from dustingetz/master\nAdd wingspan-forms to complimentary tools docs', 'Prevent error thrown when removing event target\nFixes #1105.', 'Update complementary-tools.md', 'Update complementary-tools.md', 'Add download and hrefLang attributes\nFixes #1115.', 'Update envify to 1.2.0', 'Merge pull request #1117 from andreypopp/envify-bump\nUpdate envify to 1.2.0', 'Pool ancestors list so event system is reentrant', 'Merge pull request #1106 from spicyj/gh-1105\nPrevent error thrown when removing event target', 'Strip calls to warning() in DEV\nFixes #1120.', 'Merge pull request #1122 from spicyj/gh-1120\nStrip calls to warning() in DEV', "Add media element attributes\nFixes #1124.\nI didn't add volume because it requires more complicated logic to control properly and I didn't add paused because to set it we need to call play() or pause() -- perhaps a mutation method is appropriate.", 'Merge pull request #1116 from spicyj/gh-1115\nAdd download and hrefLang attributes', "Update copyrights for 2014.\ngrep -rl 'Copyright 2013 Facebook' static_upstream | xargs perl -pi -w -e s/Copyright 2013 Facebook/Copyright 2013-2014 Facebook/g;'\nNot going to check in a script to do this since it will just change every year.\nCloses #1006", 'Merge pull request #1128 from spicyj/media-attrs\nAdd media element attributes', "Don't break if no attribute value\nFixes the transformation of things like <button disabled>.", "Merge pull request #1130 from spicyj/if-attr-value\nDon't break if no attribute value", 'Merge pull request #1100 from plievone/mapchildren-docs\nFix docs for React.Children.map, .forEach, .only.', 'add ReactCSSTransitionGroup to addons and document it', 'remove child factories', 'docs fixes', 'Add ReactTestUtils to addons', 'fix docs', 'Merge pull request #1059 from petehunt/rtg-docs\nDocument ReactCSSTransitionGroup', 'Merge pull request #1112 from petehunt/testutils-addons\nAdd ReactTestUtils to addons', 'clone docs', 'Merge pull request #1132 from petehunt/docs-clonewithprops\nclone docs', 'Simpler ReactTestUtils.simulateEventOnDOMComponent', "Simulate synthetic events using ReactTestUtils\nMost of the time this is what you want to do, so I've renamed what was Simulate to be SimulateNative.\nNow Simulate.change does what you expect, so this fixes #517 and fixes #519.", 'Rebuild simulators after injecting plugins', 'complementary-tools repo owner changed', 'Merge pull request #1133 from martinandert/repo-owner-change\ncomplementary-tools repo owner changed', 'Merge pull request #939 from spicyj/simulate-synthetic\nSimulate synthetic events using ReactTestUtils', 'Update Simulate docs and reorg a little bit', 'Merge pull request #1135 from spicyj/testutils-docs\nUpdate Simulate docs and reorg a little bit', "Add descriptions to package.jsons\nOtherwise, npm just reads the first non-header of our readmes, which doesn't\nmatch up accurately or cleanly (no markdown parsing).", 'React v0.9 blog post', 'tweak object property warning.', "Merge branch 'joshduck-patch-1'\nCloses #989", 'Merge pull request #1131 from spicyj/rel-notes-0.9-2\nReact v0.9 blog post', 'Updated Authors', 'update changelog', 'shrinkwrap\nHad to work around bug in falafel preventing shrinkwrap by editing\nnode_modules/coverify/node_modules/falafel/package.json to declare esprima as\na dependency. cf. https://github.com/substack/node-falafel/pull/24', '0.9.0!']v0.9.0-rc1  ['bump version to 0.6.0-alpha', 'Fix grunt npm:test', '0.5.0 release\nUpdated README, CHANGELOG, blog post', "Fix live editor examples on home page.\nRemember that one time I wrote release notes and said:\n\nThis is a breaking change - if you were using class, you must change\nthis to className or your components will be visually broken.\n\nGood thing I didn't listen to myself!", 'Make SelectEventPlugin not throw for range inputs\nAccessing .selectionStart on a non-text input will throw (see http://www.w3.org/TR/2009/WD-html5-20090423/editing.html#textFieldSelection), so check that the input has selection capabilities before accessing the property.\nFixes #437.', 'Merge pull request #438 from spicyj/select-range\nMake SelectEventPlugin not throw for range inputs', "Use Default Value for Undefined Props\nCurrently, default props as defined by getDefaultProps are only used if a prop is not specified (using X in Y check).\nHowever, this makes it difficult for composing components to pass along the state of not being defined, for example:\nrender: function() {\n    // If this.props.someProp is not set, InnerThing should use the default value.\n    return ;\n  }\nThis changes the requirement for falling back to the default value to an undefined check (using typeof X === 'undefined').", 'Add clickable anchors to docs headers\nCloses #434', 'docs: remove OUTLINE', 'docs: Delete Mutation Events (onCharacterDOMModified)', 'New marketing copy', "Don't reset mouseDown in focus handlers\nFocus fires after mouse down on initial click, so we lost the\nflag when the user initially began dragging on the input.", 'Changes based on feedback', 'fixed %d in invariant call', 'ReactTransitionGroup example: fix typo and logic bug in handleRemove', 'Fix ReactTransitionEvents detectEvents', 'Merge pull request #446 from brianr/master\nReactTransitionGroup example: fix typo and logic bug in handleRemove', 'Update API docs for unmountAndReleaseReactRootNode', 'typo', "Move heading anchors 50px up to avoid nav bar\nFixes #447.\nWe do this by moving the actual anchored element up in the page without moving the actual text. (Apple uses a similar trick in their framed docs.) Now this looks a bit sillier on smaller screens but it's better overall.", 'Fix unmounting components mounted into doc element\nIf we are to unmount a component mounted into a document element we should\nunmount it from document.documentElement and not from document.firstChild which\nis a doctype element in this specific case.', 'Merge pull request #423 from andreypopp/master\nRe-rendering components into a document leaks components', 'Make \'disabled\' MUST_USE_ATTRIBUTE for compatibility with CSS [disabled] selectors.\nWhen a ReactDOMComponent is created with the property disabled: true subsequently setting the property to disabled: false the HTML attribute disabled="true" was being left in the DOM.', 'Added docs for React cookbook section Introduction and Inline Styles React recipe', 'Moved cookbook recipes into separate directory. Updated nav_docs to loop through cookbook yaml. Added cookbook directory to js/ to add live editing of code samples', 'add tip style to style entry', 'add tip format for comparison', 'new entry for ternary expression in jsx', 'new entry on self-closing tag', 'small typo and code tag is now js highlight\nWas html before bc github screws up the js highlighting for jsx.', 'fix permalink, temporarily remove script field of Jekyll', 'entry on returning only one node from render', 'style prop value shorthand, children prop manip warning', 'add line-height to unitless css props', 'entry on controlled input with value null', 'entry on willReceiveProps not triggered on mounting', 'minor spelling change on the "controlled input null value" cookbook entry', 'Added backgroundImage example to "inline styles" cookbook entry', 'all typos', 'tip format for intro', 'added grunt task for generating live samples JS', 'props in getInitialState as anti-pattern', 'shrink working on props in state entry', 'Add event listeners cookbook entry', 'modify some wording', 'change some wording, add tip for events entry\n\nNo need to mention React, you know you\'re working with it =).\nWrap code elements in back ticks, so that they get the "box" styling for md.\nYou\'d want the snippet to work inside the live editor, so you need to renderComponent. As per wiki specification, the DOM element on which to mount is mountNode, just like on the front page.\nDon\'t forget the JSX pragma, or else your render fails.\nNitpick: empty line after the end of md.\nNo need for jQuery reference since\nThe general mood around React is that you don\'t need jQuery.\nThe syntax\' still clear without jQuery.\nWe\'re doing a jQuery integration entry =).\ngetInitialState was absent.\nYou don\'t need componentWillMount here. fetch them in getInitialState.\nThe non-spoken convention seems to call the event handler "handle" + eventName. So handleResize clearly indicates it\'s a resize handler while updateDimensions might do something else. This latter name might actually be better under circumstances where you use call the method directly somewhere, but since we removed the only direct usage in componentWillMount this is fine.\nWent OCD again and tried to keep the code short. width is enough of a demo. Removed height.\nDistinguish between DOM events and React events. Wish we go full React events in a near future.\n', 'fix all links to point to /react as root', 'ajax ex', 'add lib integration entry; tweak 1 sentence', 'one single child in ternary', 'remove entry 13 jquery animation; react has animation', 'update cookbook nav', 'added seperate cookbook layout (since URL base of next/prev is hardcoded in layout), added next/prev yaml meta to each cookbook entry until I can find a way of generating them dynamically', 'added function that write to the output html file', 'undo changes to extractCode, using grunt task instead', 'better regex for filename', 'removed cookbook prefix from filenames', "Remove cb prefix from cookbook entries since they're already in /cookbook/ directory", 'entry on false behavior', 'better grammar', "Removing the grunt task generated live edit JS files since we're holding off on the inline edit feature for now", 'Removed Q&A format', 'new line at end of nac_docs; update to entry 4', 'Merge pull request #16 from chenglou/feat-documentation-cookbook\nnew line at end of nac_docs; update to entry 4', 'Removed .js extension from Cookbook Introduction description', 'fix 2 more entries', "Merge branch 'feat-documentation-cookbook' of https://github.com/mcsheffrey/react into feat-documentation-cookbook", 'Removed JS for live edit', 'ex for entry 7', 'Update everything for v0.5.1\nCherry-picked from f3db0006e832e24649278c9e9eab6b9ca2c80336, excluding\nversion changes.', 'blog post for 0.5.1', "Removed grunt task for building live edits and removed js link conditional at bottom of layout since we're no longer conditionally loading live edit js for cookbook pages", 'Merge pull request #17 from chenglou/feat-documentation-cookbook\nfix 3 more entries', 'title case for entry titles; fix two entry names', 'Merge pull request #18 from chenglou/title-case\ntitle case for entry titles; fix two entry names', 'Update nav config with new entry names/permalinks', 'Forward Compatibility w/ WebKit & Blink\nNewer versions of WebKit and Blink will support both document.body.scrollTop and document.documentElement.scrollTop. Therefore, implementing cross-browser compatibility by summing the two will no longer work.\nThis changes React to use getUnboundedScrollPosition so we get the fix and consistency in one change!\nSee: https://rniwa.com/2013-10-29/web-compatibility-story-of-scrolltop-and-scrollleft/', 'Add autoCorrect to list of supported DOM properties', 'Reorder DefaultDOMPropertyConfig\nautoCorrect belongs with the non-standard properties list.', 'Bump populist version to v0.1.4.\nThe new version includes a fix for this IE8 issue reported by\n@subtleGradient: https://github.com/benjamn/populist/issues/4\nCloses #456.', 'Merge pull request #457 from benjamn/upgrade-populist\nBump populist version to v0.1.4', "remove examples/wrapup\nApparently it's no longer relevant.", 'Switch utility function calls -> namespaced calls', 'fix doc & example transition opacity from .99 to 1\nThe initial thought was that an opacity animation from 0.01 to 1 causes trouble on some browser. But after testing on opera 12.15, ff 23, ie 10, chrome 30, desktop/mobile safari 7 and chrome android I confirm this works.', 'Better getUnboundedScrollPosition for windows\nInstead of using browser sniffing, getUnboundedScrollPosition can do\nbetter and not have to depend on the getDocumentScrollElement module.', 'split add-ons into subsections\nIn preparation for documenting classSet add-on.', 'add docs on classSet add-on', 'less aggro', '[docs] Clarify when getInitialState is called.', 'Clear error message when rendering a nonvalid component', 'Merge pull request #465 from matnel/bug388\nClear error message when rendering a nonvalid component', "remove examples/wrapup\nApparently it's no longer relevant.", "Merge branch 'rm-wrapup' of github.com:chenglou/react into rm-wrapup\nConflicts:\n    package.json", "Fix ReactDOMSelection for IE 11\nIE 11 no longer supports the legacy document.selection API.\nTheir implementation of window.getSelection() doesn't support\nthe extend() method, which we were relying on.\nIf the selection is RTL and selection extend is missing, then just\nflip the selection.", 'Oxford comma', 'Merge pull request #458 from chenglou/rm-wrapup\nRemove support for the wrapup packager.', 'get rid of composition', 'Update tutorial to use className', 'Script async and defer properties', 'fix title case for docs tips everywhere', 'tutorial: Simplify ajax options\ndataType was unnecessary; mimeType was both unnecessary and wrong in this case. Also removed an unnecessary bind and changed pollInterval to 2000 ms for consistency with https://github.com/petehunt/react-tutorial (faster is nicer if you actually try it out!).', 'Remove jQuery version number from tutorial docs', 'Merge pull request #472 from lrowe/patch-4\nScript async and defer properties', 'Removing unused useSelect variable.', "Removing 'isEventSupported'", 'blogify', 'make props/state section less intense', 'rename', 'rename', 'Merge pull request #453 from petehunt/blogpost2\n"Thinking in React" blog post', "Move header link styling out of documentation only\nIt's used in blog posts too. I also constrained it to just the anchor\nclass to avoid any other headers we have.", 'Merge pull request #476 from SanderSpies/unused-onselect\nRemoving unused useSelect variable.', '"Thinking in React": fix list formatting', 'Merge pull request #481 from andreypopp/master\n"Thinking in React": fix list formatting', "Include Ownership in the Ship of Theseus\nWhen we determine whether a React component should be updated (as opposed to destroyed or replaced), we currently only look at whether they share the same constructor. This adds a check for whether they share the same owner component.\nI've also consolidated this logic (I cannot believe this was not already done).", 'Move merge utility functions from utils to vendor/core', 'add docs lowercase mention for data- and aria-', 'Merge pull request #482 from chenglou/data-lowercase\nadd docs lowercase mention for data- and aria-', 'Use smaller blog images and host directly', 'XML->HTML, because people are fickle.', 'Merge pull request #483 from spicyj/sm-img\nUse smaller blog images and host directly', 'Generate the browser test list at built time', 'Browser test runner', 'serve worker.js from its actual relative path', 'Format test results as TAP', 'enable testling-ci browser testing', 'skip Worker test unless the browser supports them', 'include the built files for testling', "Testing-ci can't handle spaces in filenames?", 'Make it easier to repro tests in the wild', 'Fixed paths for phantomjs', 'Absolute urls for less flakiness', 'SauceLabs Browser testing via Travis', 'disable testling', 'Correct SauceLabs tokens', 'Upgrade to the latest version of jasmine\nNecessary for IE8 support', 'test server middleware for receiving test results', 'test runner requires es5-shim', 'Simple test result logger', 'IE8 support in jasmine-support', 'inserted iframes can be targeted after a delay', 'move html reporter and its requirements', 'browser support for jasmine-support', "don't double-log test results", 'upgraded sauce harness\nLost jasmine directly instead of using a module builder because it was failing in IE8', 'separate grunt task for saucelabs browser testing', 'new webdriver-jasmine task and config', 'remove sauce labs stuff for now', 'safer bind', 'log using grunt', 'remove saucelabs for now', 'cleanup', 'grunt task launch phantomjs as a webdriver server', 'wait for all results to finish sending', 'cleanup webdriver jasmine task', 'cleanup', 'keep track of incomplete', 'add logging to webdriver config', 'start a local webdriver server before using it', "removed compiled build files\nNot necessary now that we aren't supporting testling.", 'Not necessary anymore', 'Community round-up #10', 'move browser test libs to lib folder', 'replace phantom-harness runner with webdriver', 'making phantomjs version less specific', 'cleanup loadNpmTasks', "ignore generated file\nRunning the tests shouldn't make git status dirty.", 'rename sauce-harness to index', 'Make propTypes DEFINE_MANY_MERGED', 'Make submit button default value appear correctly\nFixes #473.', 'Merge pull request #487 from spicyj/multi-proptypes\nMake propTypes DEFINE_MANY_MERGED', 'Merge pull request #488 from spicyj/gh-473\nMake submit button default value appear correctly', 'Make bin/jsx --version output the React version according to package.json.\nCloses #329.', 'Merge pull request #486 from benjamn/jsx-version\nMake bin/jsx --version output the React version according to package.json.', 'allow directory browsing', 'Merge pull request #451 from subtleGradient/subtlegradient/browser-testing\nBrowser testing.', "don't try to loadNpmTasks grunt-cli", 'move docs tooling from JSX in Depth\nAlso removes the code wrap around the syntax highlighting link.', 'Merge pull request #492 from chenglou/move-tooling\nmove docs tooling from JSX in Depth', 'Prevents header anchors from interfering with clickable content.', 'Make state immutable in tutorial (eek)', 'update add-ons docs based on feedbacks\n\nOverview of add-ons for the add-ons page.\nBetter title for ReactLink.\nNicer code format for classSet example.\nBetter explanation for classSet.\n', 'JSXTransformer now supports IE8', 'Merge pull request #484 from syranide/jsxie8\nIE8 support for JSXTransformer', 'Fix wheelDelta misspelled', 'Fixes the name of the component on documentation\nAvatarImage -> Avatar', 'Merge pull request #506 from syranide/wheelie8\nFix wheelDelta misspelled', 'Improve error logging for event handlers of React components.\nThis guards every auto-bound method and uses the name of the component and method as guard name.', "Remove transaction from componentWillUpdate\nIt wasn't documented and I think the transaction is supposed to be internal.", 'Add support for oncontextmenu in React.', 'Rename nodeContains to containsNode', 'Merge pull request #19 from chenglou/title-case\nfix title case for tips everywhere', "Renamed Cookbook references to tips. Reworded intro (sounded weird because it still referenced cookbooks. Updated some entry ID's (some side nav links didn't match entry permalinks)", 'Small cleanup to tips intro', 'Added clearfix to blog content holder', "Fix failing tests\nTwo of your tests were failing because of commit\n1e71df5399e4c94511e587fa368e7c57a537dc91\nI fixed them by:\n1) Using jasmine's spyOn in ReactCompositeComponentError-test.js\n2) Inverting the function wrapping in the above commit.\nGodspeed.", 'Merge pull request #493 from guidobouman/master\nPrevent header anchors from interfering with clickable content in docs.', 'Merge pull request #522 from pieter-vanderwerff/blog-footer-position-fix\nAdded clearfix to blog content holder', 'Merge pull request #524 from brainkim/suchfailing-wow-sotest\nFix failing tests', 'Rewrite vendor/constants.js to use require("ast-types").traverse.\nMost notably, this new style of transformation gives us access to\nthis.parent.node, which allows us to avoid replacing identifiers that are\nnot actually free variables, such as member expression properties.\nCloses #496.', 'Better comments for vendor/constants.js.', 'Merge pull request #526 from benjamn/rewrite-vendor/constants.js\nRewrite vendor/constants.js to use require("recast").types.traverse.', 'NEW sauce-tunnel grunt task', 'desiredCapabilities webdriver config', 'fixup sauce-tunnel', 'ignore tunnel logs', 'NEW saucelabs webdriver task', 'better error handling for jasmine task', 'Suppress encoding warning in Firefox', 'postDataToURL using ajax instead of DOM', 'no need to pass jasmine through jsx', 'remove old browser logger', 'user JSON encoding for browser logger\nFixes a strange issue in IE', 'sped up the webdriver tests', 'name local saucelabs tests too', 'cleanup', 'log individual test results when in --debug mode', "don't log your password to the console", 'wait a little longer for the page to load', 'sauce labs browser configs for running manually', 'fixes #513', 'remove unnecessary task config', 'Upgrade populist version to v0.1.5 for better error reporting.', 'Merge pull request #529 from benjamn/upgrade-populist\nUpgrade populist version to v0.1.5 for better error reporting', 'Merge pull request #460 from chenglou/opacity-1\nfix doc & example transition opacity from .99 to 1', 'Small cleanup to style tips', 'Tweaks to if-else tip', 'Tweak for self closing tag tip', 'Fix broken link, formatting on px style tip', 'Children props tip tweak', 'fix broken link on controlled input tip', 'Fix broken link on componentWillReceiveProps tip', 's/Zuck/Rogers/', 'Fix broken link, spacing on events tip', 'Update wording on AJAX tip', 'formatting and syntax on false in JSX tip', "ReactTransitions: Don't animate undefined children", 'Transitions: Handle undefined input to mergeKeySet\nGracefully handle undefined input to mergeKeySet.', 'Merge pull request #510 from subtleGradient/subtlegradient/run-the-browser-tests-on-saucelabs\nMake it easy to run the browser tests on saucelabs.', 'Remove modules cache with grunt clean', '"use strict" in shouldUpdateReactComponent', 'Explicitly require the assert module in vendor/constants.js.', 'Merge pull request #20 from zpao/tips\nUpdates to tips', 'Cleanup lint warnings from recent testing changes\nAlso, relaxed a rule for dot notation (and unrelaxed it in src).', 'Merge pull request #362 from mcsheffrey/feat-documentation-cookbook\nReact Tips documentation', 'Set docs menu item to active when viewing a “tips” page', 'utils.* is now used everywhere', 'Rename receiveProps to receiveComponent\nThis renames receiveProps and changes it to take the next component to copy props from instead of just the props. That is,\ncomponent.receiveComponent(nextComponent, transaction)\ninstead of\ncomponent.receiveProps(nextComponent.props, transaction)\nThis is a precursor to adding contexts, which will also need to get propagated just like props. This change allows ReactCompositeComponent to override receiveProps and do something like\nthis._pendingContext = nextComponent.context;', 'Remove Obsolete IE8 Compatibility Code\nSee the TODO comment. Synthetic events have shipped and this is no longer necessary.', 'Better error message for renderComponentToString()\nReported on Twitter by AirBnb (who are integrating React into their open-source JS framework). They made a mistake and passed a string in as the\ncomponent. We should have a better error message for that.', "Contexts\nSummary:\nadds this.context which you can think of as implicit props, which are passed automatically down the //ownership// hierarchy.\nContexts should be used sparingly, since they essentially allow components to communicate with descendants (in the ownership sense, not parenthood sense), which is not usually a good idea. You probably would only use contexts in places where you'd normally use a global, but contexts allow you to override them for certain view subtrees which you can't do with globals.\nThe context starts out null:\nvar RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n    }\n  });\nYou should never mutate the context directly, just like props and state.\nYou can change the context of your children (the ones you own, not this.props.children or via other props) using the new withContext method on React:\nvar RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n      var children = React.withContext({foo: 'a', bar: 'b'}, () => (\n        // In ChildComponent#render, this.context === {foo: 'a', bar: 'b'}\n        \n      ));\n      // this.context === null\n    }\n  });\nContexts are merged, so a component can override its owner's context for its children:\nvar ChildComponent = React.createClass({\n    render: function() {\n      // this.context === {foo: 'a', bar: 'b'} (for the caller above)\n      var children = React.withContext({foo: 'c'},() => (\n        // In GrandchildComponent#render,\n        // this.context === {foo: 'c', bar: 'b'}\n        \n      ));\n      // this.context === {foo: 'a', bar: 'b'}\n    }\n  });", 'Propagate events to parent components when nested\nWhen events are captured, the nearest React-rendered ancestor is found and events are propagated to its tree. This causes issues when components are nested as only the innermost component receives the events.\nThis change modifies this behaviour so events propagate all the way up the DOM hierarchy. To reduce the performance cost, this DOM traversal is only done if the component is actually nested (determined by the containerIsNested map which is lazily initialised).', 'fixes browserify task transforms support', 'ignore logs and testing stuff', 'require coverify', 'batch logs until the end unless ran with --debug', 'enable coverage logging from the worker', "fixes an issue where the list of files to test isn't complete", 'speed up server middleware slightly', 'consoleLoggerMiddleware handles coverage logs', 'new grunt browserify:withCodeCoverageLogging task', 'new grunt test:coverage task', "fixes the case when coverage isn't turned on", 'picked all the lint', 'Lines too long; reformatted', 'simplified the sort function', 'Merge pull request #550 from subtleGradient/subtlegradient/code-coverage\nCode coverage grunt tasks.', 'Make doc headers clickable again\n...without preventing clicks on other things.\nJust use an <a name="..."> tag that doesn\'t take up any space to make sure that we\'re not covering up something else.\nFor whatever reason, doing position: relative; top: -$navHeight; doesn\'t work and causes the anchor target not to be moved up. This solution works in both Chrome and Firefox.', 'Merge pull request #539 from spicyj/doc-anchors-again\nMake doc headers clickable again', "Merge branch 'chenglou-classSet'\ncloses #463", 'docs classSet semicolons missing', 'docs highlight className and htmlFor transforms', 'Merge pull request #495 from syranide/fixutils\nutils.* is now used everywhere', 'Merge pull request #565 from chenglou/className-htmlFor\ndocs highlight className and htmlFor transforms', 'Community round-up #11', 'Update jekyll to 1.3', 'Fix pagination', 'Put nav data in "_data"\nNew in Jekyll 1.3 - http://jekyllrb.com/docs/datafiles/', "Make ReactEventTopLevelCallback-test pass\nThis module-level mock() seems to have been interfering with other tests (26 specs failing). We don't have any other tests that do a module-level mock() so I'm going to assume it isn't supported in the open-source test runner right now. I changed it so only ReactEventEmitter.handleTopLevel is mocked; doing so made ReactEventEmitter complain that TopLevelCallbackCreator wasn't defined so I switched the ReactMount references to use React directly so that ReactDefaultInjection would kick in properly.\nWith this, all the tests pass.", "Don't mutate passed-in props\nDepends on #575; fixes #570.  Now we'll be in trouble if someone tries to share objects between calls to getDefaultProps but that was already true of getInitialState and I haven't heard any complaints there.\nThis is the same number of allocations as before; we're just copying props in the other direction. (In any case, the copy happens only on mount and there are a couple dozen costlier things we're doing already at that time.)", 'Add explination of autoBind to DOM Event Listener tip', 'Merge pull request #577 from stillmotion/master\nAdd explination of autoBind to DOM Event Listener tip', "autoBind -> Autobinding\nWe don't use the term autoBind anywhere any more.", 'Merge pull request #578 from spicyj/patch-2\nautoBind -> Autobinding', 'order object properties consistently', 'remove transaction argument from componentWillReceiveProps', "Use this.getDOMNode() instead of last argument of componentDidUpdate\nContext is adding another argument that shifts all of them by one. Since we can already use this.getDOMNode(), it doesn't really make sense to pass it as an argument to that function.", "Fix context in callbacks\ncallbacks like shouldComponentUpdate, componentDidUpdate, etc. were getting the full, unsanitized context, instead of the one that's been filtered down to only the fields allowed to be visible by contextTypes.", 'Use this.getDOMNode() instead of last argument of componentDidMount', 'Add nextContext to componentWillReceiveProps\nAdd nextContext as an argument to componentWillReceiveProps. We can figure out what to rename the method to later.', 'Ensure ReactPerf always uses a string as a URL', 'Remove rootNode from componentDidMount and componentDidUpdate\nWe can already access the DOM node using this.getDOMNode(). Passing it as an argument was a bad decision.\nPrevious API:\ncomponentDidMount(DOMElement rootNode)\ncomponentDidUpdate(object prevProps, object prevState, object prevContext, DOMElement rootNode)\nNext API:\ncomponentDidMount()\ncomponentDidUpdate(object prevProps, object prevState, object prevContext)', "Don't call utils.traverse in transform\nAccidental change we missed in review of #495.", 'Merge pull request #573 from spicyj/tests\nMake ReactEventTopLevelCallback-test pass', 'docs select value to control chosen option', 'Mock modules properly in test runner\nAs an added bonus, the jasmine web interface now groups tests by file.\nTest Plan:\ngrunt test passes on b2507066, the parent of 566f8b2e (which committed a workaround for buggy module mocking).', 'Have faith in var hoisting', 'Merge pull request #584 from spicyj/mock\nMock modules properly in test runner.', 'Add back mocking removed to make ReactEventTopLevelCallback-test pass.\nThis is a partial reversion of commit 9937f0c8bd.', 'Merge pull request #586 from benjamn/reinstate-ReactEventEmitter-mocking\nAdd back mocking removed to make ReactEventTopLevelCallback-test pass.', 'Move owner off of props', 'Merge pull request #575 from spicyj/owner\nMove owner off of props', 'Minor spelling correction in docs', 'Allow running one spec/suite in the web interface\nThis is the proper way to make it filter the spec list:\nhttps://github.com/pivotal/jasmine/blob/1_3_x/spec/runner.html\nI submitted the jasmine-jsreporter change as a pull request here:\nhttps://github.com/detro/jasmine-jsreporter/pull/2\nFixes #563.', 'Remove reference to old browser logger\nThe file was removed in 37bb9b76aba0deb445874273b93955ffb1c18bf8; this was giving a 404.', "'getElementsByClassName' doesn't exist in IE8\nFixes #532.", "Don't use .returnValue if .defaultPrevented exists\n.defaultPrevented exists in IE9+. I checked in IE9, Chrome, and Firefox that it does default to false.\nFixes #527.", 'ReactErrorUtils: In prod, just return the original\nThis will save a stack frame (nice when in a debugger) and presumably be a bit faster.', 'Be resilient to fn.name not existing in IE\nFixes #516.', "Update commoner to 0.8.8 for Windows support\nbenjamn/commoner#44 fixed commoner to work on Windows when module path relativization isn't used; with this, the jsx binary should work properly on Windows (though jsx-internal still won't).\nFixes #316, fixes #391, fixes #567.", 'Merge pull request #601 from spicyj/commoner-088\nUpdate commoner to 0.8.8 for Windows support.', 'Merge pull request #589 from balanceiskey/master\nMinor spelling correction in docs', "Merge pull request #596 from spicyj/gh-532\n'getElementsByClassName' doesn't exist in IE8", "Use an iframe to create a testDocument…\ninstead of createHTMLDocument since it isn't fully support by the browsers we care about.\nfixes #606\nfixes #454", 'remove warning comment about createHTMLDocument', 'IE support', 'make docs jsx compiler highlight transpiled js code', 'Polyfill and normalize HTML5 "key", deprecates which and keyCode', 'Changed key from Math.random() to todo.cid\nIt doesn’t make much sense to generate a random key for each todo render, because it will re-draw all todo’s DOM nodes on each model change. I changed it to the unique identifier todo.cid already supplied by the backbone model.', 'Merge pull request #595 from spicyj/old-logger\nRemove reference to old browser logger', 'Merge pull request #594 from spicyj/skip-spec\nAllow running one spec/suite in the web interface', "Less verbose ReactPropTypeLocations logging\nSince we use keyMirror() and invariant() messages are only shown in DEV, we don't have to do manual constant->string translation. Also fixes a few\nundefined keys that just happened to work before.", 'Validate propTypes, contextTypes, childContextTypes\nwho watches the watchmen?', 'ReactPropTypes: add oneOfType to support union types\nSummary:\ne.g.\npropTypes: {\n    foo: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number\n    ]);\n  }\nto do this, I exposed a .weak chainable validator that returns instead of throws, e.g.\nReact.PropTypes.string.isRequired.weak\n  React.PropTypes.string.weak\nwhich returns true or false. Technically, React.PropTypes.string.weak.isRequired also exists, but oneOfType will never call it. Might be useful to people creating custom validators though.', 'Merge pull request #616 from davidhellsing/patch-1\nBackbone example: changed key from Math.random() to todo.cid', 'Merge pull request #610 from chenglou/jsx-js\nmake docs jsx compiler highlight transpiled js code', 'Run lint automatically on Travis (in a matrix)', 'jsx & JSDOM support', 'Merge pull request #593 from spicyj/run-lint\nRun lint on Travis in a matrix', 'Merge pull request #598 from spicyj/gh-516\nBe resilient to fn.name not existing in IE', "Merge pull request #597 from spicyj/gh-527\nDon't use .returnValue if .defaultPrevented exists", 'docs add download links for react-with-addons', 'Merge pull request #599 from chenglou/dl-addons\ndocs add download links for react-with-addons', 'docs remove rootNode for componentDidMount/Update', 'Merge pull request #618 from chenglou/didmout-didUpdate-new\ndocs remove rootNode for componentDidMount/Update', 'Merge pull request #581 from chenglou/docs-select-value\ndocs select value to control chosen option', 'Merge pull request #440 from petehunt/new-taglines\nNew marketing copy', "Merge pull request #537 from hojberg/dont_animate_undefined_children\nReactTransitions: Don't animate undefined children", "Merge pull request #576 from spicyj/immutable-props\nDon't mutate passed-in props", 'docs tips parent-child communication', 'Merge pull request #602 from chenglou/tips-bind\ndocs tips pass arguments to callbacks', 'Remove unused event plugin registrationNamesKeys', 'Tweaks to README\nMost significant change is updating the leading copy to match #440.', 'Merge pull request #625 from spicyj/patch-3\nTweaks to README', 'Add missing license header', 'Fix frontpage example to retain selection', 'Merge pull request #626 from spicyj/getUnboundedScrollPosition-license\nAdd missing license header', 'Merge pull request #609 from subtleGradient/subtlegradient/fixes-ios-crasher\nfixes iOS crasher', 'Fix lint warnings', '[docs] Fix download links to addons builds', 'Fix blog pagination\nI missed this in the Jekyll upgrade.', 'Merge pull request #624 from spicyj/remove-registrationNamesKeys\nRemove unused event plugin registrationNamesKeys', 'Add video at the bottom of the front page', 'Space optimizations for ReactMount.findComponentRoot.', 'Address pull request feedback.', 'Remove unused updatePropertiesByID', 'Merge pull request #630 from spicyj/remove-updatePropertiesByID\nRemove unused updatePropertiesByID', 'Merge pull request #367 from benjamn/findComponentRoot-memory-usage-improvements\nSpace optimizations for ReactMount.findComponentRoot.', "Establish a convention for forcing jsx rebuilds.\nPull request #526 updated the behavior of vendor/constants.js without\nchanging any source files or the bin/jsx-internal script, so files that\nshould have been rebuilt (like utils/tests/ImmutableObject-test.js)\nwere not automatically rebuilt (unless you knew to do grunt clean or\nrm -rf .module-cache manually).\nThis commit allows us to bump a version number when we know the transform\ntoolchain has been altered in a way that will not be visible to\ncommoner/jsx.\nWith this convention, if we reset to an older revision (e.g. during a git\nbisect) and the appropriate cached module files are still in the\n.module-cache/, they can be used without rebuilding. That's why I prefer\nthis approach to just deleting the .module-cache/.\nCloses #104.\nCloses #496.\nCloses #530.", 's/jsxConfig/commonerConfig/g', 'Merge pull request #535 from benjamn/commoner-cache-buster\nEstablish a convention for forcing jsx rebuilds.', "Introduce 'statics' for class specification\nThis moves the static properties off of the root object and into\na 'statics' property. Then they are made available on the constructor so\nthey can be used directly and in mixins.", 'Remove deprecated React.unmountAndReleaseReactRootNode', 'Remove deprecation warning for React statics', "Separate replaceState invariant violations\nIt'd be nice if we knew which error we were hitting when this invariant hit.", '[ReactTransitionGroup] Add onTransitionEnter and onTransitionLeave\nIt is valuable to know when the number of children in a TransitionGroup is going\nto increase or decrease, since we might want to apply extra animations.\nFor instance, when used with overflow:auto, we might want to apply different css\nbased on it overflowing or not - to do this we need to calculate this after new\nnodes has entered and after nodes has been removed.', "Remove support for putting mixins, propTypes, etc. in 'statics'\nThis leaves statics as a way to define static methods and properties\nthat will be accessible on the return value of React.createClass\nwithout changing the current spec.", 'Update package devDependencies', 'Notify travis build results in IRC channel\nIf this gets noisy, we can change to only notify on change.', "Add HAS_POSITIVE_NUMERIC_VALUE to DOMProperty and normalize behavior of null values\nUniformly remove null values, rather than sometimes set/remove, could potentially assign 'null' or 'undefined'", 'Fix ReactDOMTextarea missing "rows" and "cols" attribute, incorrect "size" property', 'Add more useful ES6 transforms to jsx-internal.', 'corrections', 'NEW grunt complexity reporting task', 'filter out tests from complexity report', 'fixes test runner for IE8', 'bump webdriver timeouts\nfixes #634\nfixes #551', 'Use depth (not owner) to check for root components\nFixes #557.', 'Merge pull request #617 from subtleGradient/subtlegradient/complexity-task\nNEW grunt complexity reporting task', 'Merge pull request #635 from subtleGradient/subtlegradient/fixes-webdriver-test\nfixes webdriver issues', "Merge remote-tracking branch 'spicyj/depth-not-owner'", 'Followup fix for lint', 'Merge pull request #636 from cpojer/rest-parameters-react\nAdd more useful ES6 transforms to jsx-internal.', 'Revert "Don\'t mutate passed-in props"\nThis reverts https://github.com/facebook/react/pull/576\nThis approach mutates the default props for the instance on each update,\nwhich causes incorrect behavior. discussed with @balpert. can look into\ncloning but this unbreaks.', "Bump version of wd\nwd 0.2.2 gives TypeError: Cannot call method 'jsCondition' of undefined since #551; 0.2.6 is the latest and works so switch to that.", "Nodes that have had their child removed already, but then get given a new one no longer bug-out.\nIn the case of having an animated node which is, after the leave-transition has been activated, then re-added in a render call causes React to 'break'.  This is especially noticeable if you spam to removal and re-addition of an item in a ReactTransitionGroup.\nThis fix simply stops the leave transition and restarts the enter transition.", 'Updated the animation-fix to account for transitionEnter being false.', 'Merge pull request #592 from spicyj/guard-fn\nReactErrorUtils: In prod, just return the original', 'first work: DEV\nfix invariant\nGet browserify working\nremove dead code elimination step since it is not needed due to minifier\nuse industry standard NODE_ENV', 'muffinification', 'react-core npm module', 'update npm-react-core package.json', 'response to code review', 'revert muffinize :(', 'rename to  with associated warnings', 'rename to  with associated warnings', 'version bump to 0.8 to get on top of react.js', 'update README', 'Version bump, make tests work', 'Update react package readme', 'Move npm-react-core to npm-react, fix tasks accordingly', 'Fix botched rebase', "Bump version to 0.9.0-alpha\nThis is trunk, which will be 0.9. We'll have to cherry-pick this whole\nthing into a 0.8 branch.", "Fix scrollLeft/scrollTop warning in latest Chrome\nChrome gives the warnings\nbody.scrollLeft is deprecated in strict mode. Please use 'documentElement.scrollLeft' if in strict mode and 'body.scrollLeft' only if in quirks mode.\nbody.scrollTop is deprecated in strict mode. Please use 'documentElement.scrollTop' if in strict mode and 'body.scrollTop' only if in quirks mode.\nthe first time getUnboundedScrollPosition is invoked. This fixes it. (All modern browsers support pageYOffset; IE 8 doesn't but works properly with document.documentElement.scrollTop except in quirks mode which React doesn't support.)", 'simplify travis script', 'enable IE browser testing in travis', "secure tokens aren't available for pull requests\nNow you can use the saucelabs jazz locally also.", 'new grunt test:full task tests in many browsers\nMoved the travis specific stuff back into the travis file', 'run tests in old iOS, but allow failures', 'define public saucelabs info for everything to use', 'iOS is failing again. Will debug separately', 'tests fail in Safai now. unblocking for now.\nAdd these back in as build blockers once those issues are fixed.', 'combine iOS and IE matrix tests', 'PICK ALL THE NITS!!!1!', 'sets each IE separately for now', 'move sauce labs config out of the Gruntfile', 'fix lint', 'enable code coverage and code complexity reports', "removed complexity report until it's fixed", 'Merge pull request #628 from subtleGradient/subtlegradient/travis-task-cleanup\nadd browser testing to travis', 'Fix lint error (unused variable)', 'Update highlighted lines in tutorial\nMinor issue, but I found it distracting that the highlighted lines were not accurate. I believe this fixes them up.', 'Merge pull request #646 from spicyj/lint2\nFix lint error (unused variable)', "Merge remote-tracking branch 'syranide/textarearows'", 'Clean trailing space and lint', 'Make travis quieter on IRC', 'Merge pull request #648 from bricooke/patch-1\nUpdate highlighted lines in tutorial', 'rename this tip to be less confusing\nUsing props to initialize state is completely fine; the issue is using state as a "cache" for values calculated based off of props. This title makes it more clear.', 'fixing capitalization', 'Improving never seen error message\nRemoving repeating "support it" and fixing camelCase method name', 'match -> test\nUsing RegExp method test because this is what is wanted', 'Use rest parameters whenever it makes sense.', 'Add loop property', 'Fix Merging propTypes, contextTypes, and childContextTypes\nThis fixes merging of propTypes, contextTypes, and childContextTypes so that we actually merge (instead of only taking the component or last mixin).', 'Fix SelectEventPlugin\nmouseup was not fired when context menu showed, so select events stopped being fired.', 'Move version-check task into own file\nGruntfile.js is really messy :(', 'Check src file for version-check task\nThis lets the task run stand-alone without building', 'Merge pull request #637 from cpojer/use-rest-params\nUse Rest Parameters where it makes sense', 'URL -> url', 'Merge pull request #653 from fabiomcosta/patch-3\nmatch -> test', 'Merge pull request #651 from fabiomcosta/patch-2\nImproving never seen error message', 'Merge pull request #657 from zpao/grunt-version-check-cleanup\nGrunt version check cleanup', 'Fix typo (ot -> to)', 'Fix typo in comments (ot -> to)', 'test case for ReactTextComponent rootID escaping', 'fixes ReactTextComponent rootID unescapedness', 'Merge pull request #670 from subtleGradient/subtlegradient/escape-the-things\nthe things, escape them', 'Update npm-react error to point to autoflow', 'Update npm-react readme to point to autoflow', 'Upgrade recast dev dependency to v0.5.6.\nPaving the way for source maps.', 'Merge pull request #661 from benjamn/upgrade-recast\nUpgrade recast dev dependency to v0.5.6.', 'Upgrade populist dependency to v0.1.6.\nThis reduces the time taken by grunt populist:test from 7s to 550ms,\nwhich should make @spicyj especially happy.\nRelevant commits from the populist and ast-types repositories:\nhttps://github.com/benjamn/populist/commit/9863ad16c0753f714fdb83007515637511c346d6\nhttps://github.com/benjamn/ast-types/commit/dabef2a4ac48ebdb5c76baf1fb94f4997b6484ac', 'Merge pull request #672 from benjamn/upgrade-populist\nUpgrade populist dependency to v0.1.6.', 'adding note about initializing state w/ props', 'changes as requested', 'one liner', "A new helper for tests: createHierarchyRenderer\nWe aren't using this in any of the React tests, but we've found it\nuseful testing product code.", 'Tutorial template markup needs a reference to jquery for the ajax calls\nfrom step 13 onwards.', 'Merge pull request #674 from squidsoup/tutorial-jquery-src\nDocumentation (minor): template missing jquery reference', 'Merge pull request #650 from jaredly/patch-1\nrename this tip to be less confusing', 'Merge pull request #668 from nicholasbs/fix-docs-typo\nFix typos', 'docs section for non-dom attributes\nAlso added documentation for dangerouslySetInnerHTML.', 'docs add input attrs for Dom Differences', 'Merge pull request #675 from chenglou/special-attrs\ndocs section for non-dom attributes and more in dom differences', "Add starter-kit zip files to repo\nThese should be included so that anybody can build and update the docs\nwith as little confusion as possible.\nI've left the directory in .gitignore so additions need to be\nintentional as part of a release.", 'Update readme for 0.5.2', 'Changelog, blog post for 0.5.2, 0.4.2', 'Add newest starter-kit downloads to docs', 'Update AUTHORS for 0.8', 'Fix npm-react build task, add to release', 'Update materials for 0.8.0', 'v0.8 blog post', '0.8 starter kit', 'docs make all link start with /react/docs', 'Do not automatically select other options\nFor , value is an array and should not be\nconverted to a string.', 'Fix a perf issue of \nindexOf was used inside a loop. Use an object and\nhasOwnProperty instead.', 'Change my canonical e-mail address in .mailmap', 'Merge pull request #673 from quark-zju/fix-select-multiple\nSome options cannot be selected alone in ', "Consolidate ID Attribute Markup Generation\nWe have this really nice method for safely creating markup for an HTML\nattribute, DOMPropertyOperations.createMarkupForProperty(...). Let's\nuse it to create the ID attribute markup, too.", 'Add createMarkupForID\nThis is a follow-up the to previous commit and does two things:\n\nMoves ReactMount.ATTR_NAME to DOMProperty.ID_ATTRIBUTE_NAME.\nAdds DOMPropertyOperations.createMarkupForID and uses it.\n', 'A new prop type for React Components\nSince we can use props to pass React Components, we should have a better way of validating these props than just object. Having a prop type component will allow us to safely assume that the passed prop IS a component.', 'Community Round-up #14', 'Simple HTML to JSX converter, built during Hackathon 40 at Facebook.\nSee /react/html-jsx.html. Not directly linked from the site yet as there may still be some minor issues with it.', 'Added property to non-standard attributes\nFixes issue #655', 'Merge pull request #691 from Daniel15/hackathon40-htmltojsx-master\nSimple HTML to JSX converter', 'Fix "Dynamic Children" example', 'Upgrade envify dependency to v1.0.1.\nThis version uses Recast for source transformation:\nhttps://github.com/hughsk/envify/pull/4', 'Merge pull request #662 from benjamn/replace-envify\nUpgrade envify to a version that uses recast.', 'Document the Diff algorithm\nWe often refer to it but never did actually explain it.', 'Use feature detection and more robust recovering of whitespace for innerHTML in IE8', 'Merge pull request #411 from vjeux/diff_algorithm\nDocument the Diff algorithm', 'Merge pull request #692 from loganfynne/master\nAdded property attribute to non-standard attributes', 'Community Round-up #12', 'Merge pull request #686 from vjeux/community_12\nCommunity Round-up #12', "Fix html-jsx compiler\nIt changed React Playground to add a required props but unfortunately didn't update the call sites of the front-page. I don't think it should be required so I'm just making it optional and providing the correct default value.\nTest Plan:\n - Open the front page and make sure examples are working\n - Open /react/jsx-compiler.html and make sure it is working\n - Open /react/html-jsx.html and make sure it is working", 'Merge pull request #698 from vjeux/fix_compiler\nFix html-jsx compiler', 'typo', 'Merge pull request #699 from vjeux/fix_typo\ntypo', 'Merge pull request #684 from syranide/ie8dangerousinnerhtml\nUse feature detection and more robust recovering of whitespace for innerHTML in IE8.', 'Merge pull request #607 from syranide/html5key\nPolyfill and normalize HTML5 "key", deprecates which and keyCode', "Merge pull request #642 from Cartas/master\nReactTransitionGroup can handle components being re-added before 'leave' transition has completed.", "Note about react's version on the talk, since somethings have already changed since then", 'Removed unnecessary cleanup in isEventSupported', 'Adding note about onScroll on IE8', 'updating text as suggested by @petehunt', 'language update as suggested by @petehunt', 'Merge pull request #703 from fabiomcosta/onscroll-doc-ie8-note\nAdding note about onScroll on IE8', "Merge pull request #701 from fabiomcosta/react-video-version-note\nNote about react's version on the video talk", 'Merge pull request #702 from syranide/lessmice\nRemoved unnecessary cleanup in isEventSupported', 'Add a talks section to the docs', 'Merge pull request #704 from vjeux/talks_doc\nAdd a talks section to the docs', 'docs remove video at the bottom', 'Merge pull request #705 from chenglou/rm-vid\ndocs remove video at the bottom', 'Update README.md', 'transferPropsTo should never transfer the key property', 'Merge pull request #713 from syranide/nokeytransfer\ntransferPropsTo should never transfer the "key" property', "Respect 'key' prop for object identity\nNow when a key prop appears, its value is always honored. This means that in the root component or as an only child, changing key will cause remounting; in a children object, the key prop will be joined with the object key to form a two-part key.\nFixes #590.", 'Make shouldUpdateReactComponent key logic clearer\n...and inline getComponentKey into traverseAllChildren.js.', 'Extract out wrapUserProvidedKey for clarity', 'Use innerHTML not innerText in test', "Merge pull request #591 from spicyj/mount-key\nRespect 'key' prop for object identity", 'Error message for using refs outside of render() is difficult to understand', 'Adjust params', 'fix params', 'Add unit test for transferPropsTo, "key" should never transfer', 'Merge pull request #695 from luigy/patch-1\nFix "Dynamic Children" example', 'Fix npm react having wrong version dependency for envify', 'Make controlled components and bubbling work in IE\nFixes #708.\nTest Plan:\nIn IE9, tested a controlled text input with the event handler on a containing element, as in the fiddle linked in the original issue. Also tested a controlled radio button as the logic there differs within ReactDOMInput. In both cases, I was able to interact with the controls.', 'Fix a typo in the working-with-the-browser docs', 'Add invariant to check getInitialState return value. Fixes #397', 'Allow changing transitionLeave from false to true\nFixes #724.', 'Merge pull request #722 from wincent/typo-fix-01\nFix a typo in the working-with-the-browser docs', 'Merge pull request #728 from spicyj/gh-724\nAllow changing transitionLeave from false to true', 'Add SyntheticDragEvent with "dataTransfer" property', 'Polyfill/normalize autoFocus across all browsers', 'Added max line length = 80 for jshint', 'Escape component keys used in reactid', 'Merge pull request #729 from syranide/dragevent\nAdd SyntheticDragEvent with "dataTransfer" property', 'Merge pull request #714 from syranide/escapekey\nEscape component keys used in reactid', 'Merge pull request #700 from syranide/100%autofocus\nPatch missing autoFocus-support in older browsers', 'Merge pull request #730 from syranide/lint80\nAdded max line length = 80 for jshint', 'Merge pull request #716 from bitshadow/hotfix\nIssue #383 : Error message for using refs outside of render() is difficult to underst...', 'Merge pull request #717 from syranide/testkeytransfer\nAdd unit test for transferPropsTo, "key" should never transfer', 'docs add warning to add jsx pragma', 'Merge pull request #732 from chenglou/doc-pragma\ndocs add warning to add jsx pragma', 'Use explicit $.ajax dataType and add error callback', 'Add a warning about the @jsx declaration', 'Merge pull request #734 from ivan/tut-jsx-header\nTell user to keep the @jsx declaration at the top of the script', 'console.log -> console.error', 'Merge pull request #733 from ivan/master\nUse explicit $.ajax dataType and add error callback', 'Minify both before and after browserify', 'Switch to using uglifyify', 'Move initial $.ajax out of getInitialState\nWe want to encourage people to make pure getInitialState functions.', 'Merge pull request #737 from spicyj/docs-ajax-state\nMove initial $.ajax out of getInitialState', 'Merge pull request #736 from spicyj/minify-before-browserify\nMinify both before and after browserify', 'live_editor.js using deprecated function\nunmountAndReleaseReactRootNode -> unmountComponentAtNode\nbreaks html-jsx.html', "Don't return null children from flattenChildren\nThis simplifies ReactMultiChild a little bit and will make it more practical to coalesce adjacent text strings.", 'Community Round-up #13', 'Merge pull request #687 from vjeux/community_13\nCommunity Round-up #13', 'Merge pull request #739 from jhiswin/master\nlive_editor.js using deprecated function\nFixes #738 #666', 'Update parent/child communication tip', 'Merge pull request #746 from petehunt/tip-update\nUpdate parent/child communication tip', 'docs tips expose component function', 'Merge pull request #623 from chenglou/tips-communication\ndocs tips parent-child communication 2', 'Make React website work in IE8\nFixes #406.\nEmpty conditional comment is for http://www.phpied.com/conditional-comments-block-downloads/.', 'Merge pull request #749 from spicyj/docs-ie8\nMake React website work in IE8', 'docs tips small refactorings', 'Merge pull request #750 from chenglou/docs-clean\ndocs tips small refactorings', "IE8 style fixes\n\nAdd html5shiv so that HTML5 elements like header, footer, etc can be styled\nRemove a couple uses of :first-child/:last-child which IE8 doesn't support\n", 'Merge pull request #752 from spicyj/docs-ie8-css\nIE8 style fixes', "Making 'native DOM' nodes more explicit in documentation", "Merge pull request #753 from vjeux/virtual_dom_docs\nMaking 'native DOM' nodes more explicit in documentation", "Add onMouseOver and onMouseOut events\nFixes #340.\nTest Plan:\nPorted @danielstocks's jsfiddle (linked in the issue) to React and the hover effect worked properly.", 'Upgrade codemirror and enable line wrapping\nFixes #678.', 'docs remove link to wiki page\nAlso some minor writing changes.', 'Merge pull request #758 from chenglou/docs-kill-wiki\ndocs remove link to wiki page', 'Merge pull request #755 from spicyj/cm-scroll\nUpgrade codemirror and enable line wrapping', "Add info about dev vs. prod builds\nAlso moved the dev builds first because that's what most people will want.", 'Merge pull request #763 from spicyj/gh-762\nAdd info about dev vs. prod builds', 'Add source map support to browser transformer', '.editorconfig: Set line length to 80\nAnd alphabetize properties.', 'Merge pull request #765 from spicyj/editorconfig-80\n.editorconfig: Set line length to 80', "Remove sometimes-confusing console error\nFixes #767. This essentially reverts 738de8c.\nWe could store some sort of flag to silence the console error here but since we've made significant improvements in markup wrapping, this error is fairly rare now. We'll also have validation of node structure soon in #735.", "Don't get selection if no active element\nFixes #694.\nPreviously, it could be that there was an active element that was removed in between mousedown and mouseup.", 'docs tips fix small typo and code', 'Merge pull request #775 from chenglou/doc-fix\ndocs tips fix small typo and code', 'docs better error display for live editor and JSX compiler', 'Merge pull request #779 from chenglou/live-err\ndocs better error display for live editor and JSX compiler', 'Merge pull request #725 from cpojer/getInitialState-invariant\nAdd invariant to check getInitialState return value. Fixes #397.', 'Upgrade commoner build tool to v0.8.12.\nFixes #394.\nFixes #615.', 'React Chrome Developer Tools', 'Merge pull request #784 from vjeux/react_dev_tools\nReact Chrome Developer Tools', 'Merge pull request #783 from benjamn/upgrade-commoner\nUpgrade commoner build tool to v0.8.12.', 'Set target properties explicitly for enter/leave\nFixes #785.', 'Add svg polygon', 'cloneWithProps()\nwhat if you want to change the props of a child? This is my first attempt which lets you clone a child and transfer some custom props to it.\nThere is a fundamental issue with refs here. Since the component is cloned the ref will be broken. And since we can clone multiple times, it might not make sense to support repairing refs.', 'Rework ReactRootIndex generation\nThis had a higher probability of collision than originally thought (bad math). This makes the strategy injectable and provies a\nno-collision version on the client and an unlikely-to-collide version on the server.', 'adding warning about the lack of support for onScroll on IE8\nAdding console.warn about the lack of support for onScroll event on IE8\nRelated to this issue on github https://github.com/facebook/react/issues/631', 'Add display names to controlled components\nThese show up as Unknown in the DevTools. They also wrap a native component,\nso they show up double.', 'Support ReactTestUtils.mockComponent.', "Let components specify tag for ReactTestUtils.mockComponent to use.\nIf you're writing a test that involves a mocked component that normally\nreturns a <li> tag from its render method as the root element, mocking\nit with a dummy <div> probably won't work, so you'll want to set\nMyListItemComponent.mockTagName = 'li';\nThe change to the .mockImplementation line makes sense because\nConvenienceConstructor is more or less synonymous (for these purposes)\nwith the wrapper that was previously used:\nfunction() {\n    // This this used to be null, technically, but\n    // ConvenienceConstructor doesn't pay attention to this anyway.\n    return ConvenienceConstructor.apply(this, arguments);\n  }", 'More tests for 77697f26e32e1625397e6cdcb0defe0a746b7230', "Support clipboardData in IE\nUse the clipboardData object available on window, if it's not available on the event object. This allows us to support including the clipboardData in cut/copy/paste events in IE.", 'Make sure the mock is cleared in the EventEmitter test', 'Further cleanup of isEventSupported', 'Fix WheelEvent incorrectly inverting sign of deltaY', 'Add jsx-requirejs-plugin to the tooling-integration page', 'Remove the require-jsx plugin from the tooling-integration page\nIn favor of the r.js friendly jsx-requirejs-plugin', 'Merge pull request #795 from philix/master\nAdd jsx-requirejs-plugin to the tooling-integration page', "Don't add displayName in transform if already defined\nThis ensures we don't add displayName in the transform if it's already been\ndefined. This is especially important when in strict mode, where duplicate\nproperties in an object is an exception.", 'Merge pull request #721 from spicyj/change-bubble-ie\nMake controlled components and bubbling work in IE', 'Remove mentions of browserify in examples', 'Mention react-art where we talk about SVG', 'Merge pull request #805 from spicyj/docs-mention-react-art\nMention react-art where we talk about SVG', 'Fix typo', 'Merge pull request #806 from spicyj/patch-4\nFix typo', 'Prefer textContent to innerText\nFixes #807.', 'Listen to events on demand\nFixes #381\nThis is a squashed version of https://github.com/facebook/react/pull/462', 'Set currentTarget on synthetic events\nFixes #658, fixes #659.', 'Add gulp-react to Helpful OSS Projects\nAdd @sindresorhus\' JSX task for Gulp to the "Helpful Open-Source Projects" section of the tooling integration docs.', 'Document displayName', 'Merge pull request #811 from xixixao/issue793\nDocument displayName', 'Add link to HTML to JSX converter to “JSX In Depth” page', 'Change “not allowed” back to “discouraged” since you technically can use props called class or for…', 'Added support for 4 extra SVG tags: stop, defs, linearGradient, radialGradient', 'Updated docs with new SVG elements', "throw error when setState's arguments are bad", 'Merge pull request #818 from Daniel15/link-htmltojsx\nAdd link to HTML to JSX converter to “JSX In Depth” page', 'Merge pull request #809 from passy/patch-1\nAdd gulp-react to Helpful OSS Projects', 'Add charCode/keyCode/which to key event docs', 'Merge pull request #643 from spicyj/scroll-pos\nFix scrollLeft/scrollTop warning in latest Chrome', 'Merge pull request #747 from spicyj/currentTarget\nSet currentTarget on synthetic events', 'Aphabetized and wrapped tags/attributes docs', 'Merge pull request #688 from vjeux/community_14\nCommunity Round-up #14', 'benchmark runner', 'Merge pull request #823 from spicyj/key-docs\nAdd charCode/keyCode/which to key event docs', 'Merge pull request #804 from spicyj/examples-no-browserify\nRemove mentions of browserify in examples', "Throw when unmounting , ,  or \nThese are dangerous from a cross-browser perspective. I think supporting efficient reactive updates will be prohibitively\nexpensive and we'll never prioritize it. Instead of killing this capability entirely, let's just throw on the dangerous cases.\nThere will be a few follow-up diffs", "Forbid full-page rendering without server rendering\nFinal part of server rendering cleanup. We should only support full-page rendering when server rendering is involved since\notherwise it's slow and can crash browsers when you start adding and removing document roots. This diff removes the magic\ninnerHTML code (since that will be handled by the server rendering piece) and adds the right assertions and errors.\nBecause there's no longer a dangerous of accidentally nuking the whole page, I removed allowFullPageRender which is yet another\ninternal we no longer need to expose.", 'Change global to window in SyntheticClipboardEvent\nReplace global reference with window in SyntheticClipboardEvent.', 'Cleanup ReactEventEmitter Variable Naming\nMinor follow-up to 80d7d2d0f8ec0f4f1f3c2dbe613f36bda572ce11.', 'Silence console.error in ReactDOMInput-test\nThis test is expected to throw but because of ReactErrorUtils.guard\nwhich uses console.error in DEV it also logged the invariant error\nto the console. This change fixes it by temporarily stubbing out\nconsole.error.\nFixes #531', 'Separate Module for Key Normalization\nThis moves key normalization into its own module so that it can be re-used elsewhere.', 'Merge pull request #754 from spicyj/over-and-out\nAdd onMouseOver and onMouseOut events', 'Sync vendored modules from upstream', 'Updated getMarkupWrap.js to include the new SVG elements', 'Add back license header to invariant', 'Merge pull request #764 from spicyj/browser-source-maps\nAdd source map support to browser transformer.', 'Merge pull request #826 from spicyj/invariant-license\nAdd back license header to invariant', 'Merge pull request #819 from mtharrison/add-more-svg-tags\nAdded support for 4 extra SVG tags', 'Add support for onLoad event to ', 'Merge pull request #789 from spicyj/gh-785\nSet target properties explicitly for enter/leave', "Merge pull request #741 from spicyj/flatten-nonull\nDon't return null children from flattenChildren", 'Set event type on enter/leave events\nFixes #444.', 'Merge pull request #774 from spicyj/img-onload\nAdd support for onLoad event to ', 'Bump jstransform version to 2.0.2\nNecessary for JSXTransformer.js to work after 7675611.', 'Merge pull request #827 from spicyj/jstransform-202\nBump jstransform version to 2.0.2', 'Check for selection on keyup instead of deferring\nThis is essentially what we do for the change event in IE8 and IE9 already.', 'Make ReactTransitionGroup work with a null child', 'Merge pull request #808 from spicyj/prefer-textContent\nPrefer textContent to innerText', 'Merge pull request #821 from subtleGradient/subtlegradient/perf-task\nbenchmark runner & comparison tool with grunt commands and travis integration', 'Fix bug in cloneWithProps()', 'Fix react tests', 'Merge pull request #773 from spicyj/select-event-ff\nCheck for selection on keyup instead of deferring', 'Merge pull request #829 from spicyj/transitiongroup-null-child\nMake ReactTransitionGroup work with a null child', 'Merge pull request #768 from spicyj/findcomponentroot-err\nRemove sometimes-confusing console error', 'Merge pull request #772 from spicyj/gh-444\nSet event type on enter/leave events', 'Fix some odd spacing inconsistencies in ReactRenderDocument-test.', "Don't mutate passed-in props, take 2", 'Use proper window object for iframe in enter/leave\nFixes #788.', 'Add display name in more cases', 'Merge pull request #799 from spicyj/display-name\nAdd display name in more cases', "Don't set max_line_length for *.md", 'Warn for common forms misuse', "Revert textContent\nReverts 309a88bcf62c1c64a2b91c0eb753c19209a425b2 because this is causing\nissues internally. I'll try to get a repro soon.", 'Fix URL in displayName description', 'Merge pull request #844 from xixixao/patch-1\nFix URL in displayName description', "Don't use the min build in getting started guide", 'Remove two more react.min.js references', 'Merge pull request #846 from spicyj/docs-nomin\nRemove two more react.min.js references', "Don't tack on EventPluginHub globally", "Merge pull request #757 from spicyj/ng\nDon't tack on EventPluginHub globally", 'Merge pull request #718 from syranide/npmenvify\nFix npm react having wrong version dependency for envify', 'Fix potential memory leak when unmounting\nFixes #781.', 'Spy on purgeID instead of unmountIDFromEnvironment', 'better error message for mergeHelpers and setState', 'Document return value of unmountComponentAtNode', "Don't store mount image on component instance", 'Merge pull request #850 from spicyj/docs-ref-unmount\nDocument return value of unmountComponentAtNode', "Merge pull request #640 from spicyj/immutable-props-2\nDon't mutate passed-in props, take 2", 'Merge pull request #786 from spicyj/gh-781\nFix potential memory leak when unmounting', 'Add --harmony option to jsx.', "Merge pull request #771 from spicyj/gh-694\nDon't get selection if no active element", 'Merge pull request #778 from syranide/flipwheel\nFix WheelEvent incorrectly flipping sign of deltaY', 'Merge pull request #780 from syranide/newhasevent\nFurther cleanup of isEventSupported', 'Merge pull request #803 from spicyj/gh-788\nUse proper window object for iframe in enter/leave', 'Fix cases where owner warning is shown\nIn b0431a5 I added the check in the wrong place which could cause the warning to be shown because of key changes rather than owner changes like the warning suggests.', 'Add PropTypes.component to demand a single React component.', 'Remove CallbackRegistry', 'Merge pull request #797 from spicyj/should-update\nFix cases where owner warning is shown', 'CSS widows property is unitless\nRef #836', 'More unitless CSS properties\nvolume, stress, pitch-range, richness', 'Refactor unit test', 'Unitless CSS flex properties', 'Document PropTypes.renderable and PropTypes.component', 'Merge pull request #862 from cpojer/docs-proptypes\nDocument PropTypes.renderable and PropTypes.component', 'CSS column-count property is unitless', 'Rewrite mergeKeySets to be O(n) instead of O(n^3)', 'Remove trailing whitespace', 'Fix EnterLeaveEventPlugin Test in jsdom\nThis is a follow-up to #803.\nIn jsdom (used for internal testing), <iframe> does not properly create a default document. This makes the EnterLeaveEventPlugin tests work for jsdom, too.\nOpen source does not need this because it uses PhantomJS.', 'Fix Undefined ownerDocument Fatal in IE8\nThis fixes a JS fatal in IE8 when topLevelTarget.ownerDocument is sometimes undefined.', "Better LinkedValueMixin Warning\nInput elements of type checkbox, hidden, or radio can have a value without onChange. Also, if the input is disabled, who cares that it doesn't have an onChange?", "Upsell dev tools\nPeople probably don't know these exist. Add some information about React\ndev mode as well as a link to the developer tools when using Chrome.", 'add React.PropTypes.any\nadd the ability for React propTypes to accept an any type: someProp: React.PropTypes.any.\nThis is more useful when combined with .isRequired, to enforce that something is passed:\nsomeProp: React.PropTypes.any.isRequired', "Quieter devtools upsell\nCheck that we're not in a iframe before upselling.", 'link to docs in unique key prop warning', 'Merge pull request #865 from jergason/link-to-docs-on-keys-warning\nlink to docs in unique key prop warning', 'Add missing semicolon I missed in #865', 'jQuery Mobile React Example', 'Merge pull request #871 from fernandoacorreia/jquery-mobile-example\njQuery Mobile React Example', "fix propTypes.any.weak test\naccidentally copied over .string.weak and didn't change it", 'Fix #874: Edit thinking-in-react\nAccidentally pulled #874 into gh-pages.', 'Fix #845, Trivial year change\nThis was accidentally pulled into gh-pages.', 'Always call callback in component context\nThis brings these other call sites in line with line 67 of ReactUpdates.js:\ncallbacks[j].call(component);', 'Merge pull request #876 from spicyj/cb-ctx\nAlways call callback in component context', 'Merge pull request #864 from spicyj/transition-key-set-faster\nRewrite mergeKeySets to be O(n) instead of O(n^3)', 'Use fallback data for composition events if necessary', 'Improve "Can only mount when umounted" message', '"checkbox" not "checked"\nI can only assume this was a typo.', 'Merge pull request #878 from spicyj/mount-unmounted\nImprove "Can only mount when umounted" message', 'Add dataType to all $.ajax calls for consistency\nFixes https://groups.google.com/forum/#!topic/reactjs/WWA3ZqU6y4w.', "Remove unnecessary 'NA'-fallback for getTextContentAccessor()", 'Allow null return values for functions to-be-merged.', 'Update docs to mention that you need both es5-shim.js and es5-sham.js to use React with IE8.', 'Fix typo in docs.', 'Make findComponentRoot faster with more nodeCache\nThis is an alternative, less-invasive, fix for #891.\nTest Plan:\nOn http://jsbin.com/OqOJidIQ/2/edit, got timings like\n[75, 56, 30, 36, 27, 27, 28, 32, 27, 27, 28, 31]\ninstead of the old\n[75, 729, 46, 32, 28, 34, 26, 27, 27, 30, 26, 26].\nI also added a counter to getID and saw it was called 3014 times instead of the old 636264. (3014 is the number of nodes (3000) plus 3 calls that happen for the initial render and 1 for each of the 11 renders after that.)', 'Merge pull request #884 from spicyj/tut-datatype\nAdd dataType to all $.ajax calls for consistency', 'Merge pull request #895 from spicyj/zomgperf\nMake findComponentRoot faster with more nodeCache', "Wrap _performComponentUpdate call in try/finally\nFixes #208. If you attempt a state update with a bad state then the render will fail (and the DOM won't change) but if you switch back to a valid state later then it'll rerender properly.", 'Fix "Uncontrolled Components" documentation', 'Rewrite Older Browsers polyfill section for clarity.', 'Fix lines longer than 80 chars', 'Merge pull request #892 from rtfeldman/update-shim-docs\nMention need for es5-sham.js in docs', 'Merge pull request #897 from spicyj/gh-208\nWrap _performComponentUpdate call in try/finally', 'Merge pull request #881 from spicyj/checkbox-not-checked\n"checkbox" not "checked"', 'Remove stray "117", combine lines in polyfill docs', "[docs] Add timezone to _config\nThis way we hopefully won't churn the feed when genereated in\na different time zone (eg France).", '[docs] Remove commented out ghbtns', "throw when using component/component class as mixin\nthrow invariant error to help people new to mixins, so that they don't get misled into trying to mixin components into another component", "Introduce PropTypes.shape\nThis diff introduces PropType.shape which lets you type an object. PropType.object was already defined and since it isn't a function I couldn't really overload the meaning to also accept a type list. Instead of doing hackery, I decided to name it shape.\nAn example where this could be used is style:\npropTypes: {\n    style: PropTypes.shape({\n      color: PropStyle.string,\n      fontSize: PropTypes.number\n    })\n  }", 'Add topContextMenu to the event dependencies for SelectEventPlugin', "Adding 'scope' to list of standard html attributes in react\nscope is used for screen readers, so it would be nice to have. Documentation here: http://www.w3.org/TR/WCAG20-TECHS/H63", "Kill last remaining use of $ in React\nIt's only used here, so let's just inline this and get rid of the additional module.\nAlso it will make people like this guy happy: https://github.com/facebook/react/issues/900\n(of course he might be even more happy if he wasn't using MS TFS....but that's a much bigger diff, and not one I can write...)", 'Document isMounted\nText from @petehunt', "Fix copying files to build/npm-react recursively\nThe intention of the npm-react/**/* rule was to copy recursively but it would have flattened any nested directory structure. I changed the build/modules rule to copy recursively as well, which is necessary for ReactTestUtils to be able to require test/mock-modules.js successfully. (ReactTestUtils isn't included in a clean npm-react build currently but it will be in the future.)\nThis also makes running ART tests more practical.", "Remove unused grunt jsx config options\nSince 5466d0a06382892106da7e237f3330b43a60cc95, the __DEV__ isn't used any more. I can't find anything that uses the debug flag either.", 'Fix double-binding to submit event\nFixes #916.', 'Clarify componentWillMount behavior', 'Merge pull request #928 from nick-thompson/componentWillMount-descrip\nClarify componentWillMount behavior', 'Merge pull request #822 from chenglou/setstate\nbetter error for bad setState arguments and mergeHelpers', 'docs fix back link in Examples', "Merge pull request #852 from spicyj/no-store-mount-image\nDon't store mount image on component instance", 'docs add jsx->js tab to live editors', '.gitattributes to ensure LF line endings when we should', 'Normalize line endings', 'Update homepage for new JSX/JS editor', 'Merge pull request #931 from spicyj/master\nUpdate homepage for new JSX/JS editor', 'Fix ChangeEventPlugin Dependencies\nWhen React moved to attaching top-level event listeners on-demand, not all of the dependencies for ChangeEventPlugin were set. This led to onChange events not firing under certain circumstances. For example, listening to onChange on a checkbox will not work because it relies on onClick (unless something else on the page was listening to onClick).', "Add span property to React DefaultDOMPropertyConfig\nSo that the span attribute on  tags isn't swallowed by\nReact.", 'Properly clear live editor on JSX compile failure', 'Simplify live editor execution logic', '[docs] Tweak frontpage first example and jsx-compiler example', 'Update browserify\nAlso update bundle.transform call site, which now takes options', 'Update other dependencies', 'Upgrade (explicitly) grunt\nThey deprecated the use of some packaged modules and suggest using those modules\ndirectly. http://gruntjs.com/blog/2013-11-21-grunt-0.4.2-released\nLodash was the only use we had.', 'Merge pull request #924 from zpao/update-deps\nUpdate build dependencies', 'Merge pull request #914 from chenglou/jsx\ntweak frontpage first example code', 'Merge pull request #861 from andrewdavey/unitless-css-props\nUnitless css props', 'Adds the filename to JSXTransform error message, making it easier to debug JSX syntax errors.', "Adding current page's url for inline code and code improvement", 'Updating error message to also show part of the code, making it easier to find the error', 'Merge pull request #731 from fabiomcosta/jsxtransform-filename\nAdds filename to JSXTransform error messages', 'Shortened generated "data-reactid"', 'Merge pull request #934 from syranide/minid\nShortened generated "data-reactid"', 'Merge pull request #921 from spicyj/grunt-jsx-no-dev\nRemove unused grunt jsx config options', 'Merge pull request #918 from spicyj/npm-react-rec\nFix copying files to build/npm-react recursively', "Change ReactPropTypes invariant's to console.warn.", 'Perf Test for the propTypes change.', 'Update propTypes documentation.', 'Merge pull request #901 from syranide/80chars\nFix lines longer than 80 chars', "Merge pull request #885 from syranide/natext\nRemove unnecessary 'NA'-fallback for getTextContentAccessor()", 'Change LinkedValueMixin to a util class\nThis makes it clear that .getValue() is not a public API.', 'Merge pull request #748 from spicyj/private-getvalue\nChange LinkedValueMixin to a util class', 'Implement stricter whitespace rules', "Update broken link in 'why react' article", "Normalize internal links in 'why react' article", "Support two-way binding for checkboxes in LinkedValueMixin via 'checkedLink' property", 'Add invariant if both checkedLink and valueLink are provided', 'Fix typo in ReactDOMInput-test', 'Fix comparison in _handleLinkedCheckChange', 'Use Simulate.click instead of Simulate.input for simulating input on\ncheckbox.', "Merge pull request #952 from jeanlauliac/patch-1\nUpdate broken link in 'why react' article", 'Fix typo', "Upgrade Commoner to v0.8.14 for multiple file support.\nSee Commoner's README.md\nfor further explanation of the new functionality.\nAmong other potential benefits, this upgrade allows us to generate source\nmaps as standalone files rather than appending them inline to every\ncompiled module file under build/modules/ (see #833).", 'Merge pull request #480 from syranide/whitespace\nJSX whitespace coalescing rules', 'Merge pull request #959 from benjamn/commoner-multiple-file-support\nUpgrade Commoner to v0.8.14 for multiple file support.', "Don't reconcile children unneccessarily\nWe've talked about this perf optimization for a while now. This prevents us from re-reconciling components that are above the component being\nreconciled in the owner hierarchy.", 'Transfer the key prop in cloneWithProps\ncloneWithProps uses ReactPropTransferer, which ignores the key\nprop. See https://github.com/facebook/react/pull/713\nHowever, this is not the case with cloneWithProps because when someone\nis cloning a component and provides a key, they mean for the clone to\ntake it.', "Codemod for whitespace change\nThis codemods to shim any old-style JSX whitespace so that it renders the same as before.\nBasically it sticks explicit {' '} spaces in where spaces are no longer implicit.", 'Merge pull request #958 from aymanosman/master\nFix typo', 'replace "comments.json" with this.props.url', 'fix incorrect link', 'add hash link for lifecycle section of working with the browser page', 'Fix memory leak with renderComponentToString()\nThis is leaking memory. Move event registration to mount time.', 'Fix references to the old ReactID syntax', 'Refactor Transaction to not rethrow errors\nRethrowing errors makes debugging harder. This makes it so that an exception in a render method can be caught using the purple stop sign (or the blue one, of course) in Chrome.', 'Merge pull request #964 from bobeagan/patch-2\nfix incorrect link', 'Move grunt/config/jsx/jsx.js to grunt/config/jsx.js.\nThere used to be more files in that subdirectory.', 'jsx whitespace codemod utility', 'Remove build/modules/ at beginning of grunt and grunt test.\nLittle-known fact: instead of writing copies of compiled module files to\nbuild/modules/, the bin/jsx-internal script actually just makes hard links\nto the master versions of files in the .module-cache/, so re-populating\nbuild/modules/ is very inexpensive.\nCloses #856.', 'Merge pull request #980 from benjamn/issue-856-delete-build-modules\nRemove build/modules/ at beginning of grunt and grunt test.', 'Upgrade Commoner to v0.9.0 to get rid of output directory locking.\nCloses #957.', 'Merge pull request #981 from benjamn/upgrade-commoner-to-remove-output-directory-locking\nUpgrade Commoner to v0.9.0 to get rid of output directory locking.', 'remove references to react-page', 'Fix docs typo', "Merge pull request #880 from jbaiter/reactlink_checkbox\nSupport two-way binding for checkboxes in LinkedValueMixin via 'checkedLink' property", 'Update 09.2-form-input-binding-sugar.md', 'Fix animation example code\nkey should never be index into an array or there are bugs. Especially in\ntransitions.\nFixes #853', 'Use querySelectorAll instead of getElementsByName in ReactDOMInput.\nWe\'ve been able to use querySelectorAll in all the browsers that we\nsupport for some time now, but we haven\'t been able to test code that uses\nit in the older version of jsdom that we were using, until recently.\nBesides the general goal of modernizing our code, the impetus for this\nspecific change is that I\'m trying to support testing without having to\nrender nodes into an actual document. The .getElementsByName method is\nonly defined on document and only works if the nodes you care about are\ncontained by the document.\nOn the other hand, querySelectorAll works on any DOM node, and allows a\nmore precise selection of just the <input type="radio"> elements that\nhave the appropriate name.\nIE8\'s implementation of querySelectorAll supports attribute-based\nselectors, which is all we need here.', 'Warn for numeric object properties\nNumeric keys will be ordered sequentially in Chrome/Firefox.\nWarn the user if such keys are set on a child.', 'fix grammar mistake', 'Merge pull request #995 from Contra/patch-1\nfix grammar mistake (reconciliation docs)', 'Merge pull request #985 from petehunt/remove-react-page\nRemove references to react-page', "Support children and ref for cloneWithProps()\nWe're not handling these correctly.", "Fix warning for numeric properties\nNumber('.1') === 0.1, and react uses dot-prefixed keys\nfor children. Whoops. Nuke the non-numeric requirement, and just\ncheck a regex. This seems performant enough in micro-benchmarks:\nhttp://jsperf.com/numericlike", 'Add documentation about React.renderComponent\nRecently learned that components passed into React.renderComponent may not be the ones actually mounted. Also learned that it returns the mounted component. Added some documentation describing this.', 'Merge pull request #1001 from kmeht/renderComponentDocs\nAdd documentation about React.renderComponent', 'Switched from browserify to pure-cjs bundler.', 'Update tutorial.md to still have jQuery script tag in later code sample', "s/Mock DOM/Virtual DOM/\nLet's be consistent with the naming", 'More optimizations and fix for JSXTransformer build\n\nDropped dependency on emulation of Node.js native modules.\nAdded deamdify step for JSXTransformer build.\n', 'Merge pull request #973 from syranide/hidethekill\nFix references to the old ReactID syntax', 'Fix boolean attributes as per HTML5 spec', 'Disable CodeMirror smart indentation\nFixes #966.', '[docs] Fix comma splice', 'Add link to meteor talk', 'Update videos.md', 'Add a complementary tools page', 'add example apps page', 'Merge pull request #1010 from petehunt/meteorvid\nAdd link to meteor talk', 'Merge pull request #1011 from petehunt/complementary-tools\nAdd a complementary tools page', 'Update example-apps.md', 'adding a link to react-router', 'Merge pull request #1012 from jaredly/patch-1\nadding a link to react-router', "fix(ServerRendering): execution should be sync\nThe documentation states that React.renderComponentToString\n'uses a callback API to keep the API async', but the\nimplementation is actually synchronous. In order to maintain\nthis contract the callback should always be called\nasynchronously or be change to a synchronous API.\nAs per the discussion of pull request 982, the API should\nbe changed to a synchronous one.", 'Fix use strict warnings', 'Use strict in tests', "[React] Don't attach to document in ReactTestUtils.renderIntoDocument.", 'fix transaction comment from componentDidRender to componentDidUpdate', "add missing 'use strict' to getTestDocument", 'Removed redundant uglification\nRemoved uglification for separate files since it significantly slowed down build (browserify:min became 26 sec instead of 110, same for :addonsMin) while gave economy in ~70 bytes for min+gz version.', 'Merge pull request #963 from bobeagan/patch-1\nReplace "comments.json" with this.props.url in the docs tutorial code snippet', 'Merge pull request #1002 from RReverser/pure-cjs\nSwitch from browserify to pure-cjs bundler.', 'Revert "Removed redundant uglification"\nThis reverts commit 86373d924cd5f5808e3da72ceb2bf171bc9142f0.', 'Revert "More optimizations and fix for JSXTransformer build"\nThis reverts commit f1b7db9aef57d5b2a9264b51e4303540772f847f.', 'Revert "Switched from browserify to pure-cjs bundler."\nThis reverts commit bff9731b66093239dc0408fb1d83df423925b6f9.', 'Merge pull request #1016 from benjamn/revert-pure-cjs-until-0.9\nRevert commits switching from browserify to pure-cjs (on hold until after v0.9 ships).', 'Merge pull request #1005 from jjt/boolattr\nFix boolean attributes as per HTML5 spec', 'Merge pull request #975 from spicyj/transaction-no-catch\nRefactor Transaction to not rethrow errors', 'Update videos.md', 'Merge pull request #1018 from stoyan/patch-2\njoe -> la web speed', 'Add new lines above use strict and keep directives at the top', 'update docs for React.Children', 'more references', 'Use lowercase "string" so that the documentation complies with typecheckers', 'Remove unnecessary catch-clauses for try-finally', 'Merge pull request #967 from syranide/noie8catch\nRemove unnecessary catch-clauses for try-finally', 'Merge pull request #982 from bripkens/async-tostring\nfix(ServerRendering): execution should be async', 'Merge pull request #922 from spicyj/submit-submit\nFix double-binding to submit event', "Set isInTransaction to false even if close throws\nIf a transaction wrapper's closer throws (such as flushBatchedUpdates in ReactDefaultBatchingStrategy) then we still want to properly deinitialize the transaction by setting isInTransaction to false. Without this, we can't reuse the transaction object (in this case, all future batched updates would fail because nested transactions aren't allowed).", 'Merge pull request #1013 from bripkens/lint\nFix use strict warnings', 'React.Children helpers\nAdds React.Children and map(), forEach() and only().', 'Fix cloneWithProps() to allow overriding props\nThis is a clear bug.', 'Add canUseEventListeners to ExecutionEnvironment.', 'The great reorg of February 2014', 'Put ReactWithAddons in browser/', 'Fix version check test', "Merge branch 'reorg'", 'Re-add strict warning to Danger test\nLost in the great reorg', 'Merge pull request #1019 from petehunt/docs99\nUpdate docs for React.Children', 'Make uncontrolled select not set value on update', 'Refactor updateOptions to take value', 'Community Round-Up #15; center embedded tweets', "Don't use  for twitter embeds", 'Center twitter embeds differently. again.\nThis time, just target the iframe. display: table was weird in webkit.', 'Skip assignment, just call updateOptions directly', "Merge branch 'spicyj-uncontrolled-select'\nClosed #907", 'DOMIDOperations -> BackendIDOperations', 'docs(ServerRendering): Reflect renderComponentToString changes', 'Merge pull request #1033 from bripkens/tostring-docs\ndocs(ServerRendering): Reflect renderComponentToString changes', 'Fixed missing lighted line\nThe line number added had been changed from the previous representation of the code fence, but was not highlighted. Therefore, fixed.', 'Add PropTypes.ArrayOf and clean up ReactPropTypes.js', 'build npm-react module, upload to builds page', 'Docs: Fixed reference to unreachable url.', 'Merge pull request #1038 from imagentleman/patch-1\nDocs: Fixed reference to unreachable url.', 'Update broken link in "Why React" post\nThe AngularJS docs have been updated since the post was originally published.\nIt should point to the docs from that date (June 5th).', 'Merge pull request #1039 from imagentleman/patch-2\nUpdate broken link in "Why React" post', 'Actually upload react.tgz to builds server', 'Merge pull request #1003 from rdworth/patch-1\nUpdate tutorial.md to still have jQuery script tag in later code sample', "Cleanup jsx tasks\ndebug and release are now identical, so there's no need to have both.", 'Ensure a pooled class releases back into the pool an instance of that class\nAlso added tests for PooledClass.\nNoticed that some places use ReactReconcileTransaction.release(transaction), when transaction might be of another class, say ReactServerRenderingTransaction (still a Github PR). This catches that.', 'fix comment', 'Build react-tools package on build, upload to builds site', "Remove React from react-tools package\nAll of this is provided by the react package now, so there's no point in having\nit available in multiple places. We may go back on that in the future for\nshipping test utils, but for the time being, this is better for all.", 'Merge pull request #1040 from zpao/react-tools-revamp\nreact-tools revamp', 'Small comment grammar fix in ReactComponent.js', 'remove comma in comment', 'Update complementary-tools.md', 'Add HTML5 srcdoc property for iframes', 'Update complementary-tools.md', 'Add onReset event for forms\nTest Plan:\nTested in Chrome and IE8.', 'Merge pull request #1045 from spicyj/srcdoc\nAdd HTML5 srcdoc property for iframes', 'Add noValidate and corresponding formNoValidate\nFixes #988', 'ReactInjection\nConsolidate everything we can inject in core into one place. Does not expose publicly -- this is an internal moving of shit around.', 'Delete useless shit in ReactMount\nlol', 'Remove references to autoflow, error wrapper\nFixes #1023', 'Merge pull request #1042 from adelevie/master\nSmall grammar fix in ReactComponent.js', 'Update complementary-tools.md', '[Docs] Hide compiled js tab in jsx-compiler.html\nFixes #1049', 'Disable source maps when defineProperty is missing\nFixes #1053.', "Add warnings when accessing properties/methods on unmounted components\nThis creates a membrane around the React component prototype. It warns if you\ntry to access properties on the component before it's unmounted. Before it's\nmounted, it should be considered a descriptor and not an actual instance.\nThe workaround, for unknown types, is to access the constructor using\ncomponent.type which has static methods on it.", 'Merge pull request #1055 from spicyj/jsx-transformer-ie8\nDisable source maps when defineProperty is missing', 'Merge pull request #1021 from spicyj/close-finally\nSet isInTransaction to false even if close throws', 'Refactor ReactMultiChild to not throw errors too\nMissed these when I fixed up Transaction; with the exception of ReactErrorUtils, this should be everything.', 'Merge pull request #1048 from spicyj/form-onreset\nAdd onReset event for forms', 'Disable guarding in ReactErrorUtils\nWith #1021 and #1022, I believe this makes it so React never wraps user code in a try/catch. I left in the calls to ReactErrorUtils.guard because it sounds like FB code finds them useful.', 'Update videos.md\nThere is a better video clip for the Meteor devshop', 'Merge pull request #1046 from spicyj/errutils\nDisable guarding in ReactErrorUtils', '[perf] Measure exclusive render time\nPiece of https://github.com/facebook/react/pull/962', '[perf] Log DOM time\nLog the time it takes to perform all DOM operations', '[perf] Measure flush time\nThis is so we can look at a given flush to determine total time spent in React vs DOM, and which components ended up generating DOM ops.', "[perf] Change how ReactDefaultPerf is injected\nReactDefaultPerf should inject itself when require()'d. This continues to support the ?react_perf use case for logging on initial page load.", 'Rewrite ReactTransitionGroup\nThe key idea here is that you\'re always rendering this.state.children, not\nthis.props.children. When combined with cloneWithProps() this means we can\nkeep them in the DOM as long as we want. We add new children and reactively\nupdate existing ones using setState() inside of componentWillReceiveProps()\nso this.state.children always has the latest versions of components. Since we\nmay be keeping old components around that are no longer in\nthis.props.children we need a way to figure out where they should be inside\nof the combined this.state.children list.  ReactTransitionChildMapping does\nthis for us.\nBased on that infrastructure we can build the interface we always wanted: enter\nand leave lifecycle hooks.\nWhen a component is added to the DOM, componentWillEnter(callback) gets\ncalled. Call the callback when you\'re done animating and componentDidEnter()\nwill be called.\nWhen a component is about to be removed from the DOM,\ncomponentWillLeave(callback) gets called. Call the callback when you\'re done\nanimating and componentDidLeave() will be called and the component will\nactually be removed from the DOM. It won\'t be removed until you call the\ncallback.\nThese also handle "concurrent" changes. If you "stack" enter/leaves of a single\ncomponent before the animation has completed, it will block out all of those\nanimations until the current animation completes, and then finally it will\nanimate 0 or 1 times to get itself into the desired current state. This is what\ndifferentiates componentWillEnter() from componentDidMount().\nThe next step would be to build componentDidReorder().\nI\'ve built ReactCSSTransitionGroup which is identical to the old\nReactTransitionGroup and codemodded the callsites.', "[perf] New ReactDefaultPerf\nSimplified version of https://github.com/facebook/react/pull/962. More goodies coming soon since the inclusive time isn't very helpful right now.", "[perf] Better inclusive measurements\nInclusive time is still not that helpful w/o looking at what actually resulted in DOM ops. However, this is better than what we have today and will serve as a building block.\nI blacklisted everything but composite components -- hopefully that's OK.", '[perf] Wasted time metrics\nThis logs DOM ops for a given reconcile. Based on which components rendered and which ones actually caused DOM updates we can find\nopportunities to add shouldComponentUpdate() methods.', 'add lineClamp, vendor prefixes to CSSProperty.isUnitlessNumber', '[perf] Refactor ReactDefaultPerf and add DOM operation tracing\nSplit the summary functions into a separate module, and add the ability to view a lot of all DOM operations. Removed DOM timing since it was incorrect. Will potentially replace with a\ndropped frame counter in the future.', 'Add seamless and sandbox properties for iframe\nFixes #1057.', 'Assert that event listeners are real functions\nFixes #1028.', 'Merge pull request #1034 from nadeeshacabral/patch-1\nFixed sample code fence highlight', 'Measure root component render in ReactDefaultPerf\nFixes #1074.', "Don't warn about onChange for button inputs", 'Remove old whitespace doc warning\nThis was fixed by #480.', 'Add onError to ReactDOMImg to complement onLoad', "Merge pull request #1076 from spicyj/button-warn\nDon't warn about onChange for button inputs", 'Merge pull request #1069 from spicyj/gh-1028\nAssert that event listeners are real functions', 'Merge pull request #1067 from spicyj/sandbox-seamless\nAdd seamless and sandbox properties for iframe', 'Merge pull request #855 from syranide/onerror\nAdd onError to ReactDOMImg to complement onLoad', 'Merge pull request #1075 from spicyj/defperf\nMeasure root component render in ReactDefaultPerf', 'Merge pull request #979 from jeffmo/jsx_whitespace_codemod_tool\njsx whitespace codemod utility', 'Move jsx_whitespace_transform\nAlso add readme and more details to package.json so it can be published.', 'Remove aural CSS numerial styles from CSSProperties\nThose styles are not implemented in known browsers.', "Updates to perf\nReactDefaultPerf:\n\nShow times as float instead of string. This means they're sortable.\nAdd count columns to all types and average to exclusive time.\nInclude mountComponent where updateComponent time is measured.\nIncrement count on _renderValidatedComponent instead of update.\n\nReactDefaultPerfAnalysis:\n\nReturn counts with all summaries.\n", "un-revert textContent, support multi-line strings in modern browsers\nreverts 23ab30ff873fba816129cafa0c40112dd2ee990d because the issue it fixed doesn't seem to be a problem\nanymore. textContent should be better for more things anyway, as the\noriginal 309a88bcf62c1c64a2b91c0eb753c19209a425b2 indicates. It should be faster because innerText\nrequires layout.\nThis also allows us to use strings with newlines in our rendered output\nand have confidence that they will render the same on subsequent\nre-renders. This is especially useful for es6-style backtick multi-line\nstrings. This will be more consistent as textContent is supported almost\neverwhere so we won't have differing behavior between webkit and\nfirefox.\nsee https://github.com/facebook/react/issues/1080", 'Tweak whitespace README to show other change', 'Rename run to run.js to avoid not-found errors', 'Resolve paths relative to pwd, not npm install dir', 'Run over *.jsx as well', 'Use graceful-fs to avoid EMFILE errors', 'Support transforming multiple files at once', 'Merge pull request #1084 from spicyj/jsx-wh\nVarious fixes to whitespace transformer', 'Avoid innerText for better newline behavior\nFixes #1080.', '[docs] Capitalize all nav titles for consistency', '[docs] Update supported attributes list\nFixes #1008.', 'Add formNoValidate and noValidate too', 'Merge pull request #1022 from spicyj/multichild-throw\nRefactor ReactMultiChild to not throw errors too', '[docs] Add properties that were in 0.8 too\nThis time I actually generated it from the DefaultDOMPropertyConfig file.', '[Docs] Document newly added unitless css props in tips', 'Merge pull request #940 from chenglou/tips-val\n[docs] Document newly added unitless css props in tips', 'Add docs for new prop types', 'Merge pull request #1086 from spicyj/new-proptypes\nAdd docs for new prop types', 'Add missing commas in propTypes docs', '[Docs] Add Object.keys to list of shims', 'Add simple docs on statics to reference section\nFixes #1056.', "Fix IE8 bug during unitless CSS props creation\nIE8 goes into an infinite loop if we add props to the obj we're iterating through.", 'fix tests', 'Merge pull request #1088 from petehunt/fixtests\nFix CSSTransitionGroup tests', "include mixin keys whose values are falsy\nthe previous behavior is to skip mixin keys whose values are undefined, null, '' and (this is a bug) 0. Now, every key is included.", 'Merge pull request #1081 from spicyj/textcontent\nAvoid innerText for better newline behavior', 'Pull in syranides jsx whitespace codemod transform fixes', 'Merge pull request #1094 from jeffmo/jsx_whitespace_codemod_fixup\nPull in syranides jsx whitespace codemod transform fixes', 'Sync out transforms from fb internal', 'Merge pull request #1095 from jeffmo/sync_transforms\nSync out transforms from fb internal', 'Update vendored modules, delete unused\nCloses #1090', 'Fix comma splice', 'Merge pull request #1096 from spicyj/comma-splice\nFix comma splice', 'Add community round-up #16', 'Update AUTHORS for 0.9', 'Update copyright header in browserify config\nPart of #1006, but sooner.', 'Run es3ify over unminified builds\nMakes no difference to react.js and react-with-addons.js; quotes .static in four\nplaces for JSXTransformer.js:\nhttps://gist.github.com/spicyj/aada5352e813752a4667', 'Upgrade Commoner dependency to v0.9.1 to fix mkdirP bug.', 'Fix typo in latest round-up', 'Make ReactWebWorker-test.js less flaky.\nTwo improvements: make sure we set done = true when an error message is\nreceived, so that the test output contains the error message instead of\neventually timing out and displaying nothing useful; and increase the\ntimeout for this particular test from 5000ms (the default) to 20000ms.', 'Merge pull request #1099 from benjamn/make-ReactWebWorker-test-less-flaky\nMake ReactWebWorker-test.js less flaky.', 'Update complementary-tools.md', 'Merge pull request #1097 from spicyj/es3ify\nRun es3ify over unminified builds', 'Add CSSTransitionGroup to addons\nStealing part of #1059.', 'Expose cloneWithProps on addons\ncloses #1066', 'Make transitions example use CSSTransitionGroup', 'Rename dir to npm-jsx_whitespace_transformer', '0.9.0-rc1']v0.8.0 Now installable via npm!
sh
$ npm install react
React

Added support for more attributes:
rows & cols for <textarea>
defer & async for <script>
loop for <audio> & <video>
autoCorrect for form fields (a non-standard attribute only supported by mobile WebKit)
Improved error messages
Fixed Selection events in IE11
Added onContextMenu events

React with Addons

Fixed bugs with TransitionGroup when children were undefined
Added support for onTransition

react-tools

Upgraded jstransform and esprima-fb

JSXTransformer

Added support for use in IE8
Upgraded browserify, which reduced file size by ~65KB (16KB gzipped)
 ['Forward Compatibility w/ WebKit & Blink\nNewer versions of WebKit and Blink will support both document.body.scrollTop and document.documentElement.scrollTop. Therefore, implementing cross-browser compatibility by summing the two will no longer work.\nThis changes React to use getUnboundedScrollPosition so we get the fix and consistency in one change!\nSee: https://rniwa.com/2013-10-29/web-compatibility-story-of-scrolltop-and-scrollleft/', 'Add autoCorrect to list of supported DOM properties', 'Reorder DefaultDOMPropertyConfig\nautoCorrect belongs with the non-standard properties list.', 'Better getUnboundedScrollPosition for windows\nInstead of using browser sniffing, getUnboundedScrollPosition can do\nbetter and not have to depend on the getDocumentScrollElement module.', 'Clear error message when rendering a nonvalid component', "Fix ReactDOMSelection for IE 11\nIE 11 no longer supports the legacy document.selection API.\nTheir implementation of window.getSelection() doesn't support\nthe extend() method, which we were relying on.\nIf the selection is RTL and selection extend is missing, then just\nflip the selection.", 'Oxford comma', 'Script async and defer properties', 'Removing unused useSelect variable.', "Removing 'isEventSupported'", 'Make submit button default value appear correctly\nFixes #473.', 'Fix wheelDelta misspelled', 'Improve error logging for event handlers of React components.\nThis guards every auto-bound method and uses the name of the component and method as guard name.', 'Add support for oncontextmenu in React.', 'Rename nodeContains to containsNode\nConflicts:\n    src/core/ReactMount.js', "Fix failing tests\nTwo of your tests were failing because of commit\n1e71df5399e4c94511e587fa368e7c57a537dc91\nI fixed them by:\n1) Using jasmine's spyOn in ReactCompositeComponentError-test.js\n2) Inverting the function wrapping in the above commit.\nGodspeed.", "ReactTransitions: Don't animate undefined children", 'Transitions: Handle undefined input to mergeKeySet\nGracefully handle undefined input to mergeKeySet.', 'Rename receiveProps to receiveComponent\nThis renames receiveProps and changes it to take the next component to copy props from instead of just the props. That is,\ncomponent.receiveComponent(nextComponent, transaction)\ninstead of\ncomponent.receiveProps(nextComponent.props, transaction)\nThis is a precursor to adding contexts, which will also need to get propagated just like props. This change allows ReactCompositeComponent to override receiveProps and do something like\nthis._pendingContext = nextComponent.context;\nConflicts:\n    src/core/ReactCompositeComponent.js', 'Better error message for renderComponentToString()\nReported on Twitter by AirBnb (who are integrating React into their open-source JS framework). They made a mistake and passed a string in as the\ncomponent. We should have a better error message for that.', 'order object properties consistently', 'Ensure ReactPerf always uses a string as a URL', "Don't use .returnValue if .defaultPrevented exists\n.defaultPrevented exists in IE9+. I checked in IE9, Chrome, and Firefox that it does default to false.\nFixes #527.", 'ReactErrorUtils: In prod, just return the original\nThis will save a stack frame (nice when in a debugger) and presumably be a bit faster.', 'Remove unused event plugin registrationNamesKeys', 'Add missing license header', 'Fix lint warnings', 'Remove unused updatePropertiesByID', "Separate replaceState invariant violations\nIt'd be nice if we knew which error we were hitting when this invariant hit.", '[ReactTransitionGroup] Add onTransitionEnter and onTransitionLeave\nIt is valuable to know when the number of children in a TransitionGroup is going\nto increase or decrease, since we might want to apply extra animations.\nFor instance, when used with overflow:auto, we might want to apply different css\nbased on it overflowing or not - to do this we need to calculate this after new\nnodes has entered and after nodes has been removed.', 'skip Worker test unless the browser supports them', "Disable AnalyticsEventPlugin-test\nIt gets stuck in web worker issues for some reason. I don't particularly\ncare and I don't think any of the changes we merged in should be\nactually breaking it.", 'Update depedencies', 'Rewrite vendor/constants.js to use require("ast-types").traverse.\nMost notably, this new style of transformation gives us access to\nthis.parent.node, which allows us to avoid replacing identifiers that are\nnot actually free variables, such as member expression properties.\nCloses #496.\nConflicts:\n    package.json', 'Better comments for vendor/constants.js.', 'Explicitly require the assert module in vendor/constants.js.', 'first work: DEV\nfix invariant\nGet browserify working\nremove dead code elimination step since it is not needed due to minifier\nuse industry standard NODE_ENV\nConflicts:\n    grunt/config/browserify.js\n    package.json', 'muffinification', 'react-core npm module', 'update npm-react-core package.json', 'response to code review', 'revert muffinize :(', 'rename to  with associated warnings', 'rename to  with associated warnings', 'version bump to 0.8 to get on top of react.js\nConflicts:\n    package.json', 'update README', 'Version bump, make tests work\nConflicts:\n    grunt/tasks/populist.js\n    package.json\n    src/core/React.js', 'Update react package readme', 'Move npm-react-core to npm-react, fix tasks accordingly', 'fixes browserify task transforms support', 'Update shrinkwrap', "Add HAS_POSITIVE_NUMERIC_VALUE to DOMProperty and normalize behavior of null values\nUniformly remove null values, rather than sometimes set/remove, could potentially assign 'null' or 'undefined'", 'Fix ReactDOMTextarea missing "rows" and "cols" attribute, incorrect "size" property', 'corrections', 'Clean trailing space and lint', 'Improving never seen error message\nRemoving repeating "support it" and fixing camelCase method name', 'match -> test\nUsing RegExp method test because this is what is wanted', 'Add loop property', 'Fix SelectEventPlugin\nmouseup was not fired when context menu showed, so select events stopped being fired.', 'URL -> url', 'test case for ReactTextComponent rootID escaping', 'fixes ReactTextComponent rootID unescapedness', 'JSXTransformer now supports IE8\nConflicts:\n    package.json', 'utils.* is now used everywhere', "Don't call utils.traverse in transform\nAccidental change we missed in review of #495.", 'Update npm-react readme to point to autoflow', 'Update npm-react error to point to autoflow', 'Update readme for 0.5.2', 'Changelog, blog post for 0.5.2, 0.4.2', "Add starter-kit zip files to repo\nThese should be included so that anybody can build and update the docs\nwith as little confusion as possible.\nI've left the directory in .gitignore so additions need to be\nintentional as part of a release.", 'Add newest starter-kit downloads to docs', 'Update AUTHORS for 0.8', 'Fix npm-react build task, add to release', 'v0.8.0']v0.5.2 Security release to address CVE-2013-7035. ['update dead jsx link to point to an extant page\nsyntax.html no longer exists, so point people at the in depth article instead.', 'put closing paren in correct place', 'remove dead link\nthe event handling doc page no longer exists', 'Delete throwIf\nDeletes throwIf() in favor of having one way to throw errors: invariant()', 'Batch Child Markup Generation\nSetting innerHTML is slow: http://jsperf.com/react-child-creation/2\nThis reduces the number of times we set innerHTML by batching markup generation in a component tree.\nAs usual, I cleaned up the ReactMultiChild module significantly.\n== Children Reconciliation ==\nWhen a ReactNativeComponent reconciles, it compares currently rendered children, prevChildren, with the new children, nextChildren. It figures out the shortest series of updates required to render nextChildren where each update is one of:\n\nCreate nodes for a new child and insert it at an index.\nUpdate an existing node and, if necessary, move it to an index.\nRemove an existing node.\n\nThis serializable series of updates is sent to ReactDOMIDOperations where the actions are actually acted on.\n== Problem ==\nThere are two problems:\n# When a ReactNativeComponent renders new children, it sets innerHTML once for each contiguous set of children.\n # Each ReactNativeComponent renders its children in isolation, so two components that both render new children will do so separately.\nFor example, consider the following update:\nReact.renderComponent(, ...);\n  React.renderComponent(, ...);\nThis will trigger setting innerHTML four times.\n== Solution ==\nInstead of enqueuing the series of updates per component, this diff changes ReactMultiChild to enqueue updates per component tree (which works by counting recursive calls to updateChildren). Once all updates in the tree are accounted for, we render all markup using a single innerHTML set.', 'Send branch info from travis for continuous builds', 'Updated Changelog for 0.4.1', 'Blog post for v0.4.1', 'Updated Readme for 0.4.1', 'Change ReactMultiChild test to check for innerHTML descriptor.\nNot all testing environments will support setting the innerHTML descriptor. For example, PhantomJS initializes the innerHTML property as not configurable.', 'Fix Danger test failures.\nThe original tests were flawed because the Danger module exploits the fact that all React-generated markup has at least one attribute. This allows the module to extract node names from markup strings faster.\nHowever, the tests were passing in strings of markup with no attributes.\nAlso, this fixes a test failure due to the test trying to set text content into a <tr> which is typically disallowed by browsers (and PhantomJS). This changes it to use <td> instead.', 'Merge pull request #237 from yungsters/master\nFix Test Failures', 'Merge pull request #207 from thisishugo/patch-1\nupdate dead jsx link to point to an extant page', 'Fix incorrect port of standard Python server\n/ht @zpao', 'Merge pull request #241 from gasi/master\nFix incorrect port of standard Python server', 'Fix Reconciling Components to Content\nThis fixes a reconciliation bug introduced by adffa9b0f4128ca4832ddd03fdeca2c9fe434689.\nThe new unit test case exhibits the bug. When a component that has rendered child components is updated to render inline text, we usually:\n# Unmount and remove all child components.\n # Set the new inline text content.\nHowever, with batched child operations, we do not remove all child components until later. The current implementation will set the inline text content and blow away those nodes, causing a fatal when ReactMultiChild later tries to find and remove those nodes.\nThis fixes the bug by ensuring that text content changes are also enqueued.', 'react-rails blog post', 'Use createNodesFromMarkup\nPulled out markup rendering logic for better reuse.', 'Change ref from ReactID to ReactInstanceHandles', 'Merge pull request #245 from chenglou/patch-3\nChange ref from ReactID to ReactInstanceHandles', "Get rid of remaining ReactID references\nIt's gone. Also compacted a bit of code to match the other usage.", 'Fix Github links in examples\nLooks like we link to github.com/facebook/react/ instead of react-js. This just fixes the links\ngrep -r "facebook/react.js" . comes up clean now', 'Merge pull request #249 from pcottle/fixLinks\nFix Github links in examples', 'Fix 404 in Getting Started', 'Community Round-up #6', 'ReactChildren\nInstead of changing traverseAllChildren, keep that around for perf\nreasons (for the hot code path flattenChildren)\nIntroduce ReactChildren.map and ReactChildren.forEach\nwhich mirrors Array.prototype.map and Array.prototype.forEach. This\ninvolves a rename of mapAllChildren', "Support autocapitalize DOM Property\nIt's non-standard, but potentially useful on mobile.\nSee some discussion in google group: https://groups.google.com/forum/#!topic/reactjs/MBcCFohHHHA\nCloses #247", 'defaultValue of 0 now displayed\npreviously treated as empty string when passed to input text/textarea', 'tests for displaying defaultValue of 0', 'separate new tests into respective file', "Hold PhantomJS version at 1.9.0-1.\nAnd don't attempt any chmod magic, either.", 'Merge pull request #261 from benjamn/phantomjs-1.9.0-1\nHold PhantomJS version at 1.9.0-1.', 'Merge pull request #258 from chenglou/patch-3\ndefaultValue of 0 now displayed', "Upgrade phantomjs to 1.9.1-4\nThis fixes the install and permissions issues we've been seeing with\nother 1.9.1-x versions.", 'Make .bind(null, ...) work on autobound methods\nFixes #266.', 'Extract out core ReactEmitter functionality.\nOther environments can make use of some of the logic in ReactEventEmitter.', 'Refactor ReactComponent to have no dependency on the DOM.\nReact is more than just a DOM app library, it is a component\nabstraction library. This enforces that.', 'Merge pull request #268 from spicyj/bind-null\nMake .bind(null, ...) work on autobound methods', 'fix test case for rendering text node number 0', "Move utils out of React that aren't being used\nMany of React's util functions are non-redundant with Facebook's core\nlibraries, so move them out of React into a central location (out of\nthis repo).\nThese files were not getting used by any part of React core, so didn't\nactually belong here anyway.", "Sync modules to vendor/core\nWe haven't done this recently. Nothing has changed significantly, though\nthis does remove some files we weren't using.", 'Fix behavior of ReactDOMSelect\nCloses #250.\nTest Plan:\nWith multiple and not, verified: With defaultValue, the correct option is picked initially, user changes change the selection, and changes to defaultValue have no effect. With value, the correct option is picked initially, user changes do nothing, and changes to value change the selection.\nAlso ran the tests.', 'Merge pull request #251 from spicyj/select-value\nFix behavior of ReactDOMSelect with defaultValue', 'Make getChecked, getValue, handleChange private\nTest Plan: grunt test, enter text in ballmer-peak example without any JS errors.', 'Merge pull request #275 from spicyj/input-private\nMake getChecked, getValue, handleChange private', 'typo fix', 'Allow DOM Nodes in ImmutableObject\nCurrently, ImmutableObject will stack overflow while it tries to recurse and deep freeze all the properties of a DOM node.', 'Merge pull request #277 from stoyan/patch-1\ntypo fix', 'Added PyReact blog post.', 'Fix broken tutorial link and change wording', 'Use script to find remaining 404s. Fix them.', 'Docs: fix header', 'Add CDNJS to docs. Fixes #244', 'Move to using jstransform and esprima-fb npm modules', 'Merge pull request #280 from jeffmo/jstransform_npm\nMove to using jstransform and esprima-fb npm modules', "[react-tools] Add src/ to files\nThis is so it's possible to use the original @providesModule source\nfiles in a toolchain that understands those.", 'Server rendering: rendering of entire document using React.\nSummary: Allows rendering of React into the "document" as opposed to into a\nparticular node. To recap some basics:\ndocument: One level above the  tag - like the browser.\ndocument.documentElement: \nTo support full-page server side rendering, we need to be able to render\neverything including the HTML/BODY tags. This allows that.', 'adding better test - moving execution env module.', 'Merge pull request #289 from jordwalke/ServerRenderingFixes3\nServer rendering: rendering of entire document using React.', "Benchmarking tool for React application performance\nReactAppPerf wraps core methods and logs info from them; there's no real\nUI at this point", 'Explicit and Implicit Keys Need Separate Namespaces\nThere are certain cases where you can end up with a collision with an implicit\nkey (array index) if your explicit key prop is a number. They should use\ndifferent namespaces. Therefore I wrap explicit keys in curlies and implicit\narray indices in brackets.\nI added a simple test case, but another case came up on the mailing list. Where\nundefined entries in an array actually results in an entry and therefore an\nimplicit key.', 'Add rowSpan DOM property', "Add more helpful invariant if you're updating an unrendered component", 'Add missing "use strict" statement to pass lint\nTest Plan:\ngrunt lint; grunt test', 'Community round-up #7\nhttp://fooo.fr:4000/react/blog/2013/08/26/community-roundup-7.html', 'Update the tooling page to include pyReact, react-rails and react-page', 'Fix capitalization of Tooling Integration page', 'Add pagination to blog\n\nAdd pagination\nDisplay full content in /blog\nTruncate Recent posts\nAdd permalink that lists all the blog posts\nAdd spacing and bullet around recent posts to make it more readable\n', 'Support props for  elements.\ncontent, httpEquiv, charSet are all needed. We\'re currently\nworking around this in react-page.\ncontent is the risky one here since we previously supporting using\ncontent to set the text content. We removed support for that in\ne9980412296b6469f39605f48ea527776d7ac718 so the risk is minimal, there\njust might be some lingering old code.\nFixes #292\nTest Plan: Visit data:text/html,<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" charset="utf-8"></head>\n```\nvar m = document.querySelector(\'meta\');\nm.httpEquiv; // Content-Type\nm.httpEquiv = \'foo\';\nm.httpEquiv; // foo\nm.charset; // undefined\nm.charSet; // undefined\nm.getAttribute(\'charset\'); // utf-8\nm.setAttribute(\'charset\', \'bar\');\nm.getAttribute(\'charset\'); // bar\nm.content; // text/html; charset=utf-8\nm.content = \'baz\';\nm.content; // baz\n```', "Allow getInitialState() for mixins\nToday mixins can't easily be stateful because they can't provide getInitialState(). This allows multiple getInitialState() methods as long as they don't return objects that have conflicting keys. In that case, we throw.", 'Sync objMap from upstream', 'Update package dependencies\nSometimes I look at https://david-dm.org/facebook/react', '[docs] Small tweaks as reported in comments\n\nhighlight </form>\nuse correct id in getElementById call\n', "Don't trigger mouse events on native button elements that are disabled\nThis adds a ReactDOMButton module that shims the native <button> React component so it doesn't receive mouseup, mousemove, mousedown, click, or double-click events when its disabled property is truthy.", 'Change vendored module isDOMNode -> isNode', 'Make React batching strategy injectable', 'React.isValidClass\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\nCurrently this works for classes created with React.createClass as well as React.DOM.*.', 'Make ReactDefaultPerf work server-side\nWe were reading from window which was throwing when ReactDefaultPerf was injected.', 'Expose the instance cache\nWe need access to the instance cache for debugging tools. Ideally we want to\nexpose a more stable and supported interface but this seems like a quick win,\nfor now.', 'Tutorial: show how to add showdown.js', 'sync with tastejs todomvc', 'move lifecycle check into replaceProps instead of updateComponent', 'Merge pull request #307 from chenglou/todomvc-director\nsync with tastejs todomvc', "Redirect /docs to the right page\nI've hit this a few times where I want to get to docs so I take whatever\nmy urlbar gives me and strip out the actual page so I can get to the\nroot, however that's a 404.\nThis introduces a super easy way to redirect, which could be handy in\nthe future as docs get rewritten.\nI would much rather do this with a real htaccess file or even just\nhandle 404s gracefully, but that's not currently an option with GitHub\npages (since we generate our own and don't use a custom domain).", 'Merge pull request #312 from zpao/docs-redirect\nRedirect /docs to the right page', 'Merge pull request #305 from brianr/tutorial-explain-showdown\nTutorial: show how to add showdown.js', 'Merge pull request #298 from vjeux/pagination\nAdd pagination to blog', "Fix a few GC leaks in events system\nSummary:\n    - Weren't pooling the Transaction in the batching strategy\n    - Creating a new closure for every event tick due to batchedUpdates()\n    - EnterLeaveEventPlugin creates a new array on each event.\nI wonder if there is more optimization opportunity in accumulate(). Squinting at the fps graph this seems to be faster and waste less memory but it's hard to conclusively tell. I did verify that these were all hotspots though.", 'Remove React.autoBind for real\nThis has been deprecated for a long while now, we should actually remove it.', 'Add Stack Overflow link for doc support page.', 'Update wording', "Add ReactTransitionGroup\nThis introduces , a component that works a lot\nlike Angular's ng-animate.\nThe problem we're currently facing is twofold:\n1. We don't really have a great convention surrounding CSS transitions\n   in React\n2. (harder) we can't animate nodes that are leaving the DOM, as their\n   nodes are instantly destroyed.\nTo solve the first issue I've adopted Angular's convention. It's\nimplemented in ReactTransitionableChild.\nThe second part is what's tricky. To do this I've implemented three modules:\n- ReactTransitionableChild, which can keep its old children around if they\n  change to null\n- ReactTransitionKeySet, which can look at a prev and next set of child\n  keys and merge them in a reasonable way\n- ReactTransitionGroup, which combines ReactTransitionableChild and\n  ReactTransitionKeySet to keep nodes that are leaving the DOM in the\n  DOM until their animations are complete", 'Improve error behavior of Danger.dangerouslyRenderMarkup.\nHTML comment nodes are now interspersed in the original markup list so\nthat we can tell which chunks of markup rendered as more or less than one\nnode, and give a more helpful error message in that case.\nRegardless of how many nodes were rendered, we only take the first one. If\nzero nodes were rendered, then resultList will contain null at the\ncorresponding position.\nIf we decide to revisit the idea of using document fragments, it will be\nvery easy to handle the !== 1 case by returning a document fragment.', "Test cases covering rendering onto document\nThere were some bug reports here, I couldn't reproduce but wrote tests anyway. We should definitely have these.", 'Use dumpCache() rather than manual reset\nI forgot this module existed until @benjamn reminded we had a way to do it.', 'Sync CSSCore from upstream', 'fix formatting and test for correct error', 'Merge pull request #294 from clayallsopp/better_update_msg\nMore helpful message if you update an unrendered component', 'Make mounting on the root of the page work correctly\nThis was apparently only partially supported. We had issues initially mounting if there was no HTML present and\nalso had issues if we had to update HTML that was already there. This diff fixes all of these cases and has\ntests to prove it. NOTE: I removed a test that was actually erroneous. My bad.', 'Remove ReactChildren methods from React object\nThese are not terribly useful on this object and the naming of\nReact.forEachChildren sucked anyway.', 'Warn about unknown property values\nFixes #255.', 'Fix controlled radio button behavior\nFixes #242.', 'Add ReactTransitionGroup to the build', 'Merge pull request #322 from petehunt/build-animations\nAdd ReactTransitionGroup to the build', "Simplify bin/jsx to perform just the JSX transform.\nWe will continue using bin/jsx-internal, well, internally.\nNote that this version no longer respects @providesModule, and it\ndoesn't do anything special with constants like __DEV__, so we can no\nlonger get to claim that bin/jsx can be used to build the core.\nI'm happy about this, personally, because it demonstrates the flexibility\nof Commoner.", 'Merge pull request #267 from spicyj/warn-props\nWarn about unknown property values', 'Merge pull request #281 from spicyj/radio\nFix controlled radio button behavior', "Move else if (DEV) into two statements\nThe minification stage doesn't like else if (__DEV__).", 'Merge pull request #325 from spicyj/elseifdev\nMove else if (DEV) into two statements', 'Merge pull request #323 from benjamn/simplify-bin/jsx\nSimplify bin/jsx to perform just the JSX transform', "Fix backbone todo example bugs.\nFixed:\n- New todo not submitting correctly (page refreshes. preventDefault\nwasn't there.\n- Old checked todo being removed will leave the checkmark on the next\ntodo replacing its position.\n- Cannot change todo (value's now a controlled field).\n- autofocus (should be autoFocus, how ironic given the current\nsituation) on new todo input isn't working. Switched to manual\nfocus() in componentDidMount for now.\n- More consistent breathing space between lines.\n- Gutter at 80.\nAdded:\n- Use todomvc-common base.css. The old one had to change ids to\nclasses. No longer necessary.\n- Give cx a better name and move it in Utils.\n- Trim input upon finishing edit.\n- Remove todo if the new edited value is empty.\n- Submit edited todo value on input blur.\n- README to explain the existence of this example. Being able to\nmaintain a non-compilant version allows nice deviations from the\ntodomvc specs, such as animations, in the future.", 'Merge pull request #324 from chenglou/backbone-todo-ex\nFix backbone todo example bugs.', "Initial build of ReactTransitionGroup\nThis builds ReactTransitionGroup with it's own copy of React, which\nit total clownshoes. This should be technically usable, but definitely\nshould not be used in any production environment.", 'Fix bugs with CSS3 animation event in webkit\nWe were incorrectly sniffing the animationend event.', 'Cache length of NodeList when updating radios', 'Avoid unnecessary array allocations in dangerouslyRenderMarkup.', "Supporting mounting into iframes\nSencha says that separating big components into their own iframes was important for performance:\nhttp://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story.\nToday the only thing stopping us is that events don't bubble to our events system from an iframe. This diff\nlooks at the owning document of the container and adds top-level listeners to it. It should not change\nexisting behavior and should improve our support for this.", "Log unknown props only when we have a match\nLogging every unknown property got very noisy when combined with use of transferPropsTo. I knew this would be a potential issue initially but decided it was worth it. Others disagreed and it's resulting in some confusion.\nThis changes the logging to ensure that we have a potential correction, so only DOMish properties should result in warnings.", "Stop using comments as boundary markers in dangerouslyRenderMarkup.\nJordan warned (and StackOverflow confirmed) that IE8 doesn't respect HTML\ncomment nodes when setting .innerHTML:\nhttp://stackoverflow.com/questions/15006001/inserting-a-comment-in-innerhtml\nThe virtue of the comment strategy was that the parser did all the work of\nmaintaining the boundaries between markup chunks, using comments as the\nboundary markers.  The new strategy (of tagging the first node with a\nspecial attribute) has a similar virtue, since the parser should preserve\nthat attribute only for the nodes we care about, and any rendered nodes\nthat do not have the attribute can be ignored (and complained about by\nconsole.error).", 'Stop transforming class -> className\nUpdate the broken examples too (git grep class=)', "Remove all uses of ExecutionEnvironment.global\nCloses #271.\nAll three of these files are DOM-specific so it should be fine to use window. (ReactEventTopLevelCallback isn't obviously DOM-specific but it calls getEventTarget which is so I think we're fine here.)\nTest Plan:\ngrunt test, tried events in a real browser and they seemed to work still.", "Warn for 'class' and 'for' property names\nAlso stroke-linecap, stroke-width, stop-color, stop-opacity.\nTest Plan:\ngrunt test", 'Merge pull request #287 from spicyj/noglobal\nRemove all uses of ExecutionEnvironment.global', "Add React.version\ngetConfig needs to be a function because grunt.config.data.pkg.version isn't available at the time that grunt/config/jsx/jsx.js is required.\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.", "Add cut, copy, paste\nAdd clipboard events to React.\nFor forms, these shouldn't really be necessary -- the onChange event should handle deletions and insertions. For contenteditables, however, we need to be able to access clipboard data.", 'Fix radio input test in Chrome\nIt seems like the form="pluto" was throwing it off and making the input live outside the form it should have been contained in, causing it to uncheck A. I added it intending to test the form attribute but ended up not needing it so removing it should be fine. (The tests were passing in phantomjs since it doesn\'t support the form attribute and simply ignored it.)\nTest Plan:\ngrunt test; grunt test --debug', 'AUTHORS\nCreated a .mailmap file with all of the associations, then used\ngit + perl to create the AUTHORS file. In theory these should all get\npicked up by npm.\nI used ABC order so it would remain unbiased and automatable. I wish we\ncould go back and fill out the history or at least fix the commits we\nhave from CommitSyncScript, but oh well.\nThis also includes the script I used to automate this process in the\nfuture.', 'Fix input/textarea value of number 0 and false\nPreviously, setting textarea value to number 0 is treated as if value wasn\'t set at all (thus the textarea is cleared from 0 to \'\' upon onChange). false also renders as "false" instead of "" for both defaultValue and value, on textarea and input.', 'Merge pull request #328 from zpao/no-transform-class\nStop transforming class -> className', "Merge pull request #330 from spicyj/warn-class-for\nWarn for 'class' and 'for' property names", 'JSX: Respect original spacing and newlines better\nFixes #335.\nNow this JSX:\n/** @jsx React.DOM */\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <div>\n      Look!\n      <a href=\n        "http://www.facebook.com/">Facebook\n      </a>\n    </div>;\n  }\n});\nproduces\n/** @jsx React.DOM */\nvar HelloMessage = React.createClass({displayName: \'HelloMessage\',\n  render: function() {\n    return React.DOM.div(null,\n      " Look! ",\n      React.DOM.a( {href:\n        "http://www.facebook.com/"}, "Facebook "\n      )\n    );\n  }\n});\nrather than the less-desirable\n/** @jsx React.DOM */\nvar HelloMessage = React.createClass({displayName: \'HelloMessage\',\n  render: function() {\n    return React.DOM.div(null,\n" Look! ",      React.DOM.a( {href:"http://www.facebook.com/"}, "Facebook "      ),\n    );\n  }\n});', 'Merge pull request #274 from chenglou/textarea-patch\nfix textarea value of number 0', 'Merge pull request #205 from spicyj/version\nAdd React.version', "Fix ReactRenderDocument tests\nI am unsure how this was ever supposed to work, as testDocument is guaranteed to be undefined at that point since beforeEach doesn't run synchronously. (I don't think there's any way to have beforeEach halt the tests.)", 'Fix full-page rendering\nCloses #337.\nTest Plan:\nOpened react-page sample without any JS errors. Also ran grunt test after cherry-picking this changeset on top of #338.', "Hard code version instead of doing constant replacement\nThis isn't really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).", 'Merge pull request #332 from spicyj/radio-test\nFix radio input test in Chrome', 'Delete version.js\nThis file is an artifact of a build process long abandoned.', "Use a regular expression to parse out React.version.\nThis fixes a silent failure of the test suite that appears to be due to\nthe call require('./build/modules/React').", 'Merge pull request #344 from benjamn/fix-silent-test-failure-due-to-requiring-React\nUse a regular expression to parse out React.version', 'Merge pull request #339 from spicyj/doc-rendering\nFix full-page rendering', 'Merge pull request #338 from spicyj/fullpage-tests\nFix ReactRenderDocument tests', 'Update wording', 'Ensure selection range exists\nThe selection object doesn\'t always have ranges. In Chrome the\nselection is not updated before \'focus\' event handlers are fired. See\nhttp://jsfiddle.net/t4DYA/ for example.\nThe selection will have rangeCount of 0 and calling getRangeAt(0) will\nthrow error "Uncaught IndexSizeError: Index or size was negative, or greater\nthan the allowed value."', 'Fix lint errors in tests', 'Stop ReactInputSelection breaking in IE8\nIn the IE code path the method assumed that the input.value property\nwas non-null. A quick fix is to use either value or innerText; which means\nthe same code can be shared for textarea and contentEditable components.\nThe code is slightly buggy because the range.parentElement() !== input check\nwill fail for contentEditable components when the focus within a deep DOM tree.', 'Add link to third-party JavaScript (JSX).tmLanguage in docs.', 'Merge pull request #356 from yungsters/master\nAdd link to third-party JavaScript (JSX).tmLanguage in docs.', 'Flesh out reference documentation, more API info', "Fix DOM node warning\nbdf2a9bb124b8fc34120949b322202497741f239 broke the warning that children aren't suppose to be real DOM nodes.", 'Fix PropTypes Documentation', 'Merge pull request #351 from spicyj/api-docs\nFlesh out reference documentation, more API info', 'Make constant propagation smarter about pruning if statements.', "Don't update the docs version by default\nThis was leading to a lot of unnecessary churn in the config file since\ndifferent YAML versions were serializing differently.", 'Merge pull request #343 from benjamn/fix-if-statement-pruning\nMake constant propagation smarter about pruning if statements', 'Give the user a warning when using unoptimized JSX code and send the user to the correct location in the documentation to optimize.', 'Correcting the markdown anchor', "\nremoved creation of the id within the tooling integration doc (expect this to be done by @zpao's pull request)\nremoved the if statement and now always provide a warning message (as proposed by @spicyj)\nimproved the warning message\n", 'Merge pull request #359 from SanderSpies/master\nGive the user a warning when using unoptimized JSX code', 'Add composition events to React.\nComposition events make it possible to detect IME entry/exit.\nhttps://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent', 'Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\nThis is just a better name; we may revisit the name later.', 'Merge pull request #336 from spicyj/jsx-spacing\nJSX: Respect original spacing and newlines better', 'Fix use of "it\'s" in docs', 'Fix typo in doc', 'Docs: Give headers ids for easy linking\nThis gives markdown headers an id so that we can link directly to\nsections of our docs. This is better than the alternative of adding them\nall ourselves.', 'Add ReactDOMSelection module\nAdd a DOM based selection module. This can both be used on its own and\nin ReactInputSelection where our current implementation is lacking.\nThere is still some inconsistency with how IE and modern browsers\nhandle block nodes. Should be OK if we are just getting and setting\nand not trying to set selection based on character offsets.', 'Move composition event to plugin with polyfill\nMove compositionstart/compositionend to a new event plugin.\nAdd a polyfill that listens to key and mouse events and uses selection to\ndetermine which text has changed.', "Fix use of 'window' in CompositionEventPlugin\naccess to window needs to be guarded by ExecutionEnvironment.canUseDOM.", 'ReactLink: two-way binding for React\nThis introduces ReactLink which is a super lightweight way to do two-way binding for React.\nIf you want to use a controlled form input today, it\'s a lot of lines of code:\nhttp://jsfiddle.net/T3z3v/\nLook how many times name is repeated in there. And you have to remember to wire up event handles and pass the right state and\nright event handler for each form field. It\'s really annoying.\nWith ReactLink, you can "link" a form value to a state field. It\'s just some simple sugar around the value prop/onChange\nconvention:\nhttps://gist.github.com/petehunt/6689857\nAh, much nicer! And requires very little core changes or extra bytes. ReactLink just wraps the current value and "request\nchange" handler into a little object and provides some sugar to create some from composite component state.', 'Community round-up #8', 'Redirect docs/reference.html', 'Fix 404s to non-existent API docs', 'Remove animation "example"\nIt was never a real example and shouldn\'t have been checked in.', 'Change spec policy for getDefaultProps to SpecPolicy.DEFINE_MANY_MERGED\nThis will allow multiple mixins for a component to define\ngetDefaultProps and their values will be merged.\nSee also:\nhttps://groups.google.com/d/msg/reactjs/UzSiXw2Vo5s/FxK7AHWOzLMJ', 'Merge pull request #375 from danielmiladinov/master\nChange spec policy for getDefaultProps to SpecPolicy.DEFINE_MANY_MERGED', 'Fix server rendering', 'Fix lint errors including use of global', 'Test that React loads properly in a web worker\nThis should catch top-level uses of window and document, while lint rules catch global.', "Fix reconciling when switching to/from innerHTML\nThere's no way that this can work if _updateDOMChildren doesn't know about dangerouslySetInnerHTML, so tell it.\nFixes #377.", 'Update README.md', 'add line-height to unitless css props, test cases', 'Merge pull request #376 from spicyj/noglobal\nFix lint errors including use of global', 'Add doc link to DOM differences from JSX gotchas', 'Actually make exec work\nThe spec for eval (http://es5.github.io/x15.1.html#x15.1.2.1) says "If Type(x) is not String, return x." and that\'s exactly what\'s happening here -- it gets {code: ...} and does nothing.', 'Merge pull request #386 from chenglou/unitless-line-height\nadd line-height to unitless css props, test cases', 'Merge pull request #384 from chenglou/doc-link\nAdd doc link to DOM differences from JSX gotchas', 'Merge pull request #387 from spicyj/exec-fix\nActually make exec work', 'Sort batched updates by owner depth\nIf we reconcile components higher in the hierarchy they will likely reconcile components lower in the\nhierarchy. If we sort by depth then when we reach those components there will be no more pending state or\nprops and it will no op.', 'Removed "ajaxify" from DefaultDOMPropertyConfig\nThe "ajaxify" attribute is Facebook-specific and does not belong in this repo.', 'Merge pull request #378 from spicyj/html-reconciliation\nFix reconciling when switching to/from innerHTML', 'Copy the nodeContains module from static_upstream.', "ReactNativeComponent -> ReactDOMComponent\nIn an effort to break the DOMy parts of React away from the non-DOMy parts, I'm renaming this.", "Fix isEventSupported in recent versions of jsdom.\nSetting the eventName attribute of an element to the empty string is not\nenough to cause typeof element[eventName] === 'function' in jsdom. The\nattribute value actually has to look like a function body.", 'Speed Owner Access (by over 9000)\nUse a valid identifier (and non-string) to reduce chance of de-optimizing in V8 and Nitro.', 'Use nodeContains where appropriate.', 'Add app id for comments moderation\nThis way we can be notified when any new comment appear in the docs/blog and add moderators', 'Community round-up #9\nhttp://fooo.fr:4000/react/blog/2013/10/03/community-roundup-9.html', 'renamed ReactOnDOMReady module to ReactMountReady\nfix\nrenamed ReactOnDOMReady module to ReactMountReady', "Expose the rendered children before they're actually mounted\nExposing the _renderedChildren property before all the children are fully\nmounted. This allows us to debug a partially mounted tree when the debugger\nhas a breakpoint in the one of the mounting children.\nThis only has a functional difference in the case where mounting throws. This\nwill end up not mounting the component anyway. Any remounting shouldn't be\naffected by this change.", 'Expose bound function, context and arguments\nExposes the bound context, original method and bound arguments for any\nauto-bound methods, for debugging purposes.', "Add select event plugin\nPolyfill 'onSelect' behavior for React.\nUse non-standard 'selectionchange' event rather than 'select' event.\nThis allows us to fire the event when user moves the cursor via arrow\nkeys, and not just when they select multiple chars.\nAdd methods to ReactDOMSelection to make getting current selection\neasier, so we can do a fast check for change without having to\ncalculate char offsets for selection start and end.", 'Add warning when using componentShouldUpdate', 'Speed Key Validation (by over 9000)\nUse a valid identifier (and non-string) to reduce chance of de-optimizing in V8 and Nitro.', 'Move flattenChildren into MultiChild', 'Throw when calling transferPropsTo() on a component you don\'t own\nThis is dangerous because it means that data is flowing into the component from two components, only one of which is the actual "owner". While we may be able to figure out how to\nsupport this someday, let\'s be strict and prevent it for now.', 'React.__internals\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.', 'Sync getActiveElement module from FB.', "Fix SelectEventPlugin\nThere were 2 issues:\nI was reusing event outside the original event handler (activeNativeEvent).\nThis is a bad idea. I've changed deferred dispatch to have an empty object\nas the nativeEvent.\nI didn't handle inputs without .selectionStart (e.g. file inputs). I extracted\na input type check from ChangeEventPlugin and reuse it here.", 'fixed broken link on Community Round-up #9 blog post\ncloses #409', 'Merge pull request #407 from Samangan/master\nrenamed ReactOnDOMReady module to ReactMountReady', "Tweak verbiage about required polyfills\nI found it weird how the es5-shim comment came after the list of functions; now it's before.", "react-with-addons build\nThis creates a new standalone build which should have everything the\ndefault build has, plus a little extra. This is not a sustainable long\nterm solution (we shouldn't make people choose like this) but it fixes\nthe problem we have in the short term.\nThis also removes the terrible react-transitions build. This is better\nanway.\nFixes #369", 'Make sure addons builds are sent to build server', 'Make sure react-with-addons ends up in bower', 'Make sure react-with-addons ends up in react-source gem', 'Add TransitionGroup example', 'Merge pull request #370 from zpao/addons\nreact-with-addons build', "Merge pull request #374 from spicyj/workers\nTest that React loads properly in a web worker.\nMost of this code is open source-only, so I think it's safe to merge without figuring out how to translate it upstream first.", 'Make the injection of ReactPerf work\nThe injection was only evaluated when ReactCompositeComponent was first loaded.\nThis made it impossible to inject a custom measure and the injection pointless.', 'Add displayName for DOM Components', "Set _renderedComponent before it's fully mounted\nFor debugging so that we can inspect the currently rendering tree. I think this\nshould be safe and makes sense since it tried to mount.", 'Make transferPropsTo() message easier to debug\nSummary:\nMade the transferPropsTo() error introduced in\n325322898cc413454feede0201b61da1abe1e67e easier to use to debug.', 'fix namesToPlugins for gcc advanced mode', 'svg properties -> attributes', 'svg: rx/ry for rounded corners', 'svg attributes properly cased when assigned by react', 'Check for null selection\ngetRangeAt(0) will throw on null selection. Add guard in\nReactDOMSelection and DocumentSelection.', 'Better click behavior for ff\nFirefox created onClick events for right mouse clicks. This diff brings behavior on firefox inline with other browsers.', 'Remove DOM mutation listeners\nMutation listeners are known to be slow. Rough benchmarks show text\nchanges are now 50% faster.', 'DefaultDOMPropertyConfig: sort properties alphabetically', 'Merge pull request #419 from piranha/svg-attrs\nsvg properties -> attributes\nFixes #190', "Forcibly wrap SVG nodes with  on creation\nForcing wrapping seems necessary here: I compared a  created within a  with a  created inside an  and they appear to have exactly the same properties with the exception of .parentNode (and .parentElement), yet the former refuses to show up when appended to an  element. As such, I can't find any useful way to write a unit test (testing getMarkupWrap's output doesn't seem particularly useful to me).\nFixes #311.\nTest Plan:\nWith a component that adds a  after mounting (such as http://jsfiddle.net/spicyj/hxFVe/), verify that the circle appears in both Chrome and IE9.", '[docs] Fix a broken link to JSX syntax in README.', 'JSX => #jsx', 'Add bitwise lint escape to DefaultDOMPropertyConfig', "Ensure attribute values are strings\njsdom behavers differently than browsers here and we should ensure\nthat we are consistent. Browsers should be (and are) converting to\na string first, while jsdom doesn't.", 'Standardize prop -> DOM attribute process\nAllow more than strings and numbers to be used as attributes for DOM\nnodes. This removes the special casing for 0 and false that was\nbeing used in ReactDOMInput and ReactDOMTextarea.\nNow we will just toString any object we try to insert into a DOM.\nCloses #422, #372, #302', 'Be consistent with object naming in tests\nThis also fixes line length issues our linter was complaining about.', 'Make sure DOM components work in JSDOM', "Merge branch 'SanderSpies-sspi-dom-attribute-process'", 'Merge pull request #426 from SanderSpies/sspi-fix-jsx-doc-link\nIn-browser JSX warning linked to wrong anchor (should be lowercase)', 'new addons docs\ncloses #403', 'Updated AUTHORS for 0.5\ncloses #414', 'Fix Lint\nEnabling bitwise linting caught another user. Also fixed a semicolon\nmisuse.', 'Use getActiveElement module\nWe had something that did the same sort of protection. The module\ndiffers slightly (returns document.body instead of undefined) but\nlooking at the callers, that should be ok.', 'Enable linting for bitwise operators', 'Update docs with supported tags and attributes', 'bump baseline jstransform and esprima dependency versions', 'Update browserify', 'bump version for 0.5', 'Fix grunt npm:test', '0.5.0 release\nUpdated README, CHANGELOG, blog post', "Fix live editor examples on home page.\nRemember that one time I wrote release notes and said:\n\nThis is a breaking change - if you were using class, you must change\nthis to className or your components will be visually broken.\n\nGood thing I didn't listen to myself!", 'Add clickable anchors to docs headers\nCloses #434', 'docs: remove OUTLINE', 'docs: Delete Mutation Events (onCharacterDOMModified)', 'ReactTransitionGroup example: fix typo and logic bug in handleRemove', 'Update API docs for unmountAndReleaseReactRootNode', 'Make SelectEventPlugin not throw for range inputs\nAccessing .selectionStart on a non-text input will throw (see http://www.w3.org/TR/2009/WD-html5-20090423/editing.html#textFieldSelection), so check that the input has selection capabilities before accessing the property.\nFixes #437.', "Don't reset mouseDown in focus handlers\nFocus fires after mouse down on initial click, so we lost the\nflag when the user initially began dragging on the input.", 'fixed %d in invariant call', 'Fix ReactTransitionEvents detectEvents', 'Fix unmounting components mounted into doc element\nIf we are to unmount a component mounted into a document element we should\nunmount it from document.documentElement and not from document.firstChild which\nis a doctype element in this specific case.', 'Make \'disabled\' MUST_USE_ATTRIBUTE for compatibility with CSS [disabled] selectors.\nWhen a ReactDOMComponent is created with the property disabled: true subsequently setting the property to disabled: false the HTML attribute disabled="true" was being left in the DOM.', 'npm shrinkwrap\nWe should be doing this in the stable branch to ensure fuzzy\ndependencies are met identically on subsequent releases.\nIn this case, browserify had a change in 2.34.3 which resulted in\nJSXTransformer to be a different size. While it was a change for the\nbetter, it was unexpected and not a change we were calling out in the\nrelease.\nThis shrinkwraps to the same versions of packages we had when we shipped\n0.5.0.', 'Update everything for v0.5.1', 'blog post for 0.5.1', "Move heading anchors 50px up to avoid nav bar\nFixes #447.\nWe do this by moving the actual anchored element up in the page without moving the actual text. (Apple uses a similar trick in their framed docs.) Now this looks a bit sillier on smaller screens but it's better overall.", 'Update tutorial to use className', '[docs] Clarify when getInitialState is called.', '"Thinking in React" blog post', 'tutorial: Simplify ajax options\ndataType was unnecessary; mimeType was both unnecessary and wrong in this case. Also removed an unnecessary bind and changed pollInterval to 2000 ms for consistency with https://github.com/petehunt/react-tutorial (faster is nicer if you actually try it out!).', 'Remove jQuery version number from tutorial docs', "Move header link styling out of documentation only\nIt's used in blog posts too. I also constrained it to just the anchor\nclass to avoid any other headers we have.", '"Thinking in React": fix list formatting', 'Use smaller blog images and host directly', 'Community round-up #10', 'move docs tooling from JSX in Depth\nAlso removes the code wrap around the syntax highlighting link.', 'Make state immutable in tutorial (eek)', 'Prevents header anchors from interfering with clickable content.', 'Fixes the name of the component on documentation\nAvatarImage -> Avatar', 'Added clearfix to blog content holder', 'fix doc & example transition opacity from .99 to 1\nThe initial thought was that an opacity animation from 0.01 to 1 causes trouble on some browser. But after testing on opera 12.15, ff 23, ie 10, chrome 30, desktop/mobile safari 7 and chrome android I confirm this works.', 'Merge pull request #362 from mcsheffrey/feat-documentation-cookbook\nReact Tips documentation', 'Community round-up #11', 'Make doc headers clickable again\n...without preventing clicks on other things.\nJust use an <a name="..."> tag that doesn\'t take up any space to make sure that we\'re not covering up something else.\nFor whatever reason, doing position: relative; top: -$navHeight; doesn\'t work and causes the anchor target not to be moved up. This solution works in both Chrome and Firefox.', "Merge branch 'chenglou-classSet'\ncloses #463", 'docs classSet semicolons missing', 'docs highlight className and htmlFor transforms', 'Update jekyll to 1.3', 'Fix pagination', 'Put nav data in "_data"\nNew in Jekyll 1.3 - http://jekyllrb.com/docs/datafiles/', 'Add explination of autoBind to DOM Event Listener tip', "autoBind -> Autobinding\nWe don't use the term autoBind anywhere any more.", 'docs select value to control chosen option', 'Minor spelling correction in docs', 'make docs jsx compiler highlight transpiled js code', 'docs add download links for react-with-addons', 'Fix frontpage example to retain selection', 'Tweaks to README\nMost significant change is updating the leading copy to match #440.', 'Merge pull request #440 from petehunt/new-taglines\nNew marketing copy', '[docs] Fix download links to addons builds', 'Fix blog pagination\nI missed this in the Jekyll upgrade.', 'docs tips parent-child communication', 'fixes ReactTextComponent rootID unescapedness', 'v0.5.2', 'Update readme for 0.5.2']v0.4.2 Security release to address CVE-2013-7035. ['Typo in changelog, update blog leading sentence.\n(cherry picked from commit 9221b15bff61c86b09dece321d4b2ecec2272c85)', 'Update readme for 0.4.0\n(cherry picked from commit ec67076090941287bacb48fcaf43d88cf28518a8)', "Merge branch 'master' into 0.4-stable\nNo need to cherry-pick yet since we've only taken docs changes on master", 'Docs Typo Fix: s/distinciton/distinction\n(cherry picked from commit bf275a909748a1e64ff06934ce0b6f8f285b86f7)', 'One-character typo fix\n(cherry picked from commit 222faf4544731b725c4fcbe1b416b89286275601)', 'fix typos\n(cherry picked from commit 64d72f8c4b1054c97393124d85681f0e168064fa)', 's/pased/passed\n(cherry picked from commit 50a00662cf1d64fa3e4a6f72e454459b0a81cb83)', 'Community Round-up #5\nhttp://fooo.fr:4000/react/blog/2013/07/20/community-roundup-5.html\n(cherry picked from commit 975b5d978f5a560ce0c85457f4979a60e2241334)', 'Allow to execute JSXTransformer outside of browser environment\n(cherry picked from commit 2b9dd04f4d8f48f7cb7fb3885b61679856320ceb)', 'Do not export load in JSXTransformer unless in a browser environment\n(cherry picked from commit 795a84d60fe9b13b195befdc4b2d6a811e8e5eb3)', 'Merge master to 0.4-stable', 'Send branch info from travis for continuous builds\n(cherry picked from commit 20179b79914f1f3c7c3ea0c7ef4625603654634a)', 'v0.4.1', 'Fix incorrect port of standard Python server\n/ht @zpao\n(cherry picked from commit 6f2848f4a6027daf9ba77e2f7f62a563fd96cf1a)', 'update dead jsx link to point to an extant page\nsyntax.html no longer exists, so point people at the in depth article instead.\n(cherry picked from commit 8f55d94d407a445a6f27d007f20421210757d6b8)', 'put closing paren in correct place\n(cherry picked from commit 07427ae9d029a8af89451c43dab65b61c20904ed)', 'remove dead link\nthe event handling doc page no longer exists\n(cherry picked from commit 4ab62a6bd2b38464e129ad95360d9de75c8133b5)', 'Updated Changelog for 0.4.1\n(cherry picked from commit a1f5c1dee7d6f202d8656a2af56dd8b3cdf53793)', 'Blog post for v0.4.1\n(cherry picked from commit 27a1729f6d7e12e291b0643b60af5ccfa38c23c6)', 'Updated Readme for 0.4.1\n(cherry picked from commit c347b720a9ee6009103174cf0ededca6aab070d9)', 'react-rails blog post\n(cherry picked from commit dc06704ec7163d37b60b6ec8796bb01cf476a51c)', 'Fix Github links in examples\nLooks like we link to github.com/facebook/react/ instead of react-js. This just fixes the links\ngrep -r "facebook/react.js" . comes up clean now', 'Fix 404 in Getting Started', 'Community Round-up #6', 'typo fix', 'Added PyReact blog post.', 'Fix broken tutorial link and change wording\n(cherry picked from commit cfe4152b1dba09d95387e62e8bb1f46cdd86c7da)', 'Use script to find remaining 404s. Fix them.\n(cherry picked from commit a558e560bd98446a4876e2feefe640c7cbde1681)', 'Docs: fix header\n(cherry picked from commit cbe86e04b3fdfee584f538e399b91863bd6c0feb)', 'Add CDNJS to docs. Fixes #244\n(cherry picked from commit 3d1cc16a9b143b96b353b7b03c06ca0f7e544304)', "[react-tools] Add src/ to files\nThis is so it's possible to use the original @providesModule source\nfiles in a toolchain that understands those.", 'Community round-up #7\nhttp://fooo.fr:4000/react/blog/2013/08/26/community-roundup-7.html', 'Update the tooling page to include pyReact, react-rails and react-page', 'Fix capitalization of Tooling Integration page', '[docs] Small tweaks as reported in comments\n\nhighlight </form>\nuse correct id in getElementById call\n', "Redirect /docs to the right page\nI've hit this a few times where I want to get to docs so I take whatever\nmy urlbar gives me and strip out the actual page so I can get to the\nroot, however that's a 404.\nThis introduces a super easy way to redirect, which could be handy in\nthe future as docs get rewritten.\nI would much rather do this with a real htaccess file or even just\nhandle 404s gracefully, but that's not currently an option with GitHub\npages (since we generate our own and don't use a custom domain).", 'Tutorial: show how to add showdown.js', 'Add pagination to blog\n\nAdd pagination\nDisplay full content in /blog\nTruncate Recent posts\nAdd permalink that lists all the blog posts\nAdd spacing and bullet around recent posts to make it more readable\n', 'Add Stack Overflow link for doc support page.', 'Update wording', 'Update wording', 'Add link to third-party JavaScript (JSX).tmLanguage in docs.', "Don't update the docs version by default\nThis was leading to a lot of unnecessary churn in the config file since\ndifferent YAML versions were serializing differently.", 'Fix use of "it\'s" in docs', 'Fix typo in doc', 'Docs: Give headers ids for easy linking\nThis gives markdown headers an id so that we can link directly to\nsections of our docs. This is better than the alternative of adding them\nall ourselves.', 'Community round-up #8', 'Flesh out reference documentation, more API info', 'Redirect docs/reference.html', 'Fix 404s to non-existent API docs', 'Add app id for comments moderation\nThis way we can be notified when any new comment appear in the docs/blog and add moderators', 'Community round-up #9\nhttp://fooo.fr:4000/react/blog/2013/10/03/community-roundup-9.html', 'fixed broken link on Community Round-up #9 blog post\ncloses #409', "Tweak verbiage about required polyfills\nI found it weird how the es5-shim comment came after the list of functions; now it's before.", 'fixes ReactTextComponent rootID unescapedness', '0.4.2']v0.5.1 React

Fixed bug with <input type="range"> and selection events.
Fixed bug with selection and focus.
Made it possible to unmount components from the document root.
Fixed bug for disabled attribute handling on non-<input> elements.

React with Addons

Fixed bug with transition and animation event detection.
 ["Fix live editor examples on home page.\nRemember that one time I wrote release notes and said:\n\nThis is a breaking change - if you were using class, you must change\nthis to className or your components will be visually broken.\n\nGood thing I didn't listen to myself!", 'Add clickable anchors to docs headers\nCloses #434', 'docs: remove OUTLINE', 'docs: Delete Mutation Events (onCharacterDOMModified)', 'ReactTransitionGroup example: fix typo and logic bug in handleRemove', 'Update API docs for unmountAndReleaseReactRootNode', 'Make SelectEventPlugin not throw for range inputs\nAccessing .selectionStart on a non-text input will throw (see http://www.w3.org/TR/2009/WD-html5-20090423/editing.html#textFieldSelection), so check that the input has selection capabilities before accessing the property.\nFixes #437.', "Don't reset mouseDown in focus handlers\nFocus fires after mouse down on initial click, so we lost the\nflag when the user initially began dragging on the input.", 'fixed %d in invariant call', 'Fix ReactTransitionEvents detectEvents', 'Fix unmounting components mounted into doc element\nIf we are to unmount a component mounted into a document element we should\nunmount it from document.documentElement and not from document.firstChild which\nis a doctype element in this specific case.', 'Make \'disabled\' MUST_USE_ATTRIBUTE for compatibility with CSS [disabled] selectors.\nWhen a ReactDOMComponent is created with the property disabled: true subsequently setting the property to disabled: false the HTML attribute disabled="true" was being left in the DOM.', 'npm shrinkwrap\nWe should be doing this in the stable branch to ensure fuzzy\ndependencies are met identically on subsequent releases.\nIn this case, browserify had a change in 2.34.3 which resulted in\nJSXTransformer to be a different size. While it was a change for the\nbetter, it was unexpected and not a change we were calling out in the\nrelease.\nThis shrinkwraps to the same versions of packages we had when we shipped\n0.5.0.', 'Update everything for v0.5.1']v0.5.0 React

Memory usage improvements - reduced allocations in core which will help with GC pauses
Performance improvements - in addition to speeding things up, we made some tweaks to stay out of slow path code in V8 and Nitro.
Standardized prop -> DOM attribute process. This previously resulting in additional type checking and overhead as well as confusing cases for users. Now we will always convert your value to a string before inserting it into the DOM.
Support for Selection events.
Support for Composition events.
Support for additional DOM properties (charSet, content, form, httpEquiv, rowSpan, autoCapitalize).
Support for additional SVG properties (rx, ry).
Support for using getInitialState and getDefaultProps in mixins.
Support mounting into iframes.
Bug fixes for controlled form components.
Bug fixes for SVG element creation.
Added React.version.
Added React.isValidClass - Used to determine if a value is a valid component constructor.
Removed React.autoBind - This was deprecated in v0.4 and now properly removed.
Renamed  React.unmountAndReleaseReactRootNode to React.unmountComponentAtNode.
Began laying down work for refined performance analysis.
Better support for server-side rendering - react-page has helped improve the stability for server-side rendering.
Made it possible to use React in environments enforcing a strict Content Security Policy. This also makes it possible to use React to build Chrome extensions.

React with Addons (New!)

Introduced a separate build with several "addons" which we think can help improve the React experience. We plan to deprecate this in the long-term, instead shipping each as standalone pieces. Read more in the docs.

JSX

No longer transform class to className as part of the transform! This is a breaking change - if you were using class, you must change this to className or your components will be visually broken.
Added warnings to the in-browser transformer to make it clear it is not intended for production use.
Improved compatibility for Windows
Improved support for maintaining line numbers when transforming.
 ['update dead jsx link to point to an extant page\nsyntax.html no longer exists, so point people at the in depth article instead.', 'put closing paren in correct place', 'remove dead link\nthe event handling doc page no longer exists', 'Delete throwIf\nDeletes throwIf() in favor of having one way to throw errors: invariant()', 'Batch Child Markup Generation\nSetting innerHTML is slow: http://jsperf.com/react-child-creation/2\nThis reduces the number of times we set innerHTML by batching markup generation in a component tree.\nAs usual, I cleaned up the ReactMultiChild module significantly.\n== Children Reconciliation ==\nWhen a ReactNativeComponent reconciles, it compares currently rendered children, prevChildren, with the new children, nextChildren. It figures out the shortest series of updates required to render nextChildren where each update is one of:\n\nCreate nodes for a new child and insert it at an index.\nUpdate an existing node and, if necessary, move it to an index.\nRemove an existing node.\n\nThis serializable series of updates is sent to ReactDOMIDOperations where the actions are actually acted on.\n== Problem ==\nThere are two problems:\n# When a ReactNativeComponent renders new children, it sets innerHTML once for each contiguous set of children.\n # Each ReactNativeComponent renders its children in isolation, so two components that both render new children will do so separately.\nFor example, consider the following update:\nReact.renderComponent(, ...);\n  React.renderComponent(, ...);\nThis will trigger setting innerHTML four times.\n== Solution ==\nInstead of enqueuing the series of updates per component, this diff changes ReactMultiChild to enqueue updates per component tree (which works by counting recursive calls to updateChildren). Once all updates in the tree are accounted for, we render all markup using a single innerHTML set.', 'Send branch info from travis for continuous builds', 'Updated Changelog for 0.4.1', 'Blog post for v0.4.1', 'Updated Readme for 0.4.1', 'Change ReactMultiChild test to check for innerHTML descriptor.\nNot all testing environments will support setting the innerHTML descriptor. For example, PhantomJS initializes the innerHTML property as not configurable.', 'Fix Danger test failures.\nThe original tests were flawed because the Danger module exploits the fact that all React-generated markup has at least one attribute. This allows the module to extract node names from markup strings faster.\nHowever, the tests were passing in strings of markup with no attributes.\nAlso, this fixes a test failure due to the test trying to set text content into a <tr> which is typically disallowed by browsers (and PhantomJS). This changes it to use <td> instead.', 'Merge pull request #237 from yungsters/master\nFix Test Failures', 'Merge pull request #207 from thisishugo/patch-1\nupdate dead jsx link to point to an extant page', 'Fix incorrect port of standard Python server\n/ht @zpao', 'Merge pull request #241 from gasi/master\nFix incorrect port of standard Python server', 'Fix Reconciling Components to Content\nThis fixes a reconciliation bug introduced by adffa9b0f4128ca4832ddd03fdeca2c9fe434689.\nThe new unit test case exhibits the bug. When a component that has rendered child components is updated to render inline text, we usually:\n# Unmount and remove all child components.\n # Set the new inline text content.\nHowever, with batched child operations, we do not remove all child components until later. The current implementation will set the inline text content and blow away those nodes, causing a fatal when ReactMultiChild later tries to find and remove those nodes.\nThis fixes the bug by ensuring that text content changes are also enqueued.', 'react-rails blog post', 'Use createNodesFromMarkup\nPulled out markup rendering logic for better reuse.', 'Change ref from ReactID to ReactInstanceHandles', 'Merge pull request #245 from chenglou/patch-3\nChange ref from ReactID to ReactInstanceHandles', "Get rid of remaining ReactID references\nIt's gone. Also compacted a bit of code to match the other usage.", 'Fix Github links in examples\nLooks like we link to github.com/facebook/react/ instead of react-js. This just fixes the links\ngrep -r "facebook/react.js" . comes up clean now', 'Merge pull request #249 from pcottle/fixLinks\nFix Github links in examples', 'Fix 404 in Getting Started', 'Community Round-up #6', 'ReactChildren\nInstead of changing traverseAllChildren, keep that around for perf\nreasons (for the hot code path flattenChildren)\nIntroduce ReactChildren.map and ReactChildren.forEach\nwhich mirrors Array.prototype.map and Array.prototype.forEach. This\ninvolves a rename of mapAllChildren', "Support autocapitalize DOM Property\nIt's non-standard, but potentially useful on mobile.\nSee some discussion in google group: https://groups.google.com/forum/#!topic/reactjs/MBcCFohHHHA\nCloses #247", 'defaultValue of 0 now displayed\npreviously treated as empty string when passed to input text/textarea', 'tests for displaying defaultValue of 0', 'separate new tests into respective file', "Hold PhantomJS version at 1.9.0-1.\nAnd don't attempt any chmod magic, either.", 'Merge pull request #261 from benjamn/phantomjs-1.9.0-1\nHold PhantomJS version at 1.9.0-1.', 'Merge pull request #258 from chenglou/patch-3\ndefaultValue of 0 now displayed', "Upgrade phantomjs to 1.9.1-4\nThis fixes the install and permissions issues we've been seeing with\nother 1.9.1-x versions.", 'Make .bind(null, ...) work on autobound methods\nFixes #266.', 'Extract out core ReactEmitter functionality.\nOther environments can make use of some of the logic in ReactEventEmitter.', 'Refactor ReactComponent to have no dependency on the DOM.\nReact is more than just a DOM app library, it is a component\nabstraction library. This enforces that.', 'Merge pull request #268 from spicyj/bind-null\nMake .bind(null, ...) work on autobound methods', 'fix test case for rendering text node number 0', "Move utils out of React that aren't being used\nMany of React's util functions are non-redundant with Facebook's core\nlibraries, so move them out of React into a central location (out of\nthis repo).\nThese files were not getting used by any part of React core, so didn't\nactually belong here anyway.", "Sync modules to vendor/core\nWe haven't done this recently. Nothing has changed significantly, though\nthis does remove some files we weren't using.", 'Fix behavior of ReactDOMSelect\nCloses #250.\nTest Plan:\nWith multiple and not, verified: With defaultValue, the correct option is picked initially, user changes change the selection, and changes to defaultValue have no effect. With value, the correct option is picked initially, user changes do nothing, and changes to value change the selection.\nAlso ran the tests.', 'Merge pull request #251 from spicyj/select-value\nFix behavior of ReactDOMSelect with defaultValue', 'Make getChecked, getValue, handleChange private\nTest Plan: grunt test, enter text in ballmer-peak example without any JS errors.', 'Merge pull request #275 from spicyj/input-private\nMake getChecked, getValue, handleChange private', 'typo fix', 'Allow DOM Nodes in ImmutableObject\nCurrently, ImmutableObject will stack overflow while it tries to recurse and deep freeze all the properties of a DOM node.', 'Merge pull request #277 from stoyan/patch-1\ntypo fix', 'Added PyReact blog post.', 'Fix broken tutorial link and change wording', 'Use script to find remaining 404s. Fix them.', 'Docs: fix header', 'Add CDNJS to docs. Fixes #244', 'Move to using jstransform and esprima-fb npm modules', 'Merge pull request #280 from jeffmo/jstransform_npm\nMove to using jstransform and esprima-fb npm modules', "[react-tools] Add src/ to files\nThis is so it's possible to use the original @providesModule source\nfiles in a toolchain that understands those.", 'Server rendering: rendering of entire document using React.\nSummary: Allows rendering of React into the "document" as opposed to into a\nparticular node. To recap some basics:\ndocument: One level above the  tag - like the browser.\ndocument.documentElement: \nTo support full-page server side rendering, we need to be able to render\neverything including the HTML/BODY tags. This allows that.', 'adding better test - moving execution env module.', 'Merge pull request #289 from jordwalke/ServerRenderingFixes3\nServer rendering: rendering of entire document using React.', "Benchmarking tool for React application performance\nReactAppPerf wraps core methods and logs info from them; there's no real\nUI at this point", 'Explicit and Implicit Keys Need Separate Namespaces\nThere are certain cases where you can end up with a collision with an implicit\nkey (array index) if your explicit key prop is a number. They should use\ndifferent namespaces. Therefore I wrap explicit keys in curlies and implicit\narray indices in brackets.\nI added a simple test case, but another case came up on the mailing list. Where\nundefined entries in an array actually results in an entry and therefore an\nimplicit key.', 'Add rowSpan DOM property', "Add more helpful invariant if you're updating an unrendered component", 'Add missing "use strict" statement to pass lint\nTest Plan:\ngrunt lint; grunt test', 'Community round-up #7\nhttp://fooo.fr:4000/react/blog/2013/08/26/community-roundup-7.html', 'Update the tooling page to include pyReact, react-rails and react-page', 'Fix capitalization of Tooling Integration page', 'Add pagination to blog\n\nAdd pagination\nDisplay full content in /blog\nTruncate Recent posts\nAdd permalink that lists all the blog posts\nAdd spacing and bullet around recent posts to make it more readable\n', 'Support props for  elements.\ncontent, httpEquiv, charSet are all needed. We\'re currently\nworking around this in react-page.\ncontent is the risky one here since we previously supporting using\ncontent to set the text content. We removed support for that in\ne9980412296b6469f39605f48ea527776d7ac718 so the risk is minimal, there\njust might be some lingering old code.\nFixes #292\nTest Plan: Visit data:text/html,<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" charset="utf-8"></head>\n```\nvar m = document.querySelector(\'meta\');\nm.httpEquiv; // Content-Type\nm.httpEquiv = \'foo\';\nm.httpEquiv; // foo\nm.charset; // undefined\nm.charSet; // undefined\nm.getAttribute(\'charset\'); // utf-8\nm.setAttribute(\'charset\', \'bar\');\nm.getAttribute(\'charset\'); // bar\nm.content; // text/html; charset=utf-8\nm.content = \'baz\';\nm.content; // baz\n```', "Allow getInitialState() for mixins\nToday mixins can't easily be stateful because they can't provide getInitialState(). This allows multiple getInitialState() methods as long as they don't return objects that have conflicting keys. In that case, we throw.", 'Sync objMap from upstream', 'Update package dependencies\nSometimes I look at https://david-dm.org/facebook/react', '[docs] Small tweaks as reported in comments\n\nhighlight </form>\nuse correct id in getElementById call\n', "Don't trigger mouse events on native button elements that are disabled\nThis adds a ReactDOMButton module that shims the native <button> React component so it doesn't receive mouseup, mousemove, mousedown, click, or double-click events when its disabled property is truthy.", 'Change vendored module isDOMNode -> isNode', 'Make React batching strategy injectable', 'React.isValidClass\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\nCurrently this works for classes created with React.createClass as well as React.DOM.*.', 'Make ReactDefaultPerf work server-side\nWe were reading from window which was throwing when ReactDefaultPerf was injected.', 'Expose the instance cache\nWe need access to the instance cache for debugging tools. Ideally we want to\nexpose a more stable and supported interface but this seems like a quick win,\nfor now.', 'Tutorial: show how to add showdown.js', 'sync with tastejs todomvc', 'move lifecycle check into replaceProps instead of updateComponent', 'Merge pull request #307 from chenglou/todomvc-director\nsync with tastejs todomvc', "Redirect /docs to the right page\nI've hit this a few times where I want to get to docs so I take whatever\nmy urlbar gives me and strip out the actual page so I can get to the\nroot, however that's a 404.\nThis introduces a super easy way to redirect, which could be handy in\nthe future as docs get rewritten.\nI would much rather do this with a real htaccess file or even just\nhandle 404s gracefully, but that's not currently an option with GitHub\npages (since we generate our own and don't use a custom domain).", 'Merge pull request #312 from zpao/docs-redirect\nRedirect /docs to the right page', 'Merge pull request #305 from brianr/tutorial-explain-showdown\nTutorial: show how to add showdown.js', 'Merge pull request #298 from vjeux/pagination\nAdd pagination to blog', "Fix a few GC leaks in events system\nSummary:\n    - Weren't pooling the Transaction in the batching strategy\n    - Creating a new closure for every event tick due to batchedUpdates()\n    - EnterLeaveEventPlugin creates a new array on each event.\nI wonder if there is more optimization opportunity in accumulate(). Squinting at the fps graph this seems to be faster and waste less memory but it's hard to conclusively tell. I did verify that these were all hotspots though.", 'Remove React.autoBind for real\nThis has been deprecated for a long while now, we should actually remove it.', 'Add Stack Overflow link for doc support page.', 'Update wording', "Add ReactTransitionGroup\nThis introduces , a component that works a lot\nlike Angular's ng-animate.\nThe problem we're currently facing is twofold:\n1. We don't really have a great convention surrounding CSS transitions\n   in React\n2. (harder) we can't animate nodes that are leaving the DOM, as their\n   nodes are instantly destroyed.\nTo solve the first issue I've adopted Angular's convention. It's\nimplemented in ReactTransitionableChild.\nThe second part is what's tricky. To do this I've implemented three modules:\n- ReactTransitionableChild, which can keep its old children around if they\n  change to null\n- ReactTransitionKeySet, which can look at a prev and next set of child\n  keys and merge them in a reasonable way\n- ReactTransitionGroup, which combines ReactTransitionableChild and\n  ReactTransitionKeySet to keep nodes that are leaving the DOM in the\n  DOM until their animations are complete", 'Improve error behavior of Danger.dangerouslyRenderMarkup.\nHTML comment nodes are now interspersed in the original markup list so\nthat we can tell which chunks of markup rendered as more or less than one\nnode, and give a more helpful error message in that case.\nRegardless of how many nodes were rendered, we only take the first one. If\nzero nodes were rendered, then resultList will contain null at the\ncorresponding position.\nIf we decide to revisit the idea of using document fragments, it will be\nvery easy to handle the !== 1 case by returning a document fragment.', "Test cases covering rendering onto document\nThere were some bug reports here, I couldn't reproduce but wrote tests anyway. We should definitely have these.", 'Use dumpCache() rather than manual reset\nI forgot this module existed until @benjamn reminded we had a way to do it.', 'Sync CSSCore from upstream', 'fix formatting and test for correct error', 'Merge pull request #294 from clayallsopp/better_update_msg\nMore helpful message if you update an unrendered component', 'Make mounting on the root of the page work correctly\nThis was apparently only partially supported. We had issues initially mounting if there was no HTML present and\nalso had issues if we had to update HTML that was already there. This diff fixes all of these cases and has\ntests to prove it. NOTE: I removed a test that was actually erroneous. My bad.', 'Remove ReactChildren methods from React object\nThese are not terribly useful on this object and the naming of\nReact.forEachChildren sucked anyway.', 'Warn about unknown property values\nFixes #255.', 'Fix controlled radio button behavior\nFixes #242.', 'Add ReactTransitionGroup to the build', 'Merge pull request #322 from petehunt/build-animations\nAdd ReactTransitionGroup to the build', "Simplify bin/jsx to perform just the JSX transform.\nWe will continue using bin/jsx-internal, well, internally.\nNote that this version no longer respects @providesModule, and it\ndoesn't do anything special with constants like __DEV__, so we can no\nlonger get to claim that bin/jsx can be used to build the core.\nI'm happy about this, personally, because it demonstrates the flexibility\nof Commoner.", 'Merge pull request #267 from spicyj/warn-props\nWarn about unknown property values', 'Merge pull request #281 from spicyj/radio\nFix controlled radio button behavior', "Move else if (DEV) into two statements\nThe minification stage doesn't like else if (__DEV__).", 'Merge pull request #325 from spicyj/elseifdev\nMove else if (DEV) into two statements', 'Merge pull request #323 from benjamn/simplify-bin/jsx\nSimplify bin/jsx to perform just the JSX transform', "Fix backbone todo example bugs.\nFixed:\n- New todo not submitting correctly (page refreshes. preventDefault\nwasn't there.\n- Old checked todo being removed will leave the checkmark on the next\ntodo replacing its position.\n- Cannot change todo (value's now a controlled field).\n- autofocus (should be autoFocus, how ironic given the current\nsituation) on new todo input isn't working. Switched to manual\nfocus() in componentDidMount for now.\n- More consistent breathing space between lines.\n- Gutter at 80.\nAdded:\n- Use todomvc-common base.css. The old one had to change ids to\nclasses. No longer necessary.\n- Give cx a better name and move it in Utils.\n- Trim input upon finishing edit.\n- Remove todo if the new edited value is empty.\n- Submit edited todo value on input blur.\n- README to explain the existence of this example. Being able to\nmaintain a non-compilant version allows nice deviations from the\ntodomvc specs, such as animations, in the future.", 'Merge pull request #324 from chenglou/backbone-todo-ex\nFix backbone todo example bugs.', "Initial build of ReactTransitionGroup\nThis builds ReactTransitionGroup with it's own copy of React, which\nit total clownshoes. This should be technically usable, but definitely\nshould not be used in any production environment.", 'Fix bugs with CSS3 animation event in webkit\nWe were incorrectly sniffing the animationend event.', 'Cache length of NodeList when updating radios', 'Avoid unnecessary array allocations in dangerouslyRenderMarkup.', "Supporting mounting into iframes\nSencha says that separating big components into their own iframes was important for performance:\nhttp://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story.\nToday the only thing stopping us is that events don't bubble to our events system from an iframe. This diff\nlooks at the owning document of the container and adds top-level listeners to it. It should not change\nexisting behavior and should improve our support for this.", "Log unknown props only when we have a match\nLogging every unknown property got very noisy when combined with use of transferPropsTo. I knew this would be a potential issue initially but decided it was worth it. Others disagreed and it's resulting in some confusion.\nThis changes the logging to ensure that we have a potential correction, so only DOMish properties should result in warnings.", "Stop using comments as boundary markers in dangerouslyRenderMarkup.\nJordan warned (and StackOverflow confirmed) that IE8 doesn't respect HTML\ncomment nodes when setting .innerHTML:\nhttp://stackoverflow.com/questions/15006001/inserting-a-comment-in-innerhtml\nThe virtue of the comment strategy was that the parser did all the work of\nmaintaining the boundaries between markup chunks, using comments as the\nboundary markers.  The new strategy (of tagging the first node with a\nspecial attribute) has a similar virtue, since the parser should preserve\nthat attribute only for the nodes we care about, and any rendered nodes\nthat do not have the attribute can be ignored (and complained about by\nconsole.error).", 'Stop transforming class -> className\nUpdate the broken examples too (git grep class=)', "Remove all uses of ExecutionEnvironment.global\nCloses #271.\nAll three of these files are DOM-specific so it should be fine to use window. (ReactEventTopLevelCallback isn't obviously DOM-specific but it calls getEventTarget which is so I think we're fine here.)\nTest Plan:\ngrunt test, tried events in a real browser and they seemed to work still.", "Warn for 'class' and 'for' property names\nAlso stroke-linecap, stroke-width, stop-color, stop-opacity.\nTest Plan:\ngrunt test", 'Merge pull request #287 from spicyj/noglobal\nRemove all uses of ExecutionEnvironment.global', "Add React.version\ngetConfig needs to be a function because grunt.config.data.pkg.version isn't available at the time that grunt/config/jsx/jsx.js is required.\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.", "Add cut, copy, paste\nAdd clipboard events to React.\nFor forms, these shouldn't really be necessary -- the onChange event should handle deletions and insertions. For contenteditables, however, we need to be able to access clipboard data.", 'Fix radio input test in Chrome\nIt seems like the form="pluto" was throwing it off and making the input live outside the form it should have been contained in, causing it to uncheck A. I added it intending to test the form attribute but ended up not needing it so removing it should be fine. (The tests were passing in phantomjs since it doesn\'t support the form attribute and simply ignored it.)\nTest Plan:\ngrunt test; grunt test --debug', 'AUTHORS\nCreated a .mailmap file with all of the associations, then used\ngit + perl to create the AUTHORS file. In theory these should all get\npicked up by npm.\nI used ABC order so it would remain unbiased and automatable. I wish we\ncould go back and fill out the history or at least fix the commits we\nhave from CommitSyncScript, but oh well.\nThis also includes the script I used to automate this process in the\nfuture.', 'Fix input/textarea value of number 0 and false\nPreviously, setting textarea value to number 0 is treated as if value wasn\'t set at all (thus the textarea is cleared from 0 to \'\' upon onChange). false also renders as "false" instead of "" for both defaultValue and value, on textarea and input.', 'Merge pull request #328 from zpao/no-transform-class\nStop transforming class -> className', "Merge pull request #330 from spicyj/warn-class-for\nWarn for 'class' and 'for' property names", 'JSX: Respect original spacing and newlines better\nFixes #335.\nNow this JSX:\n/** @jsx React.DOM */\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <div>\n      Look!\n      <a href=\n        "http://www.facebook.com/">Facebook\n      </a>\n    </div>;\n  }\n});\nproduces\n/** @jsx React.DOM */\nvar HelloMessage = React.createClass({displayName: \'HelloMessage\',\n  render: function() {\n    return React.DOM.div(null,\n      " Look! ",\n      React.DOM.a( {href:\n        "http://www.facebook.com/"}, "Facebook "\n      )\n    );\n  }\n});\nrather than the less-desirable\n/** @jsx React.DOM */\nvar HelloMessage = React.createClass({displayName: \'HelloMessage\',\n  render: function() {\n    return React.DOM.div(null,\n" Look! ",      React.DOM.a( {href:"http://www.facebook.com/"}, "Facebook "      ),\n    );\n  }\n});', 'Merge pull request #274 from chenglou/textarea-patch\nfix textarea value of number 0', 'Merge pull request #205 from spicyj/version\nAdd React.version', "Fix ReactRenderDocument tests\nI am unsure how this was ever supposed to work, as testDocument is guaranteed to be undefined at that point since beforeEach doesn't run synchronously. (I don't think there's any way to have beforeEach halt the tests.)", 'Fix full-page rendering\nCloses #337.\nTest Plan:\nOpened react-page sample without any JS errors. Also ran grunt test after cherry-picking this changeset on top of #338.', "Hard code version instead of doing constant replacement\nThis isn't really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).", 'Merge pull request #332 from spicyj/radio-test\nFix radio input test in Chrome', 'Delete version.js\nThis file is an artifact of a build process long abandoned.', "Use a regular expression to parse out React.version.\nThis fixes a silent failure of the test suite that appears to be due to\nthe call require('./build/modules/React').", 'Merge pull request #344 from benjamn/fix-silent-test-failure-due-to-requiring-React\nUse a regular expression to parse out React.version', 'Merge pull request #339 from spicyj/doc-rendering\nFix full-page rendering', 'Merge pull request #338 from spicyj/fullpage-tests\nFix ReactRenderDocument tests', 'Update wording', 'Ensure selection range exists\nThe selection object doesn\'t always have ranges. In Chrome the\nselection is not updated before \'focus\' event handlers are fired. See\nhttp://jsfiddle.net/t4DYA/ for example.\nThe selection will have rangeCount of 0 and calling getRangeAt(0) will\nthrow error "Uncaught IndexSizeError: Index or size was negative, or greater\nthan the allowed value."', 'Fix lint errors in tests', 'Stop ReactInputSelection breaking in IE8\nIn the IE code path the method assumed that the input.value property\nwas non-null. A quick fix is to use either value or innerText; which means\nthe same code can be shared for textarea and contentEditable components.\nThe code is slightly buggy because the range.parentElement() !== input check\nwill fail for contentEditable components when the focus within a deep DOM tree.', 'Add link to third-party JavaScript (JSX).tmLanguage in docs.', 'Merge pull request #356 from yungsters/master\nAdd link to third-party JavaScript (JSX).tmLanguage in docs.', 'Flesh out reference documentation, more API info', "Fix DOM node warning\nbdf2a9bb124b8fc34120949b322202497741f239 broke the warning that children aren't suppose to be real DOM nodes.", 'Fix PropTypes Documentation', 'Merge pull request #351 from spicyj/api-docs\nFlesh out reference documentation, more API info', 'Make constant propagation smarter about pruning if statements.', "Don't update the docs version by default\nThis was leading to a lot of unnecessary churn in the config file since\ndifferent YAML versions were serializing differently.", 'Merge pull request #343 from benjamn/fix-if-statement-pruning\nMake constant propagation smarter about pruning if statements', 'Give the user a warning when using unoptimized JSX code and send the user to the correct location in the documentation to optimize.', 'Correcting the markdown anchor', "\nremoved creation of the id within the tooling integration doc (expect this to be done by @zpao's pull request)\nremoved the if statement and now always provide a warning message (as proposed by @spicyj)\nimproved the warning message\n", 'Merge pull request #359 from SanderSpies/master\nGive the user a warning when using unoptimized JSX code', 'Add composition events to React.\nComposition events make it possible to detect IME entry/exit.\nhttps://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent', 'Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\nThis is just a better name; we may revisit the name later.', 'Merge pull request #336 from spicyj/jsx-spacing\nJSX: Respect original spacing and newlines better', 'Fix use of "it\'s" in docs', 'Fix typo in doc', 'Docs: Give headers ids for easy linking\nThis gives markdown headers an id so that we can link directly to\nsections of our docs. This is better than the alternative of adding them\nall ourselves.', 'Add ReactDOMSelection module\nAdd a DOM based selection module. This can both be used on its own and\nin ReactInputSelection where our current implementation is lacking.\nThere is still some inconsistency with how IE and modern browsers\nhandle block nodes. Should be OK if we are just getting and setting\nand not trying to set selection based on character offsets.', 'Move composition event to plugin with polyfill\nMove compositionstart/compositionend to a new event plugin.\nAdd a polyfill that listens to key and mouse events and uses selection to\ndetermine which text has changed.', "Fix use of 'window' in CompositionEventPlugin\naccess to window needs to be guarded by ExecutionEnvironment.canUseDOM.", 'ReactLink: two-way binding for React\nThis introduces ReactLink which is a super lightweight way to do two-way binding for React.\nIf you want to use a controlled form input today, it\'s a lot of lines of code:\nhttp://jsfiddle.net/T3z3v/\nLook how many times name is repeated in there. And you have to remember to wire up event handles and pass the right state and\nright event handler for each form field. It\'s really annoying.\nWith ReactLink, you can "link" a form value to a state field. It\'s just some simple sugar around the value prop/onChange\nconvention:\nhttps://gist.github.com/petehunt/6689857\nAh, much nicer! And requires very little core changes or extra bytes. ReactLink just wraps the current value and "request\nchange" handler into a little object and provides some sugar to create some from composite component state.', 'Community round-up #8', 'Redirect docs/reference.html', 'Fix 404s to non-existent API docs', 'Remove animation "example"\nIt was never a real example and shouldn\'t have been checked in.', 'Change spec policy for getDefaultProps to SpecPolicy.DEFINE_MANY_MERGED\nThis will allow multiple mixins for a component to define\ngetDefaultProps and their values will be merged.\nSee also:\nhttps://groups.google.com/d/msg/reactjs/UzSiXw2Vo5s/FxK7AHWOzLMJ', 'Merge pull request #375 from danielmiladinov/master\nChange spec policy for getDefaultProps to SpecPolicy.DEFINE_MANY_MERGED', 'Fix server rendering', 'Fix lint errors including use of global', 'Test that React loads properly in a web worker\nThis should catch top-level uses of window and document, while lint rules catch global.', "Fix reconciling when switching to/from innerHTML\nThere's no way that this can work if _updateDOMChildren doesn't know about dangerouslySetInnerHTML, so tell it.\nFixes #377.", 'Update README.md', 'add line-height to unitless css props, test cases', 'Merge pull request #376 from spicyj/noglobal\nFix lint errors including use of global', 'Add doc link to DOM differences from JSX gotchas', 'Actually make exec work\nThe spec for eval (http://es5.github.io/x15.1.html#x15.1.2.1) says "If Type(x) is not String, return x." and that\'s exactly what\'s happening here -- it gets {code: ...} and does nothing.', 'Merge pull request #386 from chenglou/unitless-line-height\nadd line-height to unitless css props, test cases', 'Merge pull request #384 from chenglou/doc-link\nAdd doc link to DOM differences from JSX gotchas', 'Merge pull request #387 from spicyj/exec-fix\nActually make exec work', 'Sort batched updates by owner depth\nIf we reconcile components higher in the hierarchy they will likely reconcile components lower in the\nhierarchy. If we sort by depth then when we reach those components there will be no more pending state or\nprops and it will no op.', 'Removed "ajaxify" from DefaultDOMPropertyConfig\nThe "ajaxify" attribute is Facebook-specific and does not belong in this repo.', 'Merge pull request #378 from spicyj/html-reconciliation\nFix reconciling when switching to/from innerHTML', 'Copy the nodeContains module from static_upstream.', "ReactNativeComponent -> ReactDOMComponent\nIn an effort to break the DOMy parts of React away from the non-DOMy parts, I'm renaming this.", "Fix isEventSupported in recent versions of jsdom.\nSetting the eventName attribute of an element to the empty string is not\nenough to cause typeof element[eventName] === 'function' in jsdom. The\nattribute value actually has to look like a function body.", 'Speed Owner Access (by over 9000)\nUse a valid identifier (and non-string) to reduce chance of de-optimizing in V8 and Nitro.', 'Use nodeContains where appropriate.', 'Add app id for comments moderation\nThis way we can be notified when any new comment appear in the docs/blog and add moderators', 'Community round-up #9\nhttp://fooo.fr:4000/react/blog/2013/10/03/community-roundup-9.html', 'renamed ReactOnDOMReady module to ReactMountReady\nfix\nrenamed ReactOnDOMReady module to ReactMountReady', "Expose the rendered children before they're actually mounted\nExposing the _renderedChildren property before all the children are fully\nmounted. This allows us to debug a partially mounted tree when the debugger\nhas a breakpoint in the one of the mounting children.\nThis only has a functional difference in the case where mounting throws. This\nwill end up not mounting the component anyway. Any remounting shouldn't be\naffected by this change.", 'Expose bound function, context and arguments\nExposes the bound context, original method and bound arguments for any\nauto-bound methods, for debugging purposes.', "Add select event plugin\nPolyfill 'onSelect' behavior for React.\nUse non-standard 'selectionchange' event rather than 'select' event.\nThis allows us to fire the event when user moves the cursor via arrow\nkeys, and not just when they select multiple chars.\nAdd methods to ReactDOMSelection to make getting current selection\neasier, so we can do a fast check for change without having to\ncalculate char offsets for selection start and end.", 'Add warning when using componentShouldUpdate', 'Speed Key Validation (by over 9000)\nUse a valid identifier (and non-string) to reduce chance of de-optimizing in V8 and Nitro.', 'Move flattenChildren into MultiChild', 'Throw when calling transferPropsTo() on a component you don\'t own\nThis is dangerous because it means that data is flowing into the component from two components, only one of which is the actual "owner". While we may be able to figure out how to\nsupport this someday, let\'s be strict and prevent it for now.', 'React.__internals\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.', 'Sync getActiveElement module from FB.', "Fix SelectEventPlugin\nThere were 2 issues:\nI was reusing event outside the original event handler (activeNativeEvent).\nThis is a bad idea. I've changed deferred dispatch to have an empty object\nas the nativeEvent.\nI didn't handle inputs without .selectionStart (e.g. file inputs). I extracted\na input type check from ChangeEventPlugin and reuse it here.", 'fixed broken link on Community Round-up #9 blog post\ncloses #409', 'Merge pull request #407 from Samangan/master\nrenamed ReactOnDOMReady module to ReactMountReady', "Tweak verbiage about required polyfills\nI found it weird how the es5-shim comment came after the list of functions; now it's before.", "react-with-addons build\nThis creates a new standalone build which should have everything the\ndefault build has, plus a little extra. This is not a sustainable long\nterm solution (we shouldn't make people choose like this) but it fixes\nthe problem we have in the short term.\nThis also removes the terrible react-transitions build. This is better\nanway.\nFixes #369", 'Make sure addons builds are sent to build server', 'Make sure react-with-addons ends up in bower', 'Make sure react-with-addons ends up in react-source gem', 'Add TransitionGroup example', 'Merge pull request #370 from zpao/addons\nreact-with-addons build', "Merge pull request #374 from spicyj/workers\nTest that React loads properly in a web worker.\nMost of this code is open source-only, so I think it's safe to merge without figuring out how to translate it upstream first.", 'Make the injection of ReactPerf work\nThe injection was only evaluated when ReactCompositeComponent was first loaded.\nThis made it impossible to inject a custom measure and the injection pointless.', 'Add displayName for DOM Components', "Set _renderedComponent before it's fully mounted\nFor debugging so that we can inspect the currently rendering tree. I think this\nshould be safe and makes sense since it tried to mount.", 'Make transferPropsTo() message easier to debug\nSummary:\nMade the transferPropsTo() error introduced in\n325322898cc413454feede0201b61da1abe1e67e easier to use to debug.', 'fix namesToPlugins for gcc advanced mode', 'svg properties -> attributes', 'svg: rx/ry for rounded corners', 'svg attributes properly cased when assigned by react', 'Check for null selection\ngetRangeAt(0) will throw on null selection. Add guard in\nReactDOMSelection and DocumentSelection.', 'Better click behavior for ff\nFirefox created onClick events for right mouse clicks. This diff brings behavior on firefox inline with other browsers.', 'Remove DOM mutation listeners\nMutation listeners are known to be slow. Rough benchmarks show text\nchanges are now 50% faster.', 'DefaultDOMPropertyConfig: sort properties alphabetically', 'Merge pull request #419 from piranha/svg-attrs\nsvg properties -> attributes\nFixes #190', "Forcibly wrap SVG nodes with  on creation\nForcing wrapping seems necessary here: I compared a  created within a  with a  created inside an  and they appear to have exactly the same properties with the exception of .parentNode (and .parentElement), yet the former refuses to show up when appended to an  element. As such, I can't find any useful way to write a unit test (testing getMarkupWrap's output doesn't seem particularly useful to me).\nFixes #311.\nTest Plan:\nWith a component that adds a  after mounting (such as http://jsfiddle.net/spicyj/hxFVe/), verify that the circle appears in both Chrome and IE9.", '[docs] Fix a broken link to JSX syntax in README.', 'JSX => #jsx', 'Add bitwise lint escape to DefaultDOMPropertyConfig', "Ensure attribute values are strings\njsdom behavers differently than browsers here and we should ensure\nthat we are consistent. Browsers should be (and are) converting to\na string first, while jsdom doesn't.", 'Standardize prop -> DOM attribute process\nAllow more than strings and numbers to be used as attributes for DOM\nnodes. This removes the special casing for 0 and false that was\nbeing used in ReactDOMInput and ReactDOMTextarea.\nNow we will just toString any object we try to insert into a DOM.\nCloses #422, #372, #302', 'Be consistent with object naming in tests\nThis also fixes line length issues our linter was complaining about.', 'Make sure DOM components work in JSDOM', "Merge branch 'SanderSpies-sspi-dom-attribute-process'", 'Merge pull request #426 from SanderSpies/sspi-fix-jsx-doc-link\nIn-browser JSX warning linked to wrong anchor (should be lowercase)', 'new addons docs\ncloses #403', 'Updated AUTHORS for 0.5\ncloses #414', 'Fix Lint\nEnabling bitwise linting caught another user. Also fixed a semicolon\nmisuse.', 'Use getActiveElement module\nWe had something that did the same sort of protection. The module\ndiffers slightly (returns document.body instead of undefined) but\nlooking at the callers, that should be ok.', 'Enable linting for bitwise operators', 'Update docs with supported tags and attributes', 'bump baseline jstransform and esprima dependency versions', 'Update browserify', 'bump version for 0.5', 'Fix grunt npm:test', '0.5.0 release\nUpdated README, CHANGELOG, blog post']v0.4.1 React

setState callbacks are now executed in the scope of your component.
click events now work on Mobile Safari.
Prevent a potential error in event handling if Object.prototype is extended.
Don't set DOM attributes to the string "undefined" on update when previously defined.
Improved support for <iframe> attributes.
Added checksums to detect and correct cases where server-side rendering markup mismatches what React expects client-side.

JSXTransformer

Improved environment detection so it can be run in a non-browser environment.
 ['Typo in changelog, update blog leading sentence.', 'Update readme for 0.4.0', 'Typo in changelog, update blog leading sentence.\n(cherry picked from commit 9221b15bff61c86b09dece321d4b2ecec2272c85)', 'Update readme for 0.4.0\n(cherry picked from commit ec67076090941287bacb48fcaf43d88cf28518a8)', 'textarea format', 'Fix typo in blogpost\nI fixed this in the changelog, but missed this one.', 'jsx', 'todo fix', "Merge branch 'chenglou-master'\nConflicts:\n    docs/_js/examples/markdown.js", 'Fix all errors and warnings on homepage\nAlso onChange instead of onInput in two places!', 'Merge pull request #203 from spicyj/homepage\nFix all errors and warnings on homepage', "Merge branch 'master' into 0.4-stable\nNo need to cherry-pick yet since we've only taken docs changes on master", 'Version bump for 0.5.0 development', 'Use getAttribute instead of getAttributeNode in ReactID.rawGetID.\nAlso known as internalGetID, internally.', 'Merge pull request #206 from benjamn/getAttribute-instead-of-getAttributeNode\nUse getAttribute instead of getAttributeNode in ReactID.rawGetID', 'Avoid some innocuous test warnings.\nThis reduces some console.warning spew from grunt test output.', 'Add iframe attributes to React\nThese are pretty useful for building apps and stuff.', 'Don\'t call require("mock-modules").register("test/all", ...).\nThe "test/all" module will never be mocked, nor should it ever need to be\nreset by dumpCache.', 'Abandon  test isolation hack now that we have dumpCache.\nThis cuts the running time of grunt phantom:run from 4.4s to 3.1s on my\nmachine, because we no longer have to load/execute a separate instance of\nreact-test.js in a separate <iframe> for each test.', 'Merge pull request #209 from benjamn/speed-up-tests\nAbandon  test isolation hack now that dumpCache works', "Pull in my rewritten Function.prototype.bind polyfill from upstream.\nWe don't sync upstream polyfills (because we don't have a story for how\nthey would be used), so this needs to be updated manually.\nSacrificed some negligible performance optimizations to reduce the number\nof different cases from four to one.\nIt's important to test this implementation in PhantomJS, since that's the\nonly browser that I know of where built-in functions sometimes do not have\na .prototype.", 'Docs Typo Fix: s/distinciton/distinction', 'Merge pull request #210 from benjamn/rewrite-Function.prototype.bind-polyfill\nPull in my rewritten Function.prototype.bind polyfill from upstream', 'Merge pull request #211 from phleet/patch-1\nDocs Typo Fix: s/distinciton/distinction', "After each test, remove any stray nodes added to the document.\nThis was not necessary when we were running each test in its own\n<iframe>, and it doesn't seem to affect any test behavior currently, but\nit seems wise for the sake of test isolation and hygiene.", 'One-character typo fix', 'Merge pull request #212 from spicyj/docfix\nOne-character typo fix', 'Rename removeSiblings to removeNextSiblings.', 'Merge pull request #213 from benjamn/remove-stray-nodes-after-each-test\nAfter each test, remove any stray nodes added to the document', 's/pased/passed', 'fix typos', 'Merge pull request #216 from phleet/patch-1\nDocs Typo Fix: s/pased/passed', 'Allow to execute JSXTransformer outside of browser environment', 'upgrade example to 0.4\nmanually tested', 'Merge pull request #218 from chenglou/patch-2\nupgrade example to 0.4', 'Add comment explaining internalGetID', "Remove unused dependency on ReactMount\nWe don't really use these, and this will make our lives easier.", 'Don\'t set DOM attributes to "undefined" on update\nWe already skip null and undefined when building up the stringified html on first render, but if you update a component to the exact same conditions, React will leave the DOM in a different state. We shouldn\'t do that.', 'Push builds from travis to remote host', 'Run grunt build with npm test so that we can upload all files', "Fix TypeError in SyntheticEvent\nI suspect that plugins are modifying Object.prototype which is causing TypeErrors in SyntheticEvent. Let's fix it.", "Fix Clicks in Mobile Safari\nThis works around a bug with listening to clicks using event delegation on Mobile Safari using an event plugin.\nNOTE: We don't enable touch events by default, so I don't know if would want to inject this plugin by default. In fact, I'm not sure what our strategy is at all for when to invoke React.useTouchEvents(true).", 'Call callbacks from setState in component context\nThis is way more useful than the alternative.', 'Community Round-up #5\nhttp://fooo.fr:4000/react/blog/2013/07/20/community-roundup-5.html', 'Docs Typo Fix: s/distinciton/distinction\n(cherry picked from commit bf275a909748a1e64ff06934ce0b6f8f285b86f7)', 'One-character typo fix\n(cherry picked from commit 222faf4544731b725c4fcbe1b416b89286275601)', 'fix typos\n(cherry picked from commit 64d72f8c4b1054c97393124d85681f0e168064fa)', 's/pased/passed\n(cherry picked from commit 50a00662cf1d64fa3e4a6f72e454459b0a81cb83)', 'Community Round-up #5\nhttp://fooo.fr:4000/react/blog/2013/07/20/community-roundup-5.html\n(cherry picked from commit 975b5d978f5a560ce0c85457f4979a60e2241334)', 'Use the right home page for react-source gem', "fix jquery-bootstrap example bugs\nOld one had some bugs:\n- 'x' on modal wasn't showing.\n- trying to close modal in unmount, but modal had a closing animation.", "Merge remote branch 'upstream/master' into non-browser-env", 'Do not export load in JSXTransformer unless in a browser environment', 'Merge pull request #217 from jakubmal/non-browser-env\nAllow to execute JSXTransformer outside of browser environment', 'Fix "Suppport" type in docs', 'Allow to execute JSXTransformer outside of browser environment\n(cherry picked from commit 2b9dd04f4d8f48f7cb7fb3885b61679856320ceb)', 'Do not export load in JSXTransformer unless in a browser environment\n(cherry picked from commit 795a84d60fe9b13b195befdc4b2d6a811e8e5eb3)', 'Fix OrderedMap.\nTim caught a bug. Squashing it so he can rebase on top of it.', 'Warn when server-rendered markup is not what we expect on the client\nAs @leebyron and balpert pointed out, if the markup on the server is differnet than what the client expects undefined behavior and chaos may ensue. A good fallback\nis for us to just inject the client-side markup (as it is the source of truth) and warn the user in DEV that something is wrong. In order to do a fast\nbrowser-independent check of the DOM I use an adler32 checksum of the generated markup. I believe this is better than a simple innerHTML compare because different\nbrowsers massage innerHTML differently.', 'Remove circular dependencies in React Core.\nThere is a circular dependency between ReactID, ReactMount and\nReactInstanceHandles. Ben and I talked about this today. It seems like the\nsimplest solution is to consolidate a lot of the code that Ben recently wrote\ninto ReactMount. We can later find ways to trim code out of this module\nwithout causing circular deps.', 'Use invariant in OrderedMap\nJust some therapeutic cleanup.', 'Typecheck ImmutableObject\nJust some therapeutic cleanup.', 'Use invariant in react/utils\nJust some therapeutic cleanup.', 'Merge pull request #224 from spicyj/cb-context\nCall callbacks from setState in component context', "Cleanup 2nd param to ReactEventEmitter.ensureListening\nIt was removed, so these callsites aren't actually doing anything.", 'Merge master to 0.4-stable', 'Send branch info from travis for continuous builds\n(cherry picked from commit 20179b79914f1f3c7c3ea0c7ef4625603654634a)', 'v0.4.1']v0.4.0 React

Switch from using id attribute to data-reactid to track DOM nodes. This allows you to integrate with other JS and CSS libraries more easily.
Support for more DOM elements and attributes (e.g., <canvas>)
Improved server-side rendering APIs. React.renderComponentToString(<component>, callback) allows you to use React on the server and generate markup which can be sent down to the browser.
prop improvements: validation and default values. Read our blog post for details...
Support for the key prop, which allows for finer control over reconciliation. Read the docs for details...
Removed React.autoBind. Read our blog post for details...
Improvements to forms. We've written wrappers around <input>, <textarea>, <option>, and <select> in order to standardize many inconsistencies in browser implementations. This includes support for defaultValue, and improved implementation of the onChange event, and circuit completion. Read the docs for details...
We've implemented an improved synthetic event system that conforms to the W3C spec.
Updates to your component are batched now, which may result in a significantly faster re-render of components. this.setState now takes an optional callback as it's second parameter. If you were using onClick={this.setState.bind(this, state)} previously, you'll want to make sure you add a third parameter so that the event is not treated as the callback.

JSX

Support for comment nodes <div>{/* this is a comment and won't be rendered */}</div>
Children are now transformed directly into arguments instead of being wrapped in an array
  E.g. <div><Component1/><Component2/></div> is transformed into React.DOM.div(null, Component1(null), Component2(null)).
  Previously this would be transformed into React.DOM.div(null, [Component1(null), Component2(null)]).
  If you were using React without JSX previously, your code should still work.

react-tools

Fixed a number of bugs when transforming directories
No longer re-write require()s to be relative unless specified
 ["Add new onInput event\n'input' is supported in IE9+ and all other browsers according to\nhttps://developer.mozilla.org/en-US/docs/Web/API/window.oninput\nTest Plan:\nModified ballmer-peak example to use onInput instead of onKeyUp and\ntested that it works properly on latest Chrome.", 'Update examples to use onInput instead of onKeyUp\nonInput has the advantage that it responds to repeated key events before\nonKeyUp and is called when modifying the input without the keyboard\n(such as pasting with the mouse).\nTest Plan:\nOpened the ballmer-peak example and docs homepage in Chrome and checked\nthat both examples update whenever the text is changed.', 'Simulate input event instead of relying on native\nTest Plan:\nWith the ballmer-peak example (modified to use input), tested that the\npercentage updates when adding or deleting text in the field on Chrome\nand IE9. After adding es5-shim and es5-sham to the ballmer-peak page,\nIE8 works properly too.', 'Revert "Simulate input event" for now\nThis reverts commit 580e8f0dbbbb7963c27fee42fd843c6d2a89e2ca.', "Make unmountAndReleaseReactRootNode not throw\nWhen there isn't any React node in the DOM, unmountAndReleaseReactRootNode\nthrew an exception because component was undefined. Instead, return whether we\nwere able to unmount the component.", 'Merge pull request #32 from spicyj/input\nAdd new onInput event', 'Merge pull request #58 from spicyj/unmount-nothrow\nMake unmountAndReleaseReactRootNode not throw', 'Integrate twitter in the support page', 'Using markdown instead of html', "Flatten Children A Single Level\nThis expects static children as additional arguments to the constructor\nand flattens any array arguments one level deep.\nComponent(props, child1, child2, arrayOfChildren, child3) ->\n.props.children = [child1, child2, ...arrayOfChildren, child3]\nThis can avoid an additional heap allocation for the unflat array.\nIt allows you to pass nested arrays and objects like you used to. Those\naren't immediately flattened. That makes this a fairly safe change.\nPassing a dynamic array without key properties will yield a warning\n(once). Might consider throwing later.\nOnce we change the transpiler to use the new syntax, you'll end up with\na single flat array in normal usage.\nThis doesn't actually update the JSX transform.", 'style prop improvements\nSome improvements to how style={{x:y}} is handled in React:\n* ignores null styles, rather than setting them.\nCodez:\nvar highlighted = false;\n<div style={{color: highlighted ? \'red\' : null}} />\n\nBefore:\n<div style="color:;"></div>\n\nAfter:\n<div></div>\n\nRespects that 0 has no units.', 'use key="foo" for all components\nflattenChildren was only using key when child.mountInContainerNode\nexists, which is defined on ReactCompositeComponent, and not\nReactNativeComponent.\nThis uses the isValidComponent() fn to see if we should use this key.', 'mapChildren\nmapChilden() is similar to Array.map() and objMap() but handles deep\nnested structures and follows similar rules to flattenChildren()', "Add ReactProps.func\nThis adds ReactProps.func so people don't need to write the\nslightly-more-cryptic ReactProps.instanceOf(Function). We should have\nhad this all along.", "Always reassign _key for every pass\nCurrently we're mutating _key. Mutation here is fine, but it needs to\nbe idempotent - which it's not. This is causing some issues.\nInstead I reassign the _key every time it passes through a flattening.\nThis means that it's unique and stable for a single pass through a composite\ncomponent. When it's repassed another level, it loses it previous\nidentity and is rekeyed by it's new location.\nFor auto-generated keys by index, this actually means it has the same\nsemantics as before flattening.\nFor explicit keys, it has the effect that keys need to be unique at\nevery level. Regardless of how the key got there. Every component needs to ensure\nthat it doesn't combine keys from two different sources that may collide. This\nis also inline with the old semantics but less intuitive in the new model.", 'Revert Object.create in NormalizedEventListener\nIt seems that the use of Object.create (to comply with strict mode) in\nNormalizedEventListener is not happy in IE8.', "[React] Removing invariant warning about updating owner state\nIt seems like it's possible to render a component that ends up having an\nowner. Because you can end up rendering inside a render somehow.", 'Support rendering different components into same node\nvar container = ...; // some DOM node\nReact.renderComponent(, container);\nReact.renderComponent(, container);\nThis should replace the rendered  with a , effectively\nreconciling at the root level.', 'Rename domUtils to dom', 'Add getDefaultProps()\nAs it turns out, default values are very useful. This implements\ngetDefaultProps(), a hook for components to provide prop values when\na prop is not specified by the user.', 'Re-add invariant\nBring back the invariant() that disallows setProps() and replaceProps()\non owned components.', 'Make ReactIdentity-test less fragile with respect to root IDs.', 'Only Allow forceUpdate on Mounted Components', "Cleanup ReactCurrentOwner on Fatal\nIf a React component's render() fatals, it may contaminate\nReactCurrentOwner. This will cause the owner to be set improperly for\nthe next React.renderComponent() invocation (which causes an owner to be\nset when there shouldn't be one).", "Fix Listener Cleanup on Unmount\nWe need to make sure that deleteAllListeners() is invoked before we call\nthe superclass's unmountComponent() method or else we will lose\nthis._rootNodeID.\nI also added an invariant and unit test to make sure we do not break\nthis in the future.", 'Move test utils internally, update for consistency', 'Rename ReactEvent to ReactEventEmitter\nReactEvent should be reserved for the actual object created when an\nevent fires. The current ReactEvent is more like EventEmitter than\nanything (e.g. it sets up delegation, provides methods to attach and\nremove listeners).', 'Add license headers to new files', 'React: Add @typechecks to CallbackRegistry', "[React] Don't use autoMockOff", "[React] remove deprecated Component.update()\nSummary: Since grepping for update and updateAll is pretty hard, I had these these functions call through but complain loudly. This noisy call through has been in prod for over a week and I haven't heard any complains, so let's take it out altogether.", 'Simplify Event Core\nSummary:\nThis makes a few changes to React Core, most notably ReactEventEmitter and ReactEventTopLevelCallback.\n\nChanged ReactEventEmitter to use EventListener (instead of NormalizedEventListener).\nDeleted NormalizedEventListener (which was previously broken).\nCreated getEventTarget which is used to get a normalized target from a native event.\nChanged ReactEventTopLevelCallback to use getEventTarget.\nRenamed abstractEventType to reactEventType in AbstractEvent.\nReanmed abstractTargetID to reactTargetID in AbstractEvent.\nRemoved originatingTopLevelEventType from AbstractEvent (unused and violates encapsulation).\nRemoved nativeEvent.target === window check when refreshing authoritative scroll values (unnecessary).\n\nThis actually fixes React because NormalizedEventListener does not currently do what it promises to do (which is normalizing target on the native event). The target event is read-only on native events.\nThis also revises documentation and adds @typechecks to a few modules.\nNOTE: Most importantly, this sets the stage for replacing AbstractEvent with ReactEvent and subclasses, piecemeal.', "Improve Browser Support for wheel Event\nThis improved browser support for the wheel event.\n\nTry to use wheel event (DOM Level 3 Specification).\nFallback to mousewheel event.\nFallback to DOMMouseWheel (older Firefox).\n\nAlso, since wheel is the standard event name, let's use that in React.\nNOTE: The tricky part was detecting if wheel is supported for IE9+ because onwheel does not exist.\nTest Plan:\nExecute the following in the console on a page with React:\nvar React = require('React');\n  React.renderComponent(React.DOM.div({\n    style: {\n      width: 10000,\n      height: 10000\n    },\n    onWheel: function() {\n      console.log('wheel');\n    }\n  }, null), document.body);\nVerified that mousewheel events are logged to the console.\nVerified in IE8-10, Firefox, Chrome, and Safari.", 'Add typecheck, cleanup\nFollowup with some additional comments for https://github.com/facebook/react/pull/58', 'Merge pull request #66 from zpao/sync-latest\nSync latest from Facebook', 'Remove clowny diff.diff\nAn artifact of our sync process.', 'Make todo example shorter and not rely on the DOM.', 'Merge pull request #69 from jordow/SimplifyExample\nMake todo example shorter and not rely on the DOM.', "Cache modules for jsx grunt tasks in react-tools/.module-cache.\nAs of Commoner v0.6.11, the default is to put the cache files in\noutput/.module-cache, which used to be build/modules/.module-cache\nbefore this commit. That still happens when you run bin/jsx directly,\njust not for grunt tasks anymore.\nThe module cache needs to be cleared much less often than\nbuild/modules, so it doesn't make sense to throw away all that work.", 'Merge pull request #72 from benjamn/module-cache\nCache modules for jsx grunt tasks in react-tools/.module-cache', 'Replace persistentCloneOf with persist\nThere are to reasons to prefer a persist method on the event rather than a static method:\n\nIn open source, people do not have access to AbstractEvent.\nThis will allow people to persist events without requiring another module.\nThis will make refactors easier and more flexible.\n', 'Bugfixes to key assignment\nType coersion bug and ID breaking assumption.\nNames need to be wrapped in something unique since otherwise two unique siblings\ncan end up having IDs that are subsets of eachother.', "Delegate Event Classes\nReact's top-level event delegation dispatches AbstractEvent objects that contain:\n\nnativeEvent, the original browser event.\ndata, an object with custom normalized properties.\n\nThis diff creates a set of DelegateEvent classes that will replace AbstractEvent. The goal is two-fold:\n# Provide a cross-browser implementation that conforms to the DOM Level 3 Events API so people don't have to use nativeEvent.\n # Generalize the event object API so that it can be shared by DOMEventManager, a top-level event delegation WIP.\nThis simply implements the classes. I will follow-up by replacing AbstractEvent with them.", 'Fix typo in OrderedMap\nUnique was spelled wrong. This fixes it.', "Remove React.createComponentRenderer\nRemove ReactMount.createComponentRenderer because it does not function\ncorrectly.\nvar f = React.createComponentRenderer();\nvar container1 = document.createElement('div');\n  var container2 = document.createElement('div');\n  f(container1);\n  f(container2); // error because mounting same instance into new root", "Assign the same keys if it's a single nested array or not\nIf you specify a single array, we didn't prefix the keys with 0.\nIf you later add children, the first array won't have the same key.", "Add new textChange event: input + IE shim\nIE8 doesn't support oninput and IE9 supports it badly but we can do\nalmost a perfect shim by listening to a handful of different events\n(focus, blur, propertychange, selectionchange, keyup, keydown).\nThis always triggers event handlers during the browser's event loop (not\nlater in a setTimeout) and after the value property has been updated.\nThe only case I know of where this doesn't fire the event immediately is\nif (in IE8) you modify the input value using JS and then the user does a\nkey repeat, in which case we fire the event on the second keydown.\nTest Plan:\nModify ballmer-peak example to add es5-shim and to use onTextChange\ninstead of onInput. In IE8, IE9, and latest Chrome, make sure that the\nevent is fired upon:\n\ntyping normally,\nbackspacing,\nforward-deleting,\ncutting,\npasting,\ncontext-menu deleting,\ndragging text to reorder characters.\n\nAfter modifying the example to change .value, make sure that the event\nis not fired as a result of the changes from JS (even when the input box\nis focused).", 'Run inner componentDidMount method first\nFixes #76.', "Stabilize minimal server rendering API\nThis is a pretty killer feature and the API is simple. I know it's another API method on React, but I think it's\nthe only way.", 'Fix typechecks for isRenderedByReact()', 'Reduce ReactInstanceHandles API Surface Area\nChange ReactInstanceHandles so that getFirstCommonAncestorID and nextDescendantID are now private (and documented to be only exposed for unit testing). Also:\n\nRenamed nextDescendantID to getNextDescendantID.\nRenamed parentID to getParentID.\n\nI also organized ReactInstanceHandles-test by method names.\nFunctionally, this diff should not change anything.', 'Use isAncestorIDOf in ReactInstanceHandles\nThis is both a functional fix and performance fix for ReactInstanceHandles.\n\ngetFirstReactDOM uses indexOf but should be checking ancestry (via isMarker()).\nAdded isAncestorIDOf, checking ancestry can be way faster than getting a common ancestor: http://jsperf.com/react-ancestor-id-check\n', 'Rename "Delegate" to "Synthetic"\nThis is just a simple rename of the event classes to SyntheticEvent. I\'ve also updated the constructor arguments to be more correct:\n\ndispatchConfig: Data used by the plugin system for dispatching the event, for example: {registrationName: \'onClick\'}\ndispatchMarker: An identifying marker used to describe where the event is occuring, for example: .reactRoot[0]\n', "Fix Event Normalization in IE<9\nIE<9 relied on the target property being overriden. This adds back a hack that only applies in IE<9. I'll be able to revert this hack once I check in synthetic events.", 'Add missing license headers', 'Removed unused variable', 'Check canUseDOM before calling isEventSupported', 'Upgrade Commoner and Recast to latest versions.\nThe Commoner upgrade is a big one because it makes bin/jsx no longer\nrewrite module identifiers to be relative by default, which should\nreduce confusion for people trying to use it as a standalone\ntransformer.\nCloses #80.', 'Merge pull request #77 from spicyj/componentdidmount-order\nRun inner componentDidMount method first', 'Merge pull request #81 from benjamn/issue-80-commoner-no-longer-rewrites-require\nUpgrade Commoner and Recast to latest versions', "Correctly remove attributes when deleting props\nThe most obvious manifestation of this bug is visible here:\nhttp://jsfiddle.net/spicyj/zzGas/. In short, when props are removed from a\ncomponent, the underlying HTML element doesn't have the attribute\nremoved.\nThis change should fix it, but unfortunately it (presumably) makes\n_updateDOMProperties a bit slower.", 'Fix relative require copy pasta', 'Remove unused require', "internalPropNames isn't necessary, so remove it\nPerhaps we'll bring it back as a future perf optimization if that\nappears useful.", 'Fix nit and comment', 'Merge pull request #84 from spicyj/remove-props\nCorrectly remove attributes when deleting props', 'Refactor based on review feedback', 'Missing semicolon', 'Merge pull request #75 from spicyj/textchange\nAdd new textChange event: input + IE shim', 'Merge pull request #68 from vjeux/twitter\nIntegrate twitter in the support page', 'Set textarea value when changing content\nAt http://jsfiddle.net/spicyj/W4QLq/, typing into the textbox would cause\nclicking the button to do nothing; now it should work.', "Don't set value if it'll be a noop", 'Fixed width/height on React logo', 'Merge pull request #86 from petehunt/fixed-width-height\nFixed width/height on React logo', 'Community round-up blog post', 'Facebook comments integration on Docs and Blog', 'Merge pull request #67 from vjeux/fb_comments\nFacebook comments integration on Docs and Blog', 'Exposing ReactProps as React.Props\nRight now, even though ReactProps is committed, there is no way to use it as it is not exposed.', 'Adding JSX pitfalls section in the docs', 'Don\'t let textarea value change via textContent\nTurns out my tests before weren\'t particularly useful because\nreceiveProps doesn\'t end up running componentDidUpdate since the\ntransaction never finishes. Now they use replaceProps instead (and I\nverified that commenting out the "rootNode.value = ..." line makes the\ntests fail, which wasn\'t true before).', 'Add HTML5 Drag/Drop events to React', "Add ReactComponent#isMounted\nThere is currently no way for components to know whether or not they are mounted. This means there's no way for callbacks to figure out if they can make certain assumptions (e.g. can getDOMNode() or setState() be safely invoked).\nThis adds an isMounted protected method that lets components properly handle callback behavior when unmounted.", 'Create EventPluginRegistry\nThe EventPluginHub module was getting huge and scary. This pulls out all of the logic required to inject plugins and publish their event registration names into a new EventPluginRegistry module.\nFunctionally, nothing should have changed. I added many error checks to cover edge cases that we were not yet running into, but they are all in EventPluginRegistry and unit tested.', 'Cleanup style Prop Reconciliation\nThis cleans up the reconcilation path when adding a style prop (going from a falsey or no style to having one) by reducing the need for an object allocation and for-loop.', 'Remove Unnecessary DOM Mutations\nThis fixes an edge case that can cause unnecessary mutations in the DOM. Namely, if a prop is falsey, it will get touched on every update by reconciliation. See unit test.', "Pass multiple children in JSX as additional arguments\nThis is an alternative to D809298. In normal usage you'd end up with a single\nflat array in props.children.", 'Remove isStatic\nThis can be replicated with a custom component that always returns falsefromshouldComponentUpdate`. A generic implementation might look like:\n```\nvar StaticContainer = React.createClass({\n  shouldComponentUpdate: function() {\n    return false;\n  },\nrender: function() {\n    return this.transferPropsTo(this.props.children[0]);\n  }\n});\n```\nAnd then used in JSX as\n<StaticContainer><div>Hello!</div></StaticContainer>, resulting in\nonly <div>Hello!</div> being inserted into the DOM.', "Merge pull 75 upstream\nNeeded to make some small changes since we weren't synced when it was\nmerged.", 'Fix tht typos', 'Unnecessary this._rootNodeID Invariant\nSummary: This invariant is unnecessary because ReactComponent.Mixin.receiveProps already asserts that this component is mounted. (Being mounted guarantees you have a DOM ID, look at ReactComponent and see when this._rootNodeID is mutated.)', 'Unbreaking falsy check on style values\nStyle values can be the number zero which is an actual value. So we check for\nnull instead. The empty string case falls through.', 'Sync latest JSX transform - all children passed as separate arguments\nThis was a part of e1fe13d0cbb6063594a0b9dc712a8ee6006bb2e3 upstream.', 'Fix textchange event enqueueing\n(Was broken by e1535fbd71d8c89c82cd9d9073c1ee97ee6a3b00.)', "Fix EventPluginRegistry Unit Tests\nDumping the mock cache isn't dirying the modules, so we have to unit test a different way. If we can fix our unit test framework, we should revert this.\nAlso, I added strict mode to EventPluginRegistry.js.", 'Merge pull request #92 from spicyj/fix-textchange\nFix textchange event enqueueing', 'Merge pull request #89 from vjeux/patch-4\nExposing ReactProps as React.Props', "getDOMNodeID: Don't return .id on random objects\nIf you defined a global named id (a horrible name, I know) then\ngetDOMNodeID(window) would return that object. Since only DOM nodes can\nhave IDs, this should be a noop change otherwise.\nTest Plan:\nVerified that document.documentElement and document.body both support\ngetAttributeNode properly in latest Chrome and in IE8.", 'Merge pull request #91 from yungsters/master\nFix EventPluginRegistry Unit Tests', "Merge pull request #61 from spicyj/getdomnodeid\ngetDOMNodeID: Don't return .id on random objects", "Adds optional callback to setState\nThis commit adds an optional callback as a second argument to\nsetState, to be called after setState runs.\nWe never guarantee synchronous execution of setState, and as per\n@phunt, we don't want to make that guarantee because we may eventually\nbatch calls to setState.  @jwalke agrees with him.", 'Updated docs and check for truthiness\nChange api docs to reflect presence of the new argument.  In addition,\ncallback was change to require only a "truthy" value.', 'markdown syntax\nSmall problem with markdown syntax in syntax-highlighted block.', 'Update tutorial.md\nThe ajax call happens every 5 seconds, not every 60 seconds.', 'Minor typo.', 'Minor grammar.', 'Link to my own blog', 'Add callbacks to all public-facing state/props methods\nAll public facing {set,replace,force}{props,state} methods now support\ncallbacks.', 'Merge pull request #97 from spicyj/patch-1\nLink to my own blog instead of Quora', 'Merge pull request #96 from groodt/master\nVery minor corrections to documentation', 'Merge pull request #95 from groodt/patch-1\nSmall correction to tutorial.md', 'Merge pull request #88 from vjeux/jsx_pitfall\nAdding JSX pitfalls section in the docs', 'Update jsx-is-not-html.md', "Improve JSXTransformer\nThe biggest improvement is that we'll now insert each parsed JSX script\nback into a <script> tag with the body set. This allows the browser to\nexecute these scripts normally. Using Function(functionBody) or\neval(functionBody) both execute in window scope, but var assignments\ndon't actually get set on window (unlike everywhere else).\nI also did some cleanup to make the code a little bit more readable.\nIn my minimal test cases this didn't break anything (scripts loaded in\nthe right order).", 'Use grunt.util.spawn for jsx:* tasks instead of exec.\nThis should prevent "Warning: stdout maxBuffer exceeded" errors.\nAlso piping child process stdout and stderr to the parent process, so\nyou can see more of what\'s happening during the build process.', 'Merge pull request #102 from zpao/fix-transformer\nImprove JSXTransformer', 'Merge pull request #103 from benjamn/fix-maxBuffer-exceeded\nUse grunt.util.spawn for jsx:* tasks instead of exec', 'Use Node Cache in ReactComponent\nThere are currently two places where we lookup and cache nodes: ReactDOMNodeCache and ReactComponent. Instead, we should just consolidate caches and make ReactComponent use ReactDOMNodeCache.', 'Remove trailing whitespace', "React onlyChild utility.\nSmall utility that extracts and validates that there is only a single\nchild passed to a React composite component. The benefit here is that we\nabstract away how the children are actually stored while we iterate on\ndifferent approaches. This way we won't break callsites as we try different\nideas. When we settle on a final approach, all of these callsites will still\nwork.", "Fix EventPluginRegistry Unit Tests in GitHub\nDumping the mock cache isn't dirying the modules in the open source version, so we have to unit test a different way. If we can fix the unit test framework, we should revert this.\nAlso, I added strict mode to EventPluginRegistry.js.\nSee: https://github.com/facebook/react/pull/91", 'Use Synthetic Events\nSwaps out usage of AbstractEvent with SyntheticEvent (and subclasses).', 'Add Back DOMCharacterDataModified\nAccidentally lost DOMCharacterDataModified.', 'Add missing license header.', "Fixing known keying problems\nThis fixes the last known parts of the flattening experiment. This has grown to\nbe somewhat complex and potentially fragile because of it. We may end up\nreverting flattening in the future or address it slightly differently.\nThe purpose of this diff is to test if we've finally understood the real world\nedge cases that flattening can lead to and how we have to key components to\ncover those cases.\nWith this commit we never rekey the internal _key property. The semantics is\nthat once a component passes through a composite component, it's identity is\nfrozen.\nprops.key should accept numeric values and booleans which includes 0 and false.\nThis fixes the truthiness check.\nWe should never warn about missing key properties if a component is passed as a\nstatic child. The _key acts as a flag to determine whether this component\nwas checked already.", 'Add missing license header', 'Upgrade Recast to 0.4.8 to fix options.writeback bug.\nBug introduced by: https://github.com/benjamn/recast/commit/e913b22f8f\nBug fixed by: https://github.com/benjamn/recast/commit/170e18091e', 'Merge pull request #105 from benjamn/fix-options.writeback-bug\nUpgrade Recast to 0.4.8 to fix options.writeback bug', 'Rename Woodchipper-related stuff.\nNo functional changes introduced by this commit.\nRenamed:\nwoodchipper.js -> constants.js\nWoodchipper -> ConstantVisitor\ndebranch -> propagate\n', 'Use recast.parse and .print for require("vendor/constants").propagate.\nThis removes the need to pass a callback, which is a nice improvement.', 'Merge pull request #106 from benjamn/rename-woodchipper\nRename Woodchipper to ConstantVisitor, and simplify the vendor/constants.js interface', "Fix lint warning about mismatched file & module name\n@providesModule should match the file name. In this case we'll be consistent and suffix mixins with Mixin.", "Remove reactKeys\nIt wasn't being used and it wasn't conforming to the @providesModule === file name rule.", 'Fix most lint warnings/errors', "Fix package.json's reference to vendor/constants.js", "Merge pull request #107 from remixz/package-json-fix\nFix package.json's reference to vendor/constants.js", 'Ignore .module-cache directories', "Don't transfer children in transferPropsTo\n06cff60bc1eec13ff804af9f74b3b2b37b5490b3 made it so that this.props.children was no longer set when\nnone were provided.\nvar x = ;\nThis caused an issue if the code was relying on the following not\ntransferring children.\nreturn this.transferPropsTo();\n  // this now transfer children", "Better warnings for missing keys on arrays\nWe have less dynamic arrays in the code base now so let's start warning for all\nthe cases where we pass dynamic arrays without keys.\nI use the displayName to point out which component's render method was\nresponsible. I only warn once per component. If the child was created in a\ndifferent component (and passed as a property) I also show the owner of the\nchild. Maybe it should've attached the key at a higher level.\nThis does give false positives for arrays that are truly static. Those should\nprobably be refactored to use the XML syntax if possible.", 'Use absolute URLs for FB comments box', "Use github tarball link for esprima dependency\nIt turns out that (at least for local development) npm has a long\nstanding bug where it doesn't recognize changing dependencies stored as\ngit urls (see https://github.com/isaacs/npm/issues/1727). Luckily npm\nunderstand tarballs and GitHub provides tarballs for every commit, so\nthe workaround is easy, though unfortunate.", 'Fix dangerouslySetInnerHTML', 'Merge pull request #110 from vjeux/patch-1\nFix dangerouslySetInnerHTML', "Merge remote-tracking branch 'origin/master' into textarea-update-value", "Don't update value or textContent unnecessarily\n_updateDOMChildren was already updating textContent so we don't need to\ndo it in _updateDOMProperties. Additionally, don't update .value if\nit'll be a noop because it has side-effects (like moving the cursor) in\nsome browsers (like IE 9).\nRefactor tests to be a bit more robust and a bit cleaner too.", 'Cleanup lint warnings', 'Community Roundup #2', 'Merge pull request #113 from vjeux/community_2\nCommunity Roundup #2', 'Merge pull request #109 from zpao/esprima-dep-as-tarball\nUse github tarball link for esprima dependency', 'Remove textContent tests; they break in phantomjs', "Bring in Facebook's requestAnimationFrame module", 'Blogpost & changelog for v0.3.3', 'Add reactComponentExpect#toBeComponentOfType\nThis adds a toBeComponentOfType method to reactComponentExpect. Now that we are injecting composite native components, toBeDOMComponentWithTag will not suffice and should be deprecated.', 'Allow accessing siblings by ref\nThis makes it possible to write a wider range of components without\ndepending on internal implementations.', 'Consolidate ReactDOMNodeCache and getDOMNodeID into ReactID.\nWhen we move away from using the "id" attribute to identify\nReact-generated elements, we will need the cache (formerly\nReactDOMNodeCache) to be tied much more closely to the code that looks\nelements up by ID (getDOMNodeID) and sets element IDs, since the magic of\ndocument.getElementById will no longer be available.\nThe priming functions are going to come in handy when we create new DOM\nfragments in mountComponent.\nFor backwards compatibility, the ReactDOMNodeCache and getDOMNodeID\nmodules still exist, but they are implemented entirely in terms of\nfunctions exported from ReactID.', 'Replace uses of ReactDOMNodeCache and getDOMNodeID with ReactID.\nAlso removed some unnecessary calls to document.getElementById, which\nwill eventually cease to work for React-specific IDs.\nThis clears the way for the deprecation of ReactDOMNodeCache and\ngetDOMNodeID.', 'Use ReactID.{get,set}ID instead of manipulating .id property directly.\nAnother step in the plan to centralize control of React-specific identifers.', 'Remove second argument to invariant()', 'Merge pull request #99 from petehunt/invariants\nRemove second argument to invariant()', "Use React.autoBind by default.\nPer our discussion - this is the general approach we'd like to take for\nthe public facing API.\nvar MyComponent = React.createClass({\n  render: function() {\n    return <div onClick={this.myCallback} />;\n  },\n  myCallback: function() {\n  }\n});\n", 'fix bad caching in ReactID.getID', 'Fix a bunch of problems with implicit autobinding', 'Clean up naming\nFix a small style nit', 'Add unit test to prevent regression\nThe original autobinding diff made some assumptions about how methods were called on components that had to be reverted. This diff\nenforces those assumptions in a test', 'Dynamic Input Component\nSummary:\nThis is a proposal based loosely on the discussions I\'ve had with @paulshen and @jwalke. It implements a shim for React.DOM.input (used as <input>) that supports two different use cases depending on whether value is provided or not.\nIf a value is //not// provided, the input will be initialized with the empty string (or defaultValue) and anytime the user changes the input, the onChange (or onTextChange) handler will be fired and the DOM will reflect the new changes.\nReact.renderComponent(\n    ,\n    container\n  );\nIf a value is provided, the input will be initialized to that value. Anytime the user changes the input, the onChange (or onTextChange) handler will be fired. However, the DOM will //not// reflect the new changes. If a value is provided, it is the responsibility of the owner to update the value prop passed in.\nvar value = "Untitled";\n  var input = React.renderComponent(\n    ,\n    container\n  );\n  function handleChange(event) {\n    // Do something cool like strip out non-numbers.\n    var value = event.target.value.replace(/\\D/g, \'\');\n    input.setProps({value: value});\n  }\nThis is just a start and we should build similar components for textarea and select. Also, this does not inject the new components because the changes are not backward compatible. Once we change all <input> uses to use ReactDOMInput, then we can inject.', "Fix isMounted() for composite components\nThis behavior seemed incorrect for composite components.\n\nisComponentMounted() represents ReactComponent's lifecycle of mounting\nisMounted() represents ReactCompositeComponent's lifecycle of isMounted()\n\nTherefore, ReactComponents no longer have isMounted(). I think this is fine since it was not supposed to be public anyway.", 'Require Statement Nits', 'Use @return, not @returns', 'Remove React.autoBind entirely', "Rename BrowserEnv to ViewportMetrics\nBecuase that's what it is.", "Restore @spicyj's lifecycle tests\nThese got lost in a rebase.", 'Use ReactID.ATTR_NAME as the React-specific ID attribute name.\nAnother step in the plan towards making ReactID.ATTR_NAME the central\nsource of truth regarding the React-specific ID attribute name.', "The compare_size cache gets wiped out with grunt clean\n.grunt/ is the directory that is suggested for storing task related\nfiles, and this file is not useful if it gets wiped out often. So I'm\nmoving the compare_size cache into .grunt/ so we keep it around\nlonger.", 'Check that container is a valid DOM element', "Remove ReactID.primeTree in favor of priming in ReactID.getID.\nAlthough it would have been nice to prime the entire tree and achieve a\ncache hit rate of 100%, that cost would have to be paid up front, during\npage rendering.\nThis patch avoids priming up front in favor of making the most of the work\ndone by ReactMount.findReactRenderedDOMNodeSlow, which calls\nReactID.getID while traversing the rendered DOM. The insight is this: if\ngetID simply primes the cache whenever it finds a new ID, then\nfindReactRenderedDOMNodeSlow will end up priming quite a few more nodes\nthat are actually involved in ReactID.getNode lookups, and we won't need\nprimeTree at all.", 'Remove ReactDOMNodeCache and getDOMNodeID.\nThese modules have been superseded by ReactID. Since they were only used\ninternally, and I have updated all client code that previously assumed\ntheir existence, I believe they can be dropped for good.', 'Upgrade TextChangeEventPlugin to ChangeEventPlugin and support more form elements\nUpgrade TextChangeEventPlugin to be the onChange event that React\nfires. In React, onChange will now fire when input fires for form elements in\nmodern browsers.\nHandle this for:\ninput[type=text]\n  input[type=password]\n  input[type=checkbox]\n  input[type=radio]\n  textarea\n  select\nSupport:\n\nOSX Chrome\nOSX Safari\nOSX Firefox\nWin 7 / IE8\nWin 7 / IE9\nWin 7 / IE10\n\nEverything works but caret selection / placement differs from browser to\nbrowser.\nFor  elements, the event is fired with change. This is a\nconscious decision, even though in some browsers (OSX firefox, IE), it\ncan be argued that the event should fire more due to how the UI looks.\nBuilds on https://github.com/facebook/react/pull/75, which handled only\ntext inputs.', "Enforce nodeCache validity\nA node is considered valid if it\n\n\nhas the expected ID (more of a sanity check than something that is\n     ever likely to go wrong), and\n\n\nis contained by a currently mounted container.\n\n\nWhen these requirements are met, we can be confident that\nReactMount.findReactRenderedDOMNodeSlow(node.id) === node, which is\nimportant for cache consistency because findReactRenderedDOMNodeSlow is\nwhat we fall back to when we don't find a node in the cache.\nPoint 2 is a subtle requirement, because it allows nodes to be valid even\nif they are not currently contained by a document. Rendering into a\ndetached node is okay, in other words (which is something that\ndocument.getElementById never properly accounted for).\nContainment testing takes linear time in the depth of the DOM, which\nsounds unfortunate until you realize that virtually all browsers support a\nnative ancestor.contains(descendant) method, and in practice the vast\nmajority of nodes are either orphaned with .parentNode === null or not\nvery deep relative to their container.", 'Make @typechecks static-only', 'Remove deleted files again\nThese accidentally got re-added in a rebase', 'Merge pull request #112 from spicyj/check-dom-nodetype\nCheck that container is a valid DOM element', 'Cache Default Props\nThe getDefaultProps return value should not be dependent on any external data (including this.props and this.state), so the return value should be consistent everytime we call it.\nThis caches the return value so we do not do work and allocate memory unnecessarily.', 'Fix onChange for File Input\nMakes sure that onChange fires for file inputs.', 'Don\'t pass a null context to Function.prototype.call.\nThis prevents PhantomJS tests from hanging in the open-source React repo.\nUntil the advent of "use strict", passing null as the context object\nto .call or .apply resulted in this taking on the value of the\nglobal object inside the invoked function.\nTechnically the "use strict" directive is supposed to make it possible\nthat this === null, but strict mode is not respected by all browsers,\nincluding (unfortunately) PhantomJS.\nSince these expect-ations are just testing binding behavior, let\'s not\nmake them also test strict mode this handling.', 'Merge pull request #124 from zpao/keep-compare-size-cache\nThe compare_size cache gets wiped out with grunt clean', 'Changed JSON data in the tutorial to use double quotes for strings.', "Refactor of ChangeEventPlugin\nsome refactoring and also handle if blur doesn't fire on the form\ninput in IE8 (by always cleaning up on focus). per discussions with\n@balpert", 'Change ReactID.ATTR_NAME to "data-reactid"\nThis final change is what we\'ve all been waiting for.\nNote that it no longer makes sense to use document.getElementById in\ngetNode, because that only ever worked with "id" attributes.', 'Merge pull request #128 from mathieumg/master\nDouble quotes for strings in JSON data', 'Recommend Node v0.10.0 due to https://github.com/isaacs/npm/issues/2907', 'Merge pull request #132 from petehunt/engines\nRecommend Node v0.10.0 due to https://github.com/isaacs/npm/issues/2907', 'Community Roundup #3', 'Merge pull request #126 from vjeux/community_3\nCommunity Roundup #3', 'Add @jsx common parser issues in the docs\nUpdate getting-started.md', 'Bump version to 0.4.0a\nThis should have happened a while ago, but better late than never.', "Fix findComponentRoot w/ Unidentified Nodes\nThe current ReactInstanceHandles has a bug where findComponentRoot barfs if it comes across a node that was not identified by React (via ReactID). This fixes that.\nThis was always a bug, but it became more apparent once we switched to data-reactid because arbitrary document.createElement'd nodes are much more likely to have an id than they are to have a data-reactid.", 'Merge pull request #123 from vjeux/patch-2\nAdd @jsx common parser issues in the docs', 'Add link roundup', 'Merge pull request #135 from vjeux/bugbuster\nAdd link roundup', 'Remove content property\nFixes #119.', 'Add support for empty XJS expressions', 'Fix Composition Level of Components w/o Owners\nThis fixes a bug with components constructed with no owners, for example:\n// Both the  and  have no owners.\n  React.renderComponent(, node);\nThey should have a composition level of 1 and their keys should be prefixed with 0 to indicate they were created without owners. However, they currently incorrectly get a composition level of 0 (which means that //their// children will have keys prefixed with 0, which is wrong).', 'Throw on Missing Elements\nThis changes React to throw when ReactID.getNode() fails to find a node. This method is used by two call sites:\n\nImplements ReactComponent#getDOMNode. This method already throws if a component is not mounted, and //all mounted components should be able to find their rendered root nodes//.\nUsed by ReactDOMIDOperations. These call sites aleady assume that getNode returns a non-null. Currently, if the node is not found, this is the site that fatals (and the stack trace is much harder to debug).\n\nThe error message should make it //a lot// easier to debug unexpected DOM trees. In particular, this will help track down all the places where the browser inserts <tbody> unexpectedly.', '.reactRoot[base10] -> .r[base36]\nJust a bit of byte savings for server rendering. Props to @benjamn for the base36 idea (and for making this diff easy).\nWith a little work we could probably get rid of the .r as well.', 'Merge pull request #136 from jeffmo/empty_expressions\nAdd support for empty XJS expressions', "Merge branch 'textarea-update-value' of git://github.com/spicyj/react\nConflicts:\n    src/core/ReactDefaultInjection.js", 'Delete files that accidentally got merged in\nಠ_ಠ', 'Clean up unused variables for lint', "Improve findComponentRoot Error Message\nInstead of simply logging the React ID of the ancestorNode when findComponentRoot fails, use a try ... finally to console.error the ancestorNode. This allows modern web inspectors to actually log a reference to the node (which may not have a React ID).\nThis means when people run into the problem, they will not have to execute:\nrequire('ReactID').getNode();\nNOTE: Admittedly, this will not log anything in IE8. That's fine, since IE8 has shitty console logging anyway.", 'Implement ReactDOMTextarea\nThis changes ReactDOMTextarea to accept defaultValue and value. It will warn people about using children (but allow it and treat it as defaultValue, which is the current behavior).', "Don't keep the HTML escaped ID internally, only in HTML generation\nA dynamic value can be provided as a key to a child. Either as part of an object\nor key property. This becomes part of the component's ID.\nWe have to be careful to escape this key before inserting it into the DOM since\nit could become a vulnerability. We fixed this by escaping just the keys.\nHowever, the current implementation breaks when you used escaped keys. The\ninternal value is escaped and the value used by getAttributeNode and\ngetElementById are both unescaped.\nThis fixes that by keeping the unescaped value internally but escaping it right\nbefore the HTML is generated (like any other attribute).\nThis is important since business logic IDs (that should be used as keys)\ncontains characters that need to be escaped.", "use .apply instead of .call in ReactCompositeComponent\nThis was a bit ridiculous.. let's just use arguments as it's supposed to\nbe used.", "Merge branch 'no-content' of git://github.com/spicyj/react into spicyj-no-content\nConflicts:\n    src/core/ReactNativeComponent.js", 'Use proper names for scroll metric properties', 'Fix ReactDOMInput and ReactDOMTextarea Race Condition\nThis fixes a race condition if the onClick tries to update the input or textarea (e.g. by calling setState):\n', "Revert Flattening of Children\nI still think the semantics of flattening children is valid but we'll\nwant to revert the flattening implementation while we solidify the\nsemantics and try another approach.\nThis reverts flattening so that this.props.children can once again be\neither a single child, flat array or nested array.\nmapChildren calls flattenChildren before doing anything else. This is\nnot the most efficient approach but I wanted to keep this inital diff\nsimple. It also ignores empty values for backwards compatibility.\nWe may want to try another approach where empty values are included\nin the map.\nValidation of keys is still done inside ReactComponent. Ideally I'd\nlike to extract that into a separate module but to avoid cyclic\ndependencies, I'm keeping it in ReactComponent for now.", 'Merge pull request #143 from spicyj/ie8-fixes-2\nUse proper names for scroll metric properties', 'Bump Commoner version to fix EMFILE errors.\nFinally found a more robust solution for the "too many open files"\nproblem: https://github.com/benjamn/commoner/commit/ad72ba42db.\nCloses #137.\nCloses #138.', "Bump Commoner version to disable dependency scanning by default.\nIf you are using bin/jsx independently, you may need to pass\n--follow-requires to it if you rely on its dependency scanning.\nDependency scanning is still a good idea, but it's difficult to make it\nwork perfectly for everyone the first time they try bin/jsx.\nCloses #131.", 'Merge pull request #144 from benjamn/fix-EMFILE-jsx-errors\nBump Commoner version to fix EMFILE errors', 'Merge pull request #145 from benjamn/no-jsx-dependency-scanning-by-default\nBump Commoner version to disable dependency scanning by default', "Merge branch 'master' into async-state", 'Add figure and figcaption elements to React.DOM (already supported by jsx.)', 'Merge pull request #147 from lrowe/patch-1\nAdd figure and figcaption elements to React.DOM (already supported by jsx)', 'Batch together calls to setState, setProps, etc\nThe end of ReactUpdates-test.js is probably most illuminating for seeing how this works.', 'Blog: Autobind by Default\nKicking off the series of posts previewing v0.4', "Upgrade Commoner to --watch directories instead of individual files.\nThis behavior is new in Commoner v0.8.3, following the incorporation of\n@jeffreylin's DirWatcher implementation:\nhttps://github.com/jeffreylin/jsx_transformer_fun/blob/master/dirWatcher.js\nWatching directories instead of files reduces the total number of open\nfiles, and copes better with editors that save files by deleting and then\nimmediately recreating them.\nCloses #60.\nCloses #71.", 'Add blockquote tag (already in JSX)', 'Remove autobinding warning\nI think this warns on many legitimate use cases. We should get rid of it I think.', 'Merge pull request #151 from spicyj/bq\nAdd blockquote tag (already in JSX)', 'Merge pull request #115 from spicyj/async-state\nBatch together calls to setState, setProps, etc', 'Merge pull request #150 from benjamn/commoner-dir-watcher\nUpgrade Commoner to --watch directories instead of individual files', 'Update syntax.md\nSome inconsistencies pointed out in FB comments', 'Introduce a supported way to slice children\nIntroduces a counterpart to mapChildren. It excludes empty children just as\nmapChildren for compatibility. With might introduce something like\nsliceChildrenIncludingEmptyValues at some point.', 'Injectable DOMProperty configs, and add back ID attribute\nhttps://github.com/facebook/react/pull/141', 'Fix ChangeEventPlugin for IE8 and IE9\nThis fixes a bug with ChangeEventPlugin in IE8 and IE9. The extend of this bug includes:\n\nOn IE8, not firing onChange immediately after value of an input is changed.\nOn IE9, not firing onChange when backspacing.\n', "Faster Listener Deletion\nWhenever a component is unmounted, we delete all listeners that might have been attached. This sucks because most applications, Facebook included, do not use every listener. There's a lot of wasted computation, especially if many components are mounted and unmounted.\nThis changes deleteAllListeners to more delete listeners more efficiently.", 'Inject ReactDOMInput\nChanges <input> in React to use ReactDOMInput which supports value and defaultValue instead of the current, arguably broken value behavior.', 'Add finally block for clearing ReactUpdates state\nIf any component throws during reconciliation any subsequent reconciliation will break badly because ReactUpdates will be in an inconsistent state.\nAdd a finally block to prevent this.', 'update docs', 'Add hidden attribute to DOM properties.', 'Merge pull request #153 from lrowe/patch-2\nAdd hidden attribute to DOM properties.', 'Community Round-up #4', 'Merge pull request #157 from vjeux/communit_4\nCommunity Round-up #4', 'Ensure that the phantomjs binary has appropriate UNIX mode.\nThe 755 mode corresponds to a UNIX mode string of -rwxr-xr-x.\nCloses #166.', "Don't require tmp module unless we're going to use it.", 'Merge pull request #167 from benjamn/issue-166-fix-phantomjs-executability\nEnsure that the phantomjs binary has appropriate UNIX mode', 'Emphasis on single child.', 'Merge pull request #173 from chenglou/patch-4\nEmphasis on single child.', 'add datetime to the list of known attributes\nas per http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#attr-time-datetime', 'dateTime attr: camelCase and MUST_USE_ATTRIBUTE', 'Merge pull request #176 from andreypopp/master\nAdd datetime to the list of known DOM attributes', 'Remove the check for console.warn\nWe already polyfill this at FB and we should recommend https://github.com/paulmillr/console-polyfill for open source.', 'Allow nested ReactUpdates', "Tweaks to make the Closure parser happy\nThis doesn't make it actually run with Closure, but passes its parser.", 'Try harder to find container in ReactMount.findReactContainerForID.\nWhen we render a new component into a container, we now record a reference to the rendered DOM node as rootElementsByReactRootID[reactRootID], so that we can determine the actual container later on, in case containersByReactRootID[reactRootID] is no longer the true container.', "Make ReactMount.findComponentRoot breadth-first & non-recursive.\nThis function needs to be as fast as possible for those cases when\nReactID.getNode can't rely on the nodeCache.\nBreadth-first search prevents us from diving too deeply down the wrong\nbranches when the sought-after node can be found at a shallower level.\nThe queue required for breadth-first search is implemented by a single\narray indexed by childIndex. To save space, only the .firstChild nodes\nare stored, and we use .nextSibling to iterate over the other siblings\nin a while loop.", 'Continue over ID-less children in ReactMount.findComponentRoot.\nThis fixes our perf test by coping with edge cases like the\ninjection of <tbody> between <table> and <tr> nodes, which occurs\nautomatically in some browsers when we set .innerHTML.\nIntroducing more search branches would be risky if not for my previous\ncommit that made findComponentRoot breadth-first instead of depth-first.', "Add support for missing html elements\nWe're missing a bunch of elements. So I scraped them from https://developer.mozilla.org/en-US/docs/Web/HTML/Element. Here's the script I used (run from Firefox scratchpad):\nArray.prototype.slice.call(document.querySelectorAll('div.index.widgeted li'))\n  .filter(function(li) {\n    return !/deprecatedElement|obsoleteElement|nonStdElement/.test(li.firstChild.className)\n  })\n  .map(function(li) {\n    // <tag> -> tag\n    return li.querySelector('code').textContent.replace(/<(.+)>/,'$1');\n  })\n  .join(': false,\\n  ');\nI had to filter a couple more out (because there's some malformed content), but then it was simply merge with what we had and check to see if the new ones needed to omit the close tag.", "Sync JSX tags from upstream\nThis is the other part of fc5f7e0e85e164f6826cf1ddc3f055f6ee4f93cb. This\nfile isn't part of our sync process so needs to be done separately.", 'Add some missing attributes\nMostly this was to better support some HTML5 stuff. This was not a complete pass through though, and we should probably add more.', 'Add benchmarks to .gitignore', 'Merge pull request #178 from paulshen/master\nAdd benchmarks to .gitignore', "Upgrade browserify.\nThere are other changes I'm sure but the most important is that module\nsorting results in deterministic builds.\nThe biggest win here comes for releases. Previously we had to jump\nthrough hoops to make sure the files we put in bower were the same files\nwe put on the CDN, were the same files packaged in the Ruby gem, were\nthe same files we packaged into a zip file, were the same file we used\nwhen create PRs to CDNJS. Rebuilding docs also resulted in conflicting\nversions so we had to be careful when committing. This takes away all of\nthat pain. We can build from the same revision and get the same files.", 'Upgrade other dependencies\nNothing groundbreaking. semver was likely already installed at 2.0.x\nanyway (since >=) and grunt-contrib-jshint just gives us jshint\n@ 2.1.3', 'Fix Clowny Validation Code\nಠ_ಠ', "Don't ignore children of non-ancestor ID nodes in findComponentRoot.", 'More autobind warnings and invariants\nThis adds two new warnings and one new invariant:\n\nWarn when using React.autoBind() that it is deprecated.\nThrow when calling bind() on an autobound method with the wrong value of "this". Today we\'ll silently ignore the provided value, which is confusing.\nWarn when calling bind() on an autobound method with the right value of "this" and no other arguments. This is already done for you by React.\n', 'Short-circuit updatePropertyByID\nWhen ReactNativeComponent updates, it calls updatePropertyByID in ReactDOMIDOperations which calls DOMPropertyOperations. However, in ReactDOMIDOperations, we will lookup the node for an ID using ReactID.getNode. This wastes time looking for nodes when we may not need to ever update it (e.g. children).\nThis changes ReactNativeComponent to bail out sooner.', 'Reduce Lookup for Missing Lifecycle Methods\nThis is a micro-optimization that reduces the lookup time for missing lifecycle methods. The extra amount of memory is linear to the number of components that exist on a page which I think is a worthwile trade-off.', 'Delete setTextNodeValueAtIndexByParentID\nThis does not appear to be used anywhere.', "Stop Unnecessary Purging of Node Cache\nWhen each component unmounts, it already cleans up its respective entry in the node cache. Let's stop blowing away the entire node cache unnecessarily.\nThis should improve performance because a React component's root will never need to be searched for more than once.", 'Rename props to propTypes\nThis does two things:\n\nRename props to propTypes.\nRename ReactProps to ReactPropTypes (and React.Props to React.PropTypes)\n', 'New blog post: Props in v0.4', "Add exports to globals for jshint\nThis is a bit unfortunate, but it'll shut lint up for the time being. We\ncan't just change the modules to use module.exports = { ... } due to\nhow we handle circular dependencies internally (ReactMount require\nReactID and vice versa).", 'Remove references to React.autoBind\nCleaned up a comment and removed a useless test.', 'Stringify value in ReactDOMInput / ChangeEventPlugin\nThis fixes two bugs related to string-casting in React:\n# Setting <input value={0} /> would use an empty value because 0 is falsey.\n # Using onChange and setState with non-strings could lead to an infinite loop.\nThe latter is possible with controlled inputs when:\n\nUser changes input value.\nonpropertychange fires.\nChangeEventPlugin dispatches onChange.\nA handler responds via this.setState with a non-string value (e.g. a number).\nThe input re-renders and re-sets value.\nThe new value is not a string, but the current value (read from the element) is cast to a string automatically by the browser.\nThis triggers another onpropertychange.\nChangeEventPlugin dispatches another onChange.\n...\n', 'Cleanup console.* uses\n\nStop doing global.console && ...\nMake sure all uses are behind __DEV__ checks so they get stripped out\n', '"use strict" for ReactDoNotBindDeprecated', 'First two sections of newdocs', 'Make less facebooky', 'Some style changes', 'Add more jsx docs rather than linking', 'add seconds 02.1 and 03', 'Add table of contents info', 'more toc', 'Start on section 04', 'even better toc', 'link to blog', 'further improvements', 'more state machiens', 'more scaling up', 'another comment', 'Reorg docs, write a lot of content, import a lot of stuff from dex', 'more jsx handholding', 'antipatterns', '@vjeux comments', 'add working with your environment section', 'jsx gotchas, reference', 'reorg', 'Update 01-motivation.md', 'Update 02.2-jsx-gotchas.md', 'Update 02.1-jsx-in-depth.md', 'Update 03-interactivity-and-dynamic-uis.md', 'fix some links', 'Update 08-working-with-your-environment.md', 'Fix comma', 'update and move tutorial', 'add more examples', 'delete old docs', 'scaling up fix', 'tweak the source', 'move docs around, add likebutton', 'cleanup some files, move tutorial', 'put it all together', 'switch to guides', 'fix markup bugs', 'Update LICENSE', 'Revert "Update LICENSE"\nThis reverts commit dd1d49b3609a0eace533a2d55b6b1f2842f960f8.\nThe license is actually supposed to look like that. That section is\nboilerplate for others to apply the license to their own work. See\nimmediately above...\n\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets "[]"\nreplaced with your own identifying information. (Don\'t include\nthe brackets!)\n', 'Normalize DefaultDOMPropertyConfig\nFor consistency, use lowerCamelCase for all props in DefaultDOMPropertyConfig.', 'Remove remaining calls to ReactCompositeComponent.autoBind.\nThis is causing console.warning spew in the open source tests.', 'Use populist v0.1.2 to bundle test modules instead of browserify.\nThis will allow full support for mocking, dumpCache, and correct line\nnumbers in error messages.', 'Call require("mock-modules").register in every mockable module.\nMocking happens only when config.constants.MOCK is true.', 'Enable module.exports mocking in react-test.js.\nWe don\'t currently attempt to mock modules automatically, but we do\nrespect require("mock-modules").mock, .dontMock, and .dumpCache.\nI\'m going to keep investigating auto-mocking, since that would move us\nmuch closer to the behavior used within Facebook.\nCloses #154.\nCloses #155.', 'Store dirtyMocks array globally so it can survive dumpCache().\nWhen require("mock-modules").dumpCache() is called, all mock functions\npreviously created continue to refer to the old dirtyMocks array.\nIf we replace that array with a new one, those mock functions will never\nhave their .mockClear() methods called again.\nThe upstream version of mocks.js pulls a similar global trick, and I never\nunderstood why until now.', "Use a separate grunt/config/jsx config file for tests.\nNo longer injecting MOCK as a global constant (it's just a config\nproperty now).\nTurns out the grunt jsx:debug task was never necessary for tests.", 'Merge pull request #193 from benjamn/use-populist-for-testing\nFix tests', "Sync vendor modules from FB.\nBiggest win here is that we'll strip out the console.error from\nEventListener and we won't need to suggest people use a console\npolyfill with the minified build.", '[React Children] Step One: Refactor flattenChildren\nRefactoring flattenChildren so that the traversal code is reusable\nfor other purposes.', '[React Children] Step Two:  Use traverseChildren to perform mapChildren\nUse the new traverseChildren utility to perform mapChildren.\nThe goal is to get as close to the bavior of the semantics of\nArray.prototype.map, but also in a way that understands deeply nested arrays\nand objects.', "[React Children] Step Three: New test case for traverseChildren.\nIf we're going to build utilities off of this, we should have good test\ncoverage.", 'Controlled  and  Components\nThis implements a <select> component that supports value and defaultValue. It also changes <option> to warn when the selected prop is supplied.', 'Fix Markup Rendering in IE\nThis fixes known browser bugs with rendering markup using innerHTML in IE ([[http://support.microsoft.com/kb/276228 | here is an example of one]]).\nThis is a subset of what HTML (and jQuery) does, and we should eventually consider pulling it out into a separate module to reduce code duplication. For now, this is the minimal set of changes needed to unbreak React in production.\nWe can afford to use a subset of what HTML does because we have the luxury of knowing that the markup is generated sanely with proper closing tags, etc.', 'add missing argument to invariant in ReactDOMSelect', "Fix rootElementsByReactRootID bookkeeping in ReactMount.js.\nIt's not always possible to update rootElementsByReactRootID when the\ncontents of the container are re-rendered; for instance, when we call\ndangerouslyReplaceNodeWithMarkup or dangerouslySetInnerHTML. Since\nthis bookkeeping is just trying to warn about potentially problematic\nmanipulations of the root element, and we can be relatively sure that a\nnew element with the same ID is logically the same element, this diff\navoids warning in such cases.", "Use populist for building jasmine test harness package.\nWe're using populist for building the bundle of test modules and their\ndependencies, so it seems worthwhile for consistency to do the same for\nthe test harness.", 'Merge pull request #194 from benjamn/build-jasmine-bundle-with-populist\nUse populist for building jasmine test harness bundle', "Upgrade Commoner and Populist to force upgrade to graceful-fs v2.0.0.\nA silent upgrade from graceful-fs v1.2.2 to v1.2.3 (a dependency for both\nCommoner and Populist) broke the build process, even though tests were\nstill passing. The 2.0.0 version fixes whatever was broken, though I won't\npretend to know exactly what the root cause was.", 'Merge pull request #195 from benjamn/force-upgrade-graceful-fs\nUpgrade Commoner and Populist to force upgrade to graceful-fs v2.0.0', 'Fix tests to silence some warnings due to autobinding', 'Merge pull request #196 from zpao/fix-test-warnings\nFix tests to silence some warnings due to autobinding', 'Remove "Scaling Up"', 'Fix title casing and heading levels', "Remove numbers from URLs.\nThis will let us keep docs in order on the filesystem but have\nreasonable permalinks. If we add something at 02- it doesn't result in\nlots of broken links.", 'Autogen the docs nav\nThis is still the same amount of duplication, except way easier to\nparse. Docs nav now lives in _config.yml and you must restart jekyll\nto see changes to that list (since config is only read at jekyll launch)', 'Tweaked the intro page\nHere are some ideas that I think work better:\n- 15 repetitions of "React". Removed a few.\n- The "two main ideas" weren\'t clearly separated. I put them under different headers and simplified the wording.\n- The "Give it Five Minutes section didn\'t sound as reassuring. Made it sound more certain.', "Add React.version\ngetConfig needs to be a function because grunt.config.data.pkg.version isn't available at the time that grunt/config/jsx/jsx.js is required.\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.", "Don't hard code React version anywhere", "changing back to 'give it five minutes', tweak that sentence", 'grammar error', 'Merge pull request #199 from chenglou/patch-1\nTweaked the intro page', "Merge remote-tracking branch 'upstream/docs-refactor' into HEAD", 'Cleanup "Displaying Data"', 'Cleanup "JSX in Depth"', 'Cleanup "JSX Gotchas"', 'Cleanup "Interactivity and Dynamic UIs"', 'Cleanup "Multiple Components"', 'Cleanup "Reusable Components"', 'Cleanup "Forms"', 'Cleanup "Working With the Browser"', 'Cleanup "More About Refs"', 'Cleanup "Tooling Integration"', 'Cleanup "Reference"\n(unlinked likebutton tutorial - not updated enough for public)', 'Standardized Markdown lists', 'em dashes', 'Remove React.autoBind from examples', 're-bold some text so it stands out better', "Merge branch 'master' into docs-refactor", 'Merge pull request #188 from facebook/docs-refactor\nLook ma, new docs!', 'Update DOM differences docs to include a note about the style attribute.', '[docs] Fix broken links', 'Merge pull request #200 from spicyj/version\nAdd React.version', 'Revert "Merge pull request #200 from spicyj/version"\nThis reverts commit d8893228275cacc65a8632c7416bb023ab4c946f, reversing\nchanges made to 156dffb961ab15f577e0a6aab1abc5efd68f9a9b.', '[docs] fix typo\n"L" is not ":"', 'Write Default Props section', "[docs] Remove @benjamn's TODO for testing", '[docs] Prop validation + cleanup default props', 'Add CHANGELOG at the root, remove from downloads page', 'Re-order entries in changelog\nReact is more important than react-tools so put it first!', '[docs] Make sure JSX comments code is in block', 'Changelog for 0.4.0', 'Blog post for 0.4', "remove likebutton from docs for now\nit has some facebook-ism in there and it's probably shouldn't be on the\nsite.", 'Remove React.autoBind from examples', 'Bump version for v0.4.0']