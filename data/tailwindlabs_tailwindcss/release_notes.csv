Index,Release Note,Release Note With Abstraction
1,"Fixed

Don’t move unknown pseudo-elements to the end of selectors (#10943, #10962)
Inherit gradient stop positions when using variants (#11002)
Honor default to position of gradient when using implicit transparent colors (#11002)
Ensure @tailwindcss/oxide doesn't leak in the stable engine (#10988)
Ensure multiple theme(spacing[5]) calls with bracket notation in arbitrary properties work (#11039)
Normalize arbitrary modifiers (#11057)

Changed

Drop support for Node.js v12 (#11089)
","Fixed
Don’t move unknown pseudo-elements to the end of selectors (#10943, #10962)
Inherit gradient stop positions when using variants (#11002)
Honor default to position of gradient when using implicit transparent colors (#11002)
Ensure @tailwindcss/oxide doesn't leak in the stable engine (#10988)
Ensure multiple theme(spacing[5]) calls with bracket notation in arbitrary properties work (#11039)
Normalize arbitrary modifiers (#11057)
Changed
Drop support for Node.js v12 (#11089)"
2,"Fixed

Fix edge case bug when loading a TypeScript config file with webpack (#10898)
Fix variant, @apply, and important selectors when using :is() or :has() with pseudo-elements (#10903)
Fix safelist config types (#10901)
Fix build errors caused by @tailwindcss/line-clamp warning (#10915, #10919)
Fix ""process is not defined"" error (#10919)
","Fixed
Fix edge case bug when loading a TypeScript config file with webpack (#10898)
Fix variant, @apply, and important selectors when using :is() or :has() with pseudo-elements (#10903)
Fix safelist config types (#10901)
Fix build errors caused by @tailwindcss/line-clamp warning (#10915, #10919)
Fix ""process is not defined"" error (#10919)"
3,"
Tailwind CSS v3.3 is here! Check out the announcement post for a deep dive into all of the cool new stuff.
Added

Support ESM and TypeScript config files (#10785)
Extend default color palette with new 950 shades (#10879)
Add line-height modifier support to font-size utilities (#9875)
Add support for using variables as arbitrary values without var(...) (#9880, #9962)
Add logical properties support for inline direction (#10166)
Add hyphens utilities (#10071)
Add from-{position}, via-{position} and to-{position} utilities (#10886)
Add list-style-image utilities (#10817)
Add caption-side utilities (#10470)
Add line-clamp utilities from @tailwindcss/line-clamp to core (#10768, #10876, #10862)
Add delay-0 and duration-0 utilities (#10294)
Add justify-normal and justify-stretch utilities (#10560)
Add content-normal and content-stretch utilities (#10645)
Add whitespace-break-spaces utility (#10729)
Add support for configuring default font-variation-settings for a font-family (#10034, #10515)

Fixed

Disallow using multiple selectors in arbitrary variants (#10655)
Sort class lists deterministically for Prettier plugin (#10672)
Ensure CLI builds have a non-zero exit code on failure (#10703)
Ensure module dependencies for value null, is an empty Set (#10877)
Fix format assumption when resolving module dependencies (#10878)

Changed

Mark rtl and ltr variants as stable and remove warnings (#10764)
Use inset instead of top, right, bottom, and left properties (#10765)
Make dark and rtl/ltr variants insensitive to DOM order (#10766)
Use :is to make important selector option insensitive to DOM order (#10835)
","Tailwind CSS v3.3 is here! Check out the announcement post for a deep dive into all of the cool new stuff.
Added
Support ESM and TypeScript config files (#10785)
Extend default color palette with new 950 shades (#10879)
Add line-height modifier support to font-size utilities (#9875)
Add support for using variables as arbitrary values without var(...) (#9880, #9962)
Add logical properties support for inline direction (#10166)
Add hyphens utilities (#10071)
Add from-{position}, via-{position} and to-{position} utilities (#10886)
Add list-style-image utilities (#10817)
Add caption-side utilities (#10470)
Add line-clamp utilities from @tailwindcss/line-clamp to core (#10768, #10876, #10862)
Add delay-0 and duration-0 utilities (#10294)
Add justify-normal and justify-stretch utilities (#10560)
Add content-normal and content-stretch utilities (#10645)
Add whitespace-break-spaces utility (#10729)
Add support for configuring default font-variation-settings for a font-family (#10034, #10515)
Fixed
Disallow using multiple selectors in arbitrary variants (#10655)
Sort class lists deterministically for Prettier plugin (#10672)
Ensure CLI builds have a non-zero exit code on failure (#10703)
Ensure module dependencies for value null, is an empty Set (#10877)
Fix format assumption when resolving module dependencies (#10878)
Changed
Mark rtl and ltr variants as stable and remove warnings (#10764)
Use inset instead of top, right, bottom, and left properties (#10765)
Make dark and rtl/ltr variants insensitive to DOM order (#10766)
Use :is to make important selector option insensitive to DOM order (#10835)"
4,"Fixed

Fix use of :where(.btn) when matching !btn (#10601)
Revert including outline-color in transition and transition-colors by default (#10604)
","Fixed
Fix use of :where(.btn) when matching !btn (#10601)
Revert including outline-color in transition and transition-colors by default (#10604)"
5,"Fixed

Fix installation failing with yarn and pnpm by dropping oxide-api-shim (add1636)
","Fixed
Fix installation failing with yarn and pnpm by dropping oxide-api-shim (add1636)"
6,"Added

Add standalone CLI build for 64-bit Windows on ARM (node16-win-arm64) (#10001)

Fixed

Cleanup unused variantOrder (#9829)
Fix foo-[abc]/[def] not being handled correctly (#9866)
Add container queries plugin to standalone CLI (#9865)
Support renaming of output files by PostCSS plugins in CLI (#9944)
Improve return value of resolveConfig, unwrap ResolvableTo (#9972)
Clip unbalanced brackets in arbitrary values (#9973)
Don’t reorder webkit scrollbar pseudo elements (#9991)
Deterministic sorting of arbitrary variants (#10016)
Add data key to theme types (#10023)
Prevent invalid arbitrary variant selectors from failing the build (#10059)
Properly handle subtraction followed by a variable (#10074)
Fix missing string[] in the theme.dropShadow types (#10072)
Update list of length units (#10100)
Fix not matching arbitrary properties when closely followed by square brackets (#10212)
Allow direct nesting in root or @layer nodes (#10229)
Don't prefix classes in arbitrary variants (#10214)
Fix perf regression when checking for changed content (#10234)
Fix missing blocklist member in the Config type (#10239)
Escape group names in selectors (#10276)
Consider earlier variants before sorting functions (#10288)
Allow variants with slashes (#10336)
Ensure generated CSS is always sorted in the same order for a given set of templates (#10382)
Handle variants when the same class appears multiple times in a selector (#10397)
Handle group/peer variants with quoted strings (#10400)
Parse alpha value from rgba/hsla colors when using variables (#10429)
Sort by layer inside variants layer (#10505)
Add --watch=always option to prevent exit when stdin closes (#9966)

Changed

Alphabetize theme keys in default config (#9953)
Update esbuild to v17 (#10368)
Include outline-color in transition and transition-colors utilities (#10385)
","Added
Add standalone CLI build for 64-bit Windows on ARM (node16-win-arm64) (#10001)
Fixed
Cleanup unused variantOrder (#9829)
Fix foo-[abc]/[def] not being handled correctly (#9866)
Add container queries plugin to standalone CLI (#9865)
Support renaming of output files by PostCSS plugins in CLI (#9944)
Improve return value of resolveConfig, unwrap ResolvableTo (#9972)
Clip unbalanced brackets in arbitrary values (#9973)
Don’t reorder webkit scrollbar pseudo elements (#9991)
Deterministic sorting of arbitrary variants (#10016)
Add data key to theme types (#10023)
Prevent invalid arbitrary variant selectors from failing the build (#10059)
Properly handle subtraction followed by a variable (#10074)
Fix missing string[] in the theme.dropShadow types (#10072)
Update list of length units (#10100)
Fix not matching arbitrary properties when closely followed by square brackets (#10212)
Allow direct nesting in root or @layer nodes (#10229)
Don't prefix classes in arbitrary variants (#10214)
Fix perf regression when checking for changed content (#10234)
Fix missing blocklist member in the Config type (#10239)
Escape group names in selectors (#10276)
Consider earlier variants before sorting functions (#10288)
Allow variants with slashes (#10336)
Ensure generated CSS is always sorted in the same order for a given set of templates (#10382)
Handle variants when the same class appears multiple times in a selector (#10397)
Handle group/peer variants with quoted strings (#10400)
Parse alpha value from rgba/hsla colors when using variables (#10429)
Sort by layer inside variants layer (#10505)
Add --watch=always option to prevent exit when stdin closes (#9966)
Changed
Alphabetize theme keys in default config (#9953)
Update esbuild to v17 (#10368)
Include outline-color in transition and transition-colors utilities (#10385)"
7,"Added

Add blocklist option to prevent generating unwanted CSS (#9812)

Fixed

Fix watching of files on Linux when renames are involved (#9796)
Make sure errors are always displayed when watching for changes (#9810)
","Added
Add blocklist option to prevent generating unwanted CSS (#9812)
Fixed
Fix watching of files on Linux when renames are involved (#9796)
Make sure errors are always displayed when watching for changes (#9810)"
8,"Fixed

Fixed use of raw content in the CLI (#9773)
Pick up changes from files that are both context and content deps (#9787)
Sort pseudo-elements ONLY after classes when using variants and @apply (#9765)
Support important utilities in the safelist (pattern must include a !) (#9791)
","Fixed
Fixed use of raw content in the CLI (#9773)
Pick up changes from files that are both context and content deps (#9787)
Sort pseudo-elements ONLY after classes when using variants and @apply (#9765)
Support important utilities in the safelist (pattern must include a !) (#9791)"
9,"Fixed

Escape special characters in resolved content base paths (#9650)
Don't reuse container for array returning variant functions (#9644)
Exclude non-relevant selectors when generating rules with the important modifier (#9677)
Fix merging of arrays during config resolution (#9706)
Ensure configured font-feature-settings are included in Preflight (#9707)
Fix fractional values not being parsed properly inside arbitrary properties (#9705)
Fix incorrect selectors when using @apply in selectors with combinators and pseudos (#9722)
Fix cannot read properties of undefined (reading 'modifier') (#9656, aa979d6)
","Fixed
Escape special characters in resolved content base paths (#9650)
Don't reuse container for array returning variant functions (#9644)
Exclude non-relevant selectors when generating rules with the important modifier (#9677)
Fix merging of arrays during config resolution (#9706)
Ensure configured font-feature-settings are included in Preflight (#9707)
Fix fractional values not being parsed properly inside arbitrary properties (#9705)
Fix incorrect selectors when using @apply in selectors with combinators and pseudos (#9722)
Fix cannot read properties of undefined (reading 'modifier') (#9656, aa979d6)"
10,"Fixed

Fix missing supports in types (#9616)
Fix missing PostCSS dependencies in the CLI (#9617)
Ensure micromatch is a proper CLI dependency (#9620)
Ensure modifier values exist when using a modifiers object for matchVariant (ba6551d)
","Fixed
Fix missing supports in types (#9616)
Fix missing PostCSS dependencies in the CLI (#9617)
Ensure micromatch is a proper CLI dependency (#9620)
Ensure modifier values exist when using a modifiers object for matchVariant (ba6551d)"
11,"We just released Tailwind CSS v3.2! Read the announcement post for more details about the most exciting new features.

Added

Add new @config directive (#9405)
Add new relative: true option to resolve content paths relative to the config file (#9396)
Add new supports-* variant (#9453)
Add new min-* and max-* variants (#9558)
Add new aria-* variants (#9557, #9588)
Add new data-* variants (#9559, #9588)
Add new break-keep utility for word-break: keep-all (#9393)
Add new collapse utility for visibility: collapse (#9181)
Add new fill-none utility for fill: none (#9403)
Add new stroke-none utility for stroke: none (#9403)
Add new place-content-baseline utility for place-content: baseline (#9498)
Add new place-items-baseline utility for place-items: baseline (#9507)
Add new content-baseline utility for align-content: baseline (#9507)
Add support for configuring default font-feature-settings for a font family (#9039)
Add standalone CLI build for 32-bit Linux on ARM (node16-linux-armv7) (#9084)
Add future flag to disable color opacity utility plugins (#9088)
Add negative value support for outline-offset (#9136)
Add support for modifiers to matchUtilities (#9541)
Allow negating utilities using min/max/clamp (#9237)
Implement fallback plugins when there is ambiguity between plugins when using arbitrary values (#9376)
Support sort function in matchVariant (#9423)
Upgrade to postcss-nested v6.0 (#9546)

Fixed

Use absolute paths when resolving changed files for resilience against working directory changes (#9032)
Fix ring color utility generation when using respectDefaultRingColorOpacity (#9070)
Sort tags before classes when @apply-ing a selector with joined classes (#9107)
Remove invalid outline-hidden utility (#9147)
Honor the hidden attribute on elements in preflight (#9174)
Don't stop watching atomically renamed files (#9173, #9215)
Fix duplicate utilities issue causing memory leaks (#9208)
Fix fontFamily config TypeScript types (#9214)
Handle variants on complex selector utilities (#9262)
Fix shared config mutation issue (#9294)
Fix ordering of parallel variants (#9282)
Handle variants in utility selectors using :where() and :has() (#9309)
Improve data type analysis for arbitrary values (#9320)
Don't emit generated utilities with invalid uses of theme functions (#9319)
Revert change that only listened for stdin close on TTYs (#9331)
Ignore unset values (like null or undefined) when resolving the classList for intellisense (#9385)
Improve type checking for formal syntax (#9349, #9448)
Fix incorrect required content key in custom plugin configs (#9502, #9545)
Fix content path detection on Windows (#9569)
Ensure --content is used in the CLI when passed (#9587)
","We just released Tailwind CSS v3.2! Read the announcement post for more details about the most exciting new features.
Added
Add new @config directive (#9405)
Add new relative: true option to resolve content paths relative to the config file (#9396)
Add new supports- variant (#9453)
Add new min- and max- variants (#9558)
Add new aria- variants (#9557, #9588)
Add new data-* variants (#9559, #9588)
Add new break-keep utility for word-break: keep-all (#9393)
Add new collapse utility for visibility: collapse (#9181)
Add new fill-none utility for fill: none (#9403)
Add new stroke-none utility for stroke: none (#9403)
Add new place-content-baseline utility for place-content: baseline (#9498)
Add new place-items-baseline utility for place-items: baseline (#9507)
Add new content-baseline utility for align-content: baseline (#9507)
Add support for configuring default font-feature-settings for a font family (#9039)
Add standalone CLI build for 32-bit Linux on ARM (node16-linux-armv7) (#9084)
Add future flag to disable color opacity utility plugins (#9088)
Add negative value support for outline-offset (#9136)
Add support for modifiers to matchUtilities (#9541)
Allow negating utilities using min/max/clamp (#9237)
Implement fallback plugins when there is ambiguity between plugins when using arbitrary values (#9376)
Support sort function in matchVariant (#9423)
Upgrade to postcss-nested v6.0 (#9546)
Fixed
Use absolute paths when resolving changed files for resilience against working directory changes (#9032)
Fix ring color utility generation when using respectDefaultRingColorOpacity (#9070)
Sort tags before classes when @apply-ing a selector with joined classes (#9107)
Remove invalid outline-hidden utility (#9147)
Honor the hidden attribute on elements in preflight (#9174)
Don't stop watching atomically renamed files (#9173, #9215)
Fix duplicate utilities issue causing memory leaks (#9208)
Fix fontFamily config TypeScript types (#9214)
Handle variants on complex selector utilities (#9262)
Fix shared config mutation issue (#9294)
Fix ordering of parallel variants (#9282)
Handle variants in utility selectors using :where() and :has() (#9309)
Improve data type analysis for arbitrary values (#9320)
Don't emit generated utilities with invalid uses of theme functions (#9319)
Revert change that only listened for stdin close on TTYs (#9331)
Ignore unset values (like null or undefined) when resolving the classList for intellisense (#9385)
Improve type checking for formal syntax (#9349, #9448)
Fix incorrect required content key in custom plugin configs (#9502, #9545)
Fix content path detection on Windows (#9569)
Ensure --content is used in the CLI when passed (#9587)"
12,"Fixed

Don’t prefix classes within reused arbitrary variants (#8992)
Fix usage of alpha values inside single-named colors that are functions (#9008)
Fix @apply of user utilities when negative and non-negative versions both exist (#9027)
","Fixed
Don’t prefix classes within reused arbitrary variants (#8992)
Fix usage of alpha values inside single-named colors that are functions (#9008)
Fix @apply of user utilities when negative and non-negative versions both exist (#9027)"
13,"Fixed

Don't rewrite source maps for @layer rules (#8971)

Added

Added types for resolveConfig (#8924)
","Fixed
Don't rewrite source maps for @layer rules (#8971)
Added
Added types for resolveConfig (#8924)"
14,"Fixed

Fix usage on Node 12.x (b4e637e)
Handle theme keys with slashes when using theme() in CSS (#8831)
","Fixed
Fix usage on Node 12.x (b4e637e)
Handle theme keys with slashes when using theme() in CSS (#8831)"
15,"Added

Support configuring a default font-weight for each font size utility (#8763)
Add support for alpha values in safe list (#8774)

Fixed

Improve types to support fallback values in the CSS-in-JS syntax used in plugin APIs (#8762)
Support including tailwindcss and autoprefixer in postcss.config.js in standalone CLI (#8769)
Fix using special-characters as prefixes (#8772)
Don’t prefix classes used within arbitrary variants (#8773)
Add more explicit types for the default theme (#8780)
","Added
Support configuring a default font-weight for each font size utility (#8763)
Add support for alpha values in safe list (#8774)
Fixed
Improve types to support fallback values in the CSS-in-JS syntax used in plugin APIs (#8762)
Support including tailwindcss and autoprefixer in postcss.config.js in standalone CLI (#8769)
Fix using special-characters as prefixes (#8772)
Don’t prefix classes used within arbitrary variants (#8773)
Add more explicit types for the default theme (#8780)"
16,"Fixed

Provide default to <alpha-value> when using theme() (#8652)
Detect arbitrary variants with quotes (#8687)
Don’t add spaces around raw / that are preceded by numbers (#8688)
","Fixed
Provide default to  when using theme() (#8652)
Detect arbitrary variants with quotes (#8687)
Don’t add spaces around raw / that are preceded by numbers (#8688)"
17,"Fixed

Fix extraction of multi-word utilities with arbitrary values and quotes (#8604)
Fix casing of import of corePluginList type definition (#8587)
Ignore PostCSS nodes returned by addVariant (#8608)
Fix missing spaces around arithmetic operators (#8615)
Detect alpha value in CSS theme() function when using quotes (#8625)
Fix ""Maximum call stack size exceeded"" bug (#8636)
Allow functions returning parallel variants to mutate the container (#8622)
Remove text opacity CSS variables from ::marker (#8622)
","Fixed
Fix extraction of multi-word utilities with arbitrary values and quotes (#8604)
Fix casing of import of corePluginList type definition (#8587)
Ignore PostCSS nodes returned by addVariant (#8608)
Fix missing spaces around arithmetic operators (#8615)
Detect alpha value in CSS theme() function when using quotes (#8625)
Fix ""Maximum call stack size exceeded"" bug (#8636)
Allow functions returning parallel variants to mutate the container (#8622)
Remove text opacity CSS variables from ::marker (#8622)"
18,"Fixed

Ensure \ is a valid arbitrary variant token (#8576)
Enable postcss-import in the CLI by default in watch mode (#8574, #8580)
","Fixed
Ensure \ is a valid arbitrary variant token (#8576)
Enable postcss-import in the CLI by default in watch mode (#8574, #8580)"
19,"Fixed

Fix candidate extractor regression (#8558)
Split ::backdrop into separate defaults group (#8567)
Fix postcss plugin type (#8564)
Fix class detection in markdown code fences and slim templates (#8569)
","Fixed
Fix candidate extractor regression (#8558)
Split ::backdrop into separate defaults group (#8567)
Fix postcss plugin type (#8564)
Fix class detection in markdown code fences and slim templates (#8569)"
20,"We just released Tailwind CSS v3.1 — the first new feature release since v3.0 came out last year!
Read the announcement post for all the details, and watch the YouTube video for a tour of some of the highlights.

Added

Support PostCSS Document nodes (#7291)
Add text-start and text-end utilities (#6656)
Support customizing class name when using darkMode: 'class' (#5800)
Add --poll option to the CLI (#7725)
Add new border-spacing utilities (#7102)
Add enabled variant (#7905)
Add TypeScript types for the tailwind.config.js file (#7891)
Add backdrop variant (#7924, #8526)
Add grid-flow-dense utility (#8193)
Add mix-blend-plus-lighter utility (#8288)
Add arbitrary variants (#8299)
Add experimental matchVariant API (#8310, 34fd0fb8)
Add prefers-contrast media query variants (#8410)
Add opacity support when referencing colors with theme function (#8416)
Add postcss-import support to the CLI (#8437)
Add optional variant (#8486)
Add <alpha-value> placeholder support for custom colors (#8501)

Fixed

Types: allow for arbitrary theme values (for 3rd party plugins) (#7926)
Don’t split vars with numbers in them inside arbitrary values (#8091)
Require matching prefix when detecting negatives (#8121)
Handle duplicate At Rules without children (#8122)
Allow arbitrary values with commas in @apply (#8125)
Fix intellisense for plugins with multiple @apply rules (#8213)
Improve type detection for arbitrary color values (#8201)
Support PostCSS config options in config file in CLI (#8226)
Remove default [hidden] style in preflight (#8248)
Only check selectors containing base apply candidates for circular dependencies (#8222)
Rewrite default class extractor (#8204)
Move important selector to the front when @apply-ing selector-modifying variants in custom utilities (#8313)
Error when registering an invalid custom variant (#8345)
Create tailwind.config.cjs file in ESM package when running init (#8363)
Fix matchVariants that use at-rules and placeholders (#8392)
Improve types of the tailwindcss/plugin (#8400)
Allow returning parallel variants from addVariant or matchVariant callback functions (#8455)
Try using local postcss installation first in the CLI (#8270)
Allow default ring color to be a function (#7587)
Don't inherit to value from parent gradients (#8489)
Remove process dependency from log functions (#8530)
Ensure we can use @import 'tailwindcss/...' without node_modules (#8537)

Changed

Only apply hover styles when supported (future) (#8394)
Respect default ring color opacity (future) (#8448, 3f4005e)
","We just released Tailwind CSS v3.1 — the first new feature release since v3.0 came out last year!
Read the announcement post for all the details, and watch the YouTube video for a tour of some of the highlights.
Added
Support PostCSS Document nodes (#7291)
Add text-start and text-end utilities (#6656)
Support customizing class name when using darkMode: 'class' (#5800)
Add --poll option to the CLI (#7725)
Add new border-spacing utilities (#7102)
Add enabled variant (#7905)
Add TypeScript types for the tailwind.config.js file (#7891)
Add backdrop variant (#7924, #8526)
Add grid-flow-dense utility (#8193)
Add mix-blend-plus-lighter utility (#8288)
Add arbitrary variants (#8299)
Add experimental matchVariant API (#8310, 34fd0fb8)
Add prefers-contrast media query variants (#8410)
Add opacity support when referencing colors with theme function (#8416)
Add postcss-import support to the CLI (#8437)
Add optional variant (#8486)
Add  placeholder support for custom colors (#8501)
Fixed
Types: allow for arbitrary theme values (for 3rd party plugins) (#7926)
Don’t split vars with numbers in them inside arbitrary values (#8091)
Require matching prefix when detecting negatives (#8121)
Handle duplicate At Rules without children (#8122)
Allow arbitrary values with commas in @apply (#8125)
Fix intellisense for plugins with multiple @apply rules (#8213)
Improve type detection for arbitrary color values (#8201)
Support PostCSS config options in config file in CLI (#8226)
Remove default [hidden] style in preflight (#8248)
Only check selectors containing base apply candidates for circular dependencies (#8222)
Rewrite default class extractor (#8204)
Move important selector to the front when @apply-ing selector-modifying variants in custom utilities (#8313)
Error when registering an invalid custom variant (#8345)
Create tailwind.config.cjs file in ESM package when running init (#8363)
Fix matchVariants that use at-rules and placeholders (#8392)
Improve types of the tailwindcss/plugin (#8400)
Allow returning parallel variants from addVariant or matchVariant callback functions (#8455)
Try using local postcss installation first in the CLI (#8270)
Allow default ring color to be a function (#7587)
Don't inherit to value from parent gradients (#8489)
Remove process dependency from log functions (#8530)
Ensure we can use @import 'tailwindcss/...' without node_modules (#8537)
Changed
Only apply hover styles when supported (future) (#8394)
Respect default ring color opacity (future) (#8448, 3f4005e)"
21,"Fixed

Prevent nesting plugin from breaking other plugins (#7563)
Recursively collapse adjacent rules (#7565)
Preserve source maps for generated CSS (#7588)
Split box shadows on top-level commas only (#7479)
Use local user CSS cache for @apply (#7524)
Invalidate context when main CSS changes (#7626)
Only add ! to selector class matching template candidate when using important modifier with multi-class selectors (#7664)
Correctly parse and prefix animation names with dots (#7163)
Fix extraction from template literal/function with array (#7481)
Don't output unparsable arbitrary values (#7789)
Fix generation of div:not(.foo) if .foo is never defined (#7815)
Allow for custom properties in rgb, rgba, hsl and hsla colors (#7933)
Remove autoprefixer as explicit peer-dependency to avoid invalid warnings in situations where it isn't actually needed (#7949)
Ensure the percentage data type is validated correctly (#8015)

Changed

Replace chalk with picocolors (#6039)
Replace cosmiconfig with lilconfig (#6039)
Update cssnano to avoid removing empty variables when minifying (#7818)
","Fixed
Prevent nesting plugin from breaking other plugins (#7563)
Recursively collapse adjacent rules (#7565)
Preserve source maps for generated CSS (#7588)
Split box shadows on top-level commas only (#7479)
Use local user CSS cache for @apply (#7524)
Invalidate context when main CSS changes (#7626)
Only add ! to selector class matching template candidate when using important modifier with multi-class selectors (#7664)
Correctly parse and prefix animation names with dots (#7163)
Fix extraction from template literal/function with array (#7481)
Don't output unparsable arbitrary values (#7789)
Fix generation of div:not(.foo) if .foo is never defined (#7815)
Allow for custom properties in rgb, rgba, hsl and hsla colors (#7933)
Remove autoprefixer as explicit peer-dependency to avoid invalid warnings in situations where it isn't actually needed (#7949)
Ensure the percentage data type is validated correctly (#8015)
Changed
Replace chalk with picocolors (#6039)
Replace cosmiconfig with lilconfig (#6039)
Update cssnano to avoid removing empty variables when minifying (#7818)"
22,"Fixed

Remove opacity variables from :visited pseudo class (#7458)
Support arbitrary values + calc + theme with quotes (#7462)
Don't duplicate layer output when scanning content with variants + wildcards (#7478)
Implement getClassOrder instead of sortClassList (#7459)
","Fixed
Remove opacity variables from :visited pseudo class (#7458)
Support arbitrary values + calc + theme with quotes (#7462)
Don't duplicate layer output when scanning content with variants + wildcards (#7478)
Implement getClassOrder instead of sortClassList (#7459)"
23,"Fixed

Temporarily move postcss to dependencies (#7424)
","Fixed
Temporarily move postcss to dependencies (#7424)"
24,"Fixed

Move prettier plugin to dev dependencies (#7418)
","Fixed
Move prettier plugin to dev dependencies (#7418)"
25,"Added

Expose context.sortClassList(classes) (#7412)
","Added
Expose context.sortClassList(classes) (#7412)"
26,"Fixed

Fix preflight border color fallback (#7288)
Correctly parse shadow lengths without a leading zero (#7289)
Don't crash when scanning extremely long class candidates (#7331)
Use less hacky fix for URLs detected as custom properties (#7275)
Correctly generate negative utilities when dash is before the prefix (#7295)
Detect prefixed negative utilities in the safelist (#7295)
","Fixed
Fix preflight border color fallback (#7288)
Correctly parse shadow lengths without a leading zero (#7289)
Don't crash when scanning extremely long class candidates (#7331)
Use less hacky fix for URLs detected as custom properties (#7275)
Correctly generate negative utilities when dash is before the prefix (#7295)
Detect prefixed negative utilities in the safelist (#7295)"
27,"Fixed

Fix @apply order regression (in addComponents, addUtilities, ...) (#7232)
Quick fix for incorrect arbitrary properties when using URLs (#7252)
","Fixed
Fix @apply order regression (in addComponents, addUtilities, ...) (#7232)
Quick fix for incorrect arbitrary properties when using URLs (#7252)"
28,"Fixed

Remove false positive warning in CLI when using the --content option (#7220)
","Fixed
Remove false positive warning in CLI when using the --content option (#7220)"
29,"Fixed

Ensure to transpile the PostCSS Nesting plugin (tailwindcss/nesting) (#7080)
Improve various warnings (#7118)
Fix grammatical mistake (cca5a38)
","Fixed
Ensure to transpile the PostCSS Nesting plugin (tailwindcss/nesting) (#7080)
Improve various warnings (#7118)
Fix grammatical mistake (cca5a38)"
30,"Fixed

Temporarily remove optional chaining in nesting plugin (#7077)
","Fixed
Temporarily remove optional chaining in nesting plugin (#7077)"
31,"Added

Show warnings for invalid content config (#7065)

Fixed

Only emit utility/component variants when those layers exist (#7066)
Ensure nesting plugins can receive options (#7016)
","Added
Show warnings for invalid content config (#7065)
Fixed
Only emit utility/component variants when those layers exist (#7066)
Ensure nesting plugins can receive options (#7016)"
32,"Fixed

Fix consecutive builds with at apply producing different CSS (#6999)
","Fixed
Fix consecutive builds with at apply producing different CSS (#6999)"
33,"Fixed

Allow use of falsy values in theme config (#6917)
Ensure we can apply classes that are grouped with non-class selectors (#6922)
Improve standalone CLI compatibility on Linux by switching to the linuxstatic build target (#6914)
Ensure @apply works consistently with or without @layer (#6938)
Only emit defaults when using base layer (#6926)
Emit plugin defaults regardless of usage (#6926)
Move default border color back to preflight (#6926)
Change experimental.optimizeUniversalDefaults to only work with @tailwind base (#6926)
","Fixed
Allow use of falsy values in theme config (#6917)
Ensure we can apply classes that are grouped with non-class selectors (#6922)
Improve standalone CLI compatibility on Linux by switching to the linuxstatic build target (#6914)
Ensure @apply works consistently with or without @layer (#6938)
Only emit defaults when using base layer (#6926)
Emit plugin defaults regardless of usage (#6926)
Move default border color back to preflight (#6926)
Change experimental.optimizeUniversalDefaults to only work with @tailwind base (#6926)"
34,"Fixed

Preserve casing of CSS variables added by plugins (#6888)
Ignore content paths that are passed in but don't actually exist (#6901)
Revert change that applies Tailwind's defaults in isolated environments like CSS modules (9fdc391)
","Fixed
Preserve casing of CSS variables added by plugins (#6888)
Ignore content paths that are passed in but don't actually exist (#6901)
Revert change that applies Tailwind's defaults in isolated environments like CSS modules (9fdc391)"
35,"Fixed

Fix @apply in files without @tailwind directives (#6580, #6875)
CLI: avoid unnecessary writes to output files (#6550)

Added

Allow piping data into the CLI (#6876)
","Fixed
Fix @apply in files without @tailwind directives (#6580, #6875)
CLI: avoid unnecessary writes to output files (#6550)
Added
Allow piping data into the CLI (#6876)"
36,"Fixed

Improve DEBUG flag (#6797, #6804)
Ensure we can use < and > characters in modifiers (#6851)
Validate theme() works in arbitrary values (#6852)
Properly detect theme() value usage in arbitrary properties (#6854)
Improve collapsing of duplicate declarations (#6856)
Remove support for TAILWIND_MODE=watch (#6858)
","Fixed
Improve DEBUG flag (#6797, #6804)
Ensure we can use < and > characters in modifiers (#6851)
Validate theme() works in arbitrary values (#6852)
Properly detect theme() value usage in arbitrary properties (#6854)
Improve collapsing of duplicate declarations (#6856)
Remove support for TAILWIND_MODE=watch (#6858)"
37,"Fixed

Reduce specificity of abbr rule in preflight (#6671)
Support HSL with hue units in arbitrary values (#6726)
Add node16-linux-arm64 target for standalone CLI (#6693)
","Fixed
Reduce specificity of abbr rule in preflight (#6671)
Support HSL with hue units in arbitrary values (#6726)
Add node16-linux-arm64 target for standalone CLI (#6693)"
38,"Fixed

Don't mutate custom color palette when overriding per-plugin colors (#6546)
Improve circular dependency detection when using @apply (#6588)
Only generate variants for non-user layers (#6589)
Properly extract classes with arbitrary values in arrays and classes followed by escaped quotes (#6590)
Improve jsx interpolation candidate matching (#6593)
Ensure @apply of a rule inside an AtRule works (#6594)



Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)
","Fixed
Don't mutate custom color palette when overriding per-plugin colors (#6546)
Improve circular dependency detection when using @apply (#6588)
Only generate variants for non-user layers (#6589)
Properly extract classes with arbitrary values in arrays and classes followed by escaped quotes (#6590)
Improve jsx interpolation candidate matching (#6593)
Ensure @apply of a rule inside an AtRule works (#6594)
Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)"
39,"Fixed

Support square bracket notation in paths (#6519)
Ensure all plugins are executed for a given candidate (#6540)



Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)
","Fixed
Support square bracket notation in paths (#6519)
Ensure all plugins are executed for a given candidate (#6540)
Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)"
40,"Fixed

Revert: add li to list-style reset (9777562d)



Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)
","Fixed
Revert: add li to list-style reset (9777562d)
Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)"
41,"Fixed

Insert always-on defaults layer in correct spot (#6526)



Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)
","Fixed
Insert always-on defaults layer in correct spot (#6526)
Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)"
42,"Added

Warn about invalid globs in content (#6449)
Add standalone tailwindcss CLI (#6506)
Add li to list-style reset (00f60e6)

Fixed

Don't output unparsable values (#6469)
Fix text decoration utilities from overriding the new text decoration color/style/thickness utilities when used with a modifier (#6378)
Move defaults to their own always-on layer (#6500)
Support negative values in safelist patterns (6480)



Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)
","Added
Warn about invalid globs in content (#6449)
Add standalone tailwindcss CLI (#6506)
Add li to list-style reset (00f60e6)
Fixed
Don't output unparsable values (#6469)
Fix text decoration utilities from overriding the new text decoration color/style/thickness utilities when used with a modifier (#6378)
Move defaults to their own always-on layer (#6500)
Support negative values in safelist patterns (6480)
Linux (x64)
macOS (arm64)
macOS (x64)
Windows (x64)"
43,"Fixed

Temporarily disable optimize universal defaults, fixes issue with transforms/filters/rings not being @apply-able in CSS modules/Svelte components/Vue components (#6461)
","Fixed
Temporarily disable optimize universal defaults, fixes issue with transforms/filters/rings not being @apply-able in CSS modules/Svelte components/Vue components (#6461)"
44,"Fixed

Ensure complex variants with multiple classes work (#6311)
Re-add default interop to public available functions (#6348)
Detect circular dependencies when using @apply (#6365)
Fix defaults optimization when vendor prefixes are involved (#6369)
","Fixed
Ensure complex variants with multiple classes work (#6311)
Re-add default interop to public available functions (#6348)
Detect circular dependencies when using @apply (#6365)
Fix defaults optimization when vendor prefixes are involved (#6369)"
45,"Tailwind CSS v3.0 is here — bringing incredible performance gains, huge workflow improvements, and a seriously ridiculous number of new features.
Read the announcement post for all the details.
Added

Add colored box shadow utilities (#5979)
Add native aspect-ratio utilities (#5359)
Add column utilities (#5457)
Add break-before, break-inside and break-after utilities (#5530)
Add text-indent utilities (#5449)
Add text-decoration-{color/style/thickness/offset} utilities (#5760, #6004)
Add outline-style, outline-color, outline-width and outline-offset utilities (#5887)
Add align-sub and align-super vertical-align utilities (#5486)
Add accent-color utilities (#5387)
Add scroll-snap utilities (#5637)
Add scroll-behavior utilities (#5388)
Add touch-action utilities (#5603, #6115)
Add flex-basis utilities (#5671)
Add grow-* and shrink-* utilities, deprecate flex-grow-* and flex-shrink-* (#5733)
Add border-x and border-y width and color utilities (#5639)
Add border-hidden utility (#5485)
Add overflow-clip, overflow-x-clip and overflow-y-clip utilities (#5630)
Add inherit to default color palette (#5597)
Add full color palette for fill-* and stroke-* utilities (#5933)
Add fit-content values for min/max-width/height utilities (#5638)
Add min/max-content values for min/max-height utilities (#5729)
Add will-change utilities (#5448)
Add all standard cursor-* values by default (#5734)
Add print variant for targeting printed media (#5885)
Add placeholder variant (#6106)
Add file variant for ::file-selector-button pseudo element (#4936)
Add [open] variant (#5627)
Add portrait and landscape variants (#6046)
Add menu reset to preflight (#6213)
Add comprehensive ""arbitrary value"" support (#5568, #6233, #6259, #6258, #6283)
Add ""arbitrary properties"" support (#6161)
Add first-class negative value support (#5709, c48e629)
Add new declarative addVariant API (#5809)

Changed

Remove AOT engine, make JIT the default (#5340)
Enable extended color palette by default with updated color names (#5384)
Rename overflow-clip to text-clip and overflow-ellipsis to text-ellipsis (#5630)
Deprecate decoration-slice and decoration-break in favor box-decoration-slice and box-decoration-break (#6004)
Move vertical-align values to config file instead of hard-coding (#5487)
Throw when trying to @apply the group class (#4666)
Remove dependency on modern-normalize, inline and consolidate with Preflight (#5358)
Remove prefix as a function (#5829)
Don't use pointer cursor on disabled buttons by default (#5772)
Set default content value in preflight instead of within each before/after utility (#5820)
Preserve original color format when adding opacity whenever possible (#5154)
Unify config callback helpers into single object (#5382)


Thanks to everyone who contributed to this release: @95jonpet, @AviAvinav, @DavydeVries, @DoctorDerek, @MatteoGauthier, @MichaelAllenWarner, @RobinMalfait, @TCatinaud, @adamwathan, @bradlc, @bytedance, @codytooker, @dance2die, @dcastil, @ericbf, @geshii, @hardfist, @htunnicliff, @iksaku, @innocenzi, @kwaa, @lukewarlow, @nifte, @reinink, @sachinraja, @seanpdoyle, @xiBread, @xzfd1010","Tailwind CSS v3.0 is here — bringing incredible performance gains, huge workflow improvements, and a seriously ridiculous number of new features.
Read the announcement post for all the details.
Added
Add colored box shadow utilities (#5979)
Add native aspect-ratio utilities (#5359)
Add column utilities (#5457)
Add break-before, break-inside and break-after utilities (#5530)
Add text-indent utilities (#5449)
Add text-decoration-{color/style/thickness/offset} utilities (#5760, #6004)
Add outline-style, outline-color, outline-width and outline-offset utilities (#5887)
Add align-sub and align-super vertical-align utilities (#5486)
Add accent-color utilities (#5387)
Add scroll-snap utilities (#5637)
Add scroll-behavior utilities (#5388)
Add touch-action utilities (#5603, #6115)
Add flex-basis utilities (#5671)
Add grow- and shrink- utilities, deprecate flex-grow- and flex-shrink- (#5733)
Add border-x and border-y width and color utilities (#5639)
Add border-hidden utility (#5485)
Add overflow-clip, overflow-x-clip and overflow-y-clip utilities (#5630)
Add inherit to default color palette (#5597)
Add full color palette for fill- and stroke- utilities (#5933)
Add fit-content values for min/max-width/height utilities (#5638)
Add min/max-content values for min/max-height utilities (#5729)
Add will-change utilities (#5448)
Add all standard cursor-* values by default (#5734)
Add print variant for targeting printed media (#5885)
Add placeholder variant (#6106)
Add file variant for ::file-selector-button pseudo element (#4936)
Add [open] variant (#5627)
Add portrait and landscape variants (#6046)
Add menu reset to preflight (#6213)
Add comprehensive ""arbitrary value"" support (#5568, #6233, #6259, #6258, #6283)
Add ""arbitrary properties"" support (#6161)
Add first-class negative value support (#5709, c48e629)
Add new declarative addVariant API (#5809)
Changed
Remove AOT engine, make JIT the default (#5340)
Enable extended color palette by default with updated color names (#5384)
Rename overflow-clip to text-clip and overflow-ellipsis to text-ellipsis (#5630)
Deprecate decoration-slice and decoration-break in favor box-decoration-slice and box-decoration-break (#6004)
Move vertical-align values to config file instead of hard-coding (#5487)
Throw when trying to @apply the group class (#4666)
Remove dependency on modern-normalize, inline and consolidate with Preflight (#5358)
Remove prefix as a function (#5829)
Don't use pointer cursor on disabled buttons by default (#5772)
Set default content value in preflight instead of within each before/after utility (#5820)
Preserve original color format when adding opacity whenever possible (#5154)
Unify config callback helpers into single object (#5382)
Thanks to everyone who contributed to this release: @95jonpet, @AviAvinav, @DavydeVries, @DoctorDerek, @MatteoGauthier, @MichaelAllenWarner, @RobinMalfait, @TCatinaud, @adamwathan, @bradlc, @bytedance, @codytooker, @dance2die, @dcastil, @ericbf, @geshii, @hardfist, @htunnicliff, @iksaku, @innocenzi, @kwaa, @lukewarlow, @nifte, @reinink, @sachinraja, @seanpdoyle, @xiBread, @xzfd1010"
46,"To upgrade, install tailwindcss@next:
npm install -D tailwindcss@next
If you're using @tailwindcss/typography or @tailwindcss/forms, you'll want to update those packages as well:
npm install -D @tailwindcss/typography@next
npm install -D @tailwindcss/forms@next
Remember this is an alpha release, so some things might be broken. I don't know about them otherwise I would have fixed them, but you are gonna find them! So try it, break it, and tell me about it when you do so we can get this thing really battle-tested for a proper v3.0 release in a few weeks.

Changed

Don't use pointer cursor on disabled buttons by default (#5772)
Set default content value in preflight instead of within each before/after utility (#5820)
Remove prefix as a function (#5829)

Added

Add flex-basis utilities (#5671)
Make negative values a first-class feature (#5709)
Add fit-content values for min/max-width/height utilities (#5638)
Add min/max-content values for min/max-height utilities (#5729)
Add all standard cursor-* values by default (#5734)
Add grow-* and shrink-* utilities, deprecate flex-grow-* and flex-shrink-* (#5733)
Add text-decoration-color utilities (#5760)
Add new declarative addVariant API (#5809)
Add first-class print variant for targeting printed media (#5885)
Add full color palette for fill-* and stroke-* utilities (#5933)
Add composable API for colored box shadows (#5979)

Fixed

Configure chokidar's awaitWriteFinish setting to avoid occasional stale builds on Windows (#5774)
Fix CLI --content option (#5775)
Fix before/after utilities overriding custom content values at larger breakpoints (#5820)
Cleanup duplicate properties (#5830)
Allow _ inside url() when using arbitrary values (#5853)
Prevent crashes when using comments in @layer AtRules (#5854)
Handle color transformations properly with theme(...) for all relevant plugins (#4533, #5871)
Ensure @apply-ing a utility with multiple definitions works (#5870)


Thanks to everyone who contributed to this release: @adamwathan, @bradlc, @dance2die, @dcastil, @DoctorDerek, @hardfist, @lukewarlow, @MatteoGauthier, @MichaelAllenWarner, @nifte, @reinink, @RobinMalfait, @sachinraja, @xzfd1010 ❤️","To upgrade, install tailwindcss@next:
npm install -D tailwindcss@next
If you're using @tailwindcss/typography or @tailwindcss/forms, you'll want to update those packages as well:
npm install -D @tailwindcss/typography@next
npm install -D @tailwindcss/forms@next
Remember this is an alpha release, so some things might be broken. I don't know about them otherwise I would have fixed them, but you are gonna find them! So try it, break it, and tell me about it when you do so we can get this thing really battle-tested for a proper v3.0 release in a few weeks.
Changed
Don't use pointer cursor on disabled buttons by default (#5772)
Set default content value in preflight instead of within each before/after utility (#5820)
Remove prefix as a function (#5829)
Added
Add flex-basis utilities (#5671)
Make negative values a first-class feature (#5709)
Add fit-content values for min/max-width/height utilities (#5638)
Add min/max-content values for min/max-height utilities (#5729)
Add all standard cursor- values by default (#5734)
Add grow- and shrink- utilities, deprecate flex-grow- and flex-shrink- (#5733)
Add text-decoration-color utilities (#5760)
Add new declarative addVariant API (#5809)
Add first-class print variant for targeting printed media (#5885)
Add full color palette for fill- and stroke-* utilities (#5933)
Add composable API for colored box shadows (#5979)
Fixed
Configure chokidar's awaitWriteFinish setting to avoid occasional stale builds on Windows (#5774)
Fix CLI --content option (#5775)
Fix before/after utilities overriding custom content values at larger breakpoints (#5820)
Cleanup duplicate properties (#5830)
Allow _ inside url() when using arbitrary values (#5853)
Prevent crashes when using comments in @layer AtRules (#5854)
Handle color transformations properly with theme(...) for all relevant plugins (#4533, #5871)
Ensure @apply-ing a utility with multiple definitions works (#5870)
Thanks to everyone who contributed to this release: @adamwathan, @bradlc, @dance2die, @dcastil, @DoctorDerek, @hardfist, @lukewarlow, @MatteoGauthier, @MichaelAllenWarner, @nifte, @reinink, @RobinMalfait, @sachinraja, @xzfd1010 ❤️"
47,"Fixed

Ensure corePlugins  order is consistent in AOT mode (#5928)
","Fixed
Ensure corePlugins  order is consistent in AOT mode (#5928)"
48,"Fixed

Bump versions for security vulnerabilities (#5924)
","Fixed
Bump versions for security vulnerabilities (#5924)"
49,"Fixed

Configure chokidar's awaitWriteFinish setting to avoid occasional stale builds on Windows (#5758)
","Fixed
Configure chokidar's awaitWriteFinish setting to avoid occasional stale builds on Windows (#5758)"
50,"Tailwind CSS v3.0.0-alpha.1
The first alpha release of Tailwind CSS v3.0 is here! If you don't even care what's changed and just want to start using it right now, install it via npm:
npm install -D tailwindcss@next
If you're using @tailwindcss/typography or @tailwindcss/forms, you'll want to update those packages as well:
npm install -D @tailwindcss/typography@next
npm install -D @tailwindcss/forms@next
We've also got a brand new CDN build you can play with if you want, too.
Remember this is an alpha release, so some things might be broken. I don't know about them otherwise I would have fixed them, but you are gonna find them! So try it, break it, and tell me about it when you do so we can get this thing really battle-tested for a proper v3.0 release later this year.
What's new

Just-in-Time, all the time — the new Just-in-Time engine has replaced the classic engine, offering big performance benefits and all-new features like stackable variants, arbitrary value support, and more (#5340)
Just-in-Time CDN build, for prototyping with the full power of Tailwind CSS without a build step
Every color by default, including all of the extended palette colors like cyan, rose, fuchsia, and lime, and fifty shades of ~~grey~~ gray (#5384)
New aspect-ratio utilities, using the new native aspect-ratio property (#5359)
New accent-color utilities, for setting the color of a form input's accent (#5387)
New scroll-snap utilities, for CSS-only scroll snapping (#5637)
New scroll-behavior utilities, for browser-native smooth scrolling (#5388)
New text-indent utilities, for indenting the first line in a paragraph (#5449)
New column and break-before/inside/after utilities, for wrapping multi-column content (#5457, #5530)
New touch-action utilities, for controlling touchscreen interactions (#5603)
New will-change utilities, for optimizing transition performance (#5448)
New border-x and border-y utilities, for styling left/right and top/bottom borders a the same time (#5639)
New file: variant, for styling the native file upload button (#4936)
New open: variant, for styling open <details> and <dialog> elements (#5627)

What's changed
We've tried really hard to keep the breaking changes to a minimum, and this should be a really smooth upgrade — especially if you were already using the JIT engine.
Start by reading the Just-in-Time mode changes in the documentation, and then come back here for a couple more steps.
purge has changed to content
The JIT engine doesn't actually use PurgeCSS under-the-hood, so purge doesn't feel like the right name for these configuration options anymore.
Now this configuration should look like this:
js
// tailwind.config.js
module.exports = {
  content: ['./src/**/*.html' /* ... */],
}
For more complex configurations, it should look something like this:
js
// tailwind.config.js
module.exports = {
  content: {
    files: ['./src/**/*.html' /* ... */],
    transform: {
      md: (content) => {
        return remark().process(content)
      },
    },
    extract: {
      md: (content) => {
        return content.match(/[^<>""'`\s]*/)
      },
    },
  },
  safelist: [
    'font-bold',
    'text-center',
    { pattern: /bg-(red|blue|green)/, variants: ['hover', 'focus'] },
  ],
  // ...
}
We've tried really hard to make Tailwind smart enough to understand the old configuration as well, so with any luck your existing configuration should still work, but you'll want to update to the new format to silence the annoying console warnings we blast you with.
Color name changes
As part of enabling the extended color palette by default, a few color names needed to change due to collisions.
See the pull request for all of the details you need to upgrade. It should only be a couple of lines of code in your tailwind.config.js file.
overflow-clip has changed to text-clip
Those damn browser developers added a real overflow: clip property, so using overflow-clip for text-overflow: clip is a really bad idea now.
We've renamed it to text-clip, and now overflow-clip adds overflow: clip like you'd expect. We've also renamed overflow-ellipsis to text-ellipsis, but overflow-ellipsis still secretly works.
diff
- <div class=""overflow-clip"">
+ <div class=""text-clip"">
PostCSS 7 is no longer supported
If you were using the @tailwindcss/postcss7-compat package because you are stuck on PostCSS 7, you'll need to upgrade to PostCSS 8 before you can upgrade to Tailwind CSS v3.0.0-alpha.1.
I think this is mostly create-react-app users, and thankfully they are close to releasing a new version that uses webpack 5 and supports PostCSS 8 by default.

Just-in-Time CDN
Something that has always sucked about our CDN builds is that we always had to disable tons of awesome features to keep the file size down to something the browser was willing to parse.
For Tailwind CSS v3.0, we're doing it differently. Inspired by some awesome work Marcel Pociot did on tailwindcss-jit-cdn, we've built a JS library that compiles Tailwind in the browser, and uses MutationObserver to keep track of all of the classes you're using.
It lets you use every feature Tailwind CSS has to offer, and does it in 93kB — which ain't bad for something originally designed to run in node with no file size considerations at all.
The Just-in-Time CDN is intended for development purposes only, and should not be used in production.

Why shouldn't it be used in production?

The biggest reason is because it uses MutationObserver to add the styles, it can't detect styles for dynamically created elements fast enough to avoid a flash of unstyled content (FOUC).

For example, say you have some JavaScript that opens a modal, and the modal is supposed to transition in when it opens. When the modal opens, the HTML for it is inserted into the DOM right away, but the styles might not exist for it yet because you haven't used those same classes elsewhere in the file. The observer will fire, and Tailwind will generate the styles, but the modal is already open, so you're going to see an unstyled flash the first time it opens.

We recommend pulling in the JIT CDN as a blocking (so not deferred) script to avoid the FOUC for the very initial render, but that of course means it adds 100ms (or whatever) before the page is even rendered. Not a big deal really but using a static CSS file is way faster.

It's also quite large (almost 100kB compressed) whereas compiling your CSS ahead of time usually leads to something closer to 10kb compressed, and with no run time overhead.

TLDR; It's probably fine for simple static pages but it's really much better to build the static CSS file.

To try it out, throw this <script> tag in your <head>:
```diff
  html




Example
+     


 


```
We'll give it a more permanent URL in the future but this is good enough for the alpha.
Using first-party plugins
First-party plugins can be automatically loaded using the plugins query parameter:
```html

```
The plugins parameter accepts a comma-separated list of plugins, and you can optionally specifiy a version number or range for each plugin, for example ?plugins=forms@0.3.4,typography@^0.5
Customizing your config
To customize your Tailwind CSS configuration, override tailwind.config:
```html
html




Example


      tailwind.config = {
        theme: {
          extend: {
            colors: {
              tomato: 'tomato',
            },
          },
        },
      }
    


 


```
Adding custom CSS
Use <style type=""text/tailwindcss""> elements to add any custom CSS that that you'd like to process with Tailwind:
```html
html




Example


      body {
        @apply bg-pink-500;
      }
    


 


```

So there you have it! Again, this is an alpha release so there are probably going to be some issues, but play with it and report any problems you find so we can get it all cleaned up for a proper release in a month or two.
Thanks to community members @bytedance, @htunnicliff, @DoctorDerek, @lukewarlow, @codytooker, @nifte, @ericbf, @kwaa, @MatteoGauthier, @geshii, @sachinraja, @TCatinaud, @iksaku, @seanpdoyle, @95jonpet, @innocenzi, @DavydeVries, and @hardfist for your contributions to this release — lots of good ideas and improvements made it in thanks to you ❤️","Tailwind CSS v3.0.0-alpha.1
The first alpha release of Tailwind CSS v3.0 is here! If you don't even care what's changed and just want to start using it right now, install it via npm:
npm install -D tailwindcss@next
If you're using @tailwindcss/typography or @tailwindcss/forms, you'll want to update those packages as well:
npm install -D @tailwindcss/typography@next
npm install -D @tailwindcss/forms@next
We've also got a brand new CDN build you can play with if you want, too.
Remember this is an alpha release, so some things might be broken. I don't know about them otherwise I would have fixed them, but you are gonna find them! So try it, break it, and tell me about it when you do so we can get this thing really battle-tested for a proper v3.0 release later this year.
What's new
Just-in-Time, all the time — the new Just-in-Time engine has replaced the classic engine, offering big performance benefits and all-new features like stackable variants, arbitrary value support, and more (#5340)
Just-in-Time CDN build, for prototyping with the full power of Tailwind CSS without a build step
Every color by default, including all of the extended palette colors like cyan, rose, fuchsia, and lime, and fifty shades of ~~grey~~ gray (#5384)
New aspect-ratio utilities, using the new native aspect-ratio property (#5359)
New accent-color utilities, for setting the color of a form input's accent (#5387)
New scroll-snap utilities, for CSS-only scroll snapping (#5637)
New scroll-behavior utilities, for browser-native smooth scrolling (#5388)
New text-indent utilities, for indenting the first line in a paragraph (#5449)
New column and break-before/inside/after utilities, for wrapping multi-column content (#5457, #5530)
New touch-action utilities, for controlling touchscreen interactions (#5603)
New will-change utilities, for optimizing transition performance (#5448)
New border-x and border-y utilities, for styling left/right and top/bottom borders a the same time (#5639)
New file: variant, for styling the native file upload button (#4936)
New open: variant, for styling open  and  elements (#5627)
What's changed
We've tried really hard to keep the breaking changes to a minimum, and this should be a really smooth upgrade — especially if you were already using the JIT engine.
Start by reading the Just-in-Time mode changes in the documentation, and then come back here for a couple more steps.
purge has changed to content
The JIT engine doesn't actually use PurgeCSS under-the-hood, so purge doesn't feel like the right name for these configuration options anymore.
Now this configuration should look like this:
js
// tailwind.config.js
module.exports = {
  content: ['./src//.html' / ... */],
}
For more complex configurations, it should look something like this:
js
// tailwind.config.js
module.exports = {
  content: {
    files: ['./src//.html' / ... /],
    transform: {
      md: (content) => {
        return remark().process(content)
      },
    },
    extract: {
      md: (content) => {
        return content.match(/[^<>""'`\s]/)
      },
    },
  },
  safelist: [
    'font-bold',
    'text-center',
    { pattern: /bg-(red|blue|green)/, variants: ['hover', 'focus'] },
  ],
  // ...
}
We've tried really hard to make Tailwind smart enough to understand the old configuration as well, so with any luck your existing configuration should still work, but you'll want to update to the new format to silence the annoying console warnings we blast you with.
Color name changes
As part of enabling the extended color palette by default, a few color names needed to change due to collisions.
See the pull request for all of the details you need to upgrade. It should only be a couple of lines of code in your tailwind.config.js file.
overflow-clip has changed to text-clip
Those damn browser developers added a real overflow: clip property, so using overflow-clip for text-overflow: clip is a really bad idea now.
We've renamed it to text-clip, and now overflow-clip adds overflow: clip like you'd expect. We've also renamed overflow-ellipsis to text-ellipsis, but overflow-ellipsis still secretly works.
diff
- 
+ 
PostCSS 7 is no longer supported
If you were using the @tailwindcss/postcss7-compat package because you are stuck on PostCSS 7, you'll need to upgrade to PostCSS 8 before you can upgrade to Tailwind CSS v3.0.0-alpha.1.
I think this is mostly create-react-app users, and thankfully they are close to releasing a new version that uses webpack 5 and supports PostCSS 8 by default.
Just-in-Time CDN
Something that has always sucked about our CDN builds is that we always had to disable tons of awesome features to keep the file size down to something the browser was willing to parse.
For Tailwind CSS v3.0, we're doing it differently. Inspired by some awesome work Marcel Pociot did on tailwindcss-jit-cdn, we've built a JS library that compiles Tailwind in the browser, and uses MutationObserver to keep track of all of the classes you're using.
It lets you use every feature Tailwind CSS has to offer, and does it in 93kB — which ain't bad for something originally designed to run in node with no file size considerations at all.
The Just-in-Time CDN is intended for development purposes only, and should not be used in production.
Why shouldn't it be used in production?
The biggest reason is because it uses MutationObserver to add the styles, it can't detect styles for dynamically created elements fast enough to avoid a flash of unstyled content (FOUC).
For example, say you have some JavaScript that opens a modal, and the modal is supposed to transition in when it opens. When the modal opens, the HTML for it is inserted into the DOM right away, but the styles might not exist for it yet because you haven't used those same classes elsewhere in the file. The observer will fire, and Tailwind will generate the styles, but the modal is already open, so you're going to see an unstyled flash the first time it opens.
We recommend pulling in the JIT CDN as a blocking (so not deferred) script to avoid the FOUC for the very initial render, but that of course means it adds 100ms (or whatever) before the page is even rendered. Not a big deal really but using a static CSS file is way faster.
It's also quite large (almost 100kB compressed) whereas compiling your CSS ahead of time usually leads to something closer to 10kb compressed, and with no run time overhead.
TLDR; It's probably fine for simple static pages but it's really much better to build the static CSS file.
To try it out, throw this "
51,"Fixed

JIT: Properly handle animations that use CSS custom properties (#5602)
","Fixed
JIT: Properly handle animations that use CSS custom properties (#5602)"
52,"Fixed

Ensure using CLI without -i for input file continues to work even though deprecated (#5464)
","Fixed
Ensure using CLI without -i for input file continues to work even though deprecated (#5464)"
53,"Fixed

Only use @defaults in JIT, switch back to clean-css in case there's any meaningful differences in the output (bf248cb)
","Fixed
Only use @defaults in JIT, switch back to clean-css in case there's any meaningful differences in the output (bf248cb)"
54,"Fixed

Fix broken CDN build
","Fixed
Fix broken CDN build"
55,"Fixed

Ensure that divide utilities inject a default border color (#5438)
","Fixed
Ensure that divide utilities inject a default border color (#5438)"
56,"Fixed

Rebundle to fix missing CLI peer dependencies
","Fixed
Rebundle to fix missing CLI peer dependencies"
57,"Fixed

Fix build error when using presets: [] in config file (#4903)

Added

Reintroduce universal selector optimizations under experimental optimizeUniversalDefaults flag (a9e160c)
","Fixed
Fix build error when using presets: [] in config file (#4903)
Added
Reintroduce universal selector optimizations under experimental optimizeUniversalDefaults flag (a9e160c)"
58,"Fixed

JIT: Fix @applying utilities that contain variants + the important modifier (#4854)
JIT: Don't strip ""null"" when parsing tracked file paths (#5008)
Pin clean-css to v5.1.4 to fix empty CSS variables in CDN builds (#5338)
","Fixed
JIT: Fix @applying utilities that contain variants + the important modifier (#4854)
JIT: Don't strip ""null"" when parsing tracked file paths (#5008)
Pin clean-css to v5.1.4 to fix empty CSS variables in CDN builds (#5338)"
59,"Fixed

Improve accessibility of default link focus styles in Firefox (#5082)
JIT: Fix animation variants corrupting keyframes rules (#5223)
JIT: Ignore escaped commas when splitting selectors to apply prefixes (#5239)
Nesting: Maintain PostCSS node sources when handling @apply (#5249)
JIT: Fix support for animation lists (#5252)
JIT: Fix arbitrary value support for object-position utilities (#5245)
CLI: Abort watcher if stdin is closed to avoid zombie processes (#4997)
JIT: Ignore arbitrary values with unbalanced brackets (#5293)
","Fixed
Improve accessibility of default link focus styles in Firefox (#5082)
JIT: Fix animation variants corrupting keyframes rules (#5223)
JIT: Ignore escaped commas when splitting selectors to apply prefixes (#5239)
Nesting: Maintain PostCSS node sources when handling @apply (#5249)
JIT: Fix support for animation lists (#5252)
JIT: Fix arbitrary value support for object-position utilities (#5245)
CLI: Abort watcher if stdin is closed to avoid zombie processes (#4997)
JIT: Ignore arbitrary values with unbalanced brackets (#5293)"
60,"Fixed

Temporarily revert runtime performance optimizations introduced in v2.2.5, use universal selector again (#5060)
","Fixed
Temporarily revert runtime performance optimizations introduced in v2.2.5, use universal selector again (#5060)"
61,"Fixed

Fix issue where base styles not generated for translate transforms in JIT (#5038)
","Fixed
Fix issue where base styles not generated for translate transforms in JIT (#5038)"
62,"Added

Added self-baseline utility (I know this is a patch release, no one's going to die relax) (#5000)

Changed

JIT: Optimize universal selector usage by inlining only the relevant selectors (#4850))

This provides a very significant performance boost on pages with a huge number of DOM nodes, but there's a chance it could be a breaking change in very rare edge cases we haven't thought of. Please open an issue if anything related to shadows, rings, transforms, filters, or backdrop-filters seems to be behaving differently after upgrading.
Fixed

Fix support for step-start and step-end in animation utilities (#4795))
JIT: Prevent presence of !* in templates from ruining everything (#4816))
JIT: Improve support for quotes in arbitrary values (#4817))
Fix filter/backdrop-filter/transform utilities being inserted into the wrong position if not all core plugins are enabled (#4852))
JIT: Fix @layer rules being mistakenly inserted during incremental rebuilds (#4853))
Improve build performance for projects with many small non-Tailwind stylesheets (#4644)
Ensure [hidden] works as expected on elements where we override the default display value in Preflight (#4873)
Fix variant configuration not being applied to backdropOpacity utilities (#4892)
","Added
Added self-baseline utility (I know this is a patch release, no one's going to die relax) (#5000)
Changed
JIT: Optimize universal selector usage by inlining only the relevant selectors (#4850))
This provides a very significant performance boost on pages with a huge number of DOM nodes, but there's a chance it could be a breaking change in very rare edge cases we haven't thought of. Please open an issue if anything related to shadows, rings, transforms, filters, or backdrop-filters seems to be behaving differently after upgrading.
Fixed
Fix support for step-start and step-end in animation utilities (#4795))
JIT: Prevent presence of !* in templates from ruining everything (#4816))
JIT: Improve support for quotes in arbitrary values (#4817))
Fix filter/backdrop-filter/transform utilities being inserted into the wrong position if not all core plugins are enabled (#4852))
JIT: Fix @layer rules being mistakenly inserted during incremental rebuilds (#4853))
Improve build performance for projects with many small non-Tailwind stylesheets (#4644)
Ensure [hidden] works as expected on elements where we override the default display value in Preflight (#4873)
Fix variant configuration not being applied to backdropOpacity utilities (#4892)"
63,"Fixed

Remove postinstall script that was preventing people from installing the library (1eacfb9)
","Fixed
Remove postinstall script that was preventing people from installing the library (1eacfb9)"
64,"Added

Pass extended color palette to theme closures so it can be used without installing Tailwind when using npx tailwindcss (359252c)

Fixed

JIT: Explicitly error when - is used as a custom separator (#4704)
JIT: Don't add multiple ~ when stacking peer-* variants (#4757)
Remove outdated focus style fix in Preflight (#4780)
Enable purge if provided on the CLI (#4772)
JIT: Fix error when not using a config file with postcss-cli (#4773)
Fix issue with resolveConfig not being importable in Next.js pages (#4725)
","Added
Pass extended color palette to theme closures so it can be used without installing Tailwind when using npx tailwindcss (359252c)
Fixed
JIT: Explicitly error when - is used as a custom separator (#4704)
JIT: Don't add multiple ~ when stacking peer-* variants (#4757)
Remove outdated focus style fix in Preflight (#4780)
Enable purge if provided on the CLI (#4772)
JIT: Fix error when not using a config file with postcss-cli (#4773)
Fix issue with resolveConfig not being importable in Next.js pages (#4725)"
65,"Fixed

JIT: Reintroduce transform, filter, and backdrop-filter classes purely to create stacking contexts to minimize the impact of the breaking change (#4700)
","Fixed
JIT: Reintroduce transform, filter, and backdrop-filter classes purely to create stacking contexts to minimize the impact of the breaking change (#4700)"
66,"Fixed

Recover from errors gracefully in CLI watch mode (#4693)
Fix issue with media queries not being generated properly when using PostCSS 7 (#4695)
","Fixed
Recover from errors gracefully in CLI watch mode (#4693)
Fix issue with media queries not being generated properly when using PostCSS 7 (#4695)"
67,"Tailwind CSS v2.2.0
Six weeks ago I didn't even have v2.2 on my roadmap and yet somehow here we are today, with one of the biggest Tailwind CSS feature releases of all-time?!
This release is loaded with tons of cool new stuff, mostly targeting the new Just-in-Time mode which unlocks so many cool ideas we probably couldn't have pulled off if we had to keep being mindful of the CSS file size in development.
To upgrade, install the latest version via npm:
shell
npm install -D tailwindcss@latest
Note that we've had to make a couple small changes to the JIT engine as we've added features, fixed bugs, and improved the overall reliability, so make sure to read about the changes and deprecations when upgrading if you are using just-in-time mode.


New features


All-new improved Tailwind CLI

Before and after variants
First-letter/line variants
Selected text variants
List marker variants
Sibling selector variants
Exhaustive pseudo-class support
Shorthand color opacity syntax
Extended arbitrary value support
Improved nesting support
Caret color utilities
Background origin utilities
Simplified transform and filter composition
Per-side border color utilities

Built-in safelist, transform, and extract support


Changes and deprecations

Fixes and improvements



New features

All-new improved Tailwind CLI (#4526, #4558)
We've rewritten the Tailwind CLI tool from the ground-up with a performance-first mindset, while also adding support for a bunch of new features.
shell
npx tailwindcss -o dist/tailwind.css --watch --jit --purge=""./src/**/*.html""
Here are some of the highlights:

No installation or configuration necessary — simply npx tailwindcss -o output.css to compile Tailwind from anywhere. You can even enable JIT mode with the --jit flag and pass in your content files using the --purge option, all without creating a config file.
Watch mode — so you can automatically rebuild your CSS whenever you make any changes.
JIT performance optimizations — since our CLI is Tailwind-specific we've been able to make tons of optimizations that make it the absolute fastest build tool for compiling your CSS in JIT mode.
Minification support — now you can minify your CSS with cssnano just by adding the --minify flag.
PostCSS plugin support — the new CLI will read and respect any extra plugins you configure using a postcss.config.js file.

It's fully backwards-compatible with the previous CLI, so if you've got any scripts set up already you should be able to upgrade to v2.2 without making any changes to your scripts.
Check out our updated Tailwind CLI documentation to learn more.
Note that if you were using the tailwindcss-cli wrapper package, you can safely switch to tailwindcss as we've managed to resolve the peer-dependency issues that forced us to create the wrapper package in the first place.

Before and after pseudo-element variants (#4461)
This feature is only available in Just-in-Time mode.
People have been asking for this for years and it's finally here! We've added first-party support for styling pseudo-elements like before and after:
```html

```
We set content: """" automatically any time you use a before or after variant to make sure the elements are rendered, but you can override it using the new content utilities which have full arbitrary value support:
```html

```
You can even grab the content from an attribute using the CSS attr() function:
```html

```
This can be super helpful when your content has spaces in it, since spaces can't be used in CSS class names.

First-letter/line variants (#4482)
This feature is only available in Just-in-Time mode.
We've added variants for the first-letter and first-line pseudo-elements, so you can do stuff like drop caps:
```html

  The night was March 31, 1996, and it was finally time for Bret Hart to face off against Shawn
  Michaels in the long anticipated Iron Man match — a 60 minute war of endurance where the man who
  scored the most number of falls would walk away as the WWF World Heavyweight Champion.

```

Selected text variants (#4482)
This feature is only available in Just-in-Time mode.
We've added a new selection variant that makes it super easy to style highlighted to match your design:
```html

  After nearly a grueling hour of warfare with neither man scoring a fall, Hart locked in the
  Sharpshooter, his signature submission hold. As Michaels screamed in pain, the crowd were certain
  that Hart was about to walk away from WrestleMania XII as the still-World Heavyweight Champion.

```
We've even built this feature in such a way that it can be applied to a parent element and cascade down, so you can set a highlight color for your whole site by applying a utility to the body:
```html

 ... 

    But Michaels didn't give up — he held on until the bell rang and the designated 60 minutes was
    up. Hart walked away content, thinking that without a clear winner, the title was his to hold.
    He was not prepared for what would happen next, when Gorilla Monsoon declared the match would
    continue under sudden death rules.
  

```

List marker variants (#4482)
This feature is only available in Just-in-Time mode.
You can use the new marker variant to style the bullets or numbers at the beginning of a list:
```html
WrestleMania XII Results


    The British Bulldog, Owen Hart, and Vader defeated Ahmed Johnson, Jake Roberts, and Yokozuna
  
Roddy Piper defeated Goldust
Stone Cold Steve Austin defeated Savio Vega
The Ultimate Warrior defeated Hunter Hearst Helmsley
The Undertaker defeated Diesel
Shawn Michaels defeated Bret Hart

```
Like the selection variant, we've implemented this in a way that it cascades from the parent, so you don't have to repeat it for each list item.

Sibling selector variants (#4556)
This feature is only available in Just-in-Time mode.
Tailwind CSS v2.2 adds new peer-* variants that behave much like the group-* variants, but for targeting sibling elements instead of parent elements.
This is useful for things like styling an element when a preceding checkbox is checked, doing things like floating labels, and lots more:
```html



 ... 

```
Just like group can be combined with any other variant, peer can as well, so you have variants like peer-hover, peer-focus, peer-disabled, and loads more at your fingertips.
The generated CSS uses the general sibling combinator and looks like this:
css
.peer:checked ~ .peer-checked\:bg-blue-500 {
  background-color: #3b82f6;
}
So just like in vanilla CSS, it will only work for targeting previous siblings, not siblings that appear later in the DOM.

Exhaustive pseudo-class support (#4482)
This feature is only available in Just-in-Time mode.
We've added variants for basically every single missing pseudo-class we could think of in this release:

only (only-child)
first-of-type
last-of-type
only-of-type
target
default
indeterminate
placeholder-shown
autofill
required
valid
invalid
in-range
out-of-range

Personal favorite in the list is placeholder-shown — when combined with the new sibling selector variants it makes it possible to do cool stuff like floating labels:
```html




```

Shorthand color opacity syntax (#4348)
This feature is only available in Just-in-Time mode.
Instead of using utilities like bg-opacity-50, text-opacity-25, or placeholder-opacity-40, Tailwind CSS v2.2 gives you a new color opacity shorthand you can use to tweak the alpha channel of a color directly in the color utility itself:
diff
- <div class=""bg-red-500 bg-opacity-25"">
+ <div class=""bg-red-500/25"">
This means you can now change the opacity of colors anywhere in Tailwind, even where we previously didn’t have specific opacity utilities, like in gradients for example:
```html

```
The opacity values are taken from your opacity scale, but you can also use arbitrary opacity values using square bracket notation:
```html

```
If I'm being honest, I am more excited about never having to create another core plugin like placeholderOpacity.js for you people again than I am about actually using the feature. And I'm really excited about the feature, so that says something.

Extended arbitrary value support (#4263)
This feature is only available in Just-in-Time mode.
We've gone over every core plugin in Tailwind to try and add the most flexible arbitrary value support we possibly could, and I think we've covered pretty much everything at this point.
You should be able to whatever arbitrary values you want, just about wherever you want:
```html

```
If you find one we missed, open an issue and we'll sort it out.
In addition to making arbitrary value support more comprehensive, we've also added a new type-hint syntax to handle ambiguous situations. For example, if you are using a CSS variable as an arbitrary value, it's not always clear what the generated CSS should be:
```html
 Is this a font size utility, or a text color utility? 

```
Now you can provide a hint to the engine by prefixing the arbitrary value with the type name:
```html

```
Currently, the supported types are:

length
color
angle
list

We'll probably flesh this out even more over time as people discover new edge cases but this should get you very far.

Improved nesting support (#4318)
Since Tailwind introduces a lot of non-standard CSS at-rules like @tailwind and @apply, you can often run into weird output when combining it with a PostCSS nesting plugin like postcss-nested or postcss-nesting.
To ease the pain here, we've included a new PostCSS plugin in the tailwindcss package that acts as a lightweight compatibility layer between existing nesting plugins and Tailwind itself.
So if you need nesting support in your project, use our plugin, and stick it before Tailwind in your PostCSS plugin list:
js
// postcss.config.js
module.exports = {
  plugins: [
    // ...
    require('tailwindcss/nesting'),
    require('tailwindcss'),
    // ...
  ],
}
By default, it uses postcss-nested under the hood (since that's what we use to support nesting in Tailwind plugins), but if you'd like to use postcss-nesting instead, just call our plugin as a function and pass through the postcss-nesting plugin:
js
// postcss.config.js
module.exports = {
  plugins: [
    // ...
    require('tailwindcss/nesting')(require('postcss-nesting')),
    require('tailwindcss'),
    // ...
  ],
}
Under the hood, this uses a new screen() function we've introduced that you can use to get the expanded media expression from any of your configured breakpoints:
```css
/ Input /
@media screen(sm) {
  / ... /
}
/ Output /
@media (min-width: 640px) {
  / ... /
}
```
You probably won't need to use this yourself but it could be helpful if you're ever integrating Tailwind with another tool that understands @media but doesn't handle @screen properly.
diff
- @screen sm { /* ... */ }
+ @media screen(sm) { /* ... */ }

Caret color utilities (#4499)
This feature is only available in Just-in-Time mode.
You can now set the color of the cursor in form fields using the new caret-{color} utilities:
html
<input class=""caret-red-500"" />
These are customizable using the caretColor key in the theme section of your tailwind.config.js file.

Background origin utilities (#4117)
We've added new utilities for the background-origin property, which let you control where an element's background is positioned relative to the element's border, padding box, or content:
```html

  Background is rendered under the border


  Background is rendered within the border but on top of any padding


  Background is rendered within any padding and under the content

```
Learn more in the background origin documentation.

Simplified transform and filter composition (#4604, #4614)
This feature is only available in Just-in-Time mode.
The transform, filter, and backdrop-filter classes are no longer necessary to ""enable"" their respective set of composable utilities.
diff
- <div class=""transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm"">
+ <div class=""scale-50 grayscale backdrop-blur-sm"">
Now those features are automatically enabled any time you use any of the relevant sub-utilities.
It's important to understand though that because these utilities aren't needed anymore, you can no longer expect transforms and filters to be ""dormant"" by default. If you were relying on conditionally ""activating"" transforms or filters by toggling these classes, you will want to make sure you are toggling the sub-utilities themselves instead:
diff
- <div class=""scale-105 -translate-y-1 hover:transform"">
+ <div class=""hover:scale-105 hover:-translate-y-1"">
I don't expect this will be a real problem for most people, but it's technically a breaking change which is why we've limited this improvment to the JIT engine only.

Per-side border color utilities (#4404)
This feature is only available in Just-in-Time mode.
Requested at least once a month for the last four years, I'm excited to share that we've finally added per-side border color support now that we don't have to sweat the development stylesheet size.
```html

 ... 

```
Go forth and build ugly websites! (Kidding, kidding, I know they are useful settle the hell down.)

Built-in safelist, transform, and extract support (#4469, #4580)
We've added first-class support for a bunch of important PurgeCSS features and made them work in the JIT engine as well, which doesn't actually even use PurgeCSS.
First is safelist, which is super useful if you need to protect specific classes from being removed from your production CSS, perhaps because they are used in content that comes from a database or similar:
js
// tailwind.config.js
module.exports = {
  purge: {
    content: ['./src/**/*.html'],
    safelist: [
      'bg-blue-500',
      'text-center',
      'hover:opacity-100',
      // ...
      'lg:text-right',
    ],
  },
  // ...
}
Note that while the classic engine will accept regular expressions here, the JIT engine will not. That's because when we're generating classes on demand, the class doesn't exist until it's used so we have nothing to match the expression against. So if you're using just-in-time mode, make sure you're providing complete class names to get the expected result.
Next is transform, which lets you transform content for different file extensions before scanning it for potential class names:
```js
// tailwind.config.js
let remark = require('remark')
module.exports = {
  purge: {
    content: ['./src/*/.{html,md}'],
    transform: {
      md: (content) => {
        return remark().process(content)
      },
    },
  },
  // ...
}
```
This is really useful if you have templates that are written in a language that compiles to HTML, like Markdown.
Finally we have extract, which lets you customize the logic that Tailwind uses to detect class names in specific file types:
js
// tailwind.config.js
module.exports = {
  purge: {
    content: ['./src/**/*.{html,md}'],
    extract: {
      pug: (content) => {
        return /[^<>""'`\s]*/.match(content)
      },
    },
  },
  // ...
}
This is an advanced feature and most users won’t need it. The default extraction logic in Tailwind works extremely well for almost all projects.
For more information on these features, check out our optimizing for production documentation.


Changes and deprecations
This release introduces a few small changes to the JIT engine that might impact you, and one deprecation:

New dependency tracking system for Just-in-Time mode
Transforms and filters don't need to be ""enabled"" in Just-in-Time mode
matchUtilities API changes
Deprecate @tailwind screens for @tailwind variants in Just-in-Time mode

It also introduces two minor deprecations for both engines, which are non-breaking for now but will become breaking changes in v3.0 so you are encouraged to account for:

Deprecate lightBlue for sky in the extended color palette
Deprecate blur-0 for blur-none in the default theme


New dependency tracking system for Just-in-Time mode
In Tailwind CSS v2.1, we tracked changes to your template files in just-in-time mode using our own separate watch process because most build tools were missing the APIs we needed to rebuild your CSS when template files changed using the watch system built-in to the build tool.
We've worked hard to make improvements to popular build tools over the past few months and change this, because using our own watch process makes builds prone to race conditions and very hard to debug problems.
So as of Tailwind CSS v2.2, the JIT engine relies on native dependency tracking in build tools by default, with an option to opt-in to the old system if your build tool doesn't support the APIs we need.
If you've followed along closely on GitHub or reported issues with watch mode, you may have seen us suggest using the TAILWIND_DISABLE_TOUCH=true flag — that mode is the default now in v2.2.
This new dependency tracking system is compatible with at least the following tools:

Next.js (>= v10.2.2)
Vite (>= v2.3.8)
webpack 4 (using latest postcss-loader@^4)
webpack 5 (using latest postcss-loader@^5)
Rollup
Snowpack

Tools with known incompatibilities include:

postcss-cli (#383)
Parcel (#6299)

If you discover your build tool isn't yet compatible with the new dependency tracking system, you have two options:

Compile your CSS separately using the new Tailwind CLI. You can use packages like npm-run-all or concurrently to compile your CSS alongside your usual development command by adding some scripts to your project like this:

js
   // package.json
   {
     // ...
     ""scripts"": {
       ""dev"": ""npm-run-all --parallel dev:*"",
       ""dev:server"": ""vite"",
       ""dev:css"": ""tailwindcss -o src/tailwind.css -w"",
       ""build"": ""tailwindcss -o src/tailwind.css && vite build"",
       ""serve"": ""vite preview""
     },
   }

Set TAILWIND_MODE=watch to opt-in to the old dependency tracking system. If the previous default was working for you, this will let you just keep using that system until the build tool you're using has been updated to support the new system.

```js
   // package.json
   {
     // ...
     scripts: {
       // Set TAILWIND_MODE=watch when starting your dev server
       ""dev"": ""TAILWIND_MODE=watch vite"",
   // Do not set TAILWIND_MODE for one-off builds
   ""build"": ""vite build"",
   // ...
 },
 // ...

}
   ```
Note that setting TAILWIND_MODE=watch will start a long-running watch process in the background, so if you set that environment variable when trying to do a one-off build, it will look like the build is hanging. You should only set TAILWIND_MODE=watch when you are actually running a dev server/watch process.

Transforms and filters don't need to be ""enabled"" in Just-in-Time mode
The transform, filter, and backdrop-filter classes aren't necessary for ""enabling"" those features when using the JIT engine:
diff-html
- <div class=""transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm"">
+ <div class=""scale-50 grayscale backdrop-blur-sm"">
This means you can no longer expect transforms and filters to be dormant by default, and conditionally activated by adding transform, filter, or backdrop-filter.
Instead, you will want put any variants on the sub-utilities themselves:
diff-html
- <div class=""scale-105 -translate-y-1 hover:transform"">
+ <div class=""hover:scale-105 hover:-translate-y-1"">

matchUtilities API changes
The matchUtilities function that is used to register on-demand utilities in the JIT engine has changed significantly.
We consider this private API still which is why we haven't documented it, but I know a few sneaky people out there are playing with it anyways.
To understand how the API works in v2.2, read the pull request that explains the changes.

Deprecate @tailwind screens for @tailwind variants in Just-in-Time mode
In the classic engine, all utility variants are injected as part of the @tailwind utilities directive.
In the JIT engine, variants like hover and focus are injected in the same place as your responsive variants, which has traditionally been the very end of the stylesheet, or at @tailwind screens if you've included it explicitly.
As of v2.2, the @tailwind screens directive has been renamed to @tailwind variants, since it is now the injection point for all variants, not just responsive variants.
This directive is optional (just like @tailwind screens always has been) and is only useful if you want explicit control over where utility variants are injected. By default, they are always injected at the very end of your stylesheet.
If you were using @tailwind screens before, you should update your code to use @tailwind variants:
```diff
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
- @tailwind screens;
+ @tailwind variants;
/ Some custom CSS... /
```
The @tailwind variants feature is considered an advanced escape hatch and we recommend omitting it by default. You should only use it if your project won't work properly without it, which is only ever really true if you are introducing Tailwind to a legacy system with a very fragile existing CSS codebase that has styles that absolutely need to be at the very end of the stylesheet for things to work.

Deprecate lightBlue for sky in the extended color palette
The lightBlue color in the extended color palette has been renamed to sky. It was the only oddball color in the list without a fancy name (like emerald or rose) and we just couldn't stomach it anymore.
Using lightBlue will still work until v3.0, but you'll see a warning in the console suggesting you use the new name.
Note that it's totally okay to start using sky without actually updating your HTML, it's only at the place of import that the name matters:
```diff
  // tailwind.config.js
  let colors = require('tailwindcss/colors')
module.exports = {
    theme: {
      colors: {
        // ...
-       'light-blue': colors.lightBlue,
+       'light-blue': colors.sky,
      }
    }
  }
```

Deprecate blur-0 for blur-none in the default theme
For some unknown reason when I released Tailwind CSS v2.1 I thought blur-0 was a better name than blur-none, even though every other utility that uses a named size scale (like rounded-md and shadow-lg) use none, not 0.
In v2.2, we've added blur-none and stopped documenting blur-0. It still works, but it'll be removed from the default theme configuration in v3.0.
diff
- <div class=""blur-0"">
+ <div class=""blur-none"">


Fixes and improvements
Alongside the new features this release introduces, we've also fixed a bunch of little things that might have been bugging you.
Here's a list of the fixes and improvements we've made since the last release, with links to the relevant pull requests to learn more:

JIT: Support applying important utility variants (#4260)
JIT: Improve support for Svelte class bindings (#4187)
JIT: Improve support for calc and var in arbitrary values (#4147)
Convert hsl colors to hsla when transforming for opacity support instead of rgba (#3850)
Fix backdropBlur variants not being generated (#4188)
Improve animation value parsing (#4250)
Ignore unknown object types when hashing config (82f4eaa)
Ensure variants are grouped properly for plugins with order-dependent utilities (#4273)
Resolve purge paths relative to tailwind.config.js instead of the current working directory (#4214)
JIT: Fix temp file storage when node temp directories are kept on a different drive than the project itself (#4044)
Support border-opacity utilities alongside default border utility (#4277)
JIT: Fix source maps for expanded @tailwind directives (2f15411)
JIT: Ignore whitespace when collapsing adjacent rules (15642fb)
JIT: Generate group parent classes correctly when using custom separator (#4508)
JIT: Fix incorrect stacking of multiple group variants (#4551)
JIT: Fix memory leak due to holding on to unused contexts (#4571)


If you read this whole thing well damn, well done. Thanks as always for being part of the community and I hope you have fun with the new goodies!","Tailwind CSS v2.2.0
Six weeks ago I didn't even have v2.2 on my roadmap and yet somehow here we are today, with one of the biggest Tailwind CSS feature releases of all-time?!
This release is loaded with tons of cool new stuff, mostly targeting the new Just-in-Time mode which unlocks so many cool ideas we probably couldn't have pulled off if we had to keep being mindful of the CSS file size in development.
To upgrade, install the latest version via npm:
shell
npm install -D tailwindcss@latest
Note that we've had to make a couple small changes to the JIT engine as we've added features, fixed bugs, and improved the overall reliability, so make sure to read about the changes and deprecations when upgrading if you are using just-in-time mode.
New features
All-new improved Tailwind CLI
Before and after variants
First-letter/line variants
Selected text variants
List marker variants
Sibling selector variants
Exhaustive pseudo-class support
Shorthand color opacity syntax
Extended arbitrary value support
Improved nesting support
Caret color utilities
Background origin utilities
Simplified transform and filter composition
Per-side border color utilities
Built-in safelist, transform, and extract support
Changes and deprecations
Fixes and improvements
New features
All-new improved Tailwind CLI (#4526, #4558)
We've rewritten the Tailwind CLI tool from the ground-up with a performance-first mindset, while also adding support for a bunch of new features.
shell
npx tailwindcss -o dist/tailwind.css --watch --jit --purge=""./src/*/.html""
Here are some of the highlights:
No installation or configuration necessary — simply npx tailwindcss -o output.css to compile Tailwind from anywhere. You can even enable JIT mode with the --jit flag and pass in your content files using the --purge option, all without creating a config file.
Watch mode — so you can automatically rebuild your CSS whenever you make any changes.
JIT performance optimizations — since our CLI is Tailwind-specific we've been able to make tons of optimizations that make it the absolute fastest build tool for compiling your CSS in JIT mode.
Minification support — now you can minify your CSS with cssnano just by adding the --minify flag.
PostCSS plugin support — the new CLI will read and respect any extra plugins you configure using a postcss.config.js file.
It's fully backwards-compatible with the previous CLI, so if you've got any scripts set up already you should be able to upgrade to v2.2 without making any changes to your scripts.
Check out our updated Tailwind CLI documentation to learn more.
Note that if you were using the tailwindcss-cli wrapper package, you can safely switch to tailwindcss as we've managed to resolve the peer-dependency issues that forced us to create the wrapper package in the first place.
Before and after pseudo-element variants (#4461)
This feature is only available in Just-in-Time mode.
People have been asking for this for years and it's finally here! We've added first-party support for styling pseudo-elements like before and after:
```html
modulehtml
modulehtml
```
This can be super helpful when your content has spaces in it, since spaces can't be used in CSS class names.
First-letter/line variants (#4482)
This feature is only available in Just-in-Time mode.
We've added variants for the first-letter and first-line pseudo-elements, so you can do stuff like drop caps:
```html
The night was March 31, 1996, and it was finally time for Bret Hart to face off against Shawn
  Michaels in the long anticipated Iron Man match — a 60 minute war of endurance where the man who
  scored the most number of falls would walk away as the WWF World Heavyweight Champion.
```
Selected text variants (#4482)
This feature is only available in Just-in-Time mode.
We've added a new selection variant that makes it super easy to style highlighted to match your design:
```html
After nearly a grueling hour of warfare with neither man scoring a fall, Hart locked in the
  Sharpshooter, his signature submission hold. As Michaels screamed in pain, the crowd were certain
  that Hart was about to walk away from WrestleMania XII as the still-World Heavyweight Champion.
modulehtml
... 
module
```
List marker variants (#4482)
This feature is only available in Just-in-Time mode.
You can use the new marker variant to style the bullets or numbers at the beginning of a list:
```html
WrestleMania XII Results
module
Roddy Piper defeated Goldust
Stone Cold Steve Austin defeated Savio Vega
The Ultimate Warrior defeated Hunter Hearst Helmsley
The Undertaker defeated Diesel
Shawn Michaels defeated Bret Hart
```
Like the selection variant, we've implemented this in a way that it cascades from the parent, so you don't have to repeat it for each list item.
Sibling selector variants (#4556)
This feature is only available in Just-in-Time mode.
Tailwind CSS v2.2 adds new peer- variants that behave much like the group- variants, but for targeting sibling elements instead of parent elements.
This is useful for things like styling an element when a preceding checkbox is checked, doing things like floating labels, and lots more:
```html
... 
```
Just like group can be combined with any other variant, peer can as well, so you have variants like peer-hover, peer-focus, peer-disabled, and loads more at your fingertips.
The generated CSS uses the general sibling combinator and looks like this:
css
.peer:checked ~ .peer-checked\:bg-blue-500 {
  background-color: #3b82f6;
}
So just like in vanilla CSS, it will only work for targeting previous siblings, not siblings that appear later in the DOM.
Exhaustive pseudo-class support (#4482)
This feature is only available in Just-in-Time mode.
We've added variants for basically every single missing pseudo-class we could think of in this release:
only (only-child)
first-of-type
last-of-type
only-of-type
target
default
indeterminate
placeholder-shown
autofill
required
valid
invalid
in-range
out-of-range
Personal favorite in the list is placeholder-shown — when combined with the new sibling selector variants it makes it possible to do cool stuff like floating labels:
```html
```
Shorthand color opacity syntax (#4348)
This feature is only available in Just-in-Time mode.
Instead of using utilities like bg-opacity-50, text-opacity-25, or placeholder-opacity-40, Tailwind CSS v2.2 gives you a new color opacity shorthand you can use to tweak the alpha channel of a color directly in the color utility itself:
diff
- 
+ 
This means you can now change the opacity of colors anywhere in Tailwind, even where we previously didn’t have specific opacity utilities, like in gradients for example:
```html
modulehtml
```
If I'm being honest, I am more excited about never having to create another core plugin like placeholderOpacity.js for you people again than I am about actually using the feature. And I'm really excited about the feature, so that says something.
Extended arbitrary value support (#4263)
This feature is only available in Just-in-Time mode.
We've gone over every core plugin in Tailwind to try and add the most flexible arbitrary value support we possibly could, and I think we've covered pretty much everything at this point.
You should be able to whatever arbitrary values you want, just about wherever you want:
```html
modulehtml
 Is this a font size utility, or a text color utility? 
modulehtml
```
Currently, the supported types are:
length
color
angle
list
We'll probably flesh this out even more over time as people discover new edge cases but this should get you very far.
Improved nesting support (#4318)
Since Tailwind introduces a lot of non-standard CSS at-rules like @tailwind and @apply, you can often run into weird output when combining it with a PostCSS nesting plugin like postcss-nested or postcss-nesting.
To ease the pain here, we've included a new PostCSS plugin in the tailwindcss package that acts as a lightweight compatibility layer between existing nesting plugins and Tailwind itself.
So if you need nesting support in your project, use our plugin, and stick it before Tailwind in your PostCSS plugin list:
js
// postcss.config.js
module.exports = {
  plugins: [
    // ...
    require('tailwindcss/nesting'),
    require('tailwindcss'),
    // ...
  ],
}
By default, it uses postcss-nested under the hood (since that's what we use to support nesting in Tailwind plugins), but if you'd like to use postcss-nesting instead, just call our plugin as a function and pass through the postcss-nesting plugin:
js
// postcss.config.js
module.exports = {
  plugins: [
    // ...
    require('tailwindcss/nesting')(require('postcss-nesting')),
    require('tailwindcss'),
    // ...
  ],
}
Under the hood, this uses a new screen() function we've introduced that you can use to get the expanded media expression from any of your configured breakpoints:
module
You probably won't need to use this yourself but it could be helpful if you're ever integrating Tailwind with another tool that understands @media but doesn't handle @screen properly.
diff
- @screen sm { / ... / }
+ @media screen(sm) { / ... / }
Caret color utilities (#4499)
This feature is only available in Just-in-Time mode.
You can now set the color of the cursor in form fields using the new caret-{color} utilities:
html

These are customizable using the caretColor key in the theme section of your tailwind.config.js file.
Background origin utilities (#4117)
We've added new utilities for the background-origin property, which let you control where an element's background is positioned relative to the element's border, padding box, or content:
```html
Background is rendered under the border
Background is rendered within the border but on top of any padding
Background is rendered within any padding and under the content
```
Learn more in the background origin documentation.
Simplified transform and filter composition (#4604, #4614)
This feature is only available in Just-in-Time mode.
The transform, filter, and backdrop-filter classes are no longer necessary to ""enable"" their respective set of composable utilities.
diff
- 
+ 
Now those features are automatically enabled any time you use any of the relevant sub-utilities.
It's important to understand though that because these utilities aren't needed anymore, you can no longer expect transforms and filters to be ""dormant"" by default. If you were relying on conditionally ""activating"" transforms or filters by toggling these classes, you will want to make sure you are toggling the sub-utilities themselves instead:
diff
- 
+ 
I don't expect this will be a real problem for most people, but it's technically a breaking change which is why we've limited this improvment to the JIT engine only.
Per-side border color utilities (#4404)
This feature is only available in Just-in-Time mode.
Requested at least once a month for the last four years, I'm excited to share that we've finally added per-side border color support now that we don't have to sweat the development stylesheet size.
```html
... 
```
Go forth and build ugly websites! (Kidding, kidding, I know they are useful settle the hell down.)
Built-in safelist, transform, and extract support (#4469, #4580)
We've added first-class support for a bunch of important PurgeCSS features and made them work in the JIT engine as well, which doesn't actually even use PurgeCSS.
First is safelist, which is super useful if you need to protect specific classes from being removed from your production CSS, perhaps because they are used in content that comes from a database or similar:
js
// tailwind.config.js
module.exports = {
  purge: {
    content: ['./src//*.html'],
    safelist: [
      'bg-blue-500',
      'text-center',
      'hover:opacity-100',
      // ...
      'lg:text-right',
    ],
  },
  // ...
}
Note that while the classic engine will accept regular expressions here, the JIT engine will not. That's because when we're generating classes on demand, the class doesn't exist until it's used so we have nothing to match the expression against. So if you're using just-in-time mode, make sure you're providing complete class names to get the expected result.
Next is transform, which lets you transform content for different file extensions before scanning it for potential class names:
module
This is really useful if you have templates that are written in a language that compiles to HTML, like Markdown.
Finally we have extract, which lets you customize the logic that Tailwind uses to detect class names in specific file types:
js
// tailwind.config.js
module.exports = {
  purge: {
    content: ['./src//.{html,md}'],
    extract: {
      pug: (content) => {
        return /[^<>""'`\s]/.match(content)
      },
    },
  },
  // ...
}
This is an advanced feature and most users won’t need it. The default extraction logic in Tailwind works extremely well for almost all projects.
For more information on these features, check out our optimizing for production documentation.
Changes and deprecations
This release introduces a few small changes to the JIT engine that might impact you, and one deprecation:
New dependency tracking system for Just-in-Time mode
Transforms and filters don't need to be ""enabled"" in Just-in-Time mode
matchUtilities API changes
Deprecate @tailwind screens for @tailwind variants in Just-in-Time mode
It also introduces two minor deprecations for both engines, which are non-breaking for now but will become breaking changes in v3.0 so you are encouraged to account for:
Deprecate lightBlue for sky in the extended color palette
Deprecate blur-0 for blur-none in the default theme
New dependency tracking system for Just-in-Time mode
In Tailwind CSS v2.1, we tracked changes to your template files in just-in-time mode using our own separate watch process because most build tools were missing the APIs we needed to rebuild your CSS when template files changed using the watch system built-in to the build tool.
We've worked hard to make improvements to popular build tools over the past few months and change this, because using our own watch process makes builds prone to race conditions and very hard to debug problems.
So as of Tailwind CSS v2.2, the JIT engine relies on native dependency tracking in build tools by default, with an option to opt-in to the old system if your build tool doesn't support the APIs we need.
If you've followed along closely on GitHub or reported issues with watch mode, you may have seen us suggest using the TAILWIND_DISABLE_TOUCH=true flag — that mode is the default now in v2.2.
This new dependency tracking system is compatible with at least the following tools:
Next.js (>= v10.2.2)
Vite (>= v2.3.8)
webpack 4 (using latest postcss-loader@^4)
webpack 5 (using latest postcss-loader@^5)
Rollup
Snowpack
Tools with known incompatibilities include:
postcss-cli (#383)
Parcel (#6299)
If you discover your build tool isn't yet compatible with the new dependency tracking system, you have two options:
Compile your CSS separately using the new Tailwind CLI. You can use packages like npm-run-all or concurrently to compile your CSS alongside your usual development command by adding some scripts to your project like this:
js
   // package.json
   {
     // ...
     ""scripts"": {
       ""dev"": ""npm-run-all --parallel dev:*"",
       ""dev:server"": ""vite"",
       ""dev:css"": ""tailwindcss -o src/tailwind.css -w"",
       ""build"": ""tailwindcss -o src/tailwind.css && vite build"",
       ""serve"": ""vite preview""
     },
   }
Set TAILWIND_MODE=watch to opt-in to the old dependency tracking system. If the previous default was working for you, this will let you just keep using that system until the build tool you're using has been updated to support the new system.
```js
   // package.json
   {
     // ...
     scripts: {
       // Set TAILWIND_MODE=watch when starting your dev server
       ""dev"": ""TAILWIND_MODE=watch vite"",
   // Do not set TAILWIND_MODE for one-off builds
   ""build"": ""vite build"",
   // ...
 },
 // ...
}
   ```
Note that setting TAILWIND_MODE=watch will start a long-running watch process in the background, so if you set that environment variable when trying to do a one-off build, it will look like the build is hanging. You should only set TAILWIND_MODE=watch when you are actually running a dev server/watch process.
Transforms and filters don't need to be ""enabled"" in Just-in-Time mode
The transform, filter, and backdrop-filter classes aren't necessary for ""enabling"" those features when using the JIT engine:
diff-html
- 
+ 
This means you can no longer expect transforms and filters to be dormant by default, and conditionally activated by adding transform, filter, or backdrop-filter.
Instead, you will want put any variants on the sub-utilities themselves:
diff-html
- 
+ 
matchUtilities API changes
The matchUtilities function that is used to register on-demand utilities in the JIT engine has changed significantly.
We consider this private API still which is why we haven't documented it, but I know a few sneaky people out there are playing with it anyways.
To understand how the API works in v2.2, read the pull request that explains the changes.
Deprecate @tailwind screens for @tailwind variants in Just-in-Time mode
In the classic engine, all utility variants are injected as part of the @tailwind utilities directive.
In the JIT engine, variants like hover and focus are injected in the same place as your responsive variants, which has traditionally been the very end of the stylesheet, or at @tailwind screens if you've included it explicitly.
As of v2.2, the @tailwind screens directive has been renamed to @tailwind variants, since it is now the injection point for all variants, not just responsive variants.
This directive is optional (just like @tailwind screens always has been) and is only useful if you want explicit control over where utility variants are injected. By default, they are always injected at the very end of your stylesheet.
If you were using @tailwind screens before, you should update your code to use @tailwind variants:
module
The @tailwind variants feature is considered an advanced escape hatch and we recommend omitting it by default. You should only use it if your project won't work properly without it, which is only ever really true if you are introducing Tailwind to a legacy system with a very fragile existing CSS codebase that has styles that absolutely need to be at the very end of the stylesheet for things to work.
Deprecate lightBlue for sky in the extended color palette
The lightBlue color in the extended color palette has been renamed to sky. It was the only oddball color in the list without a fancy name (like emerald or rose) and we just couldn't stomach it anymore.
Using lightBlue will still work until v3.0, but you'll see a warning in the console suggesting you use the new name.
Note that it's totally okay to start using sky without actually updating your HTML, it's only at the place of import that the name matters:
module
Deprecate blur-0 for blur-none in the default theme
For some unknown reason when I released Tailwind CSS v2.1 I thought blur-0 was a better name than blur-none, even though every other utility that uses a named size scale (like rounded-md and shadow-lg) use none, not 0.
In v2.2, we've added blur-none and stopped documenting blur-0. It still works, but it'll be removed from the default theme configuration in v3.0.
diff
- 
+ 
Fixes and improvements
Alongside the new features this release introduces, we've also fixed a bunch of little things that might have been bugging you.
Here's a list of the fixes and improvements we've made since the last release, with links to the relevant pull requests to learn more:
JIT: Support applying important utility variants (#4260)
JIT: Improve support for Svelte class bindings (#4187)
JIT: Improve support for calc and var in arbitrary values (#4147)
Convert hsl colors to hsla when transforming for opacity support instead of rgba (#3850)
Fix backdropBlur variants not being generated (#4188)
Improve animation value parsing (#4250)
Ignore unknown object types when hashing config (82f4eaa)
Ensure variants are grouped properly for plugins with order-dependent utilities (#4273)
Resolve purge paths relative to tailwind.config.js instead of the current working directory (#4214)
JIT: Fix temp file storage when node temp directories are kept on a different drive than the project itself (#4044)
Support border-opacity utilities alongside default border utility (#4277)
JIT: Fix source maps for expanded @tailwind directives (2f15411)
JIT: Ignore whitespace when collapsing adjacent rules (15642fb)
JIT: Generate group parent classes correctly when using custom separator (#4508)
JIT: Fix incorrect stacking of multiple group variants (#4551)
JIT: Fix memory leak due to holding on to unused contexts (#4571)
If you read this whole thing well damn, well done. Thanks as always for being part of the community and I hope you have fun with the new goodies!"
68,"Fixed

Skip raw PurgeCSS sources when registering template dependencies (#4542)
","Fixed
Skip raw PurgeCSS sources when registering template dependencies (#4542)"
69,"Fixed

Register PurgeCSS paths as PostCSS dependencies to guarantee proper cache-busting in webpack 5 (#4530)
","Fixed
Register PurgeCSS paths as PostCSS dependencies to guarantee proper cache-busting in webpack 5 (#4530)"
70,"Fixed

Fix issue where JIT engine would generate the wrong CSS when using PostCSS 7 (#4078)
","Fixed
Fix issue where JIT engine would generate the wrong CSS when using PostCSS 7 (#4078)"
71,"Fixed

Fix issue where JIT engine would fail to compile when a source path isn't provided by the build runner for the current input file (#3978)
","Fixed
Fix issue where JIT engine would fail to compile when a source path isn't provided by the build runner for the current input file (#3978)"
72,"Tailwind CSS v2.1.0
The first new feature update since Tailwind CSS v2.0 is here and loaded with lots of cool stuff!

New features
JIT engine in core
New filter and backdrop-filter utilities
New blending mode utilities
New isolation utilities
New box-decoration-break utilities
New inline-table and list-item display utilities


New features

JIT engine in core (#3905)
The brand-new JIT engine we announced in March has now been merged into core, and is available as an opt-in feature using a new mode option in your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  mode: 'jit',
  purge: [
    // ...
  ],
  // ...
}
This feature is still in preview which means some details may change as we iron out the kinks, and it's not subject to semantic versioning.
If you were using @tailwindcss/jit before, you can now migrate to Tailwind CSS v2.1 instead, as that's where all new development on the engine will happen.

New filter and backdrop-filter utilities (#3923)
This is a huge one — we've finally added first-class support for CSS filters!
They work a lot like our transform utilities, where you use filter to enable filters, and combine it with utilities like grayscale, blur-lg, or saturate-200 to compose filters on the fly.
Here's what filter looks like:
```html

 ... 

```
...and here's what backdrop-filter looks like:
```html

 ... 

```
Check out the filter and backdrop-filter to learn more. We'll add a bunch of helpful visual examples there soon!

New blending mode utilities (#3920)
We've added brand new utilities for mix-blend-mode and background-blend-mode:
```html

 ... 

```
Check out the documentation to learn more.

New isolation utilities (#3914)
We've added new isolate and isolation-auto utilities for working with the isolation property:
```html

 ... 

```
This can be really helpful for scoping blending mode features or z-index adjustments and is super powerful. Check out the documentation to learn more.
I also highly recommend this great article by Josh Comeau to see it in action.

New box-decoration-break utilities (#3911)
We've added brand new utilities for the box-decoration-break property:
```html

 ... 

```
It's a bit of an obscure one but it can be really useful alongside text gradients. Learn more in our documentation and in the MDN article.

New inline-table and list-item display utilities (#3563, #3929)
We've added a couple display utilities we were missing:
```html

 ... 


 ... 

```
Maybe not quite as exciting as the rest but a welcome addition nonetheless.","Tailwind CSS v2.1.0
The first new feature update since Tailwind CSS v2.0 is here and loaded with lots of cool stuff!
New features
JIT engine in core
New filter and backdrop-filter utilities
New blending mode utilities
New isolation utilities
New box-decoration-break utilities
New inline-table and list-item display utilities
New features
JIT engine in core (#3905)
The brand-new JIT engine we announced in March has now been merged into core, and is available as an opt-in feature using a new mode option in your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  mode: 'jit',
  purge: [
    // ...
  ],
  // ...
}
This feature is still in preview which means some details may change as we iron out the kinks, and it's not subject to semantic versioning.
If you were using @tailwindcss/jit before, you can now migrate to Tailwind CSS v2.1 instead, as that's where all new development on the engine will happen.
New filter and backdrop-filter utilities (#3923)
This is a huge one — we've finally added first-class support for CSS filters!
They work a lot like our transform utilities, where you use filter to enable filters, and combine it with utilities like grayscale, blur-lg, or saturate-200 to compose filters on the fly.
Here's what filter looks like:
```html
... 
modulehtml
... 
```
Check out the filter and backdrop-filter to learn more. We'll add a bunch of helpful visual examples there soon!
New blending mode utilities (#3920)
We've added brand new utilities for mix-blend-mode and background-blend-mode:
```html
... 
```
Check out the documentation to learn more.
New isolation utilities (#3914)
We've added new isolate and isolation-auto utilities for working with the isolation property:
```html
... 
```
This can be really helpful for scoping blending mode features or z-index adjustments and is super powerful. Check out the documentation to learn more.
I also highly recommend this great article by Josh Comeau to see it in action.
New box-decoration-break utilities (#3911)
We've added brand new utilities for the box-decoration-break property:
```html
... 
```
It's a bit of an obscure one but it can be really useful alongside text gradients. Learn more in our documentation and in the MDN article.
New inline-table and list-item display utilities (#3563, #3929)
We've added a couple display utilities we were missing:
```html
... 
... 
```
Maybe not quite as exciting as the rest but a welcome addition nonetheless."
73,"Fixed

Pass full var(--bg-opacity) value as opacityValue when defining colors as functions (https://github.com/tailwindlabs/tailwindcss/commit/d98f2f829d2bca83e0d14a9e2680d6859f8f4d65)
","Fixed
Pass full var(--bg-opacity) value as opacityValue when defining colors as functions (link)"
74,"Fixed

Ensure sourcemap input is deterministic when using @apply in Vue components (#3356)
Ensure placeholder opacity is consistent across browsers (#3308)
Fix issue where theme() didn't work with colors defined as functions (#2919)
Enable dark variants by default for color opacity utilities (#2975)

Added

Add support for a tailwind.config.cjs file in Node ESM projects (#3181)
Add version comment to Preflight (#3255)
Add cursor-help by default (#3199)
","Fixed
Ensure sourcemap input is deterministic when using @apply in Vue components (#3356)
Ensure placeholder opacity is consistent across browsers (#3308)
Fix issue where theme() didn't work with colors defined as functions (#2919)
Enable dark variants by default for color opacity utilities (#2975)
Added
Add support for a tailwind.config.cjs file in Node ESM projects (#3181)
Add version comment to Preflight (#3255)
Add cursor-help by default (#3199)"
75,"Fixed

Fix issue with @apply not working as expected with !important inside an at-rule (#2824)
Fix issue with @apply not working as expected with defined classes (#2832)
Fix memory leak, and broken @apply when splitting up files (#3032)

Added

Add default values for the ring utility (#2951)
","Fixed
Fix issue with @apply not working as expected with !important inside an at-rule (#2824)
Fix issue with @apply not working as expected with defined classes (#2832)
Fix memory leak, and broken @apply when splitting up files (#3032)
Added
Add default values for the ring utility (#2951)"
76,"
Nothing, just the only thing I could do when I found out npm won't let me publish the same version under two tags.
","Nothing, just the only thing I could do when I found out npm won't let me publish the same version under two tags."
77,"Tailwind CSS v2.0, woohoo!
Read the blog post for more details.
Added

Add redesigned color palette (#2623, 700866c, #2633)
Add dark mode support (#2279, #2631)
Add overflow-ellipsis and overflow-clip utilities (#1289)
Add transform-gpu to force hardware acceleration on transforms when desired (#1380)
Extend default spacing scale (#2630, 7f05204)
Add spacing scale to inset plugin (#2630)
Add percentage sizes to translate, inset, and height plugins (#2630, 5259560)
Extend default font size scale (#2609, #2619)
Support using @apply with complex classes, including variants like lg:hover:bg-blue-500 (#2159)
Add new 2xl breakpoint at 1536px by default (#2609)
Add default line-height values for font-size utilities (#2609)
Support defining theme values using arrays for CSS properties that support comma separated values (e13f083c4)
Enable group-hover for color plugins, boxShadow, and textDecoration by default (28985b6, f6923b1)
Enable focus for z-index utilities by default (ae5b3d3)
Support extend in variants configuration (#2651)
Add max-w-prose class by default (#2574)
Support flattening deeply nested color objects (#2148)
Support defining presets as functions (#2680)
Support deep merging of objects under extend (#2679, #2700)
Enable focus-within for all plugins that have focus enabled by default (1a21f072, f6923b1)
Added new ring utilities for creating outline/focus rings using box shadows (#2747, 879f088, e0788ef)
Added 5 and 95 to opacity scale (#2747)
Add support for default duration and timing function values whenever enabling transitions (#2755)

Changed

Completely redesign color palette (#2623, 700866c, #2633)
Drop support for Node 8 and 10 (#2582)
Removed target feature and dropped any compatibility with IE 11 (#2571)
Upgrade to PostCSS 8 (but include PostCSS 7 compatibility build) (729b400, 1d8679d, c238ed1)
Removed shadow-outline, shadow-solid, and shadow-xs by default in favor of new ring API (#2747)
Switch normalize.css to modern-normalize (#2572)
Rename whitespace-no-wrap to whitespace-nowrap (#2664)
Rename flex-no-wrap to flex-nowrap (#2676)
Remove clearfix utility, recommend flow-root instead (#2766)
Disable hover and focus for fontWeight utilities by default (f6923b1)
Remove grid-gap fallbacks needed for old versions of Safari (5ec45fa)
Change special use of 'default' in config to 'DEFAULT' (#2580)
New @apply implementation, slight backwards incompatibilities with previous behavior (#2159)
Make theme retrieve the expected resolved value when theme value is complex (e13f083c4)
Move truncate class to textOverflow core plugin (#2562)
Remove scrolling-touch and scrolling-auto utilities (#2573)
Modernize default system font stacks (#1711)
Upgrade to PurgeCSS 3.0 (8e4e0a0)
Change default text-6xl font-size to 3.75rem instead of 4rem (#2619)
Ignore [hidden] elements within space and divide utilities instead of template elements (#2642)
Automatically prefix keyframes and animation names when a prefix is configured (#2621, #2641)
Merge extend objects deeply by default (#2679)
Respect preserveHtmlElements option even when using custom PurgeCSS extractor (#2704)
Namespace all internal custom properties under tw- to avoid collisions with end-user custom properties (#2771)
","Tailwind CSS v2.0, woohoo!
Read the blog post for more details.
Added
Add redesigned color palette (#2623, 700866c, #2633)
Add dark mode support (#2279, #2631)
Add overflow-ellipsis and overflow-clip utilities (#1289)
Add transform-gpu to force hardware acceleration on transforms when desired (#1380)
Extend default spacing scale (#2630, 7f05204)
Add spacing scale to inset plugin (#2630)
Add percentage sizes to translate, inset, and height plugins (#2630, 5259560)
Extend default font size scale (#2609, #2619)
Support using @apply with complex classes, including variants like lg:hover:bg-blue-500 (#2159)
Add new 2xl breakpoint at 1536px by default (#2609)
Add default line-height values for font-size utilities (#2609)
Support defining theme values using arrays for CSS properties that support comma separated values (e13f083c4)
Enable group-hover for color plugins, boxShadow, and textDecoration by default (28985b6, f6923b1)
Enable focus for z-index utilities by default (ae5b3d3)
Support extend in variants configuration (#2651)
Add max-w-prose class by default (#2574)
Support flattening deeply nested color objects (#2148)
Support defining presets as functions (#2680)
Support deep merging of objects under extend (#2679, #2700)
Enable focus-within for all plugins that have focus enabled by default (1a21f072, f6923b1)
Added new ring utilities for creating outline/focus rings using box shadows (#2747, 879f088, e0788ef)
Added 5 and 95 to opacity scale (#2747)
Add support for default duration and timing function values whenever enabling transitions (#2755)
Changed
Completely redesign color palette (#2623, 700866c, #2633)
Drop support for Node 8 and 10 (#2582)
Removed target feature and dropped any compatibility with IE 11 (#2571)
Upgrade to PostCSS 8 (but include PostCSS 7 compatibility build) (729b400, 1d8679d, c238ed1)
Removed shadow-outline, shadow-solid, and shadow-xs by default in favor of new ring API (#2747)
Switch normalize.css to modern-normalize (#2572)
Rename whitespace-no-wrap to whitespace-nowrap (#2664)
Rename flex-no-wrap to flex-nowrap (#2676)
Remove clearfix utility, recommend flow-root instead (#2766)
Disable hover and focus for fontWeight utilities by default (f6923b1)
Remove grid-gap fallbacks needed for old versions of Safari (5ec45fa)
Change special use of 'default' in config to 'DEFAULT' (#2580)
New @apply implementation, slight backwards incompatibilities with previous behavior (#2159)
Make theme retrieve the expected resolved value when theme value is complex (e13f083c4)
Move truncate class to textOverflow core plugin (#2562)
Remove scrolling-touch and scrolling-auto utilities (#2573)
Modernize default system font stacks (#1711)
Upgrade to PurgeCSS 3.0 (8e4e0a0)
Change default text-6xl font-size to 3.75rem instead of 4rem (#2619)
Ignore [hidden] elements within space and divide utilities instead of template elements (#2642)
Automatically prefix keyframes and animation names when a prefix is configured (#2621, #2641)
Merge extend objects deeply by default (#2679)
Respect preserveHtmlElements option even when using custom PurgeCSS extractor (#2704)
Namespace all internal custom properties under tw- to avoid collisions with end-user custom properties (#2771)"
78,"Fixed

Fix issue where ring-offset-0 didn't work due to unitless 0 in calc function (3de0c48)
","Fixed
Fix issue where ring-offset-0 didn't work due to unitless 0 in calc function (3de0c48)"
79,"Changed

Don't override ring color when overriding ring width with a variant (e40079a)

Fixed

Prevent shadow/ring styles from cascading to children (e40079a)
Ensure rings have a default color even if colors.blue.500 is not present in config (e40079a)
","Changed
Don't override ring color when overriding ring width with a variant (e40079a)
Fixed
Prevent shadow/ring styles from cascading to children (e40079a)
Ensure rings have a default color even if colors.blue.500 is not present in config (e40079a)"
80,"Added

Add scripts for generating a PostCSS 7 compatible build alongside PostCSS 8 version (#2773)

Changed

All custom properties have been internally namespaced under tw- to avoid collisions with end-user custom properties (#2771)
","Added
Add scripts for generating a PostCSS 7 compatible build alongside PostCSS 8 version (#2773)
Changed
All custom properties have been internally namespaced under tw- to avoid collisions with end-user custom properties (#2771)"
81,"Changed

~~All custom properties have been internally namespaced under tw- to avoid collisions with end-user custom properties (#2771)~~ I made a git booboo, check alpha.23 instead
","Changed
~~All custom properties have been internally namespaced under tw- to avoid collisions with end-user custom properties (#2771)~~ I made a git booboo, check alpha.23 instead"
82,"Changed

Upgrade to PostCSS 8, Autoprefixer 10, move postcss and autoprefixer to peerDependencies (729b400)
","Changed
Upgrade to PostCSS 8, Autoprefixer 10, move postcss and autoprefixer to peerDependencies (729b400)"
83,"Changed

Remove clearfix utility, recommend flow-root instead (#2766)
","Changed
Remove clearfix utility, recommend flow-root instead (#2766)"
84,"Fixed

Don't crash when color palette is empty (278c203)
","Fixed
Don't crash when color palette is empty (278c203)"
85,"Changed

black and white have been added to colors.js (b3ed724)

Fixed

Add support for colors as closures to ringColor and ringOffsetColor, previously would crash build (62a47f9)
","Changed
black and white have been added to colors.js (b3ed724)
Fixed
Add support for colors as closures to ringColor and ringOffsetColor, previously would crash build (62a47f9)"
86,"Changed

Remove grid-gap fallbacks needed for old versions of Safari (5ec45fa)
","Changed
Remove grid-gap fallbacks needed for old versions of Safari (5ec45fa)"
87,"Added

Enable focus, focus-within, and dark variants (when enabled) for all ring utilities by default (e0788ef)
","Added
Enable focus, focus-within, and dark variants (when enabled) for all ring utilities by default (e0788ef)"
88,"Added

Added ring-inset utility for rendering rings as inset shadows (879f088)

Changed

ringWidth utilities always reset ring styles to ensure no accidental variable inheritance through the cascade (879f088)
","Added
Added ring-inset utility for rendering rings as inset shadows (879f088)
Changed
ringWidth utilities always reset ring styles to ensure no accidental variable inheritance through the cascade (879f088)"
89,"Added

Enable focus-within for outline utilities by default (f6923b1)
Enable focus-within for ringWidth utilities by default (f6923b1)
Enable group-hover for boxShadow utilities by default (f6923b1)
Enable group-hover and focus-within for textDecoration utilities by default (f6923b1)
","Added
Enable focus-within for outline utilities by default (f6923b1)
Enable focus-within for ringWidth utilities by default (f6923b1)
Enable group-hover for boxShadow utilities by default (f6923b1)
Enable group-hover and focus-within for textDecoration utilities by default (f6923b1)"
90,"Added

Add support for default duration and timing function values whenever enabling transitions (#2755)
","Added
Add support for default duration and timing function values whenever enabling transitions (#2755)"
91,"Fixed

Prevent boxShadow utilities from overriding ring shadows added by components like in the custom forms plugin (c3dd3b6)
","Fixed
Prevent boxShadow utilities from overriding ring shadows added by components like in the custom forms plugin (c3dd3b6)"
92,"Fixed

Convert none to 0 0 #0000 when used for shadows to ensure compatibility with ring utilities (4eecc27)
","Fixed
Convert none to 0 0 #0000 when used for shadows to ensure compatibility with ring utilities (4eecc27)"
93,"Added

Added new ring utilities (#2747)
Added 5 and 95 to opacity scale (#2747)

Changed

Removed shadow-outline, shadow-solid, and shadow-xs in favor of new ring API (#2747)
","Added
Added new ring utilities (#2747)
Added 5 and 95 to opacity scale (#2747)
Changed
Removed shadow-outline, shadow-solid, and shadow-xs in favor of new ring API (#2747)"
94,"Added

Added shadow-solid utility, a 2px solid shadow that uses the current text color (369cfae)
Enable focus-within where useful by default (1a21f072)

Changed

Update shadow-outline to use the new blue (b078238)
","Added
Added shadow-solid utility, a 2px solid shadow that uses the current text color (369cfae)
Enable focus-within where useful by default (1a21f072)
Changed
Update shadow-outline to use the new blue (b078238)"
95,"Added

Add 11 to spacing scale (7f05204)
Add percentage-based height values (5259560)
Add indigo to the color palette by default (700866c)

Changed

Use coolGray as the default gray (700866c)
","Added
Add 11 to spacing scale (7f05204)
Add percentage-based height values (5259560)
Add indigo to the color palette by default (700866c)
Changed
Use coolGray as the default gray (700866c)"
96,"Changed

Revert upgrading to PostCSS 8 lol (we'll still migrate to PostCSS 8 before release... maybe.)
","Changed
Revert upgrading to PostCSS 8 lol (we'll still migrate to PostCSS 8 before release... maybe.)"
97,"Changed

Respect preserveHtmlElements option even when using custom PurgeCSS extractor (#2704)
Set font-family and line-height to inherit on body to behave more like v1.x (#2729)
","Changed
Respect preserveHtmlElements option even when using custom PurgeCSS extractor (#2704)
Set font-family and line-height to inherit on body to behave more like v1.x (#2729)"
98,"Changed

Upgrade to PostCSS 8 (59aa484)
","Changed
Upgrade to PostCSS 8 (59aa484)"
99,"Added

Support deep merging of arrays of objects under extend (#2700)
","Added
Support deep merging of arrays of objects under extend (#2700)"
100,"Added

Support flattening deeply nested color objects (#2148)
Support defining presets as functions (#2680)

Changed

Merge extend objects deeply by default (#2679)
Rename flex-no-wrap to flex-nowrap (#2676)
","Added
Support flattening deeply nested color objects (#2148)
Support defining presets as functions (#2680)
Changed
Merge extend objects deeply by default (#2679)
Rename flex-no-wrap to flex-nowrap (#2676)"
101,"Added

Support extend in variants configuration (#2651)
Add max-w-prose class by default (#2574)

Changed

Revert use of logical properties for space and divide utilities (#2644)
space and divide utilities ignore elements with [hidden] now instead of only ignoring template elements (#2642)
Set default font on body, not just html (#2643)
Automatically prefix keyframes and animation names when a prefix is configured (#2621, #2641)
Rename whitespace-no-wrap to whitespace-nowrap (#2664)
","Added
Support extend in variants configuration (#2651)
Add max-w-prose class by default (#2574)
Changed
Revert use of logical properties for space and divide utilities (#2644)
space and divide utilities ignore elements with [hidden] now instead of only ignoring template elements (#2642)
Set default font on body, not just html (#2643)
Automatically prefix keyframes and animation names when a prefix is configured (#2621, #2641)
Rename whitespace-no-wrap to whitespace-nowrap (#2664)"
102,"Changed

The presets feature had unexpected behavior where a preset config without its own presets key would not extend the default config. (#2662)

If you were depending on this unexpected behavior, just add presets: [] to your own preset to exclude the default configuration.","Changed
The presets feature had unexpected behavior where a preset config without its own presets key would not extend the default config. (#2662)
If you were depending on this unexpected behavior, just add presets: [] to your own preset to exclude the default configuration."
103,"Warning: This is a pre-release. I don't plan for anything to change (otherwise I would have already changed it) but things probably still will. There are probably also obviously broken embarrassing mistakes I haven't noticed because I'm so deep in the rabbit hole. Please test, help me fix them, and have some sympathy for me 😅 
TL;DR:

Dark mode
New 2xl breakpoint
More big font sizes
More useful extended spacing scale (you can do top-16 and stuff by default now)
New sweet color palette (smaller and bigger at the same time 🤯 )
@apply works with everything now
IE11 compatibility completely dropped
Bunch of other small things that aren't as important


Added

Added dark mode support (#2279, #2631)
Added overflow-ellipsis and overflow-clip utilities (#1289)
Add transform-gpu to force hardware acceleration on transforms when beneficial (#1380)
Extended spacing scale (#2630)
Add spacing scale to inset plugin (#2630)
Enable useful relative sizes for more plugins (#2630)
Extend font size scale (#2609, #2619)
Support using @apply with complex classes (#2159)
Add new 2xl breakpoint (#2609)
Add default line-height values for font-size utilities (#2609)
Support defining theme values using arrays wherever it makes sense (box-shadow, transition-property, etc.) (e13f083c4)
Enable group-hover for color utilities by default (28985b6)
Enable focus for z-index utilities by default (ae5b3d3)

Changed

New @apply implementation, slight backwards incompatibilities with previous behavior (#2159)
Move truncate class to textOverflow core plugin (#2562)
Removed target feature and dropped any compatibility with IE 11 (#2571)
Switch normalize.css to modern-normalize (#2572)
Remove scrolling-touch and scrolling-auto utilities (#2573)
Change special use of 'default' in config to 'DEFAULT' (#2580)
Drop support for Node 8 and 10 (#2582)
Modernize default system font stacks (#1711)
Upgrade to PurgeCSS 3.0
~~Upgrade to PostCSS 8.0~~ Reverted for now
Use logical properties for space and divide utilities (#1883)
Make theme retrieve the expected resolved value when theme value is complex (e13f083c4)
Adjust default font-size scale to include 60px instead of 64px (#2619)
Update default colors in Preflight to match new color palette (#2633)
","Warning: This is a pre-release. I don't plan for anything to change (otherwise I would have already changed it) but things probably still will. There are probably also obviously broken embarrassing mistakes I haven't noticed because I'm so deep in the rabbit hole. Please test, help me fix them, and have some sympathy for me 😅 
TL;DR:
Dark mode
New 2xl breakpoint
More big font sizes
More useful extended spacing scale (you can do top-16 and stuff by default now)
New sweet color palette (smaller and bigger at the same time 🤯 )
@apply works with everything now
IE11 compatibility completely dropped
Bunch of other small things that aren't as important
Added
Added dark mode support (#2279, #2631)
Added overflow-ellipsis and overflow-clip utilities (#1289)
Add transform-gpu to force hardware acceleration on transforms when beneficial (#1380)
Extended spacing scale (#2630)
Add spacing scale to inset plugin (#2630)
Enable useful relative sizes for more plugins (#2630)
Extend font size scale (#2609, #2619)
Support using @apply with complex classes (#2159)
Add new 2xl breakpoint (#2609)
Add default line-height values for font-size utilities (#2609)
Support defining theme values using arrays wherever it makes sense (box-shadow, transition-property, etc.) (e13f083c4)
Enable group-hover for color utilities by default (28985b6)
Enable focus for z-index utilities by default (ae5b3d3)
Changed
New @apply implementation, slight backwards incompatibilities with previous behavior (#2159)
Move truncate class to textOverflow core plugin (#2562)
Removed target feature and dropped any compatibility with IE 11 (#2571)
Switch normalize.css to modern-normalize (#2572)
Remove scrolling-touch and scrolling-auto utilities (#2573)
Change special use of 'default' in config to 'DEFAULT' (#2580)
Drop support for Node 8 and 10 (#2582)
Modernize default system font stacks (#1711)
Upgrade to PurgeCSS 3.0
~~Upgrade to PostCSS 8.0~~ Reverted for now
Use logical properties for space and divide utilities (#1883)
Make theme retrieve the expected resolved value when theme value is complex (e13f083c4)
Adjust default font-size scale to include 60px instead of 64px (#2619)
Update default colors in Preflight to match new color palette (#2633)"
104,"Fixed

Fix issue where using theme with default line-heights did not resolve correctly (#2308)
","Fixed
Fix issue where using theme with default line-heights did not resolve correctly (#2308)"
105,"Fixed

Fix issue changing plugins defined using the withOptions API would not trigger rebuilds in watch processes
","Fixed
Fix issue changing plugins defined using the withOptions API would not trigger rebuilds in watch processes"
106,"
Fix issue where tailwindcss init --full scaffolded a corrupt config file (https://github.com/tailwindlabs/tailwindcss/issues/2556)
Remove console warnings about upcoming breaking changes (see note below)


I've opted to remove the console notices about upcoming breaking changes (that encouraged users to opt-in to future features using the future option in their config file.)
While I had good intentions for this approach originally, I'm realizing now that it just ends up creating more confusion and a sloppier documentation story. Any breaking changes can't really be documented easily because the documentation needs to show the stable version of any given feature, since we can't assume someone has opted in to the new stuff.
This means that when someone does opt in, they are basically opting in to being out of sync with the documentation, which is a crappy experience for them, especially if they can't upgrade to Tailwind 2.0 in the near future because they need to support IE11.
For this reason I've decided to stop warning about the upcoming breaking changes so that we don't force users to opt-in to an essentially undocumented version of the framework. Instead we will continue to maintain the ""upcoming changes"" page in the docs, and continue to ship new ideas behind flags for people to test but without the nudge to upgrade. Folks who are comfortable opting-in to the new stuff early can do so, and folks that aren't can comfortably keep using things the way they are (along with complete documentation) and upgrade to the next version all at once, like people have done traditionally with most dependencies.
I will always strive to make breaking changes as painless and minimal as possible, so spending an hour to do the upgrade in one sitting is never going to be too bad. I highly value backwards compatibility and will never make needlessly breaking changes. An improvement is only worth making if it improves things enough to make up for the upgrade cost, and that's usually pretty rare. For example lh-5 might be a nicer class name than leading-5 but it is absolutely not worth breaking everyone's muscle memory and forcing them to replace hundreds of instances of classes in their projects. We'll only make breaking changes if they unlock meaningful new possibilities or fix fundamental problems that are holding people back.","Fix issue where tailwindcss init --full scaffolded a corrupt config file (link)
Remove console warnings about upcoming breaking changes (see note below)
I've opted to remove the console notices about upcoming breaking changes (that encouraged users to opt-in to future features using the future option in their config file.)
While I had good intentions for this approach originally, I'm realizing now that it just ends up creating more confusion and a sloppier documentation story. Any breaking changes can't really be documented easily because the documentation needs to show the stable version of any given feature, since we can't assume someone has opted in to the new stuff.
This means that when someone does opt in, they are basically opting in to being out of sync with the documentation, which is a crappy experience for them, especially if they can't upgrade to Tailwind 2.0 in the near future because they need to support IE11.
For this reason I've decided to stop warning about the upcoming breaking changes so that we don't force users to opt-in to an essentially undocumented version of the framework. Instead we will continue to maintain the ""upcoming changes"" page in the docs, and continue to ship new ideas behind flags for people to test but without the nudge to upgrade. Folks who are comfortable opting-in to the new stuff early can do so, and folks that aren't can comfortably keep using things the way they are (along with complete documentation) and upgrade to the next version all at once, like people have done traditionally with most dependencies.
I will always strive to make breaking changes as painless and minimal as possible, so spending an hour to do the upgrade in one sitting is never going to be too bad. I highly value backwards compatibility and will never make needlessly breaking changes. An improvement is only worth making if it improves things enough to make up for the upgrade cost, and that's usually pretty rare. For example lh-5 might be a nicer class name than leading-5 but it is absolutely not worth breaking everyone's muscle memory and forcing them to replace hundreds of instances of classes in their projects. We'll only make breaking changes if they unlock meaningful new possibilities or fix fundamental problems that are holding people back."
107,"Fixed

Merge plugins when merging config with preset (#2561
Use word-wrap and overflow-wrap together, not one or the other since word-wrap is IE-only
","Fixed
Merge plugins when merging config with preset (#2561
Use word-wrap and overflow-wrap together, not one or the other since word-wrap is IE-only"
108,"Fixed

Don't import corePlugins in resolveConfig to avoid bundling browser-incompatible code (#2548)
","Fixed
Don't import corePlugins in resolveConfig to avoid bundling browser-incompatible code (#2548)"
109,"Tailwind CSS v1.9 is now available with a new presets feature, some new utilities, and a few accessibility improvements. Check it out!
New features

Add new presets config option (#2474)
Scaffold new tailwind.config.js files with available future flags commented out (#2379)
Add col-span-full and row-span-full (#2471)
Make outline configurable, outline-none more accessible by default, and add outline-black and outline-white (#2460)
Add additional small rotate and skew values (#2528)
Add xl, 2xl, and 3xl border radius values (#2529)
Add new utilities for grid-auto-columns and grid-auto-rows (#2531)
Promote defaultLineHeights and standardFontWeights from experimental to future

Fixed

Don't escape keyframe values (#2432)
Use word-wrap instead of overflow-wrap in ie11 target mode (#2391)

Experimental

Add experimental 2xl breakpoint (#2468)
Rename {u}-max-content and {u}-min-content utilities to {u}-max and {u}-min in experimental extended spacing scale (#2532)
Support disabling dark mode variants globally (#2530)
","Tailwind CSS v1.9 is now available with a new presets feature, some new utilities, and a few accessibility improvements. Check it out!
New features
Add new presets config option (#2474)
Scaffold new tailwind.config.js files with available future flags commented out (#2379)
Add col-span-full and row-span-full (#2471)
Make outline configurable, outline-none more accessible by default, and add outline-black and outline-white (#2460)
Add additional small rotate and skew values (#2528)
Add xl, 2xl, and 3xl border radius values (#2529)
Add new utilities for grid-auto-columns and grid-auto-rows (#2531)
Promote defaultLineHeights and standardFontWeights from experimental to future
Fixed
Don't escape keyframe values (#2432)
Use word-wrap instead of overflow-wrap in ie11 target mode (#2391)
Experimental
Add experimental 2xl breakpoint (#2468)
Rename {u}-max-content and {u}-min-content utilities to {u}-max and {u}-min in experimental extended spacing scale (#2532)
Support disabling dark mode variants globally (#2530)"
110,"Fixed

Support defining colors as closures even when opacity variables are not supported (#2536)
","Fixed
Support defining colors as closures even when opacity variables are not supported (#2536)"
111,"Fixed

Reset color opacity variable in utilities generated using closure colors (#2515)
","Fixed
Reset color opacity variable in utilities generated using closure colors (#2515)"
112,"
Make tailwindcss.plugin work in ESM environments for reasons
",Make tailwindcss.plugin work in ESM environments for reasons
113,"Fixed

Prevent new dark experiment from causing third-party dark variants to inherit stacking behavior (#2382)
","Fixed
Prevent new dark experiment from causing third-party dark variants to inherit stacking behavior (#2382)"
114,"Fixed

Add negative spacing values to inset plugin in the extendedSpacingScale experiment (#2358)
Fix issue where !important was stripped from declarations within rules that used @apply with applyComplexClasses (#2376)

Changed

Add future section to config stubs (#2372, 3090b98)
","Fixed
Add negative spacing values to inset plugin in the extendedSpacingScale experiment (#2358)
Fix issue where !important was stripped from declarations within rules that used @apply with applyComplexClasses (#2376)
Changed
Add future section to config stubs (#2372, 3090b98)"
115,"Fixed

Register dark mode plugin outside of resolveConfig code path (#2368)
","Fixed
Register dark mode plugin outside of resolveConfig code path (#2368)"
116,"Fixed

Fix issue where classes in escaped strings (like class=\""block\"") weren't extracted properly for purging (#2364)
","Fixed
Fix issue where classes in escaped strings (like class=\""block\"") weren't extracted properly for purging (#2364)"
117,"Fixed

Fix issue where container padding not applied when using object syntax (#2353)
","Fixed
Fix issue where container padding not applied when using object syntax (#2353)"
118,"Fixed

Fix issue where resolveConfig didn't take into account configs added by feature flags (#2347)
","Fixed
Fix issue where resolveConfig didn't take into account configs added by feature flags (#2347)"
119,"Fixed

Fix issue where inserting extra PurgeCSS control comments could break integrated PurgeCSS support
Fix issue where dark variant in 'class' mode was incompatible with 'group-hover' variant (#2337)
Support basic nesting structure with @apply when using the applyComplexClasses experiment (#2271)

Changed

Rename font-hairline and font-thin to font-thin and font-extralight behind standardFontWeights flag (experimental until v1.9.0) (#2333)
","Fixed
Fix issue where inserting extra PurgeCSS control comments could break integrated PurgeCSS support
Fix issue where dark variant in 'class' mode was incompatible with 'group-hover' variant (#2337)
Support basic nesting structure with @apply when using the applyComplexClasses experiment (#2271)
Changed
Rename font-hairline and font-thin to font-thin and font-extralight behind standardFontWeights flag (experimental until v1.9.0) (#2333)"
120,"Fixed

Fix issue where font-variant-numeric utilities would break in combination with most CSS minifier configurations (f3660ce)
Only warn about conservative purge mode being deprecated once per process (58781b5)
","Fixed
Fix issue where font-variant-numeric utilities would break in combination with most CSS minifier configurations (f3660ce)
Only warn about conservative purge mode being deprecated once per process (58781b5)"
121,"
Fix bug where dark mode variants would cause an error if you had a plugins array in your config (#2322)
",Fix bug where dark mode variants would cause an error if you had a plugins array in your config (#2322)
122,"
Fix bug in the new font-variant-numeric utilities which broke the whole rule
Fix bug while purging
","Fix bug in the new font-variant-numeric utilities which broke the whole rule
Fix bug while purging"
123,"Tailwind CSS v1.8
Tailwind CSS v1.8 is now available with a handful of new utilities, a couple new features, and an exciting new experiment 🌚!

New features
New font-variant-numeric utilities
New grid alignment utilities
New preserveHtmlElements option for purge
New layers mode for purge
Support configuring variants as functions
Dark mode (experimental)
Changes
@layer rules are now grouped together
Deprecations
conservative purge mode deprecated in favor of layers


New features

New font-variant-numeric utilities (#2305)
We've added a new composable API for the font-variant-numeric property, so now you can finally do the whole tabular-nums thing!
Here's what's been added:
| Class                | Description                              |
| -------------------- | ---------------------------------------- |
| normal-nums        | Reset font-variant-numeric to normal |
| ordinal            | Enables the ordinal feature            |
| slashed-zero       | Enables the slashed-zero feature       |
| lining-nums        | Enables the lining-nums feature        |
| oldstyle-nums      | Enables the oldstyle-nums feature      |
| proportional-nums  | Enables the proportional-nums feature  |
| tabular-nums       | Enables the tabular-nums feature       |
| diagonal-fractions | Enables the diagonal-fractions feature |
| stacked-fractions  | Enables the stacked-fractions feature  |
The exciting thing about how these are implemented is that they are composable in your HTML, so you can enable multiple font-variant-numeric features by adding multiple classes:
```html
12345
```
The normal-nums class can be used to reset things, usually used at a particular breakpoint:
```html
12345
```
By default, only responsive variants are enabled for this new core plugin.

New grid alignment utilities (#2306)
We've added a bunch of new utilities for the place-items, place-content, place-self, justify-items, and justify-self properties!
Here's a complete list of what has been added:
| Core plugin    | Class                   | CSS                            |
| -------------- | ----------------------- | ------------------------------ |
| justifyItems | justify-items-auto    | justify-items: auto          |
| justifyItems | justify-items-start   | justify-items: start         |
| justifyItems | justify-items-end     | justify-items: end           |
| justifyItems | justify-items-center  | justify-items: center        |
| justifyItems | justify-items-stretch | justify-items: stretch       |
| justifySelf  | justify-self-auto     | justify-self: auto           |
| justifySelf  | justify-self-start    | justify-self: start          |
| justifySelf  | justify-self-end      | justify-self: end            |
| justifySelf  | justify-self-center   | justify-self: center         |
| justifySelf  | justify-self-stretch  | justify-self: stretch        |
| placeContent | place-content-center  | place-content: center        |
| placeContent | place-content-start   | place-content: start         |
| placeContent | place-content-end     | place-content: end           |
| placeContent | place-content-between | place-content: space-between |
| placeContent | place-content-around  | place-content: space-around  |
| placeContent | place-content-evenly  | place-content: space-evenly  |
| placeContent | place-content-stretch | place-content: stretch       |
| placeItems   | place-items-auto      | place-items: auto            |
| placeItems   | place-items-start     | place-items: start           |
| placeItems   | place-items-end       | place-items: end             |
| placeItems   | place-items-center    | place-items: center          |
| placeItems   | place-items-stretch   | place-items: stretch         |
| placeSelf    | place-self-auto       | place-self: auto             |
| placeSelf    | place-self-start      | place-self: start            |
| placeSelf    | place-self-end        | place-self: end              |
| placeSelf    | place-self-center     | place-self: center           |
| placeSelf    | place-self-stretch    | place-self: stretch          |
By default, responsive variants are generated for each of these new core plugins.

New preserveHtmlElements option for purge (#2283)
Tailwind v1.8 introduces a new preserveHtmlElements option to the purge configuration that allows you to safelist all plain HTML elements, like p, blockquote, body, video, etc.
js
// tailwind.config.js
module.exports = {
  purge: {
    content: [
      // Paths...
    ],
    preserveHtmlElements: true,
  },
}
This helps avoid accidentally purging things like heading elements when your source files are in a format that compiles to HTML, like markdown (since your markdown won't actually contain the string h1 anywhere).
This option is set to true by default.

New layers mode for purge (#2288)
We've introduced a new layers purge mode and made it the default, deprecating the existing conservative mode.
When configured manually, it looks like this:
js
// tailwind.config.js
module.exports = {
  purge: {
    mode: 'layers',
    layers: ['base', 'components', 'utilities'],
    content: [
      // Paths...
    ],
  },
}
It allows you to tell Tailwind which layers it should purge (base, components, and/or utilities). The old conservative mode was the equivalent of this:
js
// tailwind.config.js
module.exports = {
  purge: {
    mode: 'layers',
    layers: ['utilities'],
    content: [
      // Paths...
    ],
  },
}
This is a breaking change (although it probably won't actually affect you), so to make it the default you'll have to opt-in behind the purgeLayersByDefault flag:
js
// tailwind.config.js
module.exports = {
  future: {
    purgeLayersByDefault: true,
  },
  // ...
}

Support configuring variants as functions (#2309)
Adding new variants to a core plugin is annoying right? You have to remember to list all of the existing variants, instead of just specying the new ones you want to add. Completely unacceptable!
Tailwind CSS v1.8 makes it possible to configure variants as functions so you can leverage some helpful utilities we expose to you that make it easy to extend the variant configuration instead of having to re-write the entire list:
js
// tailwind.config.js
module.exports = {
  variants: {
    opacity: ({ before }) => before(['group-hover'], 'hover'),
  },
}
Read the pull request for all of the details.

Dark mode (experimental) (#2279)
Oh yeah I almost forgot, we added dark mode.
```html

```
It's stackable with both responsive variants and pseudo-class variants, so you can use classes like lg:dark:focus:text-white no problem.
It can be configured to use a prefers-color-scheme media query or a parent class (.dark), whichever you prefer:
js
module.exports = {
  dark: 'media', // or 'class'
  experimental {
    darkModeVariant: true,
  }
}
It's enabled for backgroundColor, borderColor, divideColor, textColor, gradientColorStops, and placeholderColor by default.
It's experimental right now, so enable it using the darkModeVariant experimental flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    darkModeVariant: true,
  },
  // ...
}
Let us know how it works for you and if there's anything we can improve before we tag it as stable!

Changes

@layer rules are now grouped together (#2312)
Any custom CSS defined within a @layer at-rule that matches one of Tailwind's layers is now grouped together with the corresponding Tailwind rules.
For example, this CSS:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer components {
  .btn {
    background: blue;
  }
}
@layer utilities {
  .align-banana {
    text-align: banana;
  }
}
@layer base {
  h1 {
    font-weight: bold;
  }
}
@layer components {
  .card {
    border-radius: 12px;
  }
}
@layer base {
  p {
    font-weight: normal;
  }
}
@layer utilities {
  .align-sandwich {
    text-align: sandwich;
  }
}
```
...conceptually becomes this:
```css
@tailwind base;
h1 {
  font-weight: bold;
}
p {
  font-weight: normal;
}
@tailwind components;
.btn {
  background: blue;
}
.card {
  border-radius: 12px;
}
@tailwind utilities;
.align-banana {
  text-align: banana;
}
.align-sandwich {
  text-align: sandwich;
}
```
This is useful for avoiding CSS declaration order specificity issues and lets you decouple authoring order from intended render order. This is generally inline with the new @layer CSS proposal that came out shortly after we introduced this at-rule to Tailwind ourselves without knowing that existed, heh.
This is a change in behavior to how things worked before but we don't document the @layer rule outside of mentioning it in the release notes for Tailwind 1.6. I am going to be a bit bold and classify this as a bugfix, as this is how this always should have worked. Basically a zero percent chance this will break anything for anyone.

Deprecations

conservative purge mode deprecated in favor of layers (#2288)
The new layers mode replaces the old conservative mode and will be the default in v2.0. You'll get a console warning until you update this value in your config file.
If you want to update without any changes in behavior, use this configuration:
js
// tailwind.config.js
module.exports = {
  purge: {
    mode: 'layers',
    layers: ['utilities'],
    content: [
      // Paths...
    ],
  },
}","Tailwind CSS v1.8
Tailwind CSS v1.8 is now available with a handful of new utilities, a couple new features, and an exciting new experiment 🌚!
New features
New font-variant-numeric utilities
New grid alignment utilities
New preserveHtmlElements option for purge
New layers mode for purge
Support configuring variants as functions
Dark mode (experimental)
Changes
@layer rules are now grouped together
Deprecations
conservative purge mode deprecated in favor of layers
New features
New font-variant-numeric utilities (#2305)
We've added a new composable API for the font-variant-numeric property, so now you can finally do the whole tabular-nums thing!
Here's what's been added:
| Class                | Description                              |
| -------------------- | ---------------------------------------- |
| normal-nums        | Reset font-variant-numeric to normal |
| ordinal            | Enables the ordinal feature            |
| slashed-zero       | Enables the slashed-zero feature       |
| lining-nums        | Enables the lining-nums feature        |
| oldstyle-nums      | Enables the oldstyle-nums feature      |
| proportional-nums  | Enables the proportional-nums feature  |
| tabular-nums       | Enables the tabular-nums feature       |
| diagonal-fractions | Enables the diagonal-fractions feature |
| stacked-fractions  | Enables the stacked-fractions feature  |
The exciting thing about how these are implemented is that they are composable in your HTML, so you can enable multiple font-variant-numeric features by adding multiple classes:
module
The normal-nums class can be used to reset things, usually used at a particular breakpoint:
module
By default, only responsive variants are enabled for this new core plugin.
New grid alignment utilities (#2306)
We've added a bunch of new utilities for the place-items, place-content, place-self, justify-items, and justify-self properties!
Here's a complete list of what has been added:
| Core plugin    | Class                   | CSS                            |
| -------------- | ----------------------- | ------------------------------ |
| justifyItems | justify-items-auto    | justify-items: auto          |
| justifyItems | justify-items-start   | justify-items: start         |
| justifyItems | justify-items-end     | justify-items: end           |
| justifyItems | justify-items-center  | justify-items: center        |
| justifyItems | justify-items-stretch | justify-items: stretch       |
| justifySelf  | justify-self-auto     | justify-self: auto           |
| justifySelf  | justify-self-start    | justify-self: start          |
| justifySelf  | justify-self-end      | justify-self: end            |
| justifySelf  | justify-self-center   | justify-self: center         |
| justifySelf  | justify-self-stretch  | justify-self: stretch        |
| placeContent | place-content-center  | place-content: center        |
| placeContent | place-content-start   | place-content: start         |
| placeContent | place-content-end     | place-content: end           |
| placeContent | place-content-between | place-content: space-between |
| placeContent | place-content-around  | place-content: space-around  |
| placeContent | place-content-evenly  | place-content: space-evenly  |
| placeContent | place-content-stretch | place-content: stretch       |
| placeItems   | place-items-auto      | place-items: auto            |
| placeItems   | place-items-start     | place-items: start           |
| placeItems   | place-items-end       | place-items: end             |
| placeItems   | place-items-center    | place-items: center          |
| placeItems   | place-items-stretch   | place-items: stretch         |
| placeSelf    | place-self-auto       | place-self: auto             |
| placeSelf    | place-self-start      | place-self: start            |
| placeSelf    | place-self-end        | place-self: end              |
| placeSelf    | place-self-center     | place-self: center           |
| placeSelf    | place-self-stretch    | place-self: stretch          |
By default, responsive variants are generated for each of these new core plugins.
New preserveHtmlElements option for purge (#2283)
Tailwind v1.8 introduces a new preserveHtmlElements option to the purge configuration that allows you to safelist all plain HTML elements, like p, blockquote, body, video, etc.
js
// tailwind.config.js
module.exports = {
  purge: {
    content: [
      // Paths...
    ],
    preserveHtmlElements: true,
  },
}
This helps avoid accidentally purging things like heading elements when your source files are in a format that compiles to HTML, like markdown (since your markdown won't actually contain the string h1 anywhere).
This option is set to true by default.
New layers mode for purge (#2288)
We've introduced a new layers purge mode and made it the default, deprecating the existing conservative mode.
When configured manually, it looks like this:
js
// tailwind.config.js
module.exports = {
  purge: {
    mode: 'layers',
    layers: ['base', 'components', 'utilities'],
    content: [
      // Paths...
    ],
  },
}
It allows you to tell Tailwind which layers it should purge (base, components, and/or utilities). The old conservative mode was the equivalent of this:
js
// tailwind.config.js
module.exports = {
  purge: {
    mode: 'layers',
    layers: ['utilities'],
    content: [
      // Paths...
    ],
  },
}
This is a breaking change (although it probably won't actually affect you), so to make it the default you'll have to opt-in behind the purgeLayersByDefault flag:
js
// tailwind.config.js
module.exports = {
  future: {
    purgeLayersByDefault: true,
  },
  // ...
}
Support configuring variants as functions (#2309)
Adding new variants to a core plugin is annoying right? You have to remember to list all of the existing variants, instead of just specying the new ones you want to add. Completely unacceptable!
Tailwind CSS v1.8 makes it possible to configure variants as functions so you can leverage some helpful utilities we expose to you that make it easy to extend the variant configuration instead of having to re-write the entire list:
js
// tailwind.config.js
module.exports = {
  variants: {
    opacity: ({ before }) => before(['group-hover'], 'hover'),
  },
}
Read the pull request for all of the details.
Dark mode (experimental) (#2279)
Oh yeah I almost forgot, we added dark mode.
```html
```
It's stackable with both responsive variants and pseudo-class variants, so you can use classes like lg:dark:focus:text-white no problem.
It can be configured to use a prefers-color-scheme media query or a parent class (.dark), whichever you prefer:
js
module.exports = {
  dark: 'media', // or 'class'
  experimental {
    darkModeVariant: true,
  }
}
It's enabled for backgroundColor, borderColor, divideColor, textColor, gradientColorStops, and placeholderColor by default.
It's experimental right now, so enable it using the darkModeVariant experimental flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    darkModeVariant: true,
  },
  // ...
}
Let us know how it works for you and if there's anything we can improve before we tag it as stable!
Changes
@layer rules are now grouped together (#2312)
Any custom CSS defined within a @layer at-rule that matches one of Tailwind's layers is now grouped together with the corresponding Tailwind rules.
For example, this CSS:
module
...conceptually becomes this:
module
This is useful for avoiding CSS declaration order specificity issues and lets you decouple authoring order from intended render order. This is generally inline with the new @layer CSS proposal that came out shortly after we introduced this at-rule to Tailwind ourselves without knowing that existed, heh.
This is a change in behavior to how things worked before but we don't document the @layer rule outside of mentioning it in the release notes for Tailwind 1.6. I am going to be a bit bold and classify this as a bugfix, as this is how this always should have worked. Basically a zero percent chance this will break anything for anyone.
Deprecations
conservative purge mode deprecated in favor of layers (#2288)
The new layers mode replaces the old conservative mode and will be the default in v2.0. You'll get a console warning until you update this value in your config file.
If you want to update without any changes in behavior, use this configuration:
js
// tailwind.config.js
module.exports = {
  purge: {
    mode: 'layers',
    layers: ['utilities'],
    content: [
      // Paths...
    ],
  },
}"
124,"
Fix bug where the new experimental @apply implementation broke when applying a variant class with the important option globally enabled
",Fix bug where the new experimental @apply implementation broke when applying a variant class with the important option globally enabled
125,"
Update lodash to latest to silence security warnings
",Update lodash to latest to silence security warnings
126,"
Fix bug where the new applyComplexClasses experiment didn't behave as expected with rules with multiple selectors, like .foo, .bar { color: red }
Make @apply insensitive to whitespace in the new applyComplexClasses experiment
Add new -p flag to CLI to quickly scaffold a postcss.config.js file
","Fix bug where the new applyComplexClasses experiment didn't behave as expected with rules with multiple selectors, like .foo, .bar { color: red }
Make @apply insensitive to whitespace in the new applyComplexClasses experiment
Add new -p flag to CLI to quickly scaffold a postcss.config.js file"
127,"
Fix bug that prevented defining colors as closures when the gradientColorStops plugin was enabled
Log feature flag notices to stderr instead of stdout to preserve compatibility with pipe-based build systems
Add missing bg-none utility for disabling background images
","Fix bug that prevented defining colors as closures when the gradientColorStops plugin was enabled
Log feature flag notices to stderr instead of stdout to preserve compatibility with pipe-based build systems
Add missing bg-none utility for disabling background images"
128,"
Reuse generated CSS as much as possible in long-running processes instead of needlessly recalculating
",Reuse generated CSS as much as possible in long-running processes instead of needlessly recalculating
129,"
Don't issue duplicate flag notices in long-running build processes
",Don't issue duplicate flag notices in long-running build processes
130,"Tailwind v1.7.0
Another new Tailwind release is here! This one sort of came out of nowhere and is loaded with exciting stuff (especially down in the experiments section...)
Let's dig in!

New features
Gradients
New background-clip utilities
New gap utility aliases
New contents display utility
Default letter-spacing per font-size
Divide border styles
Access entire config object from plugins
Define colors as closures
Deprecations
Deprecated gap utilities
Experimental features
Use @apply with variants and other complex classes
New color palette
Extended spacing scale
Default line-heights per font-size by default
Extended font size scale


New features

Gradients
https://github.com/tailwindlabs/tailwindcss/pull/2176
The big one for this release — Tailwind now ships with built-in support for background gradients!
Gradients are designed with a highly composable API that lets you specify up to three color stops in one of 8 directions by default:
```html

 ... 

```

This is made possible by a new backgroundImage core plugin (which you can use for any background images you like!) and a new gradientColorStops core plugin.
The default configuration for these plugins looks like this:
js
// tailwind.config.js
module.exports = {
  theme: {
    backgroundImage: {
      'gradient-to-t': 'linear-gradient(to top, var(--gradient-color-stops))',
      'gradient-to-tr': 'linear-gradient(to top right, var(--gradient-color-stops))',
      'gradient-to-r': 'linear-gradient(to right, var(--gradient-color-stops))',
      'gradient-to-br': 'linear-gradient(to bottom right, var(--gradient-color-stops))',
      'gradient-to-b': 'linear-gradient(to bottom, var(--gradient-color-stops))',
      'gradient-to-bl': 'linear-gradient(to bottom left, var(--gradient-color-stops))',
      'gradient-to-l': 'linear-gradient(to left, var(--gradient-color-stops))',
      'gradient-to-tl': 'linear-gradient(to top left, var(--gradient-color-stops))',
    },
    gradientColorStops: (theme) => theme('colors'),
  },
  variants: {
    backgroundImage: ['responsive'],
    gradientColorStops: ['responsive', 'hover', 'focus'],
  },
}
Learn more the original pull request.

New background-clip utilities
https://github.com/tailwindlabs/tailwindcss/pull/2168
We've also added a new backgroundClip core plugin that you can use to control how background are rendered within an element.
It includes 4 new utilities:
| Class             | CSS                            |
| ----------------- | ------------------------------ |
| bg-clip-border  | background-clip: border-box  |
| bg-clip-padding | background-clip: padding-box |
| bg-clip-content | background-clip: content-box |
| bg-clip-text    | background-clip: text        |
Combined with the new gradient features, you can use this to do cool gradient text stuff like this:
```html


    Greetings from Tailwind v1.7.
  

```

Only responsive variants are enabled for the backgroundClip plugin by default:
js
// tailwind.config.js
module.exports = {
  variants: {
    backgroundClip: ['responsive'],
  },
}

New gap utility aliases
https://github.com/tailwindlabs/tailwindcss/pull/2137
For some dumb reason I named the column-gap and row-gap utilities col-gap-{n} and row-gap-{n} respectively, which isn't terrible but it's not consistent with how other things in Tailwind are named.
I was finding myself getting them wrong all the time — is row-gap the gaps in a row, or the gap between rows?
Tailwind v1.7 introduces new gap-x-{n} and gap-y-{n} utilities that do the exact same thing but have names that don't suck. They make way more sense than the actual CSS names now that gap for flexbox is starting to roll out too, since flexbox has no ""columns"".
These utilities will replace the old ones in v2.0, but for now they both exist together.
We recommend migrating to the new names now, and disabling the old names using this feature flag:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: true,
  },
  // ...
}
Tailwind will issue a warning in the console to remind you that you are including deprecated classes in your build until you enable this flag.

New contents display utility
https://github.com/tailwindlabs/tailwindcss/pull/2023
We've added a new contents class for the recent display: contents CSS feature.
```html

 ... 
 This container will act as a phantom container, and its children will be treated as part of the parent flex container 

 ... 
 ... 

 ... 

```
Learn more about it in this great article by Rachel Andrew.

Default letter-spacing per font-size
https://github.com/tailwindlabs/tailwindcss/pull/1915
You can now configure a default letter-spacing value for each font-size in your tailwind.config.js theme, using a tuple syntax:
js
// tailwind.config.js
module.exports = {
  theme: {
    fontSize: {
      2xl: ['24px', {
        letterSpacing: '-0.01em',
      }],
      // Or with a default line-height as well
      3xl: ['32px', {
        letterSpacing: '-0.02em',
        lineHeight: '40px',
      }],
    }
  }
}
This new syntax is supported in addition to the simpler [{fontSize}, {lineHeight}] syntax that was recently introduced.

Divide border styles
https://github.com/tailwindlabs/tailwindcss/pull/1965
We've added utilities for setting the border style on the divide utilities:
```html

 ... 
 ... 
 ... 
 ... 

```
These utilities include responsive variants by default:
js
// tailwind.config.js
module.exports = {
  variants: {
    divideStyle: ['responsive'],
  },
}

Access entire config object from plugins
https://github.com/tailwindlabs/tailwindcss/pull/1583
The config function passed to the plugin API now returns the entire config option when invoked with no arguments:
js
tailwind.plugin(function ({ config, addUtilities, /* ... */ })) {
  // Returns entire config object
  config()
})

Define colors as closures
https://github.com/tailwindlabs/tailwindcss/pull/1676
You can now define your colors as callbacks, which receive a bag of parameters you can use to generate your color value.
This is particularly useful when trying to make your custom colors work with the backgroundOpacity, textOpacity, etc. utilities
// tailwind.config.js
module.exports = {
  theme: {
    colors: {
      primary: ({ opacityVariable }) => `rgba(var(--color-primary), var(${variable}, 1))`,
    },
  },
}
Currently the only thing passed through is an opacityVariable property, which contains the name of the current opacity variable (--background-opacity, --text-opacity, etc.) depending on which plugin is using the color.

Deprecations
Tailwind v1.7 introduces a new feature flagging and deprecation system designed to make upgrades as painless as possible.
Any time we deprecate functionality or introduce new (stable) breaking changes, they will be available in Tailwind v1.x under a future property in your tailwind.config.js file.
Whenever there are deprecations or breaking changes available, Tailwind will warn you in the console on every build until you adopt the new changes and enable the flag in your config file:
risk - There are upcoming breaking changes: removeDeprecatedGapUtilities
risk - We highly recommend opting-in to these changes now to simplify upgrading Tailwind in the future.
risk - https://tailwindcss.com/docs/upcoming-changes
You can opt-in to a breaking change by setting that flag to true in your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: true,
  },
}
If you'd prefer not to opt-in but would like to silence the warning, explicitly set the flag to false:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: false,
  },
}
We do not recommend this, as it will make upgrading to Tailwind v2.0 more difficult.

Deprecated gap utilities
As mentioned previously, Tailwind v1.7.0 introduces new gap-x-{n} and gap-y-{n} utilities to replace the current col-gap-{n} and row-gap-{n} utilities.
By default both classes will exist, but the old utilities will be removed in Tailwind v2.0.
To migrate to the new class names, simply replace any existing usage of the old names with the new names:
diff
- <div class=""col-gap-4 row-gap-2 ..."">
+ <div class=""gap-x-4 gap-y-2 ..."">
To opt-in to the new names now, enable the removeDeprecatedGapUtilities flag in your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: true,
  },
}

Experimental features
Tailwind v1.7.0 introduces a new experimental feature system that allows you to opt-in to new functionality that is coming to Tailwind soon but isn't quite stable yet.
It's important to note that experimental features may introduce breaking changes, do not follow semver, and can change at any time.
If you like to live on the wild side though, you can enable all of them like so:
js
// tailwind.config.js
module.exports = {
  experimental: 'all',
}
With that out of the way, here is some of the fun stuff we're working on that we're pumped you can finally play with...

Use @apply with variants and other complex classes
https://github.com/tailwindlabs/tailwindcss/pull/2159
This is a huge one — you can finally use @apply with responsive variants, pseudo-class variants, and other complex classes!
css
.btn {
  @apply bg-indigo hover:bg-indigo-700 sm:text-lg;
}
There are a lot of details to understand with this one, so I recommend reading the pull request to learn about how it all works.
This introduces breaking changes to how @apply worked before, so be sure to read all of the details before just flipping the switch.
To enable this feature, use the applyComplexClasses flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    applyComplexClasses: true,
  },
}

New color palette
https://github.com/tailwindlabs/tailwindcss/pull/2132
We've added a teaser of the new Tailwind 2.0 color palette that you can start playing with today using the uniformColorPalette flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    uniformColorPalette: true,
  },
}
The idea behind the new palette is that every color at every shade has a similar perceived brightness. So you can swap indigo-600 with blue-600 and expect the same color contrast.
We do expect these colors to continue to change a lot as we iterate on them, so use these at your own risk.

Extended spacing scale
https://github.com/tailwindlabs/tailwindcss/pull/2141
We've added a much bigger spacing scale that includes new micro values like 0.5, 1.5, 2.5, and 3.5, as well as new large values like 72, 80, and 96, and added percentage based fractional values to the whole spacing scale (1/2, 5/6, 7/12, etc.)
You can enable the extended spacing scale using the extendedSpacingScale flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    extendedSpacingScale: true,
  },
}
This is pretty stable, I would be surprised if we change this.

Default line-heights per font-size by default
https://github.com/tailwindlabs/tailwindcss/pull/2143
We've added recommended default line-heights to every built-in font-size, which can be enabled using the defaultLineHeights flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    defaultLineHeights: true,
  },
}
This is a breaking change and will impact your designs, as previously all font sizes had a default line-height of 1.5.

Extended font size scale
https://github.com/tailwindlabs/tailwindcss/pull/2145
We've added three new font sizes (7xl, 8xl, and 9xl) to keep up with the latest huge-as-hell-hero-text trends. They include default line-heights as well.
You can enable them under the extendedFontSizeScale flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    extendedFontSizeScale: true,
  },
}","Tailwind v1.7.0
Another new Tailwind release is here! This one sort of came out of nowhere and is loaded with exciting stuff (especially down in the experiments section...)
Let's dig in!
New features
Gradients
New background-clip utilities
New gap utility aliases
New contents display utility
Default letter-spacing per font-size
Divide border styles
Access entire config object from plugins
Define colors as closures
Deprecations
Deprecated gap utilities
Experimental features
Use @apply with variants and other complex classes
New color palette
Extended spacing scale
Default line-heights per font-size by default
Extended font size scale
New features
Gradients
link
The big one for this release — Tailwind now ships with built-in support for background gradients!
Gradients are designed with a highly composable API that lets you specify up to three color stops in one of 8 directions by default:
```html
... 
```
This is made possible by a new backgroundImage core plugin (which you can use for any background images you like!) and a new gradientColorStops core plugin.
The default configuration for these plugins looks like this:
js
// tailwind.config.js
module.exports = {
  theme: {
    backgroundImage: {
      'gradient-to-t': 'linear-gradient(to top, var(--gradient-color-stops))',
      'gradient-to-tr': 'linear-gradient(to top right, var(--gradient-color-stops))',
      'gradient-to-r': 'linear-gradient(to right, var(--gradient-color-stops))',
      'gradient-to-br': 'linear-gradient(to bottom right, var(--gradient-color-stops))',
      'gradient-to-b': 'linear-gradient(to bottom, var(--gradient-color-stops))',
      'gradient-to-bl': 'linear-gradient(to bottom left, var(--gradient-color-stops))',
      'gradient-to-l': 'linear-gradient(to left, var(--gradient-color-stops))',
      'gradient-to-tl': 'linear-gradient(to top left, var(--gradient-color-stops))',
    },
    gradientColorStops: (theme) => theme('colors'),
  },
  variants: {
    backgroundImage: ['responsive'],
    gradientColorStops: ['responsive', 'hover', 'focus'],
  },
}
Learn more the original pull request.
New background-clip utilities
link
We've also added a new backgroundClip core plugin that you can use to control how background are rendered within an element.
It includes 4 new utilities:
| Class             | CSS                            |
| ----------------- | ------------------------------ |
| bg-clip-border  | background-clip: border-box  |
| bg-clip-padding | background-clip: padding-box |
| bg-clip-content | background-clip: content-box |
| bg-clip-text    | background-clip: text        |
Combined with the new gradient features, you can use this to do cool gradient text stuff like this:
```html
module
```
Only responsive variants are enabled for the backgroundClip plugin by default:
js
// tailwind.config.js
module.exports = {
  variants: {
    backgroundClip: ['responsive'],
  },
}
New gap utility aliases
link
For some dumb reason I named the column-gap and row-gap utilities col-gap-{n} and row-gap-{n} respectively, which isn't terrible but it's not consistent with how other things in Tailwind are named.
I was finding myself getting them wrong all the time — is row-gap the gaps in a row, or the gap between rows?
Tailwind v1.7 introduces new gap-x-{n} and gap-y-{n} utilities that do the exact same thing but have names that don't suck. They make way more sense than the actual CSS names now that gap for flexbox is starting to roll out too, since flexbox has no ""columns"".
These utilities will replace the old ones in v2.0, but for now they both exist together.
We recommend migrating to the new names now, and disabling the old names using this feature flag:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: true,
  },
  // ...
}
Tailwind will issue a warning in the console to remind you that you are including deprecated classes in your build until you enable this flag.
New contents display utility
link
We've added a new contents class for the recent display: contents CSS feature.
```html
... 
 This container will act as a phantom container, and its children will be treated as part of the parent flex container 
... 
 ... 
... 
```
Learn more about it in this great article by Rachel Andrew.
Default letter-spacing per font-size
link
You can now configure a default letter-spacing value for each font-size in your tailwind.config.js theme, using a tuple syntax:
js
// tailwind.config.js
module.exports = {
  theme: {
    fontSize: {
      2xl: ['24px', {
        letterSpacing: '-0.01em',
      }],
      // Or with a default line-height as well
      3xl: ['32px', {
        letterSpacing: '-0.02em',
        lineHeight: '40px',
      }],
    }
  }
}
This new syntax is supported in addition to the simpler [{fontSize}, {lineHeight}] syntax that was recently introduced.
Divide border styles
link
We've added utilities for setting the border style on the divide utilities:
```html
... 
 ... 
 ... 
 ... 
```
These utilities include responsive variants by default:
js
// tailwind.config.js
module.exports = {
  variants: {
    divideStyle: ['responsive'],
  },
}
Access entire config object from plugins
link
The config function passed to the plugin API now returns the entire config option when invoked with no arguments:
js
tailwind.plugin(function ({ config, addUtilities, / ... / })) {
  // Returns entire config object
  config()
})
Define colors as closures
link
You can now define your colors as callbacks, which receive a bag of parameters you can use to generate your color value.
This is particularly useful when trying to make your custom colors work with the backgroundOpacity, textOpacity, etc. utilities
// tailwind.config.js
module.exports = {
  theme: {
    colors: {
      primary: ({ opacityVariable }) => module,
    },
  },
}
Currently the only thing passed through is an opacityVariable property, which contains the name of the current opacity variable (--background-opacity, --text-opacity, etc.) depending on which plugin is using the color.
Deprecations
Tailwind v1.7 introduces a new feature flagging and deprecation system designed to make upgrades as painless as possible.
Any time we deprecate functionality or introduce new (stable) breaking changes, they will be available in Tailwind v1.x under a future property in your tailwind.config.js file.
Whenever there are deprecations or breaking changes available, Tailwind will warn you in the console on every build until you adopt the new changes and enable the flag in your config file:
risk - There are upcoming breaking changes: removeDeprecatedGapUtilities
risk - We highly recommend opting-in to these changes now to simplify upgrading Tailwind in the future.
risk - link
You can opt-in to a breaking change by setting that flag to true in your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: true,
  },
}
If you'd prefer not to opt-in but would like to silence the warning, explicitly set the flag to false:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: false,
  },
}
We do not recommend this, as it will make upgrading to Tailwind v2.0 more difficult.
Deprecated gap utilities
As mentioned previously, Tailwind v1.7.0 introduces new gap-x-{n} and gap-y-{n} utilities to replace the current col-gap-{n} and row-gap-{n} utilities.
By default both classes will exist, but the old utilities will be removed in Tailwind v2.0.
To migrate to the new class names, simply replace any existing usage of the old names with the new names:
diff
- 
+ 
To opt-in to the new names now, enable the removeDeprecatedGapUtilities flag in your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  future: {
    removeDeprecatedGapUtilities: true,
  },
}
Experimental features
Tailwind v1.7.0 introduces a new experimental feature system that allows you to opt-in to new functionality that is coming to Tailwind soon but isn't quite stable yet.
It's important to note that experimental features may introduce breaking changes, do not follow semver, and can change at any time.
If you like to live on the wild side though, you can enable all of them like so:
js
// tailwind.config.js
module.exports = {
  experimental: 'all',
}
With that out of the way, here is some of the fun stuff we're working on that we're pumped you can finally play with...
Use @apply with variants and other complex classes
link
This is a huge one — you can finally use @apply with responsive variants, pseudo-class variants, and other complex classes!
css
.btn {
  @apply bg-indigo hover:bg-indigo-700 sm:text-lg;
}
There are a lot of details to understand with this one, so I recommend reading the pull request to learn about how it all works.
This introduces breaking changes to how @apply worked before, so be sure to read all of the details before just flipping the switch.
To enable this feature, use the applyComplexClasses flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    applyComplexClasses: true,
  },
}
New color palette
link
We've added a teaser of the new Tailwind 2.0 color palette that you can start playing with today using the uniformColorPalette flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    uniformColorPalette: true,
  },
}
The idea behind the new palette is that every color at every shade has a similar perceived brightness. So you can swap indigo-600 with blue-600 and expect the same color contrast.
We do expect these colors to continue to change a lot as we iterate on them, so use these at your own risk.
Extended spacing scale
link
We've added a much bigger spacing scale that includes new micro values like 0.5, 1.5, 2.5, and 3.5, as well as new large values like 72, 80, and 96, and added percentage based fractional values to the whole spacing scale (1/2, 5/6, 7/12, etc.)
You can enable the extended spacing scale using the extendedSpacingScale flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    extendedSpacingScale: true,
  },
}
This is pretty stable, I would be surprised if we change this.
Default line-heights per font-size by default
link
We've added recommended default line-heights to every built-in font-size, which can be enabled using the defaultLineHeights flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    defaultLineHeights: true,
  },
}
This is a breaking change and will impact your designs, as previously all font sizes had a default line-height of 1.5.
Extended font size scale
link
We've added three new font sizes (7xl, 8xl, and 9xl) to keep up with the latest huge-as-hell-hero-text trends. They include default line-heights as well.
You can enable them under the extendedFontSizeScale flag:
js
// tailwind.config.js
module.exports = {
  experimental: {
    extendedFontSizeScale: true,
  },
}"
131,"
Fixes issue where motion-safe and motion-reduce variants didn't stack correctly with group-hover variants
",Fixes issue where motion-safe and motion-reduce variants didn't stack correctly with group-hover variants
132,"
Fixes issue where @keyframes respecting the important option would break animations in Chrome
",Fixes issue where @keyframes respecting the important option would break animations in Chrome
133,"
Fixes an issue where animation keyframes weren't included in the build without @tailwind base (#2108)
",Fixes an issue where animation keyframes weren't included in the build without @tailwind base (#2108)
134,"Tailwind CSS v1.6.0
It's like Tailwind CSS v1.5 except now there's animation support, overscroll utilities, and more! 🥳
There aren't supposed to be any breaking changes here, but I thought that last time too. If I did break something, first person to report it gets a Tailwind shirt 😘
New Features

Animation support
New prefers-reduced-motion variants
New overscroll-behavior utilities
Generate your CSS without an input file


Animation support (#2068)
Tailwind CSS v1.6 adds a brand new animation core plugin, with 4 general purpose animations included out of the box:

animate-spin
animate-ping
animate-pulse
animate-bounce

html
<button type=""button"" class=""bg-indigo-600 ..."" disabled>
  <svg class=""animate-spin h-5 w-5 mr-3 ..."" viewBox=""0 0 24 24"">
    <!-- ... -->
  </svg>
  Processing
</button>
These are completely customizable as always, using the animation and keyframes sections of your tailwind.config.js theme:
js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      animation: {
        wiggle: 'wiggle 1s ease-in-out infinite',
      },
      keyframes: {
        wiggle: {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        },
      },
    },
  },
}
For more information and a live demo, read the new animation documentation. For behind the scenes details about the design rationale, check out the pull request.

New prefers-reduced-motion variants (#2071)
To go along with the new animation features, we've also added new motion-safe and motion-reduce variants that allow you to conditionally apply CSS based on the prefers-reduced-motion media feature.
These can be useful in conjunction with transition and animation utilities to disable problematic motion for users who are sensitive to it:
```html

```
...or to explicitly opt-in to motion to make sure it's only being shown to users who haven't opted out:
```html

```
These can be combined with responsive variants and pseudo-class variants as well:
```html
 With responsive variants 

 With pseudo-class variants 

 With responsive and pseudo-class variants 

```
These are currently not enabled for any utilities by default, but you can enabled them as needed in the variants section of your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    translate: ['responsive', 'hover', 'focus', 'motion-safe', 'motion-reduce'],
  },
}
For more details, check out the updated variants documentation.

New overscroll-behavior utilities (#2075)
We've also added new utilities for the overscroll-behavior property.
You can use these utilities to control how ""scroll chaining"" works in your sites, and avoid scrolling the whole page when you reach the top or bottom of an embedded scrollable area.
```html

 ... 

```

Note that this is currently **not supported in Safari**, but in my opinion it's not a huge deal to treat this as a progressive enhancement anyways, since it falls back fairly gracefully.

This plugin can be configured in your `tailwind.config.js` file as `overscrollBehavior`:

```js
// tailwind.config.js
module.exports = {
  // ...

  // Disabling the plugin
  corePlugins: {
    overscrollBehavior: false,
  },

  // Customizing the enabled variants
  variants: {
    overscrollBehavior: ['responsive', 'hover'],
  },
}
```



### Generate your CSS without an input file (\#1861)

If you never write any custom CSS and you're sick of creating this file all the time...

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

...then I've got news for you baby — if you're using our `tailwindcss` CLI tool you can start depositing those 58 characters into your savings account instead of wasting them on a pointless CSS file.

The input file argument is now optional in the CLI tool, so if you don't actually _need_ a custom CSS file, you can just write this:

```bash
npx tailwindcss build -o compiled.css
```

Your kids are going to be so grateful for the extra time you get to spend together ❤️","Tailwind CSS v1.6.0
It's like Tailwind CSS v1.5 except now there's animation support, overscroll utilities, and more! 🥳
There aren't supposed to be any breaking changes here, but I thought that last time too. If I did break something, first person to report it gets a Tailwind shirt 😘
New Features
Animation support
New prefers-reduced-motion variants
New overscroll-behavior utilities
Generate your CSS without an input file
Animation support (#2068)
Tailwind CSS v1.6 adds a brand new animation core plugin, with 4 general purpose animations included out of the box:
animate-spin
animate-ping
animate-pulse
animate-bounce
html


 ... 

  Processing

These are completely customizable as always, using the animation and keyframes sections of your tailwind.config.js theme:
js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      animation: {
        wiggle: 'wiggle 1s ease-in-out infinite',
      },
      keyframes: {
        wiggle: {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        },
      },
    },
  },
}
For more information and a live demo, read the new animation documentation. For behind the scenes details about the design rationale, check out the pull request.
New prefers-reduced-motion variants (#2071)
To go along with the new animation features, we've also added new motion-safe and motion-reduce variants that allow you to conditionally apply CSS based on the prefers-reduced-motion media feature.
These can be useful in conjunction with transition and animation utilities to disable problematic motion for users who are sensitive to it:
```html
modulehtml
modulehtml
 With responsive variants 
With pseudo-class variants 
With responsive and pseudo-class variants 
```
These are currently not enabled for any utilities by default, but you can enabled them as needed in the variants section of your tailwind.config.js file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    translate: ['responsive', 'hover', 'focus', 'motion-safe', 'motion-reduce'],
  },
}
For more details, check out the updated variants documentation.
New overscroll-behavior utilities (#2075)
We've also added new utilities for the overscroll-behavior property.
You can use these utilities to control how ""scroll chaining"" works in your sites, and avoid scrolling the whole page when you reach the top or bottom of an embedded scrollable area.
```html
... 
```
Note that this is currently not supported in Safari, but in my opinion it's not a huge deal to treat this as a progressive enhancement anyways, since it falls back fairly gracefully.
This plugin can be configured in your module file as module:
```js
// tailwind.config.js
module.exports = {
  // ...
// Disabling the plugin
  corePlugins: {
    overscrollBehavior: false,
  },
// Customizing the enabled variants
  variants: {
    overscrollBehavior: ['responsive', 'hover'],
  },
}
```
Generate your CSS without an input file (#1861)
If you never write any custom CSS and you're sick of creating this file all the time...
module
...then I've got news for you baby — if you're using our module CLI tool you can start depositing those 58 characters into your savings account instead of wasting them on a pointless CSS file.
The input file argument is now optional in the CLI tool, so if you don't actually need a custom CSS file, you can just write this:
module
Your kids are going to be so grateful for the extra time you get to spend together ❤️"
135,"
Fixes issue where you could no longer use @apply with unprefixed class names if you had configured a prefix
",Fixes issue where you could no longer use @apply with unprefixed class names if you had configured a prefix
136,"
Fixes accidental breaking change where adding component variants using the old manual syntax (as recommended in the docs) stopped working
",Fixes accidental breaking change where adding component variants using the old manual syntax (as recommended in the docs) stopped working
137,"Tailwind CSS v1.5.0
I was hoping to save v1.5.0 for something really exciting (🌘) but we needed a new feature to support the new @tailwindcss/typography plugin so h*ck it, we're dropping some new stuff on you early. Enjoy! 🥳
~~No breaking changes, this is a minor release and we are professionals you silly goose.~~ One accidental breaking change, fixed in v1.5.1. I take back everything I said about being professionals. I am the one who is the silly goose.
New Features

Component variants support
Responsive container variants
New focus-visible variant
New checked variant


Component variants support (#2031)
Until Tailwind CSS v1.5.0, only ""utility"" classes were really intended to be used with variants (like ""responsive"", ""hover"", ""focus"", etc.)
While these are still much more useful for utilities than any other type of class, we now support generating variants for component classes as well, like the prose classes in the new @tailwindcss/typography plugin:
```html

 Content 

```
You can take advantage of this feature in your own component classes by using the new variants option in the second argumant of the addComponents plugin API:
js
plugin(function ({ addComponents })) {
  addComponents({
    '.card': {
      // ...
    }
  }, {
    variants: ['responsive']
  })
})
...or using the array shorthand you might be familiar with from the addUtilities API:
js
plugin(function ({ addComponents })) {
  addComponents({
    '.card': {
      // ...
    }
  }, ['responsive'])
})
To take advantage of these feature in your custom CSS (rather than using the plugin API), you can use a new @layer directive to explicitly tell Tailwind that your styles belong to the ""components"" bucket:
@layer components {
  @responsive {
    .card {
      /* ... */
    }
  }
}
This helps Tailwind purge your unused CSS correctly, ensuring it doesn't remove any responsive component variants when using the default ""conservative"" purge mode.

Responsive container variants (#2032)
Piggy-backing off of the new component variants support, the container class now supports variants!
```html
 Only lock the width at `md` sizes and above 

 ... 

```
We've enabled responsive variants by default, but if you are sick in the head you can also manually enable other variants like focus, group-hover, whatever:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    container: ['responsive', 'focus', 'group-hover'],
  },
}

New focus-visible variant (#1824)
We've added support for the :focus-visible pseudo-class using a new focus-visible variant.
This is super useful for adding focus styles that only appear to keyboard users, and are ignored for mouse users:
html
<button class=""focus-visible:outline-none focus-visible:shadow-outline ..."">
  Click me
</button>
It's not enabled for anything by default, but you can enable it in the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    backgroundColor: ['responsive', 'hover', 'focus', 'focus-visible'],
  },
}
Browser support is still pretty weak on this but getting better. In the mean time, check out the polyfill and corresponding PostCSS plugin if you'd like to use this in all browsers right away.

New checked variant (#1285)
We've added a new checked variant you can use to conditionally style things like checkboxes and radio buttons:
html
<input type=""checkbox"" class=""bg-white checked:bg-blue-500"" />
It's not enabled for anything by default, but you can enable it in the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    backgroundColor: ['responsive', 'hover', 'focus', 'checked'],
  },
}","Tailwind CSS v1.5.0
I was hoping to save v1.5.0 for something really exciting (🌘) but we needed a new feature to support the new @tailwindcss/typography plugin so h*ck it, we're dropping some new stuff on you early. Enjoy! 🥳
~~No breaking changes, this is a minor release and we are professionals you silly goose.~~ One accidental breaking change, fixed in v1.5.1. I take back everything I said about being professionals. I am the one who is the silly goose.
New Features
Component variants support
Responsive container variants
New focus-visible variant
New checked variant
Component variants support (#2031)
Until Tailwind CSS v1.5.0, only ""utility"" classes were really intended to be used with variants (like ""responsive"", ""hover"", ""focus"", etc.)
While these are still much more useful for utilities than any other type of class, we now support generating variants for component classes as well, like the prose classes in the new @tailwindcss/typography plugin:
```html
Content 
```
You can take advantage of this feature in your own component classes by using the new variants option in the second argumant of the addComponents plugin API:
js
plugin(function ({ addComponents })) {
  addComponents({
    '.card': {
      // ...
    }
  }, {
    variants: ['responsive']
  })
})
...or using the array shorthand you might be familiar with from the addUtilities API:
js
plugin(function ({ addComponents })) {
  addComponents({
    '.card': {
      // ...
    }
  }, ['responsive'])
})
To take advantage of these feature in your custom CSS (rather than using the plugin API), you can use a new @layer directive to explicitly tell Tailwind that your styles belong to the ""components"" bucket:
@layer components {
  @responsive {
    .card {
      / ... /
    }
  }
}
This helps Tailwind purge your unused CSS correctly, ensuring it doesn't remove any responsive component variants when using the default ""conservative"" purge mode.
Responsive container variants (#2032)
Piggy-backing off of the new component variants support, the container class now supports variants!
modulemd` sizes and above 
... 
```
We've enabled responsive variants by default, but if you are sick in the head you can also manually enable other variants like focus, group-hover, whatever:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    container: ['responsive', 'focus', 'group-hover'],
  },
}
New focus-visible variant (#1824)
We've added support for the :focus-visible pseudo-class using a new focus-visible variant.
This is super useful for adding focus styles that only appear to keyboard users, and are ignored for mouse users:
html

  Click me

It's not enabled for anything by default, but you can enable it in the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    backgroundColor: ['responsive', 'hover', 'focus', 'focus-visible'],
  },
}
Browser support is still pretty weak on this but getting better. In the mean time, check out the polyfill and corresponding PostCSS plugin if you'd like to use this in all browsers right away.
New checked variant (#1285)
We've added a new checked variant you can use to conditionally style things like checkboxes and radio buttons:
html

It's not enabled for anything by default, but you can enable it in the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    backgroundColor: ['responsive', 'hover', 'focus', 'checked'],
  },
}"
138,"
Explicitly error when using a class as the important config option instead of just generating the wrong CSS (https://github.com/tailwindcss/tailwindcss/commit/ad850ac49128dfcc292f0025c8c42f26bc26c735)
",Explicitly error when using a class as the important config option instead of just generating the wrong CSS (link)
139,"
Fix bug where the divideColor plugin was using the wrong variants in IE11 target mode
",Fix bug where the divideColor plugin was using the wrong variants in IE11 target mode
140,"
Fix bug where target: 'browserslist' didn't work, only target: ['browserslist', {...}] did (https://github.com/tailwindcss/tailwindcss/commit/f5c0e301a55a189f642699ecaddc952c0487e3e8)
","Fix bug where target: 'browserslist' didn't work, only target: ['browserslist', {...}] did (link)"
141,"
Don't generate unnecessary CSS in color plugins when color opacity utilities are disabled (#1680)
",Don't generate unnecessary CSS in color plugins when color opacity utilities are disabled (#1680)
142,"
Fix issue where purge: { enabled: false } was ignored, add purge: false shorthand
","Fix issue where purge: { enabled: false } was ignored, add purge: false shorthand"
143,"
Improve built-in PurgeCSS extractor to better support Haml and Slim templates (https://github.com/tailwindcss/tailwindcss/commit/cdef9c8d4db32e494366cbf19f73f21dbdb7142c, https://github.com/tailwindcss/tailwindcss/commit/9032ff33edba1a7fc85b78e7772acccc9346340c)
","Improve built-in PurgeCSS extractor to better support Haml and Slim templates (link, link)"
144,"Tailwind CSS v1.4.0
Another new minor version so soon? Merry Coronavirus 🎄😷🎄
New Features

New color opacity utilities
Built-in PurgeCSS
IE 11 target mode (experimental)


New color opacity utilities (#1627)
Tailwind v1.4 adds a new set of utilities for controlling just the alpha channel of colors:

bg-opacity-{value}
text-opacity-{value}
border-opacity-{value}
divide-opacity-{value}
placeholder-opacity-{value}

These utilities compose with the existing color utilities like this:
```html

 ... 

```
All of these new utilities inherit their values from the opacity config by default but can be configured independently under the following theme keys:

backgroundOpacity
textOpacity
borderOpacity
placeholderOpacity
divideOpacity

Learn more in the pull request.

Built-in PurgeCSS (#1639)
Tailwind v1.4 adds a new purge option to the config for removing unused CSS without the need for configuring another tool:
js
// tailwind.config.js
module.exports = {
  purge: [
    './src/**/*.html',
    './src/**/*.vue',
    './src/**/*.jsx',
  ],
  theme: {},
  variants: {},
  plugins: [],
}
Learn more in the pull request and the updated ""Controlling File Size"" documentation.

IE 11 target mode (#1635)
This feature is experimental and may change outside of normal semantic versioning policies.
Recently we've been adding a lot of new features to Tailwind that aren't IE 11 compatible, and if you need to support IE 11 in your projects you have to be careful not to rely on these features by mistake.
To make this easier, we've added a new target option to the config that lets you opt-in to a new ie11 mode that disables any features that are not compatible with IE 11:
js
// tailwind.config.js
module.exports = {
  target: 'ie11',
  theme: {},
  variants: {},
  plugins: [],
}
Learn more in the pull request.","Tailwind CSS v1.4.0
Another new minor version so soon? Merry Coronavirus 🎄😷🎄
New Features
New color opacity utilities
Built-in PurgeCSS
IE 11 target mode (experimental)
New color opacity utilities (#1627)
Tailwind v1.4 adds a new set of utilities for controlling just the alpha channel of colors:
bg-opacity-{value}
text-opacity-{value}
border-opacity-{value}
divide-opacity-{value}
placeholder-opacity-{value}
These utilities compose with the existing color utilities like this:
```html
... 
```
All of these new utilities inherit their values from the opacity config by default but can be configured independently under the following theme keys:
backgroundOpacity
textOpacity
borderOpacity
placeholderOpacity
divideOpacity
Learn more in the pull request.
Built-in PurgeCSS (#1639)
Tailwind v1.4 adds a new purge option to the config for removing unused CSS without the need for configuring another tool:
js
// tailwind.config.js
module.exports = {
  purge: [
    './src//*.html',
    './src//.vue',
    './src//.jsx',
  ],
  theme: {},
  variants: {},
  plugins: [],
}
Learn more in the pull request and the updated ""Controlling File Size"" documentation.
IE 11 target mode (#1635)
This feature is experimental and may change outside of normal semantic versioning policies.
Recently we've been adding a lot of new features to Tailwind that aren't IE 11 compatible, and if you need to support IE 11 in your projects you have to be careful not to rely on these features by mistake.
To make this easier, we've added a new target option to the config that lets you opt-in to a new ie11 mode that disables any features that are not compatible with IE 11:
js
// tailwind.config.js
module.exports = {
  target: 'ie11',
  theme: {},
  variants: {},
  plugins: [],
}
Learn more in the pull request."
145,"
Fix missing unit in calc bug in space plugin (space-x-0 didn't work for example)
Drop fs-extra dependency to ^8.0.0 to preserve Node 8 compatibility until Tailwind 2.0
","Fix missing unit in calc bug in space plugin (space-x-0 didn't work for example)
Drop fs-extra dependency to ^8.0.0 to preserve Node 8 compatibility until Tailwind 2.0"
146,"
Fix bug where divide-{x/y}-0 utilities didn't work due to missing unit in calc call
",Fix bug where divide-{x/y}-0 utilities didn't work due to missing unit in calc call
147,"
Fix bug where the divide-x utilities were not being applied correctly due to referencing --divide-y-reverse instead of --divide-x-reverse
",Fix bug where the divide-x utilities were not being applied correctly due to referencing --divide-y-reverse instead of --divide-x-reverse
148,"
Add forgotten responsive variants for space, divideWidth, and divideColor utilities
","Add forgotten responsive variants for space, divideWidth, and divideColor utilities"
149,"
Fix bug where the space-x utilities were not being applied correctly due to referencing --space-y-reverse instead of --space-x-reverse
",Fix bug where the space-x utilities were not being applied correctly due to referencing --space-y-reverse instead of --space-x-reverse
150,"Tailwind CSS v1.3.0
Holy crap a new Tailwind CSS release! We've got a few new goodies in this one, and I've made sure to put the most exciting ones at the top 🚀
New Features

New space and divide layout utilities
New transition-delay utilities
New group-focus variant
Support for specifying a default line-height for each font-size utility
Support for breakpoint-specific padding for container class
Added current to the default color palette
New inline-grid utility
New flow-root display utility
New clear-none utility


New space and divide layout utilities (#1584, #1594)
Prior to Tailwind v1.3, if you wanted to add some space or a border between elements, you had to manually add the necessary margin/border to all but one of the children:
```html
 Before 

One
Two
Three

```
Tailwind v1.3 introduces new space-{x/y}-{n}, divide-{x/y}-{n}, and divide-{color} utilities for controlling this at the parent level instead, simplifying this common pattern into something concise and declarative that doesn't require all of that annoying duplication:
```html
 After 

One
Two
Three

```
The space-x-{n} utilities add a left margin to all but the first element, and the space-y-{n} utilities add a top margin to all but the first element:
```html
 Horizontal stack with 8px of space between each item 

One
Two
Three

 Vertical stack with 16px of space between each item 

One
Two
Three

```
The space utilities inherit their configuration from the global spacing configuration by default, and include negative variations like -space-x-2 to create overlapping effects.
The divide-x-{n} utilities add a left border to all but the first element, and the divide-y-{n} utilities add a top border to all but the first element:
```html
 Horizontal list with 1px border between each item 

One
Two
Three

 Vertical list with 1px border between each item 

One
Two
Three

```
The divide utilities inherit their configuration from the borderWidth configuration, and support the default keyword (set to 1px out of the box, like with borderWidth) so you can use divide-y instead of divide-y-1.
The divide-{color} utilities are used to set the color of the dividing borders:
```html
 Vertical list with 1px blue border between each item 

One
Two
Three

```
We've also included space-{x/y}-reverse and divide-{x/y}-reverse utilities which can be useful if you are reversing the direction of items in a container using either flex-row-reverse or flex-col-reverse. These utilities swap left margins for right margins, top margins for bottom margins, left borders for right borders, and top borders for bottom borders to account for the items being in reverse order:
```html
 Reversed horizontal list with 8px space between each item 

One
Two
Three

```
There are a couple limitations of our implementation that are worth pointing out:

They break down if your items wrap, you'll want to do something complicated with negative margins if you need to handle this
They break down if you start manually changing the order of things using the order property

Despite these limitations, I think you'll still find these incredibly useful. Eventually gap will have universal support in flexbox layouts and we can all rejoice.
All of these utilities include responsive variants by default, and their values and variants can be customized using the space, divideWidth, and divideColor configuration keys respectively.

New transition-delay utilities (#1462)
Tailwind v1.3 introduces new delay-{amount} utilities for the transition-delay property:
```html

 ... 

```
We include the same values we do for the duration-{amount} utilities and generate responsive variants by default:
js
// tailwind.config.js
module.exports = {
  theme: {
    // ...
    transitionDelay: {
      '75': '75ms',
      '100': '100ms',
      '150': '150ms',
      '200': '200ms',
      '300': '300ms',
      '500': '500ms',
      '700': '700ms',
      '1000': '1000ms',
    },
  },
  variants: {
    // ...
    transitionDelay: ['responsive'],
  },
  // ...
}

New group-focus variant (#1577)
We've added a new group-focus variant that works just like the existing group-hover variant, but for focus states.
This is useful when you want to add custom focus style to a button or link that has some nested child you want to style in a specific way, for example, changing the color of an icon inside of a button when the button is focused:
html
<button class=""group text-gray-600 focus:bg-gray-100 focus:text-gray-700"">
  <svg class=""h-6 w-6 text-gray-400 group-focus:text-gray-500"">
    <!-- ... -->
  </svg>
  Submit
</button>
This variant not enabled for any utilities by default, but can be enabled in the variants section of your config file.

Support for specifying a default line-height for each font-size utility (#1532)
A common pattern we've run into in our own Tailwind projects is repeatedly pairing a font-size utility with a particular line-height utility, for example always using text-sm with leading-5.
Tailwind v1.3 now lets you specify a default line-height for each font-size utility in your config file, using a tuple of the form [fontSize, lineHeight]:
```js
// tailwind.config.js
module.exports = {
  theme: {
    fontSize: {
      // Will embed no line-height value
      sm: '12px',
  // Will use `font-size: 16px` and `line-height: 24px`
  md: ['16px', '24px'],
},

},
}
```
```css
.text-sm {
  font-size: 12px;
}
.text-md {
  font-size: 16px;
  line-height: 24px;
}
```
The font-size utilities are generated before the line-height utilities in the final CSS, so you can still override the line-height for a particular font-size by simply adding a leading-{size} utility:
```html
 Will still be `line-height: 1`, even though the default line-height for `text-md` is `24px` (as per the example config above) 

```
We haven't changed the default config to include default line-heights as that would be a breaking change, but this is a feature we will likely take advantage of in Tailwind 2.0 sometime in the future.

Support for breakpoint-specific padding for container class (#1398)
Prior to v1.3, you could configure the container class to have built-in horizontal padding like so:
js
// tailwind.config.js
module.exports = {
  theme: {
    container: {
      padding: '2rem',
    },
  },
}
Tailwind v1.3 enhances this functionality to allow you to specify a different amount of padding for each breakpoint:
js
// tailwind.config.js
module.exports = {
  theme: {
    container: {
      padding: {
        default: '1rem',
        sm: '2rem',
        lg: '4rem',
        xl: '5rem',
      },
    },
  },
}

Added current to the default color palette (#1438)
The default color palette now includes current for currentColor, which simplifies some situations like creating buttons where the border color should match the text color:
```html
 Before 
<button
  class=""text-gray-500 hover:text-gray-700 focus:text-gray-700 border border-gray-500 hover:border-gray-700 focus:border-gray-700""

 ... 


 Now 

 ... 

```
Since this color has been added to the default color palette, it is available for textColor, borderColor, backgroundColor, and placeholderColor utilities automatically.

New inline-grid utility (#1375)
We've added an inline-grid utility for setting display: inline-grid. This probably should've been included in v1.2 and somehow got missed, but it's here now baby.
```html

 ... 

```
Will you ever use this? I never have, but it should still be there dammit.

New flow-root display utility (#1247)
We've added a new flow-root utility for display: flow-root. Never heard of it? Me neither until it was PR'd.
It behaves exactly like display: block with one magical difference: it prevents collapsing margins!
```html

 ... 

```
You'll start to find all sorts of useful use-cases for this if you pay attention, like completely obsoleting clearfix hacks.

New clear-none utility (#1413)
This has been in the documentation for months but didn't actually exist in the framework — whoops.
It sets clear: none, which is mostly useful for resetting the clear property at different breakpoints.
```html

 ... 

```
Only two people noticed it was documented but missing, so odds are you don't even care that we added this.","Tailwind CSS v1.3.0
Holy crap a new Tailwind CSS release! We've got a few new goodies in this one, and I've made sure to put the most exciting ones at the top 🚀
New Features
New space and divide layout utilities
New transition-delay utilities
New group-focus variant
Support for specifying a default line-height for each font-size utility
Support for breakpoint-specific padding for container class
Added current to the default color palette
New inline-grid utility
New flow-root display utility
New clear-none utility
New space and divide layout utilities (#1584, #1594)
Prior to Tailwind v1.3, if you wanted to add some space or a border between elements, you had to manually add the necessary margin/border to all but one of the children:
```html
 Before 
One
Two
Three
modulehtml
 After 
One
Two
Three
modulehtml
 Horizontal stack with 8px of space between each item 
One
Two
Three
Vertical stack with 16px of space between each item 
One
Two
Three
modulehtml
 Horizontal list with 1px border between each item 
One
Two
Three
Vertical list with 1px border between each item 
One
Two
Three
modulehtml
 Vertical list with 1px blue border between each item 
One
Two
Three
modulehtml
 Reversed horizontal list with 8px space between each item 
One
Two
Three
```
There are a couple limitations of our implementation that are worth pointing out:
They break down if your items wrap, you'll want to do something complicated with negative margins if you need to handle this
They break down if you start manually changing the order of things using the order property
Despite these limitations, I think you'll still find these incredibly useful. Eventually gap will have universal support in flexbox layouts and we can all rejoice.
All of these utilities include responsive variants by default, and their values and variants can be customized using the space, divideWidth, and divideColor configuration keys respectively.
New transition-delay utilities (#1462)
Tailwind v1.3 introduces new delay-{amount} utilities for the transition-delay property:
```html
... 
```
We include the same values we do for the duration-{amount} utilities and generate responsive variants by default:
js
// tailwind.config.js
module.exports = {
  theme: {
    // ...
    transitionDelay: {
      '75': '75ms',
      '100': '100ms',
      '150': '150ms',
      '200': '200ms',
      '300': '300ms',
      '500': '500ms',
      '700': '700ms',
      '1000': '1000ms',
    },
  },
  variants: {
    // ...
    transitionDelay: ['responsive'],
  },
  // ...
}
New group-focus variant (#1577)
We've added a new group-focus variant that works just like the existing group-hover variant, but for focus states.
This is useful when you want to add custom focus style to a button or link that has some nested child you want to style in a specific way, for example, changing the color of an icon inside of a button when the button is focused:
html


 ... 

  Submit

This variant not enabled for any utilities by default, but can be enabled in the variants section of your config file.
Support for specifying a default line-height for each font-size utility (#1532)
A common pattern we've run into in our own Tailwind projects is repeatedly pairing a font-size utility with a particular line-height utility, for example always using text-sm with leading-5.
Tailwind v1.3 now lets you specify a default line-height for each font-size utility in your config file, using a tuple of the form [fontSize, lineHeight]:
modulefont-size: 16pxmoduleline-height: 24px`
  md: ['16px', '24px'],
},
},
}
modulecss
.text-sm {
  font-size: 12px;
}
.text-md {
  font-size: 16px;
  line-height: 24px;
}
modulehtml
 Will still be module, even though the default line-height for module is module (as per the example config above) 
```
We haven't changed the default config to include default line-heights as that would be a breaking change, but this is a feature we will likely take advantage of in Tailwind 2.0 sometime in the future.
Support for breakpoint-specific padding for container class (#1398)
Prior to v1.3, you could configure the container class to have built-in horizontal padding like so:
js
// tailwind.config.js
module.exports = {
  theme: {
    container: {
      padding: '2rem',
    },
  },
}
Tailwind v1.3 enhances this functionality to allow you to specify a different amount of padding for each breakpoint:
js
// tailwind.config.js
module.exports = {
  theme: {
    container: {
      padding: {
        default: '1rem',
        sm: '2rem',
        lg: '4rem',
        xl: '5rem',
      },
    },
  },
}
Added current to the default color palette (#1438)
The default color palette now includes current for currentColor, which simplifies some situations like creating buttons where the border color should match the text color:
```html
 Before 
<button
  class=""text-gray-500 hover:text-gray-700 focus:text-gray-700 border border-gray-500 hover:border-gray-700 focus:border-gray-700""
... 
Now 
... 
```
Since this color has been added to the default color palette, it is available for textColor, borderColor, backgroundColor, and placeholderColor utilities automatically.
New inline-grid utility (#1375)
We've added an inline-grid utility for setting display: inline-grid. This probably should've been included in v1.2 and somehow got missed, but it's here now baby.
```html
... 
```
Will you ever use this? I never have, but it should still be there dammit.
New flow-root display utility (#1247)
We've added a new flow-root utility for display: flow-root. Never heard of it? Me neither until it was PR'd.
It behaves exactly like display: block with one magical difference: it prevents collapsing margins!
```html
... 
```
You'll start to find all sorts of useful use-cases for this if you pay attention, like completely obsoleting clearfix hacks.
New clear-none utility (#1413)
This has been in the documentation for months but didn't actually exist in the framework — whoops.
It sets clear: none, which is mostly useful for resetting the clear property at different breakpoints.
```html
... 
```
Only two people noticed it was documented but missing, so odds are you don't even care that we added this."
151,"Tailwind CSS v1.2.0
This is probably the most exciting feature release in the history of Tailwind, so put on your seat belts.
New Features

CSS Transition support
CSS Transform support
CSS Grid support
Added max-w-{screen} utilities
Added max-w-none utility
Added rounded-md utility
Added shadow-sm utility
Added shadow-xs utility
Added stroke-width utilities
Added fixed line-height utilities
Added additional display utilities for table elements
Added box-sizing utilities
Added clear utilities
Config file dependencies are now watchable
Allow plugins to extend the user's config
Added new plugin and plugin.withOptions APIs


CSS Transition support (#1273)
Tailwind now includes utilities for setting the transition-property, transition-duration, and transition-timing-function properties.
html
<button class=""opacity-50 hover:opacity-100 transition-opacity duration-100 ease-out"">...</button>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .transition-{property}
      transitionProperty: {
        none: 'none',
        all: 'all',
        default: 'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform',
        colors: 'background-color, border-color, color, fill, stroke',
        opacity: 'opacity',
        shadow: 'box-shadow',
        transform: 'transform',
      },

      // .ease-{timingFunction}
      transitionTimingFunction: {
        linear: 'linear',
        in: 'cubic-bezier(0.4, 0, 1, 1)',
        out: 'cubic-bezier(0, 0, 0.2, 1)',
        'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
      },

      // .duration-{duration}
      transitionDuration: {
        '75': '75ms',
        '100': '100ms',
        '150': '150ms',
        '200': '200ms',
        '300': '300ms',
        '500': '500ms',
        '700': '700ms',
        '1000': '1000ms',
      },
    }
  }
  ```

For more information, check out the documentation.

CSS Transform support (#1272)
Tailwind now includes utilities for scaling, rotating, translating, and skewing elements.
html
<span class=""transform scale-150 rotate-45 translate-x-full origin-center""></span>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .origin-{origin}
      transformOrigin: {
        center: 'center',
        top: 'top',
        'top-right': 'top right',
        right: 'right',
        'bottom-right': 'bottom right',
        bottom: 'bottom',
        'bottom-left': 'bottom left',
        left: 'left',
        'top-left': 'top left',
      },

      // .scale-{scale}
      // .scale-x-{scale}
      // .scale-y-{scale}
      scale: {
        '0': '0',
        '50': '.5',
        '75': '.75',
        '90': '.9',
        '95': '.95',
        '100': '1',
        '105': '1.05',
        '110': '1.1',
        '125': '1.25',
        '150': '1.5',
      },

      // .rotate-{angle}
      rotate: {
        '-180': '-180deg',
        '-90': '-90deg',
        '-45': '-45deg',
        '0': '0',
        '45': '45deg',
        '90': '90deg',
        '180': '180deg',
      },

      // .translate-x-{distance}
      // .translate-y-{distance}
      // .-translate-x-{distance}
      // .-translate-y-{distance}
      translate: (theme, { negative }) => ({
        ...theme('spacing'),
        ...negative(theme('spacing')),
        '-full': '-100%',
        '-1/2': '-50%',
        '1/2': '50%',
        full: '100%',
      }),

      // .skew-x-{amount}
      // .skew-y-{amount}
      skew: {
        '-12': '-12deg',
        '-6': '-6deg',
        '-3': '-3deg',
        '0': '0',
        '3': '3deg',
        '6': '6deg',
        '12': '12deg',
      },
    }
  }
  ```

One notable difference in how this works vs. other utilities in Tailwind is that the transform utility acts sort of like a ""toggle"" — you need to add that class to ""enable"" transforms on an element but on its own it doesn't actually apply any transforms.
You apply the actual transforms by stacking additional utilities for the types of transforms you'd like to apply, like scale-150 to scale an element to 150% of its size, or rotate-45 to rotate it 45 degrees.
To make it possible to compose multiple transforms like this, we've implemented this feature using CSS custom properties, which means transforms in Tailwind are not supported in IE11. If you need to support IE11 and would like to use transforms in your project, you'll need to write custom CSS as you would have in earlier versions of Tailwind.
For more information, check out the documentation.

CSS Grid utilities (#1274)
Tailwind now includes utilities for CSS Grid Layout.
```html







```

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .gap-{spacing}, .row-gap-{spacing}, .col-gap-{spacing}
      gap: theme => theme('spacing'),

      // .grid-cols-{cols}
      gridTemplateColumns: {
        none: 'none',
        '1': 'repeat(1, minmax(0, 1fr))',
        '2': 'repeat(2, minmax(0, 1fr))',
        '3': 'repeat(3, minmax(0, 1fr))',
        '4': 'repeat(4, minmax(0, 1fr))',
        '5': 'repeat(5, minmax(0, 1fr))',
        '6': 'repeat(6, minmax(0, 1fr))',
        '7': 'repeat(7, minmax(0, 1fr))',
        '8': 'repeat(8, minmax(0, 1fr))',
        '9': 'repeat(9, minmax(0, 1fr))',
        '10': 'repeat(10, minmax(0, 1fr))',
        '11': 'repeat(11, minmax(0, 1fr))',
        '12': 'repeat(12, minmax(0, 1fr))',
      },

      // .col-{value}
      gridColumn: {
        auto: 'auto',
        'span-1': 'span 1 / span 1',
        'span-2': 'span 2 / span 2',
        'span-3': 'span 3 / span 3',
        'span-4': 'span 4 / span 4',
        'span-5': 'span 5 / span 5',
        'span-6': 'span 6 / span 6',
        'span-7': 'span 7 / span 7',
        'span-8': 'span 8 / span 8',
        'span-9': 'span 9 / span 9',
        'span-10': 'span 10 / span 10',
        'span-11': 'span 11 / span 11',
        'span-12': 'span 12 / span 12',
      },

      // .col-start-{value}
      gridColumnStart: {
        auto: 'auto',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '10': '10',
        '11': '11',
        '12': '12',
        '13': '13',
      },

      // .col-end-{value}
      gridColumnEnd: {
        auto: 'auto',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '10': '10',
        '11': '11',
        '12': '12',
        '13': '13',
      },

      // .grid-rows-{rows}
      gridTemplateRows: {
        none: 'none',
        '1': 'repeat(1, minmax(0, 1fr))',
        '2': 'repeat(2, minmax(0, 1fr))',
        '3': 'repeat(3, minmax(0, 1fr))',
        '4': 'repeat(4, minmax(0, 1fr))',
        '5': 'repeat(5, minmax(0, 1fr))',
        '6': 'repeat(6, minmax(0, 1fr))',
      },

      // .row-{value}
      gridRow: {
        auto: 'auto',
        'span-1': 'span 1 / span 1',
        'span-2': 'span 2 / span 2',
        'span-3': 'span 3 / span 3',
        'span-4': 'span 4 / span 4',
        'span-5': 'span 5 / span 5',
        'span-6': 'span 6 / span 6',
      },

      // .row-start-{value}
      gridRowStart: {
        auto: 'auto',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
      },

      // .row-end-{value}
      gridRowEnd: {
        auto: 'auto',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
      },
    }
  }
  ```

By default we ship the necessary utilities to construct grids with 1–12 explicit columns and 1-6 explicit rows and place elements anywhere in that grid.
Note that the approach we've taken to supporting CSS Grid is not compatible with IE11. For building grid layouts in older browsers, we recommend using Flexbox instead of CSS Grid.
For more information, check out the documentation.

Added max-w-{screen} utilities (#1284)
Tailwind's default max-width scale now includes values to match your breakpoints, taking the form max-w-screen-{breakpointName}.
```html
...
```
These are useful when you need behavior similar to the container class but only for certain sizes.

Added max-w-none utility (#1283)
Tailwind's default max-width scale now includes a none value for removing any max-width constraint an element might have.
```html
...
```

Added rounded-md utility (#1281)
Tailwind's default border-radius scale now includes an md value for giving an element a 6px border radius.
```html

```

Added shadow-sm utility (#1280)
Tailwind's default box-shadow scale now includes an sm value for giving an element a very subtle small shadow — great for giving buttons or inputs a bit of depth without being super in-your-face.
```html

```
For more information, check out the pull request.

Added shadow-xs utility (#1333)
Tailwind's default box-shadow scale now includes an xs value for giving an element a very subtle outline shadow, very useful for stacking with other shadows when you need a tiny bit of extra distinction from the background.
```html


 ... 


```
For more information, check out the pull request.

Added stroke-width utilities (#1094)
Tailwind now includes utilities for controlling the stroke-width property of SVG elements.
html
<svg class=""stroke-2"">...</svg>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .stroke-{width}
      strokeWidth: {
        '0': '0',
        '1': '1',
        '2': '2',
      }
    }
  }
  ```

For more information, check out the documentation.

Added fixed line-height utilities (#1362)
Tailwind now includes a sensible set of fixed-value line-height utilities in addition to the existing relative line-height utilities.
html
<svg class=""leading-5"">...</svg>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .leading-{size}
      lineHeight: {
        none: '1',
        tight: '1.25',
        snug: '1.375',
        normal: '1.5',
        relaxed: '1.625',
        loose: '2',
        '3': '.75rem',
        '4': '1rem',
        '5': '1.25rem',
        '6': '1.5rem',
        '7': '1.75rem',
        '8': '2rem',
        '9': '2.25rem',
        '10': '2.5rem',
      }
    }
  }
  ```

For more information, check out the documentation.

Added additional display utilities for table elements (#954)
Tailwind now includes a complete set of display utilities for table elements.
```html
...
```
We've added table-caption, table-column, table-column-group, table-footer-group, table-header-group, and table-row-group.

Added box-sizing utilities (#1031)
Tailwind now includes box-border and box-content utilities for setting the box-sizing property of an element.
```html
...
```
These can be useful when working with third party libraries that rely on the default browser value of box-sizing: content-box, which we override in our base styles.
For more information, check out the documentation.

Added clear utilities (#1051)
Tailwind now includes clear-left, clear-right, and clear-both utilities for clearing floats using the clear property.
```html
...
```
For more information, check out the documentation.

Config file dependencies are now watchable (#1072)
If you are require-ing other modules inside your tailwind.config.js file, those files will now be automatically watched for changes when running a webpack/PostCSS watcher.
Previously, you'd have to restart your watcher any time you changed those files. Now those changes will be noticed automatically and your CSS will just rebuild as expected — hurray!
For more information, check out the pull request.

Added new plugin and plugin.withOptions APIs (#1268)
In prior versions of Tailwind, plugins were just simple anonymous functions:
js
// my-plugin.js
module.exports = function ({ addUtilities, variants, theme }) {
  // ...
}
While this approach still works great and is 100% supported, Tailwind v1.2 adds two new official APIs for creating plugins that allow us to support some helpful new features.
The new tailwindcss/plugin module exports a function that you can use to create a plugin like so:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin(function ({ addUtilities, variants, theme }) {
  // ...
})
```
You can also use plugin.withOptions to create a plugin that accepts some additional user configuration right in the plugins section of your config:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin.withOptions(function (options) {
  return function ({ addUtilities, variants, theme }) {
    // ...
  }
})
```
Previously if you designed a plugin this way, users would have to make sure to invoke your plugin in their config, even if they had no custom configuration to provide:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options')(),
  ]
}
Now Tailwind is smart enough to invoke the function on the user's behalf, so if they don't want to provide any options, they can just require the plugin:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options'),
  ]
}

Allow plugins to extend the user's config (#1162)
Plugins can now extend the user's config file by providing their own configuration object as a second argument to the new plugin API:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin(function ({ addUtilities, variants, theme }) {
  // ...
}, {
  theme: {
    myPluginName: {...},
  },
  variants: {
    myPluginName: ['responsive'],
  }
})
```
This also works using the plugin.withOptions API, just pass a function that accepts your options and returns your config:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin.withOptions(function (options) {
  return function ({ addUtilities, variants, theme }) {
    // ...
  }
}, function (options) {
  return {
    theme: {
      myPluginName: {...},
    },
    variants: {
      myPluginName: ['responsive'],
    }
  }
})
```
By providing your default theme values/variants this way, users can use Tailwind's extend feature to extend your defaults just like they can with core plugins.","Tailwind CSS v1.2.0
This is probably the most exciting feature release in the history of Tailwind, so put on your seat belts.
New Features
CSS Transition support
CSS Transform support
CSS Grid support
Added max-w-{screen} utilities
Added max-w-none utility
Added rounded-md utility
Added shadow-sm utility
Added shadow-xs utility
Added stroke-width utilities
Added fixed line-height utilities
Added additional display utilities for table elements
Added box-sizing utilities
Added clear utilities
Config file dependencies are now watchable
Allow plugins to extend the user's config
Added new plugin and plugin.withOptions APIs
CSS Transition support (#1273)
Tailwind now includes utilities for setting the transition-property, transition-duration, and transition-timing-function properties.
html
...
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
For more information, check out the documentation.
CSS Transform support (#1272)
Tailwind now includes utilities for scaling, rotating, translating, and skewing elements.
html

Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
One notable difference in how this works vs. other utilities in Tailwind is that the transform utility acts sort of like a ""toggle"" — you need to add that class to ""enable"" transforms on an element but on its own it doesn't actually apply any transforms.
You apply the actual transforms by stacking additional utilities for the types of transforms you'd like to apply, like scale-150 to scale an element to 150% of its size, or rotate-45 to rotate it 45 degrees.
To make it possible to compose multiple transforms like this, we've implemented this feature using CSS custom properties, which means transforms in Tailwind are not supported in IE11. If you need to support IE11 and would like to use transforms in your project, you'll need to write custom CSS as you would have in earlier versions of Tailwind.
For more information, check out the documentation.
CSS Grid utilities (#1274)
Tailwind now includes utilities for CSS Grid Layout.
```html
```
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
By default we ship the necessary utilities to construct grids with 1–12 explicit columns and 1-6 explicit rows and place elements anywhere in that grid.
Note that the approach we've taken to supporting CSS Grid is not compatible with IE11. For building grid layouts in older browsers, we recommend using Flexbox instead of CSS Grid.
For more information, check out the documentation.
Added max-w-{screen} utilities (#1284)
Tailwind's default max-width scale now includes values to match your breakpoints, taking the form max-w-screen-{breakpointName}.
module
These are useful when you need behavior similar to the container class but only for certain sizes.
Added max-w-none utility (#1283)
Tailwind's default max-width scale now includes a none value for removing any max-width constraint an element might have.
module
Added rounded-md utility (#1281)
Tailwind's default border-radius scale now includes an md value for giving an element a 6px border radius.
```html
```
Added shadow-sm utility (#1280)
Tailwind's default box-shadow scale now includes an sm value for giving an element a very subtle small shadow — great for giving buttons or inputs a bit of depth without being super in-your-face.
```html
```
For more information, check out the pull request.
Added shadow-xs utility (#1333)
Tailwind's default box-shadow scale now includes an xs value for giving an element a very subtle outline shadow, very useful for stacking with other shadows when you need a tiny bit of extra distinction from the background.
```html
... 
```
For more information, check out the pull request.
Added stroke-width utilities (#1094)
Tailwind now includes utilities for controlling the stroke-width property of SVG elements.
html
...
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
For more information, check out the documentation.
Added fixed line-height utilities (#1362)
Tailwind now includes a sensible set of fixed-value line-height utilities in addition to the existing relative line-height utilities.
html
...
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
For more information, check out the documentation.
Added additional display utilities for table elements (#954)
Tailwind now includes a complete set of display utilities for table elements.
module
We've added table-caption, table-column, table-column-group, table-footer-group, table-header-group, and table-row-group.
Added box-sizing utilities (#1031)
Tailwind now includes box-border and box-content utilities for setting the box-sizing property of an element.
module
These can be useful when working with third party libraries that rely on the default browser value of box-sizing: content-box, which we override in our base styles.
For more information, check out the documentation.
Added clear utilities (#1051)
Tailwind now includes clear-left, clear-right, and clear-both utilities for clearing floats using the clear property.
module
For more information, check out the documentation.
Config file dependencies are now watchable (#1072)
If you are require-ing other modules inside your tailwind.config.js file, those files will now be automatically watched for changes when running a webpack/PostCSS watcher.
Previously, you'd have to restart your watcher any time you changed those files. Now those changes will be noticed automatically and your CSS will just rebuild as expected — hurray!
For more information, check out the pull request.
Added new plugin and plugin.withOptions APIs (#1268)
In prior versions of Tailwind, plugins were just simple anonymous functions:
js
// my-plugin.js
module.exports = function ({ addUtilities, variants, theme }) {
  // ...
}
While this approach still works great and is 100% supported, Tailwind v1.2 adds two new official APIs for creating plugins that allow us to support some helpful new features.
The new tailwindcss/plugin module exports a function that you can use to create a plugin like so:
module
You can also use plugin.withOptions to create a plugin that accepts some additional user configuration right in the plugins section of your config:
module
Previously if you designed a plugin this way, users would have to make sure to invoke your plugin in their config, even if they had no custom configuration to provide:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options')(),
  ]
}
Now Tailwind is smart enough to invoke the function on the user's behalf, so if they don't want to provide any options, they can just require the plugin:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options'),
  ]
}
Allow plugins to extend the user's config (#1162)
Plugins can now extend the user's config file by providing their own configuration object as a second argument to the new plugin API:
module
This also works using the plugin.withOptions API, just pass a function that accepts your options and returns your config:
module
By providing your default theme values/variants this way, users can use Tailwind's extend feature to extend your defaults just like they can with core plugins."
152,"
Add additional fixed-size line-height utilities (https://github.com/tailwindcss/tailwindcss/pull/1362)
",Add additional fixed-size line-height utilities (link)
153,"
Remove Inter from font-sans, plan to add later under new class
","Remove Inter from font-sans, plan to add later under new class"
154,"
Add system-ui to default font stack (#1326)
Add shadow-xs, increase shadow-sm alpha to 0.05 (#1333)
Support import syntax even without postcss-import (#1336)
Alias tailwind bin to tailwindcss (https://github.com/tailwindcss/tailwindcss/commit/e988185f477161a9c1ae32163d5ad4215b4e0091)
Add fill/stroke to transition-colors (#1351)
Add transition-shadow, add box-shadow to default transition (#1352)
Combine gap/columnGap/rowGap (#1353)
Add grid row utilities (#1355)
Add skew utilities (#1356)
Use font-sans as default font (#1357)
","Add system-ui to default font stack (#1326)
Add shadow-xs, increase shadow-sm alpha to 0.05 (#1333)
Support import syntax even without postcss-import (#1336)
Alias tailwind bin to tailwindcss (link)
Add fill/stroke to transition-colors (#1351)
Add transition-shadow, add box-shadow to default transition (#1352)
Combine gap/columnGap/rowGap (#1353)
Add grid row utilities (#1355)
Add skew utilities (#1356)
Use font-sans as default font (#1357)"
155,"
Adds missing dependency resolve which is required for making config dependencies watchable
",Adds missing dependency resolve which is required for making config dependencies watchable
156,"
Please note: This is a pre-release, which means (although I'm not planning on it) these new features could change before the stable version of 1.2.0 is released.

Tailwind CSS v1.2.0-canary.4
This is probably the most exciting feature release in the history of Tailwind, so put on your seat belts.
Installation
While v1.2.0 is in pre-release, install it using:
```sh
Using npm
npm install tailwindcss@canary
Using yarn
yarn add tailwindcss@canary
```
New Features

CSS Transition support
CSS Transform support
CSS Grid support
New max-w-{screen} utilities
Added max-w-none utility
Added ""Inter"" to the default sans-serif font stack
Add rounded-md utility
Add shadow-sm utility
Added stroke-width utilities
Added additional display utilities for table elements
Added box-sizing utilities
Added clear utilities
Config file dependencies are now watchable
Allow plugins to extend the user's config
Add new plugin and plugin.withOptions APIs


CSS Transition support (#1273)
Tailwind now includes utilities for setting the transition-property, transition-duration, and transition-timing-function properties.
html
<button class=""opacity-50 hover:opacity-100 transition-opacity duration-100 ease-out"">...</button>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .transition-{property}
      transitionProperty: {
        none: 'none',
        all: 'all',
        default: 'background-color, border-color, color, opacity, transform',
        colors: 'background-color, border-color, color',
        opacity: 'opacity',
        transform: 'transform',
      },

      // .ease-{timingFunction}
      transitionTimingFunction: {
        linear: 'linear',
        in: 'cubic-bezier(0.4, 0, 1, 1)',
        out: 'cubic-bezier(0, 0, 0.2, 1)',
        'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
      },

      // .duration-{duration}
      transitionDuration: {
        '75': '75ms',
        '100': '100ms',
        '150': '150ms',
        '200': '200ms',
        '300': '300ms',
        '500': '500ms',
        '700': '700ms',
        '1000': '1000ms',
      },
    }
  }
  ```

For more information, check out the pull request.

CSS Transform support (#1272)
Tailwind now includes utilities for scaling, rotating, translating, and skewing elements.
html
<span class=""transform scale-150 rotate-45 translate-x-full origin-center""></span>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .origin-{origin}
      transformOrigin: {
        center: 'center',
        top: 'top',
        'top-right': 'top right',
        right: 'right',
        'bottom-right': 'bottom right',
        bottom: 'bottom',
        'bottom-left': 'bottom left',
        left: 'left',
        'top-left': 'top left',
      },

      // .scale-{scale}
      // .scale-x-{scale}
      // .scale-y-{scale}
      scale: {
        '0': '0',
        '50': '.5',
        '75': '.75',
        '90': '.9',
        '95': '.95',
        '100': '1',
        '105': '1.05',
        '110': '1.1',
        '125': '1.25',
        '150': '1.5',
      },

      // .rotate-{angle}
      rotate: {
        '-180': '-180deg',
        '-90': '-90deg',
        '-45': '-45deg',
        '0': '0',
        '45': '45deg',
        '90': '90deg',
        '180': '180deg',
      },

      // .translate-{distance}
      // .translate-x-{distance}
      // .translate-y-{distance}
      // .-translate-{distance}
      // .-translate-x-{distance}
      // .-translate-y-{distance}
      translate: (theme, { negative }) => ({
        ...theme('spacing'),
        ...negative(theme('spacing')),
        '-full': '-100%',
        '-1/2': '-50%',
        '1/2': '50%',
        full: '100%',
      }),

      // .skew-x-{amount}
      // .skew-y-{amount}
      skew: {},
    }
  }
  ```

One notable difference in how this works vs. other utilities in Tailwind is that the transform utility acts sort of like a ""toggle"" — you need to add that class to ""enable"" transforms on an element but on its own it doesn't actually apply any transforms.
You apply the actual transforms by stacking additional utilities for the types of transforms you'd like to apply, like scale-150 to scale an element to 150% of its size, or rotate-45 to rotate it 45 degrees.
Note that while we have provided sensible defaults for scale, rotate, and translate, we do not include any default values for skew. If you'd like to add skew utilities to your project, add the values you need under the skew key in your theme.
To make it possible to compose multiple transforms like this, we've implemented this feature using CSS custom properties, which means transforms in Tailwind are not supported in IE11. If you need to support IE11 and would like to use transforms in your project, you'll need to write custom CSS as you would have in earlier versions of Tailwind.
For more information, check out the pull request.

CSS Grid utilities (#1274)
Tailwind now includes utilities for CSS Grid Layout.
```html







```

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .gap-{spacing}
      gap: theme => theme('spacing'),

      // .row-gap-{spacing}
      rowGap: {},

      // .col-gap-{spacing}
      columnGap: {},

      // .grid-cols-{cols}
      gridTemplateColumns: {
        none: 'none',
        '1': 'repeat(1, minmax(0, 1fr))',
        '2': 'repeat(2, minmax(0, 1fr))',
        '3': 'repeat(3, minmax(0, 1fr))',
        '4': 'repeat(4, minmax(0, 1fr))',
        '5': 'repeat(5, minmax(0, 1fr))',
        '6': 'repeat(6, minmax(0, 1fr))',
        '7': 'repeat(7, minmax(0, 1fr))',
        '8': 'repeat(8, minmax(0, 1fr))',
        '9': 'repeat(9, minmax(0, 1fr))',
        '10': 'repeat(10, minmax(0, 1fr))',
        '11': 'repeat(11, minmax(0, 1fr))',
        '12': 'repeat(12, minmax(0, 1fr))',
      },

      // .col-{value}
      gridColumn: {
        auto: 'auto',
        'span-1': 'span 1 / span 1',
        'span-2': 'span 2 / span 2',
        'span-3': 'span 3 / span 3',
        'span-4': 'span 4 / span 4',
        'span-5': 'span 5 / span 5',
        'span-6': 'span 6 / span 6',
        'span-7': 'span 7 / span 7',
        'span-8': 'span 8 / span 8',
        'span-9': 'span 9 / span 9',
        'span-10': 'span 10 / span 10',
        'span-11': 'span 11 / span 11',
        'span-12': 'span 12 / span 12',
      },

      // .col-start-{value}
      gridColumnStart: {
        auto: 'auto',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '10': '10',
        '11': '11',
        '12': '12',
        '13': '13',
      },

      // .col-end-{value}
      gridColumnEnd: {
        auto: 'auto',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '10': '10',
        '11': '11',
        '12': '12',
        '13': '13',
      },

      // .grid-rows-{rows}
      gridTemplateRows: {},

      // .row-{value}
      gridRow: {},

      // .row-start-{value}
      gridRowStart: {},

      // .row-end-{value}
      gridRowEnd: {},
    }
  }
  ```

By default we ship the necessary utilities to construct grids with 1–12 columns and place elements anywhere in that grid, but we don't include any default utilities for controlling rows or row placement. Those utilities are supported out of the box though, you just need to add the values you need to your config file.
Note that the approach we've taken to supporting CSS Grid is not compatible with IE11. For building grid layouts in older browsers, we recommend using Flexbox instead of CSS Grid.
For more information, check out the pull request.

New max-w-{screen} utilities (#1284)
Tailwind's default max-width scale now includes values to match your breakpoints, taking the form max-w-screen-{breakpointName}.
```html
...
```
These are useful when you need behavior similar to the container class but only for certain sizes.
For more information, check out the pull request.

New max-w-none utility (#1283)
Tailwind's default max-width scale now includes a none value for removing any max-width constraint an element might have.
```html
...
```
For more information, check out the pull request.

Added ""Inter"" to the default sans-serif font stack (#1275)
Tailwind now includes Inter as the first font family in our default sans serif font stack.
Inter is a beautiful, free, open source font created by Rasmus Andersson carefully crafted for interface design. It has a similar feel to Apple's San Francisco font, but is licensed in a way that lets you use it on all operating systems.
If you care about your end users seeing the same font no matter which operating system they are running (something you don't get when using the system font stack), Inter is without a doubt the first font I would recommend. I like to think of it as ""the universal system font"".
This change won't affect how your site looks at all if you aren't serving Inter to your users, but now if you do want to use Inter, all you need to do is load it on your site from the CDN:
html
<link href=""https://rsms.me/inter/inter.css"" rel=""stylesheet"">
This change only adds ""Inter"" to the font stack, it does not actually automatically import/load the font files. You can choose to serve them yourself or use a CDN link like the one mentioned above.
For users who want to continue using the system font, you don't have to do anything — the browser will continue to render the system font stack in the absence of the Inter font files.
For more information, check out the pull request.

Added rounded-md utility (#1281)
Tailwind's default border-radius scale now includes an md value for giving an element a 6px border radius.
```html

```
For more information, check out the pull request.

Added shadow-sm utility (#1280)
Tailwind's default box-shadow scale now includes an sm value for giving an element a very subtle small shadow — great for giving buttons or inputs a bit of depth without being super in-your-face.
```html

```
For more information, check out the pull request.

Added stroke-width utilities (#1094)
Tailwind now includes utilities for controlling the stroke-width property of SVG elements.
html
<svg class=""stroke-2"">...</svg>

Expand to see the default values for these utilities

  ```js
  // tailwind.config.js
  module.exports = {
    theme: {

      // .stroke-{width}
      strokeWidth: {
        '0': '0',
        '1': '1',
        '2': '2',
      }
    }
  }
  ```

For more information, check out the pull request.

Added additional display utilities for table elements (#954)
Tailwind now includes a complete set of display utilities for table elements.
```html
...
```
We've added table-caption, table-column, table-column-group, table-footer-group, table-header-group, and table-row-group.
For more information, check out the pull request.

Added box-sizing utilities (#1031)
Tailwind now includes box-border and box-content utilities for setting the box-sizing property of an element.
```html
...
```
These can be useful when working with third party libraries that rely on the default browser value of box-sizing: content-box which we override in our base styles (Google Maps is a good example).
For more information, check out the pull request.

Added clear utilities (#1051)
Tailwind now includes clear-left, clear-right, and clear-both utilities for clearing floats using the clear property.
```html
...
```
For more information, check out the pull request.

Config file dependencies are now watchable (#1072)
If you are require-ing other modules inside your tailwind.config.js file, those files will now be automatically watched for changes when running a webpack/PostCSS watcher.
Previously, you'd have to restart your watcher any time you changed those files. Now those changes will be noticed automatically and your CSS will just rebuild as expected — hurray!
For more information, check out the pull request.

Added new plugin and plugin.withOptions APIs (#1268)
In prior versions of Tailwind, plugins were just simple anonymous functions:
js
// my-plugin.js
module.exports = function ({ addUtilities, variants, theme }) {
  // ...
}
While this approach still works great and is 100% supported, Tailwind v1.2 adds two new official APIs for creating plugins that allow us to support some helpful new features.
The new tailwindcss/plugin module exports a function that you can use to create a plugin like so:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin(function ({ addUtilities, variants, theme }) {
  // ...
})
```
You can also use plugin.withOptions to create a plugin that accepts some additional user configuration right in the plugins section of your config:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin.withOptions(function (options) {
  return function ({ addUtilities, variants, theme }) {
    // ...
  }
})
```
Previously if you designed a plugin this way, users would have to make sure to invoke your plugin in their config, even if they had no custom configuration to provide:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options')(),
  ]
}
Now Tailwind is smart enough to invoke the function on the user's behalf, so if they don't want to provide any options, they can just require the plugin:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options'),
  ]
}

Allow plugins to extend the user's config (#1162)
Plugins can now extend the user's config file by providing their own configuration object as a second argument to the new plugin API:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin(function ({ addUtilities, variants, theme }) {
  // ...
}, {
  theme: {
    myPluginName: {...},
  },
  variants: {
    myPluginName: ['responsive'],
  }
})
```
This also works using the plugin.withOptions API, just pass a function that accepts your options and returns your config:
```js
// my-plugin.js
const plugin = require('tailwindcss/plugin')
module.exports = plugin.withOptions(function (options) {
  return function ({ addUtilities, variants, theme }) {
    // ...
  }
}, function (options) {
  return {
    theme: {
      myPluginName: {...},
    },
    variants: {
      myPluginName: ['responsive'],
    }
  }
})
```
By providing your default theme values/variants this way, users can use Tailwind's extend feature to extend your defaults just like they can with core plugins.","Please note: This is a pre-release, which means (although I'm not planning on it) these new features could change before the stable version of 1.2.0 is released.
Tailwind CSS v1.2.0-canary.4
This is probably the most exciting feature release in the history of Tailwind, so put on your seat belts.
Installation
While v1.2.0 is in pre-release, install it using:
module
New Features
CSS Transition support
CSS Transform support
CSS Grid support
New max-w-{screen} utilities
Added max-w-none utility
Added ""Inter"" to the default sans-serif font stack
Add rounded-md utility
Add shadow-sm utility
Added stroke-width utilities
Added additional display utilities for table elements
Added box-sizing utilities
Added clear utilities
Config file dependencies are now watchable
Allow plugins to extend the user's config
Add new plugin and plugin.withOptions APIs
CSS Transition support (#1273)
Tailwind now includes utilities for setting the transition-property, transition-duration, and transition-timing-function properties.
html
...
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
For more information, check out the pull request.
CSS Transform support (#1272)
Tailwind now includes utilities for scaling, rotating, translating, and skewing elements.
html

Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
One notable difference in how this works vs. other utilities in Tailwind is that the transform utility acts sort of like a ""toggle"" — you need to add that class to ""enable"" transforms on an element but on its own it doesn't actually apply any transforms.
You apply the actual transforms by stacking additional utilities for the types of transforms you'd like to apply, like scale-150 to scale an element to 150% of its size, or rotate-45 to rotate it 45 degrees.
Note that while we have provided sensible defaults for scale, rotate, and translate, we do not include any default values for skew. If you'd like to add skew utilities to your project, add the values you need under the skew key in your theme.
To make it possible to compose multiple transforms like this, we've implemented this feature using CSS custom properties, which means transforms in Tailwind are not supported in IE11. If you need to support IE11 and would like to use transforms in your project, you'll need to write custom CSS as you would have in earlier versions of Tailwind.
For more information, check out the pull request.
CSS Grid utilities (#1274)
Tailwind now includes utilities for CSS Grid Layout.
```html
```
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
By default we ship the necessary utilities to construct grids with 1–12 columns and place elements anywhere in that grid, but we don't include any default utilities for controlling rows or row placement. Those utilities are supported out of the box though, you just need to add the values you need to your config file.
Note that the approach we've taken to supporting CSS Grid is not compatible with IE11. For building grid layouts in older browsers, we recommend using Flexbox instead of CSS Grid.
For more information, check out the pull request.
New max-w-{screen} utilities (#1284)
Tailwind's default max-width scale now includes values to match your breakpoints, taking the form max-w-screen-{breakpointName}.
module
These are useful when you need behavior similar to the container class but only for certain sizes.
For more information, check out the pull request.
New max-w-none utility (#1283)
Tailwind's default max-width scale now includes a none value for removing any max-width constraint an element might have.
module
For more information, check out the pull request.
Added ""Inter"" to the default sans-serif font stack (#1275)
Tailwind now includes Inter as the first font family in our default sans serif font stack.
Inter is a beautiful, free, open source font created by Rasmus Andersson carefully crafted for interface design. It has a similar feel to Apple's San Francisco font, but is licensed in a way that lets you use it on all operating systems.
If you care about your end users seeing the same font no matter which operating system they are running (something you don't get when using the system font stack), Inter is without a doubt the first font I would recommend. I like to think of it as ""the universal system font"".
This change won't affect how your site looks at all if you aren't serving Inter to your users, but now if you do want to use Inter, all you need to do is load it on your site from the CDN:
html

This change only adds ""Inter"" to the font stack, it does not actually automatically import/load the font files. You can choose to serve them yourself or use a CDN link like the one mentioned above.
For users who want to continue using the system font, you don't have to do anything — the browser will continue to render the system font stack in the absence of the Inter font files.
For more information, check out the pull request.
Added rounded-md utility (#1281)
Tailwind's default border-radius scale now includes an md value for giving an element a 6px border radius.
```html
```
For more information, check out the pull request.
Added shadow-sm utility (#1280)
Tailwind's default box-shadow scale now includes an sm value for giving an element a very subtle small shadow — great for giving buttons or inputs a bit of depth without being super in-your-face.
```html
```
For more information, check out the pull request.
Added stroke-width utilities (#1094)
Tailwind now includes utilities for controlling the stroke-width property of SVG elements.
html
...
Expand to see the default values for these utilities
```js
  // tailwind.config.js
  module.exports = {
    theme: {
module
}
  ```
For more information, check out the pull request.
Added additional display utilities for table elements (#954)
Tailwind now includes a complete set of display utilities for table elements.
module
We've added table-caption, table-column, table-column-group, table-footer-group, table-header-group, and table-row-group.
For more information, check out the pull request.
Added box-sizing utilities (#1031)
Tailwind now includes box-border and box-content utilities for setting the box-sizing property of an element.
module
These can be useful when working with third party libraries that rely on the default browser value of box-sizing: content-box which we override in our base styles (Google Maps is a good example).
For more information, check out the pull request.
Added clear utilities (#1051)
Tailwind now includes clear-left, clear-right, and clear-both utilities for clearing floats using the clear property.
module
For more information, check out the pull request.
Config file dependencies are now watchable (#1072)
If you are require-ing other modules inside your tailwind.config.js file, those files will now be automatically watched for changes when running a webpack/PostCSS watcher.
Previously, you'd have to restart your watcher any time you changed those files. Now those changes will be noticed automatically and your CSS will just rebuild as expected — hurray!
For more information, check out the pull request.
Added new plugin and plugin.withOptions APIs (#1268)
In prior versions of Tailwind, plugins were just simple anonymous functions:
js
// my-plugin.js
module.exports = function ({ addUtilities, variants, theme }) {
  // ...
}
While this approach still works great and is 100% supported, Tailwind v1.2 adds two new official APIs for creating plugins that allow us to support some helpful new features.
The new tailwindcss/plugin module exports a function that you can use to create a plugin like so:
module
You can also use plugin.withOptions to create a plugin that accepts some additional user configuration right in the plugins section of your config:
module
Previously if you designed a plugin this way, users would have to make sure to invoke your plugin in their config, even if they had no custom configuration to provide:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options')(),
  ]
}
Now Tailwind is smart enough to invoke the function on the user's behalf, so if they don't want to provide any options, they can just require the plugin:
js
// tailwind.config.js
module.exports = {
  plugins: [
    require('plugin-with-no-options'),
    require('plugin-that-has-options'),
  ]
}
Allow plugins to extend the user's config (#1162)
Plugins can now extend the user's config file by providing their own configuration object as a second argument to the new plugin API:
module
This also works using the plugin.withOptions API, just pass a function that accepts your options and returns your config:
module
By providing your default theme values/variants this way, users can use Tailwind's extend feature to extend your defaults just like they can with core plugins."
157,"
Add new plugin and plugin.withOptions APIs for plugin developers (#1268)
",Add new plugin and plugin.withOptions APIs for plugin developers (#1268)
158,"

Fixes a bug where the .group class was not receiving the user's configured prefix when using the prefix option (#1216).
Note: Although this is a bugfix it could affect your site if you were working around the bug in your own code by not prefixing the .group class. I'm sorry 😞

","Fixes a bug where the .group class was not receiving the user's configured prefix when using the prefix option (#1216).
Note: Although this is a bugfix it could affect your site if you were working around the bug in your own code by not prefixing the .group class. I'm sorry 😞"
159,"
Don't watch node_modules files for changes, fixed significant build performance regression in v1.2.0-canary.0 (#1179)
","Don't watch node_modules files for changes, fixed significant build performance regression in v1.2.0-canary.0 (#1179)"
160,"
Fixes an issue where in some cases function properties in the user's theme config didn't receive the second utils argument (#1180)
",Fixes an issue where in some cases function properties in the user's theme config didn't receive the second utils argument (#1180)
161,"
Automatically watch all config file dependencies (plugins, design tokens imported from other files, etc.) for changes when build watcher is running (#1072)
Add justify-evenly utility (#1083)
Allow plugins to add their own config file to be resolved with the user's custom config (#1162)
","Automatically watch all config file dependencies (plugins, design tokens imported from other files, etc.) for changes when build watcher is running (#1072)
Add justify-evenly utility (#1083)
Allow plugins to add their own config file to be resolved with the user's custom config (#1162)"
162,"
Fixes a bug with horizontal rules where they were displayed with a 2px border instead of a 1px border (#1079)
Fixes a bug with horizontal rules where they were rendered with default top/bottom margin (#1079)
","Fixes a bug with horizontal rules where they were displayed with a 2px border instead of a 1px border (#1079)
Fixes a bug with horizontal rules where they were rendered with default top/bottom margin (#1079)"
163,"
Fixes issue where values like auto would fail to make it through the default negative margin config (#1070)
",Fixes issue where values like auto would fail to make it through the default negative margin config (#1070)
164,"Tailwind CSS v1.1
The first new feature release since v1.0 has arrived! Tailwind v1.1 includes a bunch of new stuff, but I think the things you'll probably be most excited about are:

New screenreader visibility utilities
New utilities for setting the placeholder color on form elements
New variants for first-child, last-child, nth-child(odd), and nth-child(even)

Important note — although this is a minor release, it includes two bug fixes that may have a superficial impact on how your site looks if you are using horizontal rules in your site or are relying on the default placeholder color defined in Tailwind's base styles.
Be sure to read through the fixes section before upgrading to understand the impact.
Changes

New features
Added utilities for screenreader visibility
Added utilities for placeholder color
First, last, even, and odd child variants
Disabled variant
Visited variant
Increase utility specificity using a scope instead of !important
Add hover/focus variants for opacity by default
Added border-double utility
Support negative prefix for boxShadow and letterSpacing plugins
Support passing config path via object
Fixes
Placeholders no longer have a default opacity
Make horizontal rules visible by default
Generate correct negative margins when using calc


New features

Added utilities for screenreader visibility (#964)
Tailwind now includes a new accessibility core plugin that adds sr-only and not-sr-only utilities for controlling whether an element is visually hidden but still accessible to screen readers.
Use sr-only to hide an element visually without hiding it from screen readers:
html
<a href=""#"">
  <svg><!-- ... --></svg>
  <span class=""sr-only"">Settings</span>
</a>
Use not-sr-only to undo sr-only, making an element visible to sighted users as well as screen readers. This can be useful when you want to visually hide something on small screens but show it on larger screens for example:
html
<a href=""#"">
  <svg><!-- ... --></svg>
  <span class=""sr-only sm:not-sr-only"">Settings</span>
</a>
By default, responsive and focus variants are generated for these utilities. You can use focus:not-sr-only to make an element visually hidden by default but visible when the user tabs to it — useful for ""skip to content"" links:
html
<a href=""#"" class=""sr-only focus:not-sr-only"">
  Skip to content
</a>
You can customize which variants are generated by adding an accessibility key to the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    accessibility: ['responsive', 'hover', 'focus', 'active']
  }
}

Added utilities for placeholder color (#1063)
Tailwind now includes placeholder-{color} utilities for setting the placeholder color of form elements:
html
<input class=""text-gray-900 placeholder-gray-500 ..."">
By default, responsive and focus variants are generated for these utilities. You can customize which variants are generated by adding a placeholderColor key to the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    placeholderColor: ['responsive', 'hover', 'focus', 'active']
  }
}

First, last, even, and odd child variants (#1024, #1027)
Tailwind now includes variants for targeting the first-child, last-child, nth-child(odd), and nth-child(even) pseudo-classes.
These allow you to apply a utility to an element only when it is the first, last, odd, or even child of its parent. Very useful for things like ""put a border between all of these items that are generated in a loop"" for example:
```html

{{ item }}

```
...or to add zebra striping to a table:
```html


...
...


```
The pseudo-classes map to variants as follows:
| Pseudo-class | Variant |
| --- | --- |
| :first-child | first:{utility} |
| :last-child | last:{utility} |
| :nth-child(odd) | odd:{utility} |
| :nth-child(even) | even:{utility} |
Something worth emphasizing is that these variants apply to the child element itself, not to the children of the element with the utility. This is consistent with how other pseudo-class variants in Tailwind work, and how the :first/last-child pseudo selectors work in CSS.
Said again in code:
```html
 This is *not* how these variants are meant to be used 

{{ item }}

 The utilities should be used on the child itself, not the parent 

{{ item }}

```
These variants are disabled by default for all utilities, but can be enabled for each core plugin in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
-     backgroundColor: ['responsive', 'hover', 'focus']
+     backgroundColor: ['responsive', 'first', 'last', 'even', 'odd', 'hover', 'focus']
    }
  }

Disabled variant (#732)
Tailwind now includes a disabled variant for styling elements when they are disabled:
html
<input class=""disabled:opacity-50 ..."">
This variant is disabled by default for all utilities, but can be enabled for each core plugin in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
-     opacity: ['responsive', 'hover', 'focus']
+     opacity: ['responsive', 'hover', 'focus', 'disabled']
    }
  }

Visited variant (#976)
Tailwind now includes a visited variant for styling visited links:
html
<a href=""#"" class=""text-blue-500 visited:text-purple-500 ..."">
This variant is disabled by default for all utilities, but can be enabled for each core plugin in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
-     textColor: ['responsive', 'hover', 'focus']
+     textColor: ['responsive', 'hover', 'focus', 'visited']
    }
  }

Increase utility specificity using a scope instead of !important (#1020)
Prior to Tailwind v1.1, you may have used the important option to make sure that no matter what, your utilities always took precedence over any other styles applied to an element:
js
// tailwind.config.js
module.exports = {
  important: true,
  // ...
}
This is a totally reasonable thing to do but it can introduce some issues when incorporating third-party JS libraries that add inline styles to your elements, because Tailwind's important utilities would defeat the inline styles. This is really common with animation libraries for example.
Tailwind v1.1 adds the ability to make utilities ""important"" in a less aggressive manner by providing a selector instead of a boolean to the important option:
js
// tailwind.config.js
module.exports = {
  important: '#app',
  // ...
}
What this will do is prefix all of your utilities with that selector, increasing their specificity without actually making them !important.
By using an ID for this selector and adding that ID to the root element of your site, all of Tailwind's utilities will have a high enough specificity to defeat all other classes used in your project without interfering with inline styles:
```html

 ... 

  .high-specificity .nested .selector {
    color: blue;
  }


 Will be #bada55 


 Will be red-500 
 ... 


 Will be #bada55 
 ... 


```
If this seems weird or complicated to you, chances are you haven't run into this situation before and can just ignore this feature. If you've been bitten by this problem in the past though, you'll understand exactly why this feature was added.

Add hover/focus variants for opacity by default (#1065)
Opacity utilities now have hover and focus variants enabled by default:
```html
 ... 
```
You can disable these if needed by overriding the default opacity variants in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
+     opacity: ['responsive']
    }
  }

Added border-double utility (#1040)
Tailwind now includes a border-double utility for, well, giving elements a double border.
```html
 ... 
```

Support negative prefix for boxShadow and letterSpacing plugins (#992)
The boxShadow and letterSpacing plugins now support the negative modifier prefix like zIndex, margin, and inset utilities do:
js
// tailwind.config.js
module.exports = {
  theme: {
    letterSpacing: {
     '-1': '-.05em',
    },
    boxShadow: {
     '-sm': 'inset 0 2px 4px rgba(0,0,0.1)',
    },
  }
}
This would generate classes like -tracking-1 and -shadow-sm, rather than tracking--1 and shadow--sm like you might expect.

Support passing config path via object (#1062)
When adding Tailwind to your PostCSS config, you can now specify the config file path using an object syntax instead of only a string:
```js
// postcss.config.js
module.exports = {
  plugins: [
    // Existing syntax:
    require('tailwindcss')('custom-config.js'),
// Added syntax:
require('tailwindcss')({ config: 'custom-config.js' }),

]
}
```
This makes Tailwind compatible with PostCSS's object configuration syntax, which wasn't previously possible:
js
// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: { config: 'custom-config.js' },
  }
}
See the pull request for all of the details on how this works.

Fixes

Placeholders no longer have a default opacity (#1064)
Prior to v1.1, Tailwind included the following base styles for form elements:
css
input::placeholder, textarea::placeholder {
  color: inherit;
  opacity: 0.5;
}
Due to a bug in IE11, this mistakenly caused the input and textarea elements themselves to be rendered at 50% opacity, not just the placeholders.
We've fixed this in v1.1 by changing the base styles to this:
css
input::placeholder, textarea::placeholder {
  color: #a0aec0;
}
This sets the default placeholder to Tailwind's gray-500 color instead of inheriting the current color and changing the opacity.
This means that if you weren't assigning a custom placeholder color to your form elements, they will now look a bit different than they did before.
This will be most apparent in situations where you have changed the text color of an input and were relying on the inherit behavior — for example an input with red text where you also want the placeholder to be red.
Now that Tailwind includes placeholder color utilities, you can correct these superficial visual differences by adding a placeholder utility:
html
<input class=""text-red-500 placeholder-red-300"">

Make horizontal rules visible by default (#991)
Prior to v1.1, horizontal rules were mistakenly invisible in Tailwind because they had no border-width assigned.
Now hr elements have a default border-width of 1px so they actually show up when you create one.
This is technically a very minor breaking change in the event that you were actually depending on hr elements not having a default border. You can remove the border by adding border-0:
```html

```

Generate correct negative margins when using calc (#1058)
Negative margin values were calculated fairly naively in previous versions of Tailwind by simply prefixing the positive value with a -. This of course didn't work if you were using more complex values like calc(100vw - 10rem) or var(--spacing-sm).
Tailwind v1.1 fixes this issue by using calc and the reduce-css-calc package to calculate the correct value to use.
Read more about it in the pull request.","Tailwind CSS v1.1
The first new feature release since v1.0 has arrived! Tailwind v1.1 includes a bunch of new stuff, but I think the things you'll probably be most excited about are:
New screenreader visibility utilities
New utilities for setting the placeholder color on form elements
New variants for first-child, last-child, nth-child(odd), and nth-child(even)
Important note — although this is a minor release, it includes two bug fixes that may have a superficial impact on how your site looks if you are using horizontal rules in your site or are relying on the default placeholder color defined in Tailwind's base styles.
Be sure to read through the fixes section before upgrading to understand the impact.
Changes
New features
Added utilities for screenreader visibility
Added utilities for placeholder color
First, last, even, and odd child variants
Disabled variant
Visited variant
Increase utility specificity using a scope instead of !important
Add hover/focus variants for opacity by default
Added border-double utility
Support negative prefix for boxShadow and letterSpacing plugins
Support passing config path via object
Fixes
Placeholders no longer have a default opacity
Make horizontal rules visible by default
Generate correct negative margins when using calc
New features
Added utilities for screenreader visibility (#964)
Tailwind now includes a new accessibility core plugin that adds sr-only and not-sr-only utilities for controlling whether an element is visually hidden but still accessible to screen readers.
Use sr-only to hide an element visually without hiding it from screen readers:
html

 ... 
Settings

Use not-sr-only to undo sr-only, making an element visible to sighted users as well as screen readers. This can be useful when you want to visually hide something on small screens but show it on larger screens for example:
html

 ... 
Settings

By default, responsive and focus variants are generated for these utilities. You can use focus:not-sr-only to make an element visually hidden by default but visible when the user tabs to it — useful for ""skip to content"" links:
html

  Skip to content

You can customize which variants are generated by adding an accessibility key to the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    accessibility: ['responsive', 'hover', 'focus', 'active']
  }
}
Added utilities for placeholder color (#1063)
Tailwind now includes placeholder-{color} utilities for setting the placeholder color of form elements:
html

By default, responsive and focus variants are generated for these utilities. You can customize which variants are generated by adding a placeholderColor key to the variants section of your config file:
js
// tailwind.config.js
module.exports = {
  // ...
  variants: {
    placeholderColor: ['responsive', 'hover', 'focus', 'active']
  }
}
First, last, even, and odd child variants (#1024, #1027)
Tailwind now includes variants for targeting the first-child, last-child, nth-child(odd), and nth-child(even) pseudo-classes.
These allow you to apply a utility to an element only when it is the first, last, odd, or even child of its parent. Very useful for things like ""put a border between all of these items that are generated in a loop"" for example:
```html
{{ item }}
modulehtml
...
...
modulehtml
 This is not how these variants are meant to be used 
{{ item }}
The utilities should be used on the child itself, not the parent 
{{ item }}
```
These variants are disabled by default for all utilities, but can be enabled for each core plugin in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
-     backgroundColor: ['responsive', 'hover', 'focus']
+     backgroundColor: ['responsive', 'first', 'last', 'even', 'odd', 'hover', 'focus']
    }
  }
Disabled variant (#732)
Tailwind now includes a disabled variant for styling elements when they are disabled:
html

This variant is disabled by default for all utilities, but can be enabled for each core plugin in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
-     opacity: ['responsive', 'hover', 'focus']
+     opacity: ['responsive', 'hover', 'focus', 'disabled']
    }
  }
Visited variant (#976)
Tailwind now includes a visited variant for styling visited links:
html

This variant is disabled by default for all utilities, but can be enabled for each core plugin in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
-     textColor: ['responsive', 'hover', 'focus']
+     textColor: ['responsive', 'hover', 'focus', 'visited']
    }
  }
Increase utility specificity using a scope instead of !important (#1020)
Prior to Tailwind v1.1, you may have used the important option to make sure that no matter what, your utilities always took precedence over any other styles applied to an element:
js
// tailwind.config.js
module.exports = {
  important: true,
  // ...
}
This is a totally reasonable thing to do but it can introduce some issues when incorporating third-party JS libraries that add inline styles to your elements, because Tailwind's important utilities would defeat the inline styles. This is really common with animation libraries for example.
Tailwind v1.1 adds the ability to make utilities ""important"" in a less aggressive manner by providing a selector instead of a boolean to the important option:
js
// tailwind.config.js
module.exports = {
  important: '#app',
  // ...
}
What this will do is prefix all of your utilities with that selector, increasing their specificity without actually making them !important.
By using an ID for this selector and adding that ID to the root element of your site, all of Tailwind's utilities will have a high enough specificity to defeat all other classes used in your project without interfering with inline styles:
```html
... 
.high-specificity .nested .selector {
    color: blue;
  }
Will be #bada55 
Will be red-500 
 ... 
Will be #bada55 
 ... 
```
If this seems weird or complicated to you, chances are you haven't run into this situation before and can just ignore this feature. If you've been bitten by this problem in the past though, you'll understand exactly why this feature was added.
Add hover/focus variants for opacity by default (#1065)
Opacity utilities now have hover and focus variants enabled by default:
module
You can disable these if needed by overriding the default opacity variants in the variants section of your config file:
diff
  // tailwind.config.js
  module.exports = {
    // ...
    variants: {
+     opacity: ['responsive']
    }
  }
Added border-double utility (#1040)
Tailwind now includes a border-double utility for, well, giving elements a double border.
module
Support negative prefix for boxShadow and letterSpacing plugins (#992)
The boxShadow and letterSpacing plugins now support the negative modifier prefix like zIndex, margin, and inset utilities do:
js
// tailwind.config.js
module.exports = {
  theme: {
    letterSpacing: {
     '-1': '-.05em',
    },
    boxShadow: {
     '-sm': 'inset 0 2px 4px rgba(0,0,0.1)',
    },
  }
}
This would generate classes like -tracking-1 and -shadow-sm, rather than tracking--1 and shadow--sm like you might expect.
Support passing config path via object (#1062)
When adding Tailwind to your PostCSS config, you can now specify the config file path using an object syntax instead of only a string:
```js
// postcss.config.js
module.exports = {
  plugins: [
    // Existing syntax:
    require('tailwindcss')('custom-config.js'),
// Added syntax:
require('tailwindcss')({ config: 'custom-config.js' }),
]
}
```
This makes Tailwind compatible with PostCSS's object configuration syntax, which wasn't previously possible:
js
// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: { config: 'custom-config.js' },
  }
}
See the pull request for all of the details on how this works.
Fixes
Placeholders no longer have a default opacity (#1064)
Prior to v1.1, Tailwind included the following base styles for form elements:
css
input::placeholder, textarea::placeholder {
  color: inherit;
  opacity: 0.5;
}
Due to a bug in IE11, this mistakenly caused the input and textarea elements themselves to be rendered at 50% opacity, not just the placeholders.
We've fixed this in v1.1 by changing the base styles to this:
css
input::placeholder, textarea::placeholder {
  color: #a0aec0;
}
This sets the default placeholder to Tailwind's gray-500 color instead of inheriting the current color and changing the opacity.
This means that if you weren't assigning a custom placeholder color to your form elements, they will now look a bit different than they did before.
This will be most apparent in situations where you have changed the text color of an input and were relying on the inherit behavior — for example an input with red text where you also want the placeholder to be red.
Now that Tailwind includes placeholder color utilities, you can correct these superficial visual differences by adding a placeholder utility:
html

Make horizontal rules visible by default (#991)
Prior to v1.1, horizontal rules were mistakenly invisible in Tailwind because they had no border-width assigned.
Now hr elements have a default border-width of 1px so they actually show up when you create one.
This is technically a very minor breaking change in the event that you were actually depending on hr elements not having a default border. You can remove the border by adding border-0:
```html
```
Generate correct negative margins when using calc (#1058)
Negative margin values were calculated fairly naively in previous versions of Tailwind by simply prefixing the positive value with a -. This of course didn't work if you were using more complex values like calc(100vw - 10rem) or var(--spacing-sm).
Tailwind v1.1 fixes this issue by using calc and the reduce-css-calc package to calculate the correct value to use.
Read more about it in the pull request."
165,"
Fixes issue where modifiers would mutate nested rules (https://github.com/tailwindcss/tailwindcss/pull/1053)
",Fixes issue where modifiers would mutate nested rules (link)
166,"
Support built-in variants for utilities that include pseudo-elements (#970)
Update several dependencies, including postcss-js which fixes an issue with using !important directly in Tailwind utility plugins
","Support built-in variants for utilities that include pseudo-elements (#970)
Update several dependencies, including postcss-js which fixes an issue with using !important directly in Tailwind utility plugins"
167,"
Increase precision of percentage width values to avoid 1px rounding issues in grid layouts (#961)
",Increase precision of percentage width values to avoid 1px rounding issues in grid layouts (#961)
168,"
Throws an error when someone tries to use @tailwind preflight instead of @tailwind base, this is the source of many support requests
","Throws an error when someone tries to use @tailwind preflight instead of @tailwind base, this is the source of many support requests"
169,"
Fixes a bug where @screen rules weren't bubbled properly when nested in plugins (#941)
",Fixes a bug where @screen rules weren't bubbled properly when nested in plugins (#941)
170,"
Fixes a bug where global variants weren't properly merged (#911)
",Fixes a bug where global variants weren't properly merged (#911)
171,,
172,"
Add bg-repeat-round and bg-repeat-space utilities (#879)
Add select-all and select-auto utilities (#885, https://github.com/tailwindcss/tailwindcss/commit/0fac54f8f11ddeb97ace42cd018d8bec603246b3)
Make all utilities responsive by default (#901)
","Add bg-repeat-round and bg-repeat-space utilities (#879)
Add select-all and select-auto utilities (#885, link)
Make all utilities responsive by default (#901)"
173,"
Use 9999 and -9999 for order-last and order-first utilities respectively (#906)
",Use 9999 and -9999 for order-last and order-first utilities respectively (#906)
174,"
Adds responsive variants for the new order utilities by default, should have been there all along
","Adds responsive variants for the new order utilities by default, should have been there all along"
175,"
Fixes a bug where you couldn't extend the margin config (https://github.com/tailwindcss/tailwindcss/commit/aac25d6a7af219d7221d06da3aa8b9e90557d48b)
",Fixes a bug where you couldn't extend the margin config (link)
176,"
Removed negativeMargin plugin, now the regular margin plugin supports generating negative classes (like -mx-6) by using negative keys in the config, like -6 (#865, upgrade guide)
Added support for negative inset (-top-6, -right-4) and z-index (-z-10) utilities, using the same negative key syntax supported by the margin plugin (#867, #875)
Add missing fractions as well as x/12 fractions to width scale (#646)
Add order utilities (#693)
Add cursor-text class by default (#795)
Make it possible to access your fully merged config file in JS (#877)
","Removed negativeMargin plugin, now the regular margin plugin supports generating negative classes (like -mx-6) by using negative keys in the config, like -6 (#865, upgrade guide)
Added support for negative inset (-top-6, -right-4) and z-index (-z-10) utilities, using the same negative key syntax supported by the margin plugin (#867, #875)
Add missing fractions as well as x/12 fractions to width scale (#646)
Add order utilities (#693)
Add cursor-text class by default (#795)
Make it possible to access your fully merged config file in JS (#877)"
177,"
Fix a bug where stroke and fill plugins didn't properly handle the next object syntax for color definitions (#821)
Fix a bug where you couldn't have comments near @apply directives (#847)
Make it possible to disable all core plugins using corePlugins: false (#849)
Make it possible to configure a single list of variants that applies to all utility plugins (#852)
Make it possible to whitelist which core plugins should be enabled (#853)
","Fix a bug where stroke and fill plugins didn't properly handle the next object syntax for color definitions (#821)
Fix a bug where you couldn't have comments near @apply directives (#847)
Make it possible to disable all core plugins using corePlugins: false (#849)
Make it possible to configure a single list of variants that applies to all utility plugins (#852)
Make it possible to whitelist which core plugins should be enabled (#853)"
178,"
Add the container key to the scaffolded config file when generated with --full (#792)
Fixes an issue where the user's config object was being mutated during processing (only affects @bradlc 😅)
Fixes an issue where you couldn't use a closure to define theme sections under extend (#803)
Removes SFMono-Regular from the beginning of the default monospace font stack, it has no italic support and Menlo looks better anyways (#805)
Bumps node dependency to 8.9.0 so we can keep our default config file clean, 6.9.0 is EOL next month anyways
","Add the container key to the scaffolded config file when generated with --full (#792)
Fixes an issue where the user's config object was being mutated during processing (only affects @bradlc 😅)
Fixes an issue where you couldn't use a closure to define theme sections under extend (#803)
Removes SFMono-Regular from the beginning of the default monospace font stack, it has no italic support and Menlo looks better anyways (#805)
Bumps node dependency to 8.9.0 so we can keep our default config file clean, 6.9.0 is EOL next month anyways"
179,"
Support lazy evaluation in theme.extend: #775 
Use lighter default border color: #780 
Revert #745 and use bolder for strong tags by default instead of fontWeight.bold: #782 
","Support lazy evaluation in theme.extend: #775 
Use lighter default border color: #780 
Revert #745 and use bolder for strong tags by default instead of fontWeight.bold: #782 "
180,"
Fix issue where @screen didn't work at all 🙃(#773)
Closures in the theme section of the config file are now passed a theme function instead of an object (#774)
","Fix issue where @screen didn't work at all 🙃(#773)
Closures in the theme section of the config file are now passed a theme function instead of an object (#774)"
181,"Tailwind CSS v1.0.0-beta.1
It's here! 🎉
This release of Tailwind focuses mostly on changing things from 0.x that I would have done differently had I known where the feature set would be at today in advance.
So while there's not a ton of exciting new features, you can at least be excited about the fact that we now have a really stable base to build on, and that very soon we'll be out of the unpredictable pre-1.0 phase so you can feel comfortable using Tailwind in production if the 0.x label gave you pause.
New features

New config file structure: https://github.com/tailwindcss/tailwindcss/pull/637, Sample
New expanded default color palette: https://github.com/tailwindcss/tailwindcss/pull/737
New default maxWidth scale: https://github.com/tailwindcss/tailwindcss/pull/701
Default variant output position can be customized: https://github.com/tailwindcss/tailwindcss/pull/657
Extended default line-height scale: https://github.com/tailwindcss/tailwindcss/pull/673
Extended default letter-spacing scale: https://github.com/tailwindcss/tailwindcss/pull/671
object-position utilities are now customizable under theme.objectPosition: https://github.com/tailwindcss/tailwindcss/pull/676
cursor utilities are now customizable under theme.cursors: https://github.com/tailwindcss/tailwindcss/pull/679
flex-grow/shrink utilities are now customizable under theme.flexGrow/flexShrink: https://github.com/tailwindcss/tailwindcss/pull/690
Added utilities for list-style-type and list-style-position: https://github.com/tailwindcss/tailwindcss/pull/761
Added break-all utility: https://github.com/tailwindcss/tailwindcss/pull/763

Updated documentation
The documentation is still very much a work-in-progress (half of it is probably broken), but you can see the v1.0 documentation in its current state here:
https://next.tailwindcss.com/docs/what-is-tailwind/
If you notice any stale content, a pull request would be awesome:
https://github.com/tailwindcss/docs
Make sure you target the next branch.
Upgrade guide
Note: Some things have changed in later beta releases. If you are upgrading to the latest beta and not specifically to beta.1, follow the upgrade guide that's in the documentation: https://next.tailwindcss.com/docs/upgrading-to-v1
Steps that impact all users:

Update Tailwind
Update your config file
Rename tailwind.js to tailwind.config.js
Replace @tailwind preflight with @tailwind base
Replace config() with theme()
Explicitly style any headings
Explicitly style any lists that should have bullets/numbers
Remove any usage of .list-reset
Replace .pin-{side} with .{top|left|bottom|right|inset}-{value}
Replace .roman with .not-italic
Replace .flex-no-grow/shrink with .flex-grow/shrink-0
Explicitly add color and underline styles to links
Add inline to any replaced elements (img, video, etc.) that should not be display: block
Adjust the line-height and padding on your form elements
Adjust the text color on your form elements
Double check your default font family
Double check your default line-height

Additional steps for CDN users, or anyone that has a true dependency on our default configuration either by omitting sections from their config file, referencing our config file, or not using a config file at all:

Update any usage of text/bg/border-{color} classes
Replace tracking-tight/wide with tracking-tighter/wider
Check your design against the updated default breakpoints
Double check any usage of the default shadow-{size} utilities
Update any usage of the default max-w-{size} utilities

Additional steps for plugin authors:

Escape the class portion of any custom variants you have created

All users

Update Tailwind
While v1.0 is still in a pre-release state, you can pull it in to your project using npm:
npm install tailwindcss@next --save-dev
Or using Yarn:
yarn add -D tailwindcss@next

Update your config file
Impact: All users, Effort: Moderate
This is really the big change in v1.0 — you can read all about the new config file format and motivation behind it in the initial pull request.
The new general config structure looks like this:
js
module.exports = {
  prefix: '',
  important: false,
  separator: ':',
  theme: {
    colors: { ... },
    // ...
    zIndex: { ... },
  },
  variants: {
    appearance: ['responsive'],
    // ...
    zIndex: ['responsive'],
  },
  plugins: [
    // ...
  ],
}
See the new default config file for a complete example.
There are a lot of changes here but they are all fairly cosmetic and entirely localized to this one file, so while it may look intimidating it's actually only 10-15 minutes of work.


Move all design-related top-level keys into a new section called theme.
Every key except options, modules, and plugins should be nested under a new theme key.
Your config file should look generally like this at this point:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
-   colors: colors,
-   screens: {
-     // ...
-   },
-   // ...
-   zIndex: {
-     // ...
-   },
+   theme: {
+     colors: colors,
+     screens: {
+       // ...
+     },
+     // ...
+     zIndex: {
+       // ...
+     },
+   },
    modules: {
      appearance: ['responsive'],
      // ...
      zIndex: ['responsive'],
    },
    plugins: [
      require('tailwindcss/plugins/container')({
        // ...
      }),
    ],
    options: {
      prefix: '',
      important: false,
      separator: ':',
    }
  }
```


Rename modules to variants.
""Modules"" was a word we just kinda grabbed because we needed something, and we wanted to use that section of the config to both specify variants and disable modules if necessary.
Now that all of Tailwind's internal ""modules"" are actually just core plugins, I've decided to deprecate this terminology entirely, and make this section of the config purely about configuring variants for core plugins.
After making this change, your config file should look like this:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
    theme: {
      // ...
    },
-   modules: {
+   variants: {
      appearance: ['responsive'],
      backgroundAttachment: ['responsive'],
      backgroundColors: ['responsive', 'hover', 'focus'],
      // ...
      zIndex: ['responsive'],
    },
    plugins: [
      require('tailwindcss/plugins/container')({
        // ...
      }),
    ],
    options: {
      prefix: '',
      important: false,
      separator: ':',
    }
  }
```


Move your options settings to the top-level.
The advanced options have been moved to the top-level of the config file instead of being nested under the redundant options key.
After making this change, your config file should look like this:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
+   prefix: '',
+   important: false,
+   separator: ':',
    theme: {
      // ...
    },
    variants: {
      appearance: ['responsive'],
      backgroundAttachment: ['responsive'],
      backgroundColors: ['responsive', 'hover', 'focus'],
      // ...
      zIndex: ['responsive'],
    },
    plugins: [
      require('tailwindcss/plugins/container')({
        // ...
      }),
    ],
-   options: {
-     prefix: '',
-     important: false,
-     separator: ':',
-   }
  }
```


Update the sections under theme to their new names.
As part of an effort to make the naming in the config file more consistent, many of the sections under theme have been renamed.
These are the sections that need to be updated:
| Old | New |
|---|---|
| fonts | fontFamily |
| textSizes | fontSize |
| fontWeights | fontWeight |
| leading | lineHeight |
| tracking | letterSpacing |
| textColors | textColor |
| backgroundColors | backgroundColor |
| borderWidths | borderWidth |
| borderColors | borderColor |
| shadows | boxShadow |
| svgFill | fill |
| svgStroke | stroke |
These names need to change in the variants section as well, so feel free to do a find and replace across the whole file.


Update the sections under variants to their new names.
As alluded to in the previous step, many of the sections under variants have been renamed as well.
These are the sections that need to be renamed (it is the same as the list above):
| Old | New |
|---|---|
| fonts | fontFamily |
| textSizes | fontSize |
| fontWeights | fontWeight |
| leading | lineHeight |
| tracking | letterSpacing |
| textColors | textColor |
| backgroundColors | backgroundColor |
| borderWidths | borderWidth |
| borderColors | borderColor |
| shadows | boxShadow |
| svgFill | fill |
| svgStroke | stroke |
Several sections under variants have also been split into multiple sections, for example lists has been split into listStylePosition and listStyleType:
```diff
  // ...
module.exports = {
    // ...
    variants: {
      // ...
-     lists: ['responsive'],
+     listStylePosition: ['responsive'],
+     listStyleType: ['responsive'],
    }
  }
```
Here is a complete list of the sections that been split into multiple sections:
| Old | New |
| --- | --- |
| flexbox | flexDirection, flexWrap, alignItems, alignSelf, justifyContent, alignContent, flex, flexGrow, flexShrink |
| lists | listStylePosition, listStyleType |
| position | position, inset |
| textStyle | fontStyle, fontSmoothing, textDecoration, textTransform |
| whitespace | whitespace, wordBreak |
Note that in some cases (position, whitespace) the original section still exists, while in others (flexbox, textStyle), the original section has been completely removed.
You should reference the new default config file if you are ever unsure if you are making the right changes.
The simplest way to make these changes is to just copy the value you were using for the old section (something like ['responsive']) to all of the new sections that replace that section, but if you choose you can also use this as an opportunity to cull generated utilities you don't actually need.
For example, if you never use the responsive variants of antialiased or subpixel-antialiased, you could set fontSmoothing to [] while still using ['responsive'] for fontStyle, textDecoration, and textTransform.


Add any disabled ~~modules~~ core plugins to corePlugins.
In v0.x, you could disable a ~~module~~ core plugin by setting it to false in what is now the variants section.
In v1.0, to disable a plugin you need to set it to false in the corePlugins section instead:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      // ...
    },
    variants: {
      // ...
-     float: false,
      // ...
    },
+   corePlugins: {
+     float: false,
+   },
    plugins: [
      require('tailwindcss/plugins/container')({
        // ...
      }),
    ],
  }
```
This change was made to make it possible to disable other core plugins where variants are irrelevant, like preflight or container (more on this later).


Remove the container plugin from plugins and move any configuration to theme.
In v1.0, the container plugin is a core plugin just like padding, margin, etc. and should not be listed in your plugins section:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      // ...
    },
    variants: {
      // ...
    },
    plugins: [
-     require('tailwindcss/plugins/container')({
-       center: true,
-       padding: '1rem',
-     }),
    ],
  }
```
If you had already removed the container plugin because you don't want those classes in your project, you should explicitly disable it using the corePlugins option:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      // ...
    },
    variants: {
      // ...
    },
+   corePlugins: {
+     container: false
+   },
  }
```
If you are taking advantage the center or padding options exposed by the container plugin, you should specify those options under theme.container instead of as direct arguments to the plugin.
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
    // ...
  }
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      // ...
+     container: {
+       center: true,
+       padding: '1rem',
+     }
    },
    variants: {
      // ...
    },
    plugins: [
-     require('tailwindcss/plugins/container')({
-       center: true,
-       padding: '1rem',
-     }),
-   ],
  }
```


Inline your colors variable into theme.colors.
In v1.0, it's possible to specify that parts of your theme depend on other parts of your theme, and because of that it's no longer necessary to hold your colors in a separate variable.
Start by inlining your colors variable directly into theme.colors:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()

let colors = {
'transparent': 'transparent',
'black': '#22292f',
// ...
'pink-lightest': '#ffebef','
}

module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
-     colors: colors,
+     colors: {
+       'transparent': 'transparent',
+       'black': '#22292f',
+       // ...
+       'pink-lightest': '#ffebef','
+     },
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
```
Next, update any sections that were referencing the colors variable using the new closure syntax:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      colors; {
        'transparent': 'transparent',
        'black': '#22292f',
        // ...
        'pink-lightest': '#ffebef','
      },
      // ...
-     backgroundColor: colors,
+     backgroundColor: theme => theme('colors'),
      // ...
-     textColor: colors,
+     textColor: theme => theme('colors'),
      // ...
-     borderColor: global.Object.assign({ default: colors['grey-light'] }, colors),
+     borderColor: theme => ({
+       default: theme('colors.grey-light'),
+       ...theme('colors'),
+     }),
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
```


Don't invoke the default config as a function.
In v0.x, require('tailwindcss/defaultConfig') returned a function that returned the default config when invoked.
In v1.0, it simply returns the object:
```diff
- let defaultConfig = require('tailwindcss/defaultConfig')()
+ let defaultConfig = require('tailwindcss/defaultConfig')
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
```


Remove any configuration you haven't customized.
One of the philosophical changes in v1.0 is that we are encouraging people to use their configuration files solely for specifying changes from the default config, rather than including the entire default config plus their changes.
Every single key in the config file is optional (in fact the file itself is optional too), so if there are things you've never customized, you're encouraged to remove them entirely.
For example, if you aren't specifying a custom separator or prefix or enabling the important option, you can remove them entirely:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')
module.exports = {
-   prefix: '',
-   important: false,
-   separator: ':',
    theme: {
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
```
Similarly, if you aren't referencing the defaultConfig variable anywhere, remove that too:
```diff
- let defaultConfig = require('tailwindcss/defaultConfig')
module.exports = {
    theme: {
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
```
If you haven't customized the opacity values, remove them:
diff
  module.exports = {
    theme: {
      // ...
-     opacity: {
-       '0': '0',
-       '25': '.25',
-       '50': '.5',
-       '75': '.75',
-       '100': '1',
-     },
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
We will not change any of this configuration outside of a major version bump, so you are totally safe to depend on inheriting the default values.
The way your configuration is merged with the defaults is designed to be very intuitive and mostly just work, but for the curious:

prefix is replaced
separator is replaced
important is replaced
theme is merged one level deep, so if you provide an object for theme.opacity it replaces the default theme.opacity object
variants is merged one level deep, so if you provide an array for variants.opacity it replaces the default variants.opacity object
plugins is merged, but the default is an empty array so it's really the same as replacing

It's worth noting that you are not required to remove any redundant configuration, so if you'd prefer to own the entire system and be able to see it all in one place, you're absolutely welcome to keep everything in your config file.
It's very important to realize that many of the theme values have changed from v0.7.4 to v1.0, so just because you never customized a value that shipped by default in v0.x, that doesn't guarantee that you are safe to remove it from your config file.
A perfect example of this is colors. The default color palette is completely new in v1.0 with a new naming scheme, so even if you were using the default color palette in v0.x, you're actually using a custom color palette in v1.0.
Always double check that anything you want to remove is identical to the new default config file values before you remove it.



Rename tailwind.js to tailwind.config.js
Impact: N/A, Effort: Trivial
This is entirely optional but recommended — if you are using the old default config file name (tailwind.js), rename it to tailwind.config.js.
If you use that file name and keep the file in the root of your project, Tailwind will pick up your config file by default without having to specify the path in your build scripts/configuration.
Here's an example of what I mean using Laravel Mix:
diff
  mix.postCss('resources/css/app.css', 'public/css/app.css', [
-     require('tailwindcss')('./tailwind.js'),
+     require('tailwindcss'),
    ])
If you keep your config file in a different folder, you'll still need to provide the path:
diff
  mix.postCss('resources/css/app.css', 'public/css/app.css', [
-     require('tailwindcss')('./resources/tailwind.js'),
+     require('tailwindcss')('./resources/tailwind.config.js'),
    ])

Replace @tailwind preflight with @tailwind base
Impact: All users, Effort: Trivial
One of the new features in v1.0 is the ability for plugins to register base styles. As a result, our preflight styles are actually just another core plugin now, and the general ""bucket"" for base styles has been renamed from preflight to base.
Replace any instance of @tailwind preflight in your CSS files with @tailwind base:
```diff
- @tailwind preflight;
+ @tailwind base;
@tailwind components;
@tailwind utilities;
```
If you are using postcss-import and relying on our imports instead of the @tailwind directive, replace @import ""tailwindcss/preflight"" with @import ""tailwindcss/base"":
```diff
- @import ""tailwindcss/preflight"";
+ @import ""tailwindcss/base"";
@import ""tailwindcss/components"";
@import ""tailwindcss/utilities"";
```

Replace config() with theme()
Impact: Moderate, Effort: Low
The config() helper function that Tailwind makes available to your CSS files has been replaced with a new theme() function that is automatically scoped to the theme section of your config file and should work as a drop-in replacement:
diff
  .btn {
-   padding: config('padding.3');
+   padding: theme('padding.3');
    // ...
  }
A simple find and replace across your CSS files that switches config( to theme( should do it.

Explicitly style any headings
Impact: Moderate, Effort: Moderate
If you are using our preflight styles, all h1-h6 elements are unstyled by default in v1.0.
That means that out of the box, they all have a font-size of 1em (whatever the parent font size is) and a font-weight of inherit, so they look exactly like a p tag.
This might sound dumb at first, but in web application development it's very common for some piece of text to be a heading semantically, but actually be styled in a much less ""in your face"" way because it's meant to look more like a subtle label on a section of UI.
By using the user agent styles for headings, we also made it far too easy to accidentally deviate from your own design system. If the browser says that an h1 should be 2em, it could compute to a size that isn't part of your fontSize scale.
By unstyling headings by default, we make it a lot easier to avoid this pitfall by ensuring that any size or weight you set is explicit and intentional.
This change might not affect you at all if you are already specifying a font-weight and font-size on all your headings, but if you aren't, you just need to assign an explicit size and weight wherever it's missing:
diff
- <h1>Manage Account<h1>
+ <h1 class=""text-xl font-semibold"">Manage Account<h1>
The exact changes you need to make will be highly specific to what you want to accomplish with your design, so you'll have to assess each situation independently.
This is a bit of an annoying change, but if it breaks your site, you could argue that it's actually revealing bugs in your markup.

Explicitly style any lists that should have bullets/numbers
Impact: Moderate, Effort: Moderate
If you are using our preflight styles, all ul and ol elements are unstyled by default in v1.0.
That means if you have any lists that depend on the default browser styling (bullets/numbers and a bit of left padding), you need to explicitly style those lists using the new .list-disc/decimal utilities and the existing padding utilities:
diff
- <ul>
+ <ul class=""list-disc pl-4"">
    <!-- ... -->
  </ul>
If you really don't want to do this manually and would prefer that lists be styled by default, you can override our base styles with your own custom CSS by adding a couple of rules like this:
```css
@tailwind base;
ul {
  list-style-type: disc;
  padding-left: theme('padding.4');
}
ol {
  list-style-type: decimal;
  padding-left: theme('padding.4');
}
@tailwind components;
@tailwind utilities;
```

Remove any usage of .list-reset
Impact: Moderate, Effort: Low
Since lists are now unstyled by default, .list-reset has been removed. You technically don't need to change anything, but you're encouraged to remove any usage of it as it's now just dead code:
diff
- <ul class=""list-reset""><!-- ... --></ul>
+ <ul><!-- ... --></ul>
If you chose override our base styles and give lists a default style, you can use the new .list-none utility as well as .p-0 as a replacement for .list-reset to remove that base styling as needed:
diff
- <ul class=""list-reset""><!-- ... --></ul>
+ <ul class=""list-none p-0""><!-- ... --></ul>
Again, if you are using our preflight styles unmodified (you probably are), you can simply remove list-reset from your markup and nothing will change.
This change only really affects you if you are not using our preflight styles, or overriding our global list reset.

Replace .pin-{side} with .{top|left|bottom|right|inset}-{value}
Impact: High, Effort: Moderate
Utilities like .pin, .pin-x, and .pin-t have been removed in favor of less cleverly named classes like .top-0, .right-0, etc.
See the pull request for more details on the motivation behind this change.
Here is a complete list of the changes:
| Old | New |
| --- | --- |
| .pin-none  | .inset-auto  |
| .pin  | .inset-0  |
| .pin-y  | .inset-y-0  |
| .pin-x  | .inset-x-0  |
| .pin-t  | .top-0  |
| .pin-r  | .right-0  |
| .pin-b  | .bottom-0  |
| .pin-l  | .left-0  |
Six new classes have been added as well:
| Class |
| --- |
| .inset-y-auto  |
| .inset-x-auto  |
| .top-auto  |
| .right-auto  |
| .bottom-auto  |
| .left-auto  |
These are all now customizable in theme.inset too, whereas the pin-{side} utilities were not.
This is an annoying change, sorry.

Replace .roman with .not-italic
Impact: Low, Effort: Low
Previously we used the name .roman for font-style: normal because of a bug in postcss-selector-not that prevented us from using .not-italic. That bug has been fixed, so this name has been changed.
diff
- <div class=""roman"">
+ <div class=""not-italic"">
    <!-- ... -->
  </div>
I would be surprised if more than 5 people are even affected by this, I've never used this class once myself.

Replace .flex-no-grow/shrink with .flex-grow/shrink-0
Impact: High, Effort: Low
In order to make these utilities more easily customizable, their names have changed to match our existing conventions.
```diff
- 
+ 
 ... 




 ... 

```

These utilities are also now customizable in the theme.flexGrow and theme.flexShrink sections of your config file.

Explicitly add color and underline styles to links
Impact: High, Effort: Moderate
In v1.0, a tags automatically inherit the parent color and text-decoration styles which means that by default links are no longer blue and do not have an underline.
You are likely already adding a text color class like text-green-dark or similar to your links because you probably didn't want the default browser-blue color, but if not you'll need to add a color explicitly:
diff
- <a href=""#"">
+ <a href=""#"" class=""text-blue"">
    <!-- ... -->
  </a
Similarly, if you have any links that need underlines, you'll have to add them manually:
diff
- <a href=""#"">
+ <a href=""#"" class=""underline"">
    <!-- ... -->
  </a
On the flip side, if you are using no-underline in a million places across your project just to unstyle links, you can now safely remove that class:
diff
- <a href=""#"" class=""no-underline"">
+ <a href=""#"">
    <!-- ... -->
  </a
If you really don't like these new defaults, you can add your own base link styles after @tailwind base:
```css
@tailwind base;
a {
  color: theme('colors.blue');
  text-decoration: underline;
}
@tailwind components;
@tailwind utilities;
```

Add inline to any replaced elements (img, video, etc.) that should not be display: block
Impact: Moderate, Effort: Moderate
In v1.0, all replaced elements (like img, svg, video, canvas, iframe, etc.) are set to display: block by default. This is counter to the browser default which is inline.
If you have any instances in your project where you actually want these elements to be inline, you'll need to add that class:
diff
  <span>
-   <img src=""..."" class=""h-4 w-4"">
+   <img src=""..."" class=""h-4 w-4 inline"">
    Manage
  </span>
I don't think this will actually affect many people or projects, as you almost always want these elements to be block or you have them nested inside a flex container where it doesn't matter.

Adjust the line-height and padding on your form elements
Impact: High, Effort: Moderate
If you are already setting an explicit line-height on form elements, this change will not affect you.
In v0.x, we used a line-height of 1.15 for form elements by default, sort of incidentally by depending on normalize.css.
This made it very easy to forget to add an explicit line-height like leading-tight or leading-normal to form elements, introducing a new line-height (1.15) into your project that doesn't match any of the leading-{size} utilities.
In v1.0, all form elements use a value of inherit for their line-height, so the line-height will match the parent element by default.
That means if you had some markup like this:
```html

 ... 


```
...your input element will be slightly taller in v1.0 because the line-height has increased from 1.15 to 1.5.
You can fix this by adjusting any vertical padding to account for the new line-height, and optionally adding an explicit leading-{size} class if you don't want to match the line-height of the parent:
```diff


 ... 
-   
+   

```
You might not get the exact same height you had before, but that's likely because the old height was some weird fractional number like 42.4px (line-height of 1.15 * font-size of 16px + 24px of padding). With the new system you are much more likely to land on reasonable whole numbers, like 40px of 44px, depending on your chosen line-height and padding values.
If you really want to use 1.15 as your default line-height for form elements (I would recommend against it), you can add a rule like this to your own base styles:
```css
@tailwind base;
button,
input,
optgroup,
select,
textarea {
  line-height: 1.15;
}
@tailwind components;
@tailwind utilities;
```

Adjust the text color on your form elements
Impact: Low, Effort: Moderate
If you are already setting an explicit text color on form elements, this change will not affect you.
In v0.x, form elements used black text by default, even though true black was not part of the default color palette.
In v1.0, form elements inherit their text color from the parent, which means if you have any markup like this:
```html



```
...your input would have red text instead of black text.
You can fix this by setting a text color on form elements explicitly:
```diff


-   
+   

```

Double check your default font family
Impact: Low, Effort: Trivial
If you are already setting a default font family on your project (either with a class on html/body or using custom CSS), this change will not affect you.
In v1.0, the default font family has changed from sans-serif to our system font stack.
It's very unlikely that you weren't already overriding this with your own font, but if not you'll notice your site looks a bit different, and honestly probably better.
You don't really have to change anything unless for some unexplainable reason you want to use sans-serif as your default font family, in which case you can add a rule to your base styles:
```css
@tailwind base;
html {
  font-family: sans-serif;
}
@tailwind components;
@tailwind utilities;
```

Double check your default line-height
Impact: Moderate, Effort: Moderate
If you are already setting a default line-height on your project (either with a class on html/body or using custom CSS), this change will not affect you.
In v0.x, the default line-height was 1.15 (inherited from normalize.css). Since that value isn't part of Tailwind's default theme, we've opted to change it to 1.5 for v1.0 so the default line-height matches a value in the line-height scale.
This means that if you are not setting a line-height either using a leading-{size} class on the html or body tags or by adding some base styles to your CSS, most things on your site are going to appear a little bit taller.
The easiest solution is to reset the line-height to 1.15 by default:
```css
@tailwind base;
html {
  line-height: 1.15;
}
@tailwind components;
@tailwind utilities;
```
However, a better long-term solution would be to pick a default line-height that matches a value in your line-height scale, and audit your site to find situations where it makes the design look worse and tweak those one at a time.
Additional steps for CDN users, or others without a config file

Update any usage of text/bg/border-{color} classes
Impact: Low, Effort: High
This change only affects you if you don't have a color palette defined in your config file or you are using Tailwind through a CDN.
Tailwind v1.0 comes with an entirely new color palette that provides 9 shades for each color instead of 7 (#737).
The naming scheme has changed from using words like darkest and lighter to a numeric scaled inspired by Material Design that starts at 100 for the lightest shade and ends at 900 for the darkest shade.
There is no way to map the old colors to the new colors 1:1 because the new palette includes more shades, so if you are using the v0.x default color palette and would like to upgrade to the new color palette, you are in for some fun (you're not).
I would recommend starting with the following substitutions and then adjusting colors up or down a shade on a case-by-case basis as you feel is needed.
For greys (note that grey has changed to gray 🇺🇸):
| Old | New |
| --- | --- |
| black | gray-900 |
| grey-darkest | gray-800 |
| grey-darker | gray-700 | 
| grey-dark | gray-600 | 
| grey | gray-500 |
| grey-light | gray-400 | 
| grey-lighter | gray-200 |
| grey-lightest | gray-100 |
For other colors:
| Old | New |
| --- | --- |
| {color}-darkest | {color}-900 |
| {color}-darker | {color}-800 | 
| {color}-dark | {color}-600 | 
| {color} | {color}-500 |
| {color}-light | {color}-400 | 
| {color}-lighter | {color}-200 |
| {color}-lightest | {color}-100 |
Again, this change only affects you if you do not have your own color palette specified in your config file, or you are using the default Tailwind build through a CDN. If you are using the v0.x color palette in your project, you can absolutely keep using it. You do not need to make these changes unless you have a hard dependency on our default color palette in some way.

Replace tracking-tight/wide with tracking-tighter/wider
Impact: Low, Effort: Low
This change only affects you if you don't have a tracking/letter-spacing scale defined in your config file or you are using Tailwind through a CDN.
In v1.0, the default letter-spacing scale has changed:
diff
 letterSpacing: {
+  tighter: -.05em,
-  tight: -.05em,
+  tight: -.025em,
   normal: 0,
-  wide: .05em,
+  wide: .025em,
+  wider: .05em,
+  widest: .1em,
 }
That means that if you want your project to look the same, you'll want to replace any existing occurrences of tracking-tight with tracking-tighter, and tracking-wide with tracking-wider.
Again, this only applies if you do not have a letter-spacing scale defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old scale will continue to work the same way in v1.0 and you don't need to make any changes.

Check your design against the updated default breakpoints
Impact: Low, Effort: Low
This change only affects you if you don't have screens defined in your config file or you are using Tailwind through a CDN.
The default breakpoints have changed a bit in v1.0:
| Screen | Old | New |
| --- | --- | --- |
| sm | 576px | 640px |
| md | 768px | 768px (unchanged) |
| lg | 992px | 1024px |
| xl | 1200px | 1280px |
If your config file doesn't have any screens defined or you are using the default Tailwind build through a CDN, you'll want to audit your design and make sure that nothing breaks because of these changes. No breakpoints got smaller so you are very unlikely to run into any issues, but it's worth checking either way.
Again, this only applies if you do not have any screens defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old screens values will continue to work the same way in v1.0 and you don't need to make any changes.

Double check any usage of the default shadow-{size} utilities
Impact: Low, Effort: Low
This change only affects you if you don't have a box-shadow scale defined in your config file or you are using Tailwind through a CDN.
Tailwind v1.0 introduces two new box-shadow sizes (xl, and 2xl) and the rest of the shadows have been adjusted as well (#691).
If your config file doesn't have a box-shadow scale defined or you are using the default Tailwind build through a CDN, you should double check that you are still happy with how your shadows look. You may want to replace some instances of lg with xl or 2xl, as the new lg shadow is a bit tighter than the old one.
Again, this only applies if you do not have a box-shadow defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old box-shadow values will continue to work the same way in v1.0 and you don't need to make any changes.

Update any usage of the default max-w-{size} utilities
Impact: Low, Effort: Low
This change only affects you if you don't have a max-width scale defined in your config file or you are using Tailwind through a CDN.
Tailwind v1.0 introduces an all-new max-width scale that is much more usable than the previous default max-width scale (#701).
If your config file doesn't have a box-shadow scale defined or you are using the default Tailwind build through a CDN, you should audit your project for any usage of the existing max-w-{size} utilities and change the sizes as needed. In general, the new values are smaller than the old ones, so max-w-md for example may need to be max-w-xl or max-w-2xl in the new scale
Again, this only applies if you do not have a max-width defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old max-width values will continue to work the same way in v1.0 and you don't need to make any changes.
Additional steps for plugin authors

Escape the class portion of any custom variants you have created
Impact: Low, Effort: Low
In v1.0, you are required to manually escape the class name portion of any selectors you create when adding a new variant using a plugin.
For example:
diff
- function({ addVariant }) {
+ function({ addVariant, e }) {
    addVariant('first-child', ({ modifySelectors, separator }) => {
      modifySelectors(({ className }) => {
-       return `.first-child${separator}${className}:first-child`
+       return `.${e(`first-child${separator}${className}`)}:first-child`
      })
    })
  },
This is just like what you need to do when adding utilities or components that may include user-provided strings.
Unfortunately there is no super simple way to support both v0.x and v1.0 at the same time without checking which version of Tailwind the user has installed and conditionally applying the escape function.","Tailwind CSS v1.0.0-beta.1
It's here! 🎉
This release of Tailwind focuses mostly on changing things from 0.x that I would have done differently had I known where the feature set would be at today in advance.
So while there's not a ton of exciting new features, you can at least be excited about the fact that we now have a really stable base to build on, and that very soon we'll be out of the unpredictable pre-1.0 phase so you can feel comfortable using Tailwind in production if the 0.x label gave you pause.
New features
New config file structure: link, Sample
New expanded default color palette: link
New default maxWidth scale: link
Default variant output position can be customized: link
Extended default line-height scale: link
Extended default letter-spacing scale: link
object-position utilities are now customizable under theme.objectPosition: link
cursor utilities are now customizable under theme.cursors: link
flex-grow/shrink utilities are now customizable under theme.flexGrow/flexShrink: link
Added utilities for list-style-type and list-style-position: link
Added break-all utility: link
Updated documentation
The documentation is still very much a work-in-progress (half of it is probably broken), but you can see the v1.0 documentation in its current state here:
link/
If you notice any stale content, a pull request would be awesome:
link
Make sure you target the next branch.
Upgrade guide
Note: Some things have changed in later beta releases. If you are upgrading to the latest beta and not specifically to beta.1, follow the upgrade guide that's in the documentation: link
Steps that impact all users:
Update Tailwind
Update your config file
Rename tailwind.js to tailwind.config.js
Replace @tailwind preflight with @tailwind base
Replace config() with theme()
Explicitly style any headings
Explicitly style any lists that should have bullets/numbers
Remove any usage of .list-reset
Replace .pin-{side} with .{top|left|bottom|right|inset}-{value}
Replace .roman with .not-italic
Replace .flex-no-grow/shrink with .flex-grow/shrink-0
Explicitly add color and underline styles to links
Add inline to any replaced elements (img, video, etc.) that should not be display: block
Adjust the line-height and padding on your form elements
Adjust the text color on your form elements
Double check your default font family
Double check your default line-height
Additional steps for CDN users, or anyone that has a true dependency on our default configuration either by omitting sections from their config file, referencing our config file, or not using a config file at all:
Update any usage of text/bg/border-{color} classes
Replace tracking-tight/wide with tracking-tighter/wider
Check your design against the updated default breakpoints
Double check any usage of the default shadow-{size} utilities
Update any usage of the default max-w-{size} utilities
Additional steps for plugin authors:
Escape the class portion of any custom variants you have created
All users
Update Tailwind
While v1.0 is still in a pre-release state, you can pull it in to your project using npm:
npm install tailwindcss@next --save-dev
Or using Yarn:
yarn add -D tailwindcss@next
Update your config file
Impact: All users, Effort: Moderate
This is really the big change in v1.0 — you can read all about the new config file format and motivation behind it in the initial pull request.
The new general config structure looks like this:
js
module.exports = {
  prefix: '',
  important: false,
  separator: ':',
  theme: {
    colors: { ... },
    // ...
    zIndex: { ... },
  },
  variants: {
    appearance: ['responsive'],
    // ...
    zIndex: ['responsive'],
  },
  plugins: [
    // ...
  ],
}
See the new default config file for a complete example.
There are a lot of changes here but they are all fairly cosmetic and entirely localized to this one file, so while it may look intimidating it's actually only 10-15 minutes of work.
Move all design-related top-level keys into a new section called theme.
Every key except options, modules, and plugins should be nested under a new theme key.
Your config file should look generally like this at this point:
module
Rename modules to variants.
""Modules"" was a word we just kinda grabbed because we needed something, and we wanted to use that section of the config to both specify variants and disable modules if necessary.
Now that all of Tailwind's internal ""modules"" are actually just core plugins, I've decided to deprecate this terminology entirely, and make this section of the config purely about configuring variants for core plugins.
After making this change, your config file should look like this:
module
Move your options settings to the top-level.
The advanced options have been moved to the top-level of the config file instead of being nested under the redundant options key.
After making this change, your config file should look like this:
module
Update the sections under theme to their new names.
As part of an effort to make the naming in the config file more consistent, many of the sections under theme have been renamed.
These are the sections that need to be updated:
| Old | New |
|---|---|
| fonts | fontFamily |
| textSizes | fontSize |
| fontWeights | fontWeight |
| leading | lineHeight |
| tracking | letterSpacing |
| textColors | textColor |
| backgroundColors | backgroundColor |
| borderWidths | borderWidth |
| borderColors | borderColor |
| shadows | boxShadow |
| svgFill | fill |
| svgStroke | stroke |
These names need to change in the variants section as well, so feel free to do a find and replace across the whole file.
Update the sections under variants to their new names.
As alluded to in the previous step, many of the sections under variants have been renamed as well.
These are the sections that need to be renamed (it is the same as the list above):
| Old | New |
|---|---|
| fonts | fontFamily |
| textSizes | fontSize |
| fontWeights | fontWeight |
| leading | lineHeight |
| tracking | letterSpacing |
| textColors | textColor |
| backgroundColors | backgroundColor |
| borderWidths | borderWidth |
| borderColors | borderColor |
| shadows | boxShadow |
| svgFill | fill |
| svgStroke | stroke |
Several sections under variants have also been split into multiple sections, for example lists has been split into listStylePosition and listStyleType:
module
Here is a complete list of the sections that been split into multiple sections:
| Old | New |
| --- | --- |
| flexbox | flexDirection, flexWrap, alignItems, alignSelf, justifyContent, alignContent, flex, flexGrow, flexShrink |
| lists | listStylePosition, listStyleType |
| position | position, inset |
| textStyle | fontStyle, fontSmoothing, textDecoration, textTransform |
| whitespace | whitespace, wordBreak |
Note that in some cases (position, whitespace) the original section still exists, while in others (flexbox, textStyle), the original section has been completely removed.
You should reference the new default config file if you are ever unsure if you are making the right changes.
The simplest way to make these changes is to just copy the value you were using for the old section (something like ['responsive']) to all of the new sections that replace that section, but if you choose you can also use this as an opportunity to cull generated utilities you don't actually need.
For example, if you never use the responsive variants of antialiased or subpixel-antialiased, you could set fontSmoothing to [] while still using ['responsive'] for fontStyle, textDecoration, and textTransform.
Add any disabled ~~modules~~ core plugins to corePlugins.
In v0.x, you could disable a ~~module~~ core plugin by setting it to false in what is now the variants section.
In v1.0, to disable a plugin you need to set it to false in the corePlugins section instead:
module
This change was made to make it possible to disable other core plugins where variants are irrelevant, like preflight or container (more on this later).
Remove the container plugin from plugins and move any configuration to theme.
In v1.0, the container plugin is a core plugin just like padding, margin, etc. and should not be listed in your plugins section:
module
If you had already removed the container plugin because you don't want those classes in your project, you should explicitly disable it using the corePlugins option:
module
If you are taking advantage the center or padding options exposed by the container plugin, you should specify those options under theme.container instead of as direct arguments to the plugin.
module
Inline your colors variable into theme.colors.
In v1.0, it's possible to specify that parts of your theme depend on other parts of your theme, and because of that it's no longer necessary to hold your colors in a separate variable.
Start by inlining your colors variable directly into theme.colors:
```diff
  let defaultConfig = require('tailwindcss/defaultConfig')()
let colors = {
'transparent': 'transparent',
'black': '#22292f',
// ...
'pink-lightest': '#ffebef','
}
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
-     colors: colors,
+     colors: {
+       'transparent': 'transparent',
+       'black': '#22292f',
+       // ...
+       'pink-lightest': '#ffebef','
+     },
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
modulediff
  let defaultConfig = require('tailwindcss/defaultConfig')()
module.exports = {
    prefix: '',
    important: false,
    separator: ':',
    theme: {
      colors; {
        'transparent': 'transparent',
        'black': '#22292f',
        // ...
        'pink-lightest': '#ffebef','
      },
      // ...
-     backgroundColor: colors,
+     backgroundColor: theme => theme('colors'),
      // ...
-     textColor: colors,
+     textColor: theme => theme('colors'),
      // ...
-     borderColor: global.Object.assign({ default: colors['grey-light'] }, colors),
+     borderColor: theme => ({
+       default: theme('colors.grey-light'),
+       ...theme('colors'),
+     }),
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
```
Don't invoke the default config as a function.
In v0.x, require('tailwindcss/defaultConfig') returned a function that returned the default config when invoked.
In v1.0, it simply returns the object:
module
Remove any configuration you haven't customized.
One of the philosophical changes in v1.0 is that we are encouraging people to use their configuration files solely for specifying changes from the default config, rather than including the entire default config plus their changes.
Every single key in the config file is optional (in fact the file itself is optional too), so if there are things you've never customized, you're encouraged to remove them entirely.
For example, if you aren't specifying a custom separator or prefix or enabling the important option, you can remove them entirely:
module
Similarly, if you aren't referencing the defaultConfig variable anywhere, remove that too:
module
If you haven't customized the opacity values, remove them:
diff
  module.exports = {
    theme: {
      // ...
-     opacity: {
-       '0': '0',
-       '25': '.25',
-       '50': '.5',
-       '75': '.75',
-       '100': '1',
-     },
      // ...
    },
    variants: {
      // ...
    },
    plugins: [],
  }
We will not change any of this configuration outside of a major version bump, so you are totally safe to depend on inheriting the default values.
The way your configuration is merged with the defaults is designed to be very intuitive and mostly just work, but for the curious:
prefix is replaced
separator is replaced
important is replaced
theme is merged one level deep, so if you provide an object for theme.opacity it replaces the default theme.opacity object
variants is merged one level deep, so if you provide an array for variants.opacity it replaces the default variants.opacity object
plugins is merged, but the default is an empty array so it's really the same as replacing
It's worth noting that you are not required to remove any redundant configuration, so if you'd prefer to own the entire system and be able to see it all in one place, you're absolutely welcome to keep everything in your config file.
It's very important to realize that many of the theme values have changed from v0.7.4 to v1.0, so just because you never customized a value that shipped by default in v0.x, that doesn't guarantee that you are safe to remove it from your config file.
A perfect example of this is colors. The default color palette is completely new in v1.0 with a new naming scheme, so even if you were using the default color palette in v0.x, you're actually using a custom color palette in v1.0.
Always double check that anything you want to remove is identical to the new default config file values before you remove it.
Rename tailwind.js to tailwind.config.js
Impact: N/A, Effort: Trivial
This is entirely optional but recommended — if you are using the old default config file name (tailwind.js), rename it to tailwind.config.js.
If you use that file name and keep the file in the root of your project, Tailwind will pick up your config file by default without having to specify the path in your build scripts/configuration.
Here's an example of what I mean using Laravel Mix:
diff
  mix.postCss('resources/css/app.css', 'public/css/app.css', [
-     require('tailwindcss')('./tailwind.js'),
+     require('tailwindcss'),
    ])
If you keep your config file in a different folder, you'll still need to provide the path:
diff
  mix.postCss('resources/css/app.css', 'public/css/app.css', [
-     require('tailwindcss')('./resources/tailwind.js'),
+     require('tailwindcss')('./resources/tailwind.config.js'),
    ])
Replace @tailwind preflight with @tailwind base
Impact: All users, Effort: Trivial
One of the new features in v1.0 is the ability for plugins to register base styles. As a result, our preflight styles are actually just another core plugin now, and the general ""bucket"" for base styles has been renamed from preflight to base.
Replace any instance of @tailwind preflight in your CSS files with @tailwind base:
module
If you are using postcss-import and relying on our imports instead of the @tailwind directive, replace @import ""tailwindcss/preflight"" with @import ""tailwindcss/base"":
module
Replace config() with theme()
Impact: Moderate, Effort: Low
The config() helper function that Tailwind makes available to your CSS files has been replaced with a new theme() function that is automatically scoped to the theme section of your config file and should work as a drop-in replacement:
diff
  .btn {
-   padding: config('padding.3');
+   padding: theme('padding.3');
    // ...
  }
A simple find and replace across your CSS files that switches config( to theme( should do it.
Explicitly style any headings
Impact: Moderate, Effort: Moderate
If you are using our preflight styles, all h1-h6 elements are unstyled by default in v1.0.
That means that out of the box, they all have a font-size of 1em (whatever the parent font size is) and a font-weight of inherit, so they look exactly like a p tag.
This might sound dumb at first, but in web application development it's very common for some piece of text to be a heading semantically, but actually be styled in a much less ""in your face"" way because it's meant to look more like a subtle label on a section of UI.
By using the user agent styles for headings, we also made it far too easy to accidentally deviate from your own design system. If the browser says that an h1 should be 2em, it could compute to a size that isn't part of your fontSize scale.
By unstyling headings by default, we make it a lot easier to avoid this pitfall by ensuring that any size or weight you set is explicit and intentional.
This change might not affect you at all if you are already specifying a font-weight and font-size on all your headings, but if you aren't, you just need to assign an explicit size and weight wherever it's missing:
diff
- Manage Account
+ Manage Account
The exact changes you need to make will be highly specific to what you want to accomplish with your design, so you'll have to assess each situation independently.
This is a bit of an annoying change, but if it breaks your site, you could argue that it's actually revealing bugs in your markup.
Explicitly style any lists that should have bullets/numbers
Impact: Moderate, Effort: Moderate
If you are using our preflight styles, all ul and ol elements are unstyled by default in v1.0.
That means if you have any lists that depend on the default browser styling (bullets/numbers and a bit of left padding), you need to explicitly style those lists using the new .list-disc/decimal utilities and the existing padding utilities:
diff
- 
+ 
 ... 

If you really don't want to do this manually and would prefer that lists be styled by default, you can override our base styles with your own custom CSS by adding a couple of rules like this:
module
Remove any usage of .list-reset
Impact: Moderate, Effort: Low
Since lists are now unstyled by default, .list-reset has been removed. You technically don't need to change anything, but you're encouraged to remove any usage of it as it's now just dead code:
diff
-  ... 
+  ... 
If you chose override our base styles and give lists a default style, you can use the new .list-none utility as well as .p-0 as a replacement for .list-reset to remove that base styling as needed:
diff
-  ... 
+  ... 
Again, if you are using our preflight styles unmodified (you probably are), you can simply remove list-reset from your markup and nothing will change.
This change only really affects you if you are not using our preflight styles, or overriding our global list reset.
Replace .pin-{side} with .{top|left|bottom|right|inset}-{value}
Impact: High, Effort: Moderate
Utilities like .pin, .pin-x, and .pin-t have been removed in favor of less cleverly named classes like .top-0, .right-0, etc.
See the pull request for more details on the motivation behind this change.
Here is a complete list of the changes:
| Old | New |
| --- | --- |
| .pin-none  | .inset-auto  |
| .pin  | .inset-0  |
| .pin-y  | .inset-y-0  |
| .pin-x  | .inset-x-0  |
| .pin-t  | .top-0  |
| .pin-r  | .right-0  |
| .pin-b  | .bottom-0  |
| .pin-l  | .left-0  |
Six new classes have been added as well:
| Class |
| --- |
| .inset-y-auto  |
| .inset-x-auto  |
| .top-auto  |
| .right-auto  |
| .bottom-auto  |
| .left-auto  |
These are all now customizable in theme.inset too, whereas the pin-{side} utilities were not.
This is an annoying change, sorry.
Replace .roman with .not-italic
Impact: Low, Effort: Low
Previously we used the name .roman for font-style: normal because of a bug in postcss-selector-not that prevented us from using .not-italic. That bug has been fixed, so this name has been changed.
diff
- 
+ 
 ... 

I would be surprised if more than 5 people are even affected by this, I've never used this class once myself.
Replace .flex-no-grow/shrink with .flex-grow/shrink-0
Impact: High, Effort: Low
In order to make these utilities more easily customizable, their names have changed to match our existing conventions.
```diff
- 
+ 
 ... 
... 
```
These utilities are also now customizable in the theme.flexGrow and theme.flexShrink sections of your config file.
Explicitly add color and underline styles to links
Impact: High, Effort: Moderate
In v1.0, a tags automatically inherit the parent color and text-decoration styles which means that by default links are no longer blue and do not have an underline.
You are likely already adding a text color class like text-green-dark or similar to your links because you probably didn't want the default browser-blue color, but if not you'll need to add a color explicitly:
diff
- 
+ 
 ... 
  </a
Similarly, if you have any links that need underlines, you'll have to add them manually:
diff
- 
+ 
 ... 
  </a
On the flip side, if you are using no-underline in a million places across your project just to unstyle links, you can now safely remove that class:
diff
- 
+ 
 ... 
  </a
If you really don't like these new defaults, you can add your own base link styles after @tailwind base:
module
Add inline to any replaced elements (img, video, etc.) that should not be display: block
Impact: Moderate, Effort: Moderate
In v1.0, all replaced elements (like img, svg, video, canvas, iframe, etc.) are set to display: block by default. This is counter to the browser default which is inline.
If you have any instances in your project where you actually want these elements to be inline, you'll need to add that class:
diff
  
-   
+   
    Manage
  
I don't think this will actually affect many people or projects, as you almost always want these elements to be block or you have them nested inside a flex container where it doesn't matter.
Adjust the line-height and padding on your form elements
Impact: High, Effort: Moderate
If you are already setting an explicit line-height on form elements, this change will not affect you.
In v0.x, we used a line-height of 1.15 for form elements by default, sort of incidentally by depending on normalize.css.
This made it very easy to forget to add an explicit line-height like leading-tight or leading-normal to form elements, introducing a new line-height (1.15) into your project that doesn't match any of the leading-{size} utilities.
In v1.0, all form elements use a value of inherit for their line-height, so the line-height will match the parent element by default.
That means if you had some markup like this:
```html
... 
modulediff
...



modulecss
@tailwind base;
button,
input,
optgroup,
select,
textarea {
  line-height: 1.15;
}
@tailwind components;
@tailwind utilities;
```
Adjust the text color on your form elements
Impact: Low, Effort: Moderate
If you are already setting an explicit text color on form elements, this change will not affect you.
In v0.x, form elements used black text by default, even though true black was not part of the default color palette.
In v1.0, form elements inherit their text color from the parent, which means if you have any markup like this:
```html
modulediff




```
Double check your default font family
Impact: Low, Effort: Trivial
If you are already setting a default font family on your project (either with a class on html/body or using custom CSS), this change will not affect you.
In v1.0, the default font family has changed from sans-serif to our system font stack.
It's very unlikely that you weren't already overriding this with your own font, but if not you'll notice your site looks a bit different, and honestly probably better.
You don't really have to change anything unless for some unexplainable reason you want to use sans-serif as your default font family, in which case you can add a rule to your base styles:
module
Double check your default line-height
Impact: Moderate, Effort: Moderate
If you are already setting a default line-height on your project (either with a class on html/body or using custom CSS), this change will not affect you.
In v0.x, the default line-height was 1.15 (inherited from normalize.css). Since that value isn't part of Tailwind's default theme, we've opted to change it to 1.5 for v1.0 so the default line-height matches a value in the line-height scale.
This means that if you are not setting a line-height either using a leading-{size} class on the html or body tags or by adding some base styles to your CSS, most things on your site are going to appear a little bit taller.
The easiest solution is to reset the line-height to 1.15 by default:
module
However, a better long-term solution would be to pick a default line-height that matches a value in your line-height scale, and audit your site to find situations where it makes the design look worse and tweak those one at a time.
Additional steps for CDN users, or others without a config file
Update any usage of text/bg/border-{color} classes
Impact: Low, Effort: High
This change only affects you if you don't have a color palette defined in your config file or you are using Tailwind through a CDN.
Tailwind v1.0 comes with an entirely new color palette that provides 9 shades for each color instead of 7 (#737).
The naming scheme has changed from using words like darkest and lighter to a numeric scaled inspired by Material Design that starts at 100 for the lightest shade and ends at 900 for the darkest shade.
There is no way to map the old colors to the new colors 1:1 because the new palette includes more shades, so if you are using the v0.x default color palette and would like to upgrade to the new color palette, you are in for some fun (you're not).
I would recommend starting with the following substitutions and then adjusting colors up or down a shade on a case-by-case basis as you feel is needed.
For greys (note that grey has changed to gray 🇺🇸):
| Old | New |
| --- | --- |
| black | gray-900 |
| grey-darkest | gray-800 |
| grey-darker | gray-700 | 
| grey-dark | gray-600 | 
| grey | gray-500 |
| grey-light | gray-400 | 
| grey-lighter | gray-200 |
| grey-lightest | gray-100 |
For other colors:
| Old | New |
| --- | --- |
| {color}-darkest | {color}-900 |
| {color}-darker | {color}-800 | 
| {color}-dark | {color}-600 | 
| {color} | {color}-500 |
| {color}-light | {color}-400 | 
| {color}-lighter | {color}-200 |
| {color}-lightest | {color}-100 |
Again, this change only affects you if you do not have your own color palette specified in your config file, or you are using the default Tailwind build through a CDN. If you are using the v0.x color palette in your project, you can absolutely keep using it. You do not need to make these changes unless you have a hard dependency on our default color palette in some way.
Replace tracking-tight/wide with tracking-tighter/wider
Impact: Low, Effort: Low
This change only affects you if you don't have a tracking/letter-spacing scale defined in your config file or you are using Tailwind through a CDN.
In v1.0, the default letter-spacing scale has changed:
diff
 letterSpacing: {
+  tighter: -.05em,
-  tight: -.05em,
+  tight: -.025em,
   normal: 0,
-  wide: .05em,
+  wide: .025em,
+  wider: .05em,
+  widest: .1em,
 }
That means that if you want your project to look the same, you'll want to replace any existing occurrences of tracking-tight with tracking-tighter, and tracking-wide with tracking-wider.
Again, this only applies if you do not have a letter-spacing scale defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old scale will continue to work the same way in v1.0 and you don't need to make any changes.
Check your design against the updated default breakpoints
Impact: Low, Effort: Low
This change only affects you if you don't have screens defined in your config file or you are using Tailwind through a CDN.
The default breakpoints have changed a bit in v1.0:
| Screen | Old | New |
| --- | --- | --- |
| sm | 576px | 640px |
| md | 768px | 768px (unchanged) |
| lg | 992px | 1024px |
| xl | 1200px | 1280px |
If your config file doesn't have any screens defined or you are using the default Tailwind build through a CDN, you'll want to audit your design and make sure that nothing breaks because of these changes. No breakpoints got smaller so you are very unlikely to run into any issues, but it's worth checking either way.
Again, this only applies if you do not have any screens defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old screens values will continue to work the same way in v1.0 and you don't need to make any changes.
Double check any usage of the default shadow-{size} utilities
Impact: Low, Effort: Low
This change only affects you if you don't have a box-shadow scale defined in your config file or you are using Tailwind through a CDN.
Tailwind v1.0 introduces two new box-shadow sizes (xl, and 2xl) and the rest of the shadows have been adjusted as well (#691).
If your config file doesn't have a box-shadow scale defined or you are using the default Tailwind build through a CDN, you should double check that you are still happy with how your shadows look. You may want to replace some instances of lg with xl or 2xl, as the new lg shadow is a bit tighter than the old one.
Again, this only applies if you do not have a box-shadow defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old box-shadow values will continue to work the same way in v1.0 and you don't need to make any changes.
Update any usage of the default max-w-{size} utilities
Impact: Low, Effort: Low
This change only affects you if you don't have a max-width scale defined in your config file or you are using Tailwind through a CDN.
Tailwind v1.0 introduces an all-new max-width scale that is much more usable than the previous default max-width scale (#701).
If your config file doesn't have a box-shadow scale defined or you are using the default Tailwind build through a CDN, you should audit your project for any usage of the existing max-w-{size} utilities and change the sizes as needed. In general, the new values are smaller than the old ones, so max-w-md for example may need to be max-w-xl or max-w-2xl in the new scale
Again, this only applies if you do not have a max-width defined in your config file or if you are using the default Tailwind build through a CDN.
If you started with a complete config file, your old max-width values will continue to work the same way in v1.0 and you don't need to make any changes.
Additional steps for plugin authors
Escape the class portion of any custom variants you have created
Impact: Low, Effort: Low
In v1.0, you are required to manually escape the class name portion of any selectors you create when adding a new variant using a plugin.
For example:
diff
- function({ addVariant }) {
+ function({ addVariant, e }) {
    addVariant('first-child', ({ modifySelectors, separator }) => {
      modifySelectors(({ className }) => {
-       return module
+       return modulefirst-child${separator}${className}module
      })
    })
  },
This is just like what you need to do when adding utilities or components that may include user-provided strings.
Unfortunately there is no super simple way to support both v0.x and v1.0 at the same time without checking which version of Tailwind the user has installed and conditionally applying the escape function."
182,"
Update our PostCSS related dependencies (#618)
Fix bug where class names containing a . character had the responsive prefix added in the wrong place (#613)
","Update our PostCSS related dependencies (#618)
Fix bug where class names containing a . character had the responsive prefix added in the wrong place (#613)"
183,"
Update Normalize to v8.0.1 (#588)
",Update Normalize to v8.0.1 (#588)
184,"
Add --no-autoprefixer option to CLI build command (#584)
",Add --no-autoprefixer option to CLI build command (#584)
185,"
Update autoprefixer dependency (fixes #583)
",Update autoprefixer dependency (fixes #583)
186,"
New Features
Registering new variants from plugins
Variant order can be customized per module
Added focus-within variant
Fancy CLI updates
Option to generate config without comments
Make configured prefix optional when using @apply
Improve Flexbox behavior in IE 10/11


Changes
Variant order in modules is now significant
Normalize.css updated to v8.0.0
Removed CSS fix for Chrome 62 button border radius change




New Features

Registering new variants from plugins (#505)
(Introduced as an experiment in v0.6.2, now promoted to an official feature)
Plugins can now add their own variants (like hover, focus, group-hover, etc.) to Tailwind.
To get started, destructure the new addVariant function from the object passed to your plugin, and call it with the name of the variant you'd like to add and a callback that can be used to manipulate the PostCSS nodes where the variant is being applied:
js
module.exports = {
  plugins: [
    function({ addVariant }) {
      addVariant('important', ({ container }) => {
        container.walkRules(rule => {
          rule.selector = `.\\!${rule.selector.slice(1)}`
          rule.walkDecls(decl => {
            decl.important = true
          })
        })
      })
    }
  ]
}
Documentation is coming soon, but for now learn more in the pull request.

Variant order can be customized per module (#505)
(Introduced as an experiment in v0.6.2, now promoted to an official feature)
Variants are now generated in the order that they are specified in the modules section of your config file, rather than in a hard-coded static order like in previous versions of Tailwind.
That means that if you want focus variants to defeat hover variants for background colors, but you want the opposite behavior for border colors, you can actually do that now by specifying the order in your config:
js
modules.exports = {
  // ...
  modules: {
    // ...
    backgroundColors: ['responsive', 'hover', 'focus'],
    // ...
    borderColors: ['responsive', 'focus', 'hover'],
    // ...
  }
}
Note that this doesn't affect responsive variants — those are a special case since responsive versions are also generated for other variants, and we group responsive declarations to optimize the resulting CSS.

Added focus-within variant (#463)
Tailwind now includes a focus-within variant that you can use to change how an element is styled if an element inside of it has focus.
```html


Email



```
Learn about the :focus-within pseudo-class on MDN
By default we don't generate focus-within variants for any utilities, but you can change this in the modules section your Tailwind configuration file:
diff
  modules.exports = {
    // ...
    modules: {
      // ...
-     backgroundColors: ['responsive', 'hover', 'focus'],
+     backgroundColors: ['responsive', 'focus-within', 'hover', focus'],
      // ...
    }
  }

Fancy CLI updates (#554)
Tailwind 0.7.0 includes a completely rewritten CLI tool with nicer output and a better user experience.

All of the existing functionality is still there with the same API, it just looks better.

Option to generate config without comments (#558)
You can now use the --no-comments option when running tailwind init to generate a config file that excludes all of the inline documentation comments.
This is a great way to make your config file easier to skim if you're an experienced Tailwind user who doesn't need the comments.

Make configured prefix optional when using @apply (#553)
If you're prefixing your generated utilities, including that prefix when using @apply is now optional.
```css
/ Before /
.my-component {
  @apply tw-bg-blue tw-text-white tw-font-bold;
}
/ Now /
.my-component {
  @apply bg-blue text-white font-bold;
}
```
You can continue to use the prefix if you like, or drop it if you prefer a terser syntax.

Improve Flexbox behavior in IE 10/11 (#550)
IE 10 and 11 interpret the shorthand flex property differently than other browsers.
Tailwind now specifies explicit grow, shrink, and basis values for the flex-1, flex-auto, and flex-initial utilities for a more consistent cross-browser experience.
Learn more at the flexbugs repo (bugs #4 and #6 specifically)

Changes

Variant order in modules config is now significant (#505)
Impact: Low, Effort: Low
Prior to 0.7.0, variants were always generated in the same order, regardless of the order specified in the modules section of your config file.
Now, variants are generated in the they are specified. That means that if your config file currently lists variants in a different order than the <=0.6.6 default variant order, those variants will appear in a different order in your CSS.
To preserve the <=0.6.6 behavior, simply edit the modules section of your config file to make sure your variants are listed in the following order:
js
modules.exports = {
  // ...
  modules: {
    // ...
    [anyModule]: ['group-hover', 'hover', 'focus-within', 'focus', 'active']
    // ...
  }
}

Normalize.css updated to v8.0.0 (#537)
Impact: Low, Effort: Low
We've updated our dependency on Normalize.css from 7.0.0 to 8.0.0.
This drops support for very old browsers like IE9, Android 4.3, Safari 8, and iOS Safari 7-8.
If you still need to support those browsers, remove @tailwind preflight from your CSS, add Normalize.css 7.0.0 to your project, and manually add our additional preflight base styles.

Removed CSS fix for Chrome 62 button border radius change (#579)
Impact: Low, Effort: Low
When Chrome 62 was released, it introduced a user agent stylesheet change that added a default border radius to all buttons.
This messed up styles for like half of the internet (including sites like GitHub itself), so Chrome reverted the change in Chrome 63.
We included a fix for this in Tailwind with the intention to remove it when Chrome 62 was no longer in common use. Now that usage has dropped to 0.09%, we've removed our fix.
If this is a problem for you (it isn't), you can add the removed styles back to your project right after @tailwind preflight.","New Features
Registering new variants from plugins
Variant order can be customized per module
Added focus-within variant
Fancy CLI updates
Option to generate config without comments
Make configured prefix optional when using @apply
Improve Flexbox behavior in IE 10/11
Changes
Variant order in modules is now significant
Normalize.css updated to v8.0.0
Removed CSS fix for Chrome 62 button border radius change
New Features
Registering new variants from plugins (#505)
(Introduced as an experiment in v0.6.2, now promoted to an official feature)
Plugins can now add their own variants (like hover, focus, group-hover, etc.) to Tailwind.
To get started, destructure the new addVariant function from the object passed to your plugin, and call it with the name of the variant you'd like to add and a callback that can be used to manipulate the PostCSS nodes where the variant is being applied:
js
module.exports = {
  plugins: [
    function({ addVariant }) {
      addVariant('important', ({ container }) => {
        container.walkRules(rule => {
          rule.selector = module
          rule.walkDecls(decl => {
            decl.important = true
          })
        })
      })
    }
  ]
}
Documentation is coming soon, but for now learn more in the pull request.
Variant order can be customized per module (#505)
(Introduced as an experiment in v0.6.2, now promoted to an official feature)
Variants are now generated in the order that they are specified in the modules section of your config file, rather than in a hard-coded static order like in previous versions of Tailwind.
That means that if you want focus variants to defeat hover variants for background colors, but you want the opposite behavior for border colors, you can actually do that now by specifying the order in your config:
js
modules.exports = {
  // ...
  modules: {
    // ...
    backgroundColors: ['responsive', 'hover', 'focus'],
    // ...
    borderColors: ['responsive', 'focus', 'hover'],
    // ...
  }
}
Note that this doesn't affect responsive variants — those are a special case since responsive versions are also generated for other variants, and we group responsive declarations to optimize the resulting CSS.
Added focus-within variant (#463)
Tailwind now includes a focus-within variant that you can use to change how an element is styled if an element inside of it has focus.
```html
Email
```
Learn about the :focus-within pseudo-class on MDN
By default we don't generate focus-within variants for any utilities, but you can change this in the modules section your Tailwind configuration file:
diff
  modules.exports = {
    // ...
    modules: {
      // ...
-     backgroundColors: ['responsive', 'hover', 'focus'],
+     backgroundColors: ['responsive', 'focus-within', 'hover', focus'],
      // ...
    }
  }
Fancy CLI updates (#554)
Tailwind 0.7.0 includes a completely rewritten CLI tool with nicer output and a better user experience.
All of the existing functionality is still there with the same API, it just looks better.
Option to generate config without comments (#558)
You can now use the --no-comments option when running tailwind init to generate a config file that excludes all of the inline documentation comments.
This is a great way to make your config file easier to skim if you're an experienced Tailwind user who doesn't need the comments.
Make configured prefix optional when using @apply (#553)
If you're prefixing your generated utilities, including that prefix when using @apply is now optional.
module
You can continue to use the prefix if you like, or drop it if you prefer a terser syntax.
Improve Flexbox behavior in IE 10/11 (#550)
IE 10 and 11 interpret the shorthand flex property differently than other browsers.
Tailwind now specifies explicit grow, shrink, and basis values for the flex-1, flex-auto, and flex-initial utilities for a more consistent cross-browser experience.
Learn more at the flexbugs repo (bugs #4 and #6 specifically)
Changes
Variant order in modules config is now significant (#505)
Impact: Low, Effort: Low
Prior to 0.7.0, variants were always generated in the same order, regardless of the order specified in the modules section of your config file.
Now, variants are generated in the they are specified. That means that if your config file currently lists variants in a different order than the <=0.6.6 default variant order, those variants will appear in a different order in your CSS.
To preserve the <=0.6.6 behavior, simply edit the modules section of your config file to make sure your variants are listed in the following order:
js
modules.exports = {
  // ...
  modules: {
    // ...
    [anyModule]: ['group-hover', 'hover', 'focus-within', 'focus', 'active']
    // ...
  }
}
Normalize.css updated to v8.0.0 (#537)
Impact: Low, Effort: Low
We've updated our dependency on Normalize.css from 7.0.0 to 8.0.0.
This drops support for very old browsers like IE9, Android 4.3, Safari 8, and iOS Safari 7-8.
If you still need to support those browsers, remove @tailwind preflight from your CSS, add Normalize.css 7.0.0 to your project, and manually add our additional preflight base styles.
Removed CSS fix for Chrome 62 button border radius change (#579)
Impact: Low, Effort: Low
When Chrome 62 was released, it introduced a user agent stylesheet change that added a default border radius to all buttons.
This messed up styles for like half of the internet (including sites like GitHub itself), so Chrome reverted the change in Chrome 63.
We included a fix for this in Tailwind with the intention to remove it when Chrome 62 was no longer in common use. Now that usage has dropped to 0.09%, we've removed our fix.
If this is a problem for you (it isn't), you can add the removed styles back to your project right after @tailwind preflight."
187,"
Promote shadowLookup from experiment to official feature
",Promote shadowLookup from experiment to official feature
188,"
Fixes an issue where units were stripped from zero value properties (#533)
",Fixes an issue where units were stripped from zero value properties (#533)
189,"
Fixes an issue where changes to your configuration file were ignored when using webpack --watch (#520)
",Fixes an issue where changes to your configuration file were ignored when using webpack --watch (#520)
190,"
Fixes an issue where @tailwind utilities generated no output (#518)
",Fixes an issue where @tailwind utilities generated no output (#518)
191,"
New Features
Added table layout utilities for styling tables
Configuration can now be passed as an object
Changes
Default config file changes
Experiments
Registering new variants from plugins
Allow @apply-ing classes that aren't defined but would be generated


New Features

Added table layout utilities for styling tables (#504)
Tailwind now includes .table-auto and .table-fixed utilities for controlling the table-layout property.
By default we only generate responsive variants for these utilities but you can change this through the tableLayout module your Tailwind configuration file.
We've also updated Preflight to set border-collapse: collapse by default on all tables.

Configuration can now be passed as an object (#508)
Normally you pass your configuration to Tailwind by giving it a path:
// .postcssrc.js or similar
module.exports = {
  // ...
  plugins: [
    // ...
    require('tailwindcss')('./tailwind.js'),
  ]
}
Now you can also pass an object directly:
```
// .postcssrc.js or similar
const tailwindConfig = {
  // ...
}
module.exports = {
  // ...
  plugins: [
    // ...
    require('tailwindcss')(tailwindConfig),
  ]
}
```
Note that we still recommend passing a path instead of an object, because Tailwind can't rebuild when the config changes if it doesn't have a config file to watch.

Changes

Default config file changes
Impact: Low, Effort: Low
The default config file now includes a new tableLayout entry in the modules section.
Simply add this to your config file to sync it with this change, or leave it out if you just want to inherit the default configuration for the new module:
diff
  module.exports = {
    // ...
    modules: {
      // ...
      svgStroke: [],
+     tableLayout: ['responsive'],
      textAlign: ['responsive'],
      // ...
    }
  }

Experiments
Tailwind 0.6.2 includes two new major features that are disabled by default behind flags.
These features may be changed or removed at any time without any regard for semantic versioning, so please do not depend on them in production just yet.

Registering new variants from plugins (#505)
Plugins can now add their own variants (like hover, focus, group-hover, etc.) to Tailwind.
To get started, destructure the new addVariant function from the object passed to your plugin, and call it with the name of the variant you'd like to add and a callback that can be used to manipulate the PostCSS nodes where the variant is being applied:
js
module.exports = {
  plugins: [
    function({ addVariant }) {
      addVariant('important', ({ container }) => {
        container.walkRules(rule => {
          rule.selector = `.\\!${rule.selector.slice(1)}`
          rule.walkDecls(decl => {
            decl.important = true
          })
        })
      })
    }
  ]
}
Proper documentation will be provided when this feature is stable and official, but in the mean time you can learn more by reading this comment from the pull request.
To enable this experiment, add pluginVariants: true under an experiments key in your Tailwind config:
js
module.exports = {
  // ...
  experiments: {
    pluginVariants: true
  }
}

Allow @apply-ing classes that aren't defined but would be generated (#516)
You can now use @apply to apply classes that aren't defined but would exist if @tailwind utilities was included in the same CSS file. This is mostly useful on projects that are setup to process multiple styles independently, for example a Vue.js project where you are using the <style> block of your single file components.
To enable this experiment, add shadowLookup: true under an experiments key in your Tailwind config:
js
module.exports = {
  // ...
  experiments: {
    shadowLookup: true
  }
}","New Features
Added table layout utilities for styling tables
Configuration can now be passed as an object
Changes
Default config file changes
Experiments
Registering new variants from plugins
Allow @apply-ing classes that aren't defined but would be generated
New Features
Added table layout utilities for styling tables (#504)
Tailwind now includes .table-auto and .table-fixed utilities for controlling the table-layout property.
By default we only generate responsive variants for these utilities but you can change this through the tableLayout module your Tailwind configuration file.
We've also updated Preflight to set border-collapse: collapse by default on all tables.
Configuration can now be passed as an object (#508)
Normally you pass your configuration to Tailwind by giving it a path:
// .postcssrc.js or similar
module.exports = {
  // ...
  plugins: [
    // ...
    require('tailwindcss')('./tailwind.js'),
  ]
}
Now you can also pass an object directly:
module
Note that we still recommend passing a path instead of an object, because Tailwind can't rebuild when the config changes if it doesn't have a config file to watch.
Changes
Default config file changes
Impact: Low, Effort: Low
The default config file now includes a new tableLayout entry in the modules section.
Simply add this to your config file to sync it with this change, or leave it out if you just want to inherit the default configuration for the new module:
diff
  module.exports = {
    // ...
    modules: {
      // ...
      svgStroke: [],
+     tableLayout: ['responsive'],
      textAlign: ['responsive'],
      // ...
    }
  }
Experiments
Tailwind 0.6.2 includes two new major features that are disabled by default behind flags.
These features may be changed or removed at any time without any regard for semantic versioning, so please do not depend on them in production just yet.
Registering new variants from plugins (#505)
Plugins can now add their own variants (like hover, focus, group-hover, etc.) to Tailwind.
To get started, destructure the new addVariant function from the object passed to your plugin, and call it with the name of the variant you'd like to add and a callback that can be used to manipulate the PostCSS nodes where the variant is being applied:
js
module.exports = {
  plugins: [
    function({ addVariant }) {
      addVariant('important', ({ container }) => {
        container.walkRules(rule => {
          rule.selector = module
          rule.walkDecls(decl => {
            decl.important = true
          })
        })
      })
    }
  ]
}
Proper documentation will be provided when this feature is stable and official, but in the mean time you can learn more by reading this comment from the pull request.
To enable this experiment, add pluginVariants: true under an experiments key in your Tailwind config:
js
module.exports = {
  // ...
  experiments: {
    pluginVariants: true
  }
}
Allow @apply-ing classes that aren't defined but would be generated (#516)
You can now use @apply to apply classes that aren't defined but would exist if @tailwind utilities was included in the same CSS file. This is mostly useful on projects that are setup to process multiple styles independently, for example a Vue.js project where you are using the "
192,"
Fix incorrect box-shadow syntax for the .shadow-outline utility 🤦‍♂️ : #503  

If you generated a config file using v0.6.0, you'll want to make this same change in your own config file.","Fix incorrect box-shadow syntax for the .shadow-outline utility 🤦‍♂️ : #503  
If you generated a config file using v0.6.0, you'll want to make this same change in your own config file."
193,"
New Features
Added border collapse utilities for styling tables
Added more axis-specific overflow utilities
Added .outline-none utility for suppressing focus styles
Added .shadow-outline utility as an alternative to default browser focus styles
Extended default padding, margin, negative margin, width, and height scales
Enable focus and hover variants for more modules by default
Changes
Removed default outline: none !important styles from focusable but keyboard-inaccessible elements
Moved screen prefix for responsive group-hover variants
Default config file changes


New Features

Added border collapse utilities for styling tables (#489)
Tailwind now includes .border-collapse and .border-separate utilities for controlling the border-collapse property.
By default we don't generate any variants for these utilities (not even responsive variants) but you can change this through the borderCollapse module your Tailwind configuration file.
We've also updated Preflight to set border-collapse: collapse by default on all tables.

Added more axis-specific overflow utilities (#445)
In addition to .overflow-hidden and .overflow-visible, Tailwind now includes .overflow-x-hidden, .overflow-y-hidden, .overflow-x-visible and .overflow-y-visible for controlling overflow along a specific axis.

Added .outline-none utility for suppressing focus styles (#491)
Tailwind now includes a .outline-none utility for setting outline: 0 on an element to prevent the default browser focus ring.
By default, we also generate a focus variant (focus:outline-none) but no responsive variants.

Added .shadow-outline utility as an alternative to default browser focus styles (#491)
Outlines don't follow an element's border radius in most browsers, so a common practice is disable the browser's default focus outline and use a colored box-shadow to highlight focused elements.
Tailwind now includes a blue .shadow-outline utility that can be used for this purpose.
We've also enabled focus variants for box shadows by default, so you can add an outline shadow on focus by doing something like this:
html
<button class=""focus:outline-none focus:shadow-outline ...""></button>

Extended default padding, margin, negative margin, width, and height scales (#499)
Tailwind's default configuration now includes more padding, margin, and negative margin sizes:
diff
  padding/margin/negativeMargin: {
    'px': '1px',
    '0': '0',
    '1': '0.25rem',
    '2': '0.5rem',
    '3': '0.75rem',
    '4': '1rem',
+   '5': '1.25rem',
    '6': '1.5rem',
    '8': '2rem',
+   '10': '2.5rem',
+   '12': '3rem',
+   '16': '4rem',
+   '20': '5rem',
+   '24': '6rem',
+   '32': '8rem',
  }
We've also added 5 to the height and width scales to avoid any holes when compared with the spacing scales:
diff
  width/height: {
    'auto': 'auto',
    'px': '1px',
    '1': '0.25rem',
    '2': '0.5rem',
    '3': '0.75rem',
    '4': '1rem',
+   '5': '1.25rem',
    '6': '1.5rem',
    '8': '2rem',
    '10': '2.5rem',
    '12': '3rem',
    '16': '4rem',
    '24': '6rem',
    '32': '8rem',
    '48': '12rem',
    '64': '16rem',
    // ...
  }

Enable focus and hover variants for more modules by default (#498)
Tailwind now includes focus and hover variants for more utilities out of the box.
We've added:

Focus variants for background colors
Focus variants for border colors
Focus variants for font weight
Hover and focus variants for box shadows
Focus variants for text colors
Focus variants for text style (underline, capitalization, etc.)

That means you do things like style an input differently based on whether it currently has focus:
html
<input class=""border border-transparent bg-grey-lighter focus:bg-white focus:border-blue-light"">
This was always possible if you had focus variants enabled in your own configuration, but Tailwind 0.6.0 sets these up for you out of the box so you don't need to make this common configuration change yourself. It also makes our CDN builds a little more powerful.

Changes

Removed default outline: none !important styles from focusable but keyboard-inaccessible elements (#491)
Impact: Low, Effort: Low
Prior to 0.6.0, our Preflight base styles included this rule (borrowed from suitcss/base):
```css
/*
 * Suppress the focus outline on elements that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 /
[tabindex=""-1""]:focus {
  outline: none !important;
}
```
This is a useful default for many projects, but in the odd case that it's problematic for you it is really annoying to work around.
With the addition of the .outline-none helper, we think it makes sense to remove this default style and encourage people to simply add focus:outline-none to any focusable but keyboard-inaccessible elements:
diff
- <div tabindex=""-1"" class=""..."">...</div>
+ <div tabindex=""-1"" class=""focus:outline-none ..."">...</div>
Of course, you can also reintroduce this rule into your own base styles after Preflight:
```diff
  @tailwind preflight;

[tabindex=""-1""]:focus {
outline: none !important;
}

@tailwind components;
@tailwind utilities;
```

Moved screen prefix for responsive group-hover variants (#497)
Impact: Low, Effort: Medium
Prior to 0.6.0, if you had responsive and group-hover variants enabled for a module, the resulting CSS rule for a responsive group-hover variant would look something like this:
css
.sm\:group .group-hover\:bg-red { ... }
This was just a consequence of the responsive variants implementation and wasn't something we intentionally designed. It allowed you to do stuff like this:
```html
 Parent only behaves like a group on large screens and up, so the child 
 remains blue on small screens even when the parent is hovered. 

...

```
This is not very useful in practice, and actually prevented you from changing how an element itself responded to group-hover on different screen sizes:
```html

 Element was always red, even on small screens and up 
...

```
In 0.6.0, the group-hover part of the selector adopts the screen prefix instead of the group part, so the code snippet from above will now work.
I would bet $100 that zero Tailwind users were depending on the pre-0.6.0 behavior, but if you were, the best solution is to write your own CSS for those parts of your project.

Default config file changes
Impact: Low, Effort: Low
The default config file now includes more padding, margin, negative margin, height, and width sizes; a new borderCollapse entry in the modules section; and enables more variants for more modules by default.
All the changes are purely additive, so you don't actually have to change any existing config files — all of your existing projects will work the same in 0.6.0 aside from the two breaking changes mentioned earlier in this changelog.
If you'd like to upgrade your config file to match the current default config file, you can view a diff of the changes here.","New Features
Added border collapse utilities for styling tables
Added more axis-specific overflow utilities
Added .outline-none utility for suppressing focus styles
Added .shadow-outline utility as an alternative to default browser focus styles
Extended default padding, margin, negative margin, width, and height scales
Enable focus and hover variants for more modules by default
Changes
Removed default outline: none !important styles from focusable but keyboard-inaccessible elements
Moved screen prefix for responsive group-hover variants
Default config file changes
New Features
Added border collapse utilities for styling tables (#489)
Tailwind now includes .border-collapse and .border-separate utilities for controlling the border-collapse property.
By default we don't generate any variants for these utilities (not even responsive variants) but you can change this through the borderCollapse module your Tailwind configuration file.
We've also updated Preflight to set border-collapse: collapse by default on all tables.
Added more axis-specific overflow utilities (#445)
In addition to .overflow-hidden and .overflow-visible, Tailwind now includes .overflow-x-hidden, .overflow-y-hidden, .overflow-x-visible and .overflow-y-visible for controlling overflow along a specific axis.
Added .outline-none utility for suppressing focus styles (#491)
Tailwind now includes a .outline-none utility for setting outline: 0 on an element to prevent the default browser focus ring.
By default, we also generate a focus variant (focus:outline-none) but no responsive variants.
Added .shadow-outline utility as an alternative to default browser focus styles (#491)
Outlines don't follow an element's border radius in most browsers, so a common practice is disable the browser's default focus outline and use a colored box-shadow to highlight focused elements.
Tailwind now includes a blue .shadow-outline utility that can be used for this purpose.
We've also enabled focus variants for box shadows by default, so you can add an outline shadow on focus by doing something like this:
html

Extended default padding, margin, negative margin, width, and height scales (#499)
Tailwind's default configuration now includes more padding, margin, and negative margin sizes:
diff
  padding/margin/negativeMargin: {
    'px': '1px',
    '0': '0',
    '1': '0.25rem',
    '2': '0.5rem',
    '3': '0.75rem',
    '4': '1rem',
+   '5': '1.25rem',
    '6': '1.5rem',
    '8': '2rem',
+   '10': '2.5rem',
+   '12': '3rem',
+   '16': '4rem',
+   '20': '5rem',
+   '24': '6rem',
+   '32': '8rem',
  }
We've also added 5 to the height and width scales to avoid any holes when compared with the spacing scales:
diff
  width/height: {
    'auto': 'auto',
    'px': '1px',
    '1': '0.25rem',
    '2': '0.5rem',
    '3': '0.75rem',
    '4': '1rem',
+   '5': '1.25rem',
    '6': '1.5rem',
    '8': '2rem',
    '10': '2.5rem',
    '12': '3rem',
    '16': '4rem',
    '24': '6rem',
    '32': '8rem',
    '48': '12rem',
    '64': '16rem',
    // ...
  }
Enable focus and hover variants for more modules by default (#498)
Tailwind now includes focus and hover variants for more utilities out of the box.
We've added:
Focus variants for background colors
Focus variants for border colors
Focus variants for font weight
Hover and focus variants for box shadows
Focus variants for text colors
Focus variants for text style (underline, capitalization, etc.)
That means you do things like style an input differently based on whether it currently has focus:
html

This was always possible if you had focus variants enabled in your own configuration, but Tailwind 0.6.0 sets these up for you out of the box so you don't need to make this common configuration change yourself. It also makes our CDN builds a little more powerful.
Changes
Removed default outline: none !important styles from focusable but keyboard-inaccessible elements (#491)
Impact: Low, Effort: Low
Prior to 0.6.0, our Preflight base styles included this rule (borrowed from suitcss/base):
module
This is a useful default for many projects, but in the odd case that it's problematic for you it is really annoying to work around.
With the addition of the .outline-none helper, we think it makes sense to remove this default style and encourage people to simply add focus:outline-none to any focusable but keyboard-inaccessible elements:
diff
- ...
+ ...
Of course, you can also reintroduce this rule into your own base styles after Preflight:
```diff
  @tailwind preflight;
[tabindex=""-1""]:focus {
outline: none !important;
}
@tailwind components;
@tailwind utilities;
```
Moved screen prefix for responsive group-hover variants (#497)
Impact: Low, Effort: Medium
Prior to 0.6.0, if you had responsive and group-hover variants enabled for a module, the resulting CSS rule for a responsive group-hover variant would look something like this:
css
.sm\:group .group-hover\:bg-red { ... }
This was just a consequence of the responsive variants implementation and wasn't something we intentionally designed. It allowed you to do stuff like this:
```html
 Parent only behaves like a group on large screens and up, so the child 
 remains blue on small screens even when the parent is hovered. 
...
modulehtml
Element was always red, even on small screens and up 
...
```
In 0.6.0, the group-hover part of the selector adopts the screen prefix instead of the group part, so the code snippet from above will now work.
I would bet $100 that zero Tailwind users were depending on the pre-0.6.0 behavior, but if you were, the best solution is to write your own CSS for those parts of your project.
Default config file changes
Impact: Low, Effort: Low
The default config file now includes more padding, margin, negative margin, height, and width sizes; a new borderCollapse entry in the modules section; and enables more variants for more modules by default.
All the changes are purely additive, so you don't actually have to change any existing config files — all of your existing projects will work the same in 0.6.0 aside from the two breaking changes mentioned earlier in this changelog.
If you'd like to upgrade your config file to match the current default config file, you can view a diff of the changes here."
194,"
Improve sourcemaps for replaced styles like preflight
Fix bug where informational messages were being logged to stdout during build, preventing the ability to use Tailwind's output in Unix pipelines
","Improve sourcemaps for replaced styles like preflight
Fix bug where informational messages were being logged to stdout during build, preventing the ability to use Tailwind's output in Unix pipelines"
195,"
Fixes an issue with a dependency that had a security vulnerability: #438 
",Fixes an issue with a dependency that had a security vulnerability: #438 
196,"
Reverts a change that renamed the .roman class to .not-italic due to the fact that it breaks compatibility with cssnext: https://github.com/postcss/postcss-selector-not/issues/10

We'll stick with .roman for now with a plan to switch to .not-italic in another breaking version should that issue get resolved in postcss-selector-not.","Reverts a change that renamed the .roman class to .not-italic due to the fact that it breaks compatibility with cssnext: link
We'll stick with .roman for now with a plan to switch to .not-italic in another breaking version should that issue get resolved in postcss-selector-not."
197,"
New Features
Plugin system
Added .sticky position utility
Added .cursor-wait and .cursor-move utilities
Added .bg-auto background size utility
Background sizes are now customizable
Support for active variants
Better postcss-import support
Configuration options for the .container component
Changes
The .container component is now a built-in plugin
State variant precedence changes
New config file keys
.overflow-x/y-scroll now set overflow: scroll instead of overflow: auto
.roman renamed to .not-italic


New Features

Plugin system
Tailwind now includes a feature-rich plugin system that allows people to create reusable third-party packages that can hook into Tailwind's compilation process to add new styles.
```js
// ...
module.exports = {
  // ...
  plugins: [
    function({ addUtilities, addComponents, config, prefix, e }) {
      addComponents(
        {
          ['.btn-blue']: {
            backgroundColor: 'blue',
          },
        },
        { respectPrefix: true }
      )
    },
  ],
  // ...
}
```
Documentation is coming very shortly, but in the mean time you can learn more through these two pull requests:

Add plugin system
Support CSS-in-JS syntax in plugins

Update: Documentation is now available: https://tailwindcss.com/docs/plugins

Added .sticky position utility
Tailwind now includes a .sticky utility for setting an element to position: sticky. This isn't supported by IE 11, but falls back fairly gracefully with no effort so we decided to include it out of the box.
Learn more about sticky positioning at MDN

Added .cursor-wait and .cursor-move utilities
In addition to .cursor-auto, .cursor-default, .cursor-pointer, and .cursor-not-allowed, Tailwind now includes .cursor-wait to indicate when the application is busy, and .cursor-move to indicate that an element can be moved.

Added .bg-auto background size utility
To allow resetting an element's background size at other breakpoints, Tailwind now includes a .bg-auto utility:
```html
...
```

Background sizes are now customizable
If you'd like to customize the available background size utilities in your project, you can now do so by adding a backgroundSize key to your Tailwind config:
```js
module.exports = {
  // ...
backgroundSize: {
    'auto': 'auto',
    'cover': 'cover',
    'contain': 'contain',
  },
}
```

Support for active variants
In addition to hover, focus, and group-hover, Tailwind now includes support for active variants of each utility:
```js
module.exports = {
  // ...
modules: {
    // ...
    backgroundColors: ['hover', 'active'],
    // ...
  }
}
```

Better postcss-import support
If you're using postcss-import to inline your imports, you can't use @tailwind preflight or @tailwind utilities directly in a file that contains other imports, due to postcss-import staying strict to the CSS spec for import statements.
Previously, the workaround for this was to create a new file just for @tailwind preflight and another new file just for @tailwind utilities, and then @import those files into your main stylesheet.
It turns out postcss-import can import files from node_modules, so as of v0.5.0, you can now import these files directly from Tailwind itself:
```css
@import ""tailwindcss/preflight"";
@import ""tailwindcss/utilities"";
```

Configuration options for the .container component
Now that the .container component is provided as a built-in plugin, it exposes optional configuration for centering the container by default as well as adding default horizontal padding:
```js
// ...
module.exports = {
  // ...
plugins: [
    require('tailwindcss/plugins/container')({
      center: true,
      padding: '2rem',
    }),
  ],
}
```
Containers are still not centered with no padding by default, and the configuration object is not required:
```js
// ...
module.exports = {
  // ...
plugins: [
    require('tailwindcss/plugins/container')(),
  ],
}
```
You can also disable the container component entirely now by removing the plugin from the plugins list:
```diff
  // ...
module.exports = {
    // ...
plugins: [


require('tailwindcss/plugins/container')(),
    ],
  }
```


Changes

The .container component is now a built-in plugin
Impact: Large, Effort: Low
The .container component has long been a bit of an oddball in the Tailwind codebase; it's the only set of styles that can't be used with state variants and apply different styles at different breakpoints.
With the addition of the new plugin system, it made sense to move the container component out of same bucket of code that holds all of our utility classes and into its own plugin with its own options.
If you are using the container in your projects, you will need to add the following section to your existing Tailwind config file:
```diff
  // ...
module.exports = {
    // ...

plugins: [
require('tailwindcss/plugins/container')(),
],
  }
```

You'll also need to add the new @tailwind components directive to your CSS:
```diff
  @tailwind preflight;

@tailwind components;

@tailwind utilities;
```

State variant precedence changes
Impact: Small, Effort: High
Prior to 0.5.0, state variants had the following precedence (lowest to highest):

Focus
Hover
Group Hover

That means that if an element had both focus:bg-blue and hover:bg-green applied, when the element was both focused and hovered, the hover styles would take precedence, so the element would be green.
It also meant that if an element had group-hover:bg-blue and hover:bg-green applied, hovering the element would make it blue because the group styles would take precedence over the individual element styles.
In 0.5.0, state variants have the following precedence (lowest to highest):

Group Hover
Hover
Focus
Active

Now hover styles will defeat group-hover styles, and focus styles will defeat hover styles.
If this sounds counter-intuitive, see #417 for more information on the motivation behind this change.
It is extremely unlikely that this change affects you; the odds that you were changing the same property on both hover and focus is extremely low, and if you were, I'm willing to bet it was on an input field where the new behavior would actually feel like an improvement.
If this change does break the expected behavior in your project, the best solution is to create your own component classes for the places where you were doing complex interaction like this so you can control the precedence manually.

New config file keys
Impact: Small, Effort: Low
New plugins key
If you'd like to use the new plugin system in an existing project, you'll need to add the plugins key to your config, and include the container component plugin if you need it:
```diff
  // ...
module.exports = {
    // ...

plugins: [
require('tailwindcss/plugins/container')(),
],
  }
```

This is optional, your project will build fine without this change and will just fall back to the plugins configuration from the default config file.
New backgroundSize key
If you'd like to customize the available background size utilities, add the backgroundSize key to your config 
```diff
  module.exports = {
    // ...

backgroundSize: {
'auto': 'auto',
'cover': 'cover',
'contain': 'contain',
},
  }
```

This is optional, your project will build fine without this change and will just fall back to the backgroundSize configuration from the default config file.

.overflow-x/y-scroll now set overflow: scroll instead of overflow: auto
Impact: Large, Effort: Medium
The .overflow-x-scroll and .overflow-y-scroll utilities now set overflow to scroll instead of auto.
New .overflow-x-auto and .overflow-y-auto utilities have been added to get the auto behavior with more consistent naming.
This change won't break any sites but will cause scrollbars to appear on Windows in places where they might not be actually needed, so if you don't want them visible you should switch instances of .overflow-x/y-scroll to .overflow-x/y-auto.
We've also removed the -ms-overflow-style: -ms-autohiding-scrollbar styles from the overflow utilities, which means scrollbars will now render with their default styling in IE/Edge instead of being forced to render as autohiding, which is not the browsers normal behavior.

~~.roman renamed to .not-italic~~
~~Impact: Large, Effort: Medium~~
~~The .roman utility for undoing italic font styles has been renamed to .not-italic since .roman is a terrible name.~~
This was immediately reverted in v0.5.1 because it breaks compatibility with cssnext; ignore this change.
Hoping to change this in a future breaking release if/once the issue with postcss-selector-not is resolved.","New Features
Plugin system
Added .sticky position utility
Added .cursor-wait and .cursor-move utilities
Added .bg-auto background size utility
Background sizes are now customizable
Support for active variants
Better postcss-import support
Configuration options for the .container component
Changes
The .container component is now a built-in plugin
State variant precedence changes
New config file keys
.overflow-x/y-scroll now set overflow: scroll instead of overflow: auto
.roman renamed to .not-italic
New Features
Plugin system
Tailwind now includes a feature-rich plugin system that allows people to create reusable third-party packages that can hook into Tailwind's compilation process to add new styles.
module
Documentation is coming very shortly, but in the mean time you can learn more through these two pull requests:
Add plugin system
Support CSS-in-JS syntax in plugins
Update: Documentation is now available: link
Added .sticky position utility
Tailwind now includes a .sticky utility for setting an element to position: sticky. This isn't supported by IE 11, but falls back fairly gracefully with no effort so we decided to include it out of the box.
Learn more about sticky positioning at MDN
Added .cursor-wait and .cursor-move utilities
In addition to .cursor-auto, .cursor-default, .cursor-pointer, and .cursor-not-allowed, Tailwind now includes .cursor-wait to indicate when the application is busy, and .cursor-move to indicate that an element can be moved.
Added .bg-auto background size utility
To allow resetting an element's background size at other breakpoints, Tailwind now includes a .bg-auto utility:
module
Background sizes are now customizable
If you'd like to customize the available background size utilities in your project, you can now do so by adding a backgroundSize key to your Tailwind config:
module
Support for active variants
In addition to hover, focus, and group-hover, Tailwind now includes support for active variants of each utility:
module
Better postcss-import support
If you're using postcss-import to inline your imports, you can't use @tailwind preflight or @tailwind utilities directly in a file that contains other imports, due to postcss-import staying strict to the CSS spec for import statements.
Previously, the workaround for this was to create a new file just for @tailwind preflight and another new file just for @tailwind utilities, and then @import those files into your main stylesheet.
It turns out postcss-import can import files from node_modules, so as of v0.5.0, you can now import these files directly from Tailwind itself:
module
Configuration options for the .container component
Now that the .container component is provided as a built-in plugin, it exposes optional configuration for centering the container by default as well as adding default horizontal padding:
module
Containers are still not centered with no padding by default, and the configuration object is not required:
module
You can also disable the container component entirely now by removing the plugin from the plugins list:
```diff
  // ...
module.exports = {
    // ...
plugins: [
require('tailwindcss/plugins/container')(),
    ],
  }
```
Changes
The .container component is now a built-in plugin
Impact: Large, Effort: Low
The .container component has long been a bit of an oddball in the Tailwind codebase; it's the only set of styles that can't be used with state variants and apply different styles at different breakpoints.
With the addition of the new plugin system, it made sense to move the container component out of same bucket of code that holds all of our utility classes and into its own plugin with its own options.
If you are using the container in your projects, you will need to add the following section to your existing Tailwind config file:
```diff
  // ...
module.exports = {
    // ...
plugins: [
require('tailwindcss/plugins/container')(),
],
  }
```
You'll also need to add the new @tailwind components directive to your CSS:
```diff
  @tailwind preflight;
@tailwind components;
@tailwind utilities;
```
State variant precedence changes
Impact: Small, Effort: High
Prior to 0.5.0, state variants had the following precedence (lowest to highest):
Focus
Hover
Group Hover
That means that if an element had both focus:bg-blue and hover:bg-green applied, when the element was both focused and hovered, the hover styles would take precedence, so the element would be green.
It also meant that if an element had group-hover:bg-blue and hover:bg-green applied, hovering the element would make it blue because the group styles would take precedence over the individual element styles.
In 0.5.0, state variants have the following precedence (lowest to highest):
Group Hover
Hover
Focus
Active
Now hover styles will defeat group-hover styles, and focus styles will defeat hover styles.
If this sounds counter-intuitive, see #417 for more information on the motivation behind this change.
It is extremely unlikely that this change affects you; the odds that you were changing the same property on both hover and focus is extremely low, and if you were, I'm willing to bet it was on an input field where the new behavior would actually feel like an improvement.
If this change does break the expected behavior in your project, the best solution is to create your own component classes for the places where you were doing complex interaction like this so you can control the precedence manually.
New config file keys
Impact: Small, Effort: Low
New plugins key
If you'd like to use the new plugin system in an existing project, you'll need to add the plugins key to your config, and include the container component plugin if you need it:
```diff
  // ...
module.exports = {
    // ...
plugins: [
require('tailwindcss/plugins/container')(),
],
  }
```
This is optional, your project will build fine without this change and will just fall back to the plugins configuration from the default config file.
New backgroundSize key
If you'd like to customize the available background size utilities, add the backgroundSize key to your config 
```diff
  module.exports = {
    // ...
backgroundSize: {
'auto': 'auto',
'cover': 'cover',
'contain': 'contain',
},
  }
```
This is optional, your project will build fine without this change and will just fall back to the backgroundSize configuration from the default config file.
.overflow-x/y-scroll now set overflow: scroll instead of overflow: auto
Impact: Large, Effort: Medium
The .overflow-x-scroll and .overflow-y-scroll utilities now set overflow to scroll instead of auto.
New .overflow-x-auto and .overflow-y-auto utilities have been added to get the auto behavior with more consistent naming.
This change won't break any sites but will cause scrollbars to appear on Windows in places where they might not be actually needed, so if you don't want them visible you should switch instances of .overflow-x/y-scroll to .overflow-x/y-auto.
We've also removed the -ms-overflow-style: -ms-autohiding-scrollbar styles from the overflow utilities, which means scrollbars will now render with their default styling in IE/Edge instead of being forced to render as autohiding, which is not the browsers normal behavior.
~~.roman renamed to .not-italic~~
~~Impact: Large, Effort: Medium~~
~~The .roman utility for undoing italic font styles has been renamed to .not-italic since .roman is a terrible name.~~
This was immediately reverted in v0.5.1 because it breaks compatibility with cssnext; ignore this change.
Hoping to change this in a future breaking release if/once the issue with postcss-selector-not is resolved."
198,"
Use global.Object to avoid issues with polyfills when importing the Tailwind config into other JS (#402)
",Use global.Object to avoid issues with polyfills when importing the Tailwind config into other JS (#402)
199,"
Fix an issue where borders couldn't be applied to img tags without specifying a border style (#362, #363)
Add support for using a function to define class prefixes in addition to a simple string (#367)
Improve the performance of @apply by using a lookup table instead of searching (#401)
","Fix an issue where borders couldn't be applied to img tags without specifying a border style (#362, #363)
Add support for using a function to define class prefixes in addition to a simple string (#367)
Improve the performance of @apply by using a lookup table instead of searching (#401)"
200,"
Make default sans-serif font stack more future proof and safe to use with CSS font shorthand (https://github.com/tailwindcss/tailwindcss/pull/353)
Replace stylefmt with Perfectionist to avoid weird stylelint conflicts (https://github.com/tailwindcss/tailwindcss/pull/358, https://github.com/tailwindcss/tailwindcss/issues/322)
","Make default sans-serif font stack more future proof and safe to use with CSS font shorthand (link)
Replace stylefmt with Perfectionist to avoid weird stylelint conflicts (link, link)"
201,"
New Features
@apply'd classes can now be made !important explicitly
Changes
@apply now strips !important from any mixed in classes
Default color palette tweaks


New Features

@apply'd classes can now be made !important explicitly
If you need to @apply a class and make it's declarations !important, you can now add !important to the @apply declaration itself. This will make the applied declarations !important even if they aren't marked as important in the class being applied:
```less
// Input:
.bar {
  @apply .foo !important;
}
.foo {
  color: blue;
}
// Output:
.bar {
  color: blue !important;
}
.foo {
  color: blue;
}
```

Changes

@apply now strips !important from any mixed in classes
Impact: Low
Prior to 0.4, if you had a class that contained !important declarations and you @apply'd that class to another class, the declarations would preserve their !important value:
```less
// Input:
.bar {
  @apply .foo;
}
.foo {
  color: blue !important;
}
// Output:
.bar {
  color: blue !important;
}
.foo {
  color: blue !important;
}
```
This turned out to be problematic if you have Tailwind configured to make utilities !important by default, and you wanted to compose components from those utilities that contained descendant selectors, for example:
```less
// Input:
.custom-table td {
  @apply .text-grey-dark;
}
// Output:
.custom-table td {
  color: #8795a1 !important;
}
```
The problem was that rules like this would have a higher specificity than the utilities themselves due to the compound selector, so you couldn't override those styles with utilities:
```html


Will still be grey


```
In 0.4, @apply will always strip !important to avoid specificity issues like this:
```less
// Input:
.bar {
  @apply .foo;
}
.foo {
  color: blue !important;
}
// Output:
.bar {
  color: blue;
}
.foo {
  color: blue !important;
}
```
Odds of this affecting your existing codebase is quite low; if anything this will let you clean up code you might have had to write to work around this annoying behavior.

Default color palette tweaks
Impact: Low
Some of the values in the default color palette have been tweaked with the aim of making it more useful in more situations.


The dark end of the grey scale has been spread out more, making grey closer to grey-light than it was previously. See the PR.


The darker/darkest variants of most colors have been desaturated slightly so they work better as background colors. See the PR.


These changes will only affect you if you are dynamically referencing the default color palette in your own config file. If you'd like to keep using the old colors, they can be found here:
See the v0.3.0 color palette","New Features
@apply'd classes can now be made !important explicitly
Changes
@apply now strips !important from any mixed in classes
Default color palette tweaks
New Features
@apply'd classes can now be made !important explicitly
If you need to @apply a class and make it's declarations !important, you can now add !important to the @apply declaration itself. This will make the applied declarations !important even if they aren't marked as important in the class being applied:
module
Changes
@apply now strips !important from any mixed in classes
Impact: Low
Prior to 0.4, if you had a class that contained !important declarations and you @apply'd that class to another class, the declarations would preserve their !important value:
module
This turned out to be problematic if you have Tailwind configured to make utilities !important by default, and you wanted to compose components from those utilities that contained descendant selectors, for example:
module
The problem was that rules like this would have a higher specificity than the utilities themselves due to the compound selector, so you couldn't override those styles with utilities:
```html
Will still be grey
moduleless
// Input:
.bar {
  @apply .foo;
}
.foo {
  color: blue !important;
}
// Output:
.bar {
  color: blue;
}
.foo {
  color: blue !important;
}
```
Odds of this affecting your existing codebase is quite low; if anything this will let you clean up code you might have had to write to work around this annoying behavior.
Default color palette tweaks
Impact: Low
Some of the values in the default color palette have been tweaked with the aim of making it more useful in more situations.
The dark end of the grey scale has been spread out more, making grey closer to grey-light than it was previously. See the PR.
The darker/darkest variants of most colors have been desaturated slightly so they work better as background colors. See the PR.
These changes will only affect you if you are dynamically referencing the default color palette in your own config file. If you'd like to keep using the old colors, they can be found here:
See the v0.3.0 color palette"
202,"
New Features
Enable/disable modules and control which variants are generated for each
Focus variants
Group hover variants
New @variants at-rule
Customize the separator character
Missing config keys now fallback to their default values
New utilities
Upgrade Guide / Breaking Changes
Lists now have no margins by default
.pin no longer sets width and height to 100%
SVG fill no longer defaults to currentColor


New Features

Enable/disable modules and control which variants are generated for each
The Tailwind config file now contains a new modules key where you can control which modules should be responsive, or have hover or focus variants generated:
```js
// ...
module.exports = {
  // ...
modules: {
    // Generate base appearance utilities + responsive versions
    appearance: ['responsive'],
// Generate base, responsive, hover, and focus versions
backgroundAttachment: ['responsive', 'hover', 'focus'],

// Only generate base utilities
backgroundPosition: [],

// ...

},
// ...
}
```
If you don't need a certain module at all, you can disable it by setting it to false:
```js
// ...
module.exports = {
  // ...
modules: {
    // ...
    flexbox: false,
    // ...
  },
// ...
}
```
This gives you better control over the generated file size and also lets you add hover/focus variants to utilities that don't have them by default, like shadows for example.
If you're a PurgeCSS user who doesn't care about the pre-PurgeCSS file size, you can even set modules to all to generate every variant for every utility :feelsgood:
```js
// ...
module.exports = {
  // ...
modules: 'all',
// ...
}
```
Learn more about in the configuration modules documentation.

Focus variants
As alluded to earlier, Tailwind now lets you generate focus: variants of each utility that are only active on focus.
Focus variants are currently not enabled on any modules by default, but you can enable them for a specific module in your own project by adding 'focus' to the variants list in the modules section of your config file:
```js
// ...
module.exports = {
  // ...
modules: {
    // ...
backgroundColors: ['responsive', 'hover', 'focus'],

// ...

},
// ...
}
```
Focus variants work just like the hover variants that you're used to:
html
<input class=""bg-grey-light focus:bg-white border border-grey"">

Group hover variants
Sometimes you need to change the style of an element when some parent element is hovered rather than the element itself.
To handle these situations, Tailwind 0.3 adds a new group-hover variant.
Group hover variants are currently not enabled on any modules by default, but you can enable them for a specific module in your own project by adding 'group-hover' to the variants list in the modules section of your config file:
```
// ...
module.exports = {
  // ...
modules: {
    // ...
textColors: ['responsive', 'hover', 'group-hover'],

// ...

},
// ...
}
```
To use a group-hover: utility variant, you need to mark the target parent element with the .group class:
```html

 ... 
Click me

```
Check out this CodePen to see it in action.

New @variants at-rule
To make it easy to generate hover, focus, and group-hover versions of your own utilities, Tailwind 0.3 adds a new @variants at-rule that lets you specify which variants to generate for a given list of classes:
css
@variants hover, focus {
  .banana { color: yellow; }
  .chocolate { color: brown; }
}
This will generate the following CSS:
```css
.banana { color: yellow; }
.chocolate { color: brown; }
.focus\:banana:focus { color: yellow; }
.focus\:chocolate:focus { color: brown; }
.hover\:banana:hover { color: yellow; }
.hover\:chocolate:hover { color: brown; }
```
The @variants at-rule supports all of the values that are supported in the modules section of your config file:

responsive
hover
focus
group-hover

Note: In previous versions, Tailwind included undocumented @hoverable and @focusable directives. These were fundamentally flawed in how they worked, and have been removed in favor of the new @variants directive.
The @responsive directive however has not been removed, and we fully intend to continue to support it as a shortcut for @variants responsive {}.

Customize the separator character
By default, Tailwind uses a colon (:) as a separator between variants and utility names:
```
...
```
Some templating languages (like Pug) don't play nicely with this, so Tailwind 0.3 adds a new configuration option that lets you change this if needed:
```js
// ...
module.exports = {
  // ...
options: {
    // ...
    separator: '_',
  },
}
```

Missing config keys now fallback to their default values
Prior to Tailwind 0.3, excluding a key (like backgroundColors) from your config file was undefined behavior.
To make upgrades smooth as new options are added to the config file, missing keys now fallback to their default values.
This has the added benefit of allowing you to completely omit keys from your config file if you don't intend to change the default values.
The exact behavior is as follows:

Top level keys fallback to their default values only if missing. The contents of top level keys are not merged, except for the two cases noted below.
The modules key is merged with the default modules key. This means that if you exclude a module from your config, it will be generated using the default settings. It will not be disabled unless you include the key and set it to false.
The options key is merged with the default options key. This means if you only want to change one option, you only need to provide that one key.


New utilities

.pin-none has been added to undo existing .pin-{side} utilities at different breakpoints
.resize-both has been added to allow resizing an element both horizontally and vertically
A completely new background attachment module has been added
A completely new background repeat module has been added
Completely new SVG fill and SVG stroke modules have been added


Upgrade Guide / Breaking Changes

Lists now have no margins by default
Impact: Medium
Until 0.3, Tailwind's Preflight base styles left ul and ol elements generally untouched, relying on the list-reset utility to remove default browser styling if you wanted to use a list for navigation or similar.
In 0.3, Tailwind still doesn't change list-style-type or padding on lists in our base styles, but we do remove margins:
ul, ol {
  margin: 0;
}
Tailwind already did this for all headings, block quotes, paragraph tags, etc., so removing margins on lists feels much more consistent.
It's unlikely this will impact your project as you were most likely overriding the browser's default margins with existing margin utilities.
If you were relying on the browser's default list margins, simply add margin utilities to your lists to make up for the now missing default margin.

.pin no longer sets width and height to 100%
Impact: Low
In an effort to make .pin{-side?} utilities easier to undo at different breakpoints, the all-sides .pin utility no longer sets width and height to 100%.
This will only affect you if you were using .pin on iframe, textarea, input, or button elements, and is easily remedied by adding the w-full and h-full utilities to those elements.

SVG fill no longer defaults to currentColor
Prior to 0.3, Tailwind's Preflight styles set all SVG fills to currentColor:
svg {
  fill: currentColor;
}
This made it harder to use icon sets like Feather that are drawn entirely with strokes with Tailwind, because they'd now be filled with the current text color by default instead of having no fill.
Tailwind 0.3 removes this base style entirely, and adds the fill-current class to make up for it, allowing you to be explicit when you want an SVG element to be filled with the current text color.
There's two ways you can update your project for this change:

Simply re-add the base styles above to your own CSS.
Add the fill-current class to any SVG elements that should be filled with the current text color.
","New Features
Enable/disable modules and control which variants are generated for each
Focus variants
Group hover variants
New @variants at-rule
Customize the separator character
Missing config keys now fallback to their default values
New utilities
Upgrade Guide / Breaking Changes
Lists now have no margins by default
.pin no longer sets width and height to 100%
SVG fill no longer defaults to currentColor
New Features
Enable/disable modules and control which variants are generated for each
The Tailwind config file now contains a new modules key where you can control which modules should be responsive, or have hover or focus variants generated:
```js
// ...
module.exports = {
  // ...
modules: {
    // Generate base appearance utilities + responsive versions
    appearance: ['responsive'],
// Generate base, responsive, hover, and focus versions
backgroundAttachment: ['responsive', 'hover', 'focus'],
// Only generate base utilities
backgroundPosition: [],
// ...
},
// ...
}
modulejs
// ...
module.exports = {
  // ...
modules: {
    // ...
    flexbox: false,
    // ...
  },
// ...
}
modulejs
// ...
module.exports = {
  // ...
modules: 'all',
// ...
}
```
Learn more about in the configuration modules documentation.
Focus variants
As alluded to earlier, Tailwind now lets you generate focus: variants of each utility that are only active on focus.
Focus variants are currently not enabled on any modules by default, but you can enable them for a specific module in your own project by adding 'focus' to the variants list in the modules section of your config file:
```js
// ...
module.exports = {
  // ...
modules: {
    // ...
backgroundColors: ['responsive', 'hover', 'focus'],
// ...
},
// ...
}
```
Focus variants work just like the hover variants that you're used to:
html

Group hover variants
Sometimes you need to change the style of an element when some parent element is hovered rather than the element itself.
To handle these situations, Tailwind 0.3 adds a new group-hover variant.
Group hover variants are currently not enabled on any modules by default, but you can enable them for a specific module in your own project by adding 'group-hover' to the variants list in the modules section of your config file:
```
// ...
module.exports = {
  // ...
modules: {
    // ...
textColors: ['responsive', 'hover', 'group-hover'],
// ...
},
// ...
}
modulehtml
... 
Click me
```
Check out this CodePen to see it in action.
New @variants at-rule
To make it easy to generate hover, focus, and group-hover versions of your own utilities, Tailwind 0.3 adds a new @variants at-rule that lets you specify which variants to generate for a given list of classes:
css
@variants hover, focus {
  .banana { color: yellow; }
  .chocolate { color: brown; }
}
This will generate the following CSS:
module
The @variants at-rule supports all of the values that are supported in the modules section of your config file:
responsive
hover
focus
group-hover
Note: In previous versions, Tailwind included undocumented @hoverable and @focusable directives. These were fundamentally flawed in how they worked, and have been removed in favor of the new @variants directive.
The @responsive directive however has not been removed, and we fully intend to continue to support it as a shortcut for @variants responsive {}.
Customize the separator character
By default, Tailwind uses a colon (:) as a separator between variants and utility names:
module
Some templating languages (like Pug) don't play nicely with this, so Tailwind 0.3 adds a new configuration option that lets you change this if needed:
module
Missing config keys now fallback to their default values
Prior to Tailwind 0.3, excluding a key (like backgroundColors) from your config file was undefined behavior.
To make upgrades smooth as new options are added to the config file, missing keys now fallback to their default values.
This has the added benefit of allowing you to completely omit keys from your config file if you don't intend to change the default values.
The exact behavior is as follows:
Top level keys fallback to their default values only if missing. The contents of top level keys are not merged, except for the two cases noted below.
The modules key is merged with the default modules key. This means that if you exclude a module from your config, it will be generated using the default settings. It will not be disabled unless you include the key and set it to false.
The options key is merged with the default options key. This means if you only want to change one option, you only need to provide that one key.
New utilities
.pin-none has been added to undo existing .pin-{side} utilities at different breakpoints
.resize-both has been added to allow resizing an element both horizontally and vertically
A completely new background attachment module has been added
A completely new background repeat module has been added
Completely new SVG fill and SVG stroke modules have been added
Upgrade Guide / Breaking Changes
Lists now have no margins by default
Impact: Medium
Until 0.3, Tailwind's Preflight base styles left ul and ol elements generally untouched, relying on the list-reset utility to remove default browser styling if you wanted to use a list for navigation or similar.
In 0.3, Tailwind still doesn't change list-style-type or padding on lists in our base styles, but we do remove margins:
ul, ol {
  margin: 0;
}
Tailwind already did this for all headings, block quotes, paragraph tags, etc., so removing margins on lists feels much more consistent.
It's unlikely this will impact your project as you were most likely overriding the browser's default margins with existing margin utilities.
If you were relying on the browser's default list margins, simply add margin utilities to your lists to make up for the now missing default margin.
.pin no longer sets width and height to 100%
Impact: Low
In an effort to make .pin{-side?} utilities easier to undo at different breakpoints, the all-sides .pin utility no longer sets width and height to 100%.
This will only affect you if you were using .pin on iframe, textarea, input, or button elements, and is easily remedied by adding the w-full and h-full utilities to those elements.
SVG fill no longer defaults to currentColor
Prior to 0.3, Tailwind's Preflight styles set all SVG fills to currentColor:
svg {
  fill: currentColor;
}
This made it harder to use icon sets like Feather that are drawn entirely with strokes with Tailwind, because they'd now be filled with the current text color by default instead of having no fill.
Tailwind 0.3 removes this base style entirely, and adds the fill-current class to make up for it, allowing you to be explicit when you want an SVG element to be filled with the current text color.
There's two ways you can update your project for this change:
Simply re-add the base styles above to your own CSS.
Add the fill-current class to any SVG elements that should be filled with the current text color."
203,"
Fix issue with dist files not being published due to bug in latest npm
",Fix issue with dist files not being published due to bug in latest npm
204,"
Fix overly specific border-radius reset for Chrome 62 button styles: https://github.com/tailwindcss/tailwindcss/pull/216
",Fix overly specific border-radius reset for Chrome 62 button styles: link
205,"
New Features
Add a custom prefix to all utilities
Optionally make all utilities !important
Round element corners independently
Cascading border colors and styles
Upgrade Guide / Breaking Changes
auto is no longer a hard-coded margin value
The defaultConfig function is now a separate module
Rounded utilities now combine position and radius size
Border width utilities no longer affect border color/style
@apply is now very strict about what classes can be applied
Add options key to your config
Spacing, radius, and border width utility declaration order changes


New Features

Add a custom prefix to all utilities
One of the most common questions we've received since releasing v0.1.0 is ""can I use Tailwind with {my existing CSS|another CSS framework}?""
While there was nothing stopping you from layering Tailwind on top of existing CSS, Tailwind has a lot of class names in common with other frameworks (.container, .mb-2, etc.) so you could run into problematic naming collisions if you weren't careful.
To fix this, you can now specify a custom prefix for all of the classes Tailwind generates under the new options key in your Tailwind config file:
js
{
  // ...
  options: {
    prefix: 'tw-',
    // ...
  },
}
Now all of Tailwind's utilities will include that prefix:
```html
 This... 

 ... becomes this: 

```
To learn more, read the full documentation.

Optionally make all utilities !important
Another common obstacle when trying to use Tailwind with existing CSS is dealing with specificity.
By default, Tailwind utilities are not marked as !important, which means that if your existing CSS has high specificity selectors, trying to override what those selectors are doing with a Tailwind utility just won't work.
To fix this, we've added another option to the options section of the Tailwind config file:
js
{
  // ...
  options: {
    // ...
    important: true,
    // ...
  },
}
If you set important to true, all of Tailwind's declarations will get marked as !important, so they can easily be used to override existing CSS.
To learn more, read the full documentation.

Round element corners independently
Up until now, you could only apply a border radius to pairs of corners, like the top two corners, left two corners, etc.
Now you can round corners independently too:
```html
 Round the top left corner: 

 Round the top right corner: 

 Round the bottom right corner: 

 Round the bottom left corner: 

```
See more examples in the border radius documentation.

Cascading border colors and styles
In v0.1.x, our border width utilities used the border shorthand property, which meant that setting a border width also set a style and color:
css
.border-2 {
  border: 2px solid config('colors.grey-lighter');
}
This meant that if you wanted to change the border style or color of an element and then change the border width at a larger breakpoint, you'd have to re-specify the style/color:
```html

```
Now our border width utilities only specify the width, so any color or style modifications will properly cascade to larger breakpoints without having to be re-specified:
```html

```
This is technically a breaking change, so check out the relevant section in the upgrade guide to understand how this might affect your site.

Upgrade Guide / Breaking Changes

auto is no longer a hard-coded margin value
Impact: Low
Instead of hard-coding mx-auto, ml-auto, etc. into Tailwind itself, we've moved those values into the customizable margin scale in the config file.
So if you're using a custom config file, add auto to your margin scale:
diff
  {
    // ...
    margin: {
+     'auto': 'auto',
      'px': '1px',
      '0': '0',
      '1': '0.25rem',
      '2': '0.5rem',
      '3': '0.75rem',
      '4': '1rem',
      '6': '1.5rem',
      '8': '2rem',
    },
  }

The defaultConfig function is now a separate module
Impact: Low
In the generated Tailwind config file, we include a line of code showing you how to reference Tailwind's default config values in case you'd like to reference them in your own config file.
For technical reasons, the way this works has changed:
```js
// The old way:
var defaultConfig = require('tailwindcss').defaultConfig()
// The new way:
var defaultConfig = require('tailwindcss/defaultConfig')()
```
The good news is that this change makes it possible for you to import your custom config file into your front-end JavaScript if you'd like; making it easy to re-use the same color palette with libraries like D3.js or Chart.js for example.

Rounded utilities now combine position and radius size
Impact: High
Previously, border radius position and radius size were specified with two utilities. Now, size and position are combined into the same utility:
```html
 The old way: 

 The new way: 

```
We made this change because it makes working with border radius generally more predictable and much more flexible.
For example, previously, if you wanted to round 3 corners of an element, you could try this, but it wouldn't work:
```html
 Doesn't work: 

```
Instead, you'd see that only the left side was rounded. This is because the previous implementation of rounded-l worked by unrounding the right-side corners.
Now you can round 3 corners of an element two ways:
```html
 Option 1: Round two sides 

 Option 3: Round the corners separately 

```

Upgrade steps


If you have a custom config file, make sure your 0 value border radius utility appears first in your border radius scale:
diff
  {
    // ...
    borderRadius: {
+     'none': '0',
      'sm': '.125rem',
      default: '.25rem',
      'lg': '.5rem',
      'full': '9999px',
-     'none': '0',
    },
  }
This is important if you ever need to reset the border radius of a side at a breakpoint and add a border radius to another side that shares a corner.


Look for any time you round one side of an element in your codebase and collapse the separate position and size utilities into the new corresponding compound utility:
```html
 Change this: 

 To this: 

 Change this: 

 To this: 

```


If you were changing which side of an element was rounded responsively, now you'll need to explicitly unround one side when you round the other:
```html
 Change this: 

 To this: 

```



Border width utilities no longer affect border color/style
Impact: Medium
Previously, applying a border width utility like .border-2 would not only set the border width; it would also override the border color and border style.
This is no longer the case, so if you were ever depending on that behavior (for example when overriding things responsively), you'll need to update your code to explicitly change the color and style:
```html
 Change this: 

 To this: 

```
It's very unlikely that you were depending on this behavior so chances are you won't need to make this sort of change.
Instead, you'll probably notice this change from the opposite side, where you had to define your border color twice if you changed the size responsively. 
Now you only need to define the color or style once, so although you don't have to remove the double definitions, they are now redundant and safe to remove:
```html
 Change this: 

 To this: 

```

@apply is now very strict about what classes can be applied
Impact: Low
Previously, @apply would only fail if it couldn't find a matching class to mixin. This led to unexpected behavior for a lot of people when trying to @apply complex classes.
So now instead of silently applying a class in a way that results in unexpected behavior, @apply behaves much more strictly and will throw an explicit error if trying to @apply something other than simple, un-nested, single definition classes.
Here are the rules @apply now enforces:


You cannot @apply a class that is part of any ruleset which is nested within an at-rule.
This means you can't @apply classes that are nested within media queries:
```css
@media (min-width: 300px) {
  .a { color: blue; }
}
.b {
  / This will throw an error /
  @apply .a;
}
```
This never worked before anyways, but now you'll get an error instead of wondering why your class didn't inherit the responsive behavior of the class you tried to apply.


You cannot @apply a class that contains a pseudo-selector.
```css
.a:hover {
  color: red;
}
.b {
  / This will throw an error /
  @apply .a;
}
```
This never worked before either, but now the error message you get will be more helpful.


You cannot @apply a class that is included in multiple rulesets.
```css
.a {
  color: red;
}
.b {
  / This will throw an error /
  @apply .a;
}
.a {
  color: blue;
}
```
This is what caused the confusion in #112. While supporting this wouldn't have negative consequences 95% of the time, it can be really confusing when it does cause problems.
@apply is meant for single stand-alone rulesets, so we don't see a reason to support this. If a class appears in multiple rulesets, it's a sign that something complex is happening, and @apply is not intended to be used to inherit complex behavior.


If your build fails because of @apply in v0.2.0 but built successfully in v0.1.0, it's very likely something on your site wasn't actually working the way you expect.

Add options key to your config
Impact: Low
If you'd like to use the new prefix or important options, you'll want to add the options key to the bottom of your config file.
Here's what it looks like with the default values:
js
{
  // ...
  options: {
    prefix: '',
    important: false,
  },
}
This key is optional, so nothing will break if you don't add it.

Spacing, radius, and border width utility declaration order changes
Impact: Low
Previously, these utilities were declared purely based on the order in your scale, and with more specific declarations declared first.
For example, padding looked something like this:
```css
.pt-0 { / ... / }
.pr-0 { / ... / }
.pb-0 { / ... / }
.pl-0 { / ... / }
.px-0 { / ... / }
.py-0 { / ... / }
.p-0 { / ... / }
.pt-1 { / ... / }
.pr-1 { / ... / }
.pb-1 { / ... / }
.pl-1 { / ... / }
.px-1 { / ... / }
.py-1 { / ... / }
.p-1 { / ... / }
.pt-2 { / ... / }
.pr-2 { / ... / }
.pb-2 { / ... / }
.pl-2 { / ... / }
.px-2 { / ... / }
.py-2 { / ... / }
.p-2 { / ... / }
```
This meant that more general utilities like p-2 would override side-specific utilities like pl-1 if the scale value in the general utility was higher:
```html
 This markup: 

 ...is equivalent to this CSS: 

#padded {
  padding-top: config('padding.4');
  padding-bottom: config('padding.4');
  padding-right: config('padding.4');
  padding-left: config('padding.4');
}

```
Now, spacing, radius, and border width utilities are declared from most general to most specific, sorted by position first, then by the scale:
```css
.p-0 { / ... / }
.p-1 { / ... / }
.p-2 { / ... / }
.py-0 { / ... / }
.px-0 { / ... / }
.py-1 { / ... / }
.px-1 { / ... / }
.py-2 { / ... / }
.px-2 { / ... / }
.pt-0 { / ... / }
.pr-0 { / ... / }
.pb-0 { / ... / }
.pl-0 { / ... / }
.pt-1 { / ... / }
.pr-1 { / ... / }
.pb-1 { / ... / }
.pl-1 { / ... / }
.pt-2 { / ... / }
.pr-2 { / ... / }
.pb-2 { / ... / }
.pl-2 { / ... / }
```
This means that setting a left padding will override an x padding which will override an ""all sides"" padding:
```html
 This markup: 

 ...is equivalent to this CSS: 

#padded {
  padding-top: config('padding.4');
  padding-bottom: config('padding.4');
  padding-right: config('padding.2');
  padding-left: config('padding.1');
}

```
It's very unlikely that this change will break your layout; it's more likely that you were working around this annoying behavior:
```html
 What you've probably written: 

 What you can write now: 

```","New Features
Add a custom prefix to all utilities
Optionally make all utilities !important
Round element corners independently
Cascading border colors and styles
Upgrade Guide / Breaking Changes
auto is no longer a hard-coded margin value
The defaultConfig function is now a separate module
Rounded utilities now combine position and radius size
Border width utilities no longer affect border color/style
@apply is now very strict about what classes can be applied
Add options key to your config
Spacing, radius, and border width utility declaration order changes
New Features
Add a custom prefix to all utilities
One of the most common questions we've received since releasing v0.1.0 is ""can I use Tailwind with {my existing CSS|another CSS framework}?""
While there was nothing stopping you from layering Tailwind on top of existing CSS, Tailwind has a lot of class names in common with other frameworks (.container, .mb-2, etc.) so you could run into problematic naming collisions if you weren't careful.
To fix this, you can now specify a custom prefix for all of the classes Tailwind generates under the new options key in your Tailwind config file:
js
{
  // ...
  options: {
    prefix: 'tw-',
    // ...
  },
}
Now all of Tailwind's utilities will include that prefix:
```html
 This... 
... becomes this: 
```
To learn more, read the full documentation.
Optionally make all utilities !important
Another common obstacle when trying to use Tailwind with existing CSS is dealing with specificity.
By default, Tailwind utilities are not marked as !important, which means that if your existing CSS has high specificity selectors, trying to override what those selectors are doing with a Tailwind utility just won't work.
To fix this, we've added another option to the options section of the Tailwind config file:
js
{
  // ...
  options: {
    // ...
    important: true,
    // ...
  },
}
If you set important to true, all of Tailwind's declarations will get marked as !important, so they can easily be used to override existing CSS.
To learn more, read the full documentation.
Round element corners independently
Up until now, you could only apply a border radius to pairs of corners, like the top two corners, left two corners, etc.
Now you can round corners independently too:
```html
 Round the top left corner: 
Round the top right corner: 
Round the bottom right corner: 
Round the bottom left corner: 
```
See more examples in the border radius documentation.
Cascading border colors and styles
In v0.1.x, our border width utilities used the border shorthand property, which meant that setting a border width also set a style and color:
css
.border-2 {
  border: 2px solid config('colors.grey-lighter');
}
This meant that if you wanted to change the border style or color of an element and then change the border width at a larger breakpoint, you'd have to re-specify the style/color:
```html
modulehtml
```
This is technically a breaking change, so check out the relevant section in the upgrade guide to understand how this might affect your site.
Upgrade Guide / Breaking Changes
auto is no longer a hard-coded margin value
Impact: Low
Instead of hard-coding mx-auto, ml-auto, etc. into Tailwind itself, we've moved those values into the customizable margin scale in the config file.
So if you're using a custom config file, add auto to your margin scale:
diff
  {
    // ...
    margin: {
+     'auto': 'auto',
      'px': '1px',
      '0': '0',
      '1': '0.25rem',
      '2': '0.5rem',
      '3': '0.75rem',
      '4': '1rem',
      '6': '1.5rem',
      '8': '2rem',
    },
  }
The defaultConfig function is now a separate module
Impact: Low
In the generated Tailwind config file, we include a line of code showing you how to reference Tailwind's default config values in case you'd like to reference them in your own config file.
For technical reasons, the way this works has changed:
module
The good news is that this change makes it possible for you to import your custom config file into your front-end JavaScript if you'd like; making it easy to re-use the same color palette with libraries like D3.js or Chart.js for example.
Rounded utilities now combine position and radius size
Impact: High
Previously, border radius position and radius size were specified with two utilities. Now, size and position are combined into the same utility:
```html
 The old way: 
The new way: 
modulehtml
 Doesn't work: 
modulehtml
 Option 1: Round two sides 
Option 3: Round the corners separately 
```
Upgrade steps
If you have a custom config file, make sure your 0 value border radius utility appears first in your border radius scale:
diff
  {
    // ...
    borderRadius: {
+     'none': '0',
      'sm': '.125rem',
      default: '.25rem',
      'lg': '.5rem',
      'full': '9999px',
-     'none': '0',
    },
  }
This is important if you ever need to reset the border radius of a side at a breakpoint and add a border radius to another side that shares a corner.
Look for any time you round one side of an element in your codebase and collapse the separate position and size utilities into the new corresponding compound utility:
```html
 Change this: 
To this: 
Change this: 
To this: 
```
If you were changing which side of an element was rounded responsively, now you'll need to explicitly unround one side when you round the other:
```html
 Change this: 
To this: 
```
Border width utilities no longer affect border color/style
Impact: Medium
Previously, applying a border width utility like .border-2 would not only set the border width; it would also override the border color and border style.
This is no longer the case, so if you were ever depending on that behavior (for example when overriding things responsively), you'll need to update your code to explicitly change the color and style:
```html
 Change this: 
To this: 
modulehtml
 Change this: 
To this: 
```
@apply is now very strict about what classes can be applied
Impact: Low
Previously, @apply would only fail if it couldn't find a matching class to mixin. This led to unexpected behavior for a lot of people when trying to @apply complex classes.
So now instead of silently applying a class in a way that results in unexpected behavior, @apply behaves much more strictly and will throw an explicit error if trying to @apply something other than simple, un-nested, single definition classes.
Here are the rules @apply now enforces:
You cannot @apply a class that is part of any ruleset which is nested within an at-rule.
This means you can't @apply classes that are nested within media queries:
module
This never worked before anyways, but now you'll get an error instead of wondering why your class didn't inherit the responsive behavior of the class you tried to apply.
You cannot @apply a class that contains a pseudo-selector.
module
This never worked before either, but now the error message you get will be more helpful.
You cannot @apply a class that is included in multiple rulesets.
module
This is what caused the confusion in #112. While supporting this wouldn't have negative consequences 95% of the time, it can be really confusing when it does cause problems.
@apply is meant for single stand-alone rulesets, so we don't see a reason to support this. If a class appears in multiple rulesets, it's a sign that something complex is happening, and @apply is not intended to be used to inherit complex behavior.
If your build fails because of @apply in v0.2.0 but built successfully in v0.1.0, it's very likely something on your site wasn't actually working the way you expect.
Add options key to your config
Impact: Low
If you'd like to use the new prefix or important options, you'll want to add the options key to the bottom of your config file.
Here's what it looks like with the default values:
js
{
  // ...
  options: {
    prefix: '',
    important: false,
  },
}
This key is optional, so nothing will break if you don't add it.
Spacing, radius, and border width utility declaration order changes
Impact: Low
Previously, these utilities were declared purely based on the order in your scale, and with more specific declarations declared first.
For example, padding looked something like this:
module
This meant that more general utilities like p-2 would override side-specific utilities like pl-1 if the scale value in the general utility was higher:
```html
 This markup: 
...is equivalent to this CSS: 
padded {
padding-top: config('padding.4');
  padding-bottom: config('padding.4');
  padding-right: config('padding.4');
  padding-left: config('padding.4');
}
modulecss
.p-0 { / ... / }
.p-1 { / ... / }
.p-2 { / ... / }
.py-0 { / ... / }
.px-0 { / ... / }
.py-1 { / ... / }
.px-1 { / ... / }
.py-2 { / ... / }
.px-2 { / ... / }
.pt-0 { / ... / }
.pr-0 { / ... / }
.pb-0 { / ... / }
.pl-0 { / ... / }
.pt-1 { / ... / }
.pr-1 { / ... / }
.pb-1 { / ... / }
.pl-1 { / ... / }
.pt-2 { / ... / }
.pr-2 { / ... / }
.pb-2 { / ... / }
.pl-2 { / ... / }
modulehtml
 This markup: 
...is equivalent to this CSS: 
padded {
padding-top: config('padding.4');
  padding-bottom: config('padding.4');
  padding-right: config('padding.2');
  padding-left: config('padding.1');
}
modulehtml
 What you've probably written: 
What you can write now: 
```"
206,"
Fix CDN files not being published to npm
",Fix CDN files not being published to npm
207,"
Fix CLI tool not loading config files properly (#149)
Apply the same default placeholder styling that's applied to inputs to textareas (#119)
","Fix CLI tool not loading config files properly (#149)
Apply the same default placeholder styling that's applied to inputs to textareas (#119)"
208,"
If using Webpack, it will now watch your config file changes
Autoprefix dist assets for quick hacking and prototyping
Move list utilities earlier in stylesheet to allow overriding with spacing utilities (bug fix)
Add my-auto, mt-auto, and mb-auto margin utilities
Add sans-serif to end of default sans font stack
When running tailwind init [filename], automatically append .js to filename if not present
Support default fallback value in config(...) function, ie. config('colors.blue', #0000ff)
Don't output empty media queries if Tailwind processes a file that doesn't use Tailwind
","If using Webpack, it will now watch your config file changes
Autoprefix dist assets for quick hacking and prototyping
Move list utilities earlier in stylesheet to allow overriding with spacing utilities (bug fix)
Add my-auto, mt-auto, and mb-auto margin utilities
Add sans-serif to end of default sans font stack
When running tailwind init [filename], automatically append .js to filename if not present
Support default fallback value in config(...) function, ie. config('colors.blue', #0000ff)
Don't output empty media queries if Tailwind processes a file that doesn't use Tailwind"
209,"
Add new .scrolling-touch and .scrolling-auto utilities for controlling inertial scroll behavior on WebKit touch devices
Generate separate dist files for preflight, utilities, and tailwind for CDN usage
","Add new .scrolling-touch and .scrolling-auto utilities for controlling inertial scroll behavior on WebKit touch devices
Generate separate dist files for preflight, utilities, and tailwind for CDN usage"
210,"
Fix issue with config option not being respected in tailwind build
Target Node 6.9.0 explicitly (instead of 8.6 implicitly) to support more users
","Fix issue with config option not being respected in tailwind build
Target Node 6.9.0 explicitly (instead of 8.6 implicitly) to support more users"
211,"
Fix tailwind build CLI command not writing output files
",Fix tailwind build CLI command not writing output files
212,,
