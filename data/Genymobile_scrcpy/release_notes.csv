Index,Release Note,Release Note With Abstraction
1,"To receive a notification on new releases, click on Watch > Custom > Releases on the top.

scrcpy v2.0
Changes since v1.25:
 - Add Audio forwarding (#14, #3757)
 - Add H265 and AV1 video codec support (#3713)
 - Add --list-displays and --list-encoders
 - Fix clicks on Chrome when --forward-on-clicks is enabled (#3635)
 - Retry on spurious encoder error (#3693)
 - Make --turn-screen-off work on all displays (#3716)
 - Restore resizing workaround for Windows (#3640)
 - Upgrade platform-tools to 34.0.1 (adb) in Windows releases
 - Upgrade FFmpeg to 6.0 in Windows releases (and use a minimal build)
 - Upgrade SDL to 2.26.4 in Windows releases

Highlights
Read the blog post announcing the release: scrcpy 2.0, with audio.


Twitter: @scrcpy_app
Reddit: r/scrcpy
","To receive a notification on new releases, click on Watch > Custom > Releases on the top.
scrcpy v2.0
Changes since v1.25:
 - Add Audio forwarding (#14, #3757)
 - Add H265 and AV1 video codec support (#3713)
 - Add --list-displays and --list-encoders
 - Fix clicks on Chrome when --forward-on-clicks is enabled (#3635)
 - Retry on spurious encoder error (#3693)
 - Make --turn-screen-off work on all displays (#3716)
 - Restore resizing workaround for Windows (#3640)
 - Upgrade platform-tools to 34.0.1 (adb) in Windows releases
 - Upgrade FFmpeg to 6.0 in Windows releases (and use a minimal build)
 - Upgrade SDL to 2.26.4 in Windows releases
Highlights
Read the blog post announcing the release: scrcpy 2.0, with audio.
Twitter: @scrcpy_app
Reddit: r/scrcpy"
2,"To receive a notification on new releases, click on Watch > Custom > Releases on the top.

scrcpy v1.25
Changes since v1.24:
 - Adapt copy-paste internals for Android 13 (#3497)
 - Add support for high-precision scrolling (#3363, #3369)
 - Add desktop entry files for Linux (#295, #296, #748, #1636, #3351)
 - Add bash and zsh autocompletion for -s/--serial (#3522, #3523)
 - Use current adb port (if any) for --tcpip (#3591, #3592)
 - Add fallback to get display information on some devices (#3416, #3573)
 - Fix click behavior when --forward-all-clicks is set (#3568, #3579)
 - Fix support for non-ASCII characters in window title (#2932, #3547)
 - Fix getDisplayIds() crash on some versions of Android 13 beta (#3446)
 - Upgrade platform-tools to 33.0.3 (adb) in Windows releases
 - Upgrade FFmpeg to 5.1.2 in Windows 64-bit releases
 - Upgrade SDL to 2.26.1 in Windows releases
 - Various technical fixes

Highlights
Android 13
Recent method signature changes in Android 13 broke copy-paste for scrcpy (#3497). This version adapt the calls to make it work again.
High-precision scrolling
This version uses high-precision scrolling if the computer supports it. As a result, scrolling is smoother, as you can see in #3363.
Serial auto-completion
When several devices are connected, it might be necessary to pass the serial of the device to mirror.
The serial is now auto-completed in bash and zsh:
bash
scrcpy -s <tab><tab>  # auto-complete by the devices listed by ""adb devices""
Menu shortcuts
Two new menu shortcuts are added on Linux (here is a screenshot on XFCE):

They allow to launch scrcpy (without arguments) either with a visible terminal or not.
To pass command line arguments, it must still be started from a terminal or a script though.


Twitter: @scrcpy_app
Reddit: r/scrcpy
","To receive a notification on new releases, click on Watch > Custom > Releases on the top.
scrcpy v1.25
Changes since v1.24:
 - Adapt copy-paste internals for Android 13 (#3497)
 - Add support for high-precision scrolling (#3363, #3369)
 - Add desktop entry files for Linux (#295, #296, #748, #1636, #3351)
 - Add bash and zsh autocompletion for -s/--serial (#3522, #3523)
 - Use current adb port (if any) for --tcpip (#3591, #3592)
 - Add fallback to get display information on some devices (#3416, #3573)
 - Fix click behavior when --forward-all-clicks is set (#3568, #3579)
 - Fix support for non-ASCII characters in window title (#2932, #3547)
 - Fix getDisplayIds() crash on some versions of Android 13 beta (#3446)
 - Upgrade platform-tools to 33.0.3 (adb) in Windows releases
 - Upgrade FFmpeg to 5.1.2 in Windows 64-bit releases
 - Upgrade SDL to 2.26.1 in Windows releases
 - Various technical fixes
Highlights
Android 13
Recent method signature changes in Android 13 broke copy-paste for scrcpy (#3497). This version adapt the calls to make it work again.
High-precision scrolling
This version uses high-precision scrolling if the computer supports it. As a result, scrolling is smoother, as you can see in #3363.
Serial auto-completion
When several devices are connected, it might be necessary to pass the serial of the device to mirror.
The serial is now auto-completed in bash and zsh:
bash
scrcpy -s   # auto-complete by the devices listed by ""adb devices""
Menu shortcuts
Two new menu shortcuts are added on Linux (here is a screenshot on XFCE):
They allow to launch scrcpy (without arguments) either with a visible terminal or not.
To pass command line arguments, it must still be started from a terminal or a script though.
Twitter: @scrcpy_app
Reddit: r/scrcpy"
3,"To receive a notification on new releases, click on Watch > Custom > Releases on the top.

scrcpy v1.24
Changes since v1.23:
 - Adapt input injection for Android 13 (#3186, #3190)
 - Add --no-power-on (#3148, #3210)
 - Read $ANDROID_SERIAL if no selector is specified (#3111, #3113)
 - Consider emulators as TCP/IP devices (-e) (#3137)
 - Apply requested window size in OTG mode (#3099, #3219)
 - Add specific exit code for device disconnection (#3083, #3085)
 - Enable libusb support for Windows 32-bit releases (#3204, #3206)
 - Upgrade libusb to 1.0.26 in Windows releases (#3206)
 - Upgrade platform-tools to 33.0.1 (adb) in Windows releases (#3206)
 - Upgrade SDL to 2.0.22 in Windows releases
 - Upgrade FFmpeg to 5.0.1 in Windows 64-bit releases
 - Improve some error messages
 - Various technical fixes

Highlights
Android 13 (preview)
Input injection from previous scrcpy versions failed on Android 13 preview (#3186). This version makes it work.
HID/OTG support for Windows 32-bit
The previous scrcpy version (v1.23) added HID/OTG support for all platforms except Windows 32-bit. By upgrading to the latest libusb version, Windows 32-bit is now supported.
$ANDROID_SERIAL
adb uses the ANDROID_SERIAL environment variable if no -s is specified. Use this same variable in scrcpy if no selector is specified (#3111):
```bash
via a command line parameter
adb -s 0123456789abcdef shell
scrcpy -s 0123456789abcdef
via an environment variable
export ANDROID_SERIAL=0123456789abcdef
adb shell
scrcpy
```
On Windows, setting an environment variable is slightly different:
cmd
:: in cmd
set ANDROID_SERIAL=0123456789abcdef
```powershell
in PowerShell
$env:ANDROID_SERIAL = '0123456789abcdef'
```
No power on
By default, on start, the device is powered on. A new option has been added to disable this behavior:
bash
scrcpy --no-power-on


Twitter: @scrcpy_app
Reddit: r/scrcpy
","To receive a notification on new releases, click on Watch > Custom > Releases on the top.
scrcpy v1.24
Changes since v1.23:
 - Adapt input injection for Android 13 (#3186, #3190)
 - Add --no-power-on (#3148, #3210)
 - Read $ANDROID_SERIAL if no selector is specified (#3111, #3113)
 - Consider emulators as TCP/IP devices (-e) (#3137)
 - Apply requested window size in OTG mode (#3099, #3219)
 - Add specific exit code for device disconnection (#3083, #3085)
 - Enable libusb support for Windows 32-bit releases (#3204, #3206)
 - Upgrade libusb to 1.0.26 in Windows releases (#3206)
 - Upgrade platform-tools to 33.0.1 (adb) in Windows releases (#3206)
 - Upgrade SDL to 2.0.22 in Windows releases
 - Upgrade FFmpeg to 5.0.1 in Windows 64-bit releases
 - Improve some error messages
 - Various technical fixes
Highlights
Android 13 (preview)
Input injection from previous scrcpy versions failed on Android 13 preview (#3186). This version makes it work.
HID/OTG support for Windows 32-bit
The previous scrcpy version (v1.23) added HID/OTG support for all platforms except Windows 32-bit. By upgrading to the latest libusb version, Windows 32-bit is now supported.
$ANDROID_SERIAL
adb uses the ANDROID_SERIAL environment variable if no -s is specified. Use this same variable in scrcpy if no selector is specified (#3111):
module
On Windows, setting an environment variable is slightly different:
cmd
:: in cmd
set ANDROID_SERIAL=0123456789abcdef
module
No power on
By default, on start, the device is powered on. A new option has been added to disable this behavior:
bash
scrcpy --no-power-on
Twitter: @scrcpy_app
Reddit: r/scrcpy"
4,"To receive a notification on new releases, click on Watch > Custom > Releases on the top.

scrcpy v1.23
Changes since v1.22:
 - Add HID/OTG support for Windows (--otg only) (#2773, #3011)
 - Add HID/OTG support for macOS (#2774, #3031)
 - Improve device selection (list devices, -d, -e) (#3005)
 - Downscale and retry on MediaCodec error in more cases (#2990, #3043)
 - Add ZSH completion script (#3012)
 - Add Bash completion script (#2930, #3048)
 - Add --no-cleanup option (#1764, #3020)
 - Add --printf-fps (#468, #3030)
 - Print both compiled and linked version of libs on --version
 - Fix FPS counter (broken in v1.22)
 - Various technical refactors and fixes

Highlights
HID/OTG on all platforms
Physical keyboard and mouse simulation (HID) was only available on Linux.
The previous release (v1.22) introduced a new OTG feature (--otg), to use the computer keyboard and mouse as if they were plugged directly to the device via an OTG cable, without mirroring and without requiring adb (USB debugging).
In v1.23, this feature is now also available on Windows (with some limitations) and macOS.
HID keyboard and mouse may be used either in ""mirroring"" mode (the default with mirroring enabled) or OTG mode (when --otg is passed):
``` bash
HID in mirroring mode
scrcpy --hid-keyboard --hid-mouse
scrcpy -KM  # the same, but using short options
HID in OTG mode
scrcpy --otg --hid-keyboard --hid-mouse
scrcpy --otg -KM  # the same, but using short options
scrcpy --otg      # also the same, both keyboard and mouse are enabled if not specified
```
On Windows, it is not possible to open a USB device if it is already open by another process (like the adb daemon). As a consequence, we can't send HID events if adb is running. Therefore, HID in mirroring mode is not possible, only OTG mode is supported on Windows (and the adb daemon is killed before starting). See #3011.
EDIT: And there are still issues on Windows when USB debugging is disabled: #3050 :disappointed: 
Also, due to an issue in the libusb prebuilt library for win32, this feature is disabled in the win32 release (it will be enabled later when it's fixed).
Also note that the mouse capture (when --hid-mouse is enabled) has some issues on macOS. A workaround for the main problem has been implemented, but you might need an additional click to get the mouse pointer back (see #3031).
| HID support    |   Mirroring mode   |      OTG mode
| -------------- |:------------------:|:------------------:
| Linux          | :heavy_check_mark: | :heavy_check_mark:
| macOS          | :heavy_check_mark: | :heavy_check_mark:
| Windows 64-bit |        :x:         | :heavy_check_mark:
| Windows 32-bit |        :x:         |        :x:
Improve device selection
Until now, if several devices were connected, scrcpy failed with:
console
$ scrcpy
scrcpy 1.22 <https://github.com/Genymobile/scrcpy>
error: more than one device/emulator
ERROR: ""adb get-serialno"" returned with value 1
ERROR: Could not get device serial
ERROR: Server connection failed
This was not very user-friendly: the user had to call adb devices manually to get the serial, then call scrcpy -s xxxxxxxxxx explicitly.
This release introduces features to improve device selection (#3005).
If several devices are connected, scrcpy prints the list of devices:
console
$ scrcpy
…
ERROR: Multiple (3) ADB devices:
ERROR:     -->   (usb)  fedcba09                        device  GM1913
ERROR:     -->   (usb)  01234567890abcdef         unauthorized  
ERROR:     --> (tcpip)  192.168.1.1:5555                device  Nexus_5
ERROR: Select a device via -s (--serial), -d (--select-usb) or -e (--select-tcpip)
ERROR: Server connection failed
So it is possible to immediately call scrcpy again with -s.
In addition, two new options allow to select a USB or TCP/IP device when there is only one connected:
 - -d (or --select-usb) uses a USB device (like adb -d)
 - -e (or --select-tcpip) uses a TCP/IP device (like adb -e)
For example, to run scrcpy with the single TCP/IP device:
console
$ scrcpy -e
…
DEBUG: ADB device found:
DEBUG:           (usb)  fedcba09                        device  GM1913
DEBUG:           (usb)  05f5e60a0ae518e5          unauthorized  
DEBUG:     --> (tcpip)  192.168.1.1:5555                device  Nexus_5
To run scrcpy with a single USB device:
console
$ scrcpy -d
…
ERROR: Multiple (2) ADB devices over USB:
ERROR:     -->   (usb)  fedcba09                        device  GM1913
ERROR:     -->   (usb)  01234567890abcdef         unauthorized  
ERROR:         (tcpip)  192.168.1.1:5555                device  Nexus_5
ERROR: Select a device via -s (--serial), -d (--select-usb) or -e (--select-tcpip)
ERROR: Server connection failed
Since there are several devices connected over USB in this example, it fails, with a detailed error message.
In OTG mode, the USB devices are also listed for convenience:
console
$ scrcpy --otg
…
ERROR: Multiple (2) USB devices:
ERROR:     --> fedcba09           (xxxx:xxxx)  OnePlus SM8150-MTP
ERROR:     --> 01234567890abcdef  (xxxx:xxxx)  LGE Nexus 5
ERROR: Select a device via -s (--serial)
Bash and ZSH completion scripts
Scrcpy has a lot of options. For convenience, auto-completion scripts were added for Bash (#3048) and ZSH (@hltdev8642, #3012).
Auto-downscale on MediaCodec error
Some devices are not able to encode a video at the device screen definition. As a consequence, for many users, the first experience with scrcpy was just a failure with a MediaCodec exception.
To solve this problem, the previous release (v1.22) added a mechanism to catch MediaCodec errors on start and automatically retry with a lower definition (scrcpy -m1024).
However, MediaCodec may fail in different ways (#2990, #3043), and some of them were not catched. Now they are.
FPS counter
It was possible to log the capture framerate in the console (printed every second), by pressing MOD+i in the scrcpy window. It was broken in v1.22 (nobody reported it, so it's probably not widely used), it's fixed now.
This release adds a new option --print-fps to start the FPS counter immediately.
Note that a new frame is produced only when the device screen surface ""changes"", so it's expected to get a low framerate depending on what you do on the device. For example:
 - if you play a 25 fps fullscreen video, then the capture framerate will not be higher than 25 fps;
 - if nothing changes on your screen, then the capture framerate will be 0 fps.
Contact
Scrcpy now has a twitter account: @scrcpy_app
There is also a subreddit: r/scrcpy
This might sometimes be more appropriate than GitHub issues when it's not to report a bug.","To receive a notification on new releases, click on Watch > Custom > Releases on the top.
scrcpy v1.23
Changes since v1.22:
 - Add HID/OTG support for Windows (--otg only) (#2773, #3011)
 - Add HID/OTG support for macOS (#2774, #3031)
 - Improve device selection (list devices, -d, -e) (#3005)
 - Downscale and retry on MediaCodec error in more cases (#2990, #3043)
 - Add ZSH completion script (#3012)
 - Add Bash completion script (#2930, #3048)
 - Add --no-cleanup option (#1764, #3020)
 - Add --printf-fps (#468, #3030)
 - Print both compiled and linked version of libs on --version
 - Fix FPS counter (broken in v1.22)
 - Various technical refactors and fixes
Highlights
HID/OTG on all platforms
Physical keyboard and mouse simulation (HID) was only available on Linux.
The previous release (v1.22) introduced a new OTG feature (--otg), to use the computer keyboard and mouse as if they were plugged directly to the device via an OTG cable, without mirroring and without requiring adb (USB debugging).
In v1.23, this feature is now also available on Windows (with some limitations) and macOS.
HID keyboard and mouse may be used either in ""mirroring"" mode (the default with mirroring enabled) or OTG mode (when --otg is passed):
module
On Windows, it is not possible to open a USB device if it is already open by another process (like the adb daemon). As a consequence, we can't send HID events if adb is running. Therefore, HID in mirroring mode is not possible, only OTG mode is supported on Windows (and the adb daemon is killed before starting). See #3011.
EDIT: And there are still issues on Windows when USB debugging is disabled: #3050 :disappointed: 
Also, due to an issue in the libusb prebuilt library for win32, this feature is disabled in the win32 release (it will be enabled later when it's fixed).
Also note that the mouse capture (when --hid-mouse is enabled) has some issues on macOS. A workaround for the main problem has been implemented, but you might need an additional click to get the mouse pointer back (see #3031).
| HID support    |   Mirroring mode   |      OTG mode
| -------------- |:------------------:|:------------------:
| Linux          | :heavy_check_mark: | :heavy_check_mark:
| macOS          | :heavy_check_mark: | :heavy_check_mark:
| Windows 64-bit |        :x:         | :heavy_check_mark:
| Windows 32-bit |        :x:         |        :x:
Improve device selection
Until now, if several devices were connected, scrcpy failed with:
console
$ scrcpy
scrcpy 1.22    (usb)  fedcba09                        device  GM1913
ERROR:     -->   (usb)  01234567890abcdef         unauthorized
ERROR:     --> (tcpip)  192.168.1.1:5555                device  Nexus_5
ERROR: Select a device via -s (--serial), -d (--select-usb) or -e (--select-tcpip)
ERROR: Server connection failed
So it is possible to immediately call scrcpy again with -s.
In addition, two new options allow to select a USB or TCP/IP device when there is only one connected:
 - -d (or --select-usb) uses a USB device (like adb -d)
 - -e (or --select-tcpip) uses a TCP/IP device (like adb -e)
For example, to run scrcpy with the single TCP/IP device:
console
$ scrcpy -e
…
DEBUG: ADB device found:
DEBUG:           (usb)  fedcba09                        device  GM1913
DEBUG:           (usb)  05f5e60a0ae518e5          unauthorized
DEBUG:     --> (tcpip)  192.168.1.1:5555                device  Nexus_5
To run scrcpy with a single USB device:
console
$ scrcpy -d
…
ERROR: Multiple (2) ADB devices over USB:
ERROR:     -->   (usb)  fedcba09                        device  GM1913
ERROR:     -->   (usb)  01234567890abcdef         unauthorized
ERROR:         (tcpip)  192.168.1.1:5555                device  Nexus_5
ERROR: Select a device via -s (--serial), -d (--select-usb) or -e (--select-tcpip)
ERROR: Server connection failed
Since there are several devices connected over USB in this example, it fails, with a detailed error message.
In OTG mode, the USB devices are also listed for convenience:
console
$ scrcpy --otg
…
ERROR: Multiple (2) USB devices:
ERROR:     --> fedcba09           (xxxx:xxxx)  OnePlus SM8150-MTP
ERROR:     --> 01234567890abcdef  (xxxx:xxxx)  LGE Nexus 5
ERROR: Select a device via -s (--serial)
Bash and ZSH completion scripts
Scrcpy has a lot of options. For convenience, auto-completion scripts were added for Bash (#3048) and ZSH (@hltdev8642, #3012).
Auto-downscale on MediaCodec error
Some devices are not able to encode a video at the device screen definition. As a consequence, for many users, the first experience with scrcpy was just a failure with a MediaCodec exception.
To solve this problem, the previous release (v1.22) added a mechanism to catch MediaCodec errors on start and automatically retry with a lower definition (scrcpy -m1024).
However, MediaCodec may fail in different ways (#2990, #3043), and some of them were not catched. Now they are.
FPS counter
It was possible to log the capture framerate in the console (printed every second), by pressing MOD+i in the scrcpy window. It was broken in v1.22 (nobody reported it, so it's probably not widely used), it's fixed now.
This release adds a new option --print-fps to start the FPS counter immediately.
Note that a new frame is produced only when the device screen surface ""changes"", so it's expected to get a low framerate depending on what you do on the device. For example:
 - if you play a 25 fps fullscreen video, then the capture framerate will not be higher than 25 fps;
 - if nothing changes on your screen, then the capture framerate will be 0 fps.
Contact
Scrcpy now has a twitter account: @scrcpy_app
There is also a subreddit: r/scrcpy
This might sometimes be more appropriate than GitHub issues when it's not to report a bug."
5,"To receive a notification on new releases, click on Watch > Custom > Releases on the top.

scrcpy v1.22
Changes since v1.21:
 - Add HID mouse support (#2916)
 - Add OTG mode (HID only) (#2974)
 - Enable DPI awareness by default on Windows (#40, #2865)
 - Automatically retry with a lower definition on MediaCodec error (#2947)
 - Add a shortcut ""open a terminal here"" on Windows (#2970)
 - Add icon to scrcpy.exe (#2815)
 - Add server options to send raw H.264 video stream (#2971)
 - Fix process execution (mainly) on Windows 7 (#2838, #2840)
 - Fix adb server hang due to signal masking (#2870, #2873)
 - Fix input injection on some custom ROMs (#2250, #2946)
 - Fix possible overflow on copy-paste (#2859)
 - Upgrade SDL to 2.0.20 in Windows releases
 - Upgrade FFmpeg to 5.0 in Windows 64-bit releases (#1753, #2952)
 - Various technical refactors and fixes

Highlights
Add HID mouse support
Similar to the --hid-keyboard (or -K) added in scrcpy v1.20 (#2632), this release introduces a new option --hid-mouse (or -M) (#2916):
bash
scrcpy -K    # HID keyboard
scrcpy -M    # HID mouse
scrcpy -KM   # HID keyboard and mouse
The mouse is ""captured"": the mouse pointer disappears from the computer and appears on the Android device.
Special captures keys, either Alt or Super, toggle (disable or enable) the mouse capture. Use one of them to give the control of the mouse back to the computer.
These capture keys do not conflict with shortcuts, since a shortcut is always a combination of the MOD key and some other key, while the capture key triggers an action only if it is pressed and released alone.
Like HID keyboard, it works only when the device is connected via USB, and is only supported on Linux.
OTG mode
A new option --otg (#2974) allows to run scrcpy with only physical keyboard (#2632) and mouse (#2916) simulation, without mirroring and without requiring adb (USB debugging), as if the computer keyboard and mouse were plugged directly to the device via an OTG cable.
```bash
scrcpy --otg
Pass the serial if several USB devices are available
scrcpy --otg -s 0123456789abcdef
```
This opens a window (with just the scrcpy logo, there is no mirroring), which, when focused, fowards the keyboard and mouse to the device:

The mouse capture works the same as explained in the previous section.
Since it works even with USB debugging disabled (i.e. without adb), it could for example be used to enable USB debugging on a device with a broken touchscreen (to then run scrcpy normally).
Like HID keyboard and HID mouse, this feature works only when the device is connected via USB, and is only supported on Linux.
DPI awareness on Windows
With HiDPI scaling on Windows, by default the quality was awful (#40, #2865).
The FAQ explained how to force correct HiDPI scaling by the application to fix the issue, but it was not convenient (and nobody reads the FAQ anyway).
On this new version, DPI awareness is enabled by default.
""Open a terminal here"" on Windows
scrcpy is a command line application, and is configured with command line arguments.
On Windows, the file explorer lacks an ""open a terminal here"" feature, to open a terminal in the scrcpy directory, ready to execute adb or scrcpy.
The release now contains a file open_a_terminal_here.bat (#2970). Just double-click on it.
This will simplify passing arguments on Windows, and give a hint to users who don't know how to use the command line (remember, nobody reads the FAQ).
Auto-downscale on MediaCodec error
Some devices are not able to encode a video at the device screen definition. In that case, running scrcpy without argument just failed with an error.
The solution is simple: reduce the resolution (scrcpy -m1024 for example), as explained in the FAQ (did I mention that nobody reads the FAQ?).
In this new version, if the encoder fails before the first video frame, then scrcpy automatically retries with a lower definition (#2947), so in most cases it should work without explicitly passing a size argument.
It's better when it works out-of-the-box.","To receive a notification on new releases, click on Watch > Custom > Releases on the top.
scrcpy v1.22
Changes since v1.21:
 - Add HID mouse support (#2916)
 - Add OTG mode (HID only) (#2974)
 - Enable DPI awareness by default on Windows (#40, #2865)
 - Automatically retry with a lower definition on MediaCodec error (#2947)
 - Add a shortcut ""open a terminal here"" on Windows (#2970)
 - Add icon to scrcpy.exe (#2815)
 - Add server options to send raw H.264 video stream (#2971)
 - Fix process execution (mainly) on Windows 7 (#2838, #2840)
 - Fix adb server hang due to signal masking (#2870, #2873)
 - Fix input injection on some custom ROMs (#2250, #2946)
 - Fix possible overflow on copy-paste (#2859)
 - Upgrade SDL to 2.0.20 in Windows releases
 - Upgrade FFmpeg to 5.0 in Windows 64-bit releases (#1753, #2952)
 - Various technical refactors and fixes
Highlights
Add HID mouse support
Similar to the --hid-keyboard (or -K) added in scrcpy v1.20 (#2632), this release introduces a new option --hid-mouse (or -M) (#2916):
bash
scrcpy -K    # HID keyboard
scrcpy -M    # HID mouse
scrcpy -KM   # HID keyboard and mouse
The mouse is ""captured"": the mouse pointer disappears from the computer and appears on the Android device.
Special captures keys, either Alt or Super, toggle (disable or enable) the mouse capture. Use one of them to give the control of the mouse back to the computer.
These capture keys do not conflict with shortcuts, since a shortcut is always a combination of the MOD key and some other key, while the capture key triggers an action only if it is pressed and released alone.
Like HID keyboard, it works only when the device is connected via USB, and is only supported on Linux.
OTG mode
A new option --otg (#2974) allows to run scrcpy with only physical keyboard (#2632) and mouse (#2916) simulation, without mirroring and without requiring adb (USB debugging), as if the computer keyboard and mouse were plugged directly to the device via an OTG cable.
module
This opens a window (with just the scrcpy logo, there is no mirroring), which, when focused, fowards the keyboard and mouse to the device:
The mouse capture works the same as explained in the previous section.
Since it works even with USB debugging disabled (i.e. without adb), it could for example be used to enable USB debugging on a device with a broken touchscreen (to then run scrcpy normally).
Like HID keyboard and HID mouse, this feature works only when the device is connected via USB, and is only supported on Linux.
DPI awareness on Windows
With HiDPI scaling on Windows, by default the quality was awful (#40, #2865).
The FAQ explained how to force correct HiDPI scaling by the application to fix the issue, but it was not convenient (and nobody reads the FAQ anyway).
On this new version, DPI awareness is enabled by default.
""Open a terminal here"" on Windows
scrcpy is a command line application, and is configured with command line arguments.
On Windows, the file explorer lacks an ""open a terminal here"" feature, to open a terminal in the scrcpy directory, ready to execute adb or scrcpy.
The release now contains a file open_a_terminal_here.bat (#2970). Just double-click on it.
This will simplify passing arguments on Windows, and give a hint to users who don't know how to use the command line (remember, nobody reads the FAQ).
Auto-downscale on MediaCodec error
Some devices are not able to encode a video at the device screen definition. In that case, running scrcpy without argument just failed with an error.
The solution is simple: reduce the resolution (scrcpy -m1024 for example), as explained in the FAQ (did I mention that nobody reads the FAQ?).
In this new version, if the encoder fails before the first video frame, then scrcpy automatically retries with a lower definition (#2947), so in most cases it should work without explicitly passing a size argument.
It's better when it works out-of-the-box."
6,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.21
Changes since v1.20:
 - Add --tcpip option to automate TCP/IP (wireless) connections (#2827)
 - Add --raw-key-events to always inject key events and ignore text events (#2816, #2831)
 - Add --no-clipboard-autosync to disable automatic clipboard synchronization (#2228, #2817, #2834)
 - Add --tunnel-host and --tunnel-port options (#2801, #2807)
 - Ensure clipboard synchronization is performed before injecting Ctrl+v via HID keyboard (#2814)
 - Adapt read/write settings for Android 12 (#2671, #2788, #2802)
 - Fix hanging with multiple scrcpy instances on Windows (#2779, #2783)
 - Fix quick interruption on Ctrl+c during server starting
 - Print help to stdout (instead of stderr)
 - Various technical refactors and fixes
NOTE: This version does not work on Windows 7 (#2838). A development version including a fix is available here: #2840.

Highlights
Simplify TCP/IP (wireless) configuration
Scrcpy uses adb to communicate with the device. To use scrcpy wirelessly, the users had to find the device IP address and connect via TCP/IP using adb directly.
For convenience, this version introduces a new option to configure TCP/IP connections automatically, with two variants.
If the device (accessible at 192.168.1.1 in this example) already listens on a port (typically 5555) for incoming adb connections, then run:
bash
scrcpy --tcpip=192.168.1.1       # default port is 5555
scrcpy --tcpip=192.168.1.1:5555
If the adb TCP/IP mode is disabled (or if you don't know the IP address), connect the device over USB, then run:
bash
scrcpy --tcpip    # without arguments
It will automatically find the device IP address (by parsing adb shell ip route), enable TCP/IP mode, then connects to the device before starting.
Configure tunneling
Two new options --tunnel-host and --tunnel-port (implemented by @RipleyTom) allow to connect to a remote ADB server. This allows for example to mirror a device plugged on another computer easily.
To connect to a remote ADB server (for example 192.168.1.2), make the server listen on all interfaces:
```bash
adb kill-server
adb -a nodaemon server start
keep this open
```
Then, from another terminal, run scrcpy:
bash
export ADB_SERVER_SOCKET=tcp:192.168.1.2:5037
scrcpy --tunnel-host=192.168.1.2
Note that all ADB communications between the server and the client are unencrypted.
To connect to a remote ADB server over the Internet, it is strongly recommended to use a SSH tunnel instead.
Improve Android 12 support
The way scrcpy was accessing to the settings is now blocked in Android 12 due to permission changes. In practice, --stay-awake (#2671) and --show-touches (#2788) were broken.
An alternative implementation (#2802) fixes the issue.
Add ""raw key events"" mode
There are two kinds of events generated when typing text:
 - key events, signaling that a key is pressed or released;
 - text events, signaling that a text has been entered.
By default, letters are injected using key events, so that the keyboard behaves as expected in games (typically for WASD keys).
An option --prefer-text allows to inject text events even for letters and space (see text injection preference).
This version introduces a new option (--raw-key-events, #2831), which always injects key events and ignores all text events.
This will typically result in the insertion of wrong characters for some keyboard layouts, but it may help a lot with some others (e.g. Chinese).
This option is only meaningful for the default injection method: with HID keyboard (--hid-keyboard), all keys are sent as scancodes.
Fix hanging on multiple instances on Windows
Scrcpy v1.20 introduced an important regression on Windows, preventing to launch several scrcpy instances simultaneously on Windows (#2779). It is fixed (by #2783) in this new version.
HID keyboard and Ctrl+v
To allow seamless copy-paste (see v1.15 highlights), on Ctrl+v, a request to synchronize the computer clipboard to the device clipboard is performed before injecting Ctrl+v.
But when HID keyboard (introduced in scrcpy v1.20), is enabled, the Ctrl+v injection is not sent on the same channel as the clipboard request, so they are not serialized, and may occur in any order. As a consequence, it could happen that the old clipboard content was pasted instead of the new one.
In v1.20, to minimize the probability of occurrence of the wrong order, a delay of 2 milliseconds was added before injecting Ctrl+v: e4163321f00bb3830c6049bdb6c1515e7cc668a0. Then it was increased to 5ms: 45b0f8123a52f5c73a5860d616f4ceba2766ca6a. But even with 5ms, the wrong behavior sometimes happens.
To handle it properly, this new version implements an acknowledgment mechanism, so that Ctrl+v is injected over AOA only after the clipboard synchronization request has been performed and acknowledged by the server (#2814).
This ensures that Ctrl+v with an HID keyboard always pastes the expected content.
Optionally disable seamless copy-paste
By default, scrcpy automatically synchronizes the computer clipboard to the device clipboard before injecting Ctrl+v, and the device clipboard to the computer clipboard whenever it changes.
A new option --no-clipboard-autosync disables this automatic synchronization. This also disables the acknowledgment mechanism described above.
The scrcpy shortcuts MOD+c, MOD+x and MOD+v still allow explicit copy, cut and paste, even in this mode.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.21
Changes since v1.20:
 - Add --tcpip option to automate TCP/IP (wireless) connections (#2827)
 - Add --raw-key-events to always inject key events and ignore text events (#2816, #2831)
 - Add --no-clipboard-autosync to disable automatic clipboard synchronization (#2228, #2817, #2834)
 - Add --tunnel-host and --tunnel-port options (#2801, #2807)
 - Ensure clipboard synchronization is performed before injecting Ctrl+v via HID keyboard (#2814)
 - Adapt read/write settings for Android 12 (#2671, #2788, #2802)
 - Fix hanging with multiple scrcpy instances on Windows (#2779, #2783)
 - Fix quick interruption on Ctrl+c during server starting
 - Print help to stdout (instead of stderr)
 - Various technical refactors and fixes
NOTE: This version does not work on Windows 7 (#2838). A development version including a fix is available here: #2840.
Highlights
Simplify TCP/IP (wireless) configuration
Scrcpy uses adb to communicate with the device. To use scrcpy wirelessly, the users had to find the device IP address and connect via TCP/IP using adb directly.
For convenience, this version introduces a new option to configure TCP/IP connections automatically, with two variants.
If the device (accessible at 192.168.1.1 in this example) already listens on a port (typically 5555) for incoming adb connections, then run:
bash
scrcpy --tcpip=192.168.1.1       # default port is 5555
scrcpy --tcpip=192.168.1.1:5555
If the adb TCP/IP mode is disabled (or if you don't know the IP address), connect the device over USB, then run:
bash
scrcpy --tcpip    # without arguments
It will automatically find the device IP address (by parsing adb shell ip route), enable TCP/IP mode, then connects to the device before starting.
Configure tunneling
Two new options --tunnel-host and --tunnel-port (implemented by @RipleyTom) allow to connect to a remote ADB server. This allows for example to mirror a device plugged on another computer easily.
To connect to a remote ADB server (for example 192.168.1.2), make the server listen on all interfaces:
module
Then, from another terminal, run scrcpy:
bash
export ADB_SERVER_SOCKET=tcp:192.168.1.2:5037
scrcpy --tunnel-host=192.168.1.2
Note that all ADB communications between the server and the client are unencrypted.
To connect to a remote ADB server over the Internet, it is strongly recommended to use a SSH tunnel instead.
Improve Android 12 support
The way scrcpy was accessing to the settings is now blocked in Android 12 due to permission changes. In practice, --stay-awake (#2671) and --show-touches (#2788) were broken.
An alternative implementation (#2802) fixes the issue.
Add ""raw key events"" mode
There are two kinds of events generated when typing text:
 - key events, signaling that a key is pressed or released;
 - text events, signaling that a text has been entered.
By default, letters are injected using key events, so that the keyboard behaves as expected in games (typically for WASD keys).
An option --prefer-text allows to inject text events even for letters and space (see text injection preference).
This version introduces a new option (--raw-key-events, #2831), which always injects key events and ignores all text events.
This will typically result in the insertion of wrong characters for some keyboard layouts, but it may help a lot with some others (e.g. Chinese).
This option is only meaningful for the default injection method: with HID keyboard (--hid-keyboard), all keys are sent as scancodes.
Fix hanging on multiple instances on Windows
Scrcpy v1.20 introduced an important regression on Windows, preventing to launch several scrcpy instances simultaneously on Windows (#2779). It is fixed (by #2783) in this new version.
HID keyboard and Ctrl+v
To allow seamless copy-paste (see v1.15 highlights), on Ctrl+v, a request to synchronize the computer clipboard to the device clipboard is performed before injecting Ctrl+v.
But when HID keyboard (introduced in scrcpy v1.20), is enabled, the Ctrl+v injection is not sent on the same channel as the clipboard request, so they are not serialized, and may occur in any order. As a consequence, it could happen that the old clipboard content was pasted instead of the new one.
In v1.20, to minimize the probability of occurrence of the wrong order, a delay of 2 milliseconds was added before injecting Ctrl+v: e4163321f00bb3830c6049bdb6c1515e7cc668a0. Then it was increased to 5ms: 45b0f8123a52f5c73a5860d616f4ceba2766ca6a. But even with 5ms, the wrong behavior sometimes happens.
To handle it properly, this new version implements an acknowledgment mechanism, so that Ctrl+v is injected over AOA only after the clipboard synchronization request has been performed and acknowledged by the server (#2814).
This ensures that Ctrl+v with an HID keyboard always pastes the expected content.
Optionally disable seamless copy-paste
By default, scrcpy automatically synchronizes the computer clipboard to the device clipboard before injecting Ctrl+v, and the device clipboard to the computer clipboard whenever it changes.
A new option --no-clipboard-autosync disables this automatic synchronization. This also disables the acknowledgment mechanism described above.
The scrcpy shortcuts MOD+c, MOD+x and MOD+v still allow explicit copy, cut and paste, even in this mode."
7,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.20
Changes since v1.19:
 - Add official high-resolution icon (#1497, #1987)
 - Add HID keyboard support on Linux (#2632)
 - Adapt --help output to terminal size
 - Rework server initialization to avoid unresponsive Ctrl+c sometimes
 - Remove deprecated short options -T and -c
 - Fix ""Could not find v4l2 muxer"" (#2718)
 - Fix workarounds for Meizu devices (#240, #2656)
 - Fix support for expand notification feature on some devices (#2551)
 - Various technical refactors and fixes

Highlights
New scrcpy icon
Scrcpy used a low-definition XPM icon. Its source code was cool, but the result was awful.
This version introduces a new official icon (designed by @varlesh, author of the papirus icon theme):

HID keyboard
By default, scrcpy uses Android key or text injection: it works everywhere, but is (basically) limited to ASCII characters.
It is now possible to simulate a physical USB keyboard (#2632 by @AlynxZhou): the virtual keyboard is disabled and it works for all characters and IME.
However, it only works if the device is connected by USB, and is currently only supported on Linux (you could help making it work on Windows and macOS).
To enable this mode:
bash
scrcpy --hid-keyboard
scrcpy -K  # short version
If it fails for some reason (for example because the device is not connected via USB), it automatically fallbacks to the default mode (with a log in the console). This allows to use the same command line options when connected over USB and TCP/IP.
In this mode, raw key events (scancodes) are sent to the device, independently of the host key mapping. Therefore, if your keyboard layout does not match, it must be configured on the Android device, in Settings → System → Languages and input → Physical keyboard.
Remove deprecated short options
Some command line options were first introduced with a short version:
 - -c/--crop
 - -T/--always-on-top
Since these are ""advanced"" features (not common enough), the short version of these options had been deprecated in scrcpy v1.11 two years ago. It's time to remove them (and it simplified some refactors). Only the long version remains.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.20
Changes since v1.19:
 - Add official high-resolution icon (#1497, #1987)
 - Add HID keyboard support on Linux (#2632)
 - Adapt --help output to terminal size
 - Rework server initialization to avoid unresponsive Ctrl+c sometimes
 - Remove deprecated short options -T and -c
 - Fix ""Could not find v4l2 muxer"" (#2718)
 - Fix workarounds for Meizu devices (#240, #2656)
 - Fix support for expand notification feature on some devices (#2551)
 - Various technical refactors and fixes
Highlights
New scrcpy icon
Scrcpy used a low-definition XPM icon. Its source code was cool, but the result was awful.
This version introduces a new official icon (designed by @varlesh, author of the papirus icon theme):
HID keyboard
By default, scrcpy uses Android key or text injection: it works everywhere, but is (basically) limited to ASCII characters.
It is now possible to simulate a physical USB keyboard (#2632 by @AlynxZhou): the virtual keyboard is disabled and it works for all characters and IME.
However, it only works if the device is connected by USB, and is currently only supported on Linux (you could help making it work on Windows and macOS).
To enable this mode:
bash
scrcpy --hid-keyboard
scrcpy -K  # short version
If it fails for some reason (for example because the device is not connected via USB), it automatically fallbacks to the default mode (with a log in the console). This allows to use the same command line options when connected over USB and TCP/IP.
In this mode, raw key events (scancodes) are sent to the device, independently of the host key mapping. Therefore, if your keyboard layout does not match, it must be configured on the Android device, in Settings → System → Languages and input → Physical keyboard.
Remove deprecated short options
Some command line options were first introduced with a short version:
 - -c/--crop
 - -T/--always-on-top
Since these are ""advanced"" features (not common enough), the short version of these options had been deprecated in scrcpy v1.11 two years ago. It's time to remove them (and it simplified some refactors). Only the long version remains."
8,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.19
Changes since v1.18:
 - Implement (optional) buffering (#2464)
 - Make --turn-screen-off work even if --no-display (#2426)
 - Workaround Windows issue with non-ASCII path (#2619)
 - Print correct error messages on Windows socket errors (#2624)
 - Upgrade platform-tools to 31.0.3 (adb) in Windows releases (#2588)
 - Upgrade SDL to 2.0.16 in Windows releases (#2589)
 - Various technical fixes

Highlights
Buffering
This release brings a new feature to buffer the video stream for a given delay. This is especially useful for removing a source of stuttering for live-streaming.
To minimize latency, scrcpy was to always display a frame as soon as it is available, without waiting. This design decision is (on purpose) at the cost of jitter: the delay between frames is not preserved. Note that this does not impact recording (--record), which writes the timestamps captured on the device.
However, some real-time use cases may benefit from compensating for jitter, by adding a small latency. For example, few tens of seconds of latency for live-streaming are not important, but jitter is noticeable. The may also improve the mirroring of a video playback.
For this purpose, scrcpy v1.19 introduces two new options:
bash
scrcpy --display-buffer=50  # add 50 ms buffering for display
scrcpy --v4l2-buffer=500    # add 500 ms buffering for v4l2 sink
In practice, here is a graph showing the difference in smoothness with a buffer of 50ms on a wireless connection:

TL;DR: if you use scrcpy for live-streaming on Linux, use v4l2 with some buffering, and capture the V4L2 source via OBS:
scrcpy -b20M --no-display --v4l2-sink=/dev/video2 --v4l2-buffer=100
On other platforms, as a fallback, run scrcpy with some display buffer, then capture the window via OBS:
scrcpy -b20M --display-buffer=100","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.19
Changes since v1.18:
 - Implement (optional) buffering (#2464)
 - Make --turn-screen-off work even if --no-display (#2426)
 - Workaround Windows issue with non-ASCII path (#2619)
 - Print correct error messages on Windows socket errors (#2624)
 - Upgrade platform-tools to 31.0.3 (adb) in Windows releases (#2588)
 - Upgrade SDL to 2.0.16 in Windows releases (#2589)
 - Various technical fixes
Highlights
Buffering
This release brings a new feature to buffer the video stream for a given delay. This is especially useful for removing a source of stuttering for live-streaming.
To minimize latency, scrcpy was to always display a frame as soon as it is available, without waiting. This design decision is (on purpose) at the cost of jitter: the delay between frames is not preserved. Note that this does not impact recording (--record), which writes the timestamps captured on the device.
However, some real-time use cases may benefit from compensating for jitter, by adding a small latency. For example, few tens of seconds of latency for live-streaming are not important, but jitter is noticeable. The may also improve the mirroring of a video playback.
For this purpose, scrcpy v1.19 introduces two new options:
bash
scrcpy --display-buffer=50  # add 50 ms buffering for display
scrcpy --v4l2-buffer=500    # add 500 ms buffering for v4l2 sink
In practice, here is a graph showing the difference in smoothness with a buffer of 50ms on a wireless connection:
TL;DR: if you use scrcpy for live-streaming on Linux, use v4l2 with some buffering, and capture the V4L2 source via OBS:
scrcpy -b20M --no-display --v4l2-sink=/dev/video2 --v4l2-buffer=100
On other platforms, as a fallback, run scrcpy with some display buffer, then capture the window via OBS:
scrcpy -b20M --display-buffer=100"
9,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.18
Changes since v1.17:
 - Add support for Android 12 (#2129, #2402)
 - Add support for V4L2 (device screen capture as a webcam) (#2232, #2233, #2268)
 - Add an option to lock the initial video orientation
 - Add an option to power off the device on close (#824)
 - Bind 4th mouse button to APP_SWITCH (#2258)
 - Bind 5th mouse button to expand notification panel (#2258)
 - Expand settings panel on double-expand notification panel (#2260, #2264)
 - Push to /sdcard/Download by default (#2384)
 - Center the window on resize-to-fit (#2387)
 - Increase possible display id range (#2009)
 - Log input events in verbose mode (#2371)
 - Fix touch events parameters (#2125)
 - Fix left click on Samsung Browser (#2169)
 - Remove option --render-expired-frames (#2268)
 - Pass scrcpy-noconsole arguments through to scrcpy on Windows (#2052)
 - Upgrade platform-tools to 31.0.2 (adb) in Windows releases
 - Various technical fixes

Highlights
Android 12
Since Android 12, creating a secure display with shell permissions is not permitted anymore (#2129). As a consequence, protected content may not be mirrored on Android 12. To avoid an immediate crash when mirroring a device with Android 12 (preview), create a non-secure display. This is basically a revert of the fix for #36.
Android 12 also required some changes from scrcpy to write to the settings, needed for --stay-awake and --show-touches (#2402).
V4L2 (device screen capture as a webcam)
On Linux, a V4L2 sink (#2268) allows to expose the device screen as a webcam on the computer.
Once a new video device is created with v4l2loopback (for example /dev/video1), scrcpy can expose the video stream as a webcam instead of (or in addition to) displaying it in a window:
scrcpy --v4l2-sink=/dev/video1 --no-display
More details here.
The stream can then be opened with any V4L2-capable software. This allows for example expose the device screen to your favorite video-conference tool or to capture it directly from OBS (select Video Capture Device (V4L2) as a source).
Lock video orientation
The option to lock the video orientation now allows to lock the initial orientation. This avoids to pass an explicit orientation value.
It also simplifies V4L2 usage, which does not support video dimension changes.
Power off on close
On closing scrcpy, a new option to power off the device automatically (#824):
scrcpy --power-off-on-close
New shortcuts
The 4th and 5th buttons were not used. Now, the 4th button triggers APP_SWITCH and the 5th expands the notification panel on single click and the settings panel on double click (#2258, #2260, #2264).
The keyboard shortcut MOD+n+n has also been added to expand the settings panel.
Resize to fit
When the scrcpy window is resized, black borders may be added to preserve the aspect ratio of the device screen. It is possible to automatically resize the window to remove them (MOD+w or double click).
However, it preserved the left-corner location of the window. Now, it preserves the device screen content location (#2387).
Push to /sdcard/Download/
A file drag&drop to the scrcpy window used to push to /sdcard/ by default. Now the default is /sdcard/Download/.
It can still be changed by --push-target.
Log input events
In verbose mode (scrcpy -Vverbose), all input events sent to the device are printed in the console (#2371). This can be useful for debugging.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.18
Changes since v1.17:
 - Add support for Android 12 (#2129, #2402)
 - Add support for V4L2 (device screen capture as a webcam) (#2232, #2233, #2268)
 - Add an option to lock the initial video orientation
 - Add an option to power off the device on close (#824)
 - Bind 4th mouse button to APP_SWITCH (#2258)
 - Bind 5th mouse button to expand notification panel (#2258)
 - Expand settings panel on double-expand notification panel (#2260, #2264)
 - Push to /sdcard/Download by default (#2384)
 - Center the window on resize-to-fit (#2387)
 - Increase possible display id range (#2009)
 - Log input events in verbose mode (#2371)
 - Fix touch events parameters (#2125)
 - Fix left click on Samsung Browser (#2169)
 - Remove option --render-expired-frames (#2268)
 - Pass scrcpy-noconsole arguments through to scrcpy on Windows (#2052)
 - Upgrade platform-tools to 31.0.2 (adb) in Windows releases
 - Various technical fixes
Highlights
Android 12
Since Android 12, creating a secure display with shell permissions is not permitted anymore (#2129). As a consequence, protected content may not be mirrored on Android 12. To avoid an immediate crash when mirroring a device with Android 12 (preview), create a non-secure display. This is basically a revert of the fix for #36.
Android 12 also required some changes from scrcpy to write to the settings, needed for --stay-awake and --show-touches (#2402).
V4L2 (device screen capture as a webcam)
On Linux, a V4L2 sink (#2268) allows to expose the device screen as a webcam on the computer.
Once a new video device is created with v4l2loopback (for example /dev/video1), scrcpy can expose the video stream as a webcam instead of (or in addition to) displaying it in a window:
scrcpy --v4l2-sink=/dev/video1 --no-display
More details here.
The stream can then be opened with any V4L2-capable software. This allows for example expose the device screen to your favorite video-conference tool or to capture it directly from OBS (select Video Capture Device (V4L2) as a source).
Lock video orientation
The option to lock the video orientation now allows to lock the initial orientation. This avoids to pass an explicit orientation value.
It also simplifies V4L2 usage, which does not support video dimension changes.
Power off on close
On closing scrcpy, a new option to power off the device automatically (#824):
scrcpy --power-off-on-close
New shortcuts
The 4th and 5th buttons were not used. Now, the 4th button triggers APP_SWITCH and the 5th expands the notification panel on single click and the settings panel on double click (#2258, #2260, #2264).
The keyboard shortcut MOD+n+n has also been added to expand the settings panel.
Resize to fit
When the scrcpy window is resized, black borders may be added to preserve the aspect ratio of the device screen. It is possible to automatically resize the window to remove them (MOD+w or double click).
However, it preserved the left-corner location of the window. Now, it preserves the device screen content location (#2387).
Push to /sdcard/Download/
A file drag&drop to the scrcpy window used to push to /sdcard/ by default. Now the default is /sdcard/Download/.
It can still be changed by --push-target.
Log input events
In verbose mode (scrcpy -Vverbose), all input events sent to the device are printed in the console (#2371). This can be useful for debugging."
10,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.17
Changes since v1.16:
 - Fix errors on Android 11 (#1468)
 - Add --encoder option (#1810, #1827)
 - Add --forward-all-clicks option (#1302, #1613)
 - Add --legacy-paste option (#1750, #1771)
 - Workaround screen off/on issue on exit (#1670)
 - Rework console/noconsole versions on Windows (#1875, #1988)
 - Terminate server properly without killing it on close (#1992)
 - List available shortcut keys on error (#1681)
 - Upgrade platform-tools to 30.0.5 (adb) in Windows releases
 - Upgrade SDL to 2.0.14 in Windows releases

Highlights
Android 11
The options --show-touches and --stay-awake have been broken by internal API changes in Android 11. The implementation have been adapted to work properly.
Forward right-click and middle-click
By default, scrcpy injects BACK on right-click and HOME on middle-click.
A new option --forward-all-clicks has been added to forward these clicks to the device instead.
Copy-paste workaround
Copy-paste have been improved by previous releases, especially v1.15.
However, setting the device clipboard programmatically does not work properly on some devices, causing confusing behavior (injecting PASTE does not paste the content set programmatically).
As a workaround, an option --legacy-paste is provided to change the behavior of Ctrl+v and MOD+v so that they also inject the computer clipboard text as a sequence of key events (the same way as MOD+Shift+v).
Screen off workarounds
Scrcpy v1.15 added restoration of the power mode on exit, to avoid leaving the physical screen off (enabled by --turn-screen-off or
MOD+o).
However, restoring the power mode while the device screen was off caused unexpected behaviors (even if the ""screen off"" feature was not used). Therefore, if the screen was off, don't try to restore the power mode, the state is already as expected.
Encoder selection
Some devices provide several encoders, and some of them may not work well.
A new option --encoder allows to select another available H.264 encoder.
Windows console/noconsole
Scrcpy is a command-line tool, so it does not suit Windows very well.
By default, running scrcpy.exe opens a new console, which is closed as soon as the process terminates. To let the user a chance to read any error message, a ""pause"" was implemented on error, but this caused issues for scripting (#1875).
In addition, to avoid opening a new terminal, a separate binary was provided with a special linking flag.
To simplify, these hacks have been moved into Windows-specific wrapper scripts:
 - scrcpy.exe is the main binary, with the same behavior as on other platforms (no pause on error)
 - scrcpy-console.bat is a simple wrapper script to pause on error
 - scrcpy-noconsole.vbs a one-line VBS script to start scrcpy.exe without a console","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.17
Changes since v1.16:
 - Fix errors on Android 11 (#1468)
 - Add --encoder option (#1810, #1827)
 - Add --forward-all-clicks option (#1302, #1613)
 - Add --legacy-paste option (#1750, #1771)
 - Workaround screen off/on issue on exit (#1670)
 - Rework console/noconsole versions on Windows (#1875, #1988)
 - Terminate server properly without killing it on close (#1992)
 - List available shortcut keys on error (#1681)
 - Upgrade platform-tools to 30.0.5 (adb) in Windows releases
 - Upgrade SDL to 2.0.14 in Windows releases
Highlights
Android 11
The options --show-touches and --stay-awake have been broken by internal API changes in Android 11. The implementation have been adapted to work properly.
Forward right-click and middle-click
By default, scrcpy injects BACK on right-click and HOME on middle-click.
A new option --forward-all-clicks has been added to forward these clicks to the device instead.
Copy-paste workaround
Copy-paste have been improved by previous releases, especially v1.15.
However, setting the device clipboard programmatically does not work properly on some devices, causing confusing behavior (injecting PASTE does not paste the content set programmatically).
As a workaround, an option --legacy-paste is provided to change the behavior of Ctrl+v and MOD+v so that they also inject the computer clipboard text as a sequence of key events (the same way as MOD+Shift+v).
Screen off workarounds
Scrcpy v1.15 added restoration of the power mode on exit, to avoid leaving the physical screen off (enabled by --turn-screen-off or
MOD+o).
However, restoring the power mode while the device screen was off caused unexpected behaviors (even if the ""screen off"" feature was not used). Therefore, if the screen was off, don't try to restore the power mode, the state is already as expected.
Encoder selection
Some devices provide several encoders, and some of them may not work well.
A new option --encoder allows to select another available H.264 encoder.
Windows console/noconsole
Scrcpy is a command-line tool, so it does not suit Windows very well.
By default, running scrcpy.exe opens a new console, which is closed as soon as the process terminates. To let the user a chance to read any error message, a ""pause"" was implemented on error, but this caused issues for scripting (#1875).
In addition, to avoid opening a new terminal, a separate binary was provided with a special linking flag.
To simplify, these hacks have been moved into Windows-specific wrapper scripts:
 - scrcpy.exe is the main binary, with the same behavior as on other platforms (no pause on error)
 - scrcpy-console.bat is a simple wrapper script to pause on error
 - scrcpy-noconsole.vbs a one-line VBS script to start scrcpy.exe without a console"
11,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.16
Changes since v1.15.1:
 - Add pinch-to-zoom simulation (#24)
 - Fix clipboard paste (#1658)
 - Inject POWER instead of WAKEUP on start (#1655)

Highlights
Pinch-to-zoom simulation
This is a long time requested feature (#24).
To simulate ""pinch-to-zoom"": Ctrl+click-and-move.
More precisely, hold Ctrl while pressing the left-click button. Until the left-click button is released, all mouse movements scale and rotate the content (if supported by the app) relative to the center of the screen.
Concretely, scrcpy generates additional touch events from a ""virtual finger"" at a location inverted through the center of the screen.
Bugfixes
Pasting (e.g. via Ctrl+v) was broken in some cases (#1658). The fix would have required a new hotfix version (v1.15.2), but since pinch-to-zoom is ready, just go for v1.16 right now.
In addition, some devices apparently do not support the WAKEUP key, so inject POWER on start to turn the device screen on.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.16
Changes since v1.15.1:
 - Add pinch-to-zoom simulation (#24)
 - Fix clipboard paste (#1658)
 - Inject POWER instead of WAKEUP on start (#1655)
Highlights
Pinch-to-zoom simulation
This is a long time requested feature (#24).
To simulate ""pinch-to-zoom"": Ctrl+click-and-move.
More precisely, hold Ctrl while pressing the left-click button. Until the left-click button is released, all mouse movements scale and rotate the content (if supported by the app) relative to the center of the screen.
Concretely, scrcpy generates additional touch events from a ""virtual finger"" at a location inverted through the center of the screen.
Bugfixes
Pasting (e.g. via Ctrl+v) was broken in some cases (#1658). The fix would have required a new hotfix version (v1.15.2), but since pinch-to-zoom is ready, just go for v1.16 right now.
In addition, some devices apparently do not support the WAKEUP key, so inject POWER on start to turn the device screen on."
12,"scrcpy v1.15.1
Hotfix for v1.15:
 - Fix uninitialized value, breaking HOME shortcut randomly (#1643)","scrcpy v1.15.1
Hotfix for v1.15:
 - Fix uninitialized value, breaking HOME shortcut randomly (#1643)"
13,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.15
Changes since v1.14:
 - Forward Ctrl and Shift to the device (#1598, #555, #942)
 - Change ""resize to fit"" shortcut from MOD+x to MOD+w (#1598)
 - Make shortcut modifiers customizable (#1598)
 - Restore power mode to ""normal"" on disconnection (#1572, #1576)
 - Keep the screen off on powering on (best effort) (#1573, #1577)
 - Add option to disable screensaver (#1370, #1502)
 - Do not crash on missing clipboard manager (#1440, #1556)
 - Fix touch events HiDPI-scaling (#1536, #15)
 - Correctly inject repeating keycodes (#1013, #1519)
 - Add option to ignore repeated key events (#1013, #1623)
 - Increase clipboard size from 4k to 256k (#1117)
 - Do not expose internal SDL logs to users (#1441)
 - Upgrade platform-tools to 30.0.4 (adb) in Windows releases
 - Upgrade FFmpeg to 4.3.1 in Windows releases

Highlights
Ctrl and Shift
Ctrl and Shift keys are now forwarded to the device.
This allows to trigger many shortcuts on the device itself. For example, Ctrl+t in Firefox opens a new tab, Ctrl+w closes the current tab. Ctrl+c or Ctrl+d can now be injected in Termux. Ctrl+z could be used to cancel an action, like a change in a text field for example.
This also greatly simplifies text selection, by using the keyboard (Shift+arrows, Ctrl+a…). And it makes copy-paste more straightforward (see below).
Customizable shortcut modifier
Since Ctrl is now forwarded to the device, scrcpy must use another shortcut modifier (called MOD in the documentation). By default, it's either (left) Alt or (left) Super.
The shortcut modifier can be changed by a command-line parameter (--shortcut-mod). Here are some examples:
```bash
use RCtrl for shortcuts
scrcpy --shortcut-mod=rctrl
use either LAlt or RCtrl
scrcpy --shortcut-mod=lalt,rctrl
use LCtrl+LAlt
scrcpy --shortcut-mod=lctrl+lalt
use LCtrl+LAlt or Super
scrcpy --shortcut-mod=lctrl+lalt,lsuper,rsuper
```
Seamless copy-paste
Forwarding Ctrl brings a lot of changes and improvements regarding copy-paste:

To copy or cut a text, Ctrl+c and Ctrl+x typically work, because they are forwarded to the device, which, in a text field, copies the text into the clipboard… and the clipboard is now automatically (since v1.14) synchronized with the computer keyboard.
Pressing Ctrl+v synchronizes the computer clipboard to the device before sending the key event, therefore pasting typically works seamlessly.
Seamless copy-paste introduced in v1.14 was limited if Android <= 7; by using Ctrl keys, it now works on all supported versions.
MOD+c, MOD+x and MOD+v are also provided to inject COPY, CUT and PASTE keycodes (see README for details).
MOD+Shift+v injects the computer clipboard content as a sequence of key events (it was Ctrl+v on previous versions, this is still useful sometimes).
to be able to bind CUT to MOD+x, the ""resize to fit"" shortcut (which removes the black borders) has been changed to MOD+w.

The clipboard size has also been increased from 4k to 256k.
Screen off improvements
MOD+o (or --turn-screen-off) allows to mirror with physical screen turned off.
However, the physical screen was not automatically restored on disconnection, which was annoying. Now it is.
In addition, on Android, pressing POWER cancels the effect of turn screen off. For convenience, scrcpy now attempts to maintain the screen off when it generates a POWER event (either via right-click or MOD+p).
Repeating key events
When a key is hold pressed, the system generates repeated key events.
The repeat count is now correctly forwarded to Android, and an option (--no-key-repeat) has been added to completely disable them. This mitigates keyboard lag in some games.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.15
Changes since v1.14:
 - Forward Ctrl and Shift to the device (#1598, #555, #942)
 - Change ""resize to fit"" shortcut from MOD+x to MOD+w (#1598)
 - Make shortcut modifiers customizable (#1598)
 - Restore power mode to ""normal"" on disconnection (#1572, #1576)
 - Keep the screen off on powering on (best effort) (#1573, #1577)
 - Add option to disable screensaver (#1370, #1502)
 - Do not crash on missing clipboard manager (#1440, #1556)
 - Fix touch events HiDPI-scaling (#1536, #15)
 - Correctly inject repeating keycodes (#1013, #1519)
 - Add option to ignore repeated key events (#1013, #1623)
 - Increase clipboard size from 4k to 256k (#1117)
 - Do not expose internal SDL logs to users (#1441)
 - Upgrade platform-tools to 30.0.4 (adb) in Windows releases
 - Upgrade FFmpeg to 4.3.1 in Windows releases
Highlights
Ctrl and Shift
Ctrl and Shift keys are now forwarded to the device.
This allows to trigger many shortcuts on the device itself. For example, Ctrl+t in Firefox opens a new tab, Ctrl+w closes the current tab. Ctrl+c or Ctrl+d can now be injected in Termux. Ctrl+z could be used to cancel an action, like a change in a text field for example.
This also greatly simplifies text selection, by using the keyboard (Shift+arrows, Ctrl+a…). And it makes copy-paste more straightforward (see below).
Customizable shortcut modifier
Since Ctrl is now forwarded to the device, scrcpy must use another shortcut modifier (called MOD in the documentation). By default, it's either (left) Alt or (left) Super.
The shortcut modifier can be changed by a command-line parameter (--shortcut-mod). Here are some examples:
module
Seamless copy-paste
Forwarding Ctrl brings a lot of changes and improvements regarding copy-paste:
To copy or cut a text, Ctrl+c and Ctrl+x typically work, because they are forwarded to the device, which, in a text field, copies the text into the clipboard… and the clipboard is now automatically (since v1.14) synchronized with the computer keyboard.
Pressing Ctrl+v synchronizes the computer clipboard to the device before sending the key event, therefore pasting typically works seamlessly.
Seamless copy-paste introduced in v1.14 was limited if Android <= 7; by using Ctrl keys, it now works on all supported versions.
MOD+c, MOD+x and MOD+v are also provided to inject COPY, CUT and PASTE keycodes (see README for details).
MOD+Shift+v injects the computer clipboard content as a sequence of key events (it was Ctrl+v on previous versions, this is still useful sometimes).
to be able to bind CUT to MOD+x, the ""resize to fit"" shortcut (which removes the black borders) has been changed to MOD+w.
The clipboard size has also been increased from 4k to 256k.
Screen off improvements
MOD+o (or --turn-screen-off) allows to mirror with physical screen turned off.
However, the physical screen was not automatically restored on disconnection, which was annoying. Now it is.
In addition, on Android, pressing POWER cancels the effect of turn screen off. For convenience, scrcpy now attempts to maintain the screen off when it generates a POWER event (either via right-click or MOD+p).
Repeating key events
When a key is hold pressed, the system generates repeated key events.
The repeat count is now correctly forwarded to Android, and an option (--no-key-repeat) has been added to completely disable them. This mitigates keyboard lag in some games."
14,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.14
Changes since v1.13:
 - Add --stay-awake (#631)
 - Add Ctrl+Shift+o shortcut to turn screen on (#175)
 - Implement seamless copy-paste from Android to computer (#1056, #1423)
 - Implement seamless UTF-8 copy-paste from computer to Android >= 7 (#786)
 - Improve --show-touches behavior
 - Properly handle Ctrl+C on Windows (avoid to corrupt recording) (#818)
 - Add --verbosity to configure log level at runtime
 - Add --codec-options to pass MediaFormat options directly (#1325)
 - Add --force-adb-forward
 - Apply workarounds only on error (#994)
 - Increase LOD bias to reduce blurring on trilinear filtering (#1394)
 - Fix HiDPI issues on secondary screen (#1408, #15)
 - Fix rendering issues (#1408, #787)
 - Fix window restoration regression (#1346)
 - Fix unexpected focus behavior on scroll (#1362)
 - Fix ""buffer full"" error on Ctrl+Shift+v (#1425)
 - Upgrade platform-tools to 30.0.0 (adb) in Windows releases

Highlights
Stay awake
A new option has been added to prevent the device to sleep:
bash
scrcpy --stay-awake
scrcpy -w  # short option
This is especially useful when --turn-screen-off/-S is enabled, because the device screen will stay awake (no lock screen to unlock after some delay) with screen off:
bash
scrcpy -Sw  # turn sceen off and stay awake
The initial ""stay awake"" state is restored when scrcpy is closed. This is the case even on disconnection/unplug (a new mechanism has been implemented to cleanup on disconnection, --show-touches also benefits from it).
Turn screen on
The shortcut to turn the screen back on after --turn-screen-off or Ctrl+o had been removed (8c8649cfcd710859ce18eab557ed2af8cedb9a42) due to issues on some devices. Of course, it was still possible to turn it back on using the power button (twice), but it was not very convenient.
Therefore, to turn the screen on, the shortcut Ctrl+Shift+o has been reactivated in this release. In practice, it works on many devices (in fact, I could not reproduce the issue anymore).
Seamless copy-paste
Clipboard synchronization between the Android device and the computer allowed to transfer UTF-8 text, but copy-pasting required an annoying two-steps copy.
Now, you can copy a text on Android (long-press on a text field, then click COPY), and immediately press Ctrl+v on the computer to paste it.
In the other direction, Ctrl+Shift+v, in addition to synchronizing the clipboards, now injects a PASTE command (if the device runs Android >= 7). This preserves UTF-8 text.
Fix HiDPI issues on secondary screen
A rework of the rendering code (#1408) fixes the long-standing issue #15, causing wrong click locations on secondary monitors (especially on macOS).
Properly handle Ctrl+C on Windows
On Windows, Ctrl+C in the terminal just killed the program, without any cleanup. This was particularly annoying while recording, because in that case the resulting file was corrupted (#818).
Pressing Ctrl+C on Windows now quits the app properly (like on the other platforms).
Advanced codec options
A new advanced option has been added to pass any raw option to [MediaFormat]. This could be used for example to change the profile/level of the codec:
scrcpy --codec-options profile=1,level=4096
See #1226 and #1325.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.14
Changes since v1.13:
 - Add --stay-awake (#631)
 - Add Ctrl+Shift+o shortcut to turn screen on (#175)
 - Implement seamless copy-paste from Android to computer (#1056, #1423)
 - Implement seamless UTF-8 copy-paste from computer to Android >= 7 (#786)
 - Improve --show-touches behavior
 - Properly handle Ctrl+C on Windows (avoid to corrupt recording) (#818)
 - Add --verbosity to configure log level at runtime
 - Add --codec-options to pass MediaFormat options directly (#1325)
 - Add --force-adb-forward
 - Apply workarounds only on error (#994)
 - Increase LOD bias to reduce blurring on trilinear filtering (#1394)
 - Fix HiDPI issues on secondary screen (#1408, #15)
 - Fix rendering issues (#1408, #787)
 - Fix window restoration regression (#1346)
 - Fix unexpected focus behavior on scroll (#1362)
 - Fix ""buffer full"" error on Ctrl+Shift+v (#1425)
 - Upgrade platform-tools to 30.0.0 (adb) in Windows releases
Highlights
Stay awake
A new option has been added to prevent the device to sleep:
bash
scrcpy --stay-awake
scrcpy -w  # short option
This is especially useful when --turn-screen-off/-S is enabled, because the device screen will stay awake (no lock screen to unlock after some delay) with screen off:
bash
scrcpy -Sw  # turn sceen off and stay awake
The initial ""stay awake"" state is restored when scrcpy is closed. This is the case even on disconnection/unplug (a new mechanism has been implemented to cleanup on disconnection, --show-touches also benefits from it).
Turn screen on
The shortcut to turn the screen back on after --turn-screen-off or Ctrl+o had been removed (8c8649cfcd710859ce18eab557ed2af8cedb9a42) due to issues on some devices. Of course, it was still possible to turn it back on using the power button (twice), but it was not very convenient.
Therefore, to turn the screen on, the shortcut Ctrl+Shift+o has been reactivated in this release. In practice, it works on many devices (in fact, I could not reproduce the issue anymore).
Seamless copy-paste
Clipboard synchronization between the Android device and the computer allowed to transfer UTF-8 text, but copy-pasting required an annoying two-steps copy.
Now, you can copy a text on Android (long-press on a text field, then click COPY), and immediately press Ctrl+v on the computer to paste it.
In the other direction, Ctrl+Shift+v, in addition to synchronizing the clipboards, now injects a PASTE command (if the device runs Android >= 7). This preserves UTF-8 text.
Fix HiDPI issues on secondary screen
A rework of the rendering code (#1408) fixes the long-standing issue #15, causing wrong click locations on secondary monitors (especially on macOS).
Properly handle Ctrl+C on Windows
On Windows, Ctrl+C in the terminal just killed the program, without any cleanup. This was particularly annoying while recording, because in that case the resulting file was corrupted (#818).
Pressing Ctrl+C on Windows now quits the app properly (like on the other platforms).
Advanced codec options
A new advanced option has been added to pass any raw option to [MediaFormat]. This could be used for example to change the profile/level of the codec:
scrcpy --codec-options profile=1,level=4096
See #1226 and #1325."
15,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.13
Changes since v1.12.1:
 - Add option to lock video orientation (#218, #1151)
 - Add shortcuts to rotate the display (#218, #1274)
 - Mirror secondary displays (#397, #898, #1177, #1238)
 - Enable trilinear filtering when possible (#40, #1284)
 - Add --render-driver parameter (#1284)
 - Accept --max-fps before Android 10 (#488)
 - Accept negative window position (#1242)
 - Use another local port if 27183 is not available (#945, #951)
 - Forward NumPad keys when NumLock is disabled (#1188)
 - Fix issues when directory contains non-ASCII chars on Windows (#1002)
 - ~Do not print irrelevant workarounds errors (#994)~
 - Fix possible BufferUnderflowException on touch event (#1245)
 - Upgrade FFmpeg to 4.2.2 in Windows releases
 - Upgrade SDL to 2.0.12 in Windows releases

Highlights
Rotation
The previous release (v1.12) added Ctrl+r to request the device to switch between portrait and landscape.
This release adds two additional rotation features, which do not change the device orientation:
 - an option to lock the video orientation
 - shortcuts to rotate display at any time
Lock video orientation
The parameter --lock-video-orientation changes the mirroring orientation:
bash
scrcpy --lock-video-orientation 0   # natural orientation
scrcpy --lock-video-orientation 1   # 90° counterclockwise
scrcpy --lock-video-orientation 2   # 180°
scrcpy --lock-video-orientation 3   # 90° clockwise
The locked orientation affects the recording, and never changes across the session.
Display rotation
New shortcuts are introduced to rotate the display at any time:
 - Ctrl+← (left) rotates the display 90° counterclockwise
 - Ctrl+→ (right) rotates the display 90° clockwise
This affects only the display, not the recording.
The initial value may also be provided on start via --rotation. Possible values are 0, 1, 2 and 3 (having the same meaning as that of --lock-video-orientation).
Multi-display
Some devices may expose secondary displays, like Samsung DeX (#397). To mirror them, a new flag --display has been added:
scrcpy --display 1
Limitations
The secondary display may only be controlled if the device runs at least Android 10 (otherwise it is mirrored in read-only).
Sometimes, mirroring the secondary display just shows a black screen (if some flag called FLAG_SUPPORTS_PROTECTED_BUFFERS is set for the display). There is no known solution for now (see discussions #898 and #1177).
Downscaling quality (trilinear filtering)
If the scrcpy window is far smaller (in pixels) than the Android device, visual quality can be very low (#40, #1284).
To improve the quality, trilinear filtering is enabled when possible (OpenGL 3.0+ or OpenGL ES 2.0+):

(see this comment for more details)
Mipmapping is automatically enabled if the rendering is done by OpenGL 3.0+ or OpenGL ES 2.0+.
On Windows, you may want to force OpenGL (instead of Direct3D) to benefit from this improvement:
scrcpy --render-driver=opengl
On macOS, it is not supported (there is no OpenGL 3.0).
To force-disable mipmaps even on supported versions of OpenGL, use --no-mipmaps.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.13
Changes since v1.12.1:
 - Add option to lock video orientation (#218, #1151)
 - Add shortcuts to rotate the display (#218, #1274)
 - Mirror secondary displays (#397, #898, #1177, #1238)
 - Enable trilinear filtering when possible (#40, #1284)
 - Add --render-driver parameter (#1284)
 - Accept --max-fps before Android 10 (#488)
 - Accept negative window position (#1242)
 - Use another local port if 27183 is not available (#945, #951)
 - Forward NumPad keys when NumLock is disabled (#1188)
 - Fix issues when directory contains non-ASCII chars on Windows (#1002)
 - ~Do not print irrelevant workarounds errors (#994)~
 - Fix possible BufferUnderflowException on touch event (#1245)
 - Upgrade FFmpeg to 4.2.2 in Windows releases
 - Upgrade SDL to 2.0.12 in Windows releases
Highlights
Rotation
The previous release (v1.12) added Ctrl+r to request the device to switch between portrait and landscape.
This release adds two additional rotation features, which do not change the device orientation:
 - an option to lock the video orientation
 - shortcuts to rotate display at any time
Lock video orientation
The parameter --lock-video-orientation changes the mirroring orientation:
bash
scrcpy --lock-video-orientation 0   # natural orientation
scrcpy --lock-video-orientation 1   # 90° counterclockwise
scrcpy --lock-video-orientation 2   # 180°
scrcpy --lock-video-orientation 3   # 90° clockwise
The locked orientation affects the recording, and never changes across the session.
Display rotation
New shortcuts are introduced to rotate the display at any time:
 - Ctrl+← (left) rotates the display 90° counterclockwise
 - Ctrl+→ (right) rotates the display 90° clockwise
This affects only the display, not the recording.
The initial value may also be provided on start via --rotation. Possible values are 0, 1, 2 and 3 (having the same meaning as that of --lock-video-orientation).
Multi-display
Some devices may expose secondary displays, like Samsung DeX (#397). To mirror them, a new flag --display has been added:
scrcpy --display 1
Limitations
The secondary display may only be controlled if the device runs at least Android 10 (otherwise it is mirrored in read-only).
Sometimes, mirroring the secondary display just shows a black screen (if some flag called FLAG_SUPPORTS_PROTECTED_BUFFERS is set for the display). There is no known solution for now (see discussions #898 and #1177).
Downscaling quality (trilinear filtering)
If the scrcpy window is far smaller (in pixels) than the Android device, visual quality can be very low (#40, #1284).
To improve the quality, trilinear filtering is enabled when possible (OpenGL 3.0+ or OpenGL ES 2.0+):
(see this comment for more details)
Mipmapping is automatically enabled if the rendering is done by OpenGL 3.0+ or OpenGL ES 2.0+.
On Windows, you may want to force OpenGL (instead of Direct3D) to benefit from this improvement:
scrcpy --render-driver=opengl
On macOS, it is not supported (there is no OpenGL 3.0).
To force-disable mipmaps even on supported versions of OpenGL, use --no-mipmaps."
16,"Hotfix for v1.12:
 - Fix bit-rate parsing when ""long"" is 32 bits (#995)
A bug introduced in v1.12 could prevent to set a custom bit-rate (scrcpy -b 12m).
In practice, the bug only happened on the Windows release (compiled with mingw32), and possibly on other 32 bits systems.","Hotfix for v1.12:
 - Fix bit-rate parsing when ""long"" is 32 bits (#995)
A bug introduced in v1.12 could prevent to set a custom bit-rate (scrcpy -b 12m).
In practice, the bug only happened on the Windows release (compiled with mingw32), and possibly on other 32 bits systems."
17,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.12
Changes since v1.11:
 - Add shortcut (Ctrl+r) to rotate device screen (#11)
 - Respect scrolling configuration on macOS (#966)
 - Initialize Application object (fix crashes on some devices) (#940)
 - Restore the .jar extension on the device (fix crashes on some
   devices) (#944)
 - Inject mouse events with a virtual device id (fix crashes on some
   devices) (#962)
 - Refuse to push server if it points to a directory (#956)

Highlights
This is a small release: one feature and some fixes.
Shortcut to rotate device screen
It is now possible to rotate the device screen (switch between portrait and landscape modes): Ctrl+r.
Note that it rotates only if the application in foreground supports the requested orientation.
Fix natural scrolling
On macOS, the scroll direction can be configured, but was not respected by scrcpy. (#966)
Device crashes fixes
Some changes introduced in v1.10 caused crashes on some devices (#940 and #944, impacting many users).  Another bug crashing an Android TV box have been fixed (#962).","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.12
Changes since v1.11:
 - Add shortcut (Ctrl+r) to rotate device screen (#11)
 - Respect scrolling configuration on macOS (#966)
 - Initialize Application object (fix crashes on some devices) (#940)
 - Restore the .jar extension on the device (fix crashes on some
   devices) (#944)
 - Inject mouse events with a virtual device id (fix crashes on some
   devices) (#962)
 - Refuse to push server if it points to a directory (#956)
Highlights
This is a small release: one feature and some fixes.
Shortcut to rotate device screen
It is now possible to rotate the device screen (switch between portrait and landscape modes): Ctrl+r.
Note that it rotates only if the application in foreground supports the requested orientation.
Fix natural scrolling
On macOS, the scroll direction can be configured, but was not respected by scrcpy. (#966)
Device crashes fixes
Some changes introduced in v1.10 caused crashes on some devices (#940 and #944, impacting many users).  Another bug crashing an Android TV box have been fixed (#962)."
18,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.11
Changes since v1.10:
 - Add support for touchscreens/multitouch (#22, #865)
 - Add --max-fps to limit the frame rate (Android 10 only) (#488)
 - Add options to set an initial window size and position (#762)
 - Add option to disable window decorations (#762)
 - Add --prefer-text option (#650)
 - Add manpage
 - Fix copy-paste on Android 10 devices (#796)
 - Fix ""turn screen off"" on Android 10 devices (#835)
 - Fix clicks not working in some games (#635)
 - Fix device rotation while the window is maximized (#750)
 - Fix scrcpy-noconsole.exe (#691)
 - Fix HiDPI support (#829)
 - Fix segfault on empty file recorded (#918)
 - Fix recorded video to avoid crashes in Adobe Premiere (#702)
 - Fix segfault on recording with old FFmpeg versions (#707)
 - Fix several crashes on some devices (like Meizu) (#240, #365, #921)
 - Upgrade FFmpeg to 4.2.1 in Windows releases
 - Upgrade platform-tools to 29.0.5 (adb) in Windows releases

Highlights
Touchscreen / multitouch
On a computer with a touchscreen, scrcpy now allows to control the device using several fingers, for example to zoom an image or a map.
Android 10
Several features (copy-paste, turn screen off) had been adapted to work on Android 10.
In addition, a new option --max-fps have been added to limit the mirroring frame rate (only works on Android 10). This may help with wireless or remote control (for example over an SSH tunnel).
More devices supported
Some devices (typically Meizu phones) did not work due to crashes in their ROM when running scrcpy. Workarounds have been implemented to make them work.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.11
Changes since v1.10:
 - Add support for touchscreens/multitouch (#22, #865)
 - Add --max-fps to limit the frame rate (Android 10 only) (#488)
 - Add options to set an initial window size and position (#762)
 - Add option to disable window decorations (#762)
 - Add --prefer-text option (#650)
 - Add manpage
 - Fix copy-paste on Android 10 devices (#796)
 - Fix ""turn screen off"" on Android 10 devices (#835)
 - Fix clicks not working in some games (#635)
 - Fix device rotation while the window is maximized (#750)
 - Fix scrcpy-noconsole.exe (#691)
 - Fix HiDPI support (#829)
 - Fix segfault on empty file recorded (#918)
 - Fix recorded video to avoid crashes in Adobe Premiere (#702)
 - Fix segfault on recording with old FFmpeg versions (#707)
 - Fix several crashes on some devices (like Meizu) (#240, #365, #921)
 - Upgrade FFmpeg to 4.2.1 in Windows releases
 - Upgrade platform-tools to 29.0.5 (adb) in Windows releases
Highlights
Touchscreen / multitouch
On a computer with a touchscreen, scrcpy now allows to control the device using several fingers, for example to zoom an image or a map.
Android 10
Several features (copy-paste, turn screen off) had been adapted to work on Android 10.
In addition, a new option --max-fps have been added to limit the mirroring frame rate (only works on Android 10). This may help with wireless or remote control (for example over an SSH tunnel).
More devices supported
Some devices (typically Meizu phones) did not work due to crashes in their ROM when running scrcpy. Workarounds have been implemented to make them work."
19,"To receive a notification on new releases, click on Watch > Releases only on the top.

scrcpy v1.10
Changes since v1.9:
 - Reduce latency by 1 frame (#646)
 - Record asynchronously
 - Use Cmd instead of Ctrl for shortcuts on macOS when possible (#642)
 - Add option to set a custom window title (#120, #614)
 - Add option to change the push target (#659)
 - Make --turn-screen-off work for Android Q devices (#586, #587)
 - Prevent to turn screen off if no control (#608)
 - Upgrade FFmpeg to 4.1.4 in Windows releases
 - Upgrade platform-tools to 29.0.2 (adb) in Windows releases
 - Upgrade SDL to 2.0.10 in Windows releases

Highlights
Reduced latency
One major goal of scrcpy is to mirror Android devices with minimal latency.
However, the way the H.264 video stream was parsed by FFmpeg introduced a latency of one frame. As a consequence, a frame was not sent to the decoder before the next one was (partially) received.
In this release, this part has been rewritten so that a frame is decoded as soon as it is received, by taking advantage of the knowledge of packet boundaries on the device side.
As detailed in #646, this effectively reduces the latency by one frame. For example, in 800x448 (-m 800), the end-to-end latency can be as low as one frame (for a video at 30 fps, about ~35ms):

Asynchronous recording
Recording the video stream (with scrcpy --record file.mkv) while mirroring consists in muxing, on the computer side, the H.264 packets in an MKV or MP4 container (without reencoding).
For simplicity, this muxing was done by the thread receiving the stream and feeding the decoder. In practice, it worked well enough, but whenever writing the file took too much time (during a blocking I/O call), this delayed the decoding of the following frames.
For maximum performance even when recording is enabled, the recorder now uses a dedicated thread.
macOS shortcuts
Mac users reported that Cmd was more natural than Ctrl for scrcpy shortcuts. Many shortcuts have been changed: see shortcuts.","To receive a notification on new releases, click on Watch > Releases only on the top.
scrcpy v1.10
Changes since v1.9:
 - Reduce latency by 1 frame (#646)
 - Record asynchronously
 - Use Cmd instead of Ctrl for shortcuts on macOS when possible (#642)
 - Add option to set a custom window title (#120, #614)
 - Add option to change the push target (#659)
 - Make --turn-screen-off work for Android Q devices (#586, #587)
 - Prevent to turn screen off if no control (#608)
 - Upgrade FFmpeg to 4.1.4 in Windows releases
 - Upgrade platform-tools to 29.0.2 (adb) in Windows releases
 - Upgrade SDL to 2.0.10 in Windows releases
Highlights
Reduced latency
One major goal of scrcpy is to mirror Android devices with minimal latency.
However, the way the H.264 video stream was parsed by FFmpeg introduced a latency of one frame. As a consequence, a frame was not sent to the decoder before the next one was (partially) received.
In this release, this part has been rewritten so that a frame is decoded as soon as it is received, by taking advantage of the knowledge of packet boundaries on the device side.
As detailed in #646, this effectively reduces the latency by one frame. For example, in 800x448 (-m 800), the end-to-end latency can be as low as one frame (for a video at 30 fps, about ~35ms):
Asynchronous recording
Recording the video stream (with scrcpy --record file.mkv) while mirroring consists in muxing, on the computer side, the H.264 packets in an MKV or MP4 container (without reencoding).
For simplicity, this muxing was done by the thread receiving the stream and feeding the decoder. In practice, it worked well enough, but whenever writing the file took too much time (during a blocking I/O call), this delayed the decoding of the following frames.
For maximum performance even when recording is enabled, the recorder now uses a dedicated thread.
macOS shortcuts
Mac users reported that Cmd was more natural than Ctrl for scrcpy shortcuts. Many shortcuts have been changed: see shortcuts."
20,"scrcpy v1.9
Changes since v1.8:
 - Add feature to turn screen off while mirroring (#175)
 - Add device-to-computer clipboard copy (#145)
 - Add computer-to-device clipboard copy (#413)
 - Find scrcpy-server.jar in the correct directory on Windows
 - Fix mouse focus clickthrough
 - Do not minimize the window on focus loss (#554)
 - Disable X11 compositor bypass (#522)
 - Continue text injection on failed character (#509)
 - Bind Home key to MOVE_HOME instead of HOME screen (#555)
 - Do not crash if expanding/collapsing panels is not supported (#506)
 - Do not power on the device if --no-control is set
 - Improve framerate counting
 - Add runtime option to render expired frames (i.e. not skip frames)
 - Downgrade SDL to 2.0.8 in Windows releases (#425)
 - Upgrade FFmpeg to 4.1.3 in Windows releases
 - Upgrade platform-tools to 29.0.1 (adb) in Windows releases

Highlights
Here are some highlights of the changes introduced by scrcpy 1.9.
Turn device screen off
Many users requested to turn the device screen off while mirroring (#145).
It is now possible at any time, by pressing Ctrl+o. To turn it back on, just use the POWER button (or Ctrl+p), once to switch off the (mirrored) device, once again to turn both the physical and mirroring on.
To turn the device screen off on start:
scrcpy --turn-screen-off
scrcpy -S

Copy-paste in both directions
It was already possible to copy-paste from the computer to the Android device (Ctrl+v), by injecting the text character by character (with all the limitations of text injection).
Now, it is also possible to copy the Android device clipboard (Ctrl+c) to paste it on the computer.
In addition, Ctrl+Shift+v allow to copy the computer clipboard to the device, but without pasting it, so that it can then be pasted manually on Android. That way, the clipboard content is not broken by text injection, so it can be used to transmit any text with special characters (an UTF-8 stream).
Windows PATH simplification
On all platforms except Windows, the absolute path of scrcpy-server.jar is hardcoded (typically to /usr/share/scrcpy/scrcpy-server.jar), so it is straightforward to know its path.
On Windows however, the server path may not be constant, so the build is ""portable"": scrcpy-server.jar is expected to be in the same directory as scrcpy.exe. Concretely, to push the server to the device, scrcpy just executed:
adb push scrcpy-server.jar /data/local/tmp/
The problem is that scrcpy-server.jar is searched in the current directory, which is not necessarily the same as the scrcpy directory. Typically, if you added the scrcpy directory in your PATH to call scrcpy from anywhere, the current directory could be anything. This was very annoying and confusing (you had to set the environment variable SCRCPY_SERVER_PATH as a workaround).
Now, on Windows, the server path will be built based on the scrcpy executable path, so it works out-of-the-box.
Mouse focus clickthrough
When scrcpy doesn't have focus, it needed one click to get focus, and another click to actually ""click"" on the device.
Mouse focus clickthrough was enabled in earlier versions, but a stupid regression broke it in v1.8. It has been fixed.","scrcpy v1.9
Changes since v1.8:
 - Add feature to turn screen off while mirroring (#175)
 - Add device-to-computer clipboard copy (#145)
 - Add computer-to-device clipboard copy (#413)
 - Find scrcpy-server.jar in the correct directory on Windows
 - Fix mouse focus clickthrough
 - Do not minimize the window on focus loss (#554)
 - Disable X11 compositor bypass (#522)
 - Continue text injection on failed character (#509)
 - Bind Home key to MOVE_HOME instead of HOME screen (#555)
 - Do not crash if expanding/collapsing panels is not supported (#506)
 - Do not power on the device if --no-control is set
 - Improve framerate counting
 - Add runtime option to render expired frames (i.e. not skip frames)
 - Downgrade SDL to 2.0.8 in Windows releases (#425)
 - Upgrade FFmpeg to 4.1.3 in Windows releases
 - Upgrade platform-tools to 29.0.1 (adb) in Windows releases
Highlights
Here are some highlights of the changes introduced by scrcpy 1.9.
Turn device screen off
Many users requested to turn the device screen off while mirroring (#145).
It is now possible at any time, by pressing Ctrl+o. To turn it back on, just use the POWER button (or Ctrl+p), once to switch off the (mirrored) device, once again to turn both the physical and mirroring on.
To turn the device screen off on start:
scrcpy --turn-screen-off
scrcpy -S
Copy-paste in both directions
It was already possible to copy-paste from the computer to the Android device (Ctrl+v), by injecting the text character by character (with all the limitations of text injection).
Now, it is also possible to copy the Android device clipboard (Ctrl+c) to paste it on the computer.
In addition, Ctrl+Shift+v allow to copy the computer clipboard to the device, but without pasting it, so that it can then be pasted manually on Android. That way, the clipboard content is not broken by text injection, so it can be used to transmit any text with special characters (an UTF-8 stream).
Windows PATH simplification
On all platforms except Windows, the absolute path of scrcpy-server.jar is hardcoded (typically to /usr/share/scrcpy/scrcpy-server.jar), so it is straightforward to know its path.
On Windows however, the server path may not be constant, so the build is ""portable"": scrcpy-server.jar is expected to be in the same directory as scrcpy.exe. Concretely, to push the server to the device, scrcpy just executed:
adb push scrcpy-server.jar /data/local/tmp/
The problem is that scrcpy-server.jar is searched in the current directory, which is not necessarily the same as the scrcpy directory. Typically, if you added the scrcpy directory in your PATH to call scrcpy from anywhere, the current directory could be anything. This was very annoying and confusing (you had to set the environment variable SCRCPY_SERVER_PATH as a workaround).
Now, on Windows, the server path will be built based on the scrcpy executable path, so it works out-of-the-box.
Mouse focus clickthrough
When scrcpy doesn't have focus, it needed one click to get focus, and another click to actually ""click"" on the device.
Mouse focus clickthrough was enabled in earlier versions, but a stupid regression broke it in v1.8. It has been fixed."
21,"scrcpy v1.8
Changes since v1.7:
 - Add shortcut to expand/collapse device notification panel (#392)
 - Add option --no-display to record without mirroring (#418)
 - Add option --no-control to mirror in read-only","scrcpy v1.8
Changes since v1.7:
 - Add shortcut to expand/collapse device notification panel (#392)
 - Add option --no-display to record without mirroring (#418)
 - Add option --no-control to mirror in read-only"
22,"scrcpy v1.7
Changes since v1.6:
 - Support recording to MKV
 - Add ""always on top"" option (#391, #412)
 - Fix mp4 headers produced by recording (#351, #416)
 - Fix mouse events deserialization (comment in #350)
 - Fix file push with non-ASCII chars on Windows (#422)","scrcpy v1.7
Changes since v1.6:
 - Support recording to MKV
 - Add ""always on top"" option (#391, #412)
 - Fix mp4 headers produced by recording (#351, #416)
 - Fix mouse events deserialization (comment in #350)
 - Fix file push with non-ASCII chars on Windows (#422)"
23,"scrcpy v1.6
Changes since v1.5:
 - Mirror secure content (#36)
 - Fix warning ""Invalid return value 0 for stream protocol"" (#333)
 - Correctly handle mouse events outside device screen (#353, #357)
 - Avoid empty arguments not correctly handled on some devices (#337)
 - Keep screensaver enabled while scrcpy is running (#380)
 - Update FFmpeg to 4.1 included in Windows releases","scrcpy v1.6
Changes since v1.5:
 - Mirror secure content (#36)
 - Fix warning ""Invalid return value 0 for stream protocol"" (#333)
 - Correctly handle mouse events outside device screen (#353, #357)
 - Avoid empty arguments not correctly handled on some devices (#337)
 - Keep screensaver enabled while scrcpy is running (#380)
 - Update FFmpeg to 4.1 included in Windows releases"
24,"scrcpy v1.5-fixversion
Changes since v1.5 initial release:
 - Bump version to 1.5 (as shown by scrcpy --version) (#332)
Changes since v1.4:
 - Add screen recording (#21, #292)
 - Fix ""push file"" with spaces on Windows (#288)
 - Workaround for Os.write() bug on Android 5.0.x (#291)
 - Replace volume shortcuts on MacOS (#300)
 - Update SDL to 2.0.9 included in Windows releases","scrcpy v1.5-fixversion
Changes since v1.5 initial release:
 - Bump version to 1.5 (as shown by scrcpy --version) (#332)
Changes since v1.4:
 - Add screen recording (#21, #292)
 - Fix ""push file"" with spaces on Windows (#288)
 - Workaround for Os.write() bug on Android 5.0.x (#291)
 - Replace volume shortcuts on MacOS (#300)
 - Update SDL to 2.0.9 included in Windows releases"
25,"scrcpy v1.5
Changes since v1.4:
 - Add screen recording (#21, #292)
 - Fix ""push file"" with spaces on Windows (#288)
 - Workaround for Os.write() bug on Android 5.0.x (#291)
 - Replace volume shortcuts on MacOS (#300)
 - Update SDL to 2.0.9 included in Windows releases","scrcpy v1.5
Changes since v1.4:
 - Add screen recording (#21, #292)
 - Fix ""push file"" with spaces on Windows (#288)
 - Workaround for Os.write() bug on Android 5.0.x (#291)
 - Replace volume shortcuts on MacOS (#300)
 - Update SDL to 2.0.9 included in Windows releases"
26,"scrcpy v1.4
Changes since v1.3:
 - Send raw key events for letters to use keyboard in games (#87)
 - Add feature to push file to /sdcard/ via drag & drop (#226)
 - Add command-line option to start in fullscreen (#252)
 - Improve error message on missing adb (#236, #254)
 - Keep the console open on error on Windows (#261)
 - Fix possible session crash on close (#52, #182)
 - Return non-zero value on connection loss (#204)
 - Avoid additional buffer copy in userspace on the server
 - Update platform-tools to 28.0.1 (adb) included in Windows releases
   (#224)
 - Update FFmpeg to 4.0.2 included in Windows releases","scrcpy v1.4
Changes since v1.3:
 - Send raw key events for letters to use keyboard in games (#87)
 - Add feature to push file to /sdcard/ via drag & drop (#226)
 - Add command-line option to start in fullscreen (#252)
 - Improve error message on missing adb (#236, #254)
 - Keep the console open on error on Windows (#261)
 - Fix possible session crash on close (#52, #182)
 - Return non-zero value on connection loss (#204)
 - Avoid additional buffer copy in userspace on the server
 - Update platform-tools to 28.0.1 (adb) included in Windows releases
   (#224)
 - Update FFmpeg to 4.0.2 included in Windows releases"
27,"scrcpy v1.3
Changes since v1.2:
 - Fix missing initialization that leaded to kill the whole process
   group on quit (#182, #183)
 - Support holding Ctrl+Key shortcuts (#166)
 - Forward repeated volume events
 - Increase ""adb forward"" connections attempts to 10 seconds (#213)
 - Add crop feature","scrcpy v1.3
Changes since v1.2:
 - Fix missing initialization that leaded to kill the whole process
   group on quit (#182, #183)
 - Support holding Ctrl+Key shortcuts (#166)
 - Forward repeated volume events
 - Increase ""adb forward"" connections attempts to 10 seconds (#213)
 - Add crop feature"
28,"Some popular webpages seem to point to this (very) old version. Use the latest version instead.
scrcpy v1.2
Changes since v1.1:
 - Increase connection attempts (fix issues over TCP/IP)
 - Fix process hanging on Ctrl+C during initialization
 - Add shortcut (Ctrl+m) for MENU key (#85)
 - Add option (-t/--show-touches) to enable ""show touches"" (#96)
 - Fix double-click events (#97)
 - Change volume shortcuts (Ctrl+UP and Ctrl+DOWN) (#103)
 - Map numpad ENTER key (#117)
 - Add feature to install APK files via drag & drop (#133)
 - Change the Windows build (cross-compile from Linux)
 - Generate both console and noconsole versions (fix ""no output"" issue)","Some popular webpages seem to point to this (very) old version. Use the latest version instead.
scrcpy v1.2
Changes since v1.1:
 - Increase connection attempts (fix issues over TCP/IP)
 - Fix process hanging on Ctrl+C during initialization
 - Add shortcut (Ctrl+m) for MENU key (#85)
 - Add option (-t/--show-touches) to enable ""show touches"" (#96)
 - Fix double-click events (#97)
 - Change volume shortcuts (Ctrl+UP and Ctrl+DOWN) (#103)
 - Map numpad ENTER key (#117)
 - Add feature to install APK files via drag & drop (#133)
 - Change the Windows build (cross-compile from Linux)
 - Generate both console and noconsole versions (fix ""no output"" issue)"
29,"Changes since v1.0:
 - Fix (huge) memory leak (#26)
 - Fix segfault on copy/paste (#10)
 - Support screens with dimensions not divisible by 8 (#39)
 - Fix mouse clicks on LG devices (#18)
 - Reverse horizontal scrolling behavior (#49)
 - Make it work over tcpip (#5)
 - Bind middle- and right-clicks to HOME and BACK
 - Remove black borders on double-click","Changes since v1.0:
 - Fix (huge) memory leak (#26)
 - Fix segfault on copy/paste (#10)
 - Support screens with dimensions not divisible by 8 (#39)
 - Fix mouse clicks on LG devices (#18)
 - Reverse horizontal scrolling behavior (#49)
 - Make it work over tcpip (#5)
 - Bind middle- and right-clicks to HOME and BACK
 - Remove black borders on double-click"
30,The first official release ;-),The first official release ;-)
