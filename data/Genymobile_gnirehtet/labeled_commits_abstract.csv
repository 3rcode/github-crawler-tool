Commit Message,Score,Correspond Changelog Sentence,Commit Description,Label
Mention that gnirehtet is not actively maintained,0.70566326,Gnirehtet v2.2,,1
Cargo update,0.43497002, - update relay-rust dependencies,"Execute ""cargo update"" to update dependencies for the versions listed in Cargo.toml. Fixes #475 link",0
Remove useless borrowing,0.18130635, - Improve logs,,0
Prefix unused field by _,0.13330531, - discard non-IPv4 packets (#69),The 'version' field is only used in tests (gnirehtet only supports IPv4).,0
Fix trailing semicolon warning,0.33792627, - Always log error messages to stderr (fixes #62),warning: trailing semicolon in macro used in expression position,0
Read process output before waiting,0.32928386, - Handle command-line parsing natively (in Java and Rust),"The process may stuck because its output buffer is full, but the output was consumed only after the process was terminated, causing a deadlock. Consume process output before waiting for process termination to fix the problem. Refs #369 link Refs #370 link Co-authored-by: tusenpo tusenpo@pinduoduo.com",0
Fix datagram buffer remaining size,0.5459321," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","In the Java version, a datagram was incorrectly rejected if its size was exactly the remaining buffer size (this was harmless). In the Rust version, the datagram buffer considered it had enough space if a packet was 1 byte too big (causing packet overwriting). Refs #345 link",0
Fix typo in comment,0.20205455, - Improve logs and error messages,,0
Add Homebrew instructions to the README,0.3041892, - Add a Rust version of the relay server,Signed-off-by: Romain Vimont rom@rom1v.com,0
Update release v2.5 links in README,0.3326761, - update relay-rust dependencies,,0
Bump version to 2.5,0.40246797, - Support Android O (fixes #44),,0
Fix deprecation and other warnings,0.44246542, - Support Android O (fixes #44),Reported by clippy and rustc. PR #284 link Signed-off-by: Romain Vimont rom@rom1v.com,0
Use sufficient buffer size,0.4934603," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","The buffer size (2^12 bytes) to read a packet from the VPN was smaller than the largest possible packet (2^16 bytes), causing packets to be truncated. Increase the buffer size to fix the problem. Fixes #273 link",0
Fix code style,0.1876601, - Improve logs and error messages,,0
Add more packet data logs,0.4742654, - Improve logs and error messages,,0
Log packet data as verbose logs,0.4441475, - Improve logs and error messages,,0
Add a missing space in logs,0.5267958, - Improve logs,,0
Improve packet logging,0.5335699, - Improve logs and error messages,"If verbose is enabled, print the packet size and the 20 first bytes (the IP header) only in a single line.",0
Remove useless parentheses,0.22431237, - Improve logs,,0
Remove useless return type,0.28596106, - discard non-IPv4 packets (#69),"The monitor() function just loops, it cannot fails.",0
Allow to set a custom path for client APK,0.7868181, - Make apk path configurable (#90),Use the environment variable GNIREHTET_APK to use a custom path for the gnirehtet client. Ref link,1
Allow to set a custom path for adb,0.9278599, - Make adb path configurable,Use the environment variable ADB to use a custom adb executable.,1
Update release v2.4 links in README,0.3499203, - update relay-rust dependencies,,0
Bump version to 2.4,0.4027279, - Support Android O (fixes #44),,0
Update relay-rust dependencies,0.9858892, - update relay-rust dependencies,"Generated by ""cargo update"".",1
Update README and DEVELOP,0.31399524, - update relay-rust dependencies,The commands to run gnirehet manually have changed since commit f8681809a28a0073f791f0d9eae65da02ae73c3d.,0
Rename config field,0.27991,Add command-line option to use a custom port (#210),"Fix a checkstyle issue: the ""config"" parameter hid the class field.",0
Merge pull request #210 from jessedusty:add_port_option,0.6284332,Add command-line option to use a custom port (#210),Add port option to allow multiple instances of the gnirehtet relay to run,0
Add port -p option to rust relay,0.75130314, - Add a Rust version of the relay server,Signed-off-by: Romain Vimont rom@rom1v.com,1
Add port -p option to java relay,0.5525571,Add command-line option to use a custom port (#210),Signed-off-by: Romain Vimont rom@rom1v.com,0
Reorder Android manifest,0.33507633,"   so that the intent is always allowed by Android (#112, #117, #146,",Declare permissions before the application tag (to make the linter happy).,0
Upgrade targetSdkVersion to 29,0.34999484, - Support Android O (fixes #44),,0
Do not panic on deregister(),0.36655593, - Fix disconnection notification appearing while gnirehtet has been stopped,A call to selector.deregister() may (unexpectedly) fail with Rust/MIO: link,0
Merge pull request #209 from jessedusty/master,0.3038488, - Fix connection hang on large uploads (fixes #79 and #84),Fix #154 - relay dies with AssertionError,0
Fix cleanup race condition,0.6577811,Fix cleanup race condition in Java relay server (#154),"Fix race condition in Java due to timeout from no activity, misses the cleaning deadline by a small number of milliseconds. Fixes link Evidence: Selected keys size 1 now: 1562790544556 nextCleaningDeadline 1562790662669 Selected keys size 0 now: 1562790662667 nextCleaningDeadline 1562790662669 selector.select() returned without any event, an invalid SelectionKey was probably been registered Selected keys size 0 now: 1562790662670 nextCleaningDeadline 1562790662669 Selected keys size 0 now: 1562790722672 nextCleaningDeadline 1562790722670 2019-07-10 16:32:02.673 I UDPConnection: UDP 10.0.0.2:31650 -> 208.67.222.222:53 Close Signed-off-by: Romain Vimont rom@rom1v.com",0
Require FOREGROUND_SERVICE,0.6754371,Require FOREGROUND_SERVICE permission (necessary for Android 9),"Since Android 9, starting a foreground service requires a permission: Apps wanting to use foreground services must now request the FOREGROUND_SERVICE permission first. This is a normal permission, so the system automatically grants it to the requesting app. Starting a foreground service without the permission throws a SecurityException. link",0
Use an Activity as entry point,0.8214023,"Use an activity (instead of a broadcast receiver) as entry point,","Recent versions of Android refuse to directly start a Service or a BroadcastReceiver, so always use an (invisible) Activity to receive intents. This fixes many cases where the confirmation dialog were not displayed: link",1
Upgrade relay-rust dependencies,0.9714929, - update relay-rust dependencies,,1
"Use explicit ""dyn"" keyword",0.17927039, - Handle command-line parsing natively (in Java and Rust),"Trait objects without ""dyn"" keyword is now deprecated.",0
Upgrade gradle version,0.34602618, - Support Android O (fixes #44),,0
Fix binary packet to string (java),0.5059514," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","Since commit 9a184b9428f443a01f6194c6c7f683f9c70b05b8, i was incremented twice. Fixes link",0
Update rustfmt usage,0.5653181, - update relay-rust dependencies,The new rustfmt now works in Rust stable.,0
Remove non-lexical lifetime workaround,0.2492517," - Fix ""Removing an unknown connection"" crash in the Rust version",The borrow checker is now smart enough :),0
Use dyn trait,0.16689037,Gnirehtet v2.4,Use the new syntax from Rust 1.27 for using trait objects.,0
"Fix all ""cargo clippy"" warnings",0.36301717, - Always log error messages to stderr (fixes #62),,0
"Reformat code with ""cargo fmt""",0.2986422,Workaround rust/mio issue on MacOS (#136),,0
Use Rust edition 2018,0.60696363, - Add a Rust version of the relay server,"Enable Rust edition 2018, and adapt module usage.",0
Fix author e-mail in Cargo.toml,0.22938205, - Add a Rust version of the relay server,The @genymobile.com e-mail is not valid for months.,0
Fix deprecation warnings in tests,0.3576939, - Always log error messages to stderr (fixes #62),Use org.junit.Assert instead of junit.framework.Assert.,0
Upgrade Android versions,0.49376577, - Support Android O (fixes #44),"Everything breaks every time a new version of Android, build tools or gradle is available.",0
Update release v2.3 links in README,0.33626547, - update relay-rust dependencies,,0
Bump version to 2.3,0.38603887, - Support Android O (fixes #44),,0
Make current rustfmt work,0.59169745, - Add a Rust version of the relay server,"Rust deprecated the ""current"" rustfmt, because the ""new"" one is available in nightly. One a stable release channel, we cannot use the new one, so make the ""current"" one work by passing ""--force"".",0
Start clients asynchronously in autostart mode,0.58935285," - Add ""autostart"" and ""autorun"" commands to start on device connection","Starting a client may involved an apk installation. When several new devices are connected, start them in parallel instead of sequentially.",0
Fix track-devices parsing in AdbMonitor,0.509912, - fix adb monitor on multiple devices (#134),"The old implementation assumed that track-devices provided one device state per packet (the one that have changed). In fact, it always resends the whole list: link Therefore, keep the last connected devices list, parse the new list and start gnirehtet client on new connected devices. Fixes link.",0
Add unit tests for Rust AdbMonitor,0.42232847, - Add a Rust version of the relay server,"The Java version had unit tests, but the Rust version had not.",0
Extract read_packet() from next_packet(),0.47381333," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","Like in the Java version, expose a ""static"" read_packet() function, used by next_packet(). This will allow to test packet reading without an AdbMonitor instance.",0
Replace statement lambda by expression lambda,0.13294104," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",Simplify code syntax in java tests.,0
Discard non-IPv4 packets,0.9356643, - discard non-IPv4 packets (#69),"Despite not allowing implicitly or explicitly IPv6, some devices forward IPv6 packets, not supported by the relay server, to the VpnService. link) To workaround the issue, do not forward these packets to the relay server. Fixes link. Suggested-by: JGregoryAtiba link",1
Merge pull request #129 from jo215/master,0.29601213,Fix cleanup race condition in Java relay server (#154),Fix for potential crash under Android Oreo when sending STOP intent,0
Fix for potential crash under Android Oreo when sending STOP intent,0.8231616, - fix possible crash on Android O on stop intent (#129),,1
Update release v2.2.1 links in README,0.33430877, - Support Android O (fixes #44),,0
Bump Rust version to 2.2.1,0.6513709, - Add a Rust version of the relay server,,0
Rename SHA256SUM.txt to SHA256SUMS.txt,0.2507004," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",It contains hashes for multiple files.,0
Remove unused import warning,0.27330935," - Fix ""Removing an unknown connection"" crash in the Rust version","Since commit c36fa4d1a1086aa03e56aabae12669f8b1a1a1c4, std::ptr is not used anymore.",0
Compare thin pointers to find the connection,0.23478171, - Optimize TCP checksum computation,"Connection is a trait, so ""*const Connection"" is a fat pointer (128 bits, 64 bits pointing to the instance, 64 bits pointing to the vtable). For some reason (a bug?), in Router::remove(), the connection passed as argument has a vtable different from the (same) connection stored in the ""connections"" field. This has the unexpected consequence that for some x and y: println!(""{:p} == {:p} ? {}"", x, y, ptr::eq(x, y)); prints: 0x7f87a8c3a618 == 0x7f87a8c3a618 ? false Thus, the connection to remove was not found, leading to the panic ""Removing an unknown connection"". Instead, compare only the data part, by casting the fat pointers to thin pointers. See link Thanks to mbrubeck on IRC freenode/##rust, who helped a lot to understand the issue.",0
Add debug logs for connection removal,0.43075246, - Improve logs and error messages,Log when a connection is removed from the router.,0
"Revert ""Ignore double-removal of a connection""",0.5573426," - Fix ""Removing an unknown connection"" crash in the Rust version","This reverts commit 10d5e3214043e1c6bab5fd7e81c1933d8d144c45. This does not fix the root cause, so the panic still happens. link",0
Ignore double-removal of a connection,0.55234015, - Fix several race conditions related to client reconnection,"In a single poll() result, the client may be ready to receive a packet from the device, that will be sent to a specific network connection, and in the same time that connection may be ready to send a packet to the client. There is a possibility that both events will lead to close the connection, and remove it from the router. In that case, the second removal did panic. Instead, remove it only if it does not exist. See:  - link  - link",0
Use std::ptr::eq() to compare pointers,0.1318648, - Optimize TCP checksum computation,"When gnirehtet was written, std::ptr::eq() was not available in Rust stable (it has been added in Rust 1.17). Now, we can use it.",0
Update release v2.2 links in README,0.33035225, - update relay-rust dependencies,,0
Update DEVELOP to use latest rust stable,0.5506404, - update relay-rust dependencies,"Do not document a specific version, use the latest stable.",0
Upgrade gnirehtet version to 2.2,0.80381113,Gnirehtet v2.2.1,,1
Ack only once data is written to network socket,0.40623108, - Fix several race conditions related to client reconnection,"The TCP connection acked packets received from the device immediately after it stored them into its buffers, but before they were written to the network socket. This made the client wrongly assume that the connection was super-fast, so the upload bandwidth was totally uncorrelated to the network socket bandwidth. As a consequence, the client filled the buffers up to saturation, leading to packet drops, that slowed down uploads dramatically. To make the client adapt the bittrate according to the associated network socket, do not ack the data immediately, but only once it is actually written to the network socket. See issues:  - link  - link",0
Terminate TCP connections gracefully,0.883353, - Terminate TCP connections gracefully (avoid many garbage packets),"When the network socket is closed or when the device sends a FIN, gracefully terminate the connection by following the RFC793 instead of closing without notifying the device. This avoids to receive more unwanted packets from the device, leading to connections open and close on first packet. See schema: link",1
Start adb daemon on initial connection failure,0.5661231," - Add ""tunnel"" command to restart only the adb tunnel","The adb monitor (used for ""autostart"" and ""autorun"" commands) already restarted the adb daemon on read/write error (typically, when the daemon is killed). Also restart it on connect error, typically when the daemon is not started when gnirehtet starts.",0
Fix comment typo,0.22243649, - Improve logs and error messages,"Replace ""anotate"" by ""annotate"".",0
Add commands to automatically start clients,0.6711166," - Add ""autostart"" and ""autorun"" commands to start on device connection","Add two commands to start the gnirehtet client on device connection: - autostart:     track connected devices to start the client on every new     connected device. - autorun:      autostart (in background) + relay. The device connections are detected through the service ""track-devices"" over a socket connected to the adb daemon: link Thanks to autolainen for the solution: link",0
Extract ByteBuffer from Ipv4PacketBuffer,0.5357764," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",Ipv4PacketBuffer handles a byte buffer specifically. Extract the part handling the byte buffer to a separate reusable class.,0
Make module interrupt private,0.26785046,Require FOREGROUND_SERVICE permission (necessary for Android 9),"The interrupt module is only used from relay, so it need not be public.",0
Simplify run command in Rust,0.49966186," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",Simply return the Result from cmd_relay() instead of handling any error and panic!.,0
Remove useless annotation,0.2556183," - Fix ""Removing an unknown connection"" crash in the Rust version",Remove a @SupressWarnings annotation on a method that did not generate a warning.,0
Add option to reverse tether specific routes,0.90321535," - Add ""-r ROUTE"" option to reverse tether only specific routes","By default, gnirehtet redirects the whole traffic to the relay server. Make it possible to redirect only specific routes, selected by CIDR: ./gnirehtet start -r 192.168.0.0/24 Like the DNS servers options, several routes may be specified, separated by ',': ./gnirehtet start -r 8.8.8.8,192.168.0.0/24",1
Fix release script with new gradle version,0.31971365, - Support Android O (fixes #44),The new gradle plugin now generates the APK in a release/ directory.,0
Upgrade build.gradle,0.34667632, - Support Android O (fixes #44),"Target SDK version 27 and rename deprecated ""compile"" configuration to ""implementation"".",0
Upgrade gradle and gradle plugin,0.29977676, - Support Android O (fixes #44),Use gradle 4.1 and Android studio gradle plug-in 3.0.1.,0
Install client on start if necessary,0.73484904," - Install the client on ""gnirehtet start"" if necessary","On ""gnirehtet run"", the gnirehtet client was checked and installed (or updated) if necessary. Move this check to ""gnirehtet start"", to guarantee that the client is always up to date.",1
Refactor command-line parsing,0.6604056, - Handle command-line parsing natively (in Java and Rust),"Move command implementations to separate functions taking their exact parameter list. This is still a manual argument parsing, but convenient crates (like clap or structopt) make the resulting gnirehtet binary far bigger, and increase compilation time significantly.",0
Log error messages to stderr,0.8314149, - Always log error messages to stderr (fixes #62),"When the log level is Error, print on stderr instead of stdout. See link.",1
Do not leak EventHandler if Poll::register() fails,0.29997778, - Fix several race conditions related to client reconnection,"We first insert the EventHandler to the Slab to get a Token, then use the token to register the handle on the Poll. If the registration fails, we must remove the EventHandler from the Slab.",0
Close TCP connection on client close,0.7088139, - Terminate TCP connections gracefully (avoid many garbage packets),"When the TCP connection received a FIN, it stayed in CLOSE WAIT state without actually moving to LASK-ACK (cf diagram in RFC793: link). Since TCP connection is the TCP peer (from the Android client point of view), there is no need to wait for the network socket to be actually closed, so just flag ""remote closed"" immediately, and bypass the TCP CLOSE WAIT state. Fixes link.",1
Update mio to 0.6.11,0.508146,Workaround rust/mio issue on MacOS (#136),"Rust mio 0.6.11, the first release including the patch to support ""empty interest"", is available. Therefore, remove the temporary '[replace]' section in Cargo.toml, and use the last 0.6.x version. Also update other dependencies (generated by ""cargo update""). link",0
Add tunnel command,0.59183," - Add ""tunnel"" command to restart only the adb tunnel","Expose a ""tunnel"" command (automatically called by ""start"") to only setup the ""adb reverse"" tunnel.",0
Rename to must_install_client,0.54782176," - Install the client on ""gnirehtet start"" if necessary","For consistency with the other method names, rename mustInstallApk and must_install_gnirehtet to mustInstallClient and must_install_client.",0
Use localabstract socket for tunnel client-side,0.52750915, - Force IPv4 for tunnel connection (fixes #42),There is no need for a TCP connection between the Android application and the Android-side of the tunnel. A local socket is sufficient.,0
Update README for broadcast,0.35420954, - Add a Rust version of the relay server,The commit 4e1490fe3070134e2200e0e8f936f718a9794959 replaced the service by a broadcast receiver. Update the README accordingly.,0
Update release v2.1 links in README,0.32873118, - update relay-rust dependencies,,0
Upgrade gnirehtet version to 2.1,0.7960657,Gnirehtet v2.2.1,,1
Make GnirehtetService foreground,0.5414301,Gnirehtet v2.2.1,"To make Gnirehtet work with Android O, make GnirehtetService foreground, with a permanent notification. When the client fails to connect to the relay server, this permanent notification is used to report the problem.",0
Use a broadcast receiver to receive requests,0.5888634,"Use an activity (instead of a broadcast receiver) as entry point,","The start/stop requests were sent by ""am startservice"" and received by GnirehtetControlService. This behavior is incompatible with Android O, which forbids to run the service in the background: See:   link link Therefore, replace GnirehtetControlService by GnirehtetControlReceiver, so that Gnirehtet is controlled by broadcast intents. Suggested-by: Pascal Cans pcans@genymobile.com",0
Ignore checkstyle magic number warning,0.32623652, - Optimize TCP checksum computation,"Yes, in 127.0.0.1, 127 is a magic number. So be it.",0
Fix u16 overflow in IPv4PacketBuffer,0.61927736," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","When the buffer is full, self.head equals 0x10000, so converting its value to u16 results in 0. As a consequence, length <= self.head was mistakenly considered false, so the packet was never consumed. As a consequence, the next call to read_from() requested a read with a buffer of 0 bytes, so 0 bytes were read… which was interpreted as EOF, causing client disconnection. See link.",0
Force IPv4 for tunnel connection,0.8627902, - Force IPv4 for tunnel connection (fixes #42),"Port forwarding created by ""adb reverse"" only supports IPv4. Therefore, use 127.0.0.1 instead of the value returned by InetAddress.getLocalhost(), which is ::1 on some devices. See link.",1
"Indicate ""JRE"" for required Java version",0.3834648," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)","For running the Java version of Gnirehtet, indicate that the JRE is required, not the full JDK.",0
Add missing license headers,0.24618089," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)",Some recent files did not include the Apache license header. Include it.,0
Update links to our articles,0.13879144, - Fix gnirehtet rt on MacOS (link),Add links to the articles about the Rust version.,0
Update release v2.0 links in README,0.32214752, - update relay-rust dependencies,,0
Upgrade gnirehtet version to 2.0,0.8052368,Gnirehtet v2.2.1,,1
Move releaseRustWindows out of releaseAll,0.224218," - Fix ""Removing an unknown connection"" crash in the Rust version","For consistency, do not execute the gradle task ""releaseRustWindows"" on ""releaseAll"". Instead, explicitly invoke ""releaseRustWindow"" in the ./release script.",0
Check gnirehtet client version,0.7808838," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)","We checked whether the package ""com.genymobile.gnirehtet"" was present on the device. If absent, ""gnirehtet run"" installed it. However, we must also install the new APK if the installed version does not match. Therefore, parse the output of ""dumpsys package com.genymobile.gnirehtet"" to retrieve the versionCode.",1
Use mio from upstream,0.36798316,Workaround rust/mio issue on MacOS (#136),Use the upstream version of mio since this PR has been merged: link,0
Reformulate the adb section in README,0.577259, - Make adb path configurable,"The adb binary is available in the platform-tools for all the operating systems (not only Windows), so reformulate to clarify how to install adb.",0
Explain better how to install adb on Windows,0.44491893, - Make adb path configurable,"For Windows users, give more details to install adb easily.",0
Simplify usage for Windows,0.3448103, - Add gnirehtet.cmd script for Windows,"Provide an additional script ""gnirehtet-run"" that executes ""gnirehtet run"" without having to open a terminal manually.",0
"Rename ""gnirehtet"" to ""client"" where relevant",0.55881035," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)","For consistency and clarity, rename ""gnirehtet"" to ""client"" when it refers to the gnirehtet application running on an Android device.",0
Improve relay server starting logs,0.5539252, - Improve logs and error messages,"Log both the ""starting"" and ""started"" states for the relay server, consistently between Java and Rust.",0
Log adb commands as debug,0.4967118, - Make adb path configurable,The normal user don't care about these commands.,0
Fix is_gnirehtet_installed() error handling,0.5907013," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)","To detect whether gnirehtet is installed, we check whether the output of ""adb shell pm list packages com.genymobile.gnirehtet"" is empty. However, we must also check its error code, to report the error if the adb command fails.",0
Improve error handling,0.63466656, - Improve logs and error messages,"In CommandExecutionError, ""command"" was ambiguous, it referred both to:  - a gnirehtet command (start, stop, run, relay…),  - a process command (the execution of ""adb something""). CommandExecutionError was either an Io error or a Status error. When it is a process Io error, we want to report the failing command. Therefore, refactor the CommandExecution enum with 3 values:  - ProcessIo,      // io::Error due to process command execution  - ProcessStatus,  // a process command returned with non-zero value  - Io              // any other io::Error Thus, ProcessIo can provide the failing command, to be reported to the user. Also, move all the execution error classes to a separate module.",0
Add info log for is_gnirehtet_installed(),0.54892296," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)",Log the adb command-line executed to check whether gnirehtet is installed on the device.,0
Fix tests,0.24042952, - Improve logs and error messages,The method transport_header_data() return has been changed from &Option<…> to Option<&…>. Fix the tests accordingly.,0
"Format code with ""cargo fmt""",0.24732691,Workaround rust/mio issue on MacOS (#136),,0
Update Rust 1.19 to 1.20 in documentation,0.5793966, - update relay-rust dependencies,Update requirements to reference the last Rust environment version.,0
Use headers data directly when possible,0.2029171, - discard non-IPv4 packets (#69),"To route a packet to an existing connection, the Router only needs the headers data, not the whole headers (which include a reference to the raw array accessible through a ""borrowing view""). The whole headers are necessary only when it creates a new connection. Therefore, make Router use references to headers data directly until it has to create a new Connection.",0
Upgrade Android tools,0.4978074, - Support Android O (fixes #44),Upgrade Android tools to 2.3.3 and target API 26.,0
Update documentation for the Rust version,0.57274985, - update relay-rust dependencies,Update README and DEVELOP to document the Rust relay server.,0
Log with explicit TAG in Main,0.43780583, - Improve logs and error messages,Use a target TAG for logs in Main.,0
Simplify Ctrl+C termination,0.37053096, - Terminate TCP connections gracefully (avoid many garbage packets),"The interruption handler attempted to make the relay() call complete, so that gnirehtet exited normally. This added a lot of complexity, and was not free of race conditions: in the ctrlc crate implementation, the user handler is not called from the OS handler, so setting a flag in the user handler was inherently racy. Instead, just call exit() from the interrupt handler. This is far more simple and works perfectly.",0
Exit with non-zero status on error,0.3987929, - Always log error messages to stderr (fixes #62),"Exit gnirehtet with:  - 1 on unknown command,  - 2 on bad arguments,  - 3 on execution error.",0
Expand mio import,0.27622613,Workaround rust/mio issue on MacOS (#136),Use specific types instead of mio::*.,0
Fix warning message,0.4362558, - Improve logs and error messages,"The weak variable refers to the TunnelServer instance, not the client.",0
Simplify EventHandler storage,0.17607327, - Fix several race conditions related to client reconnection,"Remove mutability on EventHandler::on_ready(), so that the Selector need not to manage its own interior mutability. This removes two unnecessary layers in Selector at runtime (RefCell and Box). In return, each EventHandler implementation need to mutably borrow their ""owner"" to dispatch a mutable on_ready().",0
Upgrade dependencies minor version,0.45695147, - update relay-rust dependencies,And update gnirehtet for slab API changes.,0
Add Rust checkstyle gradle task,0.40512225, - Add a Rust version of the relay server,"Use ""cargo fmt"" to detect checkstyle errors.",0
Fix TCP checksum computation,0.88446677, - Optimize TCP checksum computation,"The last optimization broke TCP checksums, in a way that was not captured by unit tests. In an unsafe block, we computed an offset of (payload_length - 1). However, payload_length is u16 (unsigned), so the result was wrong when payload_length is 0. Fix the offset, and add a unit test for checksuming empty payloads.",1
Optimize Rust TCP checksum by using raw pointers,0.7042447, - Optimize TCP checksum computation,"Use raw pointers to iterate over the raw array directly, instead of using indices and calling get_unchecked(). This reduces the checksum computation time by ~4% (the bench takes ~770ms instead of ~800ms on my computer).",1
Optimize Rust TCP checksum by avoiding conversions,0.77472043, - Optimize TCP checksum computation,"Iterate using usize indices, instead of converting the index to usize for each iteration. This reduces the checksum computation time by ~20% (the bench takes ~800ms instead of ~1000ms on my computer).",1
Fix TCP checksum header_length,0.6714513, - Optimize TCP checksum computation,"The IP header_length was used instead of the TCP header_length in the Rust version. This had no consequences since in practice they are the same in gnirehtet (20 bytes), but this was still a bug.",0
Remove duplicate log in Java,0.4011139, - Improve logs,"The message ""Starting relay server..."" was logged twice (once before calling relay() and once in relay()).",0
"Give help if the user executes ""gnirehtet rt""",0.6195977," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","The ""rt"" command has been renamed to ""run"". To ease the transition, indicate that the command has been renamed.",0
Remove empty line (code style),0.13387525,"   so that the intent is always allowed by Android (#112, #117, #146,",Remove a duplicate empty line in IPv4Packet.java.,0
Fix documentation about selector awakening,0.27023897,Gnirehtet v2.4,"Since commit 75fa09ba94012b5251b11799e8c5227223cca803, SelectorAlarm has been replaced by a timeout.",0
"Add rust gradle ""build"" task",0.4547379, - update relay-rust dependencies,"For consistency with the Android and Java projects, add a ""build"" tasks that run checks and build both debug and release versions.",0
"Rename ""relay"" folders",0.37291577, - Add a Rust version of the relay server,"Move ""relay"" to ""relay-java"" and ""rustrelay"" to ""relay-rust"".",0
"Rename command ""rt"" to ""run""",0.8128272," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","Rename ""gnirehtet rt"" to ""gnirehtet run"", more meaningful.",1
Reduce CPU usage by tweaking MTU value,0.38667545, - Optimize TCP checksum computation,"The IP packets built by gnirehtet were at most 1440 bytes. When possible, use bigger packets to avoid overhead and reduce CPU usage. Typically, when downloading a big file from the host (accessible via 10.0.2.2), adb (used for ""adb reverse"") and gnirehtet consumed a lot of CPU. With bigger packets, they consume a bit less. Therefore, we want to send bigger packets to the VpnService interface having an accordingly higher MTU value. It is tempting to configure the highest possible packet length (0xFFFF, or 65535 bytes). However, use a MTU value of 0x4000 instead: with higher values like 0x8000 or 0xFFFF, or with lower values like 1500, the performances decrease dramatically (for unknown reasons). Here are some (very) approximate measurements (with ""top"") of the host CPU usage while downloading a file hosted on Apache on my laptop, from Firefox on a Nexus 5 having AOSP 6.0.1 (opening the URL link):                                     gnirehtet                              adb   java   rust before checksum improvements   ~56%   ~17%   ~11%            before this commit   ~56%   ~13%   ~ 7%             after this commit   ~36%   ~ 5%   ~ 2%               with ""adb push""   ~41% (but transfers at a higher rate)                              (lower is better)",0
Optimize Java IP checksum,0.77817595, - Optimize TCP checksum computation,"Contrary to the current Rust implementation, the IP checksum in Java has room for optimization. Like for the TCP checksum, access the raw byte[] array without using a ByteBuffer, and compute 16-bit values from two 8-bit values manually. The new implementation runs ~1.5× faster (i.e. it takes 64% of the time required by the old implementation).",1
Add benchmark for Java IP checksum,0.68624103, - Optimize TCP checksum computation,Add a benchmark for IP checksum computation in Java. Implement it alone in a separate commit so that it is easier to compare results before and after optimizations.,0
Optimize Java TCP checksum,0.891875, - Optimize TCP checksum computation,"Like in the Rust implementation, we need to optimize checksums computation. The main source of optimization resides in accessing the raw byte[] without using a ByteBuffer, computing 16-bit values from two 8-bit values manually. Contrary to what we measured in Rust, summing high-order and low-order bytes separately to do the shift operation only once has no performance impact. Therefore, do not implement it that way. The new implementation runs ~2.5× faster (i.e. it takes 39% of the time required by the old implementation). However, the Rust implementation runs ~2,7× faster than the Java one.",1
Add benchmark for Java TCP checksum,0.78903234, - Optimize TCP checksum computation,Add a benchmark for TCP checksum computation in Java. Implement it alone in a separate commit so that it is easier to compare results before and after optimizations.,1
Optimize more Rust TCP checksum with unsafe,0.761292, - Optimize TCP checksum computation,"For summing array items, use unchecked accesses to the array, in order to avoid bounds checking for every value. This runs ~4.1× faster than with bounds checking (i.e. it takes ~24% of the time necessary when bounds checking is enabled). Overall (including the previous optimizations), the resulting implementation is ~18× faster (it runs in 5.5% of the time required by the old implementation). Since this is the most CPU-intensive task, gnirehtet uses significantly less CPU than before.",1
Optimize Rust TCP checksum,0.8255223, - Optimize TCP checksum computation,"Checksums computation is the most CPU-intensive task in gnirehtet, so it needs to be optimized. Firstly, do not use a Cursor (a non-zero-cost abstraction). Secondly, for summing 16-bit values, sum high-order and low-order bytes separately. This allow to do the shift operation only once (instead of once per value). The new implementations runs ~4.4× faster (i.e. it takes ~23% of the time required by the old implementation).",1
Add benchmark for Rust TCP checksum,0.7322203, - Optimize TCP checksum computation,Add a benchmark for TCP checksum computation in Rust. Implement it alone in a separate commit so that it is easier to compare results before and after optimizations.,1
Improve TCP checksum tests,0.85228896, - Optimize TCP checksum computation,"Put a short value having its sign bit set in the payload, so that a signedness mistake in the checksum computation will be catched.",1
Reference our mio fork by a tag,0.3061419,Workaround rust/mio issue on MacOS (#136),"Using our own fork of mio, we referenced the version using the branch name ""empty_interest"". However, this branch is susceptible to be rebased, breaking our history. Instead, use a tag that will never be moved.",0
Remove useless mut in tests,0.25113168,Workaround rust/mio issue on MacOS (#136),The variable containing the mutable slice to the raw packet does not need to be mutable itself.,0
Retry on Interrupted error,0.4589041, - Fix several race conditions related to client reconnection,"A blocking call may return an Err having ""Interrupted"" as kind(), typically when the user press Ctrl+C in ""gnirehtet rt"". The error was thrown and the relay server was interrupted. However, an ""Interrupted"" error may occur in other cases. Concretely, using a cpuprofiler causes poll() to generate such errors sometimes. Therefore, retry on ""Interrupted"" when no interruption was requested by the user.",0
Fix cleanup poll timeout,0.4678529,Fix cleanup race condition in Java relay server (#154),"In order to regularly clean up UDP connections, we wake up a blocking poll with a timeout. When the timeout is not positive, poll with a timeout of 0 (Some(0)), not without any timeout (None).",0
Log errors using logger,0.66350025, - Improve logs and error messages,Replace writes to stderr by error logs.,0
Log adb commands in Rust,0.4275373, - Make adb path configurable,Log the adb commands executed by the Rust version the same way as the Java version.,0
Add restart command,0.48126465," - Add ""tunnel"" command to restart only the adb tunnel","The same way there is a ""reinstall"" command that uninstalls then installs, create a ""restart"" command that stops and starts.",0
Precompute ConnectionId string,0.3233741,Add command-line option to use a custom port (#210),"ConnectionId is immutable, but its string representation was recomputed for every log. Instead, compute the string once on construction.",0
Add license header to rust files,0.3869604, - Add a Rust version of the relay server,Prepend the license to .rs files.,0
Update rustrelay dependencies,0.7243024, - update relay-rust dependencies,"Generated by ""cargo update"".",1
Do not reregister interests when not necessary,0.24176145,"   so that the intent is always allowed by Android (#112, #117, #146,","As an optimization, do not call the underlying async I/O API (Java NIO and mio) when the interests have not changed. This also prevents mio to trigger problematic spurious events on Windows. See link.",0
Log Error/Hup as debug,0.60634315, - Improve logs and error messages,The Error or Hup events are expected when registered with no interests. Logging them as debug is sufficient.,0
Rename interestingOps to interestOps,0.19924806, - Support Android O (fixes #44),"For consistency with the Java NIO API, rename the variable containing the interests.",0
Defer interests setting for TCP,0.49924415, - Terminate TCP connections gracefully (avoid many garbage packets),"The SocketChannel/TcpStream was registered with some interests, but they were never used, because they are updated on first packet received. Therefore, make this behavior explicit by setting empty interests.",0
Log UDP interests,0.26337576, - Terminate TCP connections gracefully (avoid many garbage packets),Log the UDP interests in the same way as for TCP.,0
Improve TCP readable detection,0.5834435, - Optimize TCP checksum computation,"The remaining client window is invalid until the connection is established. Therefore, make may_read() return false directly in that case, without relying on remaining_client_window().",0
"Remove ""get_"" from method name",0.21652602," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","For consistency, do not prefix method names by ""get_"".",0
Accept empty interest in mio,0.23608933,Workaround rust/mio issue on MacOS (#136),"Currently, the mio library does not accept registering a handle with empty interest. As a workaround, we provided a wrapper that exposed an API that did, calling deregister/reregister internally as necessary. However, this workaround does not work on Windows, because deregister/reregister is not implemented: link Therefore, make mio accept empty interest directly: link This is implemented in our own fork, unless this change is accepted upstream or we manage to find a solution that works with the upstream version.",0
Generate both java and rust versions on release,0.44458985, - update relay-rust dependencies,"Upgrade ""release"" script to generate both the java and the rust version of gnirehtet.",0
Wait handler completion with a condition variable,0.26118904, - Fix several race conditions related to client reconnection,Wait the completion of the handler execution properly with a condition variable instead of an arbitrary sleep of 1 second.,0
Move poll interruption handling to Main,0.36867756, - Fix disconnection notification appearing while gnirehtet has been stopped,"On Ctrl+C, poll() will return an error with ErrorKind::Interrupted. Instead of handling it locally, throw it up until main, which catch the error. In case of interruption, wait a bit before exiting, so that the handler execution is complete. This avoids to print logs to the terminal after the prompt is available.",0
Rename Relay start() to run(),0.5005737," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","The name ""start"" suggested it is started asynchronously (like in the Java thread API), but relay is running synchronously.",0
Merge branch 'rust' into dev,0.43893045, - update relay-rust dependencies,,0
Add connection opening logs,0.41603467, - Improve logs and error messages,Log new connections as info.,0
Use Self for associated functions,0.10636111," - Add ""-r ROUTE"" option to reverse tether only specific routes","For consistency, use Self for calling associated functions in the same class.",0
Handle gnirehtet commandline in rustrelay,0.6419378," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","Expose gnirehtet commands directly in the rustrelay executable, so that there is no need for a wrapping shell script. Consequently, rename rustrelay to gnirehtet (to generate a binary named ""gnirehtet"" or ""gnirehtet.exe"").",0
Format code,0.19184703,"   so that the intent is always allowed by Android (#112, #117, #146,","Format code with ""cargo fmt"".",0
Improve gradle debug/release/check tasks,0.34459764, - Improve logs and error messages,"The 'release' gradle task should not depend on 'test' or 'check'. Instead, request explicitly to execute 'check' in the ./release script. Rename rust task 'build' to 'debug' for consistency, and expose 'check' tasks to the root project.",0
Add task to cross-compile rustrelay for Windows,0.46849462, - Add a Rust version of the relay server,Use cargo to generate rustrelay.exe for Windows from Linux.,0
Build rustrelay through gradle,0.46249294, - update relay-rust dependencies,"Expose gradle tasks that just delegates to ""cargo"", so rustrelay may be built along with the other parts of gnirehtet.",0
Log spurious events as debug,0.4597801, - Improve logs and error messages,"Spurious events are frequent on Windows. This is the expected behavior, so there is no need to warn.",0
Set default log level to Info,0.47397515, - Improve logs and error messages,Use the same log level in both java and rust versions of the relay server.,0
Fix rust tests warnings,0.5703875," - Fix ""Removing an unknown connection"" crash in the Rust version",Remove unused import and unnecessary mut.,0
Ignore spurious wakeups,0.3290773, - Fix disconnection notification appearing while gnirehtet has been stopped,Poll::poll() may return without events: link Do not panic if that happens.,0
Ignore spurious events,0.24674883, - Terminate TCP connections gracefully (avoid many garbage packets),"poll() may generate spurious events: link Thus, even on a readable or writable event, a call to read() or write() may fail with WouldBlock. In that case, we must ignore them: link",0
Use Self to call static methods,0.19104666," - Add ""autostart"" and ""autorun"" commands to start on device connection","For consistency, use Self to call static methods (associated functions).",0
Add Cargo.lock,0.27209726, - Add a Rust version of the relay server,Cargo.lock should be committed for binaries: link,0
Ignore fmt backup files,0.19858406, - discard non-IPv4 packets (#69),"The command ""cargo fmt"" backups files to *.rs.bk. Ignore them in git.",0
Fix connections expiration,0.46956193, - Do not leak TCP connections (fixes #57),"To remove the expired connections, the Vec were iterated forward, and its current item was removed when is_expired(). This was incorrect, because a removal impacts indices of items not handled yet. To fix the problem, iterate over the connections backwards.",0
"Apply code style with ""cargo fmt""",0.2634873,Workaround rust/mio issue on MacOS (#136),,0
Make case consistent with standard library,0.22955005, - Handle command-line parsing natively (in Java and Rust),"The Rust standard library contains the following types:  - TcpStream  - UdpSocket  - IpAddr  - Ipv4Addr For naming consistency, change the case in the following type names:  - IPv4Header -> Ipv4Header  - IPv4HeaderData -> Ipv4HeaderData  - IPv4HeaderMut -> Ipv4HeaderMut  - IPv4Packet -> Ipv4Packet  - TCB -> Tcb  - TCPConnection -> TcpConnection  - TCPHeader -> TcpHeader  - TCPHeaderData -> TcpHeaderData  - TCPHeaderMut -> TcpHeaderMut  - TCPState -> TcpState  - UDPConnection -> UdpConnection  - UDPHeader -> UdpHeader  - UDPHeaderData -> UdpHeaderData  - UDPHeaderMut -> UdpHeaderMut",0
Improve messages on read/write errors,0.6901639, - Improve logs and error messages,Log the ErrorKind along with the error message.,0
Ignore event if already closed,0.30245298, - Fix disconnection notification appearing while gnirehtet has been stopped,"An event may be received while the client or connection is already closed. For instance, when poll() generates several events, handled successively, the first handler may close the connection associated to the second handler. Therefore, ignore the event when the ""closed"" flag is set.",0
Move event handlers execution to Selector,0.11215326, - Make reverse tethering starting faster,"Relay does not need to know the internals, it now just calls selector.poll() followed by selector.run_handlers().",0
Defer token removal (fix race condition),0.48884708,Fix cleanup race condition in Java relay server (#154),"A call to poll() may generate several events, that we handle successively. There was a race condition on deregistration. Suppose that poll() generated two events:  - Token(1) a Client  - Token(2) a TCPConnection (associated to the client) During execution of the handler associated to Token(1), the  TCPConnection is closed, leading to a call to  selector.deregister(Token(2)). Then, we want to execute the handler associated to Token(2) (the second  event), but since it has been deregistered, it does not exist anymore,  and panic! To avoid this problem, make Selector.deregister() mark the handlers as  removed, but kept in selector.handlers until all current event handlers  are executed.",0
Do not reregister unnecessarily,0.3045776, - Fix several race conditions related to client reconnection,"The reregister() method must only be called when the handler was already registered. This was harmless though, because it is registered in the if-block, but reregistered() should definitely not be called in that case.",0
"Extract tcp_header without ""if let"" in constructor",0.41448027, - discard non-IPv4 packets (#69),"Like in other places, extract tcp_heaer without ""if let"". For that purpose, move headers instead of borrowing them.",0
Remove dead code,0.26433593,Fix cleanup race condition in Java relay server (#154),,0
Improve destination rewriting,0.27095366," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Delete old commented code,0.17871085,Fix cleanup race condition in Java relay server (#154),,0
Log packets sent to client,0.41301653, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Fix sequence number after sending,0.25063917,"   (#61, #85, #86, #91)",,0
Set packet_for_client_length on deferred,0.5423546," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","When the client buffer is full, we need to ""disable"" the TCPConnection until the client ""pulls"" the pending packet.",0
Fix remaining window,0.2416051, - fix possible crash on Android O on stop intent (#129),,0
Implement TCP client window,0.50535697, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Fix style,0.1796022, - Fix possible disconnection on upload (fixes #43),,0
Make Selector accept an empty Ready,0.11663953, - Fix disconnection notification appearing while gnirehtet has been stopped,"Poll does not accept to register an empty Ready. For simplifying its usage, expose an API that does.",0
Remove unused RunningState,0.32099396,Fix cleanup race condition in Java relay server (#154),,0
Log connection message with cx_debug() macro,0.43311995, - Always log error messages to stderr (fixes #62),,0
Fix comment,0.2624327, - Improve logs and error messages,,0
Fix assignment,0.2488798, - fix adb monitor on multiple devices (#134),,0
Improve comment,0.3785376, - Improve logs and error messages,,0
Fix warning,0.38630554, - Improve logs and error messages,,0
Implement reset connection for client and channel,0.5703563, - Fix several race conditions related to client reconnection,,0
Improve send/reply to client API,0.35854048, - Fix several race conditions related to client reconnection,,0
Reply empty packets to client using ClientChannel,0.432638, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Introduce ClientChannel,0.3422468," - Install the client on ""gnirehtet start"" if necessary","A connection (e.g. TCPConnection) has a Rc/RefCell to its client. When a Client sends a TCP packet, the TCPConnection may immediately reply (typically with an empty packet with flags set). However, the TCPConnection may not borrow its client RefCell, since the client is already borrowed by the caller. As a consequence, the caller must give the possibility to reply a packet immediately. Therefore, provide ClientChannel, a lifetime-bounded view of the client StreamBuffer, so that the connection may send packets to the borrowed client.",0
Merge disconnect() and close(),0.48970014, - Fix disconnection notification appearing while gnirehtet has been stopped,There is no reason for the distinction between disconnect() and close().,0
Assume !closed in update_interests(),0.22048748,"   so that the intent is always allowed by Android (#112, #117, #146,",The method update_interests() should never be called when the connection is closed.,0
Implement UDPConnection.is_closed(),0.4589944, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Expose Connection.is_closed(),0.42850626, - Do not leak TCP connections (fixes #57),So that the Router may remove the connection without using a callback.,0
"Handle ""connectable"" event",0.51472956, - Fix several race conditions related to client reconnection,"Contrary to Java/NIO, mio::Poll exposes only ""readable"" and ""writable"" events. The event ""connectable"" is in fact the very first ""writable"" event.",0
Improve IPv4PacketBuffer multi-packets tests,0.60247946," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",Use different packet length and headers so that parse_multi_packets() detects issues with ptr::copy().,0
Fix call to ptr::copy,0.26852062," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Fix StreamBuffer tests,0.4180928," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Route TCP connections,0.47804648, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Fix StreamBuffer.read_from(),0.46802753," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Fix warnings,0.51614416, - Improve logs and error messages,,0
Fix TCPConnection may_read(),0.5753233, - Do not leak TCP connections (fixes #57),,0
Implement TCPConnection.handle_ack(),0.5397971, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Make StreamBuffer.read_from() always succeed,0.40523767," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement TCPConnection.handle_fin(),0.5012021, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement TCPConnection.handle_duplicate_syn(),0.49910927, - Do not leak TCP connections (fixes #57),,0
Generate random TCP sequence number,0.4278733, - Optimize TCP checksum computation,,0
Implement TCPConnection.handle_first_packet(),0.5123449, - Terminate TCP connections gracefully (avoid many garbage packets),,0
"Extract tcp_header without ""if let""",0.43818253, - discard non-IPv4 packets (#69),This avoids one level of indentation everywhere.,0
Rc/RefCell for EventHandlers in Slab,0.22182879," - Fix ""./gnirehtet rt"" stopping when several devices are connected",So that we can get a mut ref to the handler without removing it from the Slab.,0
Add DatagramBuffer assertion,0.37998608," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Fix Packetizer tests,0.5260411," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Remove connections without borrowing,0.3877647," - Fix ""Removing an unknown connection"" crash in the Rust version","To remove itself from the router, pass connection ""self"" instead of ""id"" to Router.remove(). That way, the router may remove the connection by comparing pointers instead of borrowing to compare ids. This avoids runtime panic when the connection is already mutably borrowed.",0
Introduce RunningState for Selector,0.16453138,"Use an activity (instead of a broadcast receiver) as entry point,",Use a structure to know whether the current event handler has to be re-inserted to the Slab once executed.,0
Current token removal management,0.28244737,Fix cleanup race condition in Java relay server (#154),,0
Add macros to log connection messages,0.5489297, - Improve logs and error messages,Provide macros to log connection messages with the connection id.,0
Implement TCPConnection.handle_packet(),0.5438213, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Factorize code to send empty TCP packet to client,0.48045185, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Inline some methods,0.14377391,"   so that the intent is always allowed by Android (#112, #117, #146,",,0
Implement TCPConnection.handle_packet() skeleton,0.5392564, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Handle pending packet source,0.53044575, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Remove method to send raw data to client,0.29274166, - Terminate TCP connections gracefully (avoid many garbage packets),We don't use it.,0
Wrap seq/ack numbers to accept overflow,0.27883795,"   #150, #151, #161, #178, #180, #187, #190, #199, #227, #242)",TCP numbers are designed to wrap-around on overflow.,0
Introduce PacketSource,0.34154773, - Add a Rust version of the relay server,,0
Remove PacketStorage,0.4151983, - discard non-IPv4 packets (#69),,0
Add self-weak to TCPConnection,0.5449146, - Do not leak TCP connections (fixes #57),,0
Implement EventHandler for TCPConnection,0.44628137, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement EventHandler for UDPConnection,0.37178275, - Fix several race conditions related to client reconnection,,0
"Revert ""Self-weak for Client""",0.3996735, - Fix several race conditions related to client reconnection,This reverts commit ae1914c873dcd6e449d10459054740f4edc97e50. (useless),0
Implement EventHandler for TunnelServer,0.4959393, - Improve disconnection detection when the relay server is behind a tunnel,This requires to store a self-weak.,0
Self-weak for Client,0.33142596, - Fix several race conditions related to client reconnection,"Implement a mechanism similar to enabled_shared_from_this in C++, so that a client instance may access its Rc owner, e.g. to register itself somewhere.",0
Implement EventHandler for Client,0.35988063, - Fix several race conditions related to client reconnection,,0
EventHandler as mutable,0.18321368,Fix cleanup race condition in Java relay server (#154),,0
Slab using Boxed handlers,0.20187229," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Move PacketStorage to its own file,0.3871047," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Introduce PacketStorage,0.38815844," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",IPv4Packet is always a view on a pre-existing buffer. PacketStorage aims to give the possibility to store a copy of a packet.,0
Expose a method to send raw data to client,0.21854967,"Use an activity (instead of a broadcast receiver) as entry point,",So that we can send a raw packet without an IPv4Packet structure.,0
Fix style for consistency,0.21579608, - Fix possible disconnection on upload (fixes #43),,0
Implement TCPConnection.close(),0.6660036, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement TCP connection reset,0.65760666, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Send packet to client on process_receive(),0.43901092," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Factorize TCPConnection.send_to_client(),0.44586337, - Do not leak TCP connections (fixes #57),,0
Extract TCPConnection state to a struct,0.40958807, - Terminate TCP connections gracefully (avoid many garbage packets),This simplify borrowing rules. The struct is named TCB for Transmission Control Block.,0
Refactor functions not to mutably borrow self,0.20026495, - Fix several race conditions related to client reconnection,Convert methods to associated functions not to mutably borrow self.,0
Implement TCPConnection.process_receive(),0.4638219, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement TCPConnection.process_receive() skeleton,0.47474438, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement TCPConnection.may_read(),0.47195548, - Do not leak TCP connections (fixes #57),,0
Expose Packetizer manual inflate(),0.40430343," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","Expose buffer without managing ""last_packet"". This is not the job of Packetizer to manage the ""last packet"" thing, and it incurs a cost while it is not always necessary.",0
Store length of last packet read in Packetizer,0.49113518," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",So that we may read it again.,0
Implement TCPConnection.process_send(),0.4796407, - Do not leak TCP connections (fixes #57),,0
Improve TCPConnection.update_interests(),0.4299497, - Do not leak TCP connections (fixes #57),,0
Convert from Mut to non-Mut manually,0.20742801,Workaround rust/mio issue on MacOS (#136),,0
Implement TCPConnection skeleton,0.47588488, - Do not leak TCP connections (fixes #57),,0
Implement xHeaderMut to xHeader conversion,0.16337727," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",,0
Replace reference packet by headers,0.4359522," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Fix runtime panic due to forbidden borrowing,0.3551442,Workaround rust/mio issue on MacOS (#136),"In order to find the client in the list, do not borrow it, but just get the raw pointer instead. Otherwise, in addition to the unnecessary runtime overhead, the client refcell is already borrowed mutably, leading to a runtime panic.",0
Read 0 bytes means EOF,0.2999342," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Improve style,0.2360694, - Improve logs and error messages,,0
Fix checksum tests,0.55941856, - Optimize TCP checksum computation,,0
Fix tests compilation,0.28574342, - Always log error messages to stderr (fixes #62),,0
Improve checksum tests,0.65222704, - Optimize TCP checksum computation,,0
Compute checksom from a non-mutable borrow,0.44367418, - Optimize TCP checksum computation,,0
Pave the way to compute packet checksum,0.78728926, - Optimize TCP checksum computation,,1
Fix IPv4PacketBuffer condition,0.63133407," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Rewrite TCP checksum from header and payload,0.7016738, - Optimize TCP checksum computation,,1
Provide bind() and bind_mut() for headers,0.20446731,Gnirehtet v2.2.1,A header is composed of a HeaderData and a reference to the byte array. Provide bind(raw) and bind_mut(raw) to easily create an Header (parametered by a lifetime) from a HeaderData and the raw array.,0
Provide views for TransportHeader,0.25834656," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Fix IPv4 packet tests after refacto,0.5925956, - discard non-IPv4 packets (#69),,0
Fix version/length peek,0.2506956, - Support Android O (fixes #44),,0
"Provide both mutable and non-mutable ""views""",0.12672505,Gnirehtet v2.1,,0
Introduce TCPConnection,0.49169338, - Do not leak TCP connections (fixes #57),,0
"Introduce header ""views""",0.10298884,Gnirehtet v2.1,"IPv4Packet is the only owner of the raw data as &[u8]. Therefore, accessing headers is cumbersome: the caller has to provide the raw slice associated to the headers. To avoid this problem, provide a lifetime-bounded view of headers that borrows the raw data.",0
Expose ranges in IPv4Packet,0.4466465, - discard non-IPv4 packets (#69),,0
Rename raw to transport_raw,0.32272926," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","compute_checksum() expects the whole payload raw buffer, including header + payload, so rename it to transport_raw.",0
Add tests for IPv4Packet,0.50927615, - discard non-IPv4 packets (#69),,0
Add TCP checksum test for odd-length payloads,0.61343837, - Optimize TCP checksum computation,,0
Simplify checksum test,0.6485771, - Optimize TCP checksum computation,,0
Pass transport raw for checksum,0.55862147, - Optimize TCP checksum computation,"Instead of whole packet raw, where the ip header is unused.",0
Add TCP checksum test,0.8083061, - Optimize TCP checksum computation,,1
Add tests for TCPHeader,0.29917973, - Optimize TCP checksum computation,,0
Fix warnings in tests,0.43460798, - Always log error messages to stderr (fixes #62),,0
Implement TCP checksum,0.8478457, - Optimize TCP checksum computation,,1
Improve UDPConnection.update_interests(),0.3777136, - Fix several race conditions related to client reconnection,,0
Remove unused ConnectionId::new(),0.47314095," - Fix ""Removing an unknown connection"" crash in the Rust version",,0
Fix non-dead-code warnings,0.50507927, - Always log error messages to stderr (fixes #62),,0
Drop UDP packet on client buffer full,0.5702306, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Log binary packets,0.41468632," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Improve Selector.deregister(),0.17424688, - Fix disconnection notification appearing while gnirehtet has been stopped,,0
Provide connection ids in logs,0.43197587, - Improve logs and error messages,,0
UDP connection expiration,0.45445567, - Fix delayed VPN closing,Check regularly to expire UDP connections after 2 minutes idle.,0
IPv4Packet slice length,0.49512738," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement UDPConnection.disconnect(),0.46585461, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Fix checksum storage,0.51460946, - Optimize TCP checksum computation,The UDP checksum was written at raw[6..8] instead of transport[6..8].,0
Remove useless clone(),0.20441774," - Fix ""Removing an unknown connection"" crash in the Rust version",,0
Binary array to string,0.15334354,"   #150, #151, #161, #178, #180, #187, #190, #199, #227, #242)",,0
Implement UDPConnection.send_to_network(),0.3385036," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Panic on poll failure,0.27414292, - Fix possible disconnection on upload (fixes #43),"Do not expose poll errors, just panic.",0
Add target in log,0.50091934, - Improve logs and error messages,,0
Fix logger threshold,0.55118185, - Improve logs,,0
Implement UDPConnection.process_receive(),0.35404932, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Rename packet_length() to length(),0.53363454," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement Client.send_to_client(),0.28603148, - Fix several race conditions related to client reconnection,,0
Introduce pending packet for UDPConnection,0.4362393, - Fix several race conditions related to client reconnection,,0
ReadAdapter for DatagramReceiver,0.27768892,"Use an activity (instead of a broadcast receiver) as entry point,",So that we can implement Packetizer both from a TcpStream and a UdpSocket.,0
Introduce datagram helpers,0.18773828, - Handle command-line parsing natively (in Java and Rust),"Move DatagramSender and add DatagramReceiver to a new module ""datagram"".",0
Introduce DatagramSender,0.21802932," - Install the client on ""gnirehtet start"" if necessary","Unlike TcpStream, UdpSocket does not implement Write (because its semantics is to preserve boundaries, breaking Write composability). Therefore, introduce a new Trait, DatagramSender, implemented for UdpSocket, so that DatagramBuffer may write to it. Implement a mock implementation that store a datagram in memory for testing.",0
Remove Route abstraction,0.42105252," - Add ""-r ROUTE"" option to reverse tether only specific routes",Cf commit 94780acd23d6c2b0348ec2359d5d5db87fb90169 in gnirehtet.,0
Implement UDPConnection.close(),0.52348757, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement UDPConnection skeleton,0.32922503, - Fix several race conditions related to client reconnection,,0
Store token,0.13621,"   so that the intent is always allowed by Android (#112, #117, #146,",,0
Register UDP socket on Selector,0.4211192,Add command-line option to use a custom port (#210),,0
Pass selector everywhere,0.15075606,"   so that the intent is always allowed by Android (#112, #117, #146,",,0
Implement UDPConnection::new(),0.3828557," - Fix ""Removing an unknown connection"" crash in the Rust version",,0
Improve scoping,0.19955939, - Always log error messages to stderr (fixes #62),,0
Implement UDPConnection::create_socket(),0.35170975, - Do not leak TCP connections (fixes #57),,0
Remove Route.close_listener,0.3387968," - Add ""-r ROUTE"" option to reverse tether only specific routes","The route knows the client, use it to remove the route from its router, in order to get rid of the callback mechanism, which adds too much complexity in Rust.",0
Rewrite 10.0.2.2 to 127.0.0.1,0.3099354,Add command-line option to use a custom port (#210),,0
Pass route key to connections,0.45907086," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Pass weak-client to connections,0.5159178, - Do not leak TCP connections (fixes #57),,0
Dynamically dispatch connections,0.4875695, - Fix several race conditions related to client reconnection,"Make Connection a trait. Connection was implemented to statically dispatch over TCPConnection and UDPConnection. However, these instance need to be shared between the Route and the selector, so they are embedded into an Rc<RefCell<…>>. Mixing static dispatch with indirection adds complexity and is not elegant. Therefore, switch to dynamic dispatch.",0
Make IPv4Packet fields private,0.4381389, - discard non-IPv4 packets (#69),,0
Make IPv4Header fields private,0.4414332, - discard non-IPv4 packets (#69),,0
Create UDP connection,0.31367654,Add command-line option to use a custom port (#210),,0
Non-copyable TransportHeader/IPv4Header,0.4932464, - discard non-IPv4 packets (#69),Use explicit clone() instead.,0
Borrow raw data as non-mutable in Packetizer,0.41592875," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",Packetizer does not write into the buffer.,0
Forward route methods to connection,0.52653396," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Create connection from Route,0.50691134," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Statically dispatch connections,0.4434356, - Fix several race conditions related to client reconnection,,0
Implement Route CloseListener,0.3557565," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
"Remove ""get_"" prefix for getters",0.16116492,Gnirehtet v2.4,To follow rust code style conventions.,0
Rename switch to swap,0.22402583," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",,0
Remove SourceDestination,0.25328684, - Fix disconnection notification appearing while gnirehtet has been stopped,This tiny abstraction added complexity without benefits.,0
Add tests for Packetizer,0.47129542," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Use Vec::new(),0.15076344," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement Packetizer.packetize(),0.5091281," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Store transport_index and payload_index,0.25942487, - discard non-IPv4 packets (#69),,0
Remove useless 0 index in array ranges,0.28290343, - discard non-IPv4 packets (#69),,0
Implement Packetizer.inflate(),0.47122163," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Pass reference to headers separately,0.1498706,Gnirehtet v2.4,So that there is no need to have a full IPv4Packet.,0
Implement Packetizer::new(),0.48658454," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Rename IPv4Packet::new() to parse(),0.46740946, - discard non-IPv4 packets (#69),,0
Factorize TransportHeader::parse(),0.2997005, - Handle command-line parsing natively (in Java and Rust),,0
Expose transport header length,0.32740653," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Introduce Packetizer,0.45022142," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Introduce UDPConnection,0.37571898," - Add ""autostart"" and ""autorun"" commands to start on device connection",,0
Provide send_to_network() skeleton,0.35449582," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Type-erase CloseListener in Client::new(),0.32392234, - Fix several race conditions related to client reconnection,"Client::new() was a generic function to accept statically any CloseListener. That way, the caller may directly pass a closure. However, this implies that there will be one version of this function for every CloseListener type. To prevent this, type-erase the listener instead. Note that currently, there is exactly one call to Client::new(), so there is only one version. But the intent is to get one version whatever the number of different CloseListener types.",0
Move comment,0.15945578, - Improve logs,,0
Call router methods from Client,0.32668465," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Set Client as Router owner,0.29387712," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Implement Route.find_route_index(),0.40351027," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Improve Router skeleton,0.22083588," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Rewrite byteorder crate comment,0.21312925, - Always log error messages to stderr (fixes #62),,0
Introduce Router,0.20263833,"Use an activity (instead of a broadcast receiver) as entry point,",,0
"Remove useless "",""",0.20029281,"   #150, #151, #161, #178, #180, #187, #190, #199, #227, #242)",,0
Route constructors,0.30913514," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Impl SourceDestination for TransportHeader,0.29288194,Gnirehtet v2.4,,0
Implement Route,0.46162128," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Move to_byte_array() to binary,0.2991994," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement client id initialization,0.4216633, - Fix several race conditions related to client reconnection,,0
Add more tests to StreamBuffer,0.37524337," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Add tests for StreamBuffer,0.35541177," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Make StreamBuffer.read_from() return Result,0.37256455," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","For consistency with DatagramBuffer.read_from(), do not assume that there is enough space in the buffer. Return a result to force the caller to handle this case.",0
Factorize DatagramBuffer tests,0.22230077," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement StreamBuffer.optimize(),0.3443226," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement StreamBuffer.read_from(),0.38387913," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement StreamBuffer.write_to(),0.39670637," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Introduce StreamBuffer,0.34835562," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement Client.push_to_network(),0.29012728, - Fix several race conditions related to client reconnection,,0
Implement Client.close(),0.4879066, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Remove client on close,0.41355973, - Fix several race conditions related to client reconnection,,0
Rename DeathListener to CloseListener,0.30547208, - Fix disconnection notification appearing while gnirehtet has been stopped,,0
Use closure for on_client_death,0.43464282, - Fix several race conditions related to client reconnection,,0
Introduce DeathListener,0.2602415, - Fix disconnection notification appearing while gnirehtet has been stopped,So that the client may remove itself from the TunnelServer when it is closed.,0
Handle Rc in Selector internally,0.22307609," - Fix ""./gnirehtet rt"" stopping when several devices are connected",,0
Store handlers as Rc,0.31921452, - Handle command-line parsing natively (in Java and Rust),,0
Use closures for selector handlers,0.08726888, - Handle command-line parsing natively (in Java and Rust),,0
Use Self in constructors,0.15761204," - Add ""autostart"" and ""autorun"" commands to start on device connection",,0
Move poll to Selector,0.1551521, - Fix gnirehtet rt [serial] with several devices plugged,,0
Move events out of the loop,0.22245012,Fix cleanup race condition in Java relay server (#154),Do not create a new events storage for every poll().,0
Move event handler execution to Selector,0.11665304, - Make reverse tethering starting faster,,0
Client processing skeleton,0.30259177, - Fix several race conditions related to client reconnection,,0
Client event handling skeleton,0.33918232, - Fix several race conditions related to client reconnection,,0
Pass Event instead of Ready to EventHandler,0.17767905, - Make reverse tethering starting faster,So that we have the event token to reregister.,0
Add IPv4PacketBuffer to Client,0.5610025," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Add DatagramBuffer tests,0.31825054," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Fix some IPv4PacketBuffer warnings,0.64196116," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement DatagramBuffer,0.36560017," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Replace static by const for TAGs,0.17023137, - Add a Rust version of the relay server,,0
Improve IPv4PacketBuffer.next(),0.58774036," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
DatagramBuffer skeleton,0.2759905," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
More tests for IPv4PacketBuffer,0.55772483," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Add test for fragmented packet in IPv4PacketBuffer,0.55454004," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Move test method,0.13368249," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",,0
Test parsing of IPv4PacketBuffer,0.55406225," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Fix IPv4 header parsing,0.54840785, - discard non-IPv4 packets (#69),It parsed transport data at a wrong location.,0
Add tests for IPv4 header length,0.48579973," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement IPv4PacketBuffer,0.586021," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Simplify u32 annotation,0.23806465,Gnirehtet v2.4,,0
Implement read_length() and read_version(),0.25403056," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Introduce IPv4PacketBuffer,0.54493994," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Implement SourceDestination for IPv4Header,0.42781085, - discard non-IPv4 packets (#69),,0
Introduce SourceDestination trait,0.18871221,"   so that the intent is always allowed by Android (#112, #117, #146,",To factorize source and destination swapping.,0
Remove useless mut,0.23012859, - discard non-IPv4 packets (#69),,0
UDPHeader tests,0.16865972, - fix adb monitor on multiple devices (#134),,0
Minor test style improvement,0.1666682, - Force IPv4 for tunnel connection (fixes #42),,0
Implement From<> for TransportHeader,0.31323168," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
Transport checksum computation skeleton,0.62917686, - Optimize TCP checksum computation,,0
Implement setters for TCP/UDP headers,0.43301934, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Implement TCP/UDP headers,0.48267263, - Terminate TCP connections gracefully (avoid many garbage packets),,0
Rename modules with _,0.25919756," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",Words in a module name should be separeted by '_'.,0
Introduce TCPHeader and UDPHeader,0.22571261," - Install the client on ""gnirehtet start"" if necessary",,0
Rename header to ipv4_header,0.45713603, - discard non-IPv4 packets (#69),,0
Move IPv4Packet to its own file,0.43065605, - discard non-IPv4 packets (#69),,0
Do not loan raw to IPv4Header,0.47414148, - discard non-IPv4 packets (#69),"There may be only mutable borrow of the raw data, so it may not be shared between IPv4Packet and IPv4Header.",0
Introduce IPv4Packet,0.47118232, - discard non-IPv4 packets (#69),,0
Compute IPv4 checksum,0.6825366, - Optimize TCP checksum computation,,0
More tests for IPv4Header,0.5283419, - discard non-IPv4 packets (#69),,0
Provide methods to modify headers,0.16111979, - Improve logs and error messages,,0
Introduce IPv4Header,0.48866358, - discard non-IPv4 packets (#69),,0
Give id to clients,0.17336227," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)",,0
Fix starting log,0.5544994, - Improve logs and error messages,,0
Log error,0.5672752, - Improve logs,,0
Remove dead imports,0.3172853," - Fix ""Removing an unknown connection"" crash in the Rust version",,0
Use log for errors,0.75486153, - Improve logs and error messages,,1
Store clients in TunnelServer,0.44296288, - Improve disconnection detection when the relay server is behind a tunnel,,0
Rename TunnelConnection to TunnelServer,0.551509, - Force IPv4 for tunnel connection (fixes #42),,0
Client skeleton,0.1993065, - Fix several race conditions related to client reconnection,,0
Implement accept_client(),0.38295996, - Fix several race conditions related to client reconnection,,0
Fix fake Selector,0.18497592, - fix adb monitor on multiple devices (#134),Replace the fake Selector with the real one.,0
Directly implement EventHandler on TunnelConnection,0.51854, - Improve disconnection detection when the relay server is behind a tunnel,Without an additional level using a closure.,0
Move events out of Selector,0.12965754, - Fix disconnection notification appearing while gnirehtet has been stopped,Due to borrowing issues.,0
Introduce TunnelConnection,0.56356955, - Force IPv4 for tunnel connection (fixes #42),,0
Remove unused method,0.2487255," - Fix ""Removing an unknown connection"" crash in the Rust version",,0
Mutable handlers,0.29320088, - Handle command-line parsing natively (in Java and Rust),,0
Enable LTO in release mode,0.2816431, - Support Android O (fixes #44),More optimization for release builds.,0
Display timestamps in logs,0.48535624, - Improve logs and error messages,,0
Use log crate,0.53437513, - Improve logs,,0
Rename mod eventhandler to selector,0.16493274," - Rename command ""gnirehtet rt"" to ""gnirehtet run""",,0
Directly use slab,0.12302321," - Install the client on ""gnirehtet start"" if necessary",Git rid of HandlerTokenManager.,0
Extract the poll-loop into a separate method,0.20649417, - Handle command-line parsing natively (in Java and Rust),,0
Use slab to store event handlers,0.21731722, - Handle command-line parsing natively (in Java and Rust),,0
Introduce Selector,0.17808855,Gnirehtet v2.4,,0
Call expect() to give an error message,0.31117994, - Always log error messages to stderr (fixes #62),,0
Move EventHandler,0.12622748,Fix cleanup race condition in Java relay server (#154),,0
Register event Handlers,0.20468183," - Add ""autostart"" and ""autorun"" commands to start on device connection",,0
HandlerTokenManager,0.22518736, - Add a Rust version of the relay server,,0
Add .gitignore for rustrelay,0.4954279, - Add a Rust version of the relay server,,0
Wrapper for Poll,0.14122988, - Improve disconnection detection when the relay server is behind a tunnel,Expose a Poll wrapper intended to accept EventHandler instances (or lambdas) instead of mio::Token.,0
Move argument validation to the parser,0.4216993, - Handle command-line parsing natively (in Java and Rust),"Make the command expose the accepted parameters (serial and/or DNS servers), to be used by the parser to handle errors immediately.",0
Rustrelay project skeleton,0.4125507, - Add a Rust version of the relay server,"Rustrelay provides an alternative implementation of relay, in Rust It generates native binaries, so unlike the Java version, no runtime is necessary.",0
Improve command-line error handling,0.54923534, - Always log error messages to stderr (fixes #62),"Print a friendly message, including the expected syntax for the command, instead of a stacktrace on gnirehtet command arguments error.",0
Improve command-line arguments parsing,0.5419339, - Handle command-line parsing natively (in Java and Rust),"Parse the arguments into a specific CommandLineArguments instance, that can be tested easily.",0
Move relay implementation to a subpackage,0.4961241, - update relay-rust dependencies,"The java application used to be the relay server, the command-line interface being in a separate shell script. Now that it handles the command-line, put Main into com.genymobile.gnirehtet and all the other classes into com.genymobile.gnirehtet.relay.",0
Move commandline handling to Java,0.7148103, - Handle command-line parsing natively (in Java and Rust),"The gnirehtet commands were exposed through bash (""gnirehtet"", for Linux and Mac OS) and batch (""gnirehtet.cmd"", for Windows) scripts. Move the handling to the Java code, so the behavior is consistent across both platforms. Consequently, rename relay.jar to gnirehtet.jar.",1
"Add missing ""reinstall"" in syntax usage",0.55711067," - Add ""./gnirehtet reinstall"" command",,0
Add assemble gradle tasks for relay,0.50256413, - update relay-rust dependencies,"In release mode, execute the ""build"" task so that the checks are executed.",0
Make notification icons white-only,0.29533762, - Display Android notification on relay server disconnection (link),The notification icons appeared black on some devices (while all other icons were white). They should always be white: link,0
Add swap test for TCP header,0.47608608, - Optimize TCP checksum computation,"TCPHeader.swapSourceAndDestination() was not tested, contrary to UDPHeader.",0
"Replace ""drop"" by ""dropping""",0.22316442," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","For consistency, use the -ing form.",0
Replace System.out.println() by logv(),0.41776347, - Improve logs,,0
"Rename ""received"" to ""their"" sequence number",0.26364136,"   #150, #151, #161, #178, #180, #187, #190, #199, #227, #242)","For consistency with ""theirAcknowledgementNumber"", rename ""receivedSequenceNumber"" to ""theirSequenceNumber"".",0
Simplify connection removal,0.38201433," - Fix ""Removing an unknown connection"" crash in the Rust version","To remove itself from the router, pass ""this"" connection instead of ""id"" to Router.remove(). This avoids unnecessary ids comparisons to find the connection to remove.",0
Remove unused IPv4Packet.merge(),0.550147, - discard non-IPv4 packets (#69),"The function to build a packet from an IPv4 header and a transport header is not used since the introduction of Packetizer (commit 408a95e24eb5faa0cd9b1fdf0c14b621fe4be1ea), so remove it.",0
Pretty-print binary content,0.24700224, - Always log error messages to stderr (fixes #62),Use Binary.toString() instead of String.valueOf() to print a binary packet.,0
Drop UDP packets when client buffer is full,0.59192824, - Terminate TCP connections gracefully (avoid many garbage packets),"For TCP connections, we may not lose data we receive from the network. When the client buffer is full, we cannot transmit it to the client, so we ""pause"" this specific connection: we keep the packet and disable read operation for the channel. When the client is ready to receive more data, it request to ""paused"" connections (through PacketSource). UDPConnection also kept the packet and disabled read operation for the channel. This was wrong, because it didn't use the PacketSource mechanism, so there was no way to ""unpause"" such a connection. Since we may lose UDP datagrams, just drop a packet when the client buffer is full instead.",0
Simplify UDP connection expiration,0.50244457, - Terminate TCP connections gracefully (avoid many garbage packets),"Don't check whether some writes are pending: if nothing happened during IDLE_TIMEOUT, we can drop them.",0
Replace SelectorAlarm by a simple timeout,0.25081497, - Fix disconnection notification appearing while gnirehtet has been stopped,"SelectorAlarm started a separate thread to wake up a call to selector.select() at a fixed rate. Instead, call selector.select() with a timeout, and execute cleanup if the next cleaning deadline is reached. That way, there is no need for a separate thread.",0
Log packet drop as warning,0.48957354," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Move closing log to disconnect(),0.4707523, - Fix disconnection notification appearing while gnirehtet has been stopped,"A connection may be closed by Route.close(), that, in turn, calls Route.disconnect(). But it may also be closed due to a call to Router.cleanExpiredConnections(), that calls Route.disconnect() without calling Route.close(), for optimizations reasons. Therefore, move the closing log to disconnect().",0
Disconnect on route closing,0.5136992, - Fix disconnection notification appearing while gnirehtet has been stopped,"For consistency with Client.close(), make Route.close() also disconnect the channel.",0
Make Router.removeRoute() private,0.4384067," - Add ""-r ROUTE"" option to reverse tether only specific routes",It is not used from outside Router.,0
Simplify test method name,0.26952788," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","Before we removed the packetization from a ByteBuffer, there were two similar test methods:  - testPacketizeChunksFromByteBuffer()  - testPacketizeChunksFromChannel() We removed the first one, so we can now rename the second testPacketizeChunks().",0
Do not unnecessarily update payload length,0.4098367," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","IPv4Packet.recompute() is called from 2 locations:  - Packetizer.inflate()  - TCPConnection.updateAcknowledgementNumber() In the first case, the payload length is already updated before calling recompute(). In the second case, the payload length has not changed. Therefore, do not update it in recompute(). Since it then remains only checksums computation, rename the method to computeChecksums().",0
Simplify empty payload packetization,0.4730939, - discard non-IPv4 packets (#69),"In addition to the API to create a packet from a payload retrieved from a channel, the Packetizer exposed an API to create a packet from a payload as ByteBuffer. However, this second feature was actually always called with an empty payload. Therefore, replace it by a method packetizeEmptyPayload().",0
Simplify Packetizer inflate(),0.4751253," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","The private method inflate() expected the payload length as a parameter, so all callers had to provide it. This is not necessary, since it knows the payload buffer, so it can retrieve its length directly. Therefore, remove this parameter.",0
"Improve ""closing"" naming consistency",0.23045306, - Terminate TCP connections gracefully (avoid many garbage packets),"A Client and a Route executed a callback (RemoveHandler) provided by their ""owner"" when they have to be removed. Instead, consider this callback as a listener, so rename it ""CloseListener"". The fact that their owners ""remove"" them from some lists is irrelevant for Client and Route: they have only the responsibility to notify them when they must not be used anymore. For consistency, also rename ""discard"" and ""destroy"" to ""close"".",0
Move misplaced comment in tests,0.17000964, - Always log error messages to stderr (fixes #62),"The comments refers to storing the datagram in the buffer, done by the call to readFrom().",0
Add test for IPv4PacketBuffer,0.5578846," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",Assert that there is no packets anymore once all have been consumed.,0
Remove copy() from TransportHeader,0.30382308," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","The method copy() is only used for TCPHeader, and is called from a concrete TCPHeader (not an abstract TransportHeader). Therefore, there is no reason to expose it in the TransportHeader interface.",0
Update latest release (v1.1.1) in README,0.3601769, - update relay-rust dependencies,,0
Add gnirehtet.cmd to release,0.61665344, - Add gnirehtet.cmd script for Windows,Include gnirehtet.cmd to released zip file.,0
Update README for Windows users,0.33678386, - Add gnirehtet.cmd script for Windows,Give more details about usage through the new script gnirehtet.cmd.,0
"Call ""adb install"" with ""-r""",0.57848775, - Make adb path configurable,"Replace the existing gnirehtet application on the device, if any.",0
Remove trailing spaces from gnirehtet.cmd,0.6289495, - Add gnirehtet.cmd script for Windows,,0
Merge pull request #26 from JonnyShuali/master,0.2777751, - Fix possible disconnection on upload (fixes #43),Added windows support,0
fixed dns,0.2590872, - Fix delayed VPN closing,remove unused vars,0
Move server socket management to a dedicated class,0.38975605, - Terminate TCP connections gracefully (avoid many garbage packets),"The Relay class managed both the polling mechanism and the server socket listening for client connections. To improve separation of concerns, move the server socket part to a dedicated class: TunnelConnection.",0
added fully support for dns & bugfixes,0.37416708, - Do not leak TCP connections (fixes #57),now locate_file search first in %PATH%,0
Transfer client id on connection open,0.45215362, - Fix several race conditions related to client reconnection,"Whenever a port redirection is enabled (typically through ""adb reverse""), connect() will succeed even if the relay server is not listening on the other side of the tunnel. Commit 301867efe7caee8a91b73a014979eed757d85010 provided a workaround, assuming that the port forwarding was local: the client attempted to read from the socket with the smallest possible timeout. Since there was nothing to read, a read error indicated that no server was listening on the other side of the tunnel, while the connection was considered ok on timeout. But this does not generally fix the problem. For example, if the relay server is executed remotely and exposed through a SSH local port forwarding, then connect() would still succeed (a server was listening on the other side of the ""adb reverse"" tunnel) even if the relay server was not listening behind the SSH tunnel. Therefore, modify the protocol between the client and the relay server: when a client connects, the relay server immediately writes its id (an integer) to the TCP socket. The client considers itself connected only once it has received this number. Thus, it will be able to detect connection failure before switching its state to CONNECTED.",0
Release mutex during blocking calls,0.38349482, - Fix several race conditions related to client reconnection,"RelayTunnel.open() both opened a channel and connected the socket to the relay server (or, more precisely, to the tunnel created by ""adb reverse"" that enabled port forwarding to the relay server). However, connecting the socket is blocking, and was called from RelayTunnelProvider.getCurrentTunnel() with the mutex locked. As a consequence, it was not possible to call invalidateTunnel() (and, a fortiori, to close the VPN) until connect() completed. To avoid this problem, split the channel opening and the socket connection, so that connect() may be called with the mutex (the one used by invalidateTunnel()) released. However, we must still make sure that no more than one thread executes getCurrentTunnel() at the same time. For this purpose, use a second mutex (getCurrentTunnelLock()).",0
Directly pass RelayTunnelListener to constructor,0.38551044, - Add a Rust version of the relay server,The listener is only set on initialization. Passing it to constructor avoids to expose a setListener(…) method that should take care of thread-safety.,0
Simplify usage function in gnirehtet bsah script,0.4679793,gnirehtet v2.3,"Use ""cat << EOF"" to print the usage. This avoids to write one echo per line. In addition, print the whole usage to stderr (instead of the first line only).",0
Fix PersistentRelayTunnel synchronization,0.588428, - Fix several race conditions related to client reconnection,"The ""stopped"" flag was not synchronized between send()/receive() and close() (the mutex was only locked in close()). Since we cannot lock the mutex for both send() and receive() (by design, they must execute concurrently), use a simple AtomicBoolean for the ""stopped"" flag instead.",0
Adding Windows support,0.33863473, - Add gnirehtet.cmd script for Windows,,0
Do not display notification after stop,0.57111114, - Fix disconnection notification appearing while gnirehtet has been stopped,"If the tunnel to the relay server was not already ""disconnected"" on VPN stop, then a ""disconnected"" event is received after tne VPN is closed. In that case, the notification must not be displayed.",0
Add instruction on version upgrade,0.33712855," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)","""./gnirehtet rt"" does not automatically install the apk on the device if the package is already present. As a consequence, it must be explicitly installed on upgrade.",0
Upgrade latest release (v1.1) in README,0.3274629,The first official release ;-),,0
Update Android application version to 1.1,0.42778242, - Support Android O (fixes #44),,0
Add reinstall command,0.6863899," - Add ""./gnirehtet reinstall"" command","For convenience, provide ""./gnirehtet reinstall"" that calls ""uninstall"" then ""install"".",0
Start client in parallel of the server,0.49656814, - Fix several race conditions related to client reconnection,"Send the intent while the server is starting, so that the relay server is ready when the client connects. This reduces starting time, prevents failure of the first connection, and thus avoids a disconnection notification.",0
Notify disconnections from the relay server,0.7758577, - Display Android notification on relay server disconnection (link),"Display an Android notification when the client is disconnected from the relay server, with a button to stop gnirehtet directly.",1
Early detect invalid connection to relay server,0.6738907, - Improve disconnection detection when the relay server is behind a tunnel,"The relay server is accessible through an ""adb reverse"" port redirection. If the port redirection is enabled but the relay server is not started, then the call to channel.connect() will succeed, but the first read() will return -1. As a consequence, the connection state of the relay server would be invalid temporarily (we would switch to CONNECTED state then switch back to DISCONNECTED). To avoid this problem, we must actually try to read from the server, so that an error occurs immediately if the relay server is not accessible. To do so, we set the lowest timeout possible (1) that is not ""infinity"" (0), try to read, then reset the timeout option. Since the client is always the first peer to send data, there is never anything to read.",0
Fix tunnel reconnection race condition,0.6999748, - Fix several race conditions related to client reconnection,"On the device-side, sending to and receiving from the tunnel (the connection to the relay server) are processed from two different threads. When an error occurs, both threads invalidate the tunnel, so that the next call to getCurrentTunnel() will return a new tunnel. Typically, the first one actually invalidates the tunnel, then the second one detects that the tunnel has already been invalidated, and does nothing. However, there is a possibility that one thread invalidates the tunnel, then calls getCurrentTunnel() before the other thread calls invalidateTunnel(). In that case, the new tunnel would be mistakenly invalidated. To prevent this race condition, pass the current tunnel as parameter of invalidateTunnel().",0
Release the mutex for waiting,0.41277188, - Fix several race conditions related to client reconnection,"During the delay between connection attempts, the RelayTunnelProvider must release the mutex (by calling wait() instead of sleep()), so that invalidateTunnel() may be called at any time. Indeed, there was a lock dependency that prevented the tunnel to be closed immediately. On gnirehtet stop, the following cascade of calls occurred:  -> GnirehtetService.close()    -> Forwarder.stop()      -> PersistentRelayTunnel.close()        -> RelayTunnelProvider.invalidateTunnel() // synchronized           // required the mutex that may be held by getCurrentTunnel()           // during the whole execution of Thread.sleep()      -> Future.cancel(true) // interrupts Thread.sleep() Thread.sleep() was intended to be interrupted by a call to Future.cancel(true). However, this call occurred only after PersistentRelayTunnel.close() completed… that is, after the end of Thread.sleep(), making the whole interruption useless.",0
Use final fields when appropriate,0.15033266, - Improve logs and error messages,"Make ""final"" the fields intented to be initialized by constructors.",0
Remove useless returns,0.26504958, - Improve logs,,0
Log VPN starting failure,0.6019976, - Fix possible NullPointerException on VPN starting (link),VpnService.Builder.establish() may return null if the application is not prepared or is revoked: link Log when it happens.,0
Log empty reads/writes,0.35102716, - Improve logs and error messages,Multiple empty reads or writes suggests a problem with the blocking mode. Log them.,0
Remove parent theme,0.13658902," - Add ""./gnirehtet reinstall"" command",There is no UI.,0
Log clients connections,0.38218528, - Fix several race conditions related to client reconnection,Give an id to each client and log their connection and disconnection.,0
"Stop the specified device in ""gnirehtet rt""",0.6601422," - Fix ""./gnirehtet rt"" stopping when several devices are connected","The command ""./gnirehtet rt [serial]"" started reverse tethering for the specified device, but stopped without specifying the serial. As a consequence, it did not work as expected when several Android devices were plugged. Therefore, pass the serial as stop argument.",0
Handle establish() returning null,0.3822051, - Fix possible NullPointerException on VPN starting (link),"VpnService.Builder.establish() may return null if the application is not prepared or is revoked: link In that case, do not start forwarding in order to avoid a NullPointerException.",0
Use refactored logs,0.5869136, - Improve logs,A call to Log.i() remained in AbstractConnection. Replace it by logi().,0
Log UDP connections opening as INFO,0.37033072, - Terminate TCP connections gracefully (avoid many garbage packets),Log UDP connections at the same log level as TCP connections.,0
Upgrade latest release (v1.0.1) in README,0.31456858,The first official release ;-),,0
"Fix serial management in ""gnirehtet rt""",0.78943384, - Fix gnirehtet rt [serial] with several devices plugged,"The command ""gnirehtet rt"" first checks whether the app is installed on the device, and installs it if necessary. However, it didn't forward the serial parameter, so calling ""gnirehtet rt 12345678"" failed to install the application on the selected device when several were plugged. Therefore, forward the serial to apk_require_installed().",1
"Fix ""getopt"" usage in gnirehtet script",0.6313747,Gnirehtet v2.2.1,"The syntax of the shell command ""getopt"" may differ on different systems. Provide the parameters the way which is supported by both versions: link link Related to link.",0
Move the windows notice in README,0.25034687, - Add gnirehtet.cmd script for Windows,The windows details should not be in the project introduction. Move them to a separate section.,0
Add blog post links to README,0.13147596," - Add ""-r ROUTE"" option to reverse tether only specific routes",,0
"Suggest gradle ""build"" instead of ""debug""",0.34415126, - Make apk path configurable (#90),"""gradle build"" builds, run tests, checkstyle and lint.",0
Parameterize the release script for gradle command,0.38708368, - Make apk path configurable (#90),"Use the GRADLE environment variable as gradle command. If it is not set, use ./gradlew. As a consequence, this command builds with ""gradle"":     GRADLE=gradle ./release While this command builds with ""./gradlew"":     ./release",0
Add direct link to release,0.32743892, - Make apk path configurable (#90),Provide a direct link to the last release in README.,0
Enable MagicNumber checkstyle module,0.23236692,"   (#61, #85, #86, #91)","Genymobile requires MagicNumber to be enabled. However, it produces many false-positives, especially with some bitwise operations (widely used in this project): x = value & 0xff; x = value & 0xf000; x = value >> 16; Extracting 16, 0xff and 0xf000 to separate constants would be insane in these examples. It also consider many numbers as ""magic"" in tests, where we don't want to extract them to a separate constant: int sum = add(12, 34); assertEquals(46, sum); Therefore, handle these specific cases by disabling the check locally through @SuppressWarnings annotations.",0
Wait a bit after app installation,0.36370966," - Install the client on ""gnirehtet start"" if necessary","Immediately after installation, the intent actions may not be correctly registered yet, so starting the client would fail. Therefore, wait a small delay.",0
Use ./gradlew in release script,0.33158535, - Make apk path configurable (#90),So that jenkins may execute gradle.,0
Move the release apk rename to the release script,0.5400801, - Make apk path configurable (#90),"Do not custom the gradle build file to rename ""gnirehtet-release.apk"" to ""gnirehtet.apk"". Instead, rename it in the release script.",0
Use the same syntax as in Genymobile/base,0.21415022,Gnirehtet v2.4,"To avoid unnecessary diffs, use the same pattern as Genymobile/base to apply separate gradle files.",0
Make gnirehtet script fail on error,0.5328773,Gnirehtet v2.2.1,"Like ./release, make ./gnirehtet bash script fail on error without using ""&&"".",0
Simplify release bash script,0.23175533,The first official release ;-),"Use ""set -e"" to fail on error, so that we can remove all the trailing ""&&"". Also remove ""cd -"" which is useless (unless the script is sourced). Suggested-by: Aurélien Gâteau agateau@genymobile.com",0
Ignore Firebase App Indexing lint warning,0.2337243,"   so that the intent is always allowed by Android (#112, #117, #146,",Lint reports: App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent filter. We don't want it to be indexable. Suppress the warning.,0
Restrict GnirehtetControlService to privilegied,0.43383735,Gnirehtet v2.2.1,"We want to avoid the VPN to be started or stopped by anyone, so it must require a permission. Since intercepting the whole network traffic is critical, we want a system permission. In addition, we want to call it from shell, so we need an existing system permission granted to shell: link From the small permissions set matching these conditions, I chose android.permission.WRITE_SECURE_SETTINGS. Note: The following network-related system permissions granted to shell may sound more appropriate:  - android.permission.MANAGE_NETWORK_POLICY  - android.permission.CONNECTIVITY_INTERNAL Unfortunately, they were added only recently, so they are not granted to shell for older versions: link",0
Remove lint warnings,0.28602296, - Improve logs and error messages,"Lint reported: On SDK version 23 and up, your app data will be automatically backed up and restored on app install. Consider adding the attribute android:fullBackupContent to specify an @xml resource which configures which files to backup. I considered it, but there is no security reason to do that. Since we don't store anything to shared preferences or database, just disable ""allowBackup"". Should explicitly set android:icon, there is no default Gnirehtet does not have any main activity, so there is no need for an icon. Explicitly set it to @null.",0
Add VisibilityModifier checkstyle module,0.23860437, - Optimize TCP checksum computation,Check that fields are always private.,0
Remove GPG-signature from release script,0.26054907," - Detect the client version installed on ""gnirehtet run"" (and reinstall if necessary)",Allow release without signing with GPG.,0
Add license to README,0.23637742,"   so that the intent is always allowed by Android (#112, #117, #146,",,0
Apply Genymobile rules for gradle files,0.38955677, - Make apk path configurable (#90),Organize the gradle build files the way required by Genymobile.,0
Configure checkstyle,0.44175237, - Optimize TCP checksum computation,,0
Do not fail release build when no keystore,0.20419899," - Fix ""Removing an unknown connection"" crash in the Rust version",Produce an unsigned APK when no keystore is defined.,0
"Never fail on ""git describe""",0.2598266, - Always log error messages to stderr (fixes #62),"Executing ./release with current HEAD having no tag failed. Make ""git describe"" fallback to abbreviated commit when no tag is available.",0
Generate checksum and signature during release,0.36894393, - Optimize TCP checksum computation,"Provide the SHA-256 of the release file, and gpg-sign it.",0
Rewrite README.md and add DEVELOP.md,0.3005848, - Make apk path configurable (#90),"Add a page for developers, and rewrite README.md for end-users.",0
Add Apache 2.0 license,0.19482353," - Install the client on ""gnirehtet start"" if necessary",,0
Fix tunnel provider connection temporization,0.61759233, - Force IPv4 for tunnel connection (fixes #42),"The mechanism to wait several seconds between connection attempts to provide a tunnel to PersistentRelayTunnel was totally broken. Fix it to wait 5 seconds only before creating a new tunnel, except the very first time.",0
Make the tunnel persistent on EOF,0.5729685," - Add ""tunnel"" command to restart only the adb tunnel","PersistentRelayTunnel must recreate a tunnel if the previous one is broken. It did it correctly on IOException, but not on EOF. As a consequence, the client may be left in inconsistent state after a restart of the relay server. Therefore, invalidate the previous tunnel when read() returns -1.",0
Fix broken state after RST due to duplicate SYN,0.38559106,Fix cleanup race condition in Java relay server (#154),"When we received a duplicate SYN (in a state different from SYN_SENT), the connection was reset (the state was set to null and a RST packet was sent). However, contrary to what happens after the other calls to resetConnection(), destroy() was not called. Thus, the TCPConnection state was reset, but the socket channel was not, so it might be left connected. As a consequence, the next call to handleFirstPacket() will set the state to SYN_SENT, leading OP_CONNECT to be set as interesting op in updateInterests(). Registering OP_CONNECT to a socket already connected is incorrect, it will wake up selector.select() at every call, leading to 100% CPU usage. Therefore, call destroy() directly in resetConnection(), since not calling it leaves the TCPConnection in inconsistent state. But then, duplicate SYNs (which are not so uncommon) always reset the connection, making the relaying unusable. To avoid this issue, reset connection only for ""unexpected"" duplicate SYNs, i.e. a SYN having a sequence number different from the one received during the initialization of this connection.",0
Factorize connection logs,0.4880749, - Improve logs,Every logs in a connection prints the connection details before the message. Factorize this behavior in AbstractConnnection.,0
Improve logs,0.93136156, - Improve logs,Use the appropriate log level and produce consistent messages.,1
Set default log level to INFO,0.47397515, - Improve logs and error messages,Do not display DEBUG logs by default.,0
Make log threshold accessors public,0.35896417, - Improve logs,They were declared as private by mistake.,0
Add comments for some classes,0.32049975, - Improve logs and error messages,"Provide some javadoc to explain the purpose of Packetizer, PacketSource, DatagramBuffer and StreamBuffer.",0
Improve connections logs,0.64191353, - Improve logs and error messages,Replace: TCP {/1.2.3.4:5678 -> /8.7.6.5:4321} by: TCP 1.2.3.4:5678 -> 8.7.6.5:4321 This simplifies postprocessing with awk or sed.,0
Fix meaningless comments,0.34253758, - Improve logs and error messages,"Some comments have been automatically refactored along with the method names, leading to meaningless sentences.",0
Replace port 1080 to 31416,0.53168625,Add command-line option to use a custom port (#210),The port 1080 is often used by SOCKS proxies. Use a port which is unlikely to be used.,0
Indicate where to store signing config locally,0.30482203, - Make apk path configurable (#90),"In addition to ~/.gradle/gradle.properties, the properties may be stored in ./gradle.properties.",0
"Make ""gnirehtet rt"" install the apk if necessary",0.64378524, - Fix gnirehtet rt on MacOS (link),"If no package ""com.genymobile.gnirehtet"" is installed, execute ""gnirehtet install"" before starting the client.",0
Improve comments,0.41845292, - Improve logs and error messages,,0
"Add simple ""gnirehtet rt"" command",0.7884347," - Rename command ""gnirehtet rt"" to ""gnirehtet run""","Add a new command ""rt"", which enables reverse tethering for exactly one deivce: it starts both the client and the relay server, and stop them both on Ctrl+C.",1
Fix NPE on invalidateTunnel(),0.5087773, - Fix several race conditions related to client reconnection,"Several calls to invalidateTunnel() may be requested from different threads in PersistentRelayTunnel. As a consequence, tunnel may be null during the execution of close(). Add a check to avoid a NullPointerException.",0
"Return early if ""adb reverse"" fails",0.38443252," - Add ""tunnel"" command to restart only the adb tunnel","Do not send the START intent if the ""adb reverse"" call failed.",0
Extract adb and java commands to variables,0.47679517, - Handle command-line parsing natively (in Java and Rust),It makes it easier to customize their path.,0
Add a release script,0.28181958,The first official release ;-),It generates dist/gnirehtet-VERSION.zip.,0
Change generated apk names,0.5566824, - Make apk path configurable (#90),Rename:     app-debug.apk -> gnirehtet-debug.apk     app-release.apk -> gnirehtet.apk,0
Upgrade gradle versions,0.35286993, - Support Android O (fixes #44),Use Android plugin 2.3.0 (requiring Android build-tools 25) with gradle 3.3.,0
Make gradle tasks use the gnirehtet script,0.47527778,Gnirehtet v2.2.1,"For consistency, bind gradle convenience tasks to the gnirehtet script.",0
Add install/uninstall commands to bash script,0.3067118," - Add ""autostart"" and ""autorun"" commands to start on device connection",Provide commands for installing and uninstalling the client on Android devices: ./gnirehtet install [serial] ./gnirehtet uninstall [serial],0
Locate relay.jar automatically,0.40025875, - Display Android notification on relay server disconnection (link),"Find the relay path automatically in a predefined path list, so that the bash script works both for development and release. In development, it will find relay/build/libs/relay.jar generated by gradle, while in release, it will find relay.jar in the current directory.",0
Wake up blocking read() using a single UDP packet,0.36998752, - Terminate TCP connections gracefully (avoid many garbage packets),"In order to wake up a blocking read() on VPN, we triggered a name resolution request, that in turn sent a UDP packet. However, a name resolution may send several UDP packets successively, because it retries if it gets no response. In that case, some UDP packets may actually be sent over the network, which is unnecessary. Instead, send a single meaningless UDP packet, just for waking up the blocking read().",0
Add gnirehtet bash script,0.73638445, - Add gnirehtet.cmd script for Windows,Provide a bash script for starting/stopping the gnirehtet client and server easily.,1
Add gradle wrapper,0.330391, - Make apk path configurable (#90),"I don't like that, but some people do...",0
Add gradle signing configs for APK release,0.5612011, - Make apk path configurable (#90),Provide gradle code to sign release builds.,0
Wake up blocking read() on VPN interface,0.47599244, - Fix delayed VPN closing,"Neither vpnInterface.close() nor vpnInputStream.close() wake up a blocking vpnInputStream.read(). Therefore, we need to make Android send a packet to the VPN interface (here by requesting a name resolution), so that any blocking read will be woken up. Since the tunnel is closed at this point, it will never reach the network.",0
Expose a persistent relay tunnel,0.6830589, - Improve disconnection detection when the relay server is behind a tunnel,"In addition to manage the packet forwarding, the Forwarder class was also responsible to maintain a valid connection to the relay server (in particular, it had to reconnect it every time it was disconnected). To simplify, provide a PersistentRelayTunnel class handling the reconnections.",0
Improve log tags,0.68934274, - Improve logs and error messages,Use simple class names instead of fully qualified class names (e.g. RelayTunnel instead of com.genymobile.gnirehtet.RelayTunnel).,0
Improve intent logs,0.627151, - Improve logs and error messages,Log when the services receive an intent. This will help to debug issues with the STOP request.,0
Ignore START if VPN is already started,0.5745326, - Fix delayed VPN closing,Starting gnirehtet when the VPN is already established leaves it in an inconsistent state. Just ignore the request in that case. Note that this also ignores any configuration passed to the START request.,0
Fix log milliseconds formatting,0.40942702, - Improve logs,"Always print the milliseconds on 3 characters, to fix the String representation when there are less than 100 milliseconds (11:22:33.044 instead of 11.22.33.44).",0
"Provide access to host ""localhost"" via 10.0.2.2",0.24454269, - Force IPv4 for tunnel connection (fixes #42),"From the device, local addresses like 127.0.0.1 refer to the device itself. Non-local addresses are forwarded through the tunnel to the host. Therefore, there was no way to refer to the host ""localhost"". In particular, on Ubuntu, the default DNS server points to 127.0.1.1. To overcome this problem, map 10.0.2.2 to localhost like the Android emulator does. Therefore, every TCP or UDP connection having 10.0.2.2 as destination will open a socket to InetAddress.getLoopbackAddress() from the host.",0
Move Relay main to Main,0.3423227,Fix cleanup race condition in Java relay server (#154),"We will add support for command-line parameters, so move the main method to its own class.",0
Handle InetAddress instead of Strings,0.19259909, - Handle command-line parsing natively (in Java and Rust),"In order to fail fast, make VpnConfiguration store DNS server addresses as InetAddress instead of String.",0
Provide VPN configuration by intent extras,0.5384581, - Fix possible NullPointerException on VPN starting (link),"To make the VPN configurable, pass a VpnConfiguration instance as GnirehtetService intent extra. To be able to configure it from command line, expose configuration options as separate intent extras in GnirehtetControlService. For now, only DNS servers are configurable: adb shell am startservice -a com.genymobile.gnirehtet.START \     --esa dnsServers 8.8.8.8",0
Simplify gradle tasks,0.3367055, - Make apk path configurable (#90),"Now that the client always reconnects to the Relay server, we can start them in any order. Therefore, expose a simple task to start the client, then the server (which is kept open): gradle start",0
Keep trying to connect to the relay,0.43626896,Fix cleanup race condition in Java relay server (#154),"When the VPN is started (the START action has been sent), always reconnect to the relay. As a consequence, the Relay server may be started after the client. Even if Relay server is disconnected and reconnected, the client will recover.",0
Improve VPN starting,0.6159779, - Fix delayed VPN closing,"The VPN was started in service onCreate(). Since we added our own STOP_VPN action, the behavior could be unexpected. Handle both starting and stopping in onStartCommand() instead.",0
Expose GnirehtetControlService,0.5191506,Gnirehtet v2.2.1,"To expose START and STOP actions to shell, we need a separate Android service (see its Javadoc for details). Now, we can use these commands to control the VPN: adb shell am startservice -a com.genymobile.gnirehtet.START adb shell am startservice -a com.genymobile.gnirehtet.STOP",0
Add global 'debug' gradle task,0.30148387, - Make apk path configurable (#90),So that 'gradle debug' builds both the Android client and the relay server.,0
Update interests only on valid key,0.14678495,"   so that the intent is always allowed by Android (#112, #117, #146,","When the key became invalid, do not update interests (it would throw a CancelledKeyException).",0
Fix RST and SYN management,0.35785115, - Fix gnirehtet rt [serial] with several devices plugged,"A received RST packet must be ignored if it is out of the client window. A received duplicate SYN packet must be handled before checking that it matches the expected sequence number: of course it does not, if it's a duplicate SYN, it refers to a previous sequence number.",0
Implement packet source consuming,0.43161628," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","Connections may use sendToClient(packet) to send a packet to the client. However, this may fail (and return false), e.g. when the client buffer is full. This is ok for our crafted empty packet (ACK, RST, SYN-ACK…), because their loss is gracefully handled. However, we cannot lose packets built from the network socket streams, because there is no way to recover. We also want to avoid new allocations for keeping them, because they would be unlimited. Therefore, instead of sending a packet, a TCPConnection (the packet source) requests the client to pull from it, by calling consume(this). The reading interest from the network socket will be disabled until the client succeeds. As soon as the client buffer get more free space, the client takes the responsability to make another attempts to pull from the pending packet sources.",0
Respect client TCP window,0.5695509, - Terminate TCP connections gracefully (avoid many garbage packets),"Do not send packets outside the client TCP window, otherwise they would be dropped and our connection would be broken (since we don't retransmit data).",0
Prepare deferred packet sending to client,0.46011847, - Terminate TCP connections gracefully (avoid many garbage packets),"A packet built from the data received from the network TCP socket may not be sent to the client for several reasons:  - when the client buffer is full, sendToClient(…) returns false, and    the packet is not sent;  - when the packet sequence number is outside the client window, we must    keep it until the window advances enough. Those packets may not be dropped, because they are received from the network TCP socket: we have the responsability to transmit it, otherwise the whole connection would be broken. Therefore, when a packey may not be sent, keep it, and disable our interest in reading the network TCP socket. When the client is ready to receive more packets, it will call processPacketForClient() (not implemented yet). We must take care of updating the acknowledgement number (we may have received packets since we built our pending IPv4Packet).",0
Add logs for TCP connections,0.4770272, - Terminate TCP connections gracefully (avoid many garbage packets),This helps to understand problems after the fact.,0
fixup! Fix FIN acknowledgement,0.3665795, - Fix possible disconnection on upload (fixes #43),,0
Fix FIN acknowledgement,0.29379967, - Improve logs and error messages,"To acknowledge a FIN, we must send its sequence number + 2:  - +1 because acknowledgement numbers refer to the next expected    sequence number;  - +1 because FIN counts for 1 byte.",0
Add date/time to logs,0.4666317, - Improve logs and error messages,Print date and time to logs.,0
Use Packetizer for TCP networkToClient,0.4863453, - Terminate TCP connections gracefully (avoid many garbage packets),"For simplification and factorization, replace the buffer manually managed in TCPConnection by the improved Packetizer. Previously, TCP sockets were read into a buffer (2^16 bytes), then split into packets of 1400 bytes. Now, at most MAX_PAYLOAD_SIZE (1400 bytes) will be read from the TCP sockets at once, so there is no need for splitting. This prevents unnecessary copies, but may require more syscalls to read the socket.",0
Improve Packetizer to remove UDPPacketBuilder,0.4547863, - Terminate TCP connections gracefully (avoid many garbage packets),"Packetizer may be generalized to support channels so that UDPPacketBuilder become useless. Moreover, this prevents one unnecessary copy to a temporary buffer.",0
UDPPacketBuilder,0.37145248," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","Following the single responsability principle, move the datagram packet creation to a separate class: UDPPacketBuilder.",0
Use static when possible in tests,0.104916625, - Optimize TCP checksum computation,Declare test util methods as static.,0
Optimize StreamBuffer when empty,0.33241996," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","To avoid unnecessary copies, StreamBuffer writes at most until the ""end"" of the circular buffer, which is subobtimal (it could have written more data if they have been contiguous). In order to minimize the occurrence of this event, reset the head and tail to 0 when the buffer is empty (no copy is involved). This is especially useful when the StreamBuffer is used to read/write one packet at a time, so the ""end"" of the buffer is guaranteed to never be reached.",0
Use Packetizer to split TCP stream into packets,0.50015527," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",Split a TCP stream into packets having at most 1400 bytes of payload (to avoid MTU issues).,0
Packetizer,0.44606817," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",Provide a packetizer to convert from transport data (level 5) to IP packets (level 3). Its implementation avoids unnecessary copies.,0
IPv4PacketBuffer (avoid copies),0.5684321," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Remove NetBuffer,0.36224747," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",We now use StreamBuffer and DatagramBuffer instead.,0
UDPConnection with ByteBuffer datagram,0.401514," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Test 0-byte datagram,0.31085977," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
DatagramBuffer,0.3586888," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Set limit before position,0.16923513, - Make reverse tethering starting faster,"ByteBuffer validates the position against the limit, so when we change both, we must set the limit first.",0
Fix StreamBuffer.isFull(),0.44101864," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)","If head points to the last item while tail points to the first, the buffer is full, but isFull() returned false. Compute modulo data.length to fix the problem.",0
Split packets by 1300 bytes,0.52671236," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
StreamBuffer,0.3479196," - Fix buffer size to avoid ""Not an Ipv4 packet"" error (#273)",,0
Write Main-Class attribute in MANIFEST.MF,0.27133676,"   so that the intent is always allowed by Android (#112, #117, #146,","The gradle plugin ""application"" does not handle that for us.",0
Detect VPN network,0.46999767, - Fix possible NullPointerException on VPN starting (link),Set underlying network for the applications to detect connectivity.,0
Move util toString() to Binary,0.21986046, - Handle command-line parsing natively (in Java and Rust),,0
Add convenient gradle tasks,0.33802474, - Make apk path configurable (#90),"So that we can call ""gradle serverStart"" and ""gradle clientStart"".",0
Convert relay gradle type to application,0.39803225, - update relay-rust dependencies,"So that we can call ""gradle run"".",0
Initial version,0.6207276,The first official release ;-),,0
