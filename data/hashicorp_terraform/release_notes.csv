Index,Release Note
1,"1.5.0-alpha20230504 (May 4, 2023)
NEW FEATURES:


module blocks for validating infrastructure: Module and configuration authors can now write independent check blocks within their configuration to validate assertions about their infrastructure.
The new independent module blocks must specify at least one module block, but possibly many, each one with a module expression and an module expression matching the existing link. 
Additionally, check blocks can optionally load a scoped link. Scoped data sources match the existing data sources with the exception that they can only be referenced from within their check block.
Unlike the existing module and module blocks, Terraform will not halt execution should the scoped data block fail or error or if any of the assertions fail. 
This allows practitioners to continually validate the state of their infrastructure outside the usual lifecycle management cycle. 


A new module block type to provide the module functionality as a config-driven operation.
The module block type has two arguments: module and module, where the module takes a string and the module is a resource address. The plan tells you what will be imported and then apply will add that resource to Terraform state. Once you import into a resource, you can safely delete the module block. There is no harm to keep the module block in the configuration; it is a no-op after the resource is imported.


Adds a new module function that returns the timestamp at plan time. This is similar to the module function which returns the timestamp at apply time.

Adds a new module function that checks whether a given string contains a given substring. [GH-33069]

UPGRADE NOTES:

This is the last version of Terraform for which macOS 10.13 High Sierra or 10.14 Mojave are officially supported. Future Terraform versions may not function correctly on these older versions of macOS.
This is the last version of Terraform for which Windows 7, 8, Server 2008, and Server 2012 are supported by Terraform's main implementation language, Go. We already ended explicit support for versions earlier than Windows 10 in Terraform v0.15.0, but future Terraform versions may malfunction in more significant ways on these older Windows versions.

On Linux (and some other non-macOS Unix platforms we don't officially support), Terraform will now notice the module option in module and, if set, will set the ""authentic data"" option in outgoing DNS requests in order to better match the behavior of the GNU libc resolver.
Terraform does not pay any attention to the corresponding option in responses, but some DNSSEC-aware recursive resolvers return different responses when the request option isn't set. This should therefore avoid some potential situations where a DNS request from Terraform might get a different response than a similar request from other software on your system.


ENHANCEMENTS:

Terraform CLI's local operations mode will now attempt to persist state snapshots to the state storage backend periodically during the apply step, thereby reducing the window for lost data if the Terraform process is aborted unexpectedly. [GH-32680]
If Terraform CLI receives SIGINT (or its equivalent on non-Unix platforms) during the apply step then it will immediately try to persist the latest state snapshot to the state storage backend, with the assumption that a graceful shutdown request often typically followed by a hard abort some time later if the graceful shutdown doesn't complete fast enough. [GH-32680]
module backend: Now supports the module, module, module, module and module environment variables. [GH-33045]

BUG FIXES:

module: Fixed crash with invalid blank module name. [GH-32781]

Previous Releases
For information on prior major and minor releases, see their changelogs:

link
link
link
link
link
link
link
link
link
link
"
2,"1.4.6 (April 26, 2023)
BUG FIXES

Fix bug when rendering plans that include null strings. (link)
Fix bug when rendering plans that include unknown values in maps. (link)
Fix bug where the plan would render twice when using older versions of TFE as a backend. (link)
Fix bug where sensitive and unknown metadata was not being propagated to dynamic types while rendering plans. (link)
Fix bug where sensitive metadata from the schema was not being included in the module output. (link)
Fix bug where computed attributes were not being rendered with the module suffix. (link)
"
3,"1.4.5 (April 12, 2023)

Revert change from [link] due to an upstream crash.
Fix planned destroy value which would cause module to fail when being replaced with module (link)
"
4,"This is a development snapshot for the forthcoming v1.5.0 release, built from Terraform's module branch. These release packages are for early testing only and are not suitable for production use.
The following is the v1.5.0 changelog so far, at the time of this snapshot:
UPGRADE NOTES:

This is the last version of Terraform for which macOS 10.13 High Sierra or 10.14 Mojave are officially supported. Future Terraform versions may not function correctly on these older versions of macOS.
This is the last version of Terraform for which Windows 7, 8, Server 2008, and Server 2012 are supported by Terraform's main implementation language, Go. We already ended explicit support for versions earlier than Windows 10 in Terraform v0.15.0, but future Terraform versions may malfunction in more significant ways on these older Windows versions.

On Linux (and some other non-macOS Unix platforms we don't officially support), Terraform will now notice the module option in module and, if set, will set the ""authentic data"" option in outgoing DNS requests in order to better match the behavior of the GNU libc resolver.
Terraform does not pay any attention to the corresponding option in responses, but some DNSSEC-aware recursive resolvers return different responses when the request option isn't set. This should therefore avoid some potential situations where a DNS request from Terraform might get a different response than a similar request from other software on your system.


NEW FEATURES:


module blocks for validating infrastructure: Module and configuration authors can now write independent check blocks within their configuration to validate assertions about their infrastructure.
The new independent module blocks must specify at least one module block, but possibly many, each one with a module expression and an module expression matching the existing link. 
Additionally, check blocks can optionally load a scoped link. Scoped data sources match the existing data sources with the exception that they can only be referenced from within their check block.
Unlike the existing module and module blocks, Terraform will not halt execution should the scoped data block fail or error or if any of the assertions fail. 
This allows practitioners to continually validate the state of their infrastructure outside the usual lifecycle management cycle. 


ENHANCEMENTS:

Terraform CLI's local operations mode will now attempt to persist state snapshots to the state storage backend periodically during the apply step, thereby reducing the window for lost data if the Terraform process is aborted unexpectedly. [GH-32680]
If Terraform CLI receives SIGINT (or its equivalent on non-Unix platforms) during the apply step then it will immediately try to persist the latest state snapshot to the state storage backend, with the assumption that a graceful shutdown request often typically followed by a hard abort some time later if the graceful shutdown doesn't complete fast enough. [GH-32680]

BUG FIXES:

module: Fixed crash with invalid blank module name. [GH-32781]
"
5,"1.4.4 (March 30, 2023)
Due to an incident while migrating build systems for the 1.4.3 release where 
module was not set, we are rebuilding that version as 1.4.4 with the 
flag set. No other changes have been made between 1.4.3 and 1.4.4."
6,"1.4.3 (March 30, 2023)
BUG FIXES:
* Prevent sensitive values in non-root module outputs from marking the entire output as sensitive [GH-32891]
* Fix the handling of planned data source objects when storing a failed plan [GH-32876]
* Don't fail during plan generation when targeting prevents resources with schema changes from performing a state upgrade [GH-32900]
* Skip planned changes in sensitive marks when the changed attribute is discarded by the provider [GH-32892]"
7,"1.4.2 (March 16, 2023)
BUG FIXES:

Fix bug in which certain uses of module caused Terraform to crash (link)
Fix bug in which some provider plans were not being calculated correctly, leading to an ""invalid plan"" error (link)
"
8,"1.4.1 (March 15, 2023)
BUG FIXES:

Enables overriding modules that have the module attribute set, while still preventing the module attribute itself from being overridden. (link)
module: when a dependency lock file is present, mirror the resolved providers versions, not the latest available based on configuration. (link)
Fixed module downloads from S3 URLs when using AWS IAM roles for service accounts (IRSA). (link)
hcl: Fix a crash in Terraform when attempting to apply defaults into an incompatible type. (link)
Prevent panic when creating a plan which errors before the planning process has begun. (link)
Fix the plan renderer skipping the ""no changes"" messages when there are no-op outputs within the plan. (link)
Prevent panic when rendering null nested primitive values in a state output. (link)
Warn when an invalid path is specified in module (link)
"
9,"1.4.0 (March 08, 2023)
UPGRADE NOTES:

config: The module function when called with encoding ""GB18030"" will now encode the euro symbol € as the two-byte sequence module, as required by the GB18030 standard, before applying base64 encoding.
config: The module function when called with encoding ""GBK"" or ""CP936"" will now encode the euro symbol € as the single byte module before applying base64 encoding. This matches the behavior of the Windows API when encoding to this Windows-specific character encoding.

module: When interpreting the hostname portion of a provider source address or the address of a module in a module registry, Terraform will now use non-transitional IDNA2008 mapping rules instead of the transitional mapping rules previously used.
This matches a change to link which is being gradually adopted by web browsers. Terraform aims to follow the interpretation of hostnames used by web browsers for consistency. For some hostnames containing non-ASCII characters this may cause Terraform to now request a different ""punycode"" hostname when resolving.
* module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. There is an interim CLI configuration opt-out for those who rely on the previous incorrect behavior. (link)
* The Terraform plan renderer has been completely rewritten to aid with future Terraform Cloud integration. Users should not see any material change in the plan output between 1.3 and 1.4. If you notice any significant differences, or if Terraform fails to plan successfully due to rendering problems, please open a bug report issue.


BUG FIXES:

The module installer will now record in its manifest a correct module source URL after normalization when the URL given as input contains both a query string portion and a subdirectory portion. Terraform itself doesn't currently make use of this information and so this is just a cosmetic fix to make the recorded metadata more correct. (link)
config: The module function now correctly handles entirely-nil YAML documents. Previously it would incorrectly return an unknown value instead of a null value. It will now return a null value as documented. (link)
Ensure correct ordering between data sources and the deletion of managed resource dependencies. (link)
Fix Terraform creating objects that should not exist in variables that specify default attributes in optional objects. (link)
Fix several Terraform crashes that are caused by HCL creating objects that should not exist in variables that specify default attributes in optional objects within collections. (link)
Fix inconsistent behaviour in empty vs null collections. (link)
module now returns a non-zero exit when given an invalid argument (link)
Terraform would always plan changes when using a nested set attribute (link)
Terraform can now better detect when complex optional+computed object attributes are removed from configuration (link)
A new methodology for planning set elements can now better detect optional+computed changes within sets (link)
Fix state locking and releasing messages when in module mode, messages will now be written in JSON format (link)

ENHANCEMENTS:

module can now store a plan file even when encountering errors, which can later be inspected to help identify the source of the failures (link)
module is a new builtin managed resource type, which can replace the use of module, and can store data of any type (link)
module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. There is an interim CLI configuration opt-out for those who rely on the previous incorrect behavior. (link)
Interactive input for sensitive variables is now masked in the UI (link)
A new module flag was added to module, to aid in creating workspaces in automated situations (link)
A new command was added for exporting Terraform function signatures in machine-readable format: module (link)
The ""Failed to install provider"" error message now includes the reason a provider could not be installed. (link)
backend/gcs: Add module argument, to allow encryption of state files using Cloud KMS keys. (link)
backend/gcs: Add module argument, to allow communication with the backend via a Private Service Connect endpoint. (link)
backend/gcs: Update documentation for usage of module with module (link)
backend/gcs: Update storage package to v1.28.0 (link)
When removing a workspace from the module backend module will use Terraform Cloud's link API if the module flag is not provided. (link)
backend/oss: More robustly handle endpoint retrieval error (link)
local-exec provisioner: Added module argument. If module is set to module, Terraform will not print the entire command to stdout during plan. (link)
backend/http: Add support for mTLS authentication. (link)
cloud: Add support for using the link localterraform.com in module and provider sources as a substitute for the currently configured cloud backend hostname. This enhancement was also applied to the remote backend.
module will now print an explanation when called on a Terraform workspace with empty state detailing why no resources are shown. (link)
backend/gcs: Added support for module env var to allow impersonating a different service account when module is configured for the GCP provider. (link)
backend/cos: Add support for the module authentication method with the module provider. This can be configured via the Terraform config or environment variables.
backend/cos: Add support for the module authentication method with the module provider. This can be configured via the Terraform config or environment variables.

EXPERIMENTS:


Since its introduction the module function's documentation carried a warning that it was experimental. This predated our more formalized idea of language experiments and so wasn't guarded by an explicit opt-in, but the intention was to allow for small adjustments to its behavior if we learned it was producing invalid YAML in some cases, due to the relative complexity of the YAML specification.
From Terraform v1.4 onwards, module is no longer documented as experimental and is now subject to the Terraform v1.x Compatibility Promises. There are no changes to its previous behavior in v1.3 and so no special action is required when upgrading.

"
10,"1.4.0 (Unreleased)
UPGRADE NOTES:

config: The module function when called with encoding ""GB18030"" will now encode the euro symbol € as the two-byte sequence module, as required by the GB18030 standard, before applying base64 encoding.
config: The module function when called with encoding ""GBK"" or ""CP936"" will now encode the euro symbol € as the single byte module before applying base64 encoding. This matches the behavior of the Windows API when encoding to this Windows-specific character encoding.

module: When interpreting the hostname portion of a provider source address or the address of a module in a module registry, Terraform will now use non-transitional IDNA2008 mapping rules instead of the transitional mapping rules previously used.
This matches a change to link which is being gradually adopted by web browsers. Terraform aims to follow the interpretation of hostnames used by web browsers for consistency. For some hostnames containing non-ASCII characters this may cause Terraform to now request a different ""punycode"" hostname when resolving.
* module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. There is an interim CLI configuration opt-out for those who rely on the previous incorrect behavior. (link)
* The Terraform plan renderer has been completely rewritten to aid with future Terraform Cloud integration. Users should not see any material change in the plan output between 1.3 and 1.4. If you notice any significant differences, or if Terraform fails to plan successfully due to rendering problems, please open a bug report issue.


BUG FIXES:

The module installer will now record in its manifest a correct module source URL after normalization when the URL given as input contains both a query string portion and a subdirectory portion. Terraform itself doesn't currently make use of this information and so this is just a cosmetic fix to make the recorded metadata more correct. (link)
config: The module function now correctly handles entirely-nil YAML documents. Previously it would incorrectly return an unknown value instead of a null value. It will now return a null value as documented. (link)
Ensure correct ordering between data sources and the deletion of managed resource dependencies. (link)
Fix Terraform creating objects that should not exist in variables that specify default attributes in optional objects. (link)
Fix several Terraform crashes that are caused by HCL creating objects that should not exist in variables that specify default attributes in optional objects within collections. (link)
Fix inconsistent behaviour in empty vs null collections. (link)
module now returns a non-zero exit when given an invalid argument (link)
Terraform would always plan changes when using a nested set attribute (link)
Terraform can now better detect when complex optional+computed object attributes are removed from configuration (link)
A new methodology for planning set elements can now better detect optional+computed changes within sets (link)
Fix state locking and releasing messages when in module mode, messages will now be written in JSON format (link)

ENHANCEMENTS:

module can now store a plan file even when encountering errors, which can later be inspected to help identify the source of the failures (link)
module is a new builtin managed resource type, which can replace the use of module, and can store data of any type (link)
module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. There is an interim CLI configuration opt-out for those who rely on the previous incorrect behavior. (link)
Interactive input for sensitive variables is now masked in the UI (link)
A new module flag was added to module, to aid in creating workspaces in automated situations (link)
A new command was added for exporting Terraform function signatures in machine-readable format: module (link)
The ""Failed to install provider"" error message now includes the reason a provider could not be installed. (link)
backend/gcs: Add module argument, to allow encryption of state files using Cloud KMS keys. (link)
backend/gcs: Add module argument, to allow communication with the backend via a Private Service Connect endpoint. (link)
backend/gcs: Update documentation for usage of module with module (link)
backend/gcs: Update storage package to v1.28.0 (link)
When removing a workspace from the module backend module will use Terraform Cloud's link API if the module flag is not provided. (link)
backend/oss: More robustly handle endpoint retrieval error (link)
local-exec provisioner: Added module argument. If module is set to module, Terraform will not print the entire command to stdout during plan. (link)
backend/http: Add support for mTLS authentication. (link)
cloud: Add support for using the link localterraform.com in module and provider sources as a substitute for the currently configured cloud backend hostname. This enhancement was also applied to the remote backend.
module will now print an explanation when called on a Terraform workspace with empty state detailing why no resources are shown. (link)
backend/gcs: Added support for module env var to allow impersonating a different service account when module is configured for the GCP provider. (link)
backend/cos: Add support for the module authentication method with the module provider. This can be configured via the Terraform config or environment variables.
backend/cos: Add support for the module authentication method with the module provider. This can be configured via the Terraform config or environment variables.

EXPERIMENTS:


Since its introduction the module function's documentation carried a warning that it was experimental. This predated our more formalized idea of language experiments and so wasn't guarded by an explicit opt-in, but the intention was to allow for small adjustments to its behavior if we learned it was producing invalid YAML in some cases, due to the relative complexity of the YAML specification.
From Terraform v1.4 onwards, module is no longer documented as experimental and is now subject to the Terraform v1.x Compatibility Promises. There are no changes to its previous behavior in v1.3 and so no special action is required when upgrading.

"
11,"1.4.0 (Unreleased)
UPGRADE NOTES:

config: The module function when called with encoding ""GB18030"" will now encode the euro symbol € as the two-byte sequence module, as required by the GB18030 standard, before applying base64 encoding.
config: The module function when called with encoding ""GBK"" or ""CP936"" will now encode the euro symbol € as the single byte module before applying base64 encoding. This matches the behavior of the Windows API when encoding to this Windows-specific character encoding.

module: When interpreting the hostname portion of a provider source address or the address of a module in a module registry, Terraform will now use non-transitional IDNA2008 mapping rules instead of the transitional mapping rules previously used.
This matches a change to link which is being gradually adopted by web browsers. Terraform aims to follow the interpretation of hostnames used by web browsers for consistency. For some hostnames containing non-ASCII characters this may cause Terraform to now request a different ""punycode"" hostname when resolving.
- The Terraform plan renderer has been completely rewritten to aid with future Terraform Cloud integration. Users should not see any material change in the plan output between 1.3 and 1.4. Users are encouraged to file reports if they notice material differences, or encounter any bugs or panics during their normal execution of Terraform.
The diff computation and the rendering are now split into separate packages, while previously the rendering was handled as the diff was computed. Going forward, making small changes to the format of the plan will be easier and introducing new types of renderer will be simplified.


BUG FIXES:

The module installer will now record in its manifest a correct module source URL after normalization when the URL given as input contains both a query string portion and a subdirectory portion. Terraform itself doesn't currently make use of this information and so this is just a cosmetic fix to make the recorded metadata more correct. (link)
config: The module function now correctly handles entirely-nil YAML documents. Previously it would incorrectly return an unknown value instead of a null value. It will now return a null value as documented. (link)
Ensure correct ordering between data sources and the deletion of managed resource dependencies. (link)
Fix Terraform creating objects that should not exist in variables that specify default attributes in optional objects. (link)
Fix several Terraform crashes that are caused by HCL creating objects that should not exist in variables that specify default attributes in optional objects within collections. (link)
Fix inconsistent behaviour in empty vs null collections. (link)
module now returns a non-zero exit when given an invalid argument (link)
Terraform would always plan changes when using a nested set attribute (link)
Terraform can now better detect when complex optional+computed object attributes are removed from configuration (link)
A new methodology for planning set elements can now better detect optional+computed changes within sets (link)
Fix state locking and releasing messages when in module mode, messages will now be written in JSON format (link)

ENHANCEMENTS:

module can now store a plan file even when encountering errors, which can later be inspected to help identify the source of the failures (link)
module is a new builtin managed resource type, which can replace the use of module, and can store data of any type (link)
module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. There is an interim CLI configuration opt-out for those who rely on the previous incorrect behavior. (link)
Interactive input for sensitive variables is now masked in the UI (link)
A new module flag was added to module, to aid in creating workspaces in automated situations (link)
A new command was added for exporting Terraform function signatures in machine-readable format: module (link)
The ""Failed to install provider"" error message now includes the reason a provider could not be installed. (link)
backend/gcs: Add module argument, to allow encryption of state files using Cloud KMS keys. (link)
backend/gcs: Add module argument, to allow communication with the backend via a Private Service Connect endpoint. (link)
backend/gcs: Update documentation for usage of module with module (link)
backend/gcs: Update storage package to v1.28.0 (link)
When removing a workspace from the module backend module will use Terraform Cloud's link API if the module flag is not provided. (link)
backend/oss: More robustly handle endpoint retrieval error (link)
local-exec provisioner: Added module argument. If module is set to module, Terraform will not print the entire command to stdout during plan. (link)
backend/http: Add support for mTLS authentication. (link)
cloud: Add support for using the link localterraform.com in module and provider sources as a substitute for the currently configured cloud backend hostname. This enhancement was also applied to the remote backend.
module will now print an explanation when called on a Terraform workspace with empty state detailing why no resources are shown. (link)
backend/gcs: Added support for module env var to allow impersonating a different service account when module is configured for the GCP provider. (link)
backend/cos: Add support for the module authentication method with the module provider. This can be configured via the Terraform config or environment variables.
backend/cos: Add support for the module authentication method with the module provider. This can be configured via the Terraform config or environment variables.

EXPERIMENTS:


Since its introduction the module function's documentation carried a warning that it was experimental. This predated our more formalized idea of language experiments and so wasn't guarded by an explicit opt-in, but the intention was to allow for small adjustments to its behavior if we learned it was producing invalid YAML in some cases, due to the relative complexity of the YAML specification.
From Terraform v1.4 onwards, module is no longer documented as experimental and is now subject to the Terraform v1.x Compatibility Promises. There are no changes to its previous behavior in v1.3 and so no special action is required when upgrading.

"
12,"1.3.9 (February 15, 2023)
BUG FIXES:

Fix crash when planning to remove already-deposed resource instances. (link)
"
13,"1.4.0 (Unreleased)
UPGRADE NOTES:

config: The module function when called with encoding ""GB18030"" will now encode the euro symbol € as the two-byte sequence module, as required by the GB18030 standard, before applying base64 encoding.
config: The module function when called with encoding ""GBK"" or ""CP936"" will now encode the euro symbol € as the single byte module before applying base64 encoding. This matches the behavior of the Windows API when encoding to this Windows-specific character encoding.

module: When interpreting the hostname portion of a provider source address or the address of a module in a module registry, Terraform will now use non-transitional IDNA2008 mapping rules instead of the transitional mapping rules previously used.
This matches a change to link which is being gradually adopted by web browsers. Terraform aims to follow the interpretation of hostnames used by web browsers for consistency. For some hostnames containing non-ASCII characters this may cause Terraform to now request a different ""punycode"" hostname when resolving.
- The Terraform plan renderer has been completely rewritten to aid with future Terraform Cloud integration. Users should not see any material change in the plan output between 1.3 and 1.4. Users are encouraged to file reports if they notice material differences, or encounter any bugs or panics during their normal execution of Terraform.
The diff computation and the rendering are now split into separate packages, while previously the rendering was handled as the diff was computed. Going forward, making small changes to the format of the plan will be easier and introducing new types of renderer will be simplified.


BUG FIXES:

The module installer will now record in its manifest a correct module source URL after normalization when the URL given as input contains both a query string portion and a subdirectory portion. Terraform itself doesn't currently make use of this information and so this is just a cosmetic fix to make the recorded metadata more correct. (link)
config: The module function now correctly handles entirely-nil YAML documents. Previously it would incorrectly return an unknown value instead of a null value. It will now return a null value as documented. (link)
Ensure correct ordering between data sources and the deletion of managed resource dependencies. (link)
Fix Terraform creating objects that should not exist in variables that specify default attributes in optional objects. (link)
Fix several Terraform crashes that are caused by HCL creating objects that should not exist in variables that specify default attributes in optional objects within collections. (link)
Fix inconsistent behaviour in empty vs null collections. (link)
module now returns a non-zero exit when given an invalid argument (link)
Terraform would always plan changes when using a nested set attribute (link)
Terraform can now better detect when complex optional+computed object attributes are removed from configuration (link)
A new methodology for planning set elements can now better detect optional+computed changes within sets (link)
Fix state locking and releasing messages when in module mode, messages will now be written in JSON format (link)

ENHANCEMENTS:

module can now store a plan file even when encountering errors, which can later be inspected to help identify the source of the failures (link)
module is a new builtin managed resource type, which can replace the use of module, and can store data of any type (link)
module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. There is an interim CLI configuration opt-out for those who rely on the previous incorrect behavior. (link)
Interactive input for sensitive variables is now masked in the UI (link)
A new module flag was added to module, to aid in creating workspaces in automated situations (link)
The ""Failed to install provider"" error message now includes the reason a provider could not be installed. (link)
backend/gcs: Add module argument, to allow encryption of state files using Cloud KMS keys. (link)
backend/gcs: Add module argument, to allow communication with the backend via a Private Service Connect endpoint. (link)
backend/gcs: Update documentation for usage of module with module (link)
backed/gcs: Update storage package to v1.28.0 (link)
When removing a workspace from the module backend module will use Terraform Cloud's link API if the module flag is not provided. (link)
backend/oss: More robustly handle endpoint retrieval error (link)
local-exec provisioner: Added module argument. If module is set to module, Terraform will not print the entire command to stdout during plan. (link)
backend/http: Add support for mTLS authentication. (link)
cloud: Add support for using the link localterraform.com in module and provider sources as a substitute for the currently configured cloud backend hostname. This enhancement was also applied to the remote backend.
module will now print an explanation when called on a Terraform workspace with empty state detailing why no resources are shown. (link)

EXPERIMENTS:


Since its introduction the module function's documentation carried a warning that it was experimental. This predated our more formalized idea of language experiments and so wasn't guarded by an explicit opt-in, but the intention was to allow for small adjustments to its behavior if we learned it was producing invalid YAML in some cases, due to the relative complexity of the YAML specification.
From Terraform v1.4 onwards, module is no longer documented as experimental and is now subject to the Terraform v1.x Compatibility Promises. There are no changes to its previous behavior in v1.3 and so no special action is required when upgrading.

"
14,"1.3.8 (February 09, 2023)
BUG FIXES:

Fixed a rare bug causing inaccurate module / module annotations in JSON plan output for deeply nested structures. This was only observed in the wild on the rancher/rancher2 provider, and resulted in glitched display in Terraform Cloud's structured plan log view. (link)
A variable only referenced by an output precondition error_message may be missing during evaluation (link)
Removing a NestingSingle block from configuration results in an invalid plan (link)
Null module outputs could be dropped, causing evaluation errors when referring to those module attributes (link)
Fix terraform crash when applying defaults into a collection with dynamic type constraint. (link)
Updated to newer github.com/mitchellh/cli version, in turn bringing in updates for several indirect dependencies with known security issues. (link)
Fix case where the first plan to use a new remote state could be applied twice, corrupting the state (link)
"
15,"1.3.7 (January 04, 2023)
BUG FIXES:

Fix exact version constraint parsing for modules using prerelease versions (link)
Prevent panic when a provider returns a null block value during refresh which is used as configuration via module (link)
"
16,"1.4.0 (Unreleased)
UPGRADE NOTES:

config: The module function when called with encoding ""GB18030"" will now encode the euro symbol € as the two-byte sequence module, as required by the GB18030 standard, before applying base64 encoding.
config: The module function when called with encoding ""GBK"" or ""CP936"" will now encode the euro symbol € as the single byte module before applying base64 encoding. This matches the behavior of the Windows API when encoding to this Windows-specific character encoding.

module: When interpreting the hostname portion of a provider source address or the address of a module in a module registry, Terraform will now use non-transitional IDNA2008 mapping rules instead of the transitional mapping rules previously used.
This matches a change to link which is being gradually adopted by web browsers. Terraform aims to follow the interpretation of hostnames used by web browsers for consistency. For some hostnames containing non-ASCII characters this may cause Terraform to now request a different ""punycode"" hostname when resolving.


BUG FIXES:

The module installer will now record in its manifest a correct module source URL after normalization when the URL given as input contains both a query string portion and a subdirectory portion. Terraform itself doesn't currently make use of this information and so this is just a cosmetic fix to make the recorded metadata more correct. (link)
config: The module function now correctly handles entirely-nil YAML documents. Previously it would incorrectly return an unknown value instead of a null value. It will now return a null value as documented. (link)
Ensure correct ordering between data sources and the deletion of managed resource dependencies. (link)
Fix Terraform creating objects that should not exist in variables that specify default attributes in optional objects. (link)
Fix several Terraform crashes that are caused by HCL creating objects that should not exist in variables that specify default attributes in optional objects within collections. (link)
Fix inconsistent behaviour in empty vs null collections. (link)

ENHANCEMENTS:

module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. (link)
The ""Failed to install provider"" error message now includes the reason a provider could not be installed. (link)
backend/gcs: Add module argument, to allow encryption of state files using Cloud KMS keys. (link)
backend/gcs: Add module argument, to allow communication with the backend via a Private Service Connect endpoint. (link)
backend/gcs: Update documentation for usage of module with module (link)
backed/gcs: Update storage package to v1.28.0 (link)
When removing a workspace from the module backend module will use Terraform Cloud's link API if the module flag is not provided. (link)
backend/oss: More robustly handle endpoint retrieval error (link)

EXPERIMENTS:


Since its introduction the module function's documentation carried a warning that it was experimental. This predated our more formalized idea of language experiments and so wasn't guarded by an explicit opt-in, but the intention was to allow for small adjustments to its behavior if we learned it was producing invalid YAML in some cases, due to the relative complexity of the YAML specification.
From Terraform v1.4 onwards, module is no longer documented as experimental and is now subject to the Terraform v1.x Compatibility Promises. There are no changes to its previous behavior in v1.3 and so no special action is required when upgrading.

"
17,"1.3.6 (November 30, 2022)
BUG FIXES:

Terraform could crash if an orphaned resource instance was deleted externally and had condition checks in the configuration (link)
Module output changes were being removed and re-added to the stored plan, impacting performance with large numbers of outputs (link)
"
18,"1.3.5 (November 17, 2022)
BUG FIXES:

Prevent crash while serializing the plan for an empty destroy operation (link)
Allow a destroy plan to refresh instances while taking into account that some may no longer exist (link)
Fix Terraform creating objects that should not exist in variables that specify default attributes in optional objects. (link)
Fix several Terraform crashes that are caused by HCL creating objects that should not exist in variables that specify default attributes in optional objects within collections. (link)
Fix inconsistent behaviour in empty vs null collections. (link)
Prevent file uploads from creating unneeded temporary files when the payload size is known (link)
Nested attributes marked sensitive by schema no longer reveal sub-attributes in the plan diff (link)
Nested attributes now more consistently display when they become unknown or null values in the plan diff (link)
Sensitive values are now always displayed as module instead of sometimes as module [GH32004]
"
19,"1.4.0 (Unreleased)
BUG FIXES:

The module installer will now record in its manifest a correct module source URL after normalization when the URL given as input contains both a query string portion and a subdirectory portion. Terraform itself doesn't currently make use of this information and so this is just a cosmetic fix to make the recorded metadata more correct. (link)

ENHANCEMENTS:

module will now ignore entries in the optional global provider cache directory unless they match a checksum already tracked in the current configuration's dependency lock file. This therefore avoids the long-standing problem that when installing a new provider for the first time from the cache we can't determine the full set of checksums to include in the lock file. Once the lock file has been updated to include a checksum covering the item in the global cache, Terraform will then use the cache entry for subsequent installation of the same provider package. (link)
The ""Failed to install provider"" error message now includes the reason a provider could not be installed. (link)
backend/gcs: Add module argument, to allow encryption of state files using Cloud KMS keys. (link)
backend/gcs: Add module argument, to allow communication with the backend via a Private Service Connect endpoint. (link)
backend/gcs: Update documentation for usage of module with module (link)

EXPERIMENTS:


Since its introduction the module function's documentation carried a warning that it was experimental. This predated our more formalized idea of language experiments and so wasn't guarded by an explicit opt-in, but the intention was to allow for small adjustments to its behavior if we learned it was producing invalid YAML in some cases, due to the relative complexity of the YAML specification.
From Terraform v1.4 onwards, module is no longer documented as experimental and is now subject to the Terraform v1.x Compatibility Promises. There are no changes to its previous behavior in v1.3 and so no special action is required when upgrading.

"
20,"1.3.4 (November 02, 2022)
BUG FIXES:

Fix invalid refresh-only plan caused by data sources being deferred to apply (link)
Optimize the handling of condition checks during apply to prevent performance regressions with large numbers of instances (link)
Output preconditions should not be evaluated during destroy (link)
Fix crash from module when outputs contain preconditions (link)
Destroy with no state would still attempt to evaluate some values (link)
Prevent unnecessary evaluation and planning of resources during the pre-destroy refresh (link)
AzureRM Backend: support for generic OIDC authentication via the module and module properties (link)
Input and Module Variables: Convert variable types before attempting to apply default values. (link)
When installing remote module packages delivered in tar format, Terraform now limits the tar header block size to 1MiB to avoid unbounded memory usage for maliciously-crafted module packages. (link)
Terraform will now reject excessively-complex regular expression patterns passed to the module, module, and module functions, to avoid unbounded memory usage for maliciously-crafted patterns. This change should not affect any reasonable patterns intended for practical use. (link)
Terraform on Windows now rejects invalid environment variables whose values contain the NUL character when propagating environment variables to a child process such as a provider plugin. Previously Terraform would incorrectly treat that character as a separator between two separate environment variables. (link)
"
21,"1.3.3 (October 19, 2022)
BUG FIXES:

Fix error when removing a resource from configuration which has according to the provider has already been deleted. (link)
Fix error when setting empty collections into variables with collections of nested objects with default values. (link)
"
22,"1.3.2 (October 06, 2022)
BUG FIXES:

Fixed a crash caused by Terraform incorrectly re-registering output value preconditions during the apply phase (rather than just reusing the already-planned checks from the plan phase). (link)
Prevent errors when the provider reports that a deposed instance no longer exists (link)
Using module could cause persistent diffs with legacy providers (link)
Fix cycles when resource dependencies cross over between independent provider configurations (link)
Improve handling of missing resource instances during module (link)
"
23,"1.3.1 (September 28, 2022)
NOTE:
* On module and module architectures, module binaries are now built with CGO enabled. This should not have any user-facing impact, except in cases where the pure Go DNS resolver causes problems on recent versions of macOS: using CGO may mitigate these issues. Please see the upstream bug https://github.com/golang/go/issues/52839 for more details.
BUG FIXES:

Fixed a crash when using objects with optional attributes and default values in collections, most visible with nested modules. (link)
Prevent cycles in some situations where a provider depends on resources in the configuration which are participating in planned changes. (link)
Fixed an error when attempting to destroy a configuration where resources do not exist in the state. (link)
Data sources which cannot be read during will no longer prevent the state from being serialized. (link)
Fixed a crash which occured when a resource with a precondition and/or a postcondition appeared inside a module with two or more instances. (link)
"
24,"1.3.0 (September 21, 2022)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


Added functions: module and module allow you to check whether a given string has a specified prefix or suffix. (link)


UPGRADE NOTES:

module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.
module: The module has been removed, and at least an empty configuration block must exist to import a resource.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)

AzureRM Backend: This release concludes link for the module backend's support of ""ADAL"" authentication. This backend now supports only ""MSAL"" (Microsoft Graph) authentication.
This follows from link, and so you must follow the migration instructions presented in that Azure documentation to adopt Microsoft Graph and then change your backend configuration to use MSAL authentication before upgrading to Terraform v1.3.
* When making requests to HTTPS servers, Terraform will now reject invalid handshakes that have duplicate extensions, as required by RFC 5246 section 7.4.1.4 and RFC 8446 section 4.2. This may cause new errors when interacting with existing buggy or misconfigured TLS servers, but should not affect correct servers.
This only applies to requests made directly by Terraform CLI, such as provider installation and remote state storage. Terraform providers are separate programs which decide their own policy for handling of TLS handshakes.
* The following backends, which were deprecated in v1.2.3, have now been removed: module, module, module, module, module. The legacy backend name module has also been removed, because the current Azure backend is named module. (link)


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)
config: New built-in function module allows determining the ordering relationship between two timestamps while taking potentially-different UTC offsets into account. (link)
config: When reporting an error message related to a function call, Terraform will now include contextual information about the signature of the function that was being called, as an aid to understanding why the call might have failed. (link)
config: When reporting an error or warning message that isn't caused by values being unknown or marked as sensitive, Terraform will no longer mention any values having those characteristics in the contextual information presented alongside the error. Terraform will still return this information for the small subset of error messages that are specifically about unknown values or sensitive values being invalid in certain contexts. (link)
config: module blocks can now describe resources moving to and from modules in separate module packages. (link)
module now accepts multiple target paths, allowing formatting of several individual files at once. (link)
module: provider installation errors now mention which host Terraform was downloading from (link)
CLI: Terraform will report more explicitly when it is proposing to delete an object due to it having moved to a resource instance that is not currently declared in the configuration. (link)
CLI: When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about pre-plan run tasks (link)
The AzureRM Backend now only supports MSAL (and Microsoft Graph) and no longer makes use of ADAL (and Azure Active Directory Graph) for authentication (link)
The COS backend now supports global acceleration. (link)
provider plugin protocol: The Terraform CLI now calls module for compatible providers when destroying resource instances. (link)
As an implementation detail of the Terraform Cloud integration, Terraform CLI will now capture and upload link along with any newly-recorded state snapshots, which then in turn allows Terraform Cloud to provide that information to API-based external integrations. (link)

BUG FIXES:

config: Terraform was not previously evaluating preconditions and postconditions during the apply phase for resource instances that didn't have any changes pending, which was incorrect because the outcome of a condition can potentially be affected by changes to other objects in the configuration. Terraform will now always check the conditions for every resource instance included in a plan during the apply phase, even for resource instances that have ""no-op"" changes. This means that some failures that would previously have been detected only by a subsequent run will now be detected during the same run that caused them, thereby giving the feedback at the appropriate time. (link)
module: Fixed missing markers for unknown values in the encoding of partially unknown tuples and sets. (link)
module CLI help documentation is now more consistent with web-based documentation. (link)
module: Error messages now handle the situation where the underlying HTTP client library does not indicate a hostname for a failed request. (link)
module: Don't panic if a child module contains a resource with a syntactically-invalid resource type name. (link)
CLI: The representation of destroying already-module output values in a destroy plan will no longer report them as being deleted, which avoids reporting the deletion of an output value that was already absent. (link)
module: Better handling of resources or modules that use module, and situations where data resources are needed to complete the operation. (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature. If you are writing a shared module for others to use, we recommend declaring that your module requires Terraform v1.3.0 or later to give specific feedback when using the new feature on older Terraform versions, in place of the previous declaration to use the experimental form of this feature:
module

"
25,"1.3.0 (Unreleased)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


Added functions: module and module allow you to check whether a given string has a specified prefix or suffix. (link)


UPGRADE NOTES:

module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.
module: The module has been removed, and at least an empty configuration block must exist to import a resource.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)

AzureRM Backend: This release concludes link for the module backend's support of ""ADAL"" authentication. This backend now supports only ""MSAL"" (Microsoft Graph) authentication.
This follows from link, and so you must follow the migration instructions presented in that Azure documentation to adopt Microsoft Graph and then change your backend configuration to use MSAL authentication before upgrading to Terraform v1.3.
* When making requests to HTTPS servers, Terraform will now reject invalid handshakes that have duplicate extensions, as required by RFC 5246 section 7.4.1.4 and RFC 8446 section 4.2. This may cause new errors when interacting with existing buggy or misconfigured TLS servers, but should not affect correct servers.
This only applies to requests made directly by Terraform CLI, such as provider installation and remote state storage. Terraform providers are separate programs which decide their own policy for handling of TLS handshakes.
* The following backends, which were deprecated in v1.2.3, have now been removed: module, module, module, module, module. The legacy backend name module has also been removed, because the current Azure backend is named module. [link] 


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)
config: New built-in function module allows determining the ordering relationship between two timestamps while taking potentially-different UTC offsets into account. (link)
config: When reporting an error message related to a function call, Terraform will now include contextual information about the signature of the function that was being called, as an aid to understanding why the call might have failed. (link)
config: When reporting an error or warning message that isn't caused by values being unknown or marked as sensitive, Terraform will no longer mention any values having those characteristics in the contextual information presented alongside the error. Terraform will still return this information for the small subset of error messages that are specifically about unknown values or sensitive values being invalid in certain contexts. (link)
config: module blocks can now describe resources moving to and from modules in separate module packages. (link)
module now accepts multiple target paths, allowing formatting of several individual files at once. (link)
module: provider installation errors now mention which host Terraform was downloading from (link)
CLI: Terraform will report more explicitly when it is proposing to delete an object due to it having moved to a resource instance that is not currently declared in the configuration. (link)
CLI: When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about pre-plan run tasks (link)
The AzureRM Backend now only supports MSAL (and Microsoft Graph) and no longer makes use of ADAL (and Azure Active Directory Graph) for authentication (link)
The COS backend now supports global acceleration. (link)
provider plugin protocol: The Terraform CLI now calls module for compatible providers when destroying resource instances. (link)
As an implementation detail of the Terraform Cloud integration, Terraform CLI will now capture and upload link along with any newly-recorded state snapshots, which then in turn allows Terraform Cloud to provide that information to API-based external integrations. (link)

BUG FIXES:

config: Terraform was not previously evaluating preconditions and postconditions during the apply phase for resource instances that didn't have any changes pending, which was incorrect because the outcome of a condition can potentially be affected by changes to other objects in the configuration. Terraform will now always check the conditions for every resource instance included in a plan during the apply phase, even for resource instances that have ""no-op"" changes. This means that some failures that would previously have been detected only by a subsequent run will now be detected during the same run that caused them, thereby giving the feedback at the appropriate time. (link)
module: Fixed missing markers for unknown values in the encoding of partially unknown tuples and sets. (link)
module CLI help documentation is now more consistent with web-based documentation. (link)
module: Error messages now handle the situation where the underlying HTTP client library does not indicate a hostname for a failed request. (link)
module: Don't panic if a child module contains a resource with a syntactically-invalid resource type name. (link)
CLI: The representation of destroying already-module output values in a destroy plan will no longer report them as being deleted, which avoids reporting the deletion of an output value that was already absent. (link)
module: Better handling of resources or modules that use module, and situations where data resources are needed to complete the operation. (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature. If you are writing a shared module for others to use, we recommend declaring that your module requires Terraform v1.3.0 or later to give specific feedback when using the new feature on older Terraform versions, in place of the previous declaration to use the experimental form of this feature:
module

"
26,"1.2.9 (September 07, 2022)
ENHANCEMENTS:

terraform init: add link to documentation when a checksum is missing from the lock file. (link)
"
27,"1.3.0 (Unreleased)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


Added functions: module and module allow you to check whether a given string has a specified prefix or suffix. (link)


UPGRADE NOTES:

module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.
module: The module has been removed, and at least an empty configuration block must exist to import a resource.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)

AzureRM Backend: This release concludes link for the module backend's support of ""ADAL"" authentication. This backend now supports only ""MSAL"" (Microsoft Graph) authentication.
This follows from link, and so you must follow the migration instructions presented in that Azure documentation to adopt Microsoft Graph and then change your backend configuration to use MSAL authentication before upgrading to Terraform v1.3.
* When making requests to HTTPS servers, Terraform will now reject invalid handshakes that have duplicate extensions, as required by RFC 5246 section 7.4.1.4 and RFC 8446 section 4.2. This may cause new errors when interacting with existing buggy or misconfigured TLS servers, but should not affect correct servers.
This only applies to requests made directly by Terraform CLI, such as provider installation and remote state storage. Terraform providers are separate programs which decide their own policy for handling of TLS handshakes.
* The following backends, which were deprecated in v1.2.3, have now been removed: module, module, module, module, module. The module backend name has been removed: please use the name module for this backend. [link] 


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)
config: New built-in function module allows determining the ordering relationship between two timestamps while taking potentially-different UTC offsets into account. (link)
module now accepts multiple target paths, allowing formatting of several individual files at once. (link)
When reporting an error message related to a function call, Terraform will now include contextual information about the signature of the function that was being called, as an aid to understanding why the call might have failed. (link)
When reporting an error or warning message that isn't caused by values being unknown or marked as sensitive, Terraform will no longer mention any values having those characteristics in the contextual information presented alongside the error. Terraform will still return this information for the small subset of error messages that are specifically about unknown values or sensitive values being invalid in certain contexts. (link)
The Terraform CLI now calls module for compatible providers when destroying resource instances. (link)
The AzureRM Backend now only supports MSAL (and Microsoft Graph) and no longer makes use of ADAL (and Azure Active Directory Graph) for authentication (link)
The COS backend now supports global acceleration. (link)
providercache: include host in provider installation error (link)
refactoring: module blocks can now be used to move resources to and from external modules (link)
refactoring/plans: Terraform will now indicate when the deletion of a resource is due to moving a resource to a target not in configuration. This information is also available as a module in the planproto. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about pre-plan run tasks (link)
Terraform now sends the JSON state representation to the Cloud backend (when available) (link)

BUG FIXES:

config: Terraform was not previously evaluating preconditions and postconditions during the apply phase for resource instances that didn't have any changes pending, which was incorrect because the outcome of a condition can potentially be affected by changes to other objects in the configuration. Terraform will now always check the conditions for every resource instance included in a plan during the apply phase, even for resource instances that have ""no-op"" changes. This means that some failures that would previously have been detected only by a subsequent run will now be detected during the same run that caused them, thereby giving the feedback at the appropriate time. (link)
module: Fixed missing unknown markers in the encoding of partially unknown tuples and sets. (link)
module CLI help documentation is now more consistent with web-based documentation. (link)
getproviders: account for occasionally missing Host header in errors (link)
core: Do not create ""delete"" changes for nonexistent outputs (link)
configload: validate implied provider names in submodules to avoid crash (link)
core: module fails when resources or modules are expanded with for each, or input from data sources is required (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature. If you are writing a shared module for others to use, we recommend declaring that your module requires Terraform v1.3.0 or later to give specific feedback when using the new feature on older Terraform versions, in place of the previous declaration to use the experimental form of this feature:
module

"
28,"1.2.8 (August 24, 2022)
BUG FIXES:

config: The module function will no longer panic if given a null value that has been explicitly converted to or implicitly inferred as having a list, set, or tuple type. Previously Terraform would panic in such a situation because it tried to ""flatten"" the contents of the null value into the result, which is impossible. (link)
config: The module, module, and module functions, and various automatic conversions that include similar logic, will no longer panic when asked to infer an element type that is convertable from both a tuple type and a list type whose element type is not yet known. (link)
"
29,"1.3.0 (Unreleased)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


Added functions: module and module allow you to check whether a given string has a specified prefix or suffix. (link)


UPGRADE NOTES:

module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.

module: The module has been removed, and at least an empty configuration block must exist to import a resource.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)
module now accepts multiple target paths, allowing formatting of several individual files at once. (link)
When reporting an error message related to a function call, Terraform will now include contextual information about the signature of the function that was being called, as an aid to understanding why the call might have failed. (link)
When reporting an error or warning message that isn't caused by values being unknown or marked as sensitive, Terraform will no longer mention any values having those characteristics in the contextual information presented alongside the error. Terraform will still return this information for the small subset of error messages that are specifically about unknown values or sensitive values being invalid in certain contexts. (link)
The Terraform CLI now calls module for compatible providers when destroying resource instances. (link)
The AzureRM Backend now only supports MSAL (and Microsoft Graph) and no longer makes use of ADAL (and Azure Active Directory Graph) for authentication (link)
The COS backend now supports global acceleration. (link)
providercache: include host in provider installation error (link)
refactoring: module blocks can now be used to move resources to and from external modules (link)

BUG FIXES:

config: Terraform was not previously evaluating preconditions and postconditions during the apply phase for resource instances that didn't have any changes pending, which was incorrect because the outcome of a condition can potentially be affected by changes to other objects in the configuration. Terraform will now always check the conditions for every resource instance included in a plan during the apply phase, even for resource instances that have ""no-op"" changes. This means that some failures that would previously have been detected only by a subsequent run will now be detected during the same run that caused them, thereby giving the feedback at the appropriate time. (link)
module: Fixed missing unknown markers in the encoding of partially unknown tuples and sets. (link)
module CLI help documentation is now more consistent with web-based documentation. (link)
getproviders: account for occasionally missing Host header in errors (link)
core: Do not create ""delete"" changes for nonexistent outputs (link)
configload: validate implied provider names in submodules to avoid crash (link)
core: module fails when resources or modules are expanded with for each, or input from data sources is required (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature. If you are writing a shared module for others to use, we recommend declaring that your module requires Terraform v1.3.0 or later to give specific feedback when using the new feature on older Terraform versions, in place of the previous declaration to use the experimental form of this feature:
module

"
30,"1.2.7 (August 10, 2022)
ENHANCEMENTS:

config: Check for direct references to deprecated computed attributes. (link)

BUG FIXES:

config: Fix an crash if a submodule contains a resource whose implied provider local name contains invalid characters, by adding additional validation rules to turn it into a real error. (link)
core: Fix some handling of provider schema attributes which use the newer ""structural typing"" mechanism introduced with protocol version 6, and therefore with the new Terraform Plugin Framework (link)
command: Add missing output text for applyable refresh plans. (link)
"
31,"1.3.0 (Unreleased)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


Added functions: module and module allow you to check whether a given string has a specified prefix or suffix. (link)


UPGRADE NOTES:


module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)
When reporting an error message related to a function call, Terraform will now include contextual information about the signature of the function that was being called, as an aid to understanding why the call might have failed. (link)
When reporting an error or warning message that isn't caused by values being unknown or marked as sensitive, Terraform will no longer mention any values having those characteristics in the contextual information presented alongside the error. Terraform will still return this information for the small subset of error messages that are specifically about unknown values or sensitive values being invalid in certain contexts. (link)
The Terraform CLI now calls module for compatible providers when destroying resource instances. (link)
The AzureRM Backend now only supports MSAL (and Microsoft Graph) and no longer makes use of ADAL (and Azure Active Directory Graph) for authentication (link)
The COS backend now supports global acceleration. (link)
providercache: include host in provider installation error (link)

BUG FIXES:

config: Terraform was not previously evaluating preconditions and postconditions during the apply phase for resource instances that didn't have any changes pending, which was incorrect because the outcome of a condition can potentially be affected by changes to other objects in the configuration. Terraform will now always check the conditions for every resource instance included in a plan during the apply phase, even for resource instances that have ""no-op"" changes. This means that some failures that would previously have been detected only by a subsequent run will now be detected during the same run that caused them, thereby giving the feedback at the appropriate time. (link)
module: Fixed missing unknown markers in the encoding of partially unknown tuples and sets. (link)
module CLI help documentation is now more consistent with web-based documentation. (link)
getproviders: account for occasionally missing Host header in errors (link)
core: Do not create ""delete"" changes for nonexistent outputs (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature. If you are writing a shared module for others to use, we recommend declaring that your module requires Terraform v1.3.0 or later to give specific feedback when using the new feature on older Terraform versions, in place of the previous declaration to use the experimental form of this feature:
module

"
32,"1.2.6 (July 27, 2022)
ENHANCEMENTS:

Add a warning and guidance when module fails to fully populate the module file. (link)
Add a direct link to the relevant documentation when module fails on missing checksums. (link)

BUG FIXES:

Fix panic on module when state file is invalid or unavailable. (link)
Fix module command failing on missing checksums. (link)
Some combinations of move block operations would be executed in the wrong order (link)
Don't attribute an error to the provider when a computed attribute is listed in module (link)
"
33,"1.2.5 (July 13, 2022)
BUG FIXES:

Report correct error message when a prerelease field is included in the module global constraint. (link)
Fix case when extra blank lines were inserted into the plan for unchanged blocks. (link)
"
34,"1.3.0 (Unreleased)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


UPGRADE NOTES:


module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)
When reporting an error message related to a function call, Terraform will now include contextual information about the signature of the function that was being called, as an aid to understanding why the call might have failed. (link)
When reporting an error or warning message that isn't caused by values being unknown or marked as sensitive, Terraform will no longer mention any values having those characteristics in the contextual information presented alongside the error. Terraform will still return this information for the small subset of error messages that are specifically about unknown values or sensitive values being invalid in certain contexts. (link)
The Terraform CLI now calls module for compatible providers when destroying resource instances. (link)

BUG FIXES:

Made module CLI help documentation consistent with web-based documentation. (link)
module: Fixed missing unknown markers in the encoding of partially unknown tuples and sets. (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature. If you are writing a shared module for others to use, we recommend declaring that your module requires Terraform v1.3.0 or later to give specific feedback when using the new feature on older Terraform versions, in place of the previous declaration to use the experimental form of this feature:
module

"
35,"1.2.4 (June 29, 2022)
ENHANCEMENTS:

Improved validation of module to prevent single providers from being required with multiple names. (link)
Improved plan performance by optimizing module for allocations. (link)

BUG FIXES:

backend/http: Fixed bug where the HTTP backend would fail to retry acquiring the state lock and ignored the module flag. (link)
Fix crash if a module or module block omitted the required module argument. (link)
"
36,"1.3.0 (Unreleased)
NEW FEATURES:


Optional attributes for object type constraints: When declaring an input variable whose type constraint includes an object type, you can now declare individual attributes as optional, and specify a default value to use if the caller doesn't set it. For example:
module
Assigning module to this variable will result in the value module.


UPGRADE NOTES:


module: Output changes now include more detail about the unknown-ness of the planned value. Previously, a planned output would be marked as either fully known or partially unknown, with the module field having value module or module respectively. Now outputs correctly expose the full structure of unknownness for complex values, allowing consumers of the JSON output format to determine which values in a collection are known only after apply.
Consumers of the JSON output format expecting on the module field to be only module or module should be updated to support link described in the documentation, and as was already used for resource changes. (link)


ENHANCEMENTS:

config: Optional attributes for object type constraints, as described under new features above. (link)

BUG FIXES:

Made module CLI help documentation consistent with web-based documentation. (link)
module: Fixed missing unknown markers in the encoding of partially unknown tuples and sets. (link)

EXPERIMENTS:


This release concludes the module experiment, which started in Terraform v0.14.0. The final design of the optional attributes feature is similar to the experimental form in the previous releases, but with two major differences:

The module function-like modifier for declaring an optional attribute now accepts an optional second argument for specifying a default value to use when the attribute isn't set by the caller. If not specified, the default value is a null value of the appropriate type as before.
The built-in module function, previously used to meet the use-case of replacing null values with default values, will not graduate to stable and has been removed. Use the second argument of module inline in your type constraint to declare default values instead.

If you have any experimental modules that were participating in this experiment, you will need to remove the experiment opt-in and adopt the new syntax for declaring default values in order to migrate your existing module to the stablized version of this feature.

"
37,"1.2.3 (June 15, 2022)
UPGRADE NOTES:

The following remote state backends are now marked as deprecated, and are
  planned to be removed in a future Terraform release. These backends have
  been unmaintained since before Terraform v1.0, and may contain known bugs,
  outdated packages, or security vulnerabilities.
artifactory
etcd
etcdv3
manta
swift

BUG FIXES:

Missing check for error diagnostics in GetProviderSchema could result in panic (link)
Module registries returning X-Terraform-Get locations with no URL would error with ""no getter available for X-Terraform-Get source protocol"" (link)
Fix crash from concurrent operation on shared set of resource instance dependencies (link)
backend/cos: module tag was not removed in all cases (link)
"
38,"1.3.0 (Unreleased)
UPGRADE NOTES:


Module variable type constraints now support an module modifier for object attribute types. Optional attributes may be omitted from the variable value, and will be replaced by a default value (or module if no default is specified). For example:
module


Assigning module to this variable will result in the value module.
module
BUG FIXES:

Made module CLI help documentation consistent with web-based documentation (link)
"
39,"1.2.2 (June 01, 2022)
ENHANCEMENTS:

Invalid module arguments with spaces between the name and value now have an improved error message (link)

BUG FIXES:

Terraform now hides invalid input values for sensitive root module variables when generating error diagnostics (link)
Fixed crash on CLI autocomplete (link)
The ""Configuration contains unknown values"" error message now includes attribute paths (link)
"
40,"1.2.1 (May 23, 2022)
BUG FIXES:

SSH provisioner connections fail when using signed module keys (link)
Crash with invalid module source (link)
Incorrect ""Module is incompatible with count, for_each, and depends_on"" error when a provider is nested within a module along with a sub-module using module or module (link)
"
41,"1.2.0 (May 18, 2022)
UPGRADE NOTES:


If you use the link, you should disable it as part of upgrading to Terraform v1.2 because similar functionality is now built in to Terraform itself.
The new behavior supports the same environment variable naming scheme but has a difference in priority order from the credentials helper: module environment variables will now take priority over credentials blocks in CLI configuration and credentials stored automatically by terraform login, which is not true for credentials provided by any credentials helper plugin. If you see Terraform using different credentials after upgrading, check to make sure you do not specify credentials for the same host in multiple locations.
If you use the credentials helper in conjunction with the link Terraform provider to manage Terraform Cloud or Terraform Enterprise objects with Terraform, you should also upgrade to version 0.31 of that provider, which added the corresponding built-in support for these environment variables.
* The official Linux packages for the v1.2 series now require Linux kernel version 2.6.32 or later.
* When making outgoing HTTPS or other TLS connections as a client, Terraform now requires the server to support TLS v1.2. TLS v1.0 and v1.1 are no longer supported. Any safely up-to-date server should support TLS 1.2, and mainstream web browsers have required it since 2020.
* When making outgoing HTTPS or other TLS connections as a client, Terraform will no longer accept CA certificates signed using the SHA-1 hash function. Publicly trusted Certificate Authorities have not issued SHA-1 certificates since 2015.


(Note: the changes to Terraform's requirements when interacting with TLS servers apply only to requests made by Terraform CLI itself, such as provider/module installation and state storage requests. Terraform provider plugins include their own TLS clients which may have different requirements, and may add new requirements in their own releases, independently of Terraform CLI changes.)
NEW FEATURES:

module and module check blocks for resources, data sources, and module output values: module authors can now document assumptions and assertions about configuration and state values. If these conditions are not met, Terraform will report a custom error message to the user and halt further execution.
module is a new module argument for managed resources which triggers replacement of an object based on changes to an upstream dependency.
You can now specify credentials for link using an environment variable named as module followed by an encoded version of the hostname. For example, Terraform will use variable module as a bearer token for requests to ""app.terraform.io"", for the Terraform Cloud integration and private registry requests.

ENHANCEMENTS:

When showing a plan, Terraform CLI will now only show ""Changes outside of Terraform"" if they relate to resources and resource attributes that contributed to the changes Terraform is proposing to make. (link)
Error messages for preconditions, postconditions, and custom variable validations are now evaluated as expressions, allowing interpolation of relevant values into the output. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about post-plan link. (link)
Terraform will now show a slightly different note in the plan output if a data resource read is deferred to the apply step due to it depending on a managed resource that has changes pending. (link)
The ""Invalid for_each argument"" error message for unknown maps/sets now includes an additional paragraph to try to help the user notice they can move apply-time values into the map values instead of the map keys, and thus avoid the problem without resorting to module. (link)
There are some small improvements to the error and warning messages Terraform will emit in the case of invalid provider configuration passing between modules. There are no changes to which situations will produce errors and warnings, but the messages now include additional information intended to clarify what problem Terraform is describing and how to address it. (link)
The environment variables module and module now serve as fallbacks for the arguments of the same name inside a module block configuring integration with Terraform Cloud.
The environment variable module will now additionally serve as an implicit configuration of a single selected workspace on Terraform Cloud if (and only if) the module block does not include an explicit workspaces configuration.
The AzureRM Backend now defaults to using MSAL (and Microsoft Graph) rather than ADAL (and Azure Active Directory Graph) for authentication. (link)
The AzureRM Backend now supports authenticating as a service principal using OpenID Connect. (link)
When running on macOS, Terraform will now use platform APIs to validate certificates presented by TLS (HTTPS) servers. This may change exactly which root certificates Terraform will accept as valid. (link)
Show remote host in error message for clarity when installation of provider fails (link)
Terraform now prints a warning when adding an attribute to module that is managed only by the provider. Specifying non-configurable attributes in module has no effect because module tells Terraform to ignore future changes made in the configuration. (link)
module now includes exact type information for output values. (link)
The module provisioner connection now supports SSH over HTTP proxy. (link)


The SSH client for provisioners now supports newer key algorithms, allowing it to connect to servers running more recent versions of OpenSSH. (link)



BUG FIXES:

Terraform now handles type constraints, nullability, and custom variable validation properly for root module variables. Previously there was an order of operations problem where the nullability and custom variable validation were checked too early, prior to dealing with the type constraints, and thus that logic could potentially ""see"" an incorrectly-typed value in spite of the type constraint, leading to incorrect errors. (link)
When reporting a type mismatch between the true and false results of a conditional expression when both results are of the same structural type kind (object/tuple, or a collection thereof), Terraform will no longer return a confusing message like ""the types are object and object, respectively"", and will instead attempt to explain how the two structural types differ. (link)
Applying the various type conversion functions like module, module, etc to module will now return a null value of the intended type. For example, module converts from a null value of an unknown type to a null value of string type. Terraform can often handle such conversions automatically when needed, but explicit annotations like this can help Terraform to understand author intent when inferring type conversions for complex-typed values. (link)
Terraform now returns an error when module is called with an IPv6 address, as it was previously documented to do. IPv6 standards do not preserve the ""netmask"" syntax sometimes used for IPv4 network configuration; use CIDR prefix syntax instead. (link)
When performing advanced state management with the module commands, Terraform now checks the module field in the configuration before proceeding. (link)
When rendering a diff, Terraform now quotes the name of any object attribute whose string representation is not a valid identifier. (link)
Terraform will now prioritize local terraform variables over remote terraform variables in operations such as module, module, module and module for workspaces in local execution mode. This behavior applies to both module backend and the module integration configuration. (link)
module: JSON plan output now correctly maps aliased providers to their configurations, and includes the full provider source address alongside the short provider name. (link)
The local token configuration in the module and module backend now has higher priority than a token specified in a module block in the CLI configuration. (link) 
The module integration now gracefully exits when module and an operation requires some user input.
Terraform will now reliably detect an inteerruptiong (e.g. Ctrl+C) during planning for module. Previously there was a window of time where interruption would cancel the plan step but not prevent Terraform from proceeding to the apply step. (link)
Terraform will no longer crash if a provider fails to return a schema. (link)
"
42,"1.2.0-rc2 (Unreleased)
UPGRADE NOTES:

The official Linux packages for the v1.2 series now require Linux kernel version 2.6.32 or later.
When making outgoing HTTPS or other TLS connections as a client, Terraform now requires the server to support TLS v1.2. TLS v1.0 and v1.1 are no longer supported. Any safely up-to-date server should support TLS 1.2, and mainstream web browsers have required it since 2020.

When making outgoing HTTPS or other TLS connections as a client, Terraform will no longer accept CA certificates signed using the SHA-1 hash function. Publicly trusted Certificate Authorities have not issued SHA-1 certificates since 2015.
(Note: the changes to Terraform's requirements when interacting with TLS servers apply only to requests made by Terraform CLI itself, such as provider/module installation and state storage requests. Terraform provider plugins include their own TLS clients which may have different requirements, and may add new requirements in their own releases, independently of Terraform CLI changes.)
* If you use the link, you should disable it as part of upgrading to Terraform v1.2 because similar functionality is now built in to Terraform itself.
The new behavior supports the same environment variable naming scheme but has a difference in priority order from the credentials helper: module environment variables will now take priority over credentials blocks in CLI configuration and credentials stored automatically by terraform login, which is not true for credentials provided by any credentials helper plugin. If you see Terraform using different credentials after upgrading, check to make sure you do not specify credentials for the same host in multiple locations.
If you use the credentials helper in conjunction with the link Terraform provider to manage Terraform Cloud or Terraform Enterprise objects with Terraform, you should also upgrade to version 0.31 of that provider, which added the corresponding built-in support for these environment variables.


NEW FEATURES:

module and module check blocks for resources, data sources, and module output values: module authors can now document assumptions and assertions about configuration and state values. If these conditions are not met, Terraform will report a custom error message to the user and halt further evaluation.
You may specify remote network service credentials using an environment variable named after the host name with a module prefix. For example, the value of a variable named module will be used as a bearer authorization token when the CLI makes service requests to the host name ""app.terraform.io"".
module is a new module argument which allows one to configure the replacement of a resource based on changes in a dependency.

ENHANCEMENTS:

The ""Invalid for_each argument"" error message for unknown maps/sets now includes an additional paragraph to try to help the user notice they can move apply-time values into the map values instead of the map keys, and thus avoid the problem without resorting to module. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about post-plan link. (link)
Error messages for preconditions, postconditions, and custom variable validations are now evaluated as expressions, allowing interpolation of relevant values into the output. (link)
There are some small improvements to the error and warning messages Terraform will emit in the case of invalid provider configuration passing between modules. There are no changes to which situations will produce errors and warnings, but the messages now include additional information intended to clarify what problem Terraform is describing and how to address it. (link)
When running module, only show external changes which may have contributed to the current plan (link)
Terraform will now show a slightly different note in the plan output if a data resource read is deferred to the apply step due to it depending on a managed resource that has changes pending. (link)
Add module environment variable fallback for module in the cloud configuration
Add module environment variable fallback for module in the cloud configuration
module can now be used to configure the module attribute in your cloud configuration
When running on macOS, Terraform will now use platform APIs to validate certificates presented by TLS (HTTPS) servers. This may change exactly which root certificates Terraform will accept as valid. (link)
The AzureRM Backend now defaults to using MSAL (and Microsoft Graph) rather than ADAL (and Azure Active Directory Graph) for authentication. (link)
The AzureRM Backend now supports authenticating as a service principal using OpenID Connect. (link)
Show remote host in error message for clarity when installation of provider fails (link)
Terraform now prints a warning when adding an attribute to module that is managed only by the provider (non-optional computed attribute). (link)
JSON plan and state output now includes exact type representations for output values. (link)
The module provisioner connection now supports SSH over HTTP proxy. (link)

BUG FIXES:

Terraform now handles type constraints, nullability, and custom variable validation properly for root module variables. Previously there was an order of operations problem where the nullability and custom variable validation were checked too early, prior to dealing with the type constraints, and thus that logic could potentially ""see"" an incorrectly-typed value in spite of the type constraint, leading to incorrect errors. (link)
Applying the various type conversion functions like module, module, etc to module will now return a null value of the intended type. For example, module converts from a null value of an unknown type to a null value of string type. Terraform can often handle such conversions automatically when needed, but explicit annotations like this can help Terraform to understand author intent when inferring type conversions for complex-typed values. (link)
When reporting a type mismatch between the true and false results of a conditional expression when both results are of the same structural type kind (object/tuple, or a collection thereof), Terraform will no longer return a confusing message like ""the types are object and object, respectively"", and will instead attempt to explain how the two structural types differ. (link)
Terraform now outputs an error when module is called with an IPv6 address, as it was previously documented to do. (link)
When performing advanced state management with the module commands, Terraform now checks the module field in the configuration before proceeding. (link)
When rendering a diff, Terraform now quotes the name of any object attribute whose string representation is not a valid identifier. (link)
Terraform will prioritize local terraform variables over remote terraform variables in operations such as module, module, module and module for workspaces in local execution mode. This behavior applies to both module backend and the module integration configuration. (link)
module: JSON plan output now correctly maps aliased providers to their configurations, and includes the full provider source address alongside the short provider name. (link)
The local token configuration in the module and module backend now has higher priority than the token specified in a CLI configuration. (link) 
The module integration now gracefully exits when module and an operation requires some user input.
The ssh client for provisioners is updated to use newer key algorithms, allowing it to connect to more recent versions of openssh servers (link)
A cancellation in the CLI may not be caught when using module, causing unintended changes to be applied (link)
A provider failing to return a schema could result in a panic (link)
"
43,"1.2.0-rc1 (Unreleased)
UPGRADE NOTES:

The official Linux packages for the v1.2 series now require Linux kernel version 2.6.32 or later.
When making outgoing HTTPS or other TLS connections as a client, Terraform now requires the server to support TLS v1.2. TLS v1.0 and v1.1 are no longer supported. Any safely up-to-date server should support TLS 1.2, and mainstream web browsers have required it since 2020.

When making outgoing HTTPS or other TLS connections as a client, Terraform will no longer accept CA certificates signed using the SHA-1 hash function. Publicly trusted Certificate Authorities have not issued SHA-1 certificates since 2015.
(Note: the changes to Terraform's requirements when interacting with TLS servers apply only to requests made by Terraform CLI itself, such as provider/module installation and state storage requests. Terraform provider plugins include their own TLS clients which may have different requirements, and may add new requirements in their own releases, independently of Terraform CLI changes.)
* If you use the link, you should disable it as part of upgrading to Terraform v1.2 because similar functionality is now built in to Terraform itself.
The new behavior supports the same environment variable naming scheme but has a difference in priority order from the credentials helper: module environment variables will now take priority over credentials blocks in CLI configuration and credentials stored automatically by terraform login, which is not true for credentials provided by any credentials helper plugin. If you see Terraform using different credentials after upgrading, check to make sure you do not specify credentials for the same host in multiple locations.
If you use the credentials helper in conjunction with the link Terraform provider to manage Terraform Cloud or Terraform Enterprise objects with Terraform, you should also upgrade to version 0.31 of that provider, which added the corresponding built-in support for these environment variables.


NEW FEATURES:

module and module check blocks for resources, data sources, and module output values: module authors can now document assumptions and assertions about configuration and state values. If these conditions are not met, Terraform will report a custom error message to the user and halt further evaluation.
You may specify remote network service credentials using an environment variable named after the host name with a module prefix. For example, the value of a variable named module will be used as a bearer authorization token when the CLI makes service requests to the host name ""app.terraform.io"".
module is a new module argument which allows one to configure the replacement of a resource based on changes in a dependency.

ENHANCEMENTS:

The ""Invalid for_each argument"" error message for unknown maps/sets now includes an additional paragraph to try to help the user notice they can move apply-time values into the map values instead of the map keys, and thus avoid the problem without resorting to module. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about post-plan link. (link)
Error messages for preconditions, postconditions, and custom variable validations are now evaluated as expressions, allowing interpolation of relevant values into the output. (link)
There are some small improvements to the error and warning messages Terraform will emit in the case of invalid provider configuration passing between modules. There are no changes to which situations will produce errors and warnings, but the messages now include additional information intended to clarify what problem Terraform is describing and how to address it. (link)
When running module, only show external changes which may have contributed to the current plan (link)
Add module environment variable fallback for module in the cloud configuration
Add module environment variable fallback for module in the cloud configuration
module can now be used to configure the module attribute in your cloud configuration
When running on macOS, Terraform will now use platform APIs to validate certificates presented by TLS (HTTPS) servers. This may change exactly which root certificates Terraform will accept as valid. (link)
The AzureRM Backend now defaults to using MSAL (and Microsoft Graph) rather than ADAL (and Azure Active Directory Graph) for authentication. (link)
The AzureRM Backend now supports authenticating as a service principal using OpenID Connect. (link)
Show remote host in error message for clarity when installation of provider fails (link)
Terraform now prints a warning when adding an attribute to module that is managed only by the provider (non-optional computed attribute). (link)
JSON plan and state output now includes exact type representations for output values. (link)
The module provisioner connection now supports SSH over HTTP proxy. (link)

BUG FIXES:

Terraform now handles type constraints, nullability, and custom variable validation properly for root module variables. Previously there was an order of operations problem where the nullability and custom variable validation were checked too early, prior to dealing with the type constraints, and thus that logic could potentially ""see"" an incorrectly-typed value in spite of the type constraint, leading to incorrect errors. (link)
Applying the various type conversion functions like module, module, etc to module will now return a null value of the intended type. For example, module converts from a null value of an unknown type to a null value of string type. Terraform can often handle such conversions automatically when needed, but explicit annotations like this can help Terraform to understand author intent when inferring type conversions for complex-typed values. (link)
When reporting a type mismatch between the true and false results of a conditional expression when both results are of the same structural type kind (object/tuple, or a collection thereof), Terraform will no longer return a confusing message like ""the types are object and object, respectively"", and will instead attempt to explain how the two structural types differ. (link)
Terraform now outputs an error when module is called with an IPv6 address, as it was previously documented to do. (link)
When performing advanced state management with the module commands, Terraform now checks the module field in the configuration before proceeding. (link)
When rendering a diff, Terraform now quotes the name of any object attribute whose string representation is not a valid identifier. (link)
Terraform will prioritize local terraform variables over remote terraform variables in operations such as module, module, module and module for workspaces in local execution mode. This behavior applies to both module backend and the module integration configuration. (link)
module: JSON plan output now correctly maps aliased providers to their configurations, and includes the full provider source address alongside the short provider name. (link)
The local token configuration in the module and module backend now has higher priority than the token specified in a CLI configuration. (link) 
The module integration now gracefully exits when module and an operation requires some user input.
The ssh client for provisioners is updated to use newer key algorithms, allowing it to connect to more recent versions of openssh servers (link)
A cancellation in the CLI may not be caught when using module, causing unintended changes to be applied (link)
A provider failing to return a schema could result in a panic (link)
"
44,"1.2.0 (Unreleased)
UPGRADE NOTES:

The official Linux packages for the v1.2 series now require Linux kernel version 2.6.32 or later.
When making outgoing HTTPS or other TLS connections as a client, Terraform now requires the server to support TLS v1.2. TLS v1.0 and v1.1 are no longer supported. Any safely up-to-date server should support TLS 1.2, and mainstream web browsers have required it since 2020.

When making outgoing HTTPS or other TLS connections as a client, Terraform will no longer accept CA certificates signed using the SHA-1 hash function. Publicly trusted Certificate Authorities have not issued SHA-1 certificates since 2015.
(Note: the changes to Terraform's requirements when interacting with TLS servers apply only to requests made by Terraform CLI itself, such as provider/module installation and state storage requests. Terraform provider plugins include their own TLS clients which may have different requirements, and may add new requirements in their own releases, independently of Terraform CLI changes.)
* If you use the link, you should disable it as part of upgrading to Terraform v1.2 because similar functionality is now built in to Terraform itself.
The new behavior supports the same environment variable naming scheme but has a difference in priority order from the credentials helper: module environment variables will now take priority over credentials blocks in CLI configuration and credentials stored automatically by terraform login, which is not true for credentials provided by any credentials helper plugin. If you see Terraform using different credentials after upgrading, check to make sure you do not specify credentials for the same host in multiple locations.
If you use the credentials helper in conjunction with the link Terraform provider to manage Terraform Cloud or Terraform Enterprise objects with Terraform, you should also upgrade to version 0.31 of that provider, which added the corresponding built-in support for these environment variables.


NEW FEATURES:

module and module check blocks for resources, data sources, and module output values: module authors can now document assumptions and assertions about configuration and state values. If these conditions are not met, Terraform will report a custom error message to the user and halt further evaluation.
You may specify remote network service credentials using an environment variable named after the host name with a module prefix. For example, the value of a variable named module will be used as a bearer authorization token when the CLI makes service requests to the host name ""app.terraform.io"".
module is a new module argument which allows one to configure the replacement of a resource based on changes in a dependency.

ENHANCEMENTS:

The ""Invalid for_each argument"" error message for unknown maps/sets now includes an additional paragraph to try to help the user notice they can move apply-time values into the map values instead of the map keys, and thus avoid the problem without resorting to module. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about post-plan link. (link)
Error messages for preconditions, postconditions, and custom variable validations are now evaluated as expressions, allowing interpolation of relevant values into the output. (link)
There are some small improvements to the error and warning messages Terraform will emit in the case of invalid provider configuration passing between modules. There are no changes to which situations will produce errors and warnings, but the messages now include additional information intended to clarify what problem Terraform is describing and how to address it. (link)
When running module, only show external changes which may have contributed to the current plan (link)
Add module environment variable fallback for module in the cloud configuration
Add module environment variable fallback for module in the cloud configuration
module can now be used to configure the module attribute in your cloud configuration
When running on macOS, Terraform will now use platform APIs to validate certificates presented by TLS (HTTPS) servers. This may change exactly which root certificates Terraform will accept as valid. (link)
The AzureRM Backend now defaults to using MSAL (and Microsoft Graph) rather than ADAL (and Azure Active Directory Graph) for authentication. (link)
The AzureRM Backend now supports authenticating as a service principal using OpenID Connect. (link)
Show remote host in error message for clarity when installation of provider fails (link)
Terraform now prints a warning when adding an attribute to module that is managed only by the provider (non-optional computed attribute). (link)
JSON plan and state output now includes exact type representations for output values. (link)

BUG FIXES:

Terraform now handles type constraints, nullability, and custom variable validation properly for root module variables. Previously there was an order of operations problem where the nullability and custom variable validation were checked too early, prior to dealing with the type constraints, and thus that logic could potentially ""see"" an incorrectly-typed value in spite of the type constraint, leading to incorrect errors. (link)
Applying the various type conversion functions like module, module, etc to module will now return a null value of the intended type. For example, module converts from a null value of an unknown type to a null value of string type. Terraform can often handle such conversions automatically when needed, but explicit annotations like this can help Terraform to understand author intent when inferring type conversions for complex-typed values. (link)
When reporting a type mismatch between the true and false results of a conditional expression when both results are of the same structural type kind (object/tuple, or a collection thereof), Terraform will no longer return a confusing message like ""the types are object and object, respectively"", and will instead attempt to explain how the two structural types differ. (link)
Terraform now outputs an error when module is called with an IPv6 address, as it was previously documented to do. (link)
When performing advanced state management with the module commands, Terraform now checks the module field in the configuration before proceeding. (link)
When rendering a diff, Terraform now quotes the name of any object attribute whose string representation is not a valid identifier. (link)
Terraform will prioritize local terraform variables over remote terraform variables in operations such as module, module, module and module for workspaces in local execution mode. This behavior applies to both module backend and the module integration configuration. (link)
module: JSON plan output now correctly maps aliased providers to their configurations, and includes the full provider source address alongside the short provider name. (link)
The local token configuration in the module and module backend now has higher priority than the token specified in a CLI configuration. (link) 
The module integration now gracefully exits when module and an operation requires some user input.
"
45,"1.1.9 (April 20, 2022)
BUG FIXES:

cli: Fix crash when using sensitive values in sets. (link)
cli: Fix double-quoted map keys when rendering a diff. (link)
core: Prevent errors when handling a data source with incompatible schema changes (link)

ENHANCEMENTS:
* cli: Terraform now supports link, a Terraform Cloud integration for executing remote operations, for the post plan stage of a run."
46,"1.2.0 (Unreleased)
UPGRADE NOTES:

The official Linux packages for the v1.2 series now require Linux kernel version 2.6.32 or later.
When making outgoing HTTPS or other TLS connections as a client, Terraform now requires the server to support TLS v1.2. TLS v1.0 and v1.1 are no longer supported. Any safely up-to-date server should support TLS 1.2, and mainstream web browsers have required it since 2020.
When making outgoing HTTPS or other TLS connections as a client, Terraform will no longer accept CA certificates signed using the SHA-1 hash function. Publicly trusted Certificate Authorities have not issued SHA-1 certificates since 2015.

(Note: the changes to Terraform's requirements when interacting with TLS servers apply only to requests made by Terraform CLI itself, such as provider/module installation and state storage requests. Terraform provider plugins include their own TLS clients which may have different requirements, and may add new requirements in their own releases, independently of Terraform CLI changes.)
NEW FEATURES:

module and module check blocks for resources, data sources, and module output values: module authors can now document assumptions and assertions about configuration and state values. If these conditions are not met, Terraform will report a custom error message to the user and halt further evaluation.
Terraform now supports link, a Terraform Cloud integration for executing remote operations, for the post plan stage of a run.

ENHANCEMENTS:

The ""Invalid for_each argument"" error message for unknown maps/sets now includes an additional paragraph to try to help the user notice they can move apply-time values into the map values instead of the map keys, and thus avoid the problem without resorting to module. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about post-plan link. (link)
Error messages for preconditions, postconditions, and custom variable validations are now evaluated as expressions, allowing interpolation of relevant values into the output. (link)
There are some small improvements to the error and warning messages Terraform will emit in the case of invalid provider configuration passing between modules. There are no changes to which situations will produce errors and warnings, but the messages now include additional information intended to clarify what problem Terraform is describing and how to address it. (link)
When running module, only show external changes which may have contributed to the current plan (link)
Add module environment variable fallback for module in the cloud configuration
Add module environment variable fallback for module in the cloud configuration
When running on macOS, Terraform will now use platform APIs to validate certificates presented by TLS (HTTPS) servers. This may change exactly which root certificates Terraform will accept as valid. (link)

BUG FIXES:

Terraform now handles type constraints, nullability, and custom variable validation properly for root module variables. Previously there was an order of operations problem where the nullability and custom variable validation were checked too early, prior to dealing with the type constraints, and thus that logic could potentially ""see"" an incorrectly-typed value in spite of the type constraint, leading to incorrect errors. (link)
module: JSON plan output now correctly maps aliased providers to their configurations, and includes the full provider source address alongside the short provider name. (link)
Terraform now prints a warning when adding an attribute to module that is managed only by the provider (non-optional computed attribute). (link)
Terraform will prioritize local terraform variables over remote terraform variables in operations such as module, module, module and module for workspaces in local execution mode. This behavior applies to both module backend and the module integration configuration. (link)
Terraform now outputs an error when module is called with an IPv6 address. (link)
When performing advanced state management with the module commands, Terraform now checks the module field in the configuration before proceeding. (link)
When rendering a diff, Terraform now quotes the name of any object attribute whose string representation is not a valid identifier. (link)

UPGRADE NOTES:

The Terraform Cloud integration relies on the Go-TFE SDK. Terraform has upgraded this dependency to use its new major version 1.0 [link]. link.
"
47,"1.1.8 (April 07, 2022)
BUG FIXES:

cli: Fix missing identifying attributes (e.g. ""id"", ""name"") when displaying plan diffs with nested objects. (link)
functions: Fix error when module function is called with a collection of string-encoded numbers, such as module. (link)
When rendering a diff, Terraform now quotes the name of any object attribute whose string representation is not a valid identifier. (link)
Terraform will no longer crash in the module phase if an error occurs during backend configuration. (link)
"
48,"1.2.0 (Unreleased)
NEW FEATURES:

module and module check blocks for resources, data sources, and module output values: module authors can now document assumptions and assertions about configuration and state values. If these conditions are not met, Terraform will report a custom error message to the user and halt further evaluation.
Terraform now supports link, a Terraform Cloud integration for executing remote operations, for the post plan stage of a run.

ENHANCEMENTS:

The ""Invalid for_each argument"" error message for unknown maps/sets now includes an additional paragraph to try to help the user notice they can move apply-time values into the map values instead of the map keys, and thus avoid the problem without resorting to module. (link)
When showing the progress of a remote operation running in Terraform Cloud, Terraform CLI will include information about post-plan link. (link)
Error messages for preconditions, postconditions, and custom variable validations are now evaluated as expressions, allowing interpolation of relevant values into the output. (link)
There are some small improvements to the error and warning messages Terraform will emit in the case of invalid provider configuration passing between modules. There are no changes to which situations will produce errors and warnings, but the messages now include additional information intended to clarify what problem Terraform is describing and how to address it. (link)
When running module, only show external changes which may have contributed to the current plan (link)

BUG FIXES:

Terraform now handles type constraints, nullability, and custom variable validation properly for root module variables. Previously there was an order of operations problem where the nullability and custom variable validation were checked too early, prior to dealing with the type constraints, and thus that logic could potentially ""see"" an incorrectly-typed value in spite of the type constraint, leading to incorrect errors. (link)
module: JSON plan output now correctly maps aliased providers to their configurations, and includes the full provider source address alongside the short provider name. (link)
Terraform now prints a warning when adding an attribute to module that is managed only by the provider (non-optional computed attribute). (link)
Terraform will prioritize local terraform variables over remote terraform variables in operations such as module, module, module and module for workspaces in local execution mode. This behavior applies to both module backend and the module integration configuration. (link)
Terraform now outputs an error when module is called with an IPv6 address. (link)

UPGRADE NOTES:

The Terraform Cloud integration relies on the Go-TFE SDK. Terraform has upgraded this dependency to use its new major version 1.0 [link]. link.
"
49,"1.1.7 (March 02, 2022)
BUG FIXES:

module: Improve performance for deeply-nested object values. The previous implementation was accidentally quadratic, which could result in very long execution time for generating JSON plans, and timeouts on Terraform Cloud and Terraform Enterprise. (link)
cloud: Update go-slug for terraform.tfstate exclusion to prevent a user from getting an error
    after migrating state to TFC.
"
50,"1.1.6 (February 16, 2022)
BUG FIXES:

cli: Prevent complex uses of the console-only module function. This function may only be used at the top level of console expressions, to display the type of a given value. Attempting to use this function in complex expressions will now display a diagnostic error instead of crashing. (link)
module: Will now correctly exit with error code module when the specified resources cannot be found in state. Previously Terraform would display appropriate diagnostic errors, but exit successfully. (link)
"
51,"1.1.5 (February 02, 2022)
ENHANCEMENTS:

backend/s3: Update AWS SDK to allow the use of the ap-southeast-3 region (link)

BUG FIXES:

cli: Fix crash when using autocomplete with long commands, such as module (link)
"
52,"1.1.4 (January 19, 2022)
BUG FIXES:

config: Non-nullable variables with null inputs were not given default values when checking validation statements (link)
config: Terraform will no longer incorrectly report ""Cross-package move statement"" when an external package has changed a resource from no module to using module, or vice-versa. (link)
"
53,"1.1.3 (January 06, 2022)
BUG FIXES:

module: Will now remove from link entries for providers not used in the current configuration. Previously it would leave formerly-used providers behind in the lock file, leading to ""missing or corrupted provider plugins"" errors when other commands verified the consistency of the installed plugins against the locked plugins. (link)
config: Fix panic when encountering an invalid provider block within a module (link)
config: Fix cycle error when the index of a module containing move statements is changed (link)
config: Fix inconsistent ordering with nested move operations (link)
config: Fix module block refactoring to include nested modules (link)
functions: Redact sensitive values from function call error messages (link)
module: Disable plan state lineage checks, ensuring that we can show plan files which were generated against non-default state files (link)
"
54,"1.1.2 (December 17, 2021)
If you are using Terraform CLI v1.1.0 or v1.1.1, please upgrade to this new version as soon as possible.
Terraform CLI v1.1.0 and v1.1.1 both have a bug where a failure to construct the apply-time graph can cause Terraform to incorrectly report success and save an empty state, effectively ""forgetting"" all existing infrastructure. Although configurations that already worked on previous releases should not encounter this problem, it's possible that incorrect future configuration changes would trigger this behavior during the apply step.
BUG FIXES:

config: Fix panic when using module in combination with module blocks within modules (link)
core: Fix condition which could lead to an empty state being written when there is a failure building the apply graph (link)
"
55,"1.1.1 (December 15, 2021)
If you are using Terraform CLI v1.1.0 or v1.1.1, please upgrade to the latest version as soon as possible.
Terraform CLI v1.1.0 and v1.1.1 both have a bug where a failure to construct the apply-time graph can cause Terraform to incorrectly report success and save an empty state, effectively ""forgetting"" all existing infrastructure. Although configurations that already worked on previous releases should not encounter this problem, it's possible that incorrect future configuration changes would trigger this behavior during the apply step.

BUG FIXES:

core: Fix crash with orphaned module instance due to changed module or module value (link)
core: Fix regression where some expressions failed during validation when referencing resources expanded with module or module (link)
"
56,"1.1.0 (December 08, 2021)
If you are using Terraform CLI v1.1.0 or v1.1.1, please upgrade to the latest version as soon as possible.
Terraform CLI v1.1.0 and v1.1.1 both have a bug where a failure to construct the apply-time graph can cause Terraform to incorrectly report success and save an empty state, effectively ""forgetting"" all existing infrastructure. Although configurations that already worked on previous releases should not encounter this problem, it's possible that incorrect future configuration changes would trigger this behavior during the apply step.

Terraform v1.1.0 is a new minor release, containing some new features and some bug fixes whose scope was too large for inclusion in a patch release.
NEW FEATURES:


module blocks for refactoring within modules: Module authors can now record in module source code whenever they've changed the address of a resource or resource instance, and then during planning Terraform will automatically migrate existing objects in the state to new addresses.
This therefore avoids the need for users of a shared module to manually run module after upgrading to a version of the module, as long as the change is expressible as static configuration. However, module will remain available for use in more complex migration situations that are not well-suited to declarative configuration.
* A new module block in the module settings block introduces a native Terraform Cloud integration for the link.
The Cloud integration includes several enhancements, including per-run variable support using the module flag, the ability to map Terraform Cloud workspaces to the current configuration via link, and an improved user experience for Terraform Cloud and Enterprise users with actionable error messages and prompts.
* module and module both now include additional annotations for resource instances planned for deletion to explain why Terraform has proposed that action.
For example, if you change the module argument for a resource to a lower number then Terraform will now mention that as part of proposing to destroy any existing objects that exceed the new count.


UPGRADE NOTES:
This release is covered by the link, but does include some changes permitted within those promises as described below.

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.
* module will now error when legacy module or module options are used without the module option on non-local backends. These options operate on a local state file only. Previously, these options were accepted but ignored silently when used with non-local backends. 
* In the AzureRM backend, the new opt-in option module switches to using MSAL authentication tokens and Microsoft Graph rather than using ADAL tokens and Azure Active Directory Graph, which is now link. The new mode will become the default in Terraform v1.2, so please plan to migrate to using this setting and test with your own Azure AD tenant prior to the Terraform v1.2 release.


ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
config: Variables can now be declared as ""nullable"", which defines whether a variable can be null within a module. Setting module ensures that a variable value will never be module, and may instead take on the variable's default value if the caller sets it explicitly to module. (link)
module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
module and module: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)
module: will now allow deleting a workspace whose state contains only data resource instances and output values, without running module first. Previously the presence of data resources would require using module to override the safety check guarding against accidentally forgetting about remote objects, but a data resource is not responsible for the management of its associated remote object(s) and so there's no reason to require explicit deletion. (link)
module: Terraform now uses precise type information for resources during config validation, allowing more problems to be caught that that step rather than only during the planning step. (link)
provisioner/remote-exec and provisioner/file: When using SSH agent authentication mode on Windows, Terraform can now detect and use link's SSH Agent, when available, in addition to the existing support for the third-party solution link that was already supported. (link)
cli: module will now return an error for module or module options used without the module option, unless the working directory is initialized to use the local backend. Previously Terraform would silently ignore those options, since they are applicable only to the local backend. (link)
module: now has a new module function, available only in the interactive console, for inspecting the exact type of a particular value as an aid to debugging. (link)

BUG FIXES:

config: module now works in override files. (link)
config: Upgrading an unknown single value to a list using a splat expression now correctly returns an unknown value and type. Previously it would sometimes ""overpromise"" a particular return type, leading to an inconsistency error during the apply step. (link)
config: Terraform is now more precise in its detection of data resources that must be deferred to the apply step due to their module arguments referring to not-yet-converged managed resources. (link)
config: module can no longer cause a null map to be converted to an empty map, which would otherwise potentially cause surprising side-effects in provider logic. (link)
core: Provider configuration obtained from interactive prompts will now be merged properly with settings given in the configuration. Previously this merging was incorrect in some cases. (link)
module: Improved rendering of changes inside attributes that accept lists, sets, or maps of nested object types. (link, link, link)
module: Will no longer try to apply a stale plan that was generated against an originally-empty state. Previously this was an unintended exception to the rule that a plan can only be applied to the state snapshot it was generated against. (link)
module: Attributes that are declared as using the legacy link behavior are now represented more faithfully in the JSON plan output. (link)
module: Will now update the backend configuration hash value at a more approprimate time, to ensure properly restarting a backend migration process that failed on the first attempt. (link)
backend/oss: Flatten module block arguments, so that they are more compatible with the module data source. (link)
"
57,"1.1.0-rc1 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.
* module will now error when legacy module or module options are used without the module option on non-local backends. These options operate on a local state file only. Previously, these options were accepted but ignored silently when used with non-local backends. 
* backend/azurerm: a new opt-in flag module is available which switches to using MSAL authentication tokens and Microsoft Graph rather than using ADAL tokens and Azure Active Directory Graph which is now link. This functionality is disabled by default but will be enabled by default in a future version of Terraform. We encourage you to configure and test this setting with your own Azure AD tenant prior to Terraform 1.2. (link)


NEW FEATURES:


module blocks for refactoring within modules: Module authors can now record in module source code whenever they've changed the address of a resource or resource instance, and then during planning Terraform will automatically migrate existing objects in the state to new addresses.
This therefore avoids the need for module users to manually run module after upgrading to a newer module version, as long as the change is expressible as static configuration. However, module remains available for use in more complex migration situations that are not well-suited to declarative configuration.
* A new module option in the module settings block adds a more native integration for Terraform Cloud and its link. The Cloud integration includes several enhancements, including per-run variable support using the module flag, the ability to map Terraform Cloud workspaces to the current configuration via link, and an improved user experience for Terraform Cloud/Enterprise users with actionable error messages and prompts. (link)
* module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
* module and module: When Terraform automatically moves a singleton resource instance to index zero or vice-versa in response to adding or removing module, it'll report explicitly that it did so as part of the plan output. (link)
* config: a new module function, available only in module. (link)


ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
config: A new variable attribute module, which defines whether a variable can be null within a module. Setting module to module ensures that a variable value will not be module, and that a non-null default is used when module is given as a module argument (link)
module and module: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)
module: will now allow deleting a workspace whose state contains only data resource instances and output values, without running module first. Previously the presence of data resources would require using module to override the safety check guarding against accidentally forgetting about remote objects, but a data resource is not responsible for the management of its associated remote object(s) anyway. (link)
provisioner/remote-exec and provisioner/file: When using SSH agent authentication mode on Windows, Terraform can now detect and use link's SSH Agent, when available, in addition to the existing support for the third-party solution link that was already supported. (link)
cli: module will now error when legacy module or module options are used without the module option on non-local backends (link)

BUG FIXES:

backend/oss: Flatten module block attributes, so that they may be more easily represented in a compatible way with module (link)
config: Fixed a bug in which module would not work in override files (link)
config: Upgrading an unknown single value to a list using a splat expression must return an unknown value and type (link)
core: Use more precise typing information of resources during config validation (link)
core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
core: Reduce scope of dependencies that may defer reading of data sources when using module or directly referencing managed resources (link)
core: module could cause a null map to be converted to an empty map (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
cli: Prevent applying a stale planfile when there was no previous state (link)
cli: Improve list nested attribute rendering (link)
cli: Improve set nested attribute rendering (link)
cli: Improve map and single nested attribute rendering (link)
command: Fixed an issue where the backend cache hash value was being updated too early in backend initialization/migrate flows, causing situations where module would not properly restart a backend migration process if that process failed previously. (link)
"
58,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.
* module will now error when legacy module or module options are used without the module option on non-local backends. These options operate on a local state file only. Previously, these options were accepted but ignored silently when used with non-local backends. 
* backend/azurerm: a new opt-in flag module is available which switches to using MSAL authentication tokens and Microsoft Graph rather than using ADAL tokens and Azure Active Directory Graph which is now link. This functionality is disabled by default but will be enabled by default in a future version of Terraform. We encourage you to configure and test this setting with your own Azure AD tenant prior to Terraform 1.2. (link)


NEW FEATURES:


module blocks for refactoring within modules: Module authors can now record in module source code whenever they've changed the address of a resource or resource instance, and then during planning Terraform will automatically migrate existing objects in the state to new addresses.
This therefore avoids the need for module users to manually run module after upgrading to a newer module version, as long as the change is expressible as static configuration. However, module remains available for use in more complex migration situations that are not well-suited to declarative configuration.
* A new module option in the module settings block adds a more native integration for Terraform Cloud and its link. The Cloud integration includes several enhancements, including per-run variable support using the module flag, the ability to map Terraform Cloud workspaces to the current configuration via link, and an improved user experience for Terraform Cloud/Enterprise users with actionable error messages and prompts. (link)
* module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
* module and module: When Terraform automatically moves a singleton resource instance to index zero or vice-versa in response to adding or removing module, it'll report explicitly that it did so as part of the plan output. (link)
* config: a new module function, available only in module. (link)


ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
config: A new variable attribute module, which defines whether a variable can be null within a module. Setting module to module ensures that a variable value will not be module, and that a non-null default is used when module is given as a module argument (link)
module and module: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)
module: will now allow deleting a workspace whose state contains only data resource instances and output values, without running module first. Previously the presence of data resources would require using module to override the safety check guarding against accidentally forgetting about remote objects, but a data resource is not responsible for the management of its associated remote object(s) anyway. (link)
provisioner/remote-exec and provisioner/file: When using SSH agent authentication mode on Windows, Terraform can now detect and use link's SSH Agent, when available, in addition to the existing support for the third-party solution link that was already supported. (link)
cli: module will now error when legacy module or module options are used without the module option on non-local backends (link)

BUG FIXES:

backend/oss: Flatten module block attributes, so that they may be more easily represented in a compatible way with module (link)
config: Fixed a bug in which module would not work in override files (link)
core: Use more precise typing information of resources during config validation (link)
core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
core: Reduce scope of dependencies that may defer reading of data sources when using module or directly referencing managed resources (link)
core: module could cause a null map to be converted to an empty map (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
cli: Prevent applying a stale planfile when there was no previous state (link)
cli: Improve list nested attribute rendering (link)
command: Fixed an issue where the backend cache hash value was being updated too early in backend initialization/migrate flows, causing situations where module would not properly restart a backend migration process if that process failed previously. (link)
"
59,"1.0.11 (November 10, 2021)
ENHANCEMENTS:

backend/oss: Added support for module (link)

BUG FIXES:

config: Fixed a bug in which module would not work in override files (link)
config: Numbers are now compared for equality based on their protocol representation, eliminating unexpected changes due to small precision errors (link)
"
60,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.


NEW FEATURES:


module blocks for refactoring within modules: Module authors can now record in module source code whenever they've changed the address of a resource or resource instance, and then during planning Terraform will automatically migrate existing objects in the state to new addresses.
This therefore avoids the need for module users to manually run module after upgrading to a newer module version, as long as the change is expressible as static configuration. However, module remains available for use in more complex migration situations that are not well-suited to declarative configuration.
* A new module option in the module settings block adds a more native integration for Terraform Cloud and its link. The Cloud integration includes several enhancements, including per-run variable support using the module flag, the ability to map Terraform Cloud workspaces to the current configuration via link, and an improved user experience for Terraform Cloud/Enterprise users with actionable error messages and prompts. (link)
* module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
* module and module: When Terraform automatically moves a singleton resource instance to index zero or vice-versa in response to adding or removing module, it'll report explicitly that it did so as part of the plan output. (link)
* config: a new module function, available only in module. (link)


ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
config: A new variable attribute module, which defines whether a variable can be null within a module. Setting module to module ensures that a variable value will not be module, and that a non-null default is used when module is given as a module argument (link)
module and module: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)
module: will now allow deleting a workspace whose state contains only data resource instances and output values, without running module first. Previously the presence of data resources would require using module to override the safety check guarding against accidentally forgetting about remote objects, but a data resource is not responsible for the management of its associated remote object(s) anyway. (link)
provisioner/remote-exec and provisioner/file: When using SSH agent authentication mode on Windows, Terraform can now detect and use link's SSH Agent, when available, in addition to the existing support for the third-party solution link that was already supported. (link)

BUG FIXES:

backend/oss: Flatten module block attributes, so that they may be more easily represented in a compatible way with module (link)
config: Fixed a bug in which module would not work in override files (link)
core: Use more precise typing information of resources during config validation (link)
core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
core: Reduce scope of dependencies that may defer reading of data sources when using module or directly referencing managed resources (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
cli: Prevent applying a stale planfile when there was no previous state (link)
cli: Improve list nested attribute rendering (link)
command: Fixed an issue where the backend cache hash value was being updated too early in backend initialization/migrate flows, causing situations where module would not properly restart a backend migration process if that process failed previously. (link)
"
61,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.


NEW FEATURES:

A new module option in the module settings block adds a more native integration for Terraform Cloud and its link. The Cloud integration includes several enhancements, including per-run variable support using the module flag, the ability to map Terraform Cloud workspaces to the current configuration via link, and an improved user experience for Terraform Cloud/Enterprise users with actionable error messages and prompts. (link)
module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
module and module: When Terraform automatically moves a singleton resource instance to index zero or vice-versa in response to adding or removing module, it'll report explicitly that it did so as part of the plan output. (link)
config: a new module function, available only in module. (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
module and module: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)
module: will now allow deleting a workspace whose state contains only data resource instances and output values, without running module first. Previously the presence of data resources would require using module to override the safety check guarding against accidentally forgetting about remote objects, but a data resource is not responsible for the management of its associated remote object(s) anyway. (link)
provisioner/remote-exec and provisioner/file: When using SSH agent authentication mode on Windows, Terraform can now detect and use link's SSH Agent, when available, in addition to the existing support for the third-party solution link that was already supported. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
core: Reduce scope of dependencies that may defer reading of data sources when using module or directly referencing managed resources (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
cli: Prevent applying a stale planfile when there was no previous state (link)
"
62,"1.0.10 (October 28, 2021)
BUG FIXES:

backend/oss: Fix panic when there's an error looking up OSS endpoints (link)
backend/remote: Fix version check when migrating state (link)
cli: Restore module and module flags for the module command, which were removed in 0.15.0 (link)
cli: Fix bug where module would hang waiting for user input to choose a workspace (link)
"
63,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.
* Earlier v1.1 alpha releases had an experimental new command module. We've removed that feature and plan to reconsider it before offering an alternative in a later release.


NEW FEATURES:

module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
module and module: When Terraform automatically moves a singleton resource instance to index zero or vice-versa in response to adding or removing module, it'll report explicitly that it did so as part of the plan output. (link)
config: a new module function, available only in module. (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
module and module: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)
module: will now allow deleting a workspace whose state contains only data resource instances and output values, without running module first. Previously the presence of data resources would require using module to override the safety check guarding against accidentally forgetting about remote objects, but a data resource is not responsible for the management of its associated remote object(s) anyway. (link)
provisioner/remote-exec and provisioner/file: When using SSH agent authentication mode on Windows, Terraform can now detect and use link's SSH Agent, when available, in addition to the existing support for the third-party solution link that was already supported. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
core: Reduce scope of dependencies that may defer reading of data sources when using module or directly referencing managed resources (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
cli: Prevent applying a stale planfile when there was no previous state (link)
"
64,"1.0.9 (October 13, 2021)
BUG FIXES:

core: Fix panic when planning new resources with nested object attributes (link)
core: Do not refresh deposed instances when the provider is not configured during destroy (link)
core: Prevent panic when encountering a missing change when destroying a resource (link)
"
65,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

module with a previously-saved plan file will now verify that the provider plugin packages used to create the plan fully match the ones used during apply, using the same checksum scheme that Terraform normally uses for the dependency lock file. Previously Terraform was checking consistency of plugins from a plan file using a legacy mechanism which covered only the main plugin executable, not any other files that might be distributed alongside in the plugin package.
This additional check should not affect typical plugins that conform to the expectation that a plugin package's contents are immutable once released, but may affect a hypothetical in-house plugin that intentionally modifies extra files in its package directory somehow between plan and apply. If you have such a plugin, you'll need to change its approach to store those files in some other location separate from the package directory. This is a minor compatibility break motivated by increasing the assurance that plugins have not been inadvertently or maliciously modified between plan and apply.


NEW FEATURES:

module and module: When Terraform plans to destroy a resource instance due to it no longer being declared in the configuration, the proposed plan output will now include a note hinting at what situation prompted that proposal, so you can more easily see what configuration change might avoid the object being destroyed. (link)
module and module: When Terraform automatically moves a singleton resource instance to index zero or vice-versa in response to adding or removing module, it'll report explicitly that it did so as part of the plan output. (link)
module: The (currently-experimental) module generates a starting point for a particular resource configuration. (link)
config: a new module function, available only in module. (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
cli: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
"
66,"1.0.8 (September 29, 2021)
BUG FIXES:

cli: Check module as early as possibly during module so that version incompatibility can be reported before errors about new syntax (link)
core: Don't plan to remove orphaned resource instances in refresh-only plans (link)
"
67,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

NEW FEATURES:

cli: The (currently-experimental) module generates a starting point for a particular resource configuration. (link)
config: a new module function, only available in module (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
cli: Terraform will now report explicitly in the UI if it automatically moves a resource instance to a new address as a result of adding or removing the module argument from an existing resource. For example, if you previously had module without module, you might have module already bound to a remote object in your state. If you add module to that resource then Terraform would previously silently rebind the object to module as part of planning, whereas now Terraform will mention that it did so explicitly in the plan description. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
"
68,"1.0.7 (September 15, 2021)
BUG FIXES:

core: Remove check for computed attributes which is no longer valid with optional structural attributes (link)
core: Prevent object types with optional attributes from being instantiated as concrete values, which can lead to failures in type comparison (link)
core: Empty containers in the configuration were not planned correctly when used with optional structural attributes (link)
"
69,"1.1.0 (Unreleased)
UPGRADE NOTES:

Terraform on macOS now requires macOS 10.13 High Sierra or later; Older macOS versions are no longer supported.
The module command no longer supports module and module options. The validate graph is always the same as the plan graph anyway, and the ""eval"" graph was just an implementation detail of the module command. The default behavior of creating a plan graph should be a reasonable replacement for both of the removed graph modes. (Please note that module is not covered by the Terraform v1.0 compatibility promises, because its behavior inherently exposes Terraform Core implementation details, so we recommend it only for interactive debugging tasks and not for use in automation.)

NEW FEATURES:

cli: The (currently-experimental) module generates a starting point for a particular resource configuration. (link)
config: a new module function, only available in module (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
cli: Blocks using SchemaConfigModeAttr in the provider SDK can now represented in the plan json output (link)
"
70,"1.0.6 (September 03, 2021)
ENHANCEMENTS:

backend/s3: Improve SSO handling and add new endpoints in the AWS SDK (link)

BUG FIXES:

cli: Suppress confirmation prompt when initializing with the module flag and migrating state between multiple workspaces. (link)
cli: Update tencentcount dependency versions to fix errors when building from source (link)
core: Fix panic while handling computed attributes within nested objects, and improve plan validation for unknown values (link)
"
71,"1.0.5 (August 18, 2021)
BUG FIXES:

json-output: Add an output change summary message as part of the module structured logs, bringing this format into parity with the human-readable UI. (link)
core: Handle null nested single attribute values (link)
cli: Fix crash when planning a diff between null and empty sets in nested attributes (link)
cli: Fix crash when planning a new resource containing a set of nested object attributes (link)
cli: Fix crash when displaying a resource diff where a possibly identifying attribute is sensitive (link)
cli: Fix crash when a diff with unknown nested map attributes (link)
config: Fix handling of dynamically types arguments in module, ensuring the correct resulting type. (link)
config: Floating point operations like module and module can no longer mutate their arguments. (link)
"
72,"1.1.0 (Unreleased)
NEW FEATURES:

cli: module generates resource configuration templates (link)
config: a new module function, only available in module (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
"
73,"1.0.4 (August 04, 2021)
BUG FIXES:

backend/consul: Fix a bug where the state value may be too large for consul to accept (link)
cli: Fixed a crashing bug with some edge-cases when reporting syntax errors that happen to be reported at the position of a newline. (link)
"
74,"1.1.0 (Unreleased)
NEW FEATURES:

cli: module generates resource configuration templates (link)
config: a new module function, only available in module (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
cli: Fixed a crashing bug with some edge-cases when reporting syntax errors that happen to be reported at the position of a newline. (link)
"
75,"1.0.3 (July 21, 2021)
ENHANCEMENTS

module: The JSON logs (module option) will now include module, showing changes detected outside of Terraform during the refresh step. (link)
core: The automatic provider installer will now accept providers that are recorded in their registry as using provider protocol version 6. (link)
backend/etcdv3: New argument module allows larger requests and for the client, to match the server request limit. (link)

BUG FIXES:

module: Will no longer panic when trying to render null maps. (link)
backend/pg: Prevent the creation of multiple workspaces with the same name. (link)
backend/oss: STS auth is now supported. (link)
config: Dynamic blocks with unknown for_each values were not being validated. Ensure block attributes are valid even when the block is unknown (link)
config: Unknown values in string templates could lose sensitivity, causing the planned change to be inaccurate (link)
"
76,"1.1.0 (Unreleased)
NEW FEATURES:

cli: module generates resource configuration templates (link)
config: a new module function, only available in module (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
cli: Fixed a crashing bug with some edge-cases when reporting syntax errors that happen to be reported at the position of a newline. (link)
"
77,"1.0.2 (July 07, 2021)
BUG FIXES:

module: Fix crash when rendering JSON plan with sensitive values in state (link)
config: The module and module functions no longer lower the precision of arguments to what would fit inside a 64-bit float, instead preserving precision in a similar way as most other arithmetic functions. (link)
config: The module function was incorrectly treating null values of an unknown type as if they were unknown values. Now it will treat them the same as any other non-list/non-tuple value, flattening them down into the result as-is. (link)
"
78,"1.1.0 (Unreleased)
NEW FEATURES:

cli: module generates resource configuration templates (link)
config: a new module function, only available in module (link)

ENHANCEMENTS:

config: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)

BUG FIXES:

core: Fixed an issue where provider configuration input variables were not properly merging with values in configuration (link)
cli: Fixed a crashing bug with some edge-cases when reporting syntax errors that happen to be reported at the position of a newline. (link)
"
79,"1.0.1 (June 24, 2021)
ENHANCEMENTS:

json-output: The JSON plan output now indicates which state values are sensitive. (link)
cli: The darwin builds can now make use of the host DNS resolver, which will fix many network related issues on MacOS.

BUG FIXES:

backend/remote: Fix faulty Terraform Cloud version check when migrating state to the remote backend with multiple local workspaces (link)
cli: Fix crash with deposed instances in json plan output (link)
core: Fix crash when provider modifies and unknown block during plan (link)
core: Diagnostic context was missing for some errors when validating blocks (link)
core: Fix crash when calling module with unknown values (link)
json-output: Fix an issue where the JSON configuration representation was missing fully-unwrapped references. (link)
json-output: Fix JSON plan resource drift to remove unchanged resources. (link)
"
80,"1.1.0 (Unreleased)
NEW FEATURES:

lang/funcs: add a new module function, only available in module (link)

ENHANCEMENTS:

configs: Terraform now checks the syntax of and normalizes module source addresses (the module argument in module blocks) during configuration decoding rather than only at module installation time. This is largely just an internal refactoring, but a visible benefit of this change is that the module messages about module downloading will now show the canonical module package address Terraform is downloading from, after interpreting the special shorthands for common cases like GitHub URLs. (link)
command/show: The -json output now indicates which state values are sensitive. (link)

BUG FIXES:

command/show: Fix an issue where the json configuration representation was missing fully-unwrapped references. (link)
"
81,"1.0.0 (June 08, 2021)
Terraform v1.0 is an unusual release in that its primary focus is on stability, and it represents the culmination of several years of work in previous major releases to make sure that the Terraform language and internal architecture will be a suitable foundation for forthcoming additions that will remain backward compatible.
Terraform v1.0.0 intentionally has no significant changes compared to Terraform v0.15.5. You can consider the v1.0 series as a direct continuation of the v0.15 series; we do not intend to issue any further releases in the v0.15 series, because all of the v1.0 releases will be only minor updates to address bugs.
For all future minor releases with major version 1, we intend to preserve backward compatibility as described in detail in link. The later Terraform v1.1.0 will, therefore, be the first minor release with new features that we will implement with consideration of those promises."
82,"0.15.5 (June 02, 2021)
BUG FIXES:

module and module: Don't show ""Objects have changed"" notification when the detected changes are only internal details related to legacy SDK quirks. (link)
core: Prevent crash during planning when encountering a deposed instance that has been removed from the configuration. (link)
core: Fix crash when rendering changes to deposed instances outside of Terraform. (link)
core: Restore a missing error when attempting to import a non-existent remote object. (link)
core: Fix bug where Terraform failed to release the state lock when applying a stale saved plan failed. (link)
"
83,"0.15.4 (May 19, 2021)
NEW FEATURES:


Noting changes made outside of Terraform: Terraform has always, by default, made a point during the planning operation of reading the current state of remote objects in order to detect any changes made outside of Terraform, to make sure the plan will take those into account.
Terraform will now report those detected changes as part of the plan result, in order to give additional context about the planned changes. We've often heard that people find it confusing when a plan includes a change that doesn't seem to be prompted by any recent change in the configuration, and so this feature is aiming to provide the previously-missing explanation for situations where Terraform is planning to undo a change.
It can also be useful just as general information when the change won't be undone by Terraform: if you've intentionally made a change outside of Terraform and mirrored that change in your configuration then Terraform will now confirm that it noticed the change you made and took it into account when planning.
By default this new output is for information only and doesn't change any behavior. If Terraform detects a change you were expecting then you don't need to take any additional action to respond to it. However, we've also added a new planning mode module which allows you to explicitly plan and apply the action of writing those detected changes to the Terraform state, which serves as a plannable replacement for module. We don't have any plans to remove the long-standing module command, but we do recommend using module instead in most cases, because it will provide an opportunity to review what Terraform detected before updating the Terraform state.


UPGRADE NOTES:

This release adds some new reserved reference prefixes to make them available for later work. These are module, module, module, and module. We don't expect these additions to cause problems for most existing configurations, but could cause a conflict if you are using a custom provider which has a resource type named exactly ""resource"", ""template"", ""arg"", or ""lazy"". In that unlikely event, you can escape references to resources of those types by adding a module prefix; for example, if you have a module then you can change references to it from module to module in order to escape the new meaning.

ENHANCEMENTS:

config: The various functions that compute hashs of files on disk, like module, will now stream the contents of the given file into the hash function in smaller chunks. Previously they would always read the entire file into memory before hashing it, due to following a similar implementation strategy as the module function. (link)
config: Some new escaping syntax which is not yet useful but will be part of the backward-compatibility story for certain future language editions. (link)
core: Rsource diagnostics are no longer lost on remote state storage fails (link)
core: Diagnostics from provisioner failures are now shown in CLI output (link)
module: add a new module flag instead of automatic state migration, to prevent failing when old backend config is not usable (link)
module and module: will now report any changes Terraform detects during the ""refresh"" phase for each managed object, providing confirmation that Terraform has seen those changes and, where appropriate, extra context to help understand the planned change actions that follow. (link)
module and module: now have a new option module to activate the ""refresh only"" planning mode, which causes Terraform to ignore any changes suggested by the configuration but still detect any changes made outside of Terraform since the latest module. (link)
backend/gcs: Terraform Core now supports link. The federated JSON credentials must be loaded through the module environment variable. This is also available in the Google Provider in versions newer than v3.61. (link)
backend/remote: supports several new CLI options when running plans and applies with Terraform Cloud: module, module, and module. (link)

BUG FIXES:

core: Fix sensitivity handling with plan values, which could cause the sensitive marks to be lost during apply leading to a perpetual diff (link)
core: Fix crash when specifying SSH module in a resource module block (link)
core: Terraform will now upgrade and refresh (unless disabled) deposed objects during planning, in a similar manner as for objects that have been removed from the configuration. ""Deposed"" is how Terraform represents the situation where a module replacement failed to destroy the old object, in which case Terraform needs to track both the new and old objects until the old object is successfully deleted. Refreshing these during planning means that you can, if you wish, delete a ""deposed"" object manually outside of Terraform and then have Terraform detect that you've done so. (link)
config: Improve the sensitivity support for module and module functions, which were accidentally omitted from the larger update in 0.15.1 (link)
backend/gcs: Fixed a bug where service account impersonation didn't work if the original identity was another service account (link)
"
84,"0.15.3 (May 06, 2021)
ENHANCEMENTS:

module: Add data to the JSON plan output describing which changes caused a resource to be replaced (link)

BUG FIXES:

module: Fix crash for JSON plan output of new resources with sensitive attributes in nested blocks (link)
"
85,"0.15.2 (May 05, 2021)
ENHANCEMENTS:

module and module: Both now support a new planning option module which takes the address of a resource instance already tracked in the state and forces Terraform to upgrade either an update or no-op plan for that instance into a ""replace"" (either destroy-then-create or create-then-destroy depending on configuration), to allow replacing a degraded object with a new object of the same configuration in a single action and preview the effect of that before applying it.
module: Now has a module option for symmetry with module, which makes module effectively an alias for module. This change is only for consistency between module and module; there are no current plans to deprecate module. (link)
core: Update HCL to allow better planning of dynamic blocks (link)
core: Unmark values when planning data sources (link)

BUG FIXES:

command/format: Fix various issues with nested-type attribute formatting (link)
core: Fix JSON plan output to add sensitivity data for provider-specified sensitive attribute values (link)
cli: Fix missing ""forces replacement"" UI for attribute changes which are marked as sensitive by the provider (link)
cli: Fix crash when rendering diagnostic caused by missing trailing quote (link)
functions: Fix crash when calling module with one or more empty collections (link)
"
86,"0.15.1 (April 26, 2021)
ENHANCEMENTS:


config: Various Terraform language functions now have more precise inference rules for propagating the ""sensitive"" characteristic values.
The affected functions are module, module, module, module, module, module, module, module, module, module, module, and module. The details are a little different for each of these but the general idea is to, as far as possible, preserve the sensitive characteristic on individual element or attribute values in result structures rather than always conservatively applying sensitivity to the whole result.
The primary benefit of these improvements is that you can now use these functions as part of constructing maps for module in situations where the input collection is never sensitive but some of the elements/attributes inside might be. (link] [link)
* cli: Update the HashiCorp public key (link)
* cli: Diagnostic messages can now be annotated with resource and provider addresses. (link)
* cli: module now has a new user experience for successful log-ins to Terraform Cloud and Terraform Enterprise. (link)
* core: Minor graph performance optimizations. (link)


BUG FIXES:

config: Fix validation error when passing providers from a non-default namespace into modules. (link)
cli: Fix missing colors and extraneous resource summary for plan/apply with the remote backend. (link)
cli: Diagnostics messages will only indicate that a referenced value is sensitive if that value is directly sensitive, as opposed to being a complex-typed value that contains a sensitive value. (link)
core: Don't trigger data source reads from changes in sibling module instances. (link)
core: Restore saved dependencies when a resource destroy operation fails. (link)
core: Fix crash when setting sensitive attributes to a sensitive value. (link)
core: Loosen output value sensitivity requirement for non-root modules. This means that modules which may receive sensitive values as input variables no longer need to mark all related outputs as sensitive. The requirement for root modules to specify the module attribute for sensitive values remains, with an extended diagnostic message to explain why. (link)
provisioner: Fix panic with unexpected null values in provisioner configuration (link)
"
87,"0.14.11 (April 26, 2021)
ENHANCEMENTS:

cli: Update the HashiCorp public key (link)
"
88,"0.13.7 (April 26, 2021)
ENHANCEMENTS:

cli: Update the HashiCorp public key (link)
"
89,"0.12.31 (April 26, 2021)
ENHANCEMENTS:

cli: Update the HashiCorp public key (link)
"
90,"0.11.15 (April 26, 2021)
IMPROVEMENTS:

cli: Update the HashiCorp Public Key (link)
backend/http: New options for retries on outgoing requests. (link)
communicator/ssh: Keepalive support (link)
"
91,"0.15.0 (April 14, 2021)
UPGRADE NOTES AND BREAKING CHANGES:
The following is a summary of each of the changes in this release that might require special consideration when upgrading. Refer to link for more details and recommended upgrade steps.


""Proxy configuration blocks"" (provider blocks with only module set) in shared modules are now replaced with a more explicit module argument within the module block. Some support for the old syntax is retained for backward compatibility, but we've added explicit error messages for situations where Terraform would previously silently misinterpret the purpose of an empty module block. (link)


The module and module functions, both of which were deprecated since Terraform v0.12, are now removed. You can replace uses of these functions with module and module respectively. (link)


Terraform now requires UTF-8 character encoding and virtual terminal support when running on Windows. This unifies Terraform's terminal handling on Windows with that of other platforms, as per link. Terraform previously required these terminal features on all other platforms, and now requires them on Windows too.
UTF-8 and virtual terminal support were introduced across various Windows 10 updates, and so Terraform is no longer officially supported on the original release of Windows 10 or on Windows 8 and earlier. However, there are currently no technical measures to artificially prevent Terraform from running on these obsolete Windows releases, and so you may still be able to use Terraform v0.15 on older Windows versions if you either disable formatting (using the module) option, or if you use a third-party terminal emulator package such as link, link, or link.
We strongly encourage planning to migrate to a newer version of Windows rather than relying on these workarounds for the long term, because the Terraform team will test future releases only on up-to-date Windows 10 and can therefore not guarantee ongoing support for older versions.


Built-in vendor provisioners (chef, habitat, puppet, and salt-masterless) have been removed. (link)


Interrupting execution will now cause terraform to exit with a non-zero exit status. (link)


The trailing module argument to specify the working directory for various commands is no longer supported. Use the global module option instead. (link)
For example, instead of module, write module.
* The module and module options are no longer available on module (link)


The module option is no longer available on module. (Terraform now always verifies plugins.) (link)


The module option is no longer available on module. (Terraform now always installs plugins.) (link)


The module option is no longer available on module. Use module instead (link)


The module and module options are no longer available on module. These were deprecated and have had no effect since Terraform v0.12. (link)


module output no longer includes the (previously-unpopulated) ""revision"" property (link)


In the module backend the module config argument, which was deprecated since Terraform v0.11, is now removed. Use the module argument instead. (link)


The deprecated module wildcard syntax is no longer supported. Use module instead. (link)


Previously deprecated quoted variable type constraints are no longer supported. Follow the instructions in the error message to update your type signatures to be more explicit. For example, use module instead of module. (link)


Terraform will no longer make use of the module environment variable to determine proxy settings for connecting to HTTPS servers. You must always set module if you intend to use a proxy to connect to an HTTPS server. (Note: This affects only connections made directly from Terraform CLI. Terraform providers are separate programs that make their own requests and may thus have different proxy configuration behaviors.)


Provider-defined sensitive attributes will now be redacted throughout the plan output. You may now see values redacted as module that were previously visible, because sensitivity did not follow provider-defined sensitive attributes.
If you are transforming a value and wish to force it not to be sensitive, such as if you are transforming a value in such a way that removes the sensitive data, we recommend using the new module function to hint Terraform that the result is not sensitive.


The module backend, which was deprecated since Terraform v0.12, is now removed. (link)


We've upgraded the underlying TLS and certificate-related libraries that Terraform uses when making HTTPS requests to remote systems. This includes the usual tweaks to preferences for different cryptographic algorithms during handshakes and also some slightly-stricter checking of certificate syntax. These changes should not cause problems for correctly-implemented HTTPS servers, but can sometimes cause unexpected behavior changes with servers or middleboxes that don't comply fully with the relevant specifications.


ENHANCEMENTS:

config: A module entry can now contain module to declare additional configuration aliases names without requirring a configuration block (link)
config: Improved type inference for conditional expressions. (link)
config: Provider-defined sensitive attributes will now be redacted throughout the plan output. (link)
config: New function module for concisely converting a zero-or-one element list/set into a single value that might be module. (link)
config: New functions module and module allow module authors to explicitly override Terraform's default infererence of value sensitivity for situations where it's too conservative or not conservative enough. (link)
config: Terraform will now emit a warning if you declare a module block in a non-root module. Terraform has always ignored such declarations, but previously did so silently. This is a warning rather than an error only because it is sometimes convenient to temporarily use a root module as if it were a child module in order to test or debug its behavior separately from its main backend. (link)
config: Removed warning about interpolation-only expressions being deprecated, because module now automatically fixes most cases that the warning would previously highlight. We still recommend using simpler expressions where possible, but the deprecation warning had caused a common confusion in the community that the interpolation syntax is always deprecated, rather than only in the interpolation-only case. (link)
config: The family of error messages with the summary ""Invalid for_each argument"" will now include some additional context about which external values contributed to the result, making it easier to find the root cause of the error. (link)
config: Terraform now does text processing using the rules and tables defined for Unicode 13. Previous versions were using Unicode 12 rules.
module: Will now make suggestions for possible providers on some registry failures, and generally remind of module on all registry failures. (link)
module: Provider installation will now only attempt to rewrite module if it would contain new information. (link)
module: New module option, which suppresses writing changes to the dependency lock file. Any installed provider packages must already be recorded in the lock file, or initialization will fail. Use this if you are managing the lock file via a separate process and want to avoid adding new checksums for existing dependencies. (link)
module: Improved performance when rendering large plans as JSON. (link)
module: The JSON output now includes a code snippet object for each diagnostic. If present, this object contains an excerpt of the source code which triggered the diagnostic, similar to what Terraform would include in human-oriented diagnostic messages. (link)
cli: Terraform now uses UTF-8 and full VT mode even when running on Windows. Previously Terraform was using the ""classic"" Windows console API, which was far more limited in what formatting sequences it supported and which characters it could render. (link)
cli: Improved support for Windows console UI on Windows 10, including bold colors and underline for HCL diagnostics. (link)
cli: Diagnostic messages now have a vertical line along their left margin, which we hope will achieve a better visual hierarchy for sighted users and thus make it easier to see where the errors and warnings start and end in relation to other content that might be printed alongside. (link)
cli: Typing an invalid top-level command, like module instead of module, will now print out a specific error message about the command being invalid, rather than just printing out the usual help directory. (link)
cli: Plugin crashes will now be reported with more detail, pointing out the plugin name and the method call along with the stack trace (link)
cli: Core and Provider logs can now be enabled separately for debugging, using module and module (link)
backend/azurerm: Support for authenticating as AzureAD users/roles. (link)
backend/pg: Now allows locking of each workspace separately, whereas before the locks were global across all workspaces. (link)

BUG FIXES:

config: Fix multiple upstream crashes with optional attributes and sensitive values. (link)
config: Fix various panics in the experimental module function. (link, link)
config: Fix crash with resources which have sensitive iterable attributes. (link)
config: Fix crash when referencing resources with sensitive fields that may be unknown. (link)
module: Validation now ignores providers that lack configuration, which is useful for validating modules intended to be called from other modules which therefore don't include their own provider configurations. (link)
module: Fix module output when unwrapping redundant multi-line string interpolations (link)
module: expressions using module (module, module) now return the same result as they would in a configuration (link)
module: Fix crash when rendering JSON plans containing iterable unknown values. (link)
module: fix issue with module not properly displaying in certain circumstances. (link)
module: fix bug where nested modules' resources were missing (link)
module: fix display names in errors and improve error when failing to target a whole resource (link)
module: show resource name in -allow-missing warning (link)
module: show resource name in -allow-missing warning (link)
cli: All commands will now exit with an error if unable to read input at an interactive prompt. For example, this may happen when running in a non-interactive environment but without module. Previously Terraform would behave as if the user entered an empty string, which often led to confusing results. (link)
cli: module levels other than module will now work reliably. (link)
core: Fix crash when trying to create a destroy plan with module. (link)
core: Extend the Terraform plan file format to include information about sensitivity and required-replace. This ensures that the output of module matches module, and sensitive values are elided. (link)
core: Ensure that stored dependencies are retained when a resource is removed entirely from the configuration, and module ordering is preserved. (link)
core: Resources removed from the configuration will now be destroyed before their dependencies are updated. (link)
core: Refresh data sources while creating a destroy plan, in case their results are important for destroy operations. (link)
core: Fix missing deposed object IDs in apply logs (link)
backend/azurerm: Fix nil pointer crashes with some state operations. (link, link)
backend/azure: Fix interactions between state reading, state creating, and locking. (link)

EXPERIMENTS:

module: This experiment has now concluded, and its functionality is now on by default. If you were previously participating in this experiment then you can remove the experiment opt-in with no other necessary configuration changes.
There is now a module command, which is currently an experimental feature serving as part of link. 
"
92,"0.15.0 (Unreleased)
BUG FIXES:

core: Fix crash when rendering JSON plans containing iterable unknown values (link)
"
93,"0.14.10 (April 07, 2021)
BUG FIXES:

cli: Only rewrite provider locks file if its contents has changed. (link)
"
94,"0.15.0-rc1 (Unreleased)
ENHANCEMENTS:

backend/azurerm: Dependency Update and Fixes (link)

BUG FIXES:

core: Fix crash when referencing resources with sensitive fields that may be unknown (link)
core: Fix crash with resources which have sensitive iterable attributes  (link)
core: Extend the Terraform plan file format to include information about sensitivity and required-replace. This ensures that the output of module matches module, and sensitive values are elided. (link)
core: Ensure that stored dependencies are retained when a resource is removed entirely from the configuration, and module ordering is preserved (link)
core: Resources removed from the configuration will now be destroyed before their dependencies are updated (link)
cli: Fix module output when unwrapping redundant multi-line string interpolations (link)
cli: Only rewrite provider locks file if its contents has changed. (link)
"
95,"0.14.9 (March 24, 2021)
BUG FIXES:

backend/remote: Fix error when migrating existing state to a new workspace on Terraform Cloud/Enterprise. (link)
"
96,"UPGRADE NOTES:
The output of module has been extended to include a code snippet object for each diagnostic. If present, this object contains an excerpt of the source code which triggered the diagnostic. Existing fields in the JSON output remain the same as before. (link)
ENHANCEMENTS:

config: Improved type inference in conditional statements (link)
config: provider-defined sensitive attributes redaction is no longer experimental, but default behavior (link)
config: New functions module and module allow module authors to explicitly override Terraform's default infererence of value sensitivity for situations where it's too conservative or not conservative enough. (link)
module: Give suggestions for possible providers on some registry failures, and generally remind of module on all registry failures (link)
module: Add module flag, which suppresses writing changes to the dependency lock file. Depencies must be able to be verified against the read-only lock file, or initialization will fail. This is useful if you are managing the lock file in a separate process and want to avoid adding new hashes for existing dependencies. (link)
core: Reduce string allocations to improve execution time when rendering large plans as JSON (link)
backend/pg: allow locking of independent states (link)

BUG FIXES:

cli: Fix for missing configuration snippets in diagnostics, a bug introduced in 0.15.0-beta1 (link)
config: Fix multiple upstream crashes with optional attributes and sensitive values (link)
config: Fix panics in module caused by missing nested optional collection types, and mismatched primitive fallback types (link)
config: Fix panics in module caused by missing nested optional structural types, and corresponding missing defaults (link)
"
97,"BUG FIXES:

config: Update HCL package to fix panics when indexing using sensitive values (#28034)
core: Fix error when using sensitive values in provisioner configuration (#27819)
core: Fix empty diags not getting associated with source (#28029)
backend/remote: Fix non-functional -lock-timeout argument when using the remote backend with local operations (#27845)

ENHANCEMENTS:

config: Terraform now does text processing using the rules and tables defined for Unicode 13. Previous versions were using Unicode 12 rules (#28034)
"
98,"0.15.0-beta1 (Unreleased)
BREAKING CHANGES:

Empty provider configuration blocks should be removed from modules. If a configuration alias is required within the module, it can be defined using the module argument within module. Existing module configurations which were accepted but could produce incorrect or undefined behavior may now return errors when loading the configuration. (link)
The module and module functions, both of which were deprecated since Terraform v0.12, are now removed. You can replace uses of these functions with module and module respectively. (link)

Terraform now requires UTF-8 character encoding and virtual terminal support when running on Windows. This unifies Terraform's terminal handling on Windows with that of other platforms, as per link. Terraform previously required these terminal features on all other platforms, and now requires them on Windows too.
UTF-8 and virtual terminal support were introduced across various Windows 10 updates, and so Terraform is no longer officially supported on the original release of Windows 10 or on Windows 8 and earlier. However, there are currently no technical measures to artificially prevent Terraform from running on these obsolete Windows releases, and so you may still be able to use Terraform v0.15 on older Windows versions if you either disable formatting (using the module) option, or if you use a third-party terminal emulator package such as link, link, or link.
We strongly encourage planning to migrate to a newer version of Windows rather than relying on these workarounds for the long term, because the Terraform team will test future releases only on up-to-date Windows 10 and can therefore not guarantee ongoing support for older versions.


Interrupting execution will now cause terraform to exit with a non-zero exit status. (link)


The trailing module argument to specify the working directory for various commands is no longer supported. Use the global module option instead. (link)
For example, instead of module, write module.
* The module and module options are no longer available on module (link)
* The module option is no longer available on module. (Terraform now always verifies plugins.) (link)
* The module option is no longer available on module. (Terraform now always installs plugins.) (link)
* The module option is no longer available on module. Use module instead (link)
* The module and module options are no longer available on module. These had no effect and were deprecated. (link)
* module output no longer includes the (previously-unpopulated) ""revision"" property (link)
* The module backend, which was deprecated since Terraform v0.12, is now removed. (link)
* In the module backend the module config argument, which was deprecated since Terraform v0.11, is now removed. Use the module argument instead. (link)
* The deprecated module wildcard syntax will now error. Use module instead. (link)
* Previously deprecated quoted type strings will now error rather than warn - follow the instructions in the error message to update your type signatures to be more explicit. For example, use module instead of module. (link)
* Terraform will no longer make use of the module environment variable to determine proxy settings for connecting to HTTPS servers. You must always set module if you intend to use a proxy to connect to an HTTPS server. (Note: This affects only connections made directly from Terraform CLI. Terraform providers are separate programs that make their own requests and may thus have different proxy configuration behaviors.)
* We've upgraded the underlying TLS and certificate-related libraries that Terraform uses when making HTTPS requests to remote systems. This includes the usual tweaks to preferences for different cryptographic algorithms during handshakes and also some slightly-stricter checking of certificate syntax. These changes should not cause problems for correctly-implemented HTTPS servers, but can sometimes cause unexpected behavior changes with servers or middleboxes that don't comply fully with the relevant specifications.


ENHANCEMENTS:

backend/azurerm: updating the dependencies for the Azure Backend (link)
config: A module entry can now contain module to declare additional configuration aliases names without requirring a configuration block (link)
config: Terraform will now emit a warning if you declare a module block in a non-root module. Terraform has always ignored such declarations, but previously did so silently. This is a warning rather than an error only because it is sometimes convenient to temporarily use a root module as if it were a child module in order to test or debug its behavior separately from its main backend. (link)
config: Removed warning surrounding interpolation-only expressions - many of these are caught by module and we are removing the warning rather than upgrading it to an error (link)
config: Terraform now does text processing using the rules and tables defined for Unicode 13. Previous versions were using Unicode 12 rules.
cli: The family of error messages with the summary ""Invalid for_each argument"" will now include some additional context about which external values contributed to the result. (link)
cli: Terraform now uses UTF-8 and full VT mode even when running on Windows. Previously Terraform was using the ""classic"" Windows console API, which was far more limited in what formatting sequences it supported and which characters it could render. (link)
cli: Improved support for Windows console UI on Windows 10, including bold colors and underline for HCL diagnostics. (link)
cli: Diagnostic messages now have a vertical line along their left margin, which we hope will achieve a better visual hierarchy for sighted users and thus make it easier to see where the errors and warnings start and end in relation to other content that might be printed alongside. (link)
cli: Typing an invalid top-level command, like module instead of module, will now print out a specific error message about the command being invalid, rather than just printing out the usual help directory. (link)
cli: Plugin crashes will now be reported with more detail, pointing out the plugin name and the method call along with the stack trace (link)
cli: Values in files for undeclared variables (ex. module) are no longer deprecated, but will continue to produce a warning. The number of warnings produced has been reduced from 3 full warnings before a summary to two. To provide ""global"" values across configurations, use module environment variables. To reduce the verbosity of the warnings, use the existing module option. (link)
cli: The cli now handles structured logs throughout, allowing for additional log context from providers to be maintained, and offering new options for output filters. (link)
cli: Core and Provider logs can now be enabled separately for debugging, using module and module (link)
cli: Experimental module command. (TODO: Include a link to the experiment's documentation page as part of aggregating the 0.15.0 prerelease changelogs into the final 0.15.0 changelog) (link)

BUG FIXES:

cli: Exit with an error if unable to gather input from the UI. For example, this may happen when running in a non-interactive environment but without module. Previously Terraform would interpret these errors as empty strings, which could be confusing. (link)
cli: TF_LOG levels other than module will now work correctly (link)
command/console: expressions using module (module, module) now return the same result as they would in a configuration (link)
command/show: fix issue with child_modules not properly displaying in certain circumstances (link)
command/state list: fix bug where nested modules' resources were missing from module output (link)
command/state mv: fix display names in errors and improve error when failing to target a whole resource (link)
command/taint: show resource name in -allow-missing warning (link)
command/untaint: show resource name in -allow-missing warning (link)
core: validate will now ignore providers without configuration (link)
core: refresh data sources during destroy (link)
core: fix missing deposed object ID in apply logs (link)
backend/azure: azure state refreshes outside of grabbing the lock (link)
"
99,"0.14.7 (February 17, 2021)
ENHANCEMENTS:

cli: Emit an ""already installed"" event when a provider is found already installed (link)
provisioner/remote-exec: Can now run in a mode that expects the remote system to be running Windows and excuting commands using the Windows command interpreter, rather than a Unix-style shell. Specify the module as module in the module block. (link)

BUG FIXES:

cli: Fix module not outputting the full module tree when some child modules have no resources (link)
cli: Fix excessively slow rendering of very large multi-line string outputs (link)
cli: Fix missing provider requirements in JSON plan when specified using module instead of provider config (link)
"
100,"0.15.0 (Unreleased)
BREAKING CHANGES:

The module and module functions, both of which were deprecated since Terraform v0.12, are now removed. You can replace uses of these functions with module and module respectively. (link)

Terraform now requires UTF-8 character encoding and virtual terminal support when running on Windows. This unifies Terraform's terminal handling on Windows with that of other platforms, as per link. Terraform previously required these terminal features on all other platforms, and now requires them on Windows too.
UTF-8 and virtual terminal support were introduced across various Windows 10 updates, and so Terraform is no longer officially supported on the original release of Windows 10 or on Windows 8 and earlier. However, there are currently no technical measures to artificially prevent Terraform from running on these obsolete Windows releases, and so you may still be able to use Terraform v0.15 on older Windows versions if you either disable formatting (using the module) option, or if you use a third-party terminal emulator package such as link, link, or link.
We strongly encourage planning to migrate to a newer version of Windows rather than relying on these workarounds for the long term, because the Terraform team will test future releases only on up-to-date Windows 10 and can therefore not guarantee ongoing support for older versions.


Interrupting execution will now cause terraform to exit with a non-zero exit status. (link)


The trailing module argument to specify the working directory for various commands is no longer supported. Use the global module option instead. (link)
For example, instead of module, write module.
* The module and module options are no longer available on module (link)
* The module option is no longer available on module. (Terraform now always verifies plugins.) (link)
* The module option is no longer available on module. (Terraform now always installs plugins.) (link)
* The module option is no longer available on module. Use module instead (link)
* module output no longer includes the (previously-unpopulated) ""revision"" property [link] 
* The module backend, which was deprecated since Terraform v0.12, is now removed. (link)
* In the module backend the module config argument, which was deprecated since Terraform v0.11, is now removed. Use the module argument instead. (link)


ENHANCEMENTS:

config: Terraform will now emit a warning if you declare a module block in a non-root module. Terraform has always ignored such declarations, but previously did so silently. This is a warning rather than an error only because it is sometimes convenient to temporarily use a root module as if it were a child module in order to test or debug its behavior separately from its main backend. (link)
cli: The family of error messages with the summary ""Invalid for_each argument"" will now include some additional context about which external values contributed to the result. (link)
cli: Terraform now uses UTF-8 and full VT mode even when running on Windows. Previously Terraform was using the ""classic"" Windows console API, which was far more limited in what formatting sequences it supported and which characters it could render. (link)
cli: Improved support for Windows console UI on Windows 10, including bold colors and underline for HCL diagnostics. (link)
cli: Diagnostic messages now have a vertical line along their left margin, which we hope will achieve a better visual heirarchy for sighted users and thus make it easier to see where the errors and warnings start and end in relation to other content that might be printed alongside. (link)
cli: Typing an invalid top-level command, like module instead of module, will now print out a specific error message about the command being invalid, rather than just printing out the usual help directory. (link)
cli: Plugin crashes will now be reported with more detail, pointing out the plugin name and the method call along with the stack trace (link)
provisioner/remote-exec: Can now run in a mode that expects the remote system to be running Windows and excuting commands using the Windows command interpreter, rather than a Unix-style shell. Specify the module as module in the module block. (link)

BUG FIXES:

cli: Exit with an error if unable to gather input from the UI. For example, this may happen when running in a non-interactive environment but without module. Previously Terraform would interpret these errors as empty strings, which could be confusing. (link)
cli: TF_LOG levels other than module will now work correctly (link)
cli: Core and Provider logs can now be enabled separately for debugging, using module and module (link)
command/console: expressions using module (module, module) now return the same result as they would in a configuration (link)
command/show: fix issue with child_modules not properly displaying in certain circumstances (link)
command/state list: fix bug where nested modules' resources were missing from module output (link)
command/state mv: fix display names in errors and improve error when failing to target a whole resource (link)
command/taint: show resource name in -allow-missing warning (link)
command/untaint: show resource name in -allow-missing warning (link)
core: validate will now ignore providers without configuration (link)
core: refresh data sources during destroy (link)
"
101,"0.14.6 (February 04, 2021)
ENHANCEMENTS:

backend/s3: Add support for AWS Single-Sign On (SSO) cached credentials (link)

BUG FIXES:

cli: Rerunning module will reuse installed providers rather than fetching the provider again (link)
config: Fix panic when applying a config using sensitive values in some block sets (link)
core: Fix ""Invalid planned change"" error when planning tainted resource which no longer exists (link)
core: Fix panic when refreshing data source which contains sensitive values (link)
core: Fix init with broken link in plugin_cache_dir (link)
core: Prevent evaluation of removed data source instances during plan (link)
core: Don't plan changes for outputs that remain null (link)
"
102,"0.15.0 (Unreleased)
BREAKING CHANGES:

The module and module functions, both of which were deprecated since Terraform v0.12, are now removed. You can replace uses of these functions with module and module respectively. (link)

Terraform now requires UTF-8 character encoding and virtual terminal support when running on Windows. This unifies Terraform's terminal handling on Windows with that of other platforms, as per link. Terraform previously required these terminal features on all other platforms, and now requires them on Windows too.
UTF-8 and virtual terminal support were introduced across various Windows 10 updates, and so Terraform is no longer officially supported on the original release of Windows 10 or on Windows 8 and earlier. However, there are currently no technical measures to artificially prevent Terraform from running on these obsolete Windows releases, and so you may still be able to use Terraform v0.15 on older Windows versions if you either disable formatting (using the module) option, or if you use a third-party terminal emulator package such as link, link, or link.
We strongly encourage planning to migrate to a newer version of Windows rather than relying on these workarounds for the long term, because the Terraform team will test future releases only on up-to-date Windows 10 and can therefore not guarantee ongoing support for older versions.


Interrupting execution will now cause terraform to exit with a non-zero exit status. (link)

The module and module options are no longer available on module (link)
The module option is no longer available on module. (Terraform now always verifies plugins.) (link)
The module option is no longer available on module. (Terraform now always installs plugins.) (link)
module output no longer includes the (previously-unpopulated) ""revision"" property [link] 
The module backend, which was deprecated since Terraform v0.12, is now removed. (link)
In the module backend the module config argument, which was deprecated since Terraform v0.11, is now removed. Use the module argument instead. (link)

ENHANCEMENTS:

config: Terraform will now emit a warning if you declare a module block in a non-root module. Terraform has always ignored such declarations, but previously did so silently. This is a warning rather than an error only because it is sometimes convenient to temporarily use a root module as if it were a child module in order to test or debug its behavior separately from its main backend. (link)
cli: The family of error messages with the summary ""Invalid for_each argument"" will now include some additional context about which external values contributed to the result. (link)
cli: Terraform now uses UTF-8 and full VT mode even when running on Windows. Previously Terraform was using the ""classic"" Windows console API, which was far more limited in what formatting sequences it supported and which characters it could render. (link)
cli: Improved support for Windows console UI on Windows 10, including bold colors and underline for HCL diagnostics. (link)
cli: Diagnostic messages now have a vertical line along their left margin, which we hope will achieve a better visual heirarchy for sighted users and thus make it easier to see where the errors and warnings start and end in relation to other content that might be printed alongside. (link)
cli: Typing an invalid top-level command, like module instead of module, will now print out a specific error message about the command being invalid, rather than just printing out the usual help directory. (link)
cli: Plugin crashes will now be reported with more detail, pointing out the plugin name and the method call along with the stack trace (link)
provisioner/remote-exec: Can now run in a mode that expects the remote system to be running Windows and excuting commands using the Windows command interpreter, rather than a Unix-style shell. Specify the module as module in the module block. (link)

BUG FIXES:

cli: Exit with an error if unable to gather input from the UI. For example, this may happen when running in a non-interactive environment but without module. Previously Terraform would interpret these errors as empty strings, which could be confusing. (link)
cli: TF_LOG levels other than module will now work correctly (link)
cli: Core and Provider logs can now be enabled separately for debugging, using module and module (link)
command/console: expressions using module (module, module) now return the same result as they would in a configuration (link)
command/show: fix issue with child_modules not properly displaying in certain circumstances (link)
command/state list: fix bug where nested modules' resources were missing from module output (link)
command/state mv: fix display names in errors and improve error when failing to target a whole resource (link)
command/taint: show resource name in -allow-missing warning (link)
command/untaint: show resource name in -allow-missing warning (link)
core: validate will now ignore providers without configuration (link)
core: refresh data sources during destroy (link)
core: don't plan changes for outputs that remain null (link)
"
103,"0.14.5 (January 20, 2021)
ENHANCEMENTS:

backend/pg: The Postgres backend now supports the ""scram-sha-256"" authentication method. (link)

BUG FIXES:

cli: Fix formatting of long integers in outputs and console (link)
cli: Fix redundant check of remote workspace version for local operations (link)
cli: Fix missing check of remote workspace version for state migration (link)
cli: Fix world-writable permissions on dependency lock file (link)
"
104,"0.15.0 (Unreleased)
UPGRADE NOTES:

config: The module and module functions, both of which were deprecated since Terraform v0.12, are now removed. You can replace uses of these functions with module and module respectively. (link)
cli: Interrupting execution will now cause terraform to exit with a non-0 status. (link)
backend/atlas: the module backend, which was deprecated since v0.12, has been removed. (link)
backend/gcs: The module config argument, which was deprecated since v0.11, has been removed. Use the module argument instead. (link)

ENHANCEMENTS:

config: Terraform will now emit a warning if you declare a module block in a non-root module. Terraform has always ignored such declarations, but previously did so silently. This is a warning rather than an error only because it is sometimes convenient to temporarily use a root module as if it were a child module in order to test or debug its behavior separately from its main backend. (link)
cli: Improved support for Windows console UI on Windows 10, including bold colors and underline for HCL diagnostics. (link)
cli: The family of error messages with the summary ""Invalid for_each argument"" will now include some additional context about which external values contributed to the result. (link)
cli: Typing an invalid top-level command, like module instead of module, will now print out a specific error message about the command being invalid, rather than just printing out the usual help directory. (link)
cli: Plugin crashes will now be reported with more detail, pointing out the plugin name and the method call along with the stack trace (link)
provisioner/remote-exec: Can now run in a mode that expects the remote system to be running Windows and excuting commands using the Windows command interpreter, rather than a Unix-style shell. Specify the module as module in the module block. (link)

BUG FIXES:

cli: Exit with an error if unable to gather input from the UI. For example, this may happen when running in a non-interactive environment but without module. Previously Terraform would interpret these errors as empty strings, which could be confusing. (link)
cli: TF_LOG levels other than module will now work correctly (link)
cli: Core and Provider logs can now be enabled separately for debugging, using module and module (link)
command/console: expressions using module (module, module) now return the same result as they would in a configuration (link)
command/state list: fix bug where nested modules' resources were missing from module output (link)
core: validate will now ignore providers without configuration (link)
"
105,"0.14.4 (January 06, 2021)
UPGRADE NOTES:

This release disables the remote Terraform version check feature for plan and apply operations. This fixes an issue with using custom Terraform version bundles in Terraform Enterprise. (link)

BUG FIXES:

backend/remote: Disable remote Terraform workspace version check when the remote workspace is in local operations mode ([link])
core: Fix panic when using module values as arguments to data sources ([link])
core: Fix panic when using module values as module arguments on validate ([link])
core: Fix panic when passing module values to module input variables which have custom variable validation ([link])
dependencies: Upgrade HCL to v2.8.2, fixing several bugs with module values ([link])
"
106,"0.13.6 (January 06, 2021)
UPGRADE NOTES:

The builtin provider's module data source no longer enforces Terraform version checks on the remote state file. This allows Terraform 0.13.6 to access remote state from future Terraform versions, up until a future incompatible state file version upgrade is required. (link)

BUG FIXES:

init: setting module to module will now cause a warning, as this flag has been a no-op since 0.13.0 and usage is better served through using module blocks (link)
"
107,"0.12.30 (January 06, 2021)
UPGRADE NOTES:

The builtin provider's module data source no longer enforces Terraform version checks on the remote state file. This allows Terraform 0.12.30 to access remote state from future Terraform versions, up until a future incompatible state file version upgrade is required. (link)
"
108,"0.14.3 (December 17, 2020)
ENHANCEMENTS:


module: Now supports a new ""raw"" mode, activated by the module option, for printing out the raw string representation of a particular output value. (link)
Only primitive-typed values have a string representation, so this formatting mode is not compatible with complex types. The module mode is still available as a general way to get a machine-readable representation of an output value of any type.


config: module now allows maps whose element values are sensitive, as long as the element keys and the map itself are not sensitive. (link)


BUG FIXES:

config: Fix module and module functions when called with values which are not known until apply. (link)
config: Fix module function when called with values which are not known until apply. Also allows module to cope with numbers too large to represent in float64, along with correctly handling errors around infinite values. (link)
config: Fixed panic when referencing sensitive values in resource module expressions (link)
config: Fix incorrect attributes in diagnostics when validating objects (link)
core: Prevent unexpected updates during plan when multiple sensitive values are involved (link)
dependencies: Fix several small bugs related to the use of module values with expressions and functions.
lang: Fix panic when calling module with a module argument (link)
module: module was skipped when running apply directly (link)
module: setting module to module will now cause a warning, as this flag has been a no-op since 0.13.0 and usage is better served through using module blocks (link)
module and other commands which interact with the dependency lock file: These will now generate a normal error message if the lock file is incorrectly a directory, rather than crashing as before. (link)
"
109,"0.14.2 (December 08, 2020)
BUG FIXES:

backend/remote: Disable the remote backend version compatibility check for workspaces set to use the ""latest"" pseudo-version. (link)
providers/terraform: Disable the remote backend version compatibility check for the module data source. This check is unnecessary, because the data source is read-only by definition. (link)
"
110,"0.14.1 (December 08, 2020)
ENHANCEMENTS:

backend/remote: When using the enhanced remote backend with commands which locally modify state, verify that the local Terraform version and the configured remote workspace Terraform version are compatible. This prevents accidentally upgrading the remote state to an incompatible version. The check is skipped for commands which do not write state, and can also be disabled by the use of a new command-line flag, module. (link)

BUG FIXES:

configs: Fix for errors when using multiple layers of sensitive input variables (link)
configs: Fix error when using sensitive input variables in conditionals (link)
core: Fix permanent diff when a resource changes only in sensitivity, for example due to changing the sensitivity of a variable or output used as an attribute value. (link)
core: Fix issues where module appears to not work, or causes validation errors with some resources. (link)
module: Fix incorrect formatting with attribute expressions enclosed in parentheses. (link)
"
111,"0.14.0 (December 02, 2020)
NEW FEATURES:
* Terraform now supports marking input variables as sensitive, and will propagate that sensitivity through expressions that derive from sensitive input variables.


module will now generate a lock file in the configuration directory which you can check in to your version control so that Terraform can make the same version selections in future. (link)
If you wish to retain the previous behavior of always taking the newest version allowed by the version constraints on each install, you can run module to see that behavior.


Terraform will now support reading and writing all compatible state files, even from future versions of Terraform. This means that users of Terraform 0.14.0 will be able to share state files with future Terraform versions until a new state file format version is needed. We have no plans to change the state file format at this time. (link)


UPGRADE NOTES:
* Outputs that reference sensitive values (which includes variables marked as sensitive, other module outputs marked as module, or attributes a provider defines as module if the module experiment is activated) must also be defined as sensitive, or Terraform will error at plan.
* The module argument inside provider configuration blocks has been documented as deprecated since Terraform 0.12. As of 0.14 it will now also generate an explicit deprecation warning. To avoid the warning, use link declarations instead. (link)
* The official MacOS builds of Terraform now require MacOS 10.12 Sierra or later. (link)
* TLS certificate verification for outbound HTTPS requests from Terraform CLI no longer treats the certificate's ""common name"" as a valid hostname when the certificate lacks any ""subject alternative name"" entries for the hostname. TLS server certificates must list their hostnames as a ""DNS name"" in the subject alternative names field. (link)
* Outbound HTTPS requests from Terraform CLI now enforce link's client-side downgrade protection checks. This should not significantly affect normal operation, but may result in connection errors in environments where outgoing requests are forced through proxy servers and other ""middleboxes"", if they have behavior that resembles a downgrade attack. (link)
* Terraform's HTTP client code is now slightly stricter than before in HTTP header parsing, but in ways that should not affect typical server implementations: Terraform now trims only ASCII whitespace characters, and does not allow module. (link)
* The module subcommand and the associated upgrade mechanisms are no longer available. Complete the v0.13 upgrade process before upgrading to Terraform v0.14.
* The module command, which did not offer additional functionality, has been removed.
ENHANCEMENTS:

config: Added module argument for variable blocks, which supresses output where that variable is used (link)
config: Added module and module functions, which serve as a sort of dynamic version of the module and module or operators, respectively. These are intended to allow evaluating boolean conditions, such as in variable module blocks, across all of the items in a collection using module expressions. (link], [link)
config: New functions module and module for encoding text in various character encodings other than UTF-8. (link)
module and module: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)
config: module can now apply to map keys that are not listed in the configuration (link)
module: Now has distinct rendering of lists, sets, and tuples, and correctly renders objects with module attribute values. Multi-line strings are rendered using the ""heredoc"" syntax. (link, link)
module: Added support for OAuth2 application scopes. (link)
module: Will now do some slightly more opinionated normalization behaviors, using the documented idiomatic syntax. (link)
module's provider installation step will now abort promptly if Terraform receives an interrupt signal. (link)
cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
cli: help text is been reorganized to emphasize the main commands and improve consistency (link)
cli: Ensure that provider requirements are met by the locked dependencies for every command. This will help catch errors if the configuration has changed since the last run of module. (link)
core: When sensitive values are used as part of provisioner configuration, logging is disabled to ensure the values are not displayed to the UI (link)
core: module no longer uses a separate refresh phase. Instead, all resources are updated on-demand during planning (link)
modules: Adds support for loading modules with S3 virtual hosted-style access (link)
backend/consul: Split state into chunks when outgrowing the limit of the Consul KV store. This allows storing state larger than the Consul 512KB limit. (link)
backend/consul: Add force-unlock support to the Consul backend (link)
backend/gcs: Add service account impersonation to GCS backend (link)
On Unix-based operating systems other than MacOS, the module environment variable can now be a colon-separated list of multiple certificate search paths. (link)
On MacOS, Terraform will now use the module API to access the system trust roots, for improved consistency with other MacOS software. (link)

BUG FIXES:

config: Report an error when provider configuration attributes are incorrectly added to a module object. (link)
config: Better errors for invalid terraform version constraints (link)
config: fix panic when module is called with a negative offset (link)
config: module will now only treat map as unknown if it is wholly unknown (link)
config: Fix provider detection for resources when local name does not match provider type (link)
module: Fix incorrect heredoc syntax in plan diff output (link)
module: Hide sensitive outputs from display (link)
module: If the configuration's module constraint is not met, the module subcommand will now correctly exit early. (link)
module and module: Fix issue when using module (and module) with workspaces where statefile was not found. (link)
module: Fix locksfile constraint output for versions like ""1.2"". (link)
module: Omit duplicate version constraints when installing packages or writing locksfile. (link)
cli: return an error on a state unlock failure [link] 
core: Prevent ""Inconsistent Plan"" errors when using dynamic with a block of TypeSet (link)
core: Errors with data sources reading old data during refresh, failing to refresh, and not appearing to wait on resource dependencies are fixed by updates to the data source lifecycle and the merging of refresh and plan (link)
core: Prevent evaluation of deposed instances, which in turn prevents errors when referencing create_before_destroy resources that have changes to their count or for_each values (link)
core: fix module to work for all backends (link)
backend/consul: Fix bug which prevented state locking when path has trailing module (link)
backend/pg: Always have the default workspace in the pg backend (link)
backend/pg: Properly quote schema_name in the pg backend configuration (link)
build: Fix crash with terraform binary on OpenBSD. (link)
internal: Use default AWS credential handling when fetching modules (link)

EXPERIMENTS:
Experiments are Terraform language features that are not yet finalized but that we've included in a release so you can potentially try them out and share feedback. These features are only available if you explicitly enable the relevant experiment for your module. To share feedback on active experiments, please open an enhancement request issue in the main Terraform repository.


module: When declaring an input variable for a module whose type constraint (module argument) contains an object type constraint, the type expressions for the attributes can be annotated with the experimental module modifier.
Marking an attribute as ""optional"" changes the type conversion behavior for that type constraint so that if the given value is a map or object that has no attribute of that name then Terraform will silently give that attribute the value module, rather than returning an error saying that it is required. The resulting value still conforms to the type constraint in that the attribute is considered to be present, but references to it in the recieving module will find a null value and can act on that accordingly.
This experiment also includes a function named module which you can use in a local value to replace the null values representing optional attributes with non-null default values. The function also requires that you enable the module experiment for any module which calls it.


module: This is an unusual experiment in that it doesn't directly allow you to use a new feature in your module configuration but instead it changes the automatic behavior of Terraform in modules where it's enabled.
For modules where this experiment is active, Terraform will consider the attribute sensitivity flags set in provider resource type schemas when propagating the ""sensitive"" flag through expressions in the configuration. This is experimental because it has the potential to make far more items in the output be marked as sensitive than before, and so we want to get some experience and feedback about it before hopefully making this the default behavior.
One important consequence of enabling this experiment is that you may need to mark more of your module's output values as module, in any case where a particular output value is derived from a value a provider has indicated as being sensitive. Without that explicit annotation, Terraform will return an error to avoid implicitly exposing a sensitive value via an output value.


If you try either of these features during their experimental periods and have feedback about them, please open a feature request issue. We are aiming to stabilize both features in the forthcoming v0.15 release, but their design may change in the meantime based on feedback. If we make further changes to the features during the v0.15 period then they will be reflected in v0.15 alpha releases."
112,"0.14.0 (Unreleased)
NEW FEATURES:
* Terraform now supports marking input variables as sensitive, and will propagate that sensitivity through expressions that derive from sensitive input variables.


module will now generate a lock file in the configuration directory which you can check in to your version control so that Terraform can make the same version selections in future. (link)
If you wish to retain the previous behavior of always taking the newest version allowed by the version constraints on each install, you can run module to see that behavior.


Terraform will now support reading and writing all compatible state files, even from future versions of Terraform. This means that users of Terraform 0.14.0 will be able to share state files with future Terraform versions until a new state file format version is needed. We have no plans to change the state file format at this time. (link)


UPGRADE NOTES:
* Outputs that reference sensitive values (which includes variables marked as sensitive, other module outputs marked as module, or attributes a provider defines as module if the module experiment is activated) must also be defined as sensitive, or Terraform will error at plan.
* The module argument inside provider configuration blocks has been documented as deprecated since Terraform 0.12. As of 0.14 it will now also generate an explicit deprecation warning. To avoid the warning, use link declarations instead. (link)
* The official MacOS builds of Terraform now require MacOS 10.12 Sierra or later. (link)
* TLS certificate verification for outbound HTTPS requests from Terraform CLI no longer treats the certificate's ""common name"" as a valid hostname when the certificate lacks any ""subject alternative name"" entries for the hostname. TLS server certificates must list their hostnames as a ""DNS name"" in the subject alternative names field. (link)
* Outbound HTTPS requests from Terraform CLI now enforce link's client-side downgrade protection checks. This should not significantly affect normal operation, but may result in connection errors in environments where outgoing requests are forced through proxy servers and other ""middleboxes"", if they have behavior that resembles a downgrade attack. (link)
* Terraform's HTTP client code is now slightly stricter than before in HTTP header parsing, but in ways that should not affect typical server implementations: Terraform now trims only ASCII whitespace characters, and does not allow module. (link)
* The module subcommand and the associated upgrade mechanisms are no longer available. Complete the v0.13 upgrade process before upgrading to Terraform v0.14.
* The module command, which did not offer additional functionality, has been removed.
ENHANCEMENTS:

backend/gcs: Add service account impersonation to GCS backend (link)
config: Added module argument for variable blocks, which supresses output where that variable is used (link)
config: Added module and module functions, which serve as a sort of dynamic version of the module and module or operators, respectively. These are intended to allow evaluating boolean conditions, such as in variable module blocks, across all of the items in a collection using module expressions. (link], [link)
config: New functions module and module for encoding text in various character encodings other than UTF-8. (link)
module and module: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)
config: module can now apply to map keys that are not listed in the configuration (link)
module: Now has distinct rendering of lists, sets, and tuples, and correctly renders objects with module attribute values. (link)
module: Added support for OAuth2 application scopes. (link)
module: Will now do some slightly more opinionated normalization behaviors, using the documented idiomatic syntax. (link)
module's provider installation step will now abort promptly if Terraform receives an interrupt signal. (link)
cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
cli: help text is been reorganized to emphasize the main commands and improve consistency (link)
cli: Ensure that provider requirements are met by the locked dependencies for every command. This will help catch errors if the configuration has changed since the last run of module. (link)
core: When sensitive values are used as part of provisioner configuration, logging is disabled to ensure the values are not displayed to the UI (link)
core: module no longer uses a separate refresh phase. Instead, all resources are updated on-demand during planning (link)
backend/consul: Split state into chunks when outgrowing the limit of the Consul KV store. This allows storing state larger than the Consul 512KB limit. (link)
backend/consul: Add force-unlock support to the Consul backend (link)
On Unix-based operating systems other than MacOS, the module environment variable can now be a colon-separated list of multiple certificate search paths. (link)
On MacOS, Terraform will now use the module API to access the system trust roots, for improved consistency with other MacOS software. (link)

BUG FIXES:

config: Report an error when provider configuration attributes are incorrectly added to a module object. (link)
config: Better errors for invalid terraform version constraints (link)
config: fix panic when module is called with a negative offset (link)
config: module will now only treat map as unknown if it is wholly unknown (link)
config: Fix provider detection for resources when local name does not match provider type (link)
module: Fix incorrect heredoc syntax in plan diff output (link)
module: Hide sensitive outputs from display (link)
module: If the configuration's module constraint is not met, the module subcommand will now correctly exit early. (link)
module and module: Fix issue when using module (and module) with workspaces where statefile was not found. (link)
module: Fix locksfile constraint output for versions like ""1.2"". (link)
module: Omit duplicate version constraints when installing packages or writing locksfile. (link)
cli: return an error on a state unlock failure [link] 
core: Prevent ""Inconsistent Plan"" errors when using dynamic with a block of TypeSet (link)
core: Errors with data sources reading old data during refresh, failing to refresh, and not appearing to wait on resource dependencies are fixed by updates to the data source lifecycle and the merging of refresh and plan (link)
core: Prevent evaluation of deposed instances, which in turn prevents errors when referencing create_before_destroy resources that have changes to their count or for_each values (link)
core: fix module to work for all backends (link)
backend/consul: Fix bug which prevented state locking when path has trailing module (link)
backend/pg: Always have the default workspace in the pg backend (link)
backend/pg: Properly quote schema_name in the pg backend configuration (link)
build: Fix crash with terraform binary on OpenBSD. (link)
internal: Use default AWS credential handling when fetching modules (link)

EXPERIMENTS:


module: When declaring an input variable for a module whose type constraint (module argument) contains an object type constraint, the type expressions for the attributes can be annotated with the experimental module modifier.
Marking an attribute as ""optional"" changes the type conversion behavior for that type constraint so that if the given value is a map or object that has no attribute of that name then Terraform will silently give that attribute the value module, rather than returning an error saying that it is required. The resulting value still conforms to the type constraint in that the attribute is considered to be present, but references to it in the recieving module will find a null value and can act on that accordingly.


module: This is an unusual experiment in that it doesn't directly allow you to use a new feature in your module configuration but instead it changes the automatic behavior of Terraform in modules where it's enabled.
For modules where this experiment is active, Terraform will consider the attribute sensitivity flags set in provider resource type schemas when propagating the ""sensitive"" flag through expressions in the configuration. This is experimental because it has the potential to make far more items in the output be marked as sensitive than before, and so we want to get some experience and feedback about it before hopefully making this the default behavior.
One important consequence of enabling this experiment is that you may need to mark more of your module's output values as module, in any case where a particular output value is derived from a value a provider has indicated as being sensitive. Without that explicit annotation, Terraform will return an error to avoid implicitly exposing a sensitive value via an output value.


If you try either of these features during their experimental periods and have feedback about them, please open a feature request issue. We are aiming to stabilize both features in the forthcoming v0.15 release, but their design may change in the meantime based on feedback. If we make further changes to the features during the v0.15 period then they will be reflected in v0.15 alpha releases."
113,"0.14.0-beta2
(This describes the changes since v0.13.4, rather than since v0.14.0-beta1.)
NEW FEATURES:
* Terraform now supports marking input variables as sensitive, and will propagate that sensitivity through expressions that derive from sensitive input variables.


module: Terraform will now generate a lock file in the configuration directory which you can check in to your version control so that Terraform can make the same version selections in future. (link)
If you wish to retain the previous behavior of always taking the newest version allowed by the version constraints on each install, you can run module to see that behavior.


UPGRADE NOTES:
* Outputs that reference sensitive values (which includes variables marked as sensitive, other module outputs marked as module, or attributes a provider defines as module if the module experiment is activated) must also be defined as sensitive, or Terraform will error at plan.
* The module argument inside provider configuration blocks has been documented as deprecated since Terraform 0.12. As of 0.14 it will now also generate an explicit deprecation warning. To avoid the warning, use link declarations instead. (link)
* The official MacOS builds of Terraform now require MacOS 10.12 Sierra or later. (link)
* TLS certificate verification for outbound HTTPS requests from Terraform CLI no longer treats the certificate's ""common name"" as a valid hostname when the certificate lacks any ""subject alternative name"" entries for the hostname. TLS server certificates must list their hostnames as a ""DNS name"" in the subject alternative names field. (link)
* Outbound HTTPS requests from Terraform CLI now enforce link's client-side downgrade protection checks. This should not significantly affect normal operation, but may result in connection errors in environments where outgoing requests are forced through proxy servers and other ""middleboxes"", if they have behavior that resembles a downgrade attack. (link)
* Terraform's HTTP client code is now slightly stricter than before in HTTP header parsing, but in ways that should not affect typical server implementations: Terraform now trims only ASCII whitespace characters, and does not allow module. (link)
* The module subcommand and the associated upgrade mechanisms are no longer available. Complete the v0.13 upgrade process before upgrading to Terraform v0.14.
* The module command, which did not offer additional functionality, has been removed.
ENHANCEMENTS:

module and module: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)
cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
command/help: text has been reorganized to be clearer and more helpful (link)
config: Added module argument for variable blocks, which supresses output where that variable is used (link)
When sensitive values are used as part of provisioner configuration, logging is disabled to ensure the values are not displayed to the UI (link)
config: Added module and module functions, which serve as a sort of dynamic version of the module and module or operators, respectively. These are intended to allow evaluating boolean conditions, such as in variable module blocks, across all of the items in a collection using module expressions. (link], [link)
config: New functions module and module for encoding text in various character encodings other than UTF-8. (link)
core: module no longer uses a separate refresh phase, all resources are updated on-demand during planning (link)
core: module can now apply to map keys that are not listed in the configuration (link)
module: Now has distinct rendering of lists, sets, and tuples, and correctly renders objects with module attribute values. (link)
module: Added support for OAuth2 application scopes. (link)
module: Will now do some slightly more opinionated normalization behaviors, using the documented idiomatic syntax. (link)
module's provider installation step will now abort promptly if Terraform receives an interrupt signal. (link)
backend/consul: Split state into chunks when outgrowing the limit of the Consul KV store. This allows storing state larger than the Consul 512KB limit. (link)
backend/consul: Add force-unlock support to the Consul backend (link)
On Unix-based operating systems other than MacOS, the module environment variable can now be a colon-separated list of multiple certificate search paths. (link)
On MacOS, Terraform will now use the module API to access the system trust roots, for improved consistency with other MacOS software. (link)

BUG FIXES:

backend/consul: Fix bug which prevented state locking when path has trailing module (link)
backend/pg: Always have the default workspace in the pg backend (link)
backend/pg: Properly quote schema_name in the pg backend configuration (link)
build: Fix crash with terraform binary on OpenBSD. (link
command/clistate: return an error on a state unlock failure [link] 
command/format: Fix incorrect heredoc syntax in plan diff output (link)
command/show: Hide sensitive outputs from display (link)
command/taint: If the configuration's module constraint is not met, the module subcommand will now correctly exit early. (link)
command/taint, untaint: Fix issue when using module (and module) with workspaces where statefile was not found. (link)
configs: Report an error when provider configuration attributes are incorrectly added to a module object. (link)
configs: Better errors for invalid terraform version constraints (link)
core: Prevent ""Inconsistent Plan"" errors when using dynamic with a block of TypeSet (link)
core: Errors with data sources reading old data during refresh, failing to refresh, and not appearing to wait on resource dependencies are fixed by updates to the data source lifecycle and the merging of refresh and plan (link)
core: Prevent evaluation of deposed instances, which in turn prevents errors when referencing create_before_destroy resources that have changes to their count or for_each values (link)
internal: Fix locksfile constraint output for versions like ""1.2"". (link)
internal: Omit duplicate version constraints when installing packages or writing locksfile. (link)
lang/funcs: fix panic when module is called with a negative offset (link)
lang/funcs: module will now only treat map as unknown if it is wholly unknown (link)
states/remote: fix module to work for all backends (link)

EXPERIMENTS:


module: When declaring an input variable for a module whose type constraint (module argument) contains an object type constraint, the type expressions for the attributes can be annotated with the experimental module modifier.
Marking an attribute as ""optional"" changes the type conversion behavior for that type constraint so that if the given value is a map or object that has no attribute of that name then Terraform will silently give that attribute the value module, rather than returning an error saying that it is required. The resulting value still conforms to the type constraint in that the attribute is considered to be present, but references to it in the recieving module will find a null value and can act on that accordingly.
If you try this feature during its experimental period and have feedback about it, please open a feature request issue. We are aiming to stabilize this feature in the forthcoming 0.15 release, but its design may change in the meantime based on feedback. If we make further changes to the feature during the 0.15 period then they will be reflected in 0.15 alpha releases.

"
114,"0.13.5 (October 21, 2020)
BUG FIXES:
* terraform: fix issue where the provider configuration was not properly attached to the configured provider source address by localname (link)
* core: fix a performance issue when a resource contains a very large and deeply nested schema (link)
* backend/azurerm: fix an issue when using the metadata host to lookup environments (link)"
115,"0.14.0 (Unreleased)
NEW FEATURES:
* module: Terraform will now generate a lock file in the configuration directory which you can check in to your version control so that Terraform can make the same version selections in future. (link)
module
UPGRADE NOTES:
* configs: The module argument inside provider configuration blocks has been documented as deprecated since Terraform 0.12. As of 0.14 it will now also generate an explicit deprecation warning. To avoid the warning, use link declarations instead. (link)
* The official MacOS builds of Terraform now require MacOS 10.12 Sierra or later. (link)
* TLS certificate verification for outbound HTTPS requests from Terraform CLI no longer treats the certificate's ""common name"" as a valid hostname when the certificate lacks any ""subject alternative name"" entries for the hostname. TLS server certificates must list their hostnames as a ""DNS name"" in the subject alternative names field. (link)
* Outbound HTTPS requests from Terraform CLI now enforce link's client-side downgrade protection checks. This should not significantly affect normal operation, but may result in connection errors in environments where outgoing requests are forced through proxy servers and other ""middleboxes"", if they have behavior that resembles a downgrade attack. (link)
* Terraform's HTTP client code is now slightly stricter than before in HTTP header parsing, but in ways that should not affect typical server implementations: Terraform now trims only ASCII whitespace characters, and does not allow module. (link)
* The module subcommand and the associated upgrade mechanisms are no longer available. Complete the v0.13 upgrade process before upgrading to Terraform v0.14.
ENHANCEMENTS:

module and module: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)
cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
configs: Added module argument for variable blocks, which supresses output where that variable is used (link)
configs: Added module function, which returns module if all elements in the given collection are module. This is primarily intended to make it easier to write variable validation conditions which operate on collections. (link)
core: module no longer uses a separate refresh phase, all resources are updated on-demand during planning (link)
core: module can now apply to map keys that are not listed in the configuration (link)
module: Now has distinct rendering of lists, sets, and tuples, and correctly renders objects with module attribute values. (link)
module: Added support for OAuth2 application scopes. (link)
module: Will now do some slightly more opinionated normalization behaviors, using the documented idiomatic syntax. (link)
module's provider installation step will now abort promptly if Terraform receives an interrupt signal. (link)
backend/consul: Split state into chunks when outgrowing the limit of the Consul KV store. This allows storing state larger than the Consul 512KB limit. (link)
backend/consul: Add force-unlock support to the Consul backend (link)
On Unix-based operating systems other than MacOS, the module environment variable can now be a colon-separated list of multiple certificate search paths. (link)
On MacOS, Terraform will now use the module API to access the system trust roots, for improved consistency with other MacOS software. (link)

BUG FIXES:

backend/consul: Fix bug which prevented state locking when path has trailing module (link)
backend/pg: Always have the default workspace in the pg backend (link)
backend/pg: Properly quote schema_name in the pg backend configuration (link)
build: Fix crash with terraform binary on OpenBSD. (link
command/clistate: return an error on a state unlock failure [link] 
command/format: Fix incorrect heredoc syntax in plan diff output (link)
command/taint: If the configuration's module constraint is not met, the module subcommand will now correctly exit early. (link)
command/taint, untaint: Fix issue when using module (and module) with workspaces where statefile was not found. (link)
configs: Report an error when provider configuration attributes are incorrectly added to a module object. (link)
configs: Better errors for invalid terraform version constraints (link)
core: Errors with data sources reading old data during refresh, failing to refresh, and not appearing to wait on resource dependencies are fixed by updates to the data source lifecycle and the merging of refresh and plan (link)
core: Prevent evaluation of deposed instances, which in turn prevents errors when referencing create_before_destroy resources that have changes to their count or for_each values (link)
lang/funcs: fix panic when module is called with a negative offset (link)
lang/funcs: module will now only treat map as unknown if it is wholly unknown (link)
states/remote: fix module to work for all backends (link)

EXPERIMENTS:


module: When declaring an input variable for a module whose type constraint (module argument) contains an object type constraint, the type expressions for the attributes can be annotated with the experimental module modifier.
Marking an attribute as ""optional"" changes the type conversion behavior for that type constraint so that if the given value is a map or object that has no attribute of that name then Terraform will silently give that attribute the value module, rather than returning an error saying that it is required. The resulting value still conforms to the type constraint in that the attribute is considered to be present, but references to it in the recieving module will find a null value and can act on that accordingly.
If you try this feature during its experimental period and have feedback about it, please open a feature request issue. We are aiming to stabilize this feature in the forthcoming 0.15 release, but its design may change in the meantime based on feedback. If we make further changes to the feature during the 0.15 period then they will be reflected in 0.15 alpha releases.

"
116,"0.14.0 (Unreleased)
UPGRADE NOTES:
* configs: The module argument inside provider configuration blocks has been documented as deprecated since Terraform 0.12. As of 0.14 it will now also generate an explicit deprecation warning. To avoid the warning, use link declarations instead. (link)
* The official MacOS builds of Terraform now require MacOS 10.12 Sierra or later. (link)
* TLS certificate verification for outbound HTTPS requests from Terraform CLI no longer treats the certificate's ""common name"" as a valid hostname when the certificate lacks any ""subject alternative name"" entries for the hostname. TLS server certificates must list their hostnames as a ""DNS name"" in the subject alternative names field. (link)
* Outbound HTTPS requests from Terraform CLI now enforce link's client-side downgrade protection checks. This should not significantly affect normal operation, but may result in connection errors in environments where outgoing requests are forced through proxy servers and other ""middleboxes"", if they have behavior that resembles a downgrade attack. (link)
* Terraform's HTTP client code is now slightly stricter than before in HTTP header parsing, but in ways that should not affect typical server implementations: Terraform now trims only ASCII whitespace characters, and does not allow module. (link)
* The module subcommand and the associated upgrade mechanisms are no longer available. Complete the v0.13 upgrade process before upgrading to Terraform v0.14.
ENHANCEMENTS:

module and module: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)
cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
configs: Added module argument for variable blocks, which supresses output where that variable is used (link)
configs: Added module function, which returns module if all elements in the given collection are module. This is primarily intended to make it easier to write variable validation conditions which operate on collections. (link)
core: module no longer uses a separate refresh phase, all resources are updated on-demand during planning (link)
core: module can now apply to map keys that are not listed in the configuration (link)
module: Now has distinct rendering of lists, sets, and tuples, and correctly renders objects with module attribute values. (link)
module: Added support for OAuth2 application scopes. (link)
module: Will now do some slightly more opinionated normalization behaviors, using the documented idiomatic syntax. (link)
module's provider installation step will now abort promptly if Terraform receives an interrupt signal. (link)
backend/consul: Split state into chunks when outgrowing the limit of the Consul KV store. This allows storing state larger than the Consul 512KB limit. (link)
backend/consul: Add force-unlock support to the Consul backend (link)
On Unix-based operating systems other than MacOS, the module environment variable can now be a colon-separated list of multiple certificate search paths. (link)
On MacOS, Terraform will now use the module API to access the system trust roots, for improved consistency with other MacOS software. (link)

BUG FIXES:

backend/consul: Fix bug which prevented state locking when path has trailing module (link)
backend/pg: Always have the default workspace in the pg backend (link)
backend/pg: Properly quote schema_name in the pg backend configuration (link)
build: Fix crash with terraform binary on OpenBSD. (link
command/clistate: return an error on a state unlock failure [link] 
command/format: Fix incorrect heredoc syntax in plan diff output (link)
command/taint: If the configuration's module constraint is not met, the module subcommand will now correctly exit early. (link)
command/taint, untaint: Fix issue when using module (and module) with workspaces where statefile was not found. (link)
configs: Report an error when provider configuration attributes are incorrectly added to a module object. (link)
core: Errors with data sources reading old data during refresh, failing to refresh, and not appearing to wait on resource dependencies are fixed by updates to the data source lifecycle and the merging of refresh and plan (link)
core: Prevent evaluation of deposed instances, which in turn prevents errors when referencing create_before_destroy resources that have changes to their count or for_each values (link)
lang/funcs: fix panic when module is called with a negative offset (link)
lang/funcs: module will now only treat map as unknown if it is wholly unknown (link)
states/remote: fix module to work for all backends (link)
"
117,"0.13.4 (September 30, 2020)
UPGRADE NOTES:

The built-in vendor (third-party) provisioners, which include module, module, module, and module are now deprecated and will be removed in a future version of Terraform. More information link.
Deprecated interpolation-only expressions are detected in more contexts in addition to resources and provider configurations. Module calls, data sources, outputs, and locals are now also covered. Terraform also detects interpolation-only expressions in complex values such as lists and objects. An expression like module should be rewritten as just module. (link] [link)

BUG FIXES:

command: Include schemas from required but unused providers in the output of module. This allows development tools such as the Terraform language server to offer autocompletion for the first resource for a given provider. (link)
core: create_before_destroy status is now updated in the state during refresh (link)
core: data sources using module, either directly or through their modules, are no longer are forced to wait until apply by other planned data source reads (link)
"
118,"0.14.0 (Unreleased)
UPGRADE NOTES:
* configs: The module argument inside provider configuration blocks has been documented as deprecated since Terraform 0.12. As of 0.14 it will now also generate an explicit deprecation warning. To avoid the warning, use link declarations instead. (link)
ENHANCEMENTS:

module and module: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)
cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
config: Added module function, which returns module if all elements in the given collection are module. This is primarily intended to make it easier to write variable validation conditions which operate on collections. (link)
core: module no longer uses a separate refresh phase, all resources are updated on-demand during planning (link)
module: Now has distinct rendering of lists, sets, and tuples, and correctly renders objects with module attribute values. (link)
module: Added support for OAuth2 application scopes. (link)
backend/consul: Split state into chunks when outgrowing the limit of the Consul KV store. This allows storing state larger than the Consul 512KB limit. (link)

BUG FIXES:

backend/consul: Fix bug which prevented state locking when path has trailing module (link)
build: fix crash with terraform binary on openBSD [#26249]
command/clistate: return an error on a state unlock failure [link] 
configs: Report an error when provider configuration attributes are incorrectly added to a module object. (link)
core: Errors with data sources reading old data during refresh, failing to refresh, and not appearing to wait on resource dependencies are fixed by updates to the data source lifecycle and the merging of refresh and plan (link)
lang/funcs: fix panic when element() is called with a negative offset (link)
states/remote: fix module to work for all backends (link)
"
119,"0.13.3 (September 16, 2020)
BUG FIXES:

build: fix crash with terraform binary on openBSD (link)
core: prevent create_before_destroy cycles by not connecting module close nodes to resource instance destroy nodes (link)
core: fix error where plan action changes from CreateThenDelete to DeleteThenCreate (link)
core: fix Cycle when create_before_destroy status wasn't checked from state (link)
core: fix ""inconsistent final plan"" error when changing the number of referenced resources to 0 (link)
states/remote: fix module to work for all backends (link)
"
120,"0.14.0 (Unreleased)
ENHANCEMENTS:

cli: A new global command line option module, placed before the selected subcommand, instructs Terraform to switch to a different working directory before executing the subcommand. This is similar to switching to a new directory with module before running Terraform, but it avoids changing the state of the calling shell. (link)
command: Added an experimental concise diff renderer. By default, Terraform plans now hide most unchanged fields, only displaying the most relevant changes and some identifying context. This experiment can be disabled by setting a module environment variable to module. (link)

BREAKING CHANGES:
* configs: The module argument inside provider configuration blocks is deprecated. Instead, use the required_providers setting. (link)
BUG FIXES:

command/clistate: return an error on a state unlock failure [link] 
lang/funcs: fix panic when element() is called with a negative offset (link)
states/remote: fix module to work for all backends (link)
"
121,"0.13.2 (September 02, 2020)
NEW FEATURES:

Network-based Mirrors for link: As an addition to the existing capability of ""mirroring"" providers into the local filesystem, a network mirror allows publishing copies of providers on an HTTP server and using that as an alternative source for provider packages, for situations where directly accessing the origin registries is impossible or undesirable. (link)

ENHANCEMENTS:

backend/http: add support for configuration by environment variable. (link)
command: Add support for provider redirects to module. If a provider in the Terraform Registry has moved to a new namespace, the module subcommand now detects this and follows the redirect where possible. (link)
command: Improve module error diagnostics when encountering what appears to be an in-house provider required by a pre-0.13 state file. Terraform will now display suggested module commands which will fix this specific problem. (link)

BUG FIXES:

command: Warn instead of error when the module subcommand with no arguments results in no outputs. This aligns the UI to match the 0 exit code in this situation, which is notable but not necessarily an error. (link)
terraform: Fix crashing bug when reading data sources during plan with blocks backed by objects, not collections (link)
terraform: Fix bug where variables values were asked for twice on the command line and provider input values were asked for but not saved (link)
"
122,"0.13.1 (August 26, 2020)
ENHANCEMENTS:

config: module and module now support address extensions of more than 32 bits (link)
cli: The directories that Terraform searches by default for provider plugins can now be symlinks to directories elsewhere. (This applies only to the top-level directory, not to nested directories inside it.) (link)
backend/s3: simplified mock handling and assume role testing (link)
backend/s3: support for appending data to the User-Agent request header with the TF_APPEND_USER_AGENT environment variable (link)

BUG FIXES:
* config: Override files containing module blocks can now override the special module argument. (link)
* cli: The state lock will now be unlocked consistently across both the local and remote backends in the module and module commands. [link] 
* cli: The module option to module and module now correctly handles addresses containing module instance indexes. (link)
* cli: module can now move the last resource from a module without panicking. (link)
* cli: If the output of module contains an outdated version notice, this is now printed after the version number and not before. (link)
* command: Prevent creation of workspaces with invalid names via the module environment variable, and allow any existing invalid workspaces to be deleted. (link)
* command: Fix error when multiple module flags are set on the command line. (link)
* command: Fix backend config override validation, allowing the use of module override files with the enhanced remote backend. (link)
* core: State snapshots now use a consistent ordering for resources that have the same name across different modules. Previously the ordering was undefined. (link)
* core: A module block producing an unknown number of blocks will no longer incorrectly produce the error ""Provider produced inconsistent final plan"" when the block type is backed by a set of objects. (link)
* core: Terraform will now silently drop attributes that appear in the state but are not present in the corresponding resource type schema, on the assumption that those attributes existed in a previous version of the provider and have now been removed. (link)
* core: The state upgrade logic for handling unqualified provider addresses from Terraform v0.11 and earlier will no longer panic when it encounters references to the built-in module provider. (link)
* internal: Clean up provider package download temporary files after installing. (link)
* terraform: Evaluate module call arguments for module even if defaults are given for input variables (link)
* terraform: Fix misleading Terraform module constraint diagnostics when multiple module settings exist in a single module (link)"
123,"0.13.0 (August 10, 2020)

This is a list of changes relative to Terraform v0.12.29. To see the
incremental changelogs for the v0.13.0 prereleases, see
link.

This section contains details about various changes in the v0.13 major release. If you are upgrading from Terraform v0.12, we recommend first referring to link for information on some common concerns during upgrade and guidance on ways to address them. (The final upgrade guide and the documentation for the new features will be published only when v0.13.0 final is released; until then, some links in this section will be non-functional.)
NEW FEATURES:
* link: Similar to the arguments of the same name in module and module blocks, these create multiple instances of a module from a single module block. (link)


link: Modules can now use the module argument to ensure that all module resource changes will be applied after any changes to the module targets have been applied. (link)


link: Terraform now supports a decentralized namespace for providers, allowing for automatic installation of community providers from third-party namespaces in the public registry and from private registries. (More details will be added about this prior to release.)


link: A new module block type inside module blocks allows module authors to define validation rules at the public interface into a module, so that errors in the calling configuration can be reported in the caller's context rather than inside the implementation details of the module. (link)


link: This backend stores state snapshots as Kubernetes secrets. (link)


BREAKING CHANGES:
* As part of introducing a new heirarchical namespace for providers, Terraform now requires an explicit module specification for any provider that is not in the ""hashicorp"" namespace in the main public registry. (link)
module


module: the previously-deprecated module option is now removed. (link)
To specify a non-default provider configuration for import, add the module meta-argument to the target module block.
* config: Inside module blocks that have module set, and inside any module blocks that are used by such module blocks, it is no longer valid to refer to any objects other than module, module, or module. (This was previously deprecated in a v0.12 minor release.) (link)
If you are using module to define provisioners not attached to a real resource, include any values your provisioners need in the module map and change the provisioner configuration to refer to those values via module.
* configs: At most one module module block is permitted per module (link)
If you previously had multiple module blocks in the same module, consolidate their requirements together into a single block.
* The official MacOS builds of Terraform CLI are no longer compatible with Mac OS 10.10 Yosemite; Terraform now requires at least Mac OS 10.11 El Capitan.
Terraform 0.13 is the last major release that will support 10.11 El Capitan, so if you are upgrading your OS we recommend upgrading to Mac OS 10.12 Sierra or later.
* The official FreeBSD builds of Terraform CLI are no longer compatible with FreeBSD 10.x, which has reached end-of-life. Terraform now requires FreeBSD 11.2 or later.
* backend/oss: The TableStore schema now requires a primary key named module of type module. (link)
* backend/s3: The previously-deprecated module, module, and module arguments are now removed. (link)
* backend/s3: The credential source preference order now considers EC2 instance profile credentials as lower priority than shared configuration, web identity, and ECS role credentials. (link)
* backend/s3: The module environment variable is no longer used. The timeout is now fixed at one second with two retries. (link)


NOTES:
* The module and module commands will now detect and report changes to root module outputs as needing to be applied even if there are no resource changes in the plan.
module


Terraform CLI now supports TLS 1.3 and supports Ed25519 certificates when making outgoing connections to remote TLS servers.
While both of these changes are backwards compatible in principle, certain legacy TLS server implementations can reportedly encounter problems when attempting to negotiate TLS 1.3. (These changes affects only requests made by Terraform CLI itself, such as to module registries or backends. Provider plugins have separate TLS implementations that will gain these features on a separate release schedule.)
* On Unix systems where module is set in module, Terraform will now use TCP for DNS resolution.
We don't expect this to cause any problem for most users, but if you find you are seeing DNS resolution failures after upgrading please verify that you can either reach your configured nameservers using TCP or that your resolver configuration does not include the module directive.
* The module command is no longer available. (link)
To upgrade from Terraform v0.11, first link and then upgrade to v0.13 from there.


ENHANCEMENTS:
* config: module function will now return a helpful error message if a given variable has an invalid name, rather than relying on a syntax error in the template parsing itself. (link)
* config: The configuration language now uses Unicode 12.0 character tables for certain Unicode-version-sensitive operations on strings, such as the module and module functions. Those working with strings containing new characters introduced since Unicode 9.0 may see small differences in behavior as a result of these table updates.
* config: The new module function takes a list or set of numbers and returns the sum of all elements. (link)
* config: Modules authored by the same vendor as the main provider they use can now pass metadata to the provider to allow for instrumentation and analytics. (link)
* cli: The module and module commands now recognize changes to root module outputs as side-effects to be approved and applied. This means you can apply root module output changes using the normal plan and apply workflow. (link)
* cli: When installing providers from the Terraform Registry, Terraform will verify the trust signature for partner providers, and allow for self-signed community providers. (link)
* cli: module will display detailed trust signature information when installing providers from the Terraform Registry and other provider registries. (link)
* cli: It is now possible to optionally specify explicitly which installation methods can be used for different providers in the CLI configuration, such as forcing a particular provider to be loaded from a particular directory on local disk instead of consulting its origin provider registry. (link)
* cli: The new module subcommand allows changing the selected provider for existing resource instances in the Terraform state. (link)
* cli: The new module subcommand can automatically construct or update a local filesystem mirror directory containing the providers required for the current configuration. (link)
* cli: module now produces machine-readable version information. (link)
* cli: module can now work with provider configurations containing references to other objects, as long as the data in question is already known in the current state. (link)
* cli: The module command will now exit with status code 1 if the given resource address does not match any resource instances. (link)
* cli: The module command now requires the full word ""yes"" to confirm, rather than just ""y"", for consistency with Terraform's other interactive prompts. (link)
* core: Several of Terraform's graph operations are now better optimized to support configurations with highly-connected graphs. (link, link)
* backend/remote: Now supports module. (link)
* backend/remote: Can now accept module options when creating a plan using remote operations, if supported by the target server. (Server-side support for this in Terraform Cloud and Terraform Enterprise will follow in forthcoming releases of each.) (link)
* backend/azurerm: Now uses the Giovanni Storage SDK to communicate with Azure. (link)
* backend/s3: The backend will now always consult the shared configuration file, even if the module environment variable isn't set. That environment variable is now ignored. (link)
* backend/s3: Region validation now automatically supports the new module (Africa (Cape Town)) region. (link)
module

backend/s3: A module prefix in the module argument is now expanded to the current user's home directory. (link)
backend/s3: The backend has a number of new options for customizing the ""assume role"" behavior, including controlling the lifetime and access policy of temporary credentials. (link)
backend/swift: The authentication options match those of the OpenStack provider. (link)

BUG FIXES:
* config: The module function can now correctly encode a single null value as the JSON expression module. (link)
* config: The module function no longer crashes when incorrectly given a non-string key. (link)
* config: The module function now correctly returns a zero-length string when given a length of zero, rather than ignoring that argument entirely. (link)
* config: module and module (that is, an infinity as an argument) now return another infinity with the same sign, rather than just a large integer. (link)
* config: The module function now supports the OpenSSH RSA key format. (link)
* config: The module function now returns more precise type information, making it usable for values passed to module, and will no longer crash if all of the given maps are empty. (link, link)
* vendor: The various set-manipulation functions, like module, will no longer panic if given an unknown set value (link)
* config: Fixed a crash with incorrect syntax in module and module files. (link)
* config: The function argument expansion syntax module no longer incorrectly fails with ""Invalid expanding argument value"" in situations where the expanding argument's type will not be known until the apply phase. (link)
* config: Variable module block error message checks no longer fail when non-ASCII characters are present. (link)
* cli: The module command (and the implied plan run by module with no arguments) will now print any warnings that were generated even if there are no changes to be made. (link)
* cli: module now correctly records the resource's use of either module or module based on the given target address. (link)
* cli: When using the module environment variable to override where Terraform looks for CLI configuration, Terraform will now ignore the default CLI configuration directory as well as the default CLI configuration file. (link)
* cli: The module command in OAuth2 mode now implements the PKCE OAuth 2 extension more correctly. Previously it was not compliant with all of the details of the specification. (link)
* cli: Fixed a potential crash when the module environment variable isn't set, causing the native service credentials store to be module. (link)
* command/fmt: Error messages will now include source code snippets where possible. (link)
* command/apply: module will no longer silently exit when given an absolute path to a saved plan file on Windows. (link)
* command/init: module will now produce an explicit error message if given a non-directory path for its configuration directory argument, and if a module file has a syntax error. Previously these were silently ignored. (link, link)
* command/console:  (link)
* command/import: The module command will now properly attach the configured provider for the target resource based on the configuration, making the module command line option unnecessary. (link)
* command/import: The module option now works correctly. It was inadvertently disabled as part of v0.12 refactoring. (link)
* command/show: Resource addresses are now consistently formatted between the plan and prior state in the module output. (link)
* core: Fixed a crash related to an unsafe concurrent read and write of a map data structure. (link)
* core: Instances are now destroyed only using their stored state, without re-evaluating configuration. This avoids a number of dependency cycle problems when ""delete"" actions are included in a plan. (link)
* provider/terraform: The module data source will no longer attempt to ""configure"" the selected backend during validation, which means backends will not try to perform remote actions such as verifying credentials during module. Local validation still applies in all cases, and the configuration step will still occur prior to actually reading the remote state in a normal plan/apply operation. (link)
* backend/remote: Backend will no longer crash if the user cancels backend initialization at an inopportune time, or if there is a connection error. (link) (link)
* backend/azurerm: The backend will now create a Azure storage snapshot of the previous Terraform state snapshot before writing a new one. (link)
* backend/s3: Various other minor authentication-related fixes previously made in the AWS provider. (link)
* backend/oss: Now allows locking of multiple different state files. (link)
* provisioner/remote-exec: The provisioner will now return an explicit error if the module connection argument is an empty string. Previously it would repeatedly attempt to resolve an empty hostname until timeout. (link)
* provisioner/chef: The provisioner will now gracefully handle non-failure (RFC062) exit codes returned from Chef. (link)
* provisioner/habitat: The provisioner will no longer generate module with world-readable permissions. (link)
* communicator/winrm: Support a connection timeout for WinRM module blocks. Previously this argument worked for SSH only. (link)
EXPERIMENTS:
* This release concludes the module link that was started in Terraform v0.12.20. If you were participating in the experiment, you should remove the experiment opt-in from your configuration as part of upgrading to Terraform 0.13.
module"
124,"0.13.0-rc1 (July 22, 2020)
BUG FIXES:

command/init: Fix confusing error message for locally-installed providers with invalid package structure (link)
core: Prevent outputs from being evaluated during destroy (link)
core: Fix the pruning of temporary values from the root module which will fail to evaluate during destroy (link)
core: Don't create redundant dependency edges between objects in different instances of the same module. (link)
core: Prevent quadratic memory usage with large numbers of instances by not storing the complete resource state in each instance (link)
core: Fix errors and remove cycles when a provider configuration references resources during a full destroy, and fix empty evaluation results when using self references in a destroy provisioner. (link)
"
125,"0.12.29 (July 22, 2020)
BUG FIXES:

core: core: Prevent quadratic memory usage with large numbers of instances by not storing the complete resource state in each instance (link)
"
126,"0.13.0-beta3 (July 01, 2020)
BUG FIXES:

backend/azurerm: support for snapshotting the blob used for remote state storage prior to change (link)
backend/remote: Prevent panic when there's a connection error (link)
command: Fix bug with global module/module/module flags introduced in 0.13.0beta2 (link)
command: Fix command test fixture modify-in-place bugs, which could cause state leak between tests (link)
command: Preserve more comments when rerunning 0.13upgrade (link)
command/console: enable use of impure functions in console (for example, bcrypt()) (link)
command/import: Fix module option (link)
command/init: return an error with invalid -backend-config files (link)
communicator/winrm: Inlcude any user-configured timeout for winrm connection (link)
config: Add missing validation to prevent provider configuration within modules using module (link)
configs: Fix nested provider requirements bug introduced in 0.13.0beta2 (link)
configs: Fix panic when module blocks have non-string attribute values (link)
configs: Fix panic for invalid resource provider (link)
core: Hide empty plans for misbehaving data sources (link)
provider/terraform: Don't change non-computed attribute, which result in a perpetual diff (link)
terraform: Relax import-specific provider configuration constraints, to permit any values that can be evaluated statically (link)
vendor: The module function will no longer panic if all given maps are empty (link)
vendor: The various set-manipulation functions, like module, will no longer panic if given an unknown set value (link)

BREAKING CHANGES:
* command/state: exit code 1 if module is called on a resource that does not exist (link)
* command/login: Require ""yes"" to confirm, no longer accepting ""y"" (link)"
127,"0.12.28 (June 25, 2020)
BUG FIXES:

build: build the 0.12 version of Terraform with Go 1.12.13, rather than 0.13 Terraform's 1.14.2 (link)
"
128,"0.12.27 (June 24, 2020)
BUG FIXES:

backend/remote: fix panic when there's a connection error to the remote backend (link)
"
129,"0.13.0-beta2 (June 17, 2020)
NOTES:

backend/s3: Deprecated module, module, and module arguments have been removed (link)
backend/s3: Credential ordering has changed from static, environment, shared credentials, EC2 metadata, default AWS Go SDK (shared configuration, web identity, ECS, EC2 Metadata) to static, environment, shared credentials, default AWS Go SDK (shared configuration, web identity, ECS, EC2 Metadata) (link)
backend/s3: The module environment variable no longer has any effect as we now depend on the default AWS Go SDK EC2 Metadata client timeout of one second with two retries (link)
Removed unused targets from Makefile. If you were previously using module or module, replace that usage with module (link)

ENHANCEMENTS:

backend/kubernetes: New module remote state storage backend (link)
backend/s3: Always enable shared configuration file support (no longer require module environment variable) (link)
backend/s3: Automatically expand module prefix for home directories in module argument (link)
backend/s3: Add module, module, module, and module arguments (link)
command/providers: Show providers in a tree of modules requiring them, along with a list of providers required by state (link)
provisioner/remote-exec: Return an error when the host field is empty (link)

BUG FIXES:

addrs: detect builtin ""terraform"" provider in legacy state (link)
backend/remote: do not panic if PrepareConfig or Configure receive null values (can occur when the user cancels the init command) (link)
backend/s3: Ensure configured profile is used (link)
backend/s3: Ensure configured STS endpoint is used during AssumeRole API calls (link)
backend/s3: Prefer AWS shared configuration over EC2 metadata credentials by default (link)
backend/s3: Prefer ECS credentials over EC2 metadata credentials by default (link)
backend/s3: Remove hardcoded AWS Provider messaging (link)
command/0.13upgrade: Fix module usage help text to include options (link)
command/0.13upgrade: Do not add source for builtin provider (link)
command/apply: Fix bug which caused Terraform to silently exit on Windows when using absolute plan path (link)
command/init: Fix bug which caused the default local plugindir to be omitted as a provider source location (link)
command/format: Fix bug which caused some diagnostics to print empty source lines (link)
command/version: add -json flag for machine-parsable version output (link)
config: Function argument expansion with module will no longer incorrectly return ""Invalid expanding argument value"" in situations where the expanding argument type isn't known yet. (link)
config: Fix crash in validation with non-ascii characters (link)
config: Don't panic if version constraint syntax isn't accepted by new version constraint parser (link)
config: Validate depends_on references in modules and outputs (link)
core: Fix crash with multiple nested modules (link)
core: Fix panic when importing with modules (link)
core: Allow targeting with expanded module addresses (link)
core: Allow referencing module instances (link)
"
130,"0.13.0-beta1 (June 03, 2020)
NEW FEATURES:

module and module for modules: Similar to the arguments of the same name in module and module blocks, these create multiple instances of a module from a single module block. (link)
module for modules: Modules can now use the module argument to ensure that all module resource changes will be applied after any changes to the module targets have been applied. (link)
Automatic installation of third-party providers: Terraform now supports a decentralized namespace for providers, allowing for automatic installation of community providers from third-party namespaces in the public registry and from private registries. (More details will be added about this prior to release.)
Custom validation rules for input variables: A new link inside module blocks allows module authors to define validation rules at the public interface into a module, so that errors in the calling configuration can be reported in the caller's context rather than inside the implementation details of the module. (link)

BREAKING CHANGES:

As part of implementing a new decentralized namespace for providers, Terraform now requires an explicit module specification for any provider that is not in the ""hashicorp"" namespace in the main public registry. (More details will be added about this prior to release, including links to upgrade steps.) (link)
backend/oss: Changes to the TableStore schema now require a primary key named module of type module (link)
command/0.12upgrade: this command has been replaced with a deprecation notice directing users to install terraform v0.12 to run module.  (link)
command/import: remove the deprecated module command line argument (link)
command/import: fixed a bug where the module command was not properly attaching the configured provider for a resource to be imported, making the module command line argument unnecessary. (link)
command/providers: the output of this command is now a flat list that does not display providers per module. (link)
config: Inside module blocks that have module set, and inside any module blocks that are used by such module blocks, it is now an error to refer to any objects other than module, module, or module (link)
configs: At most one module block is permitted per module (link)
The official MacOS builds of Terraform CLI are no longer compatible with Mac OS 10.10 Yosemite; Terraform now requires at least Mac OS 10.11 El Capitan. Terraform 0.13 is the last major release that will support 10.11 El Capitan, so if you are upgrading your OS we recommend upgrading to Mac OS 10.12 Sierra or later.
The official FreeBSD builds of Terraform CLI are no longer compatible with FreeBSD 10.x, which has reached end-of-life. Terraform now requires FreeBSD 11.2 or later.

NOTES:

The module and module command will now detect and report changes to root module outputs as able to be applied even if there are no resource changes in the plan. This will be an improvement in behavior for most users, since it will now be possible to change module blocks and use module to apply those changes, but it may require some changes to unusual situations where a root module output value was intentionally changing on every plan, which was not an intended usage pattern and is no longer supported.
Terraform CLI now supports TLS 1.3 and supports Ed25519 certificates when making outgoing connections to remote TLS servers. While both of these changes are backwards compatible in principle, certain legacy TLS server implementations can reportedly encounter problems when attempting to negotiate TLS 1.3. (These changes affects only requests made by Terraform CLI itself, such as to module registries or backends. Provider plugins have separate TLS implementations that will gain these features on a separate release schedule.)
On Unix systems where module is set in module, Terraform will now use TCP for DNS resolution. We don't expect this to cause any problem for most users, but if you find you are seeing DNS resolution failures after upgrading please verify that you can either reach your configured nameservers using TCP or that your resolver configuration does not include the module directive.
backend/s3: Region validation now automatically supports the new module (Africa (Cape Town)) region. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the link. When the region is not enabled, the Terraform S3 Backend will return errors during credential validation (e.g. module). (link)

ENHANCEMENTS:

config: module function will now return a helpful error message if a given variable has an invalid name, rather than relying on a syntax error in the template parsing itself. (link)
config: The configuration language now uses Unicode 12.0 character tables for certain Unicode-version-sensitive operations on strings, such as the module and module functions. Those working with strings containing new characters introduced since Unicode 9.0 may see small differences in behavior as a result of these table updates.
cli: When installing providers from the Terraform Registry, Terraform will verify the trust signature for partner providers, and allow for self-signed community providers (link)
cli: Display detailed trust signature information when installing providers from the Terraform Registry, including a link to more documentation on different levels of signature (link)
cli: It is now possible to optionally specify explicitly which installation methods can be used for different providers, such as forcing a particular provider to be loaded from a particular directory on local disk instead of consulting its origin provider registry. (link)
cli: Add state replace-provider subcommand to allow changing the provider source for existing resources (link)
cli: The module and module commands now recognize changes to root module outputs as side-effects to be approved and applied. This means you can apply root module output changes using the normal plan and apply workflow. (link)
cli: The new module subcommand can automatically construct or update a local filesystem mirror directory containing the providers required for the current configuration. (link)
config: The module function now returns more precise type information, making it usable for values passed to module (link)
config: Add ""sum"" function, which takes a list or set of numbers and returns the sum of all elements (link)
config: added support for passing metadata from modules to providers using HCL (link)
core: Significant performance enhancements for graph operations, which will help with highly-connected graphs (link)
core: Data resources can now be evaluated during plan, allowing module to work correctly, and allowing data sources to update immediately when their configuration changes. (link)
core: Data resource changes detected during planning will now always be reported in the plan output, to highlight a likely reason for effective configurationc changes elsewhere. Previously only data resources deferred to the apply phase would be shown. (link)
backend/azurerm: switching to use the Giovanni Storage SDK to communicate with Azure (link)
backend/remote: Now supports module. (link)
backend/remote: Can now accept module options when creating a plan using remote operations, if supported by the target server. (Server-side support for this in Terraform Cloud and Terraform Enterprise will follow in forthcoming releases of each.) (link)
backend/s3: Support automatic region validation for module (link)
backend/swift auth options match OpenStack provider auth (link)

BUG FIXES:
* backend/oss: Allow locking of multiple different state files (link)
* cli: Fix module to correctly set the resource each mode based on the target address (link)
* cli: The module command (and the implied plan run by module with no arguments) will now print any warnings that were generated even if there are no changes to be made. (link)
* cli: When using the module environment variable to override where Terraform looks for CLI configuration, Terraform will now ignore the default CLI configuration directory as well as the default CLI configuration file. (link)
* cli: The module command in OAuth2 mode now implements the PKCE OAuth 2 extension more correctly. Previously it was not compliant with all of the details of the specification. (link)
* command: Fix panic for nil credentials source, which can be caused by an unset HOME environment variable (link)
* command/fmt: Include source snippets in errors (link)
* command/format: Fix diagnostic output to show multi-line code snippets correctly (link)
* command/show (json output): fix inconsistency in resource addresses between plan and prior state output (link)
* core: Fix race in GetVariableValue (link)
* core: Instances are now destroyed only using their stored state, removing many cycle errors (link)
* core: Destroy provisioners should not evaluate for_each expressions (link)
* funcs/jsonencode: Fix null value handling (link)
* lang: Fix non-string key panics in map function (link)
* lang: module would previously return module, despite the length argument being module. This has been changed to return an empty string when length is zero. (link)
* lang: module and module would previously return a large integer value, rather than infinity. This has been fixed. (link)
* lang: Add support for OpenSSH RSA key format to module function (link)
* provisioner/chef: Gracefully handle non-failure (RFC062) exit codes (link)
* provisioner/habitat: Fix permissions on user.toml (link)
* provider/terraform: The module data source will no longer attempt to ""configure"" the selected backend during validation, which means backends will not try to perform remote actions such as verifying credentials during module. Local validation still applies in all cases, and the configuration step will still occur prior to actually reading the remote state in a normal plan/apply operation. (link)
* vendor: Fix crash when processing malformed JSON (link)
EXPERIMENTS:


This release concludes the module link that was started in Terraform v0.12.20. If you were participating in the experiment, you should remove the experiment opt-in from your configuration as part of upgrading to Terraform 0.13.
The experiment received only feedback that can be addressed with backward-compatible future enhancements, so it's been accepted into this release as stable with no changes to its original design so far. We'll consider additional features related to custom validation in future releases after seeing how it's used in real-world modules.

"
131,"ENHANCEMENTS:

backend/remote: Can now accept module options when creating a plan using remote operations, if supported by the target server. (Server-side support for this in Terraform Cloud and Terraform Enterprise will follow in forthcoming releases of each.) (https://github.com/hashicorp/terraform/issues/24834)
cli: A special new lifecycle mode for provider plugins where they are assumed to be controlled by an external process outside of Terraform. This is for automated provider plugin testing only, and is not an end-user feature. (https://github.com/hashicorp/terraform/issues/24674)
"
132,"NOTES:

backend/s3: Region validation now automatically supports the new module (Africa (Cape Town)) region. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the link. When the region is not enabled, the Terraform S3 Backend will return errors during credential validation (e.g. module). (link)

ENHANCEMENTS:

backend/s3: Support automatic region validation for module (link)
backend/remote: Add support for force push to remote backend (link)

BUG FIXES:
* core: Destroy provisioners should not evaluate for_each expressions (link)
* core: Fix races in GetVariableValue (link)"
133,"NOTES:

cli: Windows executable signing.

Our Windows 32-bit and 64-bit executables for this version and up will be signed with a HashiCorp cert. Windows users will no longer see a warning about an ""unknown publisher"" when running our software.
BUG FIXES:
* command/login: Fix bug when using terraform login on Windows (link)
* registry: Fix panic when server is unreachable (link)"
134,
135,"ENHANCEMENTS:
* registry: Add configurable retries for module and provider discovery requests to the remote registry (link)
* registry: Add configurable request timeout for the remote registry client (link)
BUG FIXES:

cli: Fix terraform state mv to correctly set the resource each mode based on the target address (link)
cli: The module command (and the implied plan run by module with no arguments) will now print any warnings that were generated even if there are no changes to be made. (link)
"
136,"NEW FEATURES:
* backend/cos: New backend ""cos"", supporting using Tencent Cloud Storage as a remote backend.
* command/login: Enable ""terraform login"" and add support for UI-generated tokens (link)
* command/logout: Add ""terraform logout"" command to remove local credentials (link)
ENHANCEMENTS:

command/workspace delete: release lock after workspace removal warning (link)
lang/funcs: add module function (link)

BUG FIXES:
* command/state show: Fix an issue when a resource has a non-default provider configured (link)
* backend/remote-state: Fix issues where lingering lock files remained when deleting non-empty workspaces (link)
* command/import: Release lock if initialization error occurs on import (link)
* terraform: Fix panic when using module with a set containing module values (link)"
137,"ENHANCEMENTS:
* config: New built-in functions module and module are intended to ease working with data structures whose shape isn't known statically. (link)
* config: New, optional syntax for link setting in module blocks. This is not intended for general use yet but will support upcoming enhancements. [link] 
BUG FIXES:
* command/show: Fix an issue with show and aliased providers (link)
* core: Always clean up empty resources before empty modules (link)
* internal/modsdir/manifest: Fix CLI issue with Windows machines (link)
EXPERIMENTS:


This release includes an opt-in experiment for link.
The feature is not yet finalized and is subject to breaking changes even in minor releases, but we're introducing it here in order to solicit feedback from module developers about which use-cases it is meeting, any use-cases it isn't meeting, and any situations where things feel harder to express than they might be.
Due to the experimental nature of this feature, we do not recommend using it in ""production"" modules yet and we require an explicit link of module. Depending on what feedback we receive, the design of this experimental feature may change significantly in future versions without an automatic upgrade path.

"
138,"ENHANCEMENTS:
* command/init: Cache Terraform Registry metadata responses when handling multiple references to the same module. (link)
* command/state-mv: Detect and remove references elsewhere in the state to the source address in a module operation. This does not affect any current operations but will cause the resulting state snapshot to be different than before, and a future version of Terraform may make use of this additional precision. (link)
BUG FIXES:

command/init: Fix an issue with via an update to go-getter where modules would fail to download from the registry (link)
command/init: use backend config from state when module is used during module. (link)
core: Do not evaluate unused config values, which may not be valid during destroy (link)
core: Better error handling for an odd ""should never happen"" situation regarding the restoration of a deposed instance during a module replace action. While this does not yet fix the situation (it can still happen), it now has a specialized error message to hopefully help gather some more information about the root cause in future reports. (link)
core: Prevent insertion of default providers when resources are removed from the config. (link)
core: Detect and handle dependencies implied by references in a module block directly within a module block. (link)
communicator/ssh: Fix deadlock when SSH agent forwarding fails. (link)
"
139,"NOTES:


cli: Our darwin releases for this version and up will be signed and notarized according to Apple's requirements.
Prior to this release, MacOS 10.15+ users attempting to run our software link seeing the error: ""'terraform' cannot be opened because the developer cannot be verified."" This error affected all MacOS 10.15+ users who downloaded our software directly via web browsers, and was caused by link.
link.
MacOS 10.15+ users should plan to upgrade to 0.12.18+.


UPGRADE NOTES:


Inside module blocks that have module set, and inside any module blocks that are used by such provisioner blocks, it is now deprecated to refer to any objects other than module, module, and module.
Terraform has historically allowed this but doing so tends to cause downstream problems with dependency cycles or incorrect destroy ordering because it causes the destroy phase of one resource to depend on the existing state of another. Although this is currently only a warning, we strongly suggest seeking alternative approaches for existing configurations that are hitting this warning in order to avoid the risk of later problems should you need to replace or destroy the related resources.
This deprecation warning will be promoted to an error in a future release.


ENHANCEMENTS:

provisioners: Warn about the deprecation of non-self references in destroy-time provisioners, both to allow preparation for this later becoming an error and also as an extra hint for the ""Cycle"" errors that commonly arise when such references are used. (link)
cli: The module and module commands (and some others) now accept the additional option module. If set, and if Terraform produces warnings that are not also accompanied by errors, then the warnings will be presented in the output in a compact form that includes only the summary information, thus providing a compromise to avoid warnings overwhelming the output if you are not yet ready to resolve them. (link)

BUG FIXES:

backend/s3: Fix for users with >1000 workspaces (link)
cli: Allow moving indexed resource instances to new addresses that that don't yet exist in state (link)
cli: Improved heuristics for log level filtering with the module environment variable, although it is still not 100% reliable for levels other than module due to limitations of Terraform's internal logging infrastructure. Because of that, levels other than module will now cause the logs to begin with a warning about potential filtering inaccuracy. (link)
command/show: Fix panic on show plan (link)
config: Fixed referencing errors generally involving module (link)
provisioners: The built-in provisioners (module, module, module, etc) will no longer fail when the module environment variable is set. (link)
"
140,"SECURITY NOTES:


If you are using the Azure remote state backend and you are using a SAS Token for authentication, please refer to link.
Prior versions of the backend may have transmitted your state to the storage service using cleartext HTTP unless you specifically requested HTTPS when generating your SAS Token. This does not affect any other backends, and does not affect the Azure backend when using other authentication mechanisms.


NEW FEATURES:

lang/funcs: Add module functions

ENHANCEMENTS:

cli: Terraform will now consolidate many warnings with the same summary text into fewer warning items, in order to avoid excessive amounts of warnings making it hard to read other output from Terraform commands. (link)
core: The upgrade logic for moving from the Terraform 0.11 to the Terraform 0.12 state snapshot format (internally, format version 3 to version 4) will now tolerate and ignore dependencies with invalid addresses, which tend to be left behind when following the module directive to rename resources whose names start with digits prior to upgrading to Terraform 0.12. This should allow upgrading the state for a configuration that in the past had digit-prefixed resource names, once those names have been fixed in the configuration and state using the instructions given by module in Terraform 0.11.14. (link)
"
141,"0.12.16 (November 18, 2019)
BUG FIXES:

command/0.12upgrade: fix panic when int value is out of range (link)
core: fix cycle between dependencies with create_before_destroy (link)
backend/remote: default .terraformignore paths will now work on Windows (link)
"
142,"BUG FIXES:


various commands: Fixed errant error ""Initialization required. Please see the error message above."" (link)
The error was produced on some of Terraform's subcommands (in particular module and module, but possibly others) if a warning was emitted during configuration loading and if a module block was present. This issue has been present since v0.12.0 for any configuration that produces configuration-related deprecation warnings, but it became more visible in v0.12.14 due to the addition of several more situations that could produce warnings.

"
143,"UPGRADE NOTES:


Terraform v0.12.0 included several changes to the Terraform language involving making expressions, type constraints, keywords, and references first-class in the language syntax, removing the need for placing thee items either in quoted strings or in interpolation syntax. Terraform v0.11 required these items to be quoted because the underlying language could not represent them any other way, while Terraform v0.12 expects them to be unquoted in order to improve readability.
We have been accepting both forms for backward-compatibility with existing configurations and examples since the inititial v0.12.0 release. Having maintained compatibility for both forms for several versions we are now beginning the deprecation cycle for the old usage by having Terraform emit deprecation warnings.
Terraform will still accept the older forms in spite of these warnings, so no immediate action is required. If your modules are targeting Terraform v0.12.0 and later exclusively, you can silence the warnings by removing the quotes, as directed in the warning message. In a future major version of Terraform, some of these warnings will be elevated to be errors.
The summary of the warning for these situations will be one of the following:

Interpolation-only expressions are deprecated: an expression like module should be rewritten as just module.
Quoted type constraints are deprecated: In a module block, a type constraint module should be written as module, module as module, and module as just module.
Quoted keywords are deprecated: In certain contexts that expect special keywords, such as module in module blocks, the keyword should be unquoted.
Quoted references are deprecated: In the module and module meta-arguments, quoted references like module should be rewritten without the quotes, e.g. as module.

The above changes are made automatically by the upgrade tool for users who are link. These warnings are intended to help those who are using Terraform for the first time at Terraform 0.12 but who may have found examples online that are written for older versions of Terraform, in order to guide towards the modern Terraform style.


The module command would formerly treat no outputs at all as an error, exiting with a non-zero status. Since it's expected for some root modules to have no outputs, the command now returns with success status zero in this situation, but still returns the error on stderr as a compromise to provide an explanation for why nothing is being shown.


ENHANCEMENTS:

config: Redundant interpolation syntax for attribute values and legacy (0.11-style) variable type constrants will now emit deprecation warnings. (link)
config: Keywords and references in module, module, and in provisioner module and module will now emit deprecation warnings. (link)
command/output: Now treats no defined outputs as a success case rather than an error case, returning exit status zero instead of non-zero. (link] [link)
backend/artifactory: Will now honor the module and module environment variables when appropriate, to allow sending requests to the Artifactory endpoints via a proxy. (link)

BUG FIXES:

backend/remote: Filter environment variables when loading context for remote backend (link)
command/plan: Previously certain changes to lists would cause the list diff in the plan output to miss items. Now module will show those items as expected. (link)
command/show: When showing a saved plan file not in JSON mode, use the same presentation as module itself would've used. (link)
command/force-unlock: Return an explicit error when the local-filesystem lock implementation receives the wrong lock id. Previously it was possible to see either an incorrect error or no error at all in that case. (link)
core: Store absolute instance dependencies in state to allow for proper destroy ordering (link)
core: Ensure tainted status is maintained when a destroy operation fails (link)
config: module function will no longer panic when it should produce an empty map as its result. (link)
cli: When running Terraform as a sub-process of itself, we will no longer produce errant prefixes on the console output. While we don't generally recommend using Terraform recursively like this, it was behaving in this strange way due to an implementation detail of how Terraform captures ""panic"" crashes from the Go runtime, and that subsystem is now updated to avoid that strange behavior. (link)
provisioners: Sanitize output to filter invalid utf8 sequences (link)
"
144,"UPGRADE NOTES:


Remote backend local-only operations: Previously the remote backend was not correctly handling variables marked as ""HCL"" in the remote workspace when running local-only operations like module, instead interpreting them as literal strings as described in link.
That behavior is now corrected in this release, but in the unlikely event that an existing remote workspace contains a variable marked as ""HCL"" whose value is not valid HCL syntax these local-only commands will now fail with a syntax error where previously the value would not have been parsed at all and so an operation not relying on that value may have succeeded in spite of the problem. If you see an error like ""Invalid expression for var.example"" on local-only commands after upgrading, ensure that the remotely-stored value for the given variable uses correct HCL value syntax.
This does not affect true remote operations like module and module, because the processing of variables for those always happens in the remote system.


BUG FIXES:

config: Fix regression where self wasn't properly evaluated when using for_each (link)
config: dotfiles are no longer excluded when copying existing modules; previously, any dotfile/dir was excluded in this copy, but this change makes the local copy behavior match go-getter behavior (link)
core: Ensure create_before_destroy ordering is enforced with dependencies between modules (link)
core: Fix some destroy-time cycles due to unnecessary edges in the graph, and remove unused resource nodes (link)
backend/remote: Correctly handle remotely-stored variables that are marked as ""HCL"" when running local-only operations like module. Previously they would produce a type mismatch error, due to misinterpreting them as literal strings. (link)
"
145,"BUG FIXES:

backend/remote: Don't do local validation of whether variables are set prior to submitting, because only the remote system knows the full set of configured stored variables and environment variables that might contribute. This avoids erroneous error messages about unset required variables for remote runs when those variables will be set by stored variables in the remote workspace. (link)
"
146,"ENHANCEMENTS:

backend/s3: Support module in AWS configuration files (link)
backend/remote: Remote backend will now ignore all .terraform/ (exclusive of .terraform/modules) and .git/ directories for uploads during remote plans/applies. You can exclude files from upload to TFC by adding a .terraformignore file to your configuration directory, more details at https://www.terraform.io/docs/backends/types/remote.html (link)

BUG FIXES:

config: Clean up orphan modules in the presence of -target (link)
config: Always evaluate whole resources rather than instances in expressions, so that invalid instance indexes can return a useful error rather than unknown (link)
command/jsonplan: fix bug with missing nested modules module output (link)
command/show: Fix panic when the only resource instance is deposed (link)
commands: When required root module variables are not provided and interactive input is disabled (module), produce a proper ""variable not defined"" error rather than falling through to an internal assertion failure. (link)
provisioner/puppet: fix bug when connection type was not set in config (link)
"
147,"ENHANCEMENTS:

module and module will now warn when the module option is used, to draw attention to the fact that the result of applying the plan is likely to be incomplete, and to remind to re-run module with no targets afterwards to ensure that the configuration has converged. (link)
config: New function module for parsing strings containing digits as integers in various bases. (link)
config: New function module, which is a companion to the existing function module which can allocate multiple consecutive subnet prefixes (possibly of different prefix lengths) in a single call. (link)
backend/google: The GCS backend now supports OAuth2 token authentication. (link)
provisioner/habitat: Multiple updates and fixes, see PR for details (link)

BUG FIXES:

backend/manta: fix panic when module was not set (link)
"
148,"NOTES:
* core: module is now processed (in addition to existing behaviors) before the provider plan is run. This means that users may see fewer planned changes when using module, as before this change, changes to ignored attributes were still being sent to CustomizeDiff in providers (which could mean cascading changes for some resources). This should be indicative that providers are no longer getting changes that were marked as ignored, but if unexpected plans are seen while using module, investigate the settings in the module block to ensure the appropriate attributes are set. (link)
ENHANCEMENTS:
* provisioners/habitat: module argument available to automate accepting the EULA, now required by this client (link)
* config: add source addressing to unknown value errors in module (link)
BUG FIXES:
* command/console: support -var and -var-file flags (link)
* command/show: Fixed bug with wrong errors being returned or swallowed. (link)
* config: The module, module, and module functions now behave correctly with IPv6 prefixes that are short enough for the host portion to be greater than 64-bit or 32-bit (depending on the target architecture). (link)
* config: Fixed bug on empty sets with module (link)"
149,"0.12.8 (September 04, 2019)
NEW FEATURES:
* lang/funcs: New module function, for finding static local files that match a glob pattern. (link)
ENHANCEMENTS:
* remote-state/pg: add option to skip schema creation (link)
BUG FIXES:
* command/console: use user-supplied module (link)
* config: ensure sets are appropriately known for module (link)"
150,"0.12.7 (August 22, 2019)
NEW FEATURES:
* New functions module and module allow applying a regular expression pattern to a string and retrieving any matching substring(s) (link)
ENHANCEMENTS:
* lang/funcs: module can work with maps of lists, maps and objects (link)
* SDK: helper/acctest: Add function to return random IP address (link)
* SDK: httpclient: Introduce composable module (link)
* connection/ssh: Support certificate authentication (link)
BUG FIXES:
* config: reduce MinIems and MaxItems  validation during decoding, to allow for use of dynamic blocks (link)
* config: don't validate MinItems and MaxItems in CoerceValue, allowing providers to set incomplete values (link)
* config: fix panic on tuples with module (link)
* config: fix references to module of module in provisioners (link)
* config: fix panic when using nested dynamic blocks (link)
* config: ensure consistent evaluation when moving between single resources and module in addressing (link)
* core: only start a single instance of each required provisioner (link)
* command: fix issue where commands occasionally exited before the error message printed (link)
* command/0.12upgrade: use user-supplied plugin-dir (link)
* command/hook_ui: Truncate the ID considering multibyte characters (link)
* command/fmt: Terraform fmt no longer inserts spaces after % (link)
* command/state: Allow moving resources to modules not yet in state (link)
* backend/google: Now using the OAuth2 token endpoint on module instead of module. These endpoints are equivalent in functionality but module hosts are resolvable from private Google Cloud Platform VPCs where other connectivity is restricted. (link)"
151,"NOTES:

backend/s3: After this update, the AWS Go SDK will prefer credentials found via the module environment variable when both the module environment variable and the module and module environment variables are statically defined. Previously the SDK would ignore the module environment variable, if static environment credentials were also specified. This is listed as a bug fix in the AWS Go SDK release notes. (link)

NEW FEATURES:
* backend/oss: added support for assume role config (link)
* config: Resources can now use a for_each meta-argument (link)
ENHANCEMENTS:
* backend/s3: Add support for assuming role via web identity token via the module and module environment variables (link)
* backend/s3: Support automatic region validation for module. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the link (link)
* connection/ssh: Improve connection debug messages (link)
BUG FIXES:
* backend/remote: remove misleading contents from error message (link)
* backend/s3: Load credentials via the module environment variable (if available) when module is defined along with module and module (link)
* config: Improve conditionals to returns the correct type when dynamic values are present but unevaluated (link)
* config: Fix panic when mistakingly using module on an attribute (link)
* cli: Fix crash with reset connection during init (link)
* cli: show all deposed instances and prevent crash in module command (link)
* configs/configupgrade: Fix crash with nil hilNode (link)
* command/fmt: now formats correctly in presence of here-docs (link)
* helper/schema: don't skip deprecation check during validation when attribute value is unknown (link)
* plugin/sdk: allow MinItems > 1 when dynamic blocks (link)
* plugin/sdk: fix reflect panics in helper/schema validation (link)"
152,"ENHANCEMENTS:
* command/format: No longer show no-ops in module, since nothing will change (link)
* backend/s3: Support for assuming role using credential process from the shared AWS configuration file (support profile containing both module and module configurations) (link)
* connection/ssh: Abort ssh connections when the server is no longer responding (link)
* connection/ssh: Support ssh diffie-hellman-group-exchange-sha256 key exchange (link)
BUG FIXES:
* backend/remote: fix conflict with normalized config dir and vcs root working directory (link)
* backend/remote: be transparent about what filesystem prefix Terraform is uploading to the remote system, and why it's doing that (link)
* configs: Ensure diagnostics are properly recorded from nested modules (link)
* core: Prevent inconsistent final plan error when using dynamic in a set-type block (link)
* lang/funcs: Allow null values in module function (link)"
153,"NEW FEATURES: 

lang/funcs: new module function returns the absolute path to a given file (link)
backend/swift: support for user configured state object names in swift containers (link)

BUG FIXES:

core: Prevent crash when a resource has no current valid instance (link)
plugin/sdk: Prevent empty strings from being replaced with default values (link)
plugin/sdk: Ensure resource timeouts are not lost when there is an empty plan (link)
plugin/sdk: Don't add null elements to diagnostic paths when validating config (link)
lang/funcs: Add missing map of bool support for module (link)
config: Fix issue with downloading BitBucket modules from deprecated V1 API by updating go-getter dependency (link)
config: Fix conditionals to evaluate to the correct type when using null (link)
"
154,"ENHANCEMENTS:

config: add GCS source support for modules (link)
command/format: Reduce extra whitespaces & new lines (link)
backend/s3: Support for chaining assume IAM role from AWS shared configuration files (link)

BUG FIXES:

configs: Can now use references like module in module to ignore in-place updates to specific keys in a map (link)
configs: Fix panic on missing value for module attribute in module blocks. (link)
lang/funcs: Fix module panic on null values. Now will give an error if null used (link)
backend/remote: Fix ""Conflict"" error if the first state snapshot written after a Terraform CLI upgrade has the same content as the prior state. (link)
backend/s3: Fix AWS shared configuration file credential source not assuming a role with environment and ECS credentials (link)
"
155,"NEW FEATURES:

provisioners: new provisioner: module (link)
module function for generating a sequence of numbers as a list (link)
module and experimental module functions for working with YAML-serialized data (link)
module function for generating name-based (as opposed to pseudorandom) UUIDs (link)
backend/oss: Add support for Alibaba OSS remote state (link)

ENHANCEMENTS:

config: consider build metadata when interpreting module versions (link)
backend/http: implement retries for the http backend (link)
backend/swift: authentication mechanisms now more consistent with other OpenStack-compatible tools (link)
backend/swift: add application credential support (link)

BUG FIXES:

command/show: use the state snapshot included in the planfile when rendering a plan to json (link)
config: Fix issue with empty dynamic blocks failing when usign ConfigModeAttr (link)
core: Re-validate resource config during final plan (link)
core: Fix missing resource timeouts during destroy (link)
core: Don't panic when encountering an invalid module (link)
backend: Fix panic when upgrading from a state with a hash value greater than MaxInt (link)
"
156,"BUG FIXES:

core: Always try to select a workspace after initialization (link)
command/show: fix inconsistent json output causing a panic [link] 
config: module function no longer panics when given an empty list (link)
config: Don't panic when a module constraint is added to a module that was previously initialized without one (link)
config: module function argument type checking will no longer fail incorrectly during validation (link)
backend/local: Don't panic if an instance in the state only has deposed instances, and no current instance (link)
"
157,"
This is the aggregated summary of changes compared to v0.11.14. If you'd like to see the incremental changelog through each of the v0.12.0 prereleases, please refer to link.

The focus of v0.12.0 was on improvements to the Terraform language made in response to all of the feedback and experience gathered on prior versions. We hope that these language improvements will help to make configurations for more complex situations more readable, and improve the usability of re-usable modules.
However, an overhaul of this kind inevitably means that 100% compatibility is not possible. The updated language is designed to be broadly compatible with the 0.11 language as documented, but some of the improvements required a slightly stricter parser and language model in order to resolve ambiguity or to give better feedback in error messages.
If you are upgrading to v0.12.0, we strongly recommend reading link to learn the recommended upgrade process, which includes a tool to automatically upgrade many improved language constructs and to indicate situations where human intuition is required to complete the upgrade.
Incompatibilities and Notes


As noted above, the language overhaul means that several aspects of the language are now parsed or evaluated more strictly than before, so configurations that employ workarounds for prior version limitations or that followed conventions other than what was shown in documentation may require some updates. For more information, please refer to link.


In order to give better feedback about mistakes, Terraform now validates that all variable names set via module and module options correspond to declared variables, generating errors or warnings if not. In situations where automation is providing a fixed set of variables to all configurations (whether they are using them or not), use link instead, which are ignored if they do not correspond to a declared variable.


The wire protocol for provider and provisioner plugins has changed, so plugins built against prior versions of Terraform are not compatible with Terraform v0.12. The most commonly-downloaded providers already had v0.12-compatible releases at the time of v0.12.0 release, but some other providers (particularly those distributed independently of the module installation mechanism) will need to make new releases before they can be used with Terraform v0.12 or later.


The index API for automatic provider installation in module is now provided by the Terraform Registry at module, rather than the indexes directly on module. The ""releases"" server is still currently the distribution source for the release archives themselves at the time of writing, but that may change over time.


The serialization formats for persisted state snapshots and saved plans have changed. Third-party tools that parse these artifacts will need to be updated to support these new serialization formats.


For most use-cases, we recommend instead using link to read the content of state or plan, in a form that is less likely to see significant breaking changes in future releases.

link now has a slightly smaller scope than before, focusing only on configuration syntax and type/value checking. This makes it safe to run in unattended scenarios, such as on save in a text editor.

New Features
The full set of language improvements is too large to list them all out exhaustively, so the list below covers some highlights:


First-class expressions: Prior to v0.12, expressions could be used only via string interpolation, like module. Expressions are now fully integrated into the language, allowing them to be used directly as argument values, like module.


module expressions: This new expression construct allows the construction of a list or map by transforming and filtering elements from another list or map. For more information, refer to link.


Dynamic configuration blocks: For nested configuration blocks accepted as part of a resource configuration, it is now possible to dynamically generate zero or more blocks corresponding to items in a list or map using the special new module block construct. This is the official replacement for the common (but buggy) unofficial workaround of treating a block type name as if it were an attribute expecting a list of maps value, which worked sometimes before as a result of some unintended coincidences in the implementation.


Generalised ""splat"" operator: The module syntax was previously a special case only for resources with module set. It is now an operator within the expression language that can be applied to any list value. There is also an optional new splat variant that allows both index and attribute access operations on each item in the list. For more information, refer to link.


Nullable argument values: It is now possible to use a conditional expression like module to conditionally leave an argument value unset, whereas before Terraform required the configuration author to provide a specific default value in this case. Assigning module to an argument is equivalent to omitting that argument entirely.


Rich types in module inputs variables and output values: Terraform v0.7 added support for returning flat lists and maps of strings, but this is now generalized to allow returning arbitrary nested data structures with mixed types. Module authors can specify an expected link for each input variable to allow early type checking of arguments.


Resource and module object values: An entire resource or module can now be treated as an object value within expressions, including passing them through input variables and output values to other modules, using an attribute-less reference syntax, like module.


Extended template syntax: The simple interpolation syntax from prior versions is extended to become a simple template language, with support for conditional interpolations and repeated interpolations through iteration. For more information, see link.


module and module interpolation functions: Due to the richer type system in the new configuration language implementation, we can now offer functions for decoding serialization formats. link is the opposite of link, while link provides a way to load in lists of maps from a compact tabular representation.


Revamped error messages: Error messages relating to configuration now always include information about where in the configuration the problem was found, along with other contextual information. We have also revisited many of the most common error messages to reword them for clarity, consistency, and actionability.


Structual plan output: When Terraform renders the set of changes it plans to make, it will now use formatting designed to be similar to the input configuration language, including nested rendering of individual changes within multi-line strings, JSON strings, and nested collections.


Other Improvements


module now accepts an argument module which produces machine-readable output. Please refer to the documentation for this command for details on the format and some caveats that consumers must consider when using this interface. (link)


The JSON-based variant of the Terraform language now has a more tightly-specified and reliable mapping to the native syntax variant. In prior versions, certain Terraform configuration features did not function as expected or were not usable via the JSON-based forms. For more information, see link.


The new built-in function link allows rendering a template from a file directly in the language, without installing the separate Template provider and using the module data source.


The new built-in function link, which is a specialized string formatting function for creating machine-oriented timestamp strings in various formats.


The new built-in functions link, which reverses the order of items in a list, and link, which reverses the order of Unicode characters in a string.


A new module state storage backend allows storing state in a PostgreSQL database.


The module state storage backend supports new authentication mechanisms, custom resource manager endpoints, and HTTP proxies.


The module state storage backend now supports module in AWS configuration files, support for the new AWS regions module and module, and several other improvements previously made in the module provider.


The module state storage backend now supports locking and workspaces.


Bug Fixes
Quite a few bugs were fixed indirectly as a result of improvements to the underlying language engine, so a fully-comprehensive list of fixed bugs is not possible, but some of the more commonly-encountered bugs that are fixed in this release include:


config: The conditional operator module now works with result values of any type and only returns evaluation errors for the chosen result expression, as those familiar with this operator in other languages might expect.


config: Accept and ignore UTF-8 byte-order mark for configuration files (link)


config: When using a splat expression like module, the addition of a new instance to the set (whose module is therefore not known until after apply) will no longer cause all of the other ids in the resulting list to appear unknown.


config: The module function now preserves the types of values passed to it, even inside nested structures, whereas before it had a tendency to convert primitive-typed values to string representations.


config: The module and module functions now attempt automatic type conversions when the given values do not match the ""verbs"" in the format string, rather than producing a result with error placeholders in it.


config: Assigning a list containing one or more unknown values to an argument expecting a list no longer produces the incorrect error message ""should be a list"", because Terraform is now able to track the individual elements as being unknown rather than the list as a whole, and to track the type of each unknown value. (This also avoids any need to place seemingly-redundant list brackets around values that are already lists, which would now be interpreted as a list of lists.)


cli: When module is enabled for a resource, replacement actions are reflected correctly in rendered plans as module rather than module, and described as such in the UI messages.


core: Various root causes of the ""diffs didn't match during apply"" class of error are now checked at their source, allowing Terraform to either avoid the problem occurring altogether (ideally) or to provide a more actionable error message to help with reporting, finding, and fixing the bug.

"
158,"NEW FEATURES:

module command detects and reports on some preparation steps that will make a subsequent Terraform 0.12 upgrade smoother. (link)

IMPROVEMENTS:

provider/terraform: The module data source is now able to read outputs from a state snapshot created by Terraform 0.12, to provide more flexibility when upgrading individual configurations to Terraform 0.12 in a decomposed environment. (link)
backend/s3: Support DynamoDB, IAM, and STS endpoint configurations (link)
backend/s3: Support for AWS regions module and module (link)
backend/s3: Enhance retry logic and provide module configuration for retry attempts (link)
backend/s3: Enhance S3 module error to include additional information (link)
backend/s3: Remove unused EC2 platform and AWS Account ID lookup, and deprecate equivalent module and module arguments (link)
backend/remote: Do not unlock a workspace after a failed state upload (link)

BUG FIXES:

backend/remote: Ensure variables are loaded correctly when using module (link)
backend/remote: Make sure workspaces are correctly uploaded (link)
backend/remote: Fix panic when loading cached configuration with 0.12 backend schema (link)
core: Fix a potential crash when loading module manifests with Windows paths (link)
core: Make sure UIInput keeps working after being canceled (link)
core: Always try to select a workspace after initialization (link)
"
159,"The following are the significant changes since 0.12.0-beta2.
NEW FEATURES: 

New function module, for reversing unicode strings. (link)

IMPROVEMENTS:

backend/s3: Support for the new AWS region module (link)
backend/remote: Do not unlock a workspace after a failed state upload (link)
command/init: Improve formatting of provider names during discovery (link)
command/0.12upgrade: Upgrade indexing of splat syntax (link)
command/0.12upgrade: Return error for invalid references (e.g. with initial digits) (link)

BUG FIXES:

core: Make sure UIInput keeps working after being canceled (link)
lang/funcs: module fix handling of sets and tuples; return a tuple (link)
states/statefile: properly upgrade dependency syntax (link)
"
160,"BACKWARDS INCOMPATIBILITIES / NOTES:

The module family of commands have all been adjusted to more consistently match how resource addresses are resolved elsewhere in Terraform. In general the matches are now more specific than they were before (matching less, rather than more) but if you are using any of those commands in existing automation please verify that you will still getting expected behavior using the module options.
The module and module arguments for the module backend have now been removed, after having first been deprecated and then ignored in previous versions. These arguments are no longer needed because the backend expects the specified bucket to already exist. (link)

NEW FEATURES:

New function module, for reversing lists. (link)

IMPROVEMENTS:

The warning for undeclared variables in module files now consolidates multiple warnings when there are more than three, to avoid an overwhelming wall of warnings in situations where a common module file is used across many configurations. Setting ""global"" variables in module is deprecated for v0.12 and should be replaced with the module environment variables. (link)
backend/remote: Retry calls when the remote backend responds with a server error (link)
backend/remote: Check for external updates while waiting for user input (link)
config: The module function now skips null values (link)
backend/pg: Switch pg backend to session-level advisory locking (link)
plugin/discover: Parse and display provider warnings from the Terraform Registry (link)
plugin/registry: Add friendly error for when registry unresponsive (link)

BUG FIXES:

backend/remote: Ensure variables are loaded correctly when using module (link)
backend/remote: Make sure workspaces are correctly uploaded (link)
config: Correct module function return value (link)
command/fmt: ""Heredoc"" sequences no longer cause incorrect indentation for following blocks (link)
command/state ...: The address-matching logic for all of these commands now correctly matches an address like module only in the root module, rather than maching all resources/instances of the given type and name in descendent modules too. (link)
command/state list: Properly load user-supplied statefile. (link)
command/state mv: Some regressions between 0.11 and 0.12 have been addressed. (link)
command/plan: Diff renderer will no longer panic if an object is removed from the end of a list of objects. (link)
command/plan: Diff renderer will now correctly indicate when adding a new attribute is what forces resource instance replacement. (link)
config: The module function will now correctly ignore empty strings (link)
helper/schema: Prevent crash when setting a module attribute with a typed module of module (link)
core: Restore pre-v0.12 behavior of retaining objects in state if a delete operation fails. (link)
"
161,"BUG FIXES:

backend/remote: Fix a backend initialization bug (link)
"
162,"IMPROVEMENTS:

The module, module, etc functions from Terraform v0.12 are backported primarily to allow writing
  modules that can work in both Terraform 0.11 and 0.12, since the module pattern in 0.12
  works only for files containing valid UTF-8 text; module must be used instead.  Both
  forms are equivalent in Terraform 0.11.
backend/remote: Retry calls when the remote backend responds with a server error (link)
backend/remote: Check for external updates while waiting for user input (link)

BUG FIXES:

backend/remote: Fix ""token too long"" errors when streaming remote operation logs (link)
backend/remote: Use the module permission to detect if apply is allowed (link)
backend/remote: Exit with 1 when a remote run is canceled (link)
core: Use slashes in the module manifest to prevent Windows/Linux compatibility issues (link)
"
163,"This is a pre-release version of Terraform v0.12.0.
For important information on the status of this release, please see link.
BACKWARDS INCOMPATIBILITIES / NOTES:

backend/s3: module can no longer be defined with leading or trailing slashes. Users should verify the state paths in s3 if they need to change this in case there are extra slashes in the keys (link)
config: module and module now return paths with forward slashes on all operating systems, including Windows. This avoids the need to write constructed paths differently for Windows vs. other operating systems, but any existing constructed paths containing backslashes for Windows must now be rewritten to use forward slashes, like module. (link)
config: module and module are now relative to the current working directory, rather than absolute as before. This avoids including a host-specific absolute path prefix on constructed paths, but may show as a diff after upgrade in situations where a constructed path is included in a resource attribute value. (link)
tools/terraform-bundle: use the module of the same tag as the targeted terraform binary version. This avoids adding complexity to resolve protocol versions across different terraform versions. (link)

IMPROVEMENTS:

communicator/ssh: Add SSH certificate authentication (link)
communicator/ssh: Enable ssh keepalive messages for long running commands (link)
config: New set-theory functions module, module, module, and module for working with set values.
config: New type conversion functions module, module, module, module, module, and module. Explicit conversions are rarely required but occasionally useful; use these functions only when necessary.
plugins: Plugin RPC connection is now authenticated (link)
backend/azurerm: Support for authenticating using the Azure CLI (link)
backend/remote: Return detailed version (in)compatibility information (link)
backend/remote: Log early to indicate remote execution started (link)
backend/remote: Make sure the correct error is shown when having version incompatibilities (link)
backend/remote: Fix ""token too long"" errors when streaming remote operation logs (link)
backend/remote: Use the module service when using remote state only (link)
backend/remote: Use the module permission to detect if apply is allowed (link)
backend/s3: Fix missing workspace entries when using module with trailing slashes (link)
backend/s3: Support DynamoDB, IAM, and STS endpoint configurations (link)
backend/s3: Support for the new AWS region module (link)
backend/s3: Enhance retry logic and provide module configuration to retry attempts (link)
backend/s3: Enhance S3 module error to include additional information (link)
backend/s3: Remove unused EC2 platform and AWS Account ID lookup, and deprecate equivalent module and module arguments (link)
backend/swift: Add support for locking and workspaces (link)
core: Enhance service discovery error handling and messaging (link)
core: Add support to retrieve version constraints to service discovery (link)
core: Validate provisioner connection blocks, and mark host field as required (link)
command/format: Ignore removal of empty strings (link)
command/format: Reduce whitespaces in empty fields (link)
command/format: Render null in dark gray (link)
command/init: Add provider protocol compatibility UI err msg during registry discovery (link)
command/providers schema: Add command to export schemas for all currently-configured providers (link)
command/show: Add support for machine readable output via a module argument to module (link)
command/state: Use locking when updating states (link)
provisioner/salt: Default values for module and module (link)

BUG FIXES:

config: Detect and reject self-referencing local values (link)
config: Accept and ignore UTF-8 byte-order mark for configuration files (link)
config: More helpful error message for a situation that may arise on upgrade from Terraform 0.11 or earlier (link)
config: Backends configured with module are correctly applied and stored along with default values (link)
connection/winrm: Set the correct default port when HTTPS is used (link)
plugins: GRPC plugins shutdown correctly when Close is called (link)
backend/local: Avoid rendering data sources on destroy (link)
backend/local: Fix incorrect destroy/update count on apply (link)
backend/local: Render CBD replacement (+/-) correctly (link)
backend/remote: Exit with 1 when a remote run is canceled (link)
command/format: Fix rendering of nested blocks during update (link)
command/format: Fix rendering of force-new updates (link)
command/format: Fix rendering of nested (JSON) object (link)
command/format: Fix rendering of unknown elements in set/map/list (link)
command/init: Fix plugin installer using wrong protocol causing incompatiable API version with plugin (link)
command/providers: Support module argument to module, which was previously incorrectly returning an error (link)
helper/schema: Fix setting a set in a list (link)
states/statemgr: Avoid HTML escaping when printing LockInfo (link)
core: Correct errors when referencing a resource containing count without an index (link)
core: Fix occasional invalid provider errors when scaling down a counted datasource (link)
core: Fix crash when applying a stored plan containing destroys (link)

NEW FEATURES:
* backend/pg: Support for using Postgresql for remote state storage (link)"
164,"IMPROVEMENTS:

command/state: Use locking when updating states (link)
backend/remote: Add support for remote state only organizations (link)
backend/remote: Make sure the correct error is shown when having version incompatibilities (link)

BUG FIXES:

backend/remote: Fix an error that prevents checking version constraints (link)
backend/remote: Compare versions without the prerelease (link)
"
165,"IMPROVEMENTS:

backend/remote: Return detailed version (in)compatibility information (link)
core: Enhance service discovery error handling and messaging (link)
core: Add support to retrieve version constraints to service discovery (link)

BUG FIXES:

backend/remote: Fix symlink issues and Windows support when uploading configurations (link)
"
166,module
167,"This is an experimental pre-release of Terraform v0.12.0.
This release is intended only for early experimentation and preview of the Terraform v0.12.0 features. We do not recommend using it against any real, existing infrastructure.
For more information, including a list of known issues, please refer to link."
168,module
169,module
170,module
171,module
172,module
173,module
174,module
175,module
176,module
177,module
178,module
179,module
180,v0.11.0-beta1
181,v0.10.8
182,
183,
184,module
185,v0.10.4
186,module
187,module
188,module
189,
190,v0.10.0-rc1
191,module
192,module
193,module
194,module
195,module
196,module
197,v0.9.7
198,module
199,module
200,module
201,module
202,module
203,module
204,module
205,module
206,module
207,module
208,module
209,module
210,module
211,module
212,module
213,module
214,module
215,module
216,module
217,module
218,module
219,module
220,module
221,module
222,module
223,
224,
225,module
226,module
227,module
228,module
229,module
230,module
231,module
232,module
233,module
234,module
235,
236,
237,
238,
239,
240,Release 0.6.7
241,
242,
243,Release v0.6.4
244,Release v0.6.3 
245,"v0.6.2
See CHANGELOG for release details"
246,
247,
