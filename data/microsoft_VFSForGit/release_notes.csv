Index,Release Note,Release Note With Abstraction
1,"Major Updates

This includes Git v2.33.0.vfs.0.0.
The merge strategy default is changed from recursive to ort which should present significant performance improvements for commands such as git merge, git rebase, and git cherry-pick. Huge thanks to external contributor @newren for creating this new merge strategy!
The build system was rewritten from scratch to simplify the process and use a more recent version of .NET.
After this release is promoted to a full release on GitHub, it will be available for installation via winget.
The gvfs upgrade command is deprecated. Future upgrades will require using winget or installing directly from the releases page.
A case where FastFetch would not download a small number of files has been fixed.

Pull Requests


1750: Update Readme.md


1751: Update Git to v2.33.0


1738: Bumping version of update-winget action


1747: UpgradeVerb: write deprecation notice


1745: do not exit early if no blobs found for a period when prefetching


1740: Skip launching UI if running unattended


1737: Update Git to v2.32.0


1746: Delete custom upgrader


1741: Fix winget tag specification


1744: Overhaul build and project systems and drop Mac/POSIX code


1736: Update Git to v2.31.1.vfs.0.3


1735: Bumping winget action version


1734: Adding winget workflow


1733: Update Git to include 2.31.1


1730: Fix an issue with FastFetch when deleting files


1732: Use one NuGet feed


1726: Config: commitGraph.generationVersion=1

","Major Updates
This includes Git v2.33.0.vfs.0.0.
The merge strategy default is changed from recursive to ort which should present significant performance improvements for commands such as git merge, git rebase, and git cherry-pick. Huge thanks to external contributor @newren for creating this new merge strategy!
The build system was rewritten from scratch to simplify the process and use a more recent version of .NET.
After this release is promoted to a full release on GitHub, it will be available for installation via winget.
The gvfs upgrade command is deprecated. Future upgrades will require using winget or installing directly from the releases page.
A case where FastFetch would not download a small number of files has been fixed.
Pull Requests
1750: Update Readme.md
1751: Update Git to v2.33.0
1738: Bumping version of update-winget action
1747: UpgradeVerb: write deprecation notice
1745: do not exit early if no blobs found for a period when prefetching
1740: Skip launching UI if running unattended
1737: Update Git to v2.32.0
1746: Delete custom upgrader
1741: Fix winget tag specification
1744: Overhaul build and project systems and drop Mac/POSIX code
1736: Update Git to v2.31.1.vfs.0.3
1735: Bumping winget action version
1734: Adding winget workflow
1733: Update Git to include 2.31.1
1730: Fix an issue with FastFetch when deleting files
1732: Use one NuGet feed
1726: Config: commitGraph.generationVersion=1"
2,"Major Changes

Includes Git 2.31.0 (Git for Windows 2.31.0.windows.1 and Microsoft Git 2.31.0.vfs.0.1).
This includes the Git 2.30.2 security fix (CVE-2021-21300).
This includes the Git Credential Manager Core v2.0.394.50751.
With this release, VFS for Git only enforces a minimum version of Microsoft Git.  Previous releases required an exact version match.  This allows users to upgrade Git without having to upgrade VFS for Git.
","Major Changes
Includes Git 2.31.0 (Git for Windows 2.31.0.windows.1 and Microsoft Git 2.31.0.vfs.0.1).
This includes the Git 2.30.2 security fix (CVE-2021-21300).
This includes the Git Credential Manager Core v2.0.394.50751.
With this release, VFS for Git only enforces a minimum version of Microsoft Git.  Previous releases required an exact version match.  This allows users to upgrade Git without having to upgrade VFS for Git."
3,"Major Changes

Includes Git for Windows 2.30.0.
Includes latest Git Credential Manager Core security release.
Includes Git LTS security release
Update NuGet upgrader with new Microsoft package signing certificate

Pull Requests


1717 [HOTFIX] Update Git to remove ODB string check


1714: Update Git to include LFS security release


1712: git-vfs: update to Git 2.30.0


1711 [HOTFIX] Fix upgrader's expectation of a single certificate


1710: Add new Microsoft certificate thumbprint


1706: Update Git to include GCM Core update


1703: Delete all macOS projects

","Major Changes
Includes Git for Windows 2.30.0.
Includes latest Git Credential Manager Core security release.
Includes Git LTS security release
Update NuGet upgrader with new Microsoft package signing certificate
Pull Requests
1717 [HOTFIX] Update Git to remove ODB string check
1714: Update Git to include LFS security release
1712: git-vfs: update to Git 2.30.0
1711 [HOTFIX] Fix upgrader's expectation of a single certificate
1710: Add new Microsoft certificate thumbprint
1706: Update Git to include GCM Core update
1703: Delete all macOS projects"
4,"Major Changes

Update NuGet upgrader with new Microsoft package signing certificate

Pull Requests


1710: Add new Microsoft certificate thumbprint

","Major Changes
Update NuGet upgrader with new Microsoft package signing certificate
Pull Requests
1710: Add new Microsoft certificate thumbprint"
5,"Major Changes

Includes latest Git Credential Manager Core security release.

Pull Requests


1706: Update Git to include GCM Core update


1703: Delete all macOS projects

","Major Changes
Includes latest Git Credential Manager Core security release.
Pull Requests
1706: Update Git to include GCM Core update
1703: Delete all macOS projects"
6,"Major Updates

Comes with Git for Windows 2.29.0.

Pull Requests


1689: Make delete docs more verbose


1697: Fix functional tests to skip around ProjFS issue


1694: Update Git to v2.29.0.

","Major Updates
Comes with Git for Windows 2.29.0.
Pull Requests
1689: Make delete docs more verbose
1697: Fix functional tests to skip around ProjFS issue
1694: Update Git to v2.29.0."
7,"Major Updates

Comes with Git for Windows 2.28.0
Previous builds were not including fully-signed DLLs. This is now fixed.

Pull Requests


1672: ProductUpgrader: be extra careful about a copy loop


1674: Config: disable status.submoduleSummary


1675: PreCommandHook: don't lock pack-objects


1676: Update Git to v2.27.0.vfs.1.0


1679: BuildGVFSForWindows.bat: use nuget on PATH


1683: GVFS.SignFiles.csproj: include more DLLs for signing


1685: minor path comparison fixup in ProductUpgrader


1682: Update Git to v2.28.0

","Major Updates
Comes with Git for Windows 2.28.0
Previous builds were not including fully-signed DLLs. This is now fixed.
Pull Requests
1672: ProductUpgrader: be extra careful about a copy loop
1674: Config: disable status.submoduleSummary
1675: PreCommandHook: don't lock pack-objects
1676: Update Git to v2.27.0.vfs.1.0
1679: BuildGVFSForWindows.bat: use nuget on PATH
1683: GVFS.SignFiles.csproj: include more DLLs for signing
1685: minor path comparison fixup in ProductUpgrader
1682: Update Git to v2.28.0"
8,"Major Changes

This is a security release on top of VFS for Git 1.0.20156.1.
Includes Git v2.27.0.vfs.1.0.
The .vfs. versions of Git were bundling old packages from git-for-windows/build-extra, so they included versions with known security flaws. None of these had known problems in use with Git, but other software or scripts might use those packages, so it is safest to update them.

Pull Requests


1678: BuildGVFSForWindows.bat: use nuget on PATH when possible


1677: Update Git to v2.27.0.vfs.1.0

","Major Changes
This is a security release on top of VFS for Git 1.0.20156.1.
Includes Git v2.27.0.vfs.1.0.
The .vfs. versions of Git were bundling old packages from git-for-windows/build-extra, so they included versions with known security flaws. None of these had known problems in use with Git, but other software or scripts might use those packages, so it is safest to update them.
Pull Requests
1678: BuildGVFSForWindows.bat: use nuget on PATH when possible
1677: Update Git to v2.27.0.vfs.1.0"
9,"Major Changes

Includes Git v2.27.0
Fixes an issue where GVFS.Service restarts in a loop when Powershell is not found on the PATH.
We have new documentation including a new troubleshooting guide!
A new config setting allows updating USN journals, which is needed when using BuildXL with VFS for Git.
Bug Fix: Fixes a bug with gvfs upgrade that causes versions v1.0.20112.1 from upgrading from private feeds.

Pull Requests


1673: [HOTFIX] ProductUpgrader: be extra careful about a copy loop


1663: Update Git to v2.27.0


1669: Docs: more troubleshooting and FAQs


1668: ProductUPgradeTimer: remove unacceptable Environment.Exit()


1664: Update USN journal entries for projected folders


1666: Docs: start basic template


1658: ProjFSFilter: Be more robust to missing PowerShell

","Major Changes
Includes Git v2.27.0
Fixes an issue where GVFS.Service restarts in a loop when Powershell is not found on the PATH.
We have new documentation including a new troubleshooting guide!
A new config setting allows updating USN journals, which is needed when using BuildXL with VFS for Git.
Bug Fix: Fixes a bug with gvfs upgrade that causes versions v1.0.20112.1 from upgrading from private feeds.
Pull Requests
1673: [HOTFIX] ProductUpgrader: be extra careful about a copy loop
1663: Update Git to v2.27.0
1669: Docs: more troubleshooting and FAQs
1668: ProductUPgradeTimer: remove unacceptable Environment.Exit()
1664: Update USN journal entries for projected folders
1666: Docs: start basic template
1658: ProjFSFilter: Be more robust to missing PowerShell"
10,"Major Changes

Includes Git v2.26.2
Fixes an issue around expiring old commit-graph files.
Fixes a problem with non-existent repos that are still registered with the service.

Pull Requests


1642: Update Git to v2.26.0


1647: Fix commit-graph expiration


1652: RepoRegistry: ignore non-existent repos


1653: Update Git to include v2.26.1


1660: Update Git to include v2.26.2

","Major Changes
Includes Git v2.26.2
Fixes an issue around expiring old commit-graph files.
Fixes a problem with non-existent repos that are still registered with the service.
Pull Requests
1642: Update Git to v2.26.0
1647: Fix commit-graph expiration
1652: RepoRegistry: ignore non-existent repos
1653: Update Git to include v2.26.1
1660: Update Git to include v2.26.2"
11,"This is a service release for VFS For Git 1.0.19218.7
- Fixed an issue where some concurrent updates to the placeholder database would fail
- Fixed an issue on Mac where files were not being hydrated when signed as part of a build","This is a service release for VFS For Git 1.0.19218.7
- Fixed an issue where some concurrent updates to the placeholder database would fail
- Fixed an issue on Mac where files were not being hydrated when signed as part of a build"
12,"This is a servicing release for VFS For Git 1.0.19212.3.


fixes a performance regression in the background maintenance jobs. 


fixed a correctness issue around octopus merges in the incremental commit-graph. 

","This is a servicing release for VFS For Git 1.0.19212.3.
fixes a performance regression in the background maintenance jobs. 
fixed a correctness issue around octopus merges in the incremental commit-graph. "
13,"Release notes

Initial Mac platform native notifications
Initial Mac upgrade functionality
Git: Includes incremental commit graph
Various bug fixes and performance improvements
","Release notes
Initial Mac platform native notifications
Initial Mac upgrade functionality
Git: Includes incremental commit graph
Various bug fixes and performance improvements"
14,"Release notes

Includes Git 2.22
Moves placeholder database into SQLite for better performance.
Fixes when libgit2 repos are acquired and disposed for better performance of checkout (where detected) and other operations that rely heavily on the read-object hook.
Adds additional logging for folder and file placeholder creation.
Improves the rate of .gvfsCache cleanup.
Other bug fixes for reliability
","Release notes
Includes Git 2.22
Moves placeholder database into SQLite for better performance.
Fixes when libgit2 repos are acquired and disposed for better performance of checkout (where detected) and other operations that rely heavily on the read-object hook.
Adds additional logging for folder and file placeholder creation.
Improves the rate of .gvfsCache cleanup.
Other bug fixes for reliability"
15,"Release Notes

Large improvements to git checkout performance when there are many folder placeholders.
Background tasks run with lower priority to address user feedback on maintenance job performance.
A background task will now compress and deduplicate the pack-file data in the shared object cache, resulting in more sustainable disk usage
Upgrade supports an anonymous endpoint to decouple rollouts to different engineering systems.
Improvements to the installation to more gracefully recover from an uninstallation of VFS for Git and subsequent
Fixes mounting on RS4 machines
Other bug fixes, engineering improvements, and test reliability fixes.

See the full change log","Release Notes
Large improvements to git checkout performance when there are many folder placeholders.
Background tasks run with lower priority to address user feedback on maintenance job performance.
A background task will now compress and deduplicate the pack-file data in the shared object cache, resulting in more sustainable disk usage
Upgrade supports an anonymous endpoint to decouple rollouts to different engineering systems.
Improvements to the installation to more gracefully recover from an uninstallation of VFS for Git and subsequent
Fixes mounting on RS4 machines
Other bug fixes, engineering improvements, and test reliability fixes.
See the full change log"
16,"Release Notes

Large improvements to git checkout performance when there are many folder placeholders.
Background tasks run with lower priority to address user feedback on maintenance job performance.
A background task will now compress and deduplicate the pack-file data in the shared object cache, resulting in more sustainable disk usage
Upgrade supports an anonymous endpoint to decouple rollouts to different engineering systems.
Improvements to the installation to more gracefully recover from an uninstallation of VFS for Git and subsequent
Other bug fixes, engineering improvements, and test reliability fixes.

See the full change log","Release Notes
Large improvements to git checkout performance when there are many folder placeholders.
Background tasks run with lower priority to address user feedback on maintenance job performance.
A background task will now compress and deduplicate the pack-file data in the shared object cache, resulting in more sustainable disk usage
Upgrade supports an anonymous endpoint to decouple rollouts to different engineering systems.
Improvements to the installation to more gracefully recover from an uninstallation of VFS for Git and subsequent
Other bug fixes, engineering improvements, and test reliability fixes.
See the full change log"
17,"Release notes:
- Fixed several incorrect interactions with credentials
  - Now scopes credential.useHttpPath to just dev.azure.com hostname
  - Now erases credentials on authentication failure
  - Now approves credentials on authentication success
- Lots of live-site improvements
  - Correlate trace2 stream with VFS for Git stream with the Git session ID.
  - Break down update placeholders timings so we can see where time is spend during checkout.
- Fixes a copy failure when copying the upgrade tool to its temporary location.
See the full change log","Release notes:
- Fixed several incorrect interactions with credentials
  - Now scopes credential.useHttpPath to just dev.azure.com hostname
  - Now erases credentials on authentication failure
  - Now approves credentials on authentication success
- Lots of live-site improvements
  - Correlate trace2 stream with VFS for Git stream with the Git session ID.
  - Break down update placeholders timings so we can see where time is spend during checkout.
- Fixes a copy failure when copying the upgrade tool to its temporary location.
See the full change log"
18,Update components included with internal distribution,Update components included with internal distribution
19,Includes fixes to config settings for internal users only,Includes fixes to config settings for internal users only
20,"Release notes:
- Fixed several incorrect interactions with credentials
  - Now scopes credential.useHttpPath to just dev.azure.com hostname
  - Now erases credentials on authentication failure
  - Now approves credentials on authentication success
- Lots of live-site improvements
  - Correlate trace2 stream with VFS for Git stream with the Git session ID.
  - Break down update placeholders timings so we can see where time is spend during checkout.
- Many smaller bug fixes","Release notes:
- Fixed several incorrect interactions with credentials
  - Now scopes credential.useHttpPath to just dev.azure.com hostname
  - Now erases credentials on authentication failure
  - Now approves credentials on authentication success
- Lots of live-site improvements
  - Correlate trace2 stream with VFS for Git stream with the Git session ID.
  - Break down update placeholders timings so we can see where time is spend during checkout.
- Many smaller bug fixes"
21,"Bug fixes:
- Consume new GCM to fix git credential erase behavior
- Properly reacquire credentials during nuget upgrader
- Disable commit-graph verify for performance concerns","Bug fixes:
- Consume new GCM to fix git credential erase behavior
- Properly reacquire credentials during nuget upgrader
- Disable commit-graph verify for performance concerns"
22,"Bug fixes:
* gvfs upgrade could fail if its background processes were launched in an existing enlistment.
* git multi-pack-index verify would run slowly if the objects directory had more than 2048 packfiles.
* Improve error message from gvfs upgrade if the Git installation could not be found.","Bug fixes:
* gvfs upgrade could fail if its background processes were launched in an existing enlistment.
* git multi-pack-index verify would run slowly if the objects directory had more than 2048 packfiles.
* Improve error message from gvfs upgrade if the Git installation could not be found."
23,"New Features:
- Upgrade supports NuGet feeds as a distribution source.
- Post-index-change hook will help ensure consistency between Git and VFS for Git's reckoning of the state of the repository, and eliminate a class of bugs.
- VFS for Git now supports anonymous access for public repositories.
- gvfs prefetch learned how to take --files-list.
Performance and Reliability
- ""Sparse"" push algorithm should improve performance of pushes where only a small cone of a repository is modified.
- Multi-threaded index reads will improve load time of large .git/index
- Built-in git rebase is on by default.
- No-op gvfs prefetch --hydrate performance is dramatically improved
- Commit-graph and multi-pack-index are validated after writing to eliminate corruption scenarios
- Multiple mount process reliability bugs have been squashed.
- VFS for Git will performance maintenance in the background. This release will pack loose objects in .gvfsCache into packfiles. 
General Improvments
- Log files now include UTC offset.
- Other bug fixes
Please see the full change log.","New Features:
- Upgrade supports NuGet feeds as a distribution source.
- Post-index-change hook will help ensure consistency between Git and VFS for Git's reckoning of the state of the repository, and eliminate a class of bugs.
- VFS for Git now supports anonymous access for public repositories.
- gvfs prefetch learned how to take --files-list.
Performance and Reliability
- ""Sparse"" push algorithm should improve performance of pushes where only a small cone of a repository is modified.
- Multi-threaded index reads will improve load time of large .git/index
- Built-in git rebase is on by default.
- No-op gvfs prefetch --hydrate performance is dramatically improved
- Commit-graph and multi-pack-index are validated after writing to eliminate corruption scenarios
- Multiple mount process reliability bugs have been squashed.
- VFS for Git will performance maintenance in the background. This release will pack loose objects in .gvfsCache into packfiles. 
General Improvments
- Log files now include UTC offset.
- Other bug fixes
Please see the full change log."
24,This release is identical to the previous. It was published to test upgrade.,This release is identical to the previous. It was published to test upgrade.
25,"New Features
- VFS for Git will check the GitHub releases for the configured ring and prompt occasionally when running Git commands in a VFS for Git repository. To configure your ring, use the new gvfs config verb, like:
gvfs config upgrade.ring [""fast"", ""slow"", ""none""]
VFS for Git will check in the background for an available upgrade. If one is available, a message will be shown periodically to the user in the post-command hook to run gvfs upgrade to install the new version.
- In the future, VFS for Git will automatically upgrade as new bits become available in the configured ring, eliminating the need to run gvfs upgrade to 
Performance Improvements
- Upgraded to Git 2.19. This version brings with it improvements to unpack_trees to speed up checkout, merge, reset, and rebase.
- Improvements to compact and maintain the ModifiedPaths.dat database to help mitigate the problem of command perf degrading over time in an enlistment.
General Improvements 
- A couple of fixes for using VS Code on top of VFS for Git.
- Other perf and reliability fixes.","New Features
- VFS for Git will check the GitHub releases for the configured ring and prompt occasionally when running Git commands in a VFS for Git repository. To configure your ring, use the new gvfs config verb, like:
gvfs config upgrade.ring [""fast"", ""slow"", ""none""]
VFS for Git will check in the background for an available upgrade. If one is available, a message will be shown periodically to the user in the post-command hook to run gvfs upgrade to install the new version.
- In the future, VFS for Git will automatically upgrade as new bits become available in the configured ring, eliminating the need to run gvfs upgrade to 
Performance Improvements
- Upgraded to Git 2.19. This version brings with it improvements to unpack_trees to speed up checkout, merge, reset, and rebase.
- Improvements to compact and maintain the ModifiedPaths.dat database to help mitigate the problem of command perf degrading over time in an enlistment.
General Improvements 
- A couple of fixes for using VS Code on top of VFS for Git.
- Other perf and reliability fixes."
26,"Performance Improvements:
- VFS for Git will prefetch commits and trees from a cache server in the background on a schedule, to improve the speed of user-initiated fetches, pulls, and pushes
- VFS for Git will pre-calculate status in the background in response to changes in the workdir, to improve the speed of user-initiated statuses.
  - Important note: The status cache will not be enabled until after the first reboot after this version of VFS for Git is installed. VFS for Git will still work as normal, but without the status cache feature.
General Improvements
- Fixed a bug that would cause VFS for Git mount process to shut down if it receives out-of-order ProjFS callbacks.","Performance Improvements:
- VFS for Git will prefetch commits and trees from a cache server in the background on a schedule, to improve the speed of user-initiated fetches, pulls, and pushes
- VFS for Git will pre-calculate status in the background in response to changes in the workdir, to improve the speed of user-initiated statuses.
  - Important note: The status cache will not be enabled until after the first reboot after this version of VFS for Git is installed. VFS for Git will still work as normal, but without the status cache feature.
General Improvements
- Fixed a bug that would cause VFS for Git mount process to shut down if it receives out-of-order ProjFS callbacks."
27,"General improvements:
- We have improved how GVFS handles enlistments in junctions and mapped to a drive letter.
- We have started porting parts of the product to .NET Standard.
- Updated Git for a security issue.
- Better errors around ProjFS installation issues.
- Fix backoff on cache server size endpoint 404.
- GVFS has a better icon.
- Improved reliability of how the installer upgrades from non-inboxed to inboxed ProjFS.
- Better recovery from a process that terminates without releasing the GVFS lock.
- Gracefully handle a missing shared object cache pack directory.
Performance improvements:
- We have moved MIDX computation to a post-fetch thread. This should save blocking time per prefetch that downloads a packfile from the cache server.
- We have enabled the generation of the serialized commit graph in the post-fetch thread. This should provide across-the-board perf wins in any command that walks many commits.
- Improved the memory usage during MIDX computation.
- Further optimizations to GVFS's index parsing, saving time on commands that need to reproject (like checkout).
- Use commit graph generation numbers during force push, saving time on force pushes.","General improvements:
- We have improved how GVFS handles enlistments in junctions and mapped to a drive letter.
- We have started porting parts of the product to .NET Standard.
- Updated Git for a security issue.
- Better errors around ProjFS installation issues.
- Fix backoff on cache server size endpoint 404.
- GVFS has a better icon.
- Improved reliability of how the installer upgrades from non-inboxed to inboxed ProjFS.
- Better recovery from a process that terminates without releasing the GVFS lock.
- Gracefully handle a missing shared object cache pack directory.
Performance improvements:
- We have moved MIDX computation to a post-fetch thread. This should save blocking time per prefetch that downloads a packfile from the cache server.
- We have enabled the generation of the serialized commit graph in the post-fetch thread. This should provide across-the-board perf wins in any command that walks many commits.
- Improved the memory usage during MIDX computation.
- Further optimizations to GVFS's index parsing, saving time on commands that need to reproject (like checkout).
- Use commit graph generation numbers during force push, saving time on force pushes."
28,"Major updates:

Switched over to use the Windows Projected File System (ProjFS) optional feature on RS4 and later. ProjFS is the new name for the GvFlt driver and its associated user mode library.
The local file size cache was migrated from ESENT to SQLite
Git commands are now allowed to delete an empty directory
Many other reliability improvements in interactions between GVFS and the file system, and between GVFS and git

Perf improvements:
* Better memory management in git, creating a savings of up to half a second on commands that parse the index
* Added a new mutli-pack index file to git, allowing it to become much more efficient at finding an object when there are a large number of local packfiles
* Added a git config setting to disable the calculations for detecting force pushes during 'git fetch' and 'git pull'. That calculation can take 10's of seconds on a large graph, and users can now opt out of it.
* Due to the transition to SQLite, the file sizes cache can now live in the volume-wide .gvfsCache folder and be shared by multiple repos, causing fewer round trips to the server while enumerating files
* The post-command step to update placeholder files now batches its size requests to the server, resulting in significant speedups in situations where many placeholder files needed to be updated
* The client will now also query the /gvfs/sizes endpoint on a cache server that implements that endpoint, reducing the latency on those requests even further
* Sped up GVFS's parsing of the git index, shaving off 2-3 seconds for a large index file","Major updates:
Switched over to use the Windows Projected File System (ProjFS) optional feature on RS4 and later. ProjFS is the new name for the GvFlt driver and its associated user mode library.
The local file size cache was migrated from ESENT to SQLite
Git commands are now allowed to delete an empty directory
Many other reliability improvements in interactions between GVFS and the file system, and between GVFS and git
Perf improvements:
* Better memory management in git, creating a savings of up to half a second on commands that parse the index
* Added a new mutli-pack index file to git, allowing it to become much more efficient at finding an object when there are a large number of local packfiles
* Added a git config setting to disable the calculations for detecting force pushes during 'git fetch' and 'git pull'. That calculation can take 10's of seconds on a large graph, and users can now opt out of it.
* Due to the transition to SQLite, the file sizes cache can now live in the volume-wide .gvfsCache folder and be shared by multiple repos, causing fewer round trips to the server while enumerating files
* The post-command step to update placeholder files now batches its size requests to the server, resulting in significant speedups in situations where many placeholder files needed to be updated
* The client will now also query the /gvfs/sizes endpoint on a cache server that implements that endpoint, reducing the latency on those requests even further
* Sped up GVFS's parsing of the git index, shaving off 2-3 seconds for a large index file"
29,"New features:
- Added a new volume-wide cache for downloaded git objects that is shared amongst multiple repos. Only newly created repos will use the new cache location. Existing clones will continue to use their own private cache.
- The installer now unmounts and remounts existing repos automatically
- GVFS no longer forces an antivirus exclusion. This was a relic from long ago when the gvflt driver and the Defender driver used to interfere with each other, but antivirus is no longer GVFS's concern.
- Added better diagnostic info in the GVFS logs when there are network errors
- git status now supports an option to avoid doing its ahead/behind calculations. This allows the user to decide if they want to skip that overhead if all they care about is the status of the working directory.
Bug fixes:
- Lots of bug fixes to make GVFS's file writes (e.g. to its database files) more reliable, even in the face of power loss
- GVFS can now recover from corrupted git object files (e.g. caused by a torn write), by re-downloading them whenever git asks for an object. The assumption is that git would not be asking GVFS for it if the object was valid.
- Fixed an annoying bug where a Ctrl+C'd git process could leak a GVFS lock","New features:
- Added a new volume-wide cache for downloaded git objects that is shared amongst multiple repos. Only newly created repos will use the new cache location. Existing clones will continue to use their own private cache.
- The installer now unmounts and remounts existing repos automatically
- GVFS no longer forces an antivirus exclusion. This was a relic from long ago when the gvflt driver and the Defender driver used to interfere with each other, but antivirus is no longer GVFS's concern.
- Added better diagnostic info in the GVFS logs when there are network errors
- git status now supports an option to avoid doing its ahead/behind calculations. This allows the user to decide if they want to skip that overhead if all they care about is the status of the working directory.
Bug fixes:
- Lots of bug fixes to make GVFS's file writes (e.g. to its database files) more reliable, even in the face of power loss
- GVFS can now recover from corrupted git object files (e.g. caused by a torn write), by re-downloading them whenever git asks for an object. The assumption is that git would not be asking GVFS for it if the object was valid.
- Fixed an annoying bug where a Ctrl+C'd git process could leak a GVFS lock"
30,"GVFS is now available as a binary installer
Instructions for installing and using GVFS are available at https://github.com/Microsoft/GVFS","GVFS is now available as a binary installer
Instructions for installing and using GVFS are available at link"
