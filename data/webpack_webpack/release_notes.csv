Index,Release Note,Release Note Abstract
1,"New Features

Implement fetchPriority feature as parser option and magic comment by @alexander-akait in https://github.com/webpack/webpack/pull/17249
[CSS] - Introduce 'css/auto' as a css module type by @ahabhgk in https://github.com/webpack/webpack/pull/16577
[CSS] - Style-specific fields now automatically resolve in package.json by @burhanuday in https://github.com/webpack/webpack/pull/17346
webpack configuration API now accepts ""falsy values"" loaders and plugins by @alexander-akait in https://github.com/webpack/webpack/pull/17339

Bug Fixes

Fix codecov badge in readme by @burhanuday in https://github.com/webpack/webpack/pull/17353

Developer Experience

Add link to svelte loader for webpack by @burhanuday in https://github.com/webpack/webpack/pull/17369
Increase parser API types in internal plugins across dependency plugins @alexander-akait in https://github.com/webpack/webpack/pull/17365

Dependencies & Maintenance

Bump memfs from 3.5.2 to 3.5.3 by @dependabot in https://github.com/webpack/webpack/pull/17347
Bump webpack-cli from 5.1.3 to 5.1.4 by @dependabot in https://github.com/webpack/webpack/pull/17349
Bump es-module-lexer from 1.2.1 to 1.3.0 by @dependabot in https://github.com/webpack/webpack/pull/17362
Bump @types/node from 20.2.5 to 20.3.0 by @dependabot in https://github.com/webpack/webpack/pull/17361
Bump core-js from 3.30.2 to 3.31.0 by @dependabot in https://github.com/webpack/webpack/pull/17360
Bump browserslist from 4.21.6 to 4.21.8 by @dependabot in https://github.com/webpack/webpack/pull/17367
Bump @types/node from 20.3.0 to 20.3.1 by @dependabot in https://github.com/webpack/webpack/pull/17366

New Contributors
@aboktor made their first contribution in #16991 #16989 
@silverwind made their first contribution in #17339 via #17329
Full Changelog: https://github.com/webpack/webpack/compare/v5.86.0...v5.87.0","New Features
Implement fetchPriority feature as parser option and magic comment by @alexander-akait in link
[CSS] - Introduce 'css/auto' as a css module type by @ahabhgk in link
[CSS] - Style-specific fields now automatically resolve in package.json by @burhanuday in link
webpack configuration API now accepts ""falsy values"" loaders and plugins by @alexander-akait in link
Bug Fixes
Fix codecov badge in readme by @burhanuday in link
Developer Experience
Add link to svelte loader for webpack by @burhanuday in link
Increase parser API types in internal plugins across dependency plugins @alexander-akait in link
Dependencies & Maintenance
Bump memfs from 3.5.2 to 3.5.3 by @dependabot in link
Bump webpack-cli from 5.1.3 to 5.1.4 by @dependabot in link
Bump es-module-lexer from 1.2.1 to 1.3.0 by @dependabot in link
Bump @types/node from 20.2.5 to 20.3.0 by @dependabot in link
Bump core-js from 3.30.2 to 3.31.0 by @dependabot in link
Bump browserslist from 4.21.6 to 4.21.8 by @dependabot in link
Bump @types/node from 20.3.0 to 20.3.1 by @dependabot in link
New Contributors
@aboktor made their first contribution in #16991 #16989 
@silverwind made their first contribution in #17339 via #17329
Full Changelog: link"
2,"New Features

Improved cache size performance via better handling of serialization for errors and bigints by @alexander-akait in https://github.com/webpack/webpack/pull/17282
Introduce an export default handler function option for ProgressPlugin by @alexander-akait in https://github.com/webpack/webpack/pull/17312
Support passing RegExp to splitChunks.chunks by @hyf0 in https://github.com/webpack/webpack/pull/17332

Bug Fixes

Fix layer capabilities for ContextModule types by @huozhi in https://github.com/webpack/webpack/pull/17310
Fix compatibility of __non_webpack_require__ with ES modules by @alexander-akait in https://github.com/webpack/webpack/pull/17308
Improve type coverage Chunk, ChunkGroup, and other plugins by @alexander-akait in https://github.com/webpack/webpack/pull/1731
Do not add js extension for eval source maps when extension is not resolvable by @alexander-akait in https://github.com/webpack/webpack/pull/17331

Developer Experience

Improve type coverage for Json Module type and lazy load json-assertions package by @alexander-akait in https://github.com/webpack/webpack/pull/17301

Dependencies & Maintenance

Bump memfs from 3.5.1 to 3.5.2 by @dependabot in https://github.com/webpack/webpack/pull/17315
Bump webpack-cli from 5.1.1 to 5.1.3 by @dependabot in https://github.com/webpack/webpack/pull/17314
Bump eslint from 8.41.0 to 8.42.0 by @dependabot in https://github.com/webpack/webpack/pull/17313

New Contributors

@huozhi made their first contribution in https://github.com/webpack/webpack/pull/17310
@hyf0 made their first contribution in https://github.com/webpack/webpack/pull/17332

Full Changelog: https://github.com/webpack/webpack/compare/v5.85.1...v5.86.0","New Features
Improved cache size performance via better handling of serialization for errors and bigints by @alexander-akait in link
Introduce an export default handler function option for ProgressPlugin by @alexander-akait in link
Support passing RegExp to splitChunks.chunks by @hyf0 in link
Bug Fixes
Fix layer capabilities for ContextModule types by @huozhi in link
Fix compatibility of non_webpack_require with ES modules by @alexander-akait in link
Improve type coverage Chunk, ChunkGroup, and other plugins by @alexander-akait in link
Do not add js extension for eval source maps when extension is not resolvable by @alexander-akait in link
Developer Experience
Improve type coverage for Json Module type and lazy load json-assertions package by @alexander-akait in link
Dependencies & Maintenance
Bump memfs from 3.5.1 to 3.5.2 by @dependabot in link
Bump webpack-cli from 5.1.1 to 5.1.3 by @dependabot in link
Bump eslint from 8.41.0 to 8.42.0 by @dependabot in link
New Contributors
@huozhi made their first contribution in link
@hyf0 made their first contribution in link
Full Changelog: link"
3,"Bug Fixes

Fix bug in handling barrel imports (#17305) by @bworline in https://github.com/webpack/webpack/pull/17307 - NOTE: An internal API BasicEvaluatedExpression.getMemberRangeStarts has been changed to BasicEvaluatedExpression.getMemberRanges, please see type definition changes and the pull request for more information. 

Dependencies & Maintenance

Bump @types/jest from 29.5.1 to 29.5.2 by @dependabot in https://github.com/webpack/webpack/pull/17297

Full Changelog: https://github.com/webpack/webpack/compare/v5.85.0...v5.85.1","Bug Fixes
Fix bug in handling barrel imports (#17305) by @bworline in link - NOTE: An internal API BasicEvaluatedExpression.getMemberRangeStarts has been changed to BasicEvaluatedExpression.getMemberRanges, please see type definition changes and the pull request for more information. 
Dependencies & Maintenance
Bump @types/jest from 29.5.1 to 29.5.2 by @dependabot in link
Full Changelog: link"
4,"New Features

Add readonly cache mode by @vankop in https://github.com/webpack/webpack/pull/15470
Normalize property accessors for esm namespaces and chained member/call expressions by @bworline in https://github.com/webpack/webpack/pull/17203 
Support environment in loader context by @alexander-akait in https://github.com/webpack/webpack/pull/17281
Introduce a new syntax for addModule() support in worklets - *context.audioWorklet.addModule() by @alexander-akait in https://github.com/webpack/webpack/pull/17212

Bug Fixes

Fix type regression with unknown module type strings by @alexander-akait in https://github.com/webpack/webpack/pull/17266

Developer Experience

Use global runtime constants for webpack exports by @burhanuday in https://github.com/webpack/webpack/pull/17270
Add strict mode type coverage for WASM and Runtime code by @alexander-akait in https://github.com/webpack/webpack/pull/17267
Add strict mode type coverage for runtime modules and runtime plugins by @alexander-akait in https://github.com/webpack/webpack/pull/17261
Add types for JSON & Asset Modules including their interfacing plugins by @alexander-akait in https://github.com/webpack/webpack/pull/17262
Add type coverage for Module subclasses and plugins by @alexander-akait in https://github.com/webpack/webpack/pull/17272

Dependencies & Maintenance

Use GitHub Discussions instead of Gitter in issue templates by @snitin315 in https://github.com/webpack/webpack/pull/17293
Bump @types/node from 20.2.3 to 20.2.4 by @dependabot in https://github.com/webpack/webpack/pull/17269
Bump browserslist from 4.21.5 to 4.21.6 by @dependabot in https://github.com/webpack/webpack/pull/17275
Bump @types/node from 20.2.4 to 20.2.5 by @dependabot in https://github.com/webpack/webpack/pull/17276
Bump @babel/core from 7.21.8 to 7.22.1 by @dependabot in https://github.com/webpack/webpack/pull/17278

Full Changelog: https://github.com/webpack/webpack/compare/v5.84.1...v5.85.0","New Features
Add readonly cache mode by @vankop in link
Normalize property accessors for esm namespaces and chained member/call expressions by @bworline in link 
Support environment in loader context by @alexander-akait in link
Introduce a new syntax for addModule() support in worklets - *context.audioWorklet.addModule() by @alexander-akait in link
Bug Fixes
Fix type regression with unknown module type strings by @alexander-akait in link
Developer Experience
Use global runtime constants for webpack exports by @burhanuday in link
Add strict mode type coverage for WASM and Runtime code by @alexander-akait in link
Add strict mode type coverage for runtime modules and runtime plugins by @alexander-akait in link
Add types for JSON & Asset Modules including their interfacing plugins by @alexander-akait in link
Add type coverage for Module subclasses and plugins by @alexander-akait in link
Dependencies & Maintenance
Use GitHub Discussions instead of Gitter in issue templates by @snitin315 in link
Bump @types/node from 20.2.3 to 20.2.4 by @dependabot in link
Bump browserslist from 4.21.5 to 4.21.6 by @dependabot in link
Bump @types/node from 20.2.4 to 20.2.5 by @dependabot in link
Bump @babel/core from 7.21.8 to 7.22.1 by @dependabot in link
Full Changelog: link"
5,"Bug Fixes

Fix regression in inner graph for reserved identifiers by @alexander-akait in https://github.com/webpack/webpack/pull/17265

Dependencies & Maintenance

Bump @types/jest from 29.5.0 to 29.5.1 by @dependabot in https://github.com/webpack/webpack/pull/17027
Bump simple-git from 3.18.0 to 3.19.0 by @dependabot in https://github.com/webpack/webpack/pull/17263

Full Changelog: https://github.com/webpack/webpack/compare/v5.84.0...v5.84.1","Bug Fixes
Fix regression in inner graph for reserved identifiers by @alexander-akait in link
Dependencies & Maintenance
Bump @types/jest from 29.5.0 to 29.5.1 by @dependabot in link
Bump simple-git from 3.18.0 to 3.19.0 by @dependabot in link
Full Changelog: link"
6,"New Features

SourceMapDevToolPlugin now supports append option as a function by @snitin315 in https://github.com/webpack/webpack/pull/17252

Bug Fixes

Fix multiple bugs referencing class names when shadowed by import name in properties and methods by @alexander-akait in https://github.com/webpack/webpack/pull/17233
Allow DefinePlugin shorthand property by @shamoilarsi in https://github.com/webpack/webpack/pull/17231
[CSS] - Fix edge cases in parsing @import by @alexander-akait in https://github.com/webpack/webpack/pull/17229

Developer Experience

Increase type coverage for serialization classes by @alexander-akait in https://github.com/webpack/webpack/pull/17243
Increase type coverage for JavascriptParser and ModuleDependency subclasses by @alexander-akait in https://github.com/webpack/webpack/pull/17236
Increase type coverage to strict-mode quality for Configuration/Normalization objects by @alexander-akait in https://github.com/webpack/webpack/pull/17247
Refactor duplicate strings by replacing them with constant for webpack_require instead of string literal by @burhanuday in https://github.com/webpack/webpack/pull/17228
Add test case for with { type: ""json"" } by @alexander-akait in https://github.com/webpack/webpack/pull/17230
Add test case for destructuring by @alexander-akait in https://github.com/webpack/webpack/pull/17248

Dependencies & Maintenance

Add GitHub discussions badge in README by @snitin315 in https://github.com/webpack/webpack/pull/17251
Bump enhanced-resolve to 5.14.1 by @TheLarkInn in https://github.com/webpack/webpack/pull/17257
Bump @types/node from 20.1.7 to 20.2.0 by @dependabot in https://github.com/webpack/webpack/pull/17219
Bump @types/node from 20.2.0 to 20.2.1 by @dependabot in https://github.com/webpack/webpack/pull/17226
Bump webpack-cli from 5.1.0 to 5.1.1 by @dependabot in https://github.com/webpack/webpack/pull/17164
Bump eslint from 8.39.0 to 8.40.0 by @dependabot in https://github.com/webpack/webpack/pull/17148
Bump @babel/core from 7.21.4 to 7.21.8 by @dependabot in https://github.com/webpack/webpack/pull/17126
Bump @types/node from 20.2.1 to 20.2.3 by @dependabot in https://github.com/webpack/webpack/pull/17238
Bump eslint from 8.40.0 to 8.41.0 by @dependabot in https://github.com/webpack/webpack/pull/17237

New Contributors

@shamoilarsi made their first contribution in https://github.com/webpack/webpack/pull/17231

Full Changelog: https://github.com/webpack/webpack/compare/v5.83.1...v5.84.0","New Features
SourceMapDevToolPlugin now supports append option as a function by @snitin315 in link
Bug Fixes
Fix multiple bugs referencing class names when shadowed by import name in properties and methods by @alexander-akait in link
Allow DefinePlugin shorthand property by @shamoilarsi in link
[CSS] - Fix edge cases in parsing @import by @alexander-akait in link
Developer Experience
Increase type coverage for serialization classes by @alexander-akait in link
Increase type coverage for JavascriptParser and ModuleDependency subclasses by @alexander-akait in link
Increase type coverage to strict-mode quality for Configuration/Normalization objects by @alexander-akait in link
Refactor duplicate strings by replacing them with constant for webpack_require instead of string literal by @burhanuday in link
Add test case for with { type: ""json"" } by @alexander-akait in link
Add test case for destructuring by @alexander-akait in link
Dependencies & Maintenance
Add GitHub discussions badge in README by @snitin315 in link
Bump enhanced-resolve to 5.14.1 by @TheLarkInn in link
Bump @types/node from 20.1.7 to 20.2.0 by @dependabot in link
Bump @types/node from 20.2.0 to 20.2.1 by @dependabot in link
Bump webpack-cli from 5.1.0 to 5.1.1 by @dependabot in link
Bump eslint from 8.39.0 to 8.40.0 by @dependabot in link
Bump @babel/core from 7.21.4 to 7.21.8 by @dependabot in link
Bump @types/node from 20.2.1 to 20.2.3 by @dependabot in link
Bump eslint from 8.40.0 to 8.41.0 by @dependabot in link
New Contributors
@shamoilarsi made their first contribution in link
Full Changelog: link"
7,"Bug Fixes

Fix regression in import/export normailization effecting mini-css-extract-plugin by @alexander-akait in https://github.com/webpack/webpack/pull/17214

Full Changelog: https://github.com/webpack/webpack/compare/v5.83.0...v5.83.1","Bug Fixes
Fix regression in import/export normailization effecting mini-css-extract-plugin by @alexander-akait in link
Full Changelog: link"
8,"New Features

Normalize property access for imports and exports by @bworline in https://github.com/webpack/webpack/pull/17137
Top Level Await is now enabled by default by @burhanuday in https://github.com/webpack/webpack/pull/17192

Bug Fixes

Correct chunkgroup.groupsIterable return type by @TheLarkInn in https://github.com/webpack/webpack/pull/17196
Fix bug in Rule Matcher type by @alexander-akait in https://github.com/webpack/webpack/pull/17207
Fixed apply event callback and optimizing callback event type by @nuintun in https://github.com/webpack/webpack/pull/16094
Fix types in hot module replacement APIs by @alexander-akait in https://github.com/webpack/webpack/pull/17193

Developer Experience

Expose ChunkGroup to type definitions by @TheLarkInn in https://github.com/webpack/webpack/pull/17201
Add NormalModuleFactory's ResolveData type to public interface by @TheLarkInn in https://github.com/webpack/webpack/pull/17195
Document compilation.afterChunks hook by @TheLarkInn in https://github.com/webpack/webpack/pull/17202

Dependencies & Maintenance

Bump @webassemblyjs/wasm-edit from 1.11.5 to 1.11.6 by @dependabot in https://github.com/webpack/webpack/pull/17168
Bump wast-loader from 1.11.5 to 1.11.6 by @dependabot in https://github.com/webpack/webpack/pull/17163
Bump yarn-deduplicate from 6.0.1 to 6.0.2 by @dependabot in https://github.com/webpack/webpack/pull/17184
Fix command by @alexander-akait in https://github.com/webpack/webpack/pull/17154
Bump @types/node from 18.16.3 to 20.1.7 by @dependabot in https://github.com/webpack/webpack/pull/17205

New Contributors

@bworline made their first contribution in https://github.com/webpack/webpack/pull/17137
@nuintun made their first contribution in https://github.com/webpack/webpack/pull/16094

Full Changelog: https://github.com/webpack/webpack/compare/v5.82.1...v5.83.0","New Features
Normalize property access for imports and exports by @bworline in link
Top Level Await is now enabled by default by @burhanuday in link
Bug Fixes
Correct chunkgroup.groupsIterable return type by @TheLarkInn in link
Fix bug in Rule Matcher type by @alexander-akait in link
Fixed apply event callback and optimizing callback event type by @nuintun in link
Fix types in hot module replacement APIs by @alexander-akait in link
Developer Experience
Expose ChunkGroup to type definitions by @TheLarkInn in link
Add NormalModuleFactory's ResolveData type to public interface by @TheLarkInn in link
Document compilation.afterChunks hook by @TheLarkInn in link
Dependencies & Maintenance
Bump @webassemblyjs/wasm-edit from 1.11.5 to 1.11.6 by @dependabot in link
Bump wast-loader from 1.11.5 to 1.11.6 by @dependabot in link
Bump yarn-deduplicate from 6.0.1 to 6.0.2 by @dependabot in link
Fix command by @alexander-akait in link
Bump @types/node from 18.16.3 to 20.1.7 by @dependabot in link
New Contributors
@bworline made their first contribution in link
@nuintun made their first contribution in link
Full Changelog: link"
9,"Bug Fixes

[CSS] - Support nesting in CSS modules and bug fixes by @alexander-akait in https://github.com/webpack/webpack/pull/17133
[CSS] - Fix crash with importModule when CSS enabled by @alexander-akait in https://github.com/webpack/webpack/pull/17140
Fix bug where output.hashFunction was failing to generate debug hash by @ahabhgk in https://github.com/webpack/webpack/pull/16950
Reduce the amount of generated code for chunk loading by @lvivski in https://github.com/webpack/webpack/pull/17151
Use module preload for ESM module output by @alexander-akait in https://github.com/webpack/webpack/pull/17143

Developer Experience

Improve module type strictness for Module.prototype.type expand ModuleTypeConstants by @TheLarkInn in https://github.com/webpack/webpack/pull/17136

Dependencies & Maintenance

Update package.json description by @JeraldVin in https://github.com/webpack/webpack/pull/17145
Bump webpack-cli from 5.0.2 to 5.1.0 by @dependabot in https://github.com/webpack/webpack/pull/17146
Bump core-js from 3.30.1 to 3.30.2 by @dependabot in https://github.com/webpack/webpack/pull/17149
Bump enhanced-resolve to v5.14.0 by @snitin315 in https://github.com/webpack/webpack/pull/17160

New Contributors

@JeraldVin made their first contribution in https://github.com/webpack/webpack/pull/17145

Full Changelog: https://github.com/webpack/webpack/compare/v5.82.0...v5.82.1","Bug Fixes
[CSS] - Support nesting in CSS modules and bug fixes by @alexander-akait in link
[CSS] - Fix crash with importModule when CSS enabled by @alexander-akait in link
Fix bug where output.hashFunction was failing to generate debug hash by @ahabhgk in link
Reduce the amount of generated code for chunk loading by @lvivski in link
Use module preload for ESM module output by @alexander-akait in link
Developer Experience
Improve module type strictness for Module.prototype.type expand ModuleTypeConstants by @TheLarkInn in link
Dependencies & Maintenance
Update package.json description by @JeraldVin in link
Bump webpack-cli from 5.0.2 to 5.1.0 by @dependabot in link
Bump core-js from 3.30.1 to 3.30.2 by @dependabot in link
Bump enhanced-resolve to v5.14.0 by @snitin315 in link
New Contributors
@JeraldVin made their first contribution in link
Full Changelog: link"
10,"New Features

[CSS] - Add URL dependencies support to consume shared module via module federation by @snitin315 in https://github.com/webpack/webpack/pull/16945
Allow webpack-cli to be in ESM by @alexander-akait in https://github.com/webpack/webpack/pull/17088
Allow specifying ""onPolicyCreationFailure"" mode for trusted types by @Zlatkovsky in https://github.com/webpack/webpack/pull/16990

Bug Fixes

[CSS] - Respect media/supports/layer from parent CSS module by @alexander-akait in https://github.com/webpack/webpack/pull/17115
[CSS] - Add warning & support for any @import rules must precede all other rules by @alexander-akait in https://github.com/webpack/webpack/pull/17118
[CSS] - Support handling #hash URL as external (similar to Parcel) by @alexander-akait in https://github.com/webpack/webpack/pull/17116
Optimize numberHash.js performance by removing inner loops by @alexkuz in https://github.com/webpack/webpack/pull/17074
Improve template string comparison algorithm by @An0nie in https://github.com/webpack/webpack/pull/17079

Tests & Contributor Experience

[CSS] - Increase imports external test coverage by @alexander-akait in https://github.com/webpack/webpack/pull/17089
Improve PR reliability via ignoring unstable coverage by @alexander-akait in https://github.com/webpack/webpack/pull/17106
Update webpack types to support extends property in webpack (for webpack-cli) by @burhanuday in https://github.com/webpack/webpack/pull/17113

Developer Experience

Increase type coverage and documentation for StringXor class.  by @TheLarkInn in https://github.com/webpack/webpack/pull/17070
Increase type coverage & docs for numberHash by @TheLarkInn in https://github.com/webpack/webpack/pull/17072
Increase type coverage & docs for JavascriptParser by @TheLarkInn in https://github.com/webpack/webpack/pull/17094
Increase type coverage & docs for BasicEvaluatedExpression by @TheLarkInn in https://github.com/webpack/webpack/pull/17096
Increase type coverage for CSS module type by @alexander-akait in https://github.com/webpack/webpack/pull/17097
Increase type coverage for JSON module type by @alexander-akait in https://github.com/webpack/webpack/pull/17095
Increase type coverage & docs for multiple utility classes by @alexander-akait in https://github.com/webpack/webpack/pull/17107

Dependencies & Maintenance

chore(deps-dev): bump lint-staged from 13.2.1 to 13.2.2 by @dependabot in https://github.com/webpack/webpack/pull/17075
chore(deps-dev): bump eslint from 8.38.0 to 8.39.0 by @dependabot in https://github.com/webpack/webpack/pull/17052
chore(deps-dev): bump assemblyscript from 0.27.3 to 0.27.4 by @dependabot in https://github.com/webpack/webpack/pull/17064
chore(deps-dev): bump assemblyscript from 0.27.4 to 0.27.5 by @dependabot in https://github.com/webpack/webpack/pull/17109
chore(deps-dev): bump @types/node from 18.16.2 to 18.16.3 by @dependabot in https://github.com/webpack/webpack/pull/17112
chore(deps-dev): bump @types/node from 18.15.13 to 18.16.2 by @dependabot in https://github.com/webpack/webpack/pull/17084
chore(deps-dev): bump webpack-cli from 5.0.1 to 5.0.2 by @dependabot in https://github.com/webpack/webpack/pull/17054
chore(deps-dev): bump date-fns from 2.29.3 to 2.30.0 by @dependabot in https://github.com/webpack/webpack/pull/17111

New Contributors

@An0nie made their first contribution in https://github.com/webpack/webpack/pull/17079
@burhanuday made their first contribution in https://github.com/webpack/webpack/pull/17113
@Zlatkovsky made their first contribution in https://github.com/webpack/webpack/pull/16990

Full Changelog: https://github.com/webpack/webpack/compare/v5.81.0...v5.82.0","New Features
[CSS] - Add URL dependencies support to consume shared module via module federation by @snitin315 in link
Allow webpack-cli to be in ESM by @alexander-akait in link
Allow specifying ""onPolicyCreationFailure"" mode for trusted types by @Zlatkovsky in link
Bug Fixes
[CSS] - Respect media/supports/layer from parent CSS module by @alexander-akait in link
[CSS] - Add warning & support for any @import rules must precede all other rules by @alexander-akait in link
[CSS] - Support handling #hash URL as external (similar to Parcel) by @alexander-akait in link
Optimize numberHash.js performance by removing inner loops by @alexkuz in link
Improve template string comparison algorithm by @An0nie in link
Tests & Contributor Experience
[CSS] - Increase imports external test coverage by @alexander-akait in link
Improve PR reliability via ignoring unstable coverage by @alexander-akait in link
Update webpack types to support extends property in webpack (for webpack-cli) by @burhanuday in link
Developer Experience
Increase type coverage and documentation for StringXor class.  by @TheLarkInn in link
Increase type coverage & docs for numberHash by @TheLarkInn in link
Increase type coverage & docs for JavascriptParser by @TheLarkInn in link
Increase type coverage & docs for BasicEvaluatedExpression by @TheLarkInn in link
Increase type coverage for CSS module type by @alexander-akait in link
Increase type coverage for JSON module type by @alexander-akait in link
Increase type coverage & docs for multiple utility classes by @alexander-akait in link
Dependencies & Maintenance
chore(deps-dev): bump lint-staged from 13.2.1 to 13.2.2 by @dependabot in link
chore(deps-dev): bump eslint from 8.38.0 to 8.39.0 by @dependabot in link
chore(deps-dev): bump assemblyscript from 0.27.3 to 0.27.4 by @dependabot in link
chore(deps-dev): bump assemblyscript from 0.27.4 to 0.27.5 by @dependabot in link
chore(deps-dev): bump @types/node from 18.16.2 to 18.16.3 by @dependabot in link
chore(deps-dev): bump @types/node from 18.15.13 to 18.16.2 by @dependabot in link
chore(deps-dev): bump webpack-cli from 5.0.1 to 5.0.2 by @dependabot in link
chore(deps-dev): bump date-fns from 2.29.3 to 2.30.0 by @dependabot in link
New Contributors
@An0nie made their first contribution in link
@burhanuday made their first contribution in link
@Zlatkovsky made their first contribution in link
Full Changelog: link"
11,"New Features

[CSS] - Increased CSS import support and new hooks included for CSS module creation by @alexander-akait in https://github.com/webpack/webpack/pull/17057
Logging now added to DefinePlugin by @alexander-akait in https://github.com/webpack/webpack/pull/17048
New ignoreBrowserWarnings option to ignore browser console warnings in ModuleFederation by @indeediansbrett in https://github.com/webpack/webpack/pull/16388

Bug Fixes

[CSS] - Fix issue where vendor prefixed keyframes and animation was not supported in CSS modules by @alexander-akait in https://github.com/webpack/webpack/pull/16975
Fix bug where AST was not properly handled by @quanru in https://github.com/webpack/webpack/pull/17032
Fix automatic publicPath detection logic by @alexander-akait in https://github.com/webpack/webpack/pull/17047

Tests & Contributor Experience

Rename provide to getOrInsert in MapHelpers and document it better by @TheLarkInn in https://github.com/webpack/webpack/pull/17060
Increase test reliability for DefinePlugin @alexander-akait in https://github.com/webpack/webpack/pull/17062
Add additional CI Pipeline to test main branches of first-party webpack dependencies by @alexander-akait in https://github.com/webpack/webpack/pull/17020
Refactor tests to no longer use deprecated or legacy dependencies and APIs by @alexander-akait in https://github.com/webpack/webpack/pull/17033

Developer Experience

Increase type coverage/documentation for ModuleFilenameHelpers by @TheLarkInn in https://github.com/webpack/webpack/pull/17045
Increase type coverage/documentation for CommonJsExportsParserPlugin by @TheLarkInn in https://github.com/webpack/webpack/pull/17046
Increase type coverage/documentation for binarySearchBounds.js by @TheLarkInn in https://github.com/webpack/webpack/pull/17058
Export MemoryCacheOptions types by @romulof in https://github.com/webpack/webpack/pull/17055

Dependencies & Maintenance

Add NodeJS v20 to CI Matrix by @alexander-akait in https://github.com/webpack/webpack/pull/17019
Update Typescript to v5 by @alexander-akait in https://github.com/webpack/webpack/pull/16957
Bump @types/estree from 1.0.0 to 1.0.1 by @dependabot in https://github.com/webpack/webpack/pull/17026
Bump @types/node from 18.15.11 to 18.15.13 by @dependabot in https://github.com/webpack/webpack/pull/17038
Bump assemblyscript from 0.27.2 to 0.27.3 by @dependabot in https://github.com/webpack/webpack/pull/17051
Bump memfs from 3.5.0 to 3.5.1 by @dependabot in https://github.com/webpack/webpack/pull/17039
Bump prettier from 2.8.7 to 2.8.8 by @dependabot in https://github.com/webpack/webpack/pull/17050
Bump simple-git from 3.17.0 to 3.18.0 by @dependabot in https://github.com/webpack/webpack/pull/17066

New Contributors

@quanru made their first contribution in https://github.com/webpack/webpack/pull/17032
@romulof made their first contribution in https://github.com/webpack/webpack/pull/17055
@indeediansbrett made their first contribution in https://github.com/webpack/webpack/pull/16388

Full Changelog: https://github.com/webpack/webpack/compare/v5.80.0...v5.81.0","New Features
[CSS] - Increased CSS import support and new hooks included for CSS module creation by @alexander-akait in link
Logging now added to DefinePlugin by @alexander-akait in link
New ignoreBrowserWarnings option to ignore browser console warnings in ModuleFederation by @indeediansbrett in link
Bug Fixes
[CSS] - Fix issue where vendor prefixed keyframes and animation was not supported in CSS modules by @alexander-akait in link
Fix bug where AST was not properly handled by @quanru in link
Fix automatic publicPath detection logic by @alexander-akait in link
Tests & Contributor Experience
Rename provide to getOrInsert in MapHelpers and document it better by @TheLarkInn in link
Increase test reliability for DefinePlugin @alexander-akait in link
Add additional CI Pipeline to test main branches of first-party webpack dependencies by @alexander-akait in link
Refactor tests to no longer use deprecated or legacy dependencies and APIs by @alexander-akait in link
Developer Experience
Increase type coverage/documentation for ModuleFilenameHelpers by @TheLarkInn in link
Increase type coverage/documentation for CommonJsExportsParserPlugin by @TheLarkInn in link
Increase type coverage/documentation for binarySearchBounds.js by @TheLarkInn in link
Export MemoryCacheOptions types by @romulof in link
Dependencies & Maintenance
Add NodeJS v20 to CI Matrix by @alexander-akait in link
Update Typescript to v5 by @alexander-akait in link
Bump @types/estree from 1.0.0 to 1.0.1 by @dependabot in link
Bump @types/node from 18.15.11 to 18.15.13 by @dependabot in link
Bump assemblyscript from 0.27.2 to 0.27.3 by @dependabot in link
Bump memfs from 3.5.0 to 3.5.1 by @dependabot in link
Bump prettier from 2.8.7 to 2.8.8 by @dependabot in link
Bump simple-git from 3.17.0 to 3.18.0 by @dependabot in link
New Contributors
@quanru made their first contribution in link
@romulof made their first contribution in link
@indeediansbrett made their first contribution in link
Full Changelog: link"
12,"New Features

Support destructuring assignment in import.meta by @vankop in https://github.com/webpack/webpack/pull/16996
Support treeshaking for destructuring assignment with AwaitExpression by @vankop in https://github.com/webpack/webpack/pull/16995
Introduce errorsSpace, warningsSpace for more readable traces in stats by @vankop in https://github.com/webpack/webpack/pull/15450

Bug Fixes

[CSS] - Fix runtime generation bug for merged CSS Chunks by @janlent1 in https://github.com/webpack/webpack/pull/16903
[CSS] - Properly handle url()/src()/image-set()/image() by @alexander-akait in https://github.com/webpack/webpack/pull/16978
ES Module webpack loaders are now supported @stefanprobst in https://github.com/webpack/webpack/pull/15198
Fix spelling error for statement.finalizer in parser by @xiaoboost in https://github.com/webpack/webpack/pull/17016
Fix non-deterministic moduleId assignment due to encountering NaN in sort function by @scameron in https://github.com/webpack/webpack/pull/16933
[enhanced-resolve]: Support wildcards pattern with common suffix in package maps & imports/exports field by @bvanjoi in https://github.com/webpack/enhanced-resolve/pull/353 

Tests & Contributor Experience

[CSS] - Added test case for @supports field by @alexander-akait in https://github.com/webpack/webpack/pull/17011
Add test for include option in BannerPlugin by @jeffin143 in https://github.com/webpack/webpack/pull/10736
Remove finializer from cspell.json by @snitin315 in https://github.com/webpack/webpack/pull/17022

Developer Experience

Adds the twitter badge by @yadunandanbhat in https://github.com/webpack/webpack/pull/15667
Add wasm-bindgen example to example by @gthb in https://github.com/webpack/webpack/pull/14313
Update grammar mistakes in examples by @ersachin3112 in https://github.com/webpack/webpack/pull/16988

Dependencies & Maintenance

Bump core-js from 3.30.0 to 3.30.1 by @dependabot in https://github.com/webpack/webpack/pull/16983
Bump @webassemblyjs by @alexander-akait in https://github.com/webpack/webpack/pull/17003
Bump assemblyscript from 0.25.2 to 0.27.2 by @dependabot in https://github.com/webpack/webpack/pull/16959
Bump enhanced-resolve to 5.13.0 by @TheLarkInn in https://github.com/webpack/webpack/pull/17024
Included githubactions in the dependabot config by @neilnaveen in https://github.com/webpack/webpack/pull/15618
Fix prettier by @alexander-akait in https://github.com/webpack/webpack/pull/16976

New Contributors

@neilnaveen made their first contribution in https://github.com/webpack/webpack/pull/15618
@yadunandanbhat made their first contribution in https://github.com/webpack/webpack/pull/15667
@ersachin3112 made their first contribution in https://github.com/webpack/webpack/pull/16988
@stefanprobst made their first contribution in https://github.com/webpack/webpack/pull/15198
@xiaoboost made their first contribution in https://github.com/webpack/webpack/pull/17016
@scameron made their first contribution in https://github.com/webpack/webpack/pull/16933

Full Changelog: https://github.com/webpack/webpack/compare/v5.79.0...v5.80.0","New Features
Support destructuring assignment in import.meta by @vankop in link
Support treeshaking for destructuring assignment with AwaitExpression by @vankop in link
Introduce errorsSpace, warningsSpace for more readable traces in stats by @vankop in link
Bug Fixes
[CSS] - Fix runtime generation bug for merged CSS Chunks by @janlent1 in link
[CSS] - Properly handle url()/src()/image-set()/image() by @alexander-akait in link
ES Module webpack loaders are now supported @stefanprobst in link
Fix spelling error for statement.finalizer in parser by @xiaoboost in link
Fix non-deterministic moduleId assignment due to encountering NaN in sort function by @scameron in link
[enhanced-resolve]: Support wildcards pattern with common suffix in package maps & imports/exports field by @bvanjoi in link 
Tests & Contributor Experience
[CSS] - Added test case for @supports field by @alexander-akait in link
Add test for include option in BannerPlugin by @jeffin143 in link
Remove finializer from cspell.json by @snitin315 in link
Developer Experience
Adds the twitter badge by @yadunandanbhat in link
Add wasm-bindgen example to example by @gthb in link
Update grammar mistakes in examples by @ersachin3112 in link
Dependencies & Maintenance
Bump core-js from 3.30.0 to 3.30.1 by @dependabot in link
Bump @webassemblyjs by @alexander-akait in link
Bump assemblyscript from 0.25.2 to 0.27.2 by @dependabot in link
Bump enhanced-resolve to 5.13.0 by @TheLarkInn in link
Included githubactions in the dependabot config by @neilnaveen in link
Fix prettier by @alexander-akait in link
New Contributors
@neilnaveen made their first contribution in link
@yadunandanbhat made their first contribution in link
@ersachin3112 made their first contribution in link
@stefanprobst made their first contribution in link
@xiaoboost made their first contribution in link
@scameron made their first contribution in link
Full Changelog: link"
13,"New Features

webpack will now support simple destructuring scenarios for treeshaking namespaced imports and DefinePlugin by @vankop in https://github.com/webpack/webpack/pull/16941

Bugfixes

Truncate extremely long module names in DefaultStatsPrinter by @snitin315 in https://github.com/webpack/webpack/pull/16882
Add [contenthash] template support in DllPlugin's name option by @snitin315 in https://github.com/webpack/webpack/pull/16935
Fixed a bug where readRecords compiler hook was causing hangs in conjunction with the ReadRecordsPlugin by @snitin315 & @zookatron in https://github.com/webpack/webpack/pull/16944
webpack can now consume ESM bundles generated by webpack's esm output support by @vankop in https://github.com/webpack/webpack/pull/15608
[CSS] - webpack now respects CSS's case-insensitivity with atTags like @MEDIA by @alexander-akait in https://github.com/webpack/webpack/pull/16915
[CSS] - Fixes a bug where crossOriginLoading anonymous would not work when loading styles by @chenjiahan in https://github.com/webpack/webpack/pull/16925

Developer Experience

Fix broken links and typos found in examples by @snitin315 in https://github.com/webpack/webpack/pull/16937
Export more Externals Option types by @snitin315 in https://github.com/webpack/webpack/pull/12774

Contributor Experience

Add new test case for ModuleFederationPlugin usage with shareScope option by @snitin315 in https://github.com/webpack/webpack/pull/16943
Bump core-js from 3.20.3 to 3.30.0 by @dependabot in https://github.com/webpack/webpack/pull/16905
Update all applicable local dependencies and devDependencies by @alexander-akait in https://github.com/webpack/webpack/pull/16919, https://github.com/webpack/webpack/pull/16924, https://github.com/webpack/webpack/pull/16936, https://github.com/webpack/webpack/pull/16968
Update to Jest 29 by @alexander-akait in https://github.com/webpack/webpack/pull/16947

New Contributors

@chenjiahan made their first contribution in https://github.com/webpack/webpack/pull/16925
@karlhorky made their first contribution in https://github.com/webpack/webpack/pull/16419
@zookatron made their first contribution in https://github.com/webpack/webpack/pull/16301

Full Changelog: https://github.com/webpack/webpack/compare/v5.78.0...v5.79.0","New Features
webpack will now support simple destructuring scenarios for treeshaking namespaced imports and DefinePlugin by @vankop in link
Bugfixes
Truncate extremely long module names in DefaultStatsPrinter by @snitin315 in link
Add [contenthash] template support in DllPlugin's name option by @snitin315 in link
Fixed a bug where readRecords compiler hook was causing hangs in conjunction with the ReadRecordsPlugin by @snitin315 & @zookatron in link
webpack can now consume ESM bundles generated by webpack's esm output support by @vankop in link
[CSS] - webpack now respects CSS's case-insensitivity with atTags like @MEDIA by @alexander-akait in link
[CSS] - Fixes a bug where crossOriginLoading anonymous would not work when loading styles by @chenjiahan in link
Developer Experience
Fix broken links and typos found in examples by @snitin315 in link
Export more Externals Option types by @snitin315 in link
Contributor Experience
Add new test case for ModuleFederationPlugin usage with shareScope option by @snitin315 in link
Bump core-js from 3.20.3 to 3.30.0 by @dependabot in link
Update all applicable local dependencies and devDependencies by @alexander-akait in link, link, link, link
Update to Jest 29 by @alexander-akait in link
New Contributors
@chenjiahan made their first contribution in link
@karlhorky made their first contribution in link
@zookatron made their first contribution in link
Full Changelog: link"
14,"Features

Implement amdContainer support for AMD libraries (Fixes #16561) by @long76 in https://github.com/webpack/webpack/pull/16562

Bugfixes

[CSS] - Nested atRule's @media or @supports now properly are replaced with unique identifiers by @noreiller in https://github.com/webpack/webpack/pull/15812
[CSS] - Fix bug where closing parenthesis in CSS were not properly parsed and compiled by @janlent1 in https://github.com/webpack/webpack/pull/16864
Fix an issue where oneOf rule has been picked multiple times by @xiaoxiaojx in https://github.com/webpack/webpack/pull/16477
Add createRequire support for node:module prefix by @alexander-akait in https://github.com/webpack/webpack/pull/16904
Fix bug where self-referencing a package in a shared module failed by @weareoutman in https://github.com/webpack/webpack/pull/16685

Performance

Make ErrorHelpers named functions; Add types by @TheLarkInn in https://github.com/webpack/webpack/pull/16893
Introduce ModuleTypeConstants for plugins by @TheLarkInn in https://github.com/webpack/webpack/pull/16896
Refactor memory footprint in string usages for multiple plugins by @TheLarkInn in https://github.com/webpack/webpack/pull/16894
Add more module type constants, use them across codebase by @TheLarkInn in https://github.com/webpack/webpack/pull/16898

Contributor Experience

Implement default PR Template to use GitHub Copilot for PR's integration and fix template name usage by @geromegrignon in https://github.com/webpack/webpack/pull/16890
ci: update actions/cache to v3 by @armujahid in https://github.com/webpack/webpack/pull/16462
webpack org Collaborators and Members now have funded GitHub Codespaces!


New Contributors

@geromegrignon made their first contribution in https://github.com/webpack/webpack/pull/16890
@armujahid made their first contribution in https://github.com/webpack/webpack/pull/16462
@long76 made their first contribution in https://github.com/webpack/webpack/pull/16562
@weareoutman made their first contribution in https://github.com/webpack/webpack/pull/16685

Full Changelog: https://github.com/webpack/webpack/compare/v5.77.0...v5.78.0","Features
Implement amdContainer support for AMD libraries (Fixes #16561) by @long76 in link
Bugfixes
[CSS] - Nested atRule's @media or @supports now properly are replaced with unique identifiers by @noreiller in link
[CSS] - Fix bug where closing parenthesis in CSS were not properly parsed and compiled by @janlent1 in link
Fix an issue where oneOf rule has been picked multiple times by @xiaoxiaojx in link
Add createRequire support for node:module prefix by @alexander-akait in link
Fix bug where self-referencing a package in a shared module failed by @weareoutman in link
Performance
Make ErrorHelpers named functions; Add types by @TheLarkInn in link
Introduce ModuleTypeConstants for plugins by @TheLarkInn in link
Refactor memory footprint in string usages for multiple plugins by @TheLarkInn in link
Add more module type constants, use them across codebase by @TheLarkInn in link
Contributor Experience
Implement default PR Template to use GitHub Copilot for PR's integration and fix template name usage by @geromegrignon in link
ci: update actions/cache to v3 by @armujahid in link
webpack org Collaborators and Members now have funded GitHub Codespaces!
New Contributors
@geromegrignon made their first contribution in link
@armujahid made their first contribution in link
@long76 made their first contribution in link
@weareoutman made their first contribution in link
Full Changelog: link"
15,"New Features

Add a new output option, output.workerPublicPath by @thomastay in https://github.com/webpack/webpack/pull/16671

Developer Experience

Improve resolve.extensions error message to suggest when ""."" is missing before the extension by @snitin315 in https://github.com/webpack/webpack/pull/16807

Contributor Experience

Enable GitHub Copilot for PR's into default Pull Request Template by @TheLarkInn in https://github.com/webpack/webpack/pull/16881

New Contributors

@thomastay made their first contribution in https://github.com/webpack/webpack/pull/16671

Full Changelog: https://github.com/webpack/webpack/compare/v5.76.3...v5.77.0","New Features
Add a new output option, output.workerPublicPath by @thomastay in link
Developer Experience
Improve resolve.extensions error message to suggest when ""."" is missing before the extension by @snitin315 in link
Contributor Experience
Enable GitHub Copilot for PR's into default Pull Request Template by @TheLarkInn in link
New Contributors
@thomastay made their first contribution in link
Full Changelog: link"
16,"Bugfixes

Non-javascript files will correctly not be imported when using experiments.outputModule (ES Module Output) by @snitin315 in https://github.com/webpack/webpack/pull/16809
Limit console output progress bar length to 40 when no columns provided by @snitin315 in https://github.com/webpack/webpack/pull/16810
Add missing NodeJS Builtin Modules support for inspector/promises, readline/promises, and stream/consumers by @ShenHongFei in https://github.com/webpack/webpack/pull/16841
webpack bin/cli now properly respects NODE_PATH env variable by @snitin315 in https://github.com/webpack/webpack/pull/16808
Improve typos in resolveResourceErrorHints by @snitin315 in https://github.com/webpack/webpack/pull/16806
Add missing loaders token support to moduleFilenameTemplate function call by @pgoldberg in https://github.com/webpack/webpack/pull/16756
Add gaurd condition for enabledLibraryTypes in internal ContainerPlugin by @PengBoUESTC in https://github.com/webpack/webpack/pull/16635

New Contributors

@ShenHongFei made their first contribution in https://github.com/webpack/webpack/pull/16841
@pgoldberg made their first contribution in https://github.com/webpack/webpack/pull/16756
@PengBoUESTC made their first contribution in https://github.com/webpack/webpack/pull/16635

Full Changelog: https://github.com/webpack/webpack/compare/v5.76.2...v5.76.3","Bugfixes
Non-javascript files will correctly not be imported when using experiments.outputModule (ES Module Output) by @snitin315 in link
Limit console output progress bar length to 40 when no columns provided by @snitin315 in link
Add missing NodeJS Builtin Modules support for inspector/promises, readline/promises, and stream/consumers by @ShenHongFei in link
webpack bin/cli now properly respects NODE_PATH env variable by @snitin315 in link
Improve typos in resolveResourceErrorHints by @snitin315 in link
Add missing loaders token support to moduleFilenameTemplate function call by @pgoldberg in link
Add gaurd condition for enabledLibraryTypes in internal ContainerPlugin by @PengBoUESTC in link
New Contributors
@ShenHongFei made their first contribution in link
@pgoldberg made their first contribution in link
@PengBoUESTC made their first contribution in link
Full Changelog: link"
17,"Bugfixes

Fix bug where a missing semicolon in generated bundle output for publicPathRuntime would cause concatenated runtime errors by @snitin315 in https://github.com/webpack/webpack/pull/16811
Remove redundant semicolons generated in bundle runtime code after onScriptComplete function by @ahaoboy in https://github.com/webpack/webpack/pull/16347
Fix bug where RealContentHashPlugin was not respecting output.hashSalt's ability to cause a force recalculation of [contenthash] for emitted assets by @dmichon-msft #16789 

Performance

Improve memory and runtime performance of sourcemaps via hoisting Regular Expression literals to stored variables by @TheLarkInn in https://github.com/webpack/webpack/pull/15722
Correct v8 deoptimization in ModuleGraph due to instance property declarations occurring outside of constructor by @snitin315 in https://github.com/webpack/webpack/pull/16830

Developer Experience

Improved internal typings to match webpack-sources typings for Source instances by @snitin315 in https://github.com/webpack/webpack/pull/16805
Update repo examples to include missing quotation by @snitin315 in https://github.com/webpack/webpack/pull/16812

New Contributors

@ahaoboy made their first contribution in https://github.com/webpack/webpack/pull/16347

Full Changelog: https://github.com/webpack/webpack/compare/v5.76.1...v5.76.2","Bugfixes
Fix bug where a missing semicolon in generated bundle output for publicPathRuntime would cause concatenated runtime errors by @snitin315 in link
Remove redundant semicolons generated in bundle runtime code after onScriptComplete function by @ahaoboy in link
Fix bug where RealContentHashPlugin was not respecting output.hashSalt's ability to cause a force recalculation of [contenthash] for emitted assets by @dmichon-msft #16789 
Performance
Improve memory and runtime performance of sourcemaps via hoisting Regular Expression literals to stored variables by @TheLarkInn in link
Correct v8 deoptimization in ModuleGraph due to instance property declarations occurring outside of constructor by @snitin315 in link
Developer Experience
Improved internal typings to match webpack-sources typings for Source instances by @snitin315 in link
Update repo examples to include missing quotation by @snitin315 in link
New Contributors
@ahaoboy made their first contribution in link
Full Changelog: link"
18,"Fixed

Added assert/strict built-in to NodeTargetPlugin

Revert

Improve performance of hashRegExp lookup by @ryanwilsonperkin in https://github.com/webpack/webpack/pull/16759
","Fixed
Added assert/strict built-in to NodeTargetPlugin
Revert
Improve performance of hashRegExp lookup by @ryanwilsonperkin in link"
19,"Bugfixes

Avoid cross-realm object access by @Jack-Works in https://github.com/webpack/webpack/pull/16500
Improve hash performance via conditional initialization by @lvivski in https://github.com/webpack/webpack/pull/16491
Serialize generatedCode info to fix bug in asset module cache restoration by @ryanwilsonperkin in https://github.com/webpack/webpack/pull/16703
Improve performance of hashRegExp lookup by @ryanwilsonperkin in https://github.com/webpack/webpack/pull/16759

Features

add target to LoaderContext type by @askoufis in https://github.com/webpack/webpack/pull/16781

Security

CVE-2022-37603 fixed by @akhilgkrishnan in https://github.com/webpack/webpack/pull/16446

Repo Changes

Fix HTML5 logo in README by @jakebailey in https://github.com/webpack/webpack/pull/16614
Replace TypeScript logo in README by @jakebailey in https://github.com/webpack/webpack/pull/16613
Update actions/cache dependencies by @piwysocki in https://github.com/webpack/webpack/pull/16493

New Contributors

@Jack-Works made their first contribution in https://github.com/webpack/webpack/pull/16500
@lvivski made their first contribution in https://github.com/webpack/webpack/pull/16491
@jakebailey made their first contribution in https://github.com/webpack/webpack/pull/16614
@akhilgkrishnan made their first contribution in https://github.com/webpack/webpack/pull/16446
@ryanwilsonperkin made their first contribution in https://github.com/webpack/webpack/pull/16703
@piwysocki made their first contribution in https://github.com/webpack/webpack/pull/16493
@askoufis made their first contribution in https://github.com/webpack/webpack/pull/16781

Full Changelog: https://github.com/webpack/webpack/compare/v5.75.0...v5.76.0","Bugfixes
Avoid cross-realm object access by @Jack-Works in link
Improve hash performance via conditional initialization by @lvivski in link
Serialize generatedCode info to fix bug in asset module cache restoration by @ryanwilsonperkin in link
Improve performance of hashRegExp lookup by @ryanwilsonperkin in link
Features
add target to LoaderContext type by @askoufis in link
Security
CVE-2022-37603 fixed by @akhilgkrishnan in link
Repo Changes
Fix HTML5 logo in README by @jakebailey in link
Replace TypeScript logo in README by @jakebailey in link
Update actions/cache dependencies by @piwysocki in link
New Contributors
@Jack-Works made their first contribution in link
@lvivski made their first contribution in link
@jakebailey made their first contribution in link
@akhilgkrishnan made their first contribution in link
@ryanwilsonperkin made their first contribution in link
@piwysocki made their first contribution in link
@askoufis made their first contribution in link
Full Changelog: link"
20,"Bugfixes

experiments.* normalize to false when opt-out
avoid NaN%
show the correct error when using a conflicting chunk name in code
HMR code tests existance of window before trying to access it
fix eval-nosources-* actually exclude sources
fix race condition where no module is returned from processing module
fix position of standalong semicolon in runtime code

Features

add support for @import to extenal CSS when using experimental CSS in node
add i64 support to the deprecated WASM implementation

Developer Experience

expose EnableWasmLoadingPlugin
add more typings
generate getters instead of readonly properties in typings to allow overriding them
","Bugfixes
experiments. normalize to false when opt-out
avoid NaN%
show the correct error when using a conflicting chunk name in code
HMR code tests existance of window before trying to access it
fix eval-nosources- actually exclude sources
fix race condition where no module is returned from processing module
fix position of standalong semicolon in runtime code
Features
add support for @import to extenal CSS when using experimental CSS in node
add i64 support to the deprecated WASM implementation
Developer Experience
expose EnableWasmLoadingPlugin
add more typings
generate getters instead of readonly properties in typings to allow overriding them"
21,"Features

add resolve.extensionAlias option which allows to alias extensions
This is useful when you are forced to add the .js extension to imports when the file really has a .ts extension (typescript + ""type"": ""module"")
add support for ES2022 features like static blocks
add Tree Shaking support for ProvidePlugin

Bugfixes

fix persistent cache when some build dependencies are on a different windows drive
make order of evaluation of side-effect-free modules deterministic between concatenated and non-concatenated modules
remove left-over from debugging in TLA/async modules runtime code
remove unneeded extra 1s timestamp offset during watching when files are actually untouched
This sometimes caused an additional second build which are not really needed
fix shareScope option for ModuleFederationPlugin
set ""use-credentials"" also for same origin scripts

Performance

Improve memory usage and performance of aggregating needed files/directories for watching
This affects rebuild performance

Extensibility

export HarmonyImportDependency for plugins
","Features
add resolve.extensionAlias option which allows to alias extensions
This is useful when you are forced to add the .js extension to imports when the file really has a .ts extension (typescript + ""type"": ""module"")
add support for ES2022 features like static blocks
add Tree Shaking support for ProvidePlugin
Bugfixes
fix persistent cache when some build dependencies are on a different windows drive
make order of evaluation of side-effect-free modules deterministic between concatenated and non-concatenated modules
remove left-over from debugging in TLA/async modules runtime code
remove unneeded extra 1s timestamp offset during watching when files are actually untouched
This sometimes caused an additional second build which are not really needed
fix shareScope option for ModuleFederationPlugin
set ""use-credentials"" also for same origin scripts
Performance
Improve memory usage and performance of aggregating needed files/directories for watching
This affects rebuild performance
Extensibility
export HarmonyImportDependency for plugins"
22,"Features

add options for default dynamicImportMode and prefetch and preload
add support for import { createRequire } from ""module"" in source code

Bugfixes

fix code generation of e. g. return""field""in Module
fix performance of large JSON modules
fix performance of async modules evaluation

Developer Experience

export PathData in typings
improve error messages with more details
","Features
add options for default dynamicImportMode and prefetch and preload
add support for import { createRequire } from ""module"" in source code
Bugfixes
fix code generation of e. g. return""field""in Module
fix performance of large JSON modules
fix performance of async modules evaluation
Developer Experience
export PathData in typings
improve error messages with more details"
23,"Bugfixes

fix __webpack_nonce__ with HMR
fix in operator in some cases
fix json parsing error messages
fix module concatenation with using this.importModule
upgrade enhanced-resolve
","Bugfixes
fix webpack_nonce with HMR
fix in operator in some cases
fix json parsing error messages
fix module concatenation with using this.importModule
upgrade enhanced-resolve"
24,"Features

make cache warnings caused by build errors less verbose
Allow banner to be placed as a footer with the BannerPlugin
allow to concatenate asset modules

Bugfixes

fix RemoteModules when using HMR (Module Federation + HMR)
throw error when using module concatenation and cacheUnaffected
fix in operator with nested exports
","Features
make cache warnings caused by build errors less verbose
Allow banner to be placed as a footer with the BannerPlugin
allow to concatenate asset modules
Bugfixes
fix RemoteModules when using HMR (Module Federation + HMR)
throw error when using module concatenation and cacheUnaffected
fix in operator with nested exports"
25,"Features

choose smarter default for uniqueName when using a output.library which includes placeholders
add support for expressions with in of a imported binding
generate UMD code with arrow functions when possible

Bugfixes

fix source map source names for ContextModule to be relative
fix chunkLoading option in module module
fix edge case where evaluateExpression returns null
retain optional chaining in imported bindings
include runtime code for the base URI even if not using chunk loading
don't throw errors in persistent caching when importing node.js builtin modules via ESM
fix crash when using lazy-once Context modules
improve handling of context modules with multiple contexts
fix race condition HMR chunk loading when importing chunks during HMR updating
handle errors in runAsChild callback
","Features
choose smarter default for uniqueName when using a output.library which includes placeholders
add support for expressions with in of a imported binding
generate UMD code with arrow functions when possible
Bugfixes
fix source map source names for ContextModule to be relative
fix chunkLoading option in module module
fix edge case where evaluateExpression returns null
retain optional chaining in imported bindings
include runtime code for the base URI even if not using chunk loading
don't throw errors in persistent caching when importing node.js builtin modules via ESM
fix crash when using lazy-once Context modules
improve handling of context modules with multiple contexts
fix race condition HMR chunk loading when importing chunks during HMR updating
handle errors in runAsChild callback"
26,"Features

update node.js version constraints for ESM support
add baseUri to entry options to configure a static base uri (the base of new URL())
alphabetically sort exports in namespace objects when possible
add __webpack_exports_info__.name.canMangle
add proxy support to experiments.buildHttp
import.meta.webpackContext as ESM alternative to require.context
handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module

Bugfixes

fix problem when assigning global to a variable
fix crash when using experiments.outputModule and loaderContext.importModule with multiple chunks
avoid generating progress output before the compilation has started (ProgressPlugin)
fix handling of non-static-ESM dependencies with using TLA and HMR in the same module
include the asset module filename in hashing
output.clean will keep HMR assets for at least 10s to allow HMR to access them even when compilation is faster then the browser

Performance

fix asset caching when using the BannerPlugin

Developer Experience

improve typings

Contributing

capture caching errors when running the test suite
","Features
update node.js version constraints for ESM support
add baseUri to entry options to configure a static base uri (the base of new URL())
alphabetically sort exports in namespace objects when possible
add webpack_exports_info.name.canMangle
add proxy support to experiments.buildHttp
import.meta.webpackContext as ESM alternative to require.context
handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module
Bugfixes
fix problem when assigning global to a variable
fix crash when using experiments.outputModule and loaderContext.importModule with multiple chunks
avoid generating progress output before the compilation has started (ProgressPlugin)
fix handling of non-static-ESM dependencies with using TLA and HMR in the same module
include the asset module filename in hashing
output.clean will keep HMR assets for at least 10s to allow HMR to access them even when compilation is faster then the browser
Performance
fix asset caching when using the BannerPlugin
Developer Experience
improve typings
Contributing
capture caching errors when running the test suite"
27,"Revert

revert ""handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module""
","Revert
revert ""handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module"""
28,"Features

automatically switch to an ESM compatible environment when enabling ESM output mode
handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module
add util/types to node.js built-in modules
add __webpack_exports_info__.<name>.canMangle api

Bugfixes

fix bug in chunk graph generation which leads to modules being included in chunk desprite them being already included in parent chunks
avoid writing more than 2GB at once during cache serialization (as workaround for node.js/libuv bug on MacOS)
fix handling of whitespaces in semver ranges when using Module Federation
avoid generating hashes which contain only numbers as they likely conflict with module ids
fix resource name based placeholders for data uris
fix cache serialization for context elements
fix passing of stage option when instrumenting plugins for the ProfilingPlugin
fix tracking of declarations in concatenated modules to avoid conflicts
fix unstable mangling of exports
fix handling of # in paths of loaders
avoid unnecessary cache update when using experiments.buildHttp

Contributing

update typescript and jest

Developer Experience

expose some additional typings for usage in webpack-cli
","Features
automatically switch to an ESM compatible environment when enabling ESM output mode
handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module
add util/types to node.js built-in modules
add webpack_exports_info..canMangle api
Bugfixes
fix bug in chunk graph generation which leads to modules being included in chunk desprite them being already included in parent chunks
avoid writing more than 2GB at once during cache serialization (as workaround for node.js/libuv bug on MacOS)
fix handling of whitespaces in semver ranges when using Module Federation
avoid generating hashes which contain only numbers as they likely conflict with module ids
fix resource name based placeholders for data uris
fix cache serialization for context elements
fix passing of stage option when instrumenting plugins for the ProfilingPlugin
fix tracking of declarations in concatenated modules to avoid conflicts
fix unstable mangling of exports
fix handling of # in paths of loaders
avoid unnecessary cache update when using experiments.buildHttp
Contributing
update typescript and jest
Developer Experience
expose some additional typings for usage in webpack-cli"
29,"Features

allow to disable compile time evaluation of import.meta.url
add __webpack_module__ and __webpack_module__.id to the api

Bugfixes

fix handling of errors thrown in async modules
","Features
allow to disable compile time evaluation of import.meta.url
add webpack_module and webpack_module.id to the api
Bugfixes
fix handling of errors thrown in async modules"
30,"Features

add 'outputPath' configuration option for resource asset modules
support Trusted Types in eval source maps
experiments.css
allow to generate only exports for css in node
add SyncModuleIdsPlugin to sync module ids between server and client compilation
add more options to the DeterministicModuleIdsPlugin to allow to generate equal ids

Developer Experience

limit data url module name in stats printer
allow specific description for CLI options
improve space limiting algorithm in stats printing to show partial lists
add null to errors in callbacks
fix call signature types of addChunkInGroup

Bugfixes

avoid reporting non-existant package.jsons as dependencies
experiments.css
fix missing css runtime when only initial css is used
fix css hmr support
bugfixes to css modules
fix cache serialization for CreateScriptUrlDependency
fix data url content when processed by a loader
fix regexp in identifiers that include |
fix ProfilingPlugin for watch scenarios
add layer to module names and identifiers
this avoid random module id changes when additional modules are added to another layer
provide hashFunction parameter to DependencyTemplates to allow customizing it there
fix HMR when experiments.lazyCompilation is enabled
store url as Buffer to avoid serialization warnings
exclude webpack-hot-middleware/client from lazy compilation

Contributing

remove travis configuration
improve spell checking
","Features
add 'outputPath' configuration option for resource asset modules
support Trusted Types in eval source maps
experiments.css
allow to generate only exports for css in node
add SyncModuleIdsPlugin to sync module ids between server and client compilation
add more options to the DeterministicModuleIdsPlugin to allow to generate equal ids
Developer Experience
limit data url module name in stats printer
allow specific description for CLI options
improve space limiting algorithm in stats printing to show partial lists
add null to errors in callbacks
fix call signature types of addChunkInGroup
Bugfixes
avoid reporting non-existant package.jsons as dependencies
experiments.css
fix missing css runtime when only initial css is used
fix css hmr support
bugfixes to css modules
fix cache serialization for CreateScriptUrlDependency
fix data url content when processed by a loader
fix regexp in identifiers that include |
fix ProfilingPlugin for watch scenarios
add layer to module names and identifiers
this avoid random module id changes when additional modules are added to another layer
provide hashFunction parameter to DependencyTemplates to allow customizing it there
fix HMR when experiments.lazyCompilation is enabled
store url as Buffer to avoid serialization warnings
exclude webpack-hot-middleware/client from lazy compilation
Contributing
remove travis configuration
improve spell checking"
31,"Features

add output.library.type: ""commonjs-static"" to emit a statically analyse-able commonjs module (for node.js esm interop support)
add experiments.css (very experimental)
see https://github.com/webpack/webpack/issues/14893

Bugfixes

fix CORS headers for experiments.lazyCompilation
fix [absolute-resource-path] for SourceMap module naming
avoid stack overflow when accessing many memory cached cache values in series

Performance

reduce default watchOptions.aggregateTimeout to 20ms
","Features
add output.library.type: ""commonjs-static"" to emit a statically analyse-able commonjs module (for node.js esm interop support)
add experiments.css (very experimental)
see link
Bugfixes
fix CORS headers for experiments.lazyCompilation
fix [absolute-resource-path] for SourceMap module naming
avoid stack overflow when accessing many memory cached cache values in series
Performance
reduce default watchOptions.aggregateTimeout to 20ms"
32,"Features

static evaluation understands undefined now
reduce container entry code by a few chars
use template literals when available and they make sense

Bugfixes

handle singleton flag without requiredVersion in Module Federation
upgrade watchpack for context time info bugfix

Performance

improve RegExp in error message formating for non-quadratic performance

Developer Experience

automatically insert brackets when output.globalObject contains a non-trival expression
show error when using script type external with invalid syntax
expose types for Resolver, StatsOptions and ResolvePluginInstance

Preparations for the future

hashDigestLength will default to 16 in webpack 6 (experiments.futureDefaults)
","Features
static evaluation understands undefined now
reduce container entry code by a few chars
use template literals when available and they make sense
Bugfixes
handle singleton flag without requiredVersion in Module Federation
upgrade watchpack for context time info bugfix
Performance
improve RegExp in error message formating for non-quadratic performance
Developer Experience
automatically insert brackets when output.globalObject contains a non-trival expression
show error when using script type external with invalid syntax
expose types for Resolver, StatsOptions and ResolvePluginInstance
Preparations for the future
hashDigestLength will default to 16 in webpack 6 (experiments.futureDefaults)"
33,"Bugfixes

fix tagged template literal evaluation
fix ModuleFederation with ESM
fix outputModule with intial splitChunks

Performance

upgrade watchpack for faster watcher updating
track file and directory timestamps separately in watchpack and webpack

Developer Experience

show origin of singleton shared module in mismatch warning
","Bugfixes
fix tagged template literal evaluation
fix ModuleFederation with ESM
fix outputModule with intial splitChunks
Performance
upgrade watchpack for faster watcher updating
track file and directory timestamps separately in watchpack and webpack
Developer Experience
show origin of singleton shared module in mismatch warning"
34,"Performance

allow to use pre-compiled schema when Infinity is used in configuration
allow to use pre-compiled schema for configuration arrays
","Performance
allow to use pre-compiled schema when Infinity is used in configuration
allow to use pre-compiled schema for configuration arrays"
35,"Bugfixes

avoid double initial compilation due to invalid dependencies with managedPaths
","Bugfixes
avoid double initial compilation due to invalid dependencies with managedPaths"
36,"Bugfixes

fix regexp in managedPaths to exclude additional slash
make module.accept errorHandler optional in typings
correctly create an async chunk when using a require(...).property in require.ensure
fix cleaning of symlinks in output.clean: true
fix change detection with unsafeCache within managedPaths (node_modules)
bump webpack-sources for Stack Overflow bugfix
","Bugfixes
fix regexp in managedPaths to exclude additional slash
make module.accept errorHandler optional in typings
correctly create an async chunk when using a require(...).property in require.ensure
fix cleaning of symlinks in output.clean: true
fix change detection with unsafeCache within managedPaths (node_modules)
bump webpack-sources for Stack Overflow bugfix"
37,"Features

add asyncChunks: boolean option to disable creation of async chunks

Bugfixes

fix ProfilingPlugin for experiments.backCompat: false

Performance

avoid running regexp twice over the file list
","Features
add asyncChunks: boolean option to disable creation of async chunks
Bugfixes
fix ProfilingPlugin for experiments.backCompat: false
Performance
avoid running regexp twice over the file list"
38,"Features

allow passing chunkLoading: false to disable on-demand loading

Bugfixes

fix import 'single-quote' in esm build dependencies
","Features
allow passing chunkLoading: false to disable on-demand loading
Bugfixes
fix import 'single-quote' in esm build dependencies"
39,"Bugfixes

fix __system_context__ injection when using the library option on entrypoint
enable exportsPresence: ""error"" by default in futureDefaults
fix bad performance for a RegExp in Stats printing (with large error messages)
fix exportPresence -> exportsPresence typo
fix a bug with module invalidation when only module id changes with experiments.cacheUnaffected
","Bugfixes
fix system_context injection when using the library option on entrypoint
enable exportsPresence: ""error"" by default in futureDefaults
fix bad performance for a RegExp in Stats printing (with large error messages)
fix exportPresence -> exportsPresence typo
fix a bug with module invalidation when only module id changes with experiments.cacheUnaffected"
40,"Bugfix

fix invalid generated code when omitting ;
","Bugfix
fix invalid generated code when omitting ;"
41,"Features

add options to configure export presence checking
parser.javascript.reexportExportsPresence: false allows to disable warnings for non-existing exports during the migration from export ... from ""..."" to export type ... from ""..."" for type reexports in TypeScript
add experiments.backCompat: false to disable some expensive deprecations for better performance

Bugfixes

use ['catch'] instead of .catch for better ES3 support
fix removed parentheses when using new (require(""..."")).Something()
fix { require } object literals
splitChunks.chunks option is now correctly used for splitChunks.fallbackCacheGroup.maxSize too
fix schema of listen option, allow to omit port
add better support for Promises from different isolates

Developer Experience

add typings for the webpack API that is available within modules
use /// <reference types=""webpack/module"" /> to use the typings in typescript modules
or ""types"": [..., ""webpack/module""] in tsconfig
","Features
add options to configure export presence checking
parser.javascript.reexportExportsPresence: false allows to disable warnings for non-existing exports during the migration from export ... from ""..."" to export type ... from ""..."" for type reexports in TypeScript
add experiments.backCompat: false to disable some expensive deprecations for better performance
Bugfixes
use ['catch'] instead of .catch for better ES3 support
fix removed parentheses when using new (require(""..."")).Something()
fix { require } object literals
splitChunks.chunks option is now correctly used for splitChunks.fallbackCacheGroup.maxSize too
fix schema of listen option, allow to omit port
add better support for Promises from different isolates
Developer Experience
add typings for the webpack API that is available within modules
use ///  to use the typings in typescript modules
or ""types"": [..., ""webpack/module""] in tsconfig"
42,"Bugfixes

use a wasm md4 implementation for node 17 support
include the path submodules in the node.js default externals

Performance

improve string to binary conversion performance for hashing

Contribution

CI runs on node.js 17
","Bugfixes
use a wasm md4 implementation for node 17 support
include the path submodules in the node.js default externals
Performance
improve string to binary conversion performance for hashing
Contribution
CI runs on node.js 17"
43,"Features

Allow to pass more options to experiments.lazyCompilation. e. g. port, https stuff

Bugfixes

fix output.hashFunction used to persistent caching too
Initialize buildDependencies Set correctly when loaders are added in beforeLoaders hook
","Features
Allow to pass more options to experiments.lazyCompilation. e. g. port, https stuff
Bugfixes
fix output.hashFunction used to persistent caching too
Initialize buildDependencies Set correctly when loaders are added in beforeLoaders hook"
44,"Bugfixes

fix regexp in managedPaths
fix hanging when trying to write lockfile for experiments.buildHttp
","Bugfixes
fix regexp in managedPaths
fix hanging when trying to write lockfile for experiments.buildHttp"
45,"Features

add /*#__PURE__*/ for Object() in generated code
add RegExp and function support for managed/immutablePaths
add hooks for multiple phases in module build
improvements to experiments.buildHttp
allow to share cache
add allowlist
add splitChunks.minSizeReduction option

Bugfixes

fix memory caching for Data URLs
fix crash in waitFor when modules are unsafe cached
fix bug in build cycle detection
","Features
add /#PURE/ for Object() in generated code
add RegExp and function support for managed/immutablePaths
add hooks for multiple phases in module build
improvements to experiments.buildHttp
allow to share cache
add allowlist
add splitChunks.minSizeReduction option
Bugfixes
fix memory caching for Data URLs
fix crash in waitFor when modules are unsafe cached
fix bug in build cycle detection"
46,"Bugfixes

fix serialization context passed
fix a bug which caused module duplication when using persistent caching, unsafe cache and memory cache with GC
fix validation of snapshots of non-existing directories

Performance

store a hash in first bits of bigint to workaround v8 hashing: https://github.com/v8/v8/blob/b704bc0958e2e26305a68e89d215af1aee011148/src/objects/bigint.h#L192-L195
","Bugfixes
fix serialization context passed
fix a bug which caused module duplication when using persistent caching, unsafe cache and memory cache with GC
fix validation of snapshots of non-existing directories
Performance
store a hash in first bits of bigint to workaround v8 hashing: link"
47,"Bugfixes

fix .webpack[] suffix to not execute rules
revert performance optimization that has too large memory usage in large builds
","Bugfixes
fix .webpack[] suffix to not execute rules
revert performance optimization that has too large memory usage in large builds"
48,"Features

add hook for readResource
add diagnostics_channel to node builtins

Performance

improve chunk graph creation performance
add cacheUnaffected cache support
remove some caching that makes not difference
improve splitChunks performance
improve chunk conditions performance
","Features
add hook for readResource
add diagnostics_channel to node builtins
Performance
improve chunk graph creation performance
add cacheUnaffected cache support
remove some caching that makes not difference
improve splitChunks performance
improve chunk conditions performance"
49,"Bugfix

fix experiments.cacheUnaffected which broke by last release
","Bugfix
fix experiments.cacheUnaffected which broke by last release"
50,"Performance

reduce number of hash.update calls
allow ExternalModules to be unsafe cached
improve hashing performance of module lists (StringXor)

Bugfixes

experiments.cacheUnaffected
handle module/chunk id changes correctly
cache modules with async blocks
show errors when using incompatible options
","Performance
reduce number of hash.update calls
allow ExternalModules to be unsafe cached
improve hashing performance of module lists (StringXor)
Bugfixes
experiments.cacheUnaffected
handle module/chunk id changes correctly
cache modules with async blocks
show errors when using incompatible options"
51,"Bugfix

DefinePlugin: fix conflict with older variants of the plugin
","Bugfix
DefinePlugin: fix conflict with older variants of the plugin"
52,"Performance

make DefinePlugin rebuild check more efficient performance and memory wise
","Performance
make DefinePlugin rebuild check more efficient performance and memory wise"
53,"Bugfixes

fixes for experiments.cacheUnaffected
fix accidentically shared mem caches
avoid RuntimeSpecMap in favor of directly setting on memCache
compare references modules when restoring mem cache
","Bugfixes
fixes for experiments.cacheUnaffected
fix accidentically shared mem caches
avoid RuntimeSpecMap in favor of directly setting on memCache
compare references modules when restoring mem cache"
54,"Performance

experiments.cacheUnaffected
reduce cache memory usage
make memCache per module
cache ESM reexport computation
module.unsafeCache
make it faster by moving it to Compilation-level instead of in NormalModuleFactory
omit tracking resolve dependencies since they are not used when unsafe cache is enabled
module graph
lazy assign ModuleGraphConnections to Dependencies since that is only accessed when uncached
","Performance
experiments.cacheUnaffected
reduce cache memory usage
make memCache per module
cache ESM reexport computation
module.unsafeCache
make it faster by moving it to Compilation-level instead of in NormalModuleFactory
omit tracking resolve dependencies since they are not used when unsafe cache is enabled
module graph
lazy assign ModuleGraphConnections to Dependencies since that is only accessed when uncached"
55,"Features

improve constant folding to allow to skip more branches for && || and ??
allow all hashing using in webpack to be configured with output.hashFunction
no longer bailout completely from inner graph analysis when eval is used in a module

Bugfixes

force bump enhanced-resolve for bugfixes

Performance

reduce number of allocation when creating snapshots
add output.hashFunction: ""xxhash64"" for a super fast wasm based hash function
improve utf-8 conversion when serializing short strings
improve hashing performance for dependencies
add experiments.cacheUnaffected which caches computations for modules that are unchanged and reference only unchanged modules
","Features
improve constant folding to allow to skip more branches for && || and ??
allow all hashing using in webpack to be configured with output.hashFunction
no longer bailout completely from inner graph analysis when eval is used in a module
Bugfixes
force bump enhanced-resolve for bugfixes
Performance
reduce number of allocation when creating snapshots
add output.hashFunction: ""xxhash64"" for a super fast wasm based hash function
improve utf-8 conversion when serializing short strings
improve hashing performance for dependencies
add experiments.cacheUnaffected which caches computations for modules that are unchanged and reference only unchanged modules"
56,"Features

add node.__dirname/__filename: ""warn-mock"" which warns on usage (will be enabled in webpack 6 by default)

Bugfixes

add stream/web to Node.js externals
fix IgnorePluginSchema
fix builds with persistent caching taking 1 minute to build at least

Experiments

add experiments.futureDefaults to enable defaults for webpack 6
","Features
add node.__dirname/__filename: ""warn-mock"" which warns on usage (will be enabled in webpack 6 by default)
Bugfixes
add stream/web to Node.js externals
fix IgnorePluginSchema
fix builds with persistent caching taking 1 minute to build at least
Experiments
add experiments.futureDefaults to enable defaults for webpack 6"
57,"Performance

split fresh created persistent cache files by time to avoid creating very large files
","Performance
split fresh created persistent cache files by time to avoid creating very large files"
58,"Feature

experiments.executeModule is enabled by default and the option is removed
loaders are now free to use this.importModule

Bugfixes

fix generated __WEBPACK_EXTERNAL_MODULE_null__, which leads to merged externals
.webpack[...] extension is not part of matching and module name
","Feature
experiments.executeModule is enabled by default and the option is removed
loaders are now free to use this.importModule
Bugfixes
fix generated WEBPACK_EXTERNAL_MODULE_null, which leads to merged externals
.webpack[...] extension is not part of matching and module name"
59,"Bugfixes

fix crash in FileSystemInfo when errors occur
avoid property access of reserved properties
fix reexports from async modules
automatically close an active watching when closing the compiler
when filenames of other runtimes are referenced that need a full hash, upgrade referencing runtime moduel to full hash mode too
fixes a bug where [contenthash] is undefined when using new Worker
","Bugfixes
fix crash in FileSystemInfo when errors occur
avoid property access of reserved properties
fix reexports from async modules
automatically close an active watching when closing the compiler
when filenames of other runtimes are referenced that need a full hash, upgrade referencing runtime moduel to full hash mode too
fixes a bug where [contenthash] is undefined when using new Worker"
60,"Bugfixes

library: ""module"" propages top-level-await correctly
fix crash in filesystem snapshotting when trying to snapshot a non-existing directory
fix some context-dependent logic in concatenated modules and source url handling
","Bugfixes
library: ""module"" propages top-level-await correctly
fix crash in filesystem snapshotting when trying to snapshot a non-existing directory
fix some context-dependent logic in concatenated modules and source url handling"
61,"Bugfixes

correctly keep chunk loading state when the chunk loading logic is HMR updated
This fixes some edge cases that e. g. occur when using lazy compilation for entrypoints. It is now able to HMR update that instead of needing a manual reload. Also see fixes in webpack-dev-server@4.
track and resolve symlinks for filesystem snapshotting
This fixes some cases of circular yarn linking of dependencies.
It also fixes some problems when using package managers that use symlinks to deduplicate (e. g. cnpm or pnpm)
pass the resulting module in the callbacks of Compilation.addModuleChain and Compilation.addModuleTree
","Bugfixes
correctly keep chunk loading state when the chunk loading logic is HMR updated
This fixes some edge cases that e. g. occur when using lazy compilation for entrypoints. It is now able to HMR update that instead of needing a manual reload. Also see fixes in webpack-dev-server@4.
track and resolve symlinks for filesystem snapshotting
This fixes some cases of circular yarn linking of dependencies.
It also fixes some problems when using package managers that use symlinks to deduplicate (e. g. cnpm or pnpm)
pass the resulting module in the callbacks of Compilation.addModuleChain and Compilation.addModuleTree"
62,"Features

hashbangs (#! ...) are now handled by webpack
https://github.com/tc39/proposal-hashbang

Performance

disable cache compression by default as it tend to make performance worse
I could still be enabled again for specific scenarios
reduce the number of allocations during cache serialization
This improves performance and memory usage
","Features
hashbangs (#! ...) are now handled by webpack
link
Performance
disable cache compression by default as it tend to make performance worse
I could still be enabled again for specific scenarios
reduce the number of allocations during cache serialization
This improves performance and memory usage"
63,"Features

add experiments.buildHttp to build http(s):// imports instead of keeping them external
keeps a webpack.lock file with integrity and webpack.lock.data with cached content that should be committed
Automatically upgrades lockfile during development when remote resources change
    (might be disabled with experiments.buildHttp.upgrade: false)
Lockfile is frozen during production builds and usually no network requests are made
    (exception: Cache-Control: no-cache).
The webpack.lock.data persisting can be disabled with experiments.buildHttp.cacheLocation: false.
    That will will introduce a availability risk.
    (webpack cache will be used to cache network responses)

Bugfixes

fix HMR infinite loop (again)
fix rare non-determinism with splitChunks.maxSize introduces in the last release
optional modules no longer cause the module to fail when bail is set
fix typo in records format: chunkHashs -> chunkHashes

Performance

limit the number of parallel generated chunks for memory reasons
","Features
add experiments.buildHttp to build http(s):// imports instead of keeping them external
keeps a webpack.lock file with integrity and webpack.lock.data with cached content that should be committed
Automatically upgrades lockfile during development when remote resources change
    (might be disabled with experiments.buildHttp.upgrade: false)
Lockfile is frozen during production builds and usually no network requests are made
    (exception: Cache-Control: no-cache).
The webpack.lock.data persisting can be disabled with experiments.buildHttp.cacheLocation: false.
    That will will introduce a availability risk.
    (webpack cache will be used to cache network responses)
Bugfixes
fix HMR infinite loop (again)
fix rare non-determinism with splitChunks.maxSize introduces in the last release
optional modules no longer cause the module to fail when bail is set
fix typo in records format: chunkHashs -> chunkHashes
Performance
limit the number of parallel generated chunks for memory reasons"
64,"Features

enable import assertions again

Bugfixes

upgrade webpack-sources for fixes regarding source maps
fix infinite loop in HMR runtime code
","Features
enable import assertions again
Bugfixes
upgrade webpack-sources for fixes regarding source maps
fix infinite loop in HMR runtime code"
65,"Bugfixes

upgrade webpack-sources for a bunch of bugfixes regarding source maps and missing chars in output
","Bugfixes
upgrade webpack-sources for a bunch of bugfixes regarding source maps and missing chars in output"
66,"Performance

improve source-map performance

Bugfixes

avoid unnecessary ""use strict""s in module mode
","Performance
improve source-map performance
Bugfixes
avoid unnecessary ""use strict""s in module mode"
67,"Features

status handlers in HMR api can now return Promises to delay the HMR process
reasons in stats can now be grouped and collapsed
add stats.reasonsSpace and stats.groupReasonsByOrigin

Bugfixes

fix a crash in asset modules when updating persistent cached modules from unsafe cached modules

Performance

detailed preset limits all spaces to 1000 by default
upgrade webpack-sources for a performance bugfix
","Features
status handlers in HMR api can now return Promises to delay the HMR process
reasons in stats can now be grouped and collapsed
add stats.reasonsSpace and stats.groupReasonsByOrigin
Bugfixes
fix a crash in asset modules when updating persistent cached modules from unsafe cached modules
Performance
detailed preset limits all spaces to 1000 by default
upgrade webpack-sources for a performance bugfix"
68,"Bugfixes

temporary revert import assertions because parser changes break the word assert in other places
import(/* webpackPrefetch: true */ ...) no longer breaks library output
DataURL tries to avoid re-encoding
fix problems with DataURL encoding in some cases
","Bugfixes
temporary revert import assertions because parser changes break the word assert in other places
import(/ webpackPrefetch: true / ...) no longer breaks library output
DataURL tries to avoid re-encoding
fix problems with DataURL encoding in some cases"
69,"Features

add support to import assertions

Bugfixes

SourceMaps will now also be added to .cjs output files
fix non-system externals in a system library

Performance

avoid copying timestamps from the watcher to the compiler

Contributing

update to jest 27
","Features
add support to import assertions
Bugfixes
SourceMaps will now also be added to .cjs output files
fix non-system externals in a system library
Performance
avoid copying timestamps from the watcher to the compiler
Contributing
update to jest 27"
70,"Features

add support for output.module + optimization.runtimeChunk

Bugfixes

fix inline externals with dash in type
","Features
add support for output.module + optimization.runtimeChunk
Bugfixes
fix inline externals with dash in type"
71,"Features

support runtime: false in entry description to disable runtime chunk
support runtime option in ModuleFederationPlugin and ContainerPlugin

Bugfixes

fix ""module"" externals when concatenated

Performance

serialize JSON data as buffer and parse on demand for performance and to avoid performance warning
","Features
support runtime: false in entry description to disable runtime chunk
support runtime option in ModuleFederationPlugin and ContainerPlugin
Bugfixes
fix ""module"" externals when concatenated
Performance
serialize JSON data as buffer and parse on demand for performance and to avoid performance warning"
72,"Bugfixes

fix crashes when rebuilding with jsonData or dataUrl of undefined
","Bugfixes
fix crashes when rebuilding with jsonData or dataUrl of undefined"
73,"Features

add cache compression via cache.compression
enable cache compression by default for non-development modes

Bugfixes

add node-commonjs to schema for externalsType
update acorn to fix problems with top level await
fix regression for system externals

Performance

fix a memory leak in the unsafe cache
","Features
add cache compression via cache.compression
enable cache compression by default for non-development modes
Bugfixes
add node-commonjs to schema for externalsType
update acorn to fix problems with top level await
fix regression for system externals
Performance
fix a memory leak in the unsafe cache"
74,"Bugfixes

add missing types about experimental esm support to schema
avoid slicing large Buffers as that doesn't always work for unknown reasons

Performance

avoid slicing Buffers unnecessarily
","Bugfixes
add missing types about experimental esm support to schema
avoid slicing large Buffers as that doesn't always work for unknown reasons
Performance
avoid slicing Buffers unnecessarily"
75,"Features

Persist cache faster when large changes are detected
new option cache.idleTimeoutAfterLargeChanges to control that

Bugfixes

shutdown lazy compilation server correctly

Experiments

EcmaScript modules support (experiments.outputModule: true)
output.library.type: ""module"": very basic support, no live bindings, unnecessary runtime code
output.chunkLoading: ""import""
output.chunkFormat: ""module""
externalsType: ""module"" generates now import * as X from ""..."" (in a module) or import(""..."") (in a script)
Node.js commonjs externals use import { createRequire } from ""module"" in a module
new Worker etc. sets `type: ""module""
","Features
Persist cache faster when large changes are detected
new option cache.idleTimeoutAfterLargeChanges to control that
Bugfixes
shutdown lazy compilation server correctly
Experiments
EcmaScript modules support (experiments.outputModule: true)
output.library.type: ""module"": very basic support, no live bindings, unnecessary runtime code
output.chunkLoading: ""import""
output.chunkFormat: ""module""
externalsType: ""module"" generates now import * as X from ""..."" (in a module) or import(""..."") (in a script)
Node.js commonjs externals use import { createRequire } from ""module"" in a module
new Worker etc. sets `type: ""module"""
76,"Features

accept node: prefixed requests as node.js externals
avoid instanceof Promise in favor of p && typeof p.then === ""function"" to allow mixing different Promise implementions

Bugfixes

fix usage analysis of class properties

Performance

improve LazySet memory usage by shortcircuiting empty sets
reduce algorithmic complexity of the structure analysis for plain objects serialization

Developer Experience

allow Buffer in this.emitFile typings (loader context)
improve reset cli argument description
","Features
accept node: prefixed requests as node.js externals
avoid instanceof Promise in favor of p && typeof p.then === ""function"" to allow mixing different Promise implementions
Bugfixes
fix usage analysis of class properties
Performance
improve LazySet memory usage by shortcircuiting empty sets
reduce algorithmic complexity of the structure analysis for plain objects serialization
Developer Experience
allow Buffer in this.emitFile typings (loader context)
improve reset cli argument description"
77,"Bugfixes

reduce memory usage and fix memory leaks
","Bugfixes
reduce memory usage and fix memory leaks"
78,"Features

allow lazy compilation for import() context (import with expression)

Bugfixes

fix respecting cache.allowCollectingMemory
fix cli loading after installing it
fix initial list of non-js chunks that are flagged as already loaded

Performance

remove unnecessary Error.captureStackTrace from webpack errors
","Features
allow lazy compilation for import() context (import with expression)
Bugfixes
fix respecting cache.allowCollectingMemory
fix cli loading after installing it
fix initial list of non-js chunks that are flagged as already loaded
Performance
remove unnecessary Error.captureStackTrace from webpack errors"
79,"Performance

fix missing increment in sorting optimization from last release
","Performance
fix missing increment in sorting optimization from last release"
80,"Features

new URL(""data:..."", import.meta.url) is now supported
add module.rules[].scheme as condition to match the request scheme (like data, http, etc.)

Bugfixes

fix tracking of changes and removals during watching in some edge cases
fix incorrect renaming of class fields in concatenatenated modules
fix crash in HMR when removing runtimes from the compilation

Performance

lazy import some internal modules only when used
allow unsafe caching of the entrypoint
improve performance of sorting exports info map
update to latest webpack-sources for improved source map performance
","Features
new URL(""data:..."", import.meta.url) is now supported
add module.rules[].scheme as condition to match the request scheme (like data, http, etc.)
Bugfixes
fix tracking of changes and removals during watching in some edge cases
fix incorrect renaming of class fields in concatenatenated modules
fix crash in HMR when removing runtimes from the compilation
Performance
lazy import some internal modules only when used
allow unsafe caching of the entrypoint
improve performance of sorting exports info map
update to latest webpack-sources for improved source map performance"
81,"Bugfixes

When using multiple configurations in watch mode and calling Watching.invalidate, dependencies and parallelism of the config array is now respected correctly
Fix a crash when accessing the stats after the next compilation has started
fix collecting changes when using Watching.suspend
fix schema of RuleCondition.not and allow passing a condition directly instead of only an array

Developer Experience

typings accept a ReadonlyArray of configurations now

Contributing

fix coverage reporting for child processes
remove outdated loader from readme
","Bugfixes
When using multiple configurations in watch mode and calling Watching.invalidate, dependencies and parallelism of the config array is now respected correctly
Fix a crash when accessing the stats after the next compilation has started
fix collecting changes when using Watching.suspend
fix schema of RuleCondition.not and allow passing a condition directly instead of only an array
Developer Experience
typings accept a ReadonlyArray of configurations now
Contributing
fix coverage reporting for child processes
remove outdated loader from readme"
82,"Features

add output.trustedTypes

Bugfixes

fix inclusion of too many chunk in the filename function when using dependOn
allow errors to be null in fs callbacks

Developer Experiences

make ESM tracking info message less verbose
add typings for loaders
","Features
add output.trustedTypes
Bugfixes
fix inclusion of too many chunk in the filename function when using dependOn
allow errors to be null in fs callbacks
Developer Experiences
make ESM tracking info message less verbose
add typings for loaders"
83,"Bugfixes

correctly handle errors thrown during parser/generator creation
e. g. validation errors for asset module options
use a better automatic runtime name for workers
not too long to cause filename problems
no longer assume assets do not get removed when the compiler is running
Using output.clean is against this assumption
It fixes a bug where assets are missing, when removed and readded to the compilation
fix a problem when chained dependOn, which causes too many modules being included in entrypoints
","Bugfixes
correctly handle errors thrown during parser/generator creation
e. g. validation errors for asset module options
use a better automatic runtime name for workers
not too long to cause filename problems
no longer assume assets do not get removed when the compiler is running
Using output.clean is against this assumption
It fixes a bug where assets are missing, when removed and readded to the compilation
fix a problem when chained dependOn, which causes too many modules being included in entrypoints"
84,"Performance

add cache.profile (type: ""filesystem"" only) flag for more info about (de)serialization timings
avoid complex ""by exports"" splitting for splitChunks in development mode
faster hashing for the common case
improve algorithmic complexity for merging InitFragments to solve performance in an edge case
","Performance
add cache.profile (type: ""filesystem"" only) flag for more info about (de)serialization timings
avoid complex ""by exports"" splitting for splitChunks in development mode
faster hashing for the common case
improve algorithmic complexity for merging InitFragments to solve performance in an edge case"
85,"Features

add support for class fields (stage 4)

Performance

improve (de)serialization performance of dependency locations
","Features
add support for class fields (stage 4)
Performance
improve (de)serialization performance of dependency locations"
86,"Bugfixes

fix an __webpack_exports__ is not defined error with some library types

performance

improve stats grouping performance
improve providedExports analysis performance
improve hashing performance
lazy merge dependencies from creating context modules
improve dependency parents access performance
","Bugfixes
fix an webpack_exports is not defined error with some library types
performance
improve stats grouping performance
improve providedExports analysis performance
improve hashing performance
lazy merge dependencies from creating context modules
improve dependency parents access performance"
87,"Bugfixes

fix handling of build dependencies with # in path

Performance

improve memory usage when using the filesystem cache


When reading a file into a Buffer and picking smaller slices of the Buffer
the small slices still keep a reference to the large original Buffer.
The leads to increased memory usage. A fix would be to clone the slice into
a smaller Buffer when wasting too much memory, but this has a performance cost.
There is now a new option cache.allowCollectingMemory which controls that.
For one-off builds you probably want allowCollectingMemory: false and
for watch builds you probably want allowCollectingMemory: true.
It defaults to false in production mode and true in development mode.
","Bugfixes
fix handling of build dependencies with # in path
Performance
improve memory usage when using the filesystem cache
When reading a file into a Buffer and picking smaller slices of the Buffer
the small slices still keep a reference to the large original Buffer.
The leads to increased memory usage. A fix would be to clone the slice into
a smaller Buffer when wasting too much memory, but this has a performance cost.
There is now a new option cache.allowCollectingMemory which controls that.
For one-off builds you probably want allowCollectingMemory: false and
for watch builds you probably want allowCollectingMemory: true.
It defaults to false in production mode and true in development mode."
88,"Features

add support for empty string in resolve.extensions and handle them in this order
add pnpapi as builtin external when using target: ""node""

Bugfixes

fix a bug where chunks filenames where not included in runtime when using splitChunks and runtimeChunk with target: ""node""
fix deprecation message from LimitChunkCountPlugin

Performance

precompile schemas into functions to avoid schema compilation overhead
fix performance regression when storing the cache
performance improvement for snapshot file iterators

Developer Experience

remove removed store: 'idle' from schema description
","Features
add support for empty string in resolve.extensions and handle them in this order
add pnpapi as builtin external when using target: ""node""
Bugfixes
fix a bug where chunks filenames where not included in runtime when using splitChunks and runtimeChunk with target: ""node""
fix deprecation message from LimitChunkCountPlugin
Performance
precompile schemas into functions to avoid schema compilation overhead
fix performance regression when storing the cache
performance improvement for snapshot file iterators
Developer Experience
remove removed store: 'idle' from schema description"
89,"Bugfix

handle falsy entry options correctly
","Bugfix
handle falsy entry options correctly"
90,"Bugfix

fix passing publicPath to this.importModule
","Bugfix
fix passing publicPath to this.importModule"
91,"Features

adds support for specifying a publicPath per entrypoint
add entry.xxx.publicPath option

Bugfix

disable injection of chunk loading logic for executeModule

Performance

performance improvements for export * and reexports
","Features
adds support for specifying a publicPath per entrypoint
add entry.xxx.publicPath option
Bugfix
disable injection of chunk loading logic for executeModule
Performance
performance improvements for export * and reexports"
92,"Features

add support for a pseudo extensions .webpack[type] (e. g. .webpack[javascript/auto]) to specify the default module type when no other module type is specified
to be used with !=! inline syntax

Bugfixes

fixes incorrect cache invalidation when new properties are added to the DefinePlugin

Experiments

add experiments.executeModule to allow build-time execution of modules of the module graph
add this.importModule(request, options, [callback]): Promise to the loader context
add compilation.executeModule(request, options, callback) for plugins
","Features
add support for a pseudo extensions .webpack[type] (e. g. .webpack[javascript/auto]) to specify the default module type when no other module type is specified
to be used with !=! inline syntax
Bugfixes
fixes incorrect cache invalidation when new properties are added to the DefinePlugin
Experiments
add experiments.executeModule to allow build-time execution of modules of the module graph
add this.importModule(request, options, [callback]): Promise to the loader context
add compilation.executeModule(request, options, callback) for plugins"
93,"Bugfixes

revert disposing of CodeGenerationResults since some plugins rely on the fact that they are still accessible after the compilation
","Bugfixes
revert disposing of CodeGenerationResults since some plugins rely on the fact that they are still accessible after the compilation"
94,"Bugfixes

invalid hooks is no longer called twice for a compiler in a MultiCompiler

Memory

eliminated some memory leaks
dispose code generation results after sealing the compilation

Performance

improve performance of cache serialization by reducing number of write syscalls
","Bugfixes
invalid hooks is no longer called twice for a compiler in a MultiCompiler
Memory
eliminated some memory leaks
dispose code generation results after sealing the compilation
Performance
improve performance of cache serialization by reducing number of write syscalls"
95,"Features

add a few more options for infrastructure logging:
infrastructureLogging.colors: Enables/Disables colorful output.
infrastructureLogging.appendOnly: Only appends lines to the output. Avoids updating existing output e. g. for status messages.
infrastructureLogging.stream: Stream used for logging output. Defaults to process.stderr.
infrastructureLogging.console: Custom console used for logging.
When stream is an TTY colors is enabled and appendOnly is disabled. Otherwise it's flipped.

Bugfixes

Persistent Caching
fix caching crash when using fsevents in build dependencies
improve resolving of build dependencies when exports field is used
make problems during resolving build dependencies warnings instead of debug messages
prioritize static reexport over runtime reexport for target determination
This helps in optimization by no longer opting out of optimization when some other exports any dynamic (from commonjs or empty/type-only modules)
fix bug with subtraction of runtimes
This fixes a problem with concatenated modules in builds with multiple runtimes and force-merged shared chunks
ensure that entrypoints are always re-executed when HMR-updated
This fixes no longer updating pages when the entrypoint crashed
","Features
add a few more options for infrastructure logging:
infrastructureLogging.colors: Enables/Disables colorful output.
infrastructureLogging.appendOnly: Only appends lines to the output. Avoids updating existing output e. g. for status messages.
infrastructureLogging.stream: Stream used for logging output. Defaults to process.stderr.
infrastructureLogging.console: Custom console used for logging.
When stream is an TTY colors is enabled and appendOnly is disabled. Otherwise it's flipped.
Bugfixes
Persistent Caching
fix caching crash when using fsevents in build dependencies
improve resolving of build dependencies when exports field is used
make problems during resolving build dependencies warnings instead of debug messages
prioritize static reexport over runtime reexport for target determination
This helps in optimization by no longer opting out of optimization when some other exports any dynamic (from commonjs or empty/type-only modules)
fix bug with subtraction of runtimes
This fixes a problem with concatenated modules in builds with multiple runtimes and force-merged shared chunks
ensure that entrypoints are always re-executed when HMR-updated
This fixes no longer updating pages when the entrypoint crashed"
96,"Features

add GC to memory cache
opt-in via cache.maxGenerations when cache.type: ""memory""
default for cache.type: ""filesystem"" and mode: ""development""
configure via cache.maxMemoryGenerations when cache.type: ""filesystem""
Generations = Rebuilds
add GC for untouched filesystem cache files
allow to configurate GC for the filesystem cache via cache.maxAge
allow to disable memory cache when using the filesystem cache with cache.maxMemoryGenerations: 0
Caches will be cleared on Compiler close resp Cache shutdown (after persisting for the filesystem cache)

Bugfixes

add a few workarounds for v8 bug that causes memory leaks in optimized code (only partially fixes it)
after serializing filesystem no longer keeps cache items in memory, instead it will read them from disk again when accessed

GC = Garbage Collection","Features
add GC to memory cache
opt-in via cache.maxGenerations when cache.type: ""memory""
default for cache.type: ""filesystem"" and mode: ""development""
configure via cache.maxMemoryGenerations when cache.type: ""filesystem""
Generations = Rebuilds
add GC for untouched filesystem cache files
allow to configurate GC for the filesystem cache via cache.maxAge
allow to disable memory cache when using the filesystem cache with cache.maxMemoryGenerations: 0
Caches will be cleared on Compiler close resp Cache shutdown (after persisting for the filesystem cache)
Bugfixes
add a few workarounds for v8 bug that causes memory leaks in optimized code (only partially fixes it)
after serializing filesystem no longer keeps cache items in memory, instead it will read them from disk again when accessed
GC = Garbage Collection"
97,"Bugfixes

fix some edge cases for splitChunks.maxSize which cause too large chunks to be created
add stats.groupModulesByType to the schema

Developer Experience

add resolving trace for error during resolving build dependencies
expose Stats-related types
exports AsyncDependenciesBlock and Module/Const/NullDependency on the API
","Bugfixes
fix some edge cases for splitChunks.maxSize which cause too large chunks to be created
add stats.groupModulesByType to the schema
Developer Experience
add resolving trace for error during resolving build dependencies
expose Stats-related types
exports AsyncDependenciesBlock and Module/Const/NullDependency on the API"
98,"Features

add module.generator.asset.publicPath to configure a different publicPath for assets

Bugfixes

fixes a watch mode caching problem which was introduced in 5.26.0 when using the unsafe cache

Performance

improve serialization performance
","Features
add module.generator.asset.publicPath to configure a different publicPath for assets
Bugfixes
fixes a watch mode caching problem which was introduced in 5.26.0 when using the unsafe cache
Performance
improve serialization performance"
99,"Bugfixes

fix error reporting when errors happen in beforeLoaders hook
avoid crash when experiments.lazyCompilation is used (regression)
fix lazy compilation opt-out when HMR accept/decline is used on an import()
fix new URL(new URL generated by worker handing
","Bugfixes
fix error reporting when errors happen in beforeLoaders hook
avoid crash when experiments.lazyCompilation is used (regression)
fix lazy compilation opt-out when HMR accept/decline is used on an import()
fix new URL(new URL generated by worker handing"
100,"Bugfix

allow invalidation after first watch run in MultiCompilers
","Bugfix
allow invalidation after first watch run in MultiCompilers"
101,"Features

add utils: { contextify(context, absolutePath), absolutify(context, request) } to loader context

Bugfixes

fix caching bug when split chunks of an entrypoint change and modules of the entrypoint stay equal
fix imports field handling
fix incorrect id assignment of record ids plugin
this causes ids changing unnecessary during watch mode
fix library exports when using onChunks in entry
This prevented using libraries with web target when using splitChunks for the initial chunks
","Features
add utils: { contextify(context, absolutePath), absolutify(context, request) } to loader context
Bugfixes
fix caching bug when split chunks of an entrypoint change and modules of the entrypoint stay equal
fix imports field handling
fix incorrect id assignment of record ids plugin
this causes ids changing unnecessary during watch mode
fix library exports when using onChunks in entry
This prevented using libraries with web target when using splitChunks for the initial chunks"
102,"Bugfix

fix race condition in MultiCompiler queueing
","Bugfix
fix race condition in MultiCompiler queueing"
103,"Bugfixes

fix problem with new line after comment
fix assign libraries with runtime chunk
","Bugfixes
fix problem with new line after comment
fix assign libraries with runtime chunk"
104,"Bugfixes

avoid using strict mode runtime for assign libraries to allow assigning not existing variables
avoid collision with Set.addAll polyfill
allow filenames starting with ../ when generation the undo path for non-web targets
","Bugfixes
avoid using strict mode runtime for assign libraries to allow assigning not existing variables
avoid collision with Set.addAll polyfill
allow filenames starting with ../ when generation the undo path for non-web targets"
105,"Features

handle cache version automatically for DefinePlugin
Values no longer need to be defined as build dependencies
add more options for DefinePlugin.runtimeValue (file/context/missing/buildDependencies, version)

Bugfixes

fix a memory leak which happens in watch mode with caching when modules are removed from the compilation
fix usage of some arrow functions when es5 target is selected
chunk loading in workers now uses publicPath instead of relative paths
fixes a problem when worker file is in a child directory
","Features
handle cache version automatically for DefinePlugin
Values no longer need to be defined as build dependencies
add more options for DefinePlugin.runtimeValue (file/context/missing/buildDependencies, version)
Bugfixes
fix a memory leak which happens in watch mode with caching when modules are removed from the compilation
fix usage of some arrow functions when es5 target is selected
chunk loading in workers now uses publicPath instead of relative paths
fixes a problem when worker file is in a child directory"
106,"Bugfixes

fix startup logic when non-js chunks are in the entrypoint
remove type: ""module"" for Workers when generating classic scripts
","Bugfixes
fix startup logic when non-js chunks are in the entrypoint
remove type: ""module"" for Workers when generating classic scripts"
107,"Features

Refactor the startup logic to improve library support
add __webpack_runtime_id__ to access the current runtime id
improve error handling for HMR
add second argument to self accept error handler to pass new module and module id
add error handler argument to dependency accept, passing error and module ids
add output.strictModuleErrorHandling to opt into stricter evaluation error handling semantics according to ESM spec
used by default when HMR is enabled
when ignoring a module used by new URL() this will result in an url to a empty file (""data:,"")
add module.generator.asset.emit option to disable creating assets from asset modules (e. g. for SSR)

Bugfixes

fix problem when library options apply to a non-runtime chunk
fix crash in splitChunks.maxSize where negative indicies are accessed
fix sub-optimal splitting of splitChunks.maxSize in some cases when multiple size types are involved
fix a memory leak in AssetGenerator
fix usage of runtime globals in SharedPlugin to support HMR updates

Deprecations

deprecate output.strictModuleExceptionHandling (this is the CommonJS way of handling errors, and the name is weird)
","Features
Refactor the startup logic to improve library support
add webpack_runtime_id to access the current runtime id
improve error handling for HMR
add second argument to self accept error handler to pass new module and module id
add error handler argument to dependency accept, passing error and module ids
add output.strictModuleErrorHandling to opt into stricter evaluation error handling semantics according to ESM spec
used by default when HMR is enabled
when ignoring a module used by new URL() this will result in an url to a empty file (""data:,"")
add module.generator.asset.emit option to disable creating assets from asset modules (e. g. for SSR)
Bugfixes
fix problem when library options apply to a non-runtime chunk
fix crash in splitChunks.maxSize where negative indicies are accessed
fix sub-optimal splitting of splitChunks.maxSize in some cases when multiple size types are involved
fix a memory leak in AssetGenerator
fix usage of runtime globals in SharedPlugin to support HMR updates
Deprecations
deprecate output.strictModuleExceptionHandling (this is the CommonJS way of handling errors, and the name is weird)"
108,"Bugfixes

fix overridding built-in externals via externals
fix handling UNC paths as windows paths
Improve error when passing an empty array as library name
avoid adding the package.json from compilation context as build dependency
fix expansion of ""..."" in array configuration options when it's not at the start
","Bugfixes
fix overridding built-in externals via externals
fix handling UNC paths as windows paths
Improve error when passing an empty array as library name
avoid adding the package.json from compilation context as build dependency
fix expansion of ""..."" in array configuration options when it's not at the start"
109,"Bugfixes

fix contenthash when a file is emitted twice with different filenames but that same contenthash
","Bugfixes
fix contenthash when a file is emitted twice with different filenames but that same contenthash"
110,"Bugfixes

fix invalid syntax generated for destructuring with default values
fix some incorrect properties accesses in watch
modifiedFiles and removedFiles were undefined
fix some edge cases with MultiCompiler
","Bugfixes
fix invalid syntax generated for destructuring with default values
fix some incorrect properties accesses in watch
modifiedFiles and removedFiles were undefined
fix some edge cases with MultiCompiler"
111,"Performance

improve performance of finding modules to concatenate
improve performance of getting incoming modules from connections
make sure that all serialized modules restore correctly
avoid storing ConcatenatedModule, since that's not needed

Developer Experience

fix typo in deprecation message
","Performance
improve performance of finding modules to concatenate
improve performance of getting incoming modules from connections
make sure that all serialized modules restore correctly
avoid storing ConcatenatedModule, since that's not needed
Developer Experience
fix typo in deprecation message"
112,"Bugfixes

fix name conflict when using destructing with default arguments in concatenated modules
fix tracking of reexports in concatenated modules when using multiple export * that point to the same export
debug logging is now included even if logging is not
fix name of ModuleConcatenationPlugin logger
fix experiments.lazyCompilation: true. It now has an effect.

Developer Experience

expose Watching type

Contribution

fix husky setup

Performance

improve performance of module concatenation
","Bugfixes
fix name conflict when using destructing with default arguments in concatenated modules
fix tracking of reexports in concatenated modules when using multiple export * that point to the same export
debug logging is now included even if logging is not
fix name of ModuleConcatenationPlugin logger
fix experiments.lazyCompilation: true. It now has an effect.
Developer Experience
expose Watching type
Contribution
fix husky setup
Performance
improve performance of module concatenation"
113,"Features

add parserOptions.url: ""relative"" option
Allows to generate relative URLs from new URL (e. g. for SSG/SSR)

Bugfixes

fixes for electron target
electron has importScripts in worker
only choose a chunkLoading which fits to the chunkFormat
prefer fetch wasm loading over node wasm loading
fix regression when combining library + runtimeChunk + node target

Developer Experience

export MultiStats type
","Features
add parserOptions.url: ""relative"" option
Allows to generate relative URLs from new URL (e. g. for SSG/SSR)
Bugfixes
fixes for electron target
electron has importScripts in worker
only choose a chunkLoading which fits to the chunkFormat
prefer fetch wasm loading over node wasm loading
fix regression when combining library + runtimeChunk + node target
Developer Experience
export MultiStats type"
114,"Features

generate shorter output code for JSON data by using a '...' string instead of ""..."" (only affects output side when not minimized)
the dependencies configuration option now works for watch builds too
It will build compilation when any of dependencies has changed
It will wait for compiling until all of dependencies have finished
add parallelism config option on the array of configurations to limit the compilers that are running in parallel

Developer Experience

add hints (Did you mean ...) to resolve errors when
resolving fails due to enforceExtension
relative request is missing leading ./
when all modules of an entrypoint fail resolving and another entrypoints depend(s)On it, webpack no longer crashes with a weird error
add hint to stats how to get details about errors/warnings in child compilations
improve error message for lazyCompilation when using IE11

Bugfixes

async entries e.g. for Workers are now implicitly flagged as ""having side effects"" even if they are affects by ""sideEffects"": false
in future we might add a warning for this
avoid crash when using this.loadModule (loader) and the loaded module has errors
refactor libraries to inline exporting code into runtime to allow using with output.iife: false
fix invalid code when using define for local modules and arrow functions are supported
fix missing runtime requirement for system.js context
fix parsing of define function, which missed declarations before
avoid unnecessary calls to loaders when serializer are already registered
fix inner graph analysis for exports when export { x } is before pure declaration const x = /*#__PURE__*/ f()
fix hashing order of runtime chunks when there are async entries involved

Contribution

CI run tests on node.js 15 too
CI run tests on github actions too

Experiments

improvements on experimental output.library: { type: ""module"" } (experiments.outputModule: true)
it can generate export { ... } now, but that can't handle live-bindings yet
","Features
generate shorter output code for JSON data by using a '...' string instead of ""..."" (only affects output side when not minimized)
the dependencies configuration option now works for watch builds too
It will build compilation when any of dependencies has changed
It will wait for compiling until all of dependencies have finished
add parallelism config option on the array of configurations to limit the compilers that are running in parallel
Developer Experience
add hints (Did you mean ...) to resolve errors when
resolving fails due to enforceExtension
relative request is missing leading ./
when all modules of an entrypoint fail resolving and another entrypoints depend(s)On it, webpack no longer crashes with a weird error
add hint to stats how to get details about errors/warnings in child compilations
improve error message for lazyCompilation when using IE11
Bugfixes
async entries e.g. for Workers are now implicitly flagged as ""having side effects"" even if they are affects by ""sideEffects"": false
in future we might add a warning for this
avoid crash when using this.loadModule (loader) and the loaded module has errors
refactor libraries to inline exporting code into runtime to allow using with output.iife: false
fix invalid code when using define for local modules and arrow functions are supported
fix missing runtime requirement for system.js context
fix parsing of define function, which missed declarations before
avoid unnecessary calls to loaders when serializer are already registered
fix inner graph analysis for exports when export { x } is before pure declaration const x = /#PURE/ f()
fix hashing order of runtime chunks when there are async entries involved
Contribution
CI run tests on node.js 15 too
CI run tests on github actions too
Experiments
improvements on experimental output.library: { type: ""module"" } (experiments.outputModule: true)
it can generate export { ... } now, but that can't handle live-bindings yet"
115,"Bugfixes

json with constructor property now caches correctly
json generation with object prototype property now works correctly
tree shaking json array when accessing length property now works correctly
fix incorrect call context when calling properties on imports from CommonJS modules
","Bugfixes
json with constructor property now caches correctly
json generation with object prototype property now works correctly
tree shaking json array when accessing length property now works correctly
fix incorrect call context when calling properties on imports from CommonJS modules"
116,"Bugfixes

fix a crash when using colors in stats
","Bugfixes
fix a crash when using colors in stats"
117,"Features

add __webpack_base_uri__ to change base URI at runtime
add stats.errorDetails: ""auto"" to show error details automatically when there are only 1 or 2 errors

Bugfixes

fix a hanging build when using the persistent cache without a package.json in cwd

Developer Experience

add typings for the stats JSON
change default for stats.errorDetails to ""auto"" when using toString
Highlight important text in error message with colors
e. g. Did you mean ...? and similar hints are shown in green
","Features
add webpack_base_uri to change base URI at runtime
add stats.errorDetails: ""auto"" to show error details automatically when there are only 1 or 2 errors
Bugfixes
fix a hanging build when using the persistent cache without a package.json in cwd
Developer Experience
add typings for the stats JSON
change default for stats.errorDetails to ""auto"" when using toString
Highlight important text in error message with colors
e. g. Did you mean ...? and similar hints are shown in green"
118,"Bugfixes

fix caching issue with asset modules causing undefined files
fix problem that rebuildModule doesn't follow dependencies
","Bugfixes
fix caching issue with asset modules causing undefined files
fix problem that rebuildModule doesn't follow dependencies"
119,"Bugfix

fix Caching failed for pack: RangeError [ERR_OUT_OF_RANGE] warning when serializing the cache
","Bugfix
fix Caching failed for pack: RangeError [ERR_OUT_OF_RANGE] warning when serializing the cache"
120,"Features

add experiments.lazyCompilation.imports to disable lazy compilation of import()s
add experiments.lazyCompilation.test to allow custom selection of modules that should be lazy compiled
When using profile: true resp. --profile webpack will now print a summary of expensive modules or loaders

Bugfixes

fix that experiments.lazyCompilation.client now works as intended
fix a bug which causes runtime requirements to be missing e. g. __webpack_require__ is not defined

Developer Experience

expose EntryObject type in typings
remove pkg-dir dependency
","Features
add experiments.lazyCompilation.imports to disable lazy compilation of import()s
add experiments.lazyCompilation.test to allow custom selection of modules that should be lazy compiled
When using profile: true resp. --profile webpack will now print a summary of expensive modules or loaders
Bugfixes
fix that experiments.lazyCompilation.client now works as intended
fix a bug which causes runtime requirements to be missing e. g. webpack_require is not defined
Developer Experience
expose EntryObject type in typings
remove pkg-dir dependency"
121,"Features

allow to set chunk name for exposes for ModuleFederationPlugin

Bugfixes

add a missing simicolon in runtime code
improve consistency of top level await with other implementations and the spec
make options for ProgressPlugin optional in typings

Performance

try to avoid unnecessary allocations
","Features
allow to set chunk name for exposes for ModuleFederationPlugin
Bugfixes
add a missing simicolon in runtime code
improve consistency of top level await with other implementations and the spec
make options for ProgressPlugin optional in typings
Performance
try to avoid unnecessary allocations"
122,"Internals

refactor hashing to move the responsibility of hashing module exports info and referenced modules from Dependencies to the Module
Hashing in Dependencies can be much cheaper now (could improve performance when many dependencies are used that point to the same module, like many references to React.createElement)
Fixes bugs where Dependencies forgot to hash some details about the referenced module
The new model elimiates the potential of such bugs are Dependencies have less responsibilities now
","Internals
refactor hashing to move the responsibility of hashing module exports info and referenced modules from Dependencies to the Module
Hashing in Dependencies can be much cheaper now (could improve performance when many dependencies are used that point to the same module, like many references to React.createElement)
Fixes bugs where Dependencies forgot to hash some details about the referenced module
The new model elimiates the potential of such bugs are Dependencies have less responsibilities now"
123,"Features

add experimental lazy compilation via experiments.lazyCompilation: true for web and node targets
compiles entrypoints and import()s only when they are accessed
More details see: https://github.com/webpack/webpack/pull/12469
Known issues: webpack-dev-server/webpack serve opening an entrypoint for the first time, sometimes need a manual refresh.
move some javascript parsing related configuration options from module to module.parser.javascript and also allow to set them via module.rules
add module.parser.javascript.commonjsMagicComments to enable /* webpackIgnore: true */ for require() calls

Bugfixes

fix a problem with webpack.debug.ProfilingPlugin on Mac when the computer was suspended before.
fix a bug with IIFE handling when the IIFE has parameters with default values
","Features
add experimental lazy compilation via experiments.lazyCompilation: true for web and node targets
compiles entrypoints and import()s only when they are accessed
More details see: link
Known issues: webpack-dev-server/webpack serve opening an entrypoint for the first time, sometimes need a manual refresh.
move some javascript parsing related configuration options from module to module.parser.javascript and also allow to set them via module.rules
add module.parser.javascript.commonjsMagicComments to enable / webpackIgnore: true / for require() calls
Bugfixes
fix a problem with webpack.debug.ProfilingPlugin on Mac when the computer was suspended before.
fix a bug with IIFE handling when the IIFE has parameters with default values"
124,"Features

add __webpack_is_included__(""./some-module"") which returns true when the module is bundled and false when not
priorize eager shared modules over normal shared modules (with the same version), as they are loaded anyway
add library.type: ""assign-properties"" which merges all exports into a global variable
allow optimization.innerGraph for new URL()
This allows to detect which URLs are used and drop the module and asset when they are not.

Bugfixes

only return exports from runtime when needed
This allows to use experiments.outputModule: true with optimization.runtimeChunk
fix a bug that splitChunk.reuseExistingChunk doesn't work for entrypoints
This optimized an edge case where a nearly empty entrypoint is created when an entrypoint contains only vendor modules

Developer Experience

include plugin names in deprecation message for ""NormalModuleFactory.xxx is no longer a waterfall hook""
improve error message when passing an invalid library name
","Features
add webpack_is_included(""./some-module"") which returns true when the module is bundled and false when not
priorize eager shared modules over normal shared modules (with the same version), as they are loaded anyway
add library.type: ""assign-properties"" which merges all exports into a global variable
allow optimization.innerGraph for new URL()
This allows to detect which URLs are used and drop the module and asset when they are not.
Bugfixes
only return exports from runtime when needed
This allows to use experiments.outputModule: true with optimization.runtimeChunk
fix a bug that splitChunk.reuseExistingChunk doesn't work for entrypoints
This optimized an edge case where a nearly empty entrypoint is created when an entrypoint contains only vendor modules
Developer Experience
include plugin names in deprecation message for ""NormalModuleFactory.xxx is no longer a waterfall hook""
improve error message when passing an invalid library name"
125,"Features

add getResolve method to data object when using function externals
externals function may return a promise now

Bugfixes

fix define(""local-module"", expr) generating invalid syntax
fix resolving bug when resolving build dependencies
add chunkModulesSpace to schema
fix rebuildModule api

Performance

improve performance of build dependencies resolving
","Features
add getResolve method to data object when using function externals
externals function may return a promise now
Bugfixes
fix define(""local-module"", expr) generating invalid syntax
fix resolving bug when resolving build dependencies
add chunkModulesSpace to schema
fix rebuildModule api
Performance
improve performance of build dependencies resolving"
126,"Features

add experimental ESM tracking for build dependencies

Bugfixes

fix crash when calling watcher.getContextTimeInfoEntries()
make filesystem types compatible with memfs and real fs
fix rebuild error when using the AutomaticPrefetchPlugin

Contribution

improve type definitions by using typescript 4.2
","Features
add experimental ESM tracking for build dependencies
Bugfixes
fix crash when calling watcher.getContextTimeInfoEntries()
make filesystem types compatible with memfs and real fs
fix rebuild error when using the AutomaticPrefetchPlugin
Contribution
improve type definitions by using typescript 4.2"
127,"Features

add resolve.preferAbsolute flag for compatibility with webpack 4
add support for wildcards in exports and imports field
improve chunk and module names
use nameForCondition() as fallback for module names
handle module connection with only transive side effects correctly when determining chunk root modules
","Features
add resolve.preferAbsolute flag for compatibility with webpack 4
add support for wildcards in exports and imports field
improve chunk and module names
use nameForCondition() as fallback for module names
handle module connection with only transive side effects correctly when determining chunk root modules"
128,"Bugfixes

fix behavior of defaults for resolve.roots to be backward-compatible
","Bugfixes
fix behavior of defaults for resolve.roots to be backward-compatible"
129,"Bugfixes

upgrade @webassembly/* and terser-webpack-plugin dependencies
","Bugfixes
upgrade @webassembly/* and terser-webpack-plugin dependencies"
130,"Bugfixes

fix problem with typings in strict mode
","Bugfixes
fix problem with typings in strict mode"
131,"Bugfixes

fix a crash in ConcatenatedModule when deserializing
fix some not serializable warnings
show error when using an invalid identifier as var library
","Bugfixes
fix a crash in ConcatenatedModule when deserializing
fix some not serializable warnings
show error when using an invalid identifier as var library"
132,"Features

add experiments.layers
entry.xxx.layer: ""name-of-layer"" allows to set the layer for an entrypoint
module.rules[].issuerLayer: RuleCondition allows to filter/match by layer of issuer
module.rules[].layer: ""name-of-layer"" allows to set the layer of an module
splitChunks.cacheGroups.xxx.layer allows to select modules by layer
externals.byLayer[""name-of-layer""] allows to specify externals by layer
externals.byLayer: (layer) => ... allows to specify externals by layer
externals function has an additional argument property contextInfo which contains info about the issuer (e. g. the layer)
add module.parser and module.generator options to allow to specify parser/generator options globally per module type
make chunkId variable available in script tag hook (like it was with webpack 4)

Bugfixes

escape exclamation marks in context regexp when generating readable module names/ids
fix a problem when bundling webpack bundles with enabled eval-based devtools
add stats.nestedModulesSpace to schema to allow to specify this option
fix a bug that incorrectly replaces new.target with constants
fix a bug where splitChunk minSize is not handled correctly
fix a bug where the order of splitChunk cacheGroups is not handled correctly
avoid adding non-filesystem resources as dependencies for watching and caching

Developer experience

fix incorrect negation in hint comment for eval-based devtools
improve error messages of ""Library/Chunk Loading/Wasm Loading typeof is not enabled"" errors
improve question message when asking to install webpack-cli
show a warning when loaders/plugins report invalid dependencies to webpack

Contributing

examples use webpack-cli 4 now
rename memorize to memoize
","Features
add experiments.layers
entry.xxx.layer: ""name-of-layer"" allows to set the layer for an entrypoint
module.rules[].issuerLayer: RuleCondition allows to filter/match by layer of issuer
module.rules[].layer: ""name-of-layer"" allows to set the layer of an module
splitChunks.cacheGroups.xxx.layer allows to select modules by layer
externals.byLayer[""name-of-layer""] allows to specify externals by layer
externals.byLayer: (layer) => ... allows to specify externals by layer
externals function has an additional argument property contextInfo which contains info about the issuer (e. g. the layer)
add module.parser and module.generator options to allow to specify parser/generator options globally per module type
make chunkId variable available in script tag hook (like it was with webpack 4)
Bugfixes
escape exclamation marks in context regexp when generating readable module names/ids
fix a problem when bundling webpack bundles with enabled eval-based devtools
add stats.nestedModulesSpace to schema to allow to specify this option
fix a bug that incorrectly replaces new.target with constants
fix a bug where splitChunk minSize is not handled correctly
fix a bug where the order of splitChunk cacheGroups is not handled correctly
avoid adding non-filesystem resources as dependencies for watching and caching
Developer experience
fix incorrect negation in hint comment for eval-based devtools
improve error messages of ""Library/Chunk Loading/Wasm Loading typeof is not enabled"" errors
improve question message when asking to install webpack-cli
show a warning when loaders/plugins report invalid dependencies to webpack
Contributing
examples use webpack-cli 4 now
rename memorize to memoize"
133,"Features

resolve server-relative requests relative to project context by default

Bugfixes

fix a bug where splitChunk minSize is not handled correctly
fix a bug where the order of splitChunk cacheGroups is not handled correctly
","Features
resolve server-relative requests relative to project context by default
Bugfixes
fix a bug where splitChunk minSize is not handled correctly
fix a bug where the order of splitChunk cacheGroups is not handled correctly"
134,"Bugfixes

ignore cloned ExportInfo during hashing
fixes a problem where changing modules affects hashes in some other part of the application during development
fixes compileBooleanMatcher when prefix and suffix overlap
fixes invalidate code generated when generating properties access
fix object types in typings
expose more types regarding Stats
","Bugfixes
ignore cloned ExportInfo during hashing
fixes a problem where changing modules affects hashes in some other part of the application during development
fixes compileBooleanMatcher when prefix and suffix overlap
fixes invalidate code generated when generating properties access
fix object types in typings
expose more types regarding Stats"
135,"Features

update typings to include undefined/null types (for strict type)
export WebpackError
export Asset and AssetInfo types
allow error configuration for validateSchema function

Bugfixes

fix typings for SourceMapSource
allow custom properties in AssetInfo
handle undefined values for rule conditions like empty strings
","Features
update typings to include undefined/null types (for strict type)
export WebpackError
export Asset and AssetInfo types
allow error configuration for validateSchema function
Bugfixes
fix typings for SourceMapSource
allow custom properties in AssetInfo
handle undefined values for rule conditions like empty strings"
136,"Bugfixes

errors in initial cache no longer cause build dependencies to be ignored
manual side effects flagging should override automatic analysis
modules in dlls without entryOnly will no longer be dropped because of no side effects
","Bugfixes
errors in initial cache no longer cause build dependencies to be ignored
manual side effects flagging should override automatic analysis
modules in dlls without entryOnly will no longer be dropped because of no side effects"
137,"Bugfixes

add a few missing node.js libraries as externals in target: ""node""
improve cache (de)serialization to allow larger cache files (>2GB) and increase performance for them
","Bugfixes
add a few missing node.js libraries as externals in target: ""node""
improve cache (de)serialization to allow larger cache files (>2GB) and increase performance for them"
138,"Bugfixes

avoid duplicating chunk info in chunk loading global
allow executing chunks before runtime is loaded
avoid error when emitting assets with different query string but identical filename and content
fix duplicated asset name in processAssets with additionalAssets
add missing \ in module info header comment
","Bugfixes
avoid duplicating chunk info in chunk loading global
allow executing chunks before runtime is loaded
avoid error when emitting assets with different query string but identical filename and content
fix duplicated asset name in processAssets with additionalAssets
add missing \ in module info header comment"
139,"Bugfixes

Multiple fixes regarding the side effects optimization (""sideEffects"": false) when reexports and concatenated modules are combined

Contributing

Typescript major 4
Improved internal structure of our typings

Performance

output.pathinfo: true (default in development) adds less verbose information (and is faster)
output.pathinfo: ""verbose"" adds more verbose information
output.pathinfo: true is cached
avoid assets and module stats information generation when they are cached and cached assets/modules are not shown
","Bugfixes
Multiple fixes regarding the side effects optimization (""sideEffects"": false) when reexports and concatenated modules are combined
Contributing
Typescript major 4
Improved internal structure of our typings
Performance
output.pathinfo: true (default in development) adds less verbose information (and is faster)
output.pathinfo: ""verbose"" adds more verbose information
output.pathinfo: true is cached
avoid assets and module stats information generation when they are cached and cached assets/modules are not shown"
140,"Features

improve side effects analysis to report imported and reexported symbols as side-effect-free

Bugfixes

fix problem when HMR and different runtimes (e. g. with Workers)
caused crash with ... has no hash info for runtime ...
","Features
improve side effects analysis to report imported and reexported symbols as side-effect-free
Bugfixes
fix problem when HMR and different runtimes (e. g. with Workers)
caused crash with ... has no hash info for runtime ..."
141,"Features

add the ability to process assets generated in later stages during processAssets
new processAssets stage: PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE
add hooks to the RealContentHashPlugin to allow to process custom hashes (e. g. SRI)

Bugfixes

fix typing for child compiler plugins
SourceMapPlugin will process assets added in later stages during asset processing
","Features
add the ability to process assets generated in later stages during processAssets
new processAssets stage: PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE
add hooks to the RealContentHashPlugin to allow to process custom hashes (e. g. SRI)
Bugfixes
fix typing for child compiler plugins
SourceMapPlugin will process assets added in later stages during asset processing"
142,"Features

CLI supports installing webpack-cli via pnpm

Bugfixes

fix problem with ASI detection, causing semicolons inserted after if(...) etc.
","Features
CLI supports installing webpack-cli via pnpm
Bugfixes
fix problem with ASI detection, causing semicolons inserted after if(...) etc."
143,"Bugfixes

emit warnings/errors for exports in commonjs modules for which we know that they don't exist
","Bugfixes
emit warnings/errors for exports in commonjs modules for which we know that they don't exist"
144,"Bugfixes

fix crash when __esModule is defined with defineProperty without value
","Bugfixes
fix crash when __esModule is defined with defineProperty without value"
145,"Bugfixes

fix ASI issues that occur between concatenated modules
fix incorrect handling of [id] and etc. in SourceMap sources
fix side-effect-free handling of exports for concatenated modules that causes an unused export
make ESM-CJS interop handling consistent
make __esModule flag consistent exposed
handle non enumerable exports
handle inherited exports
handle exported Promises
","Bugfixes
fix ASI issues that occur between concatenated modules
fix incorrect handling of [id] and etc. in SourceMap sources
fix side-effect-free handling of exports for concatenated modules that causes an unused export
make ESM-CJS interop handling consistent
make __esModule flag consistent exposed
handle non enumerable exports
handle inherited exports
handle exported Promises"
146,"Bugfixes

fix renaming in super class expression in nested scopes
fix parsing and handling of browserlist queries
fix a few edge cases with ESM-CJS interop and .mjs
fix ASI edge cases
","Bugfixes
fix renaming in super class expression in nested scopes
fix parsing and handling of browserlist queries
fix a few edge cases with ESM-CJS interop and .mjs
fix ASI edge cases"
147,"Bugfixes

runtime-dependent concatenated modules can generate code for runtime-dependent execution order of concatenated modules
","Bugfixes
runtime-dependent concatenated modules can generate code for runtime-dependent execution order of concatenated modules"
148,"Bugfixes

fix incorrect concatenation of modules when multiple runtimes are involved
fixes a ""This should not happen"" error
fixes a __webpack_require__(null) problem
run CLI correctly after installing
fixes a huge performance issue when processing minimized code with SourceMap
Use string[] types instead of [string, ...string[]] for arrays that must not be empty
this is more convinient to use

Performance

avoid incorrect store of counts in the ProgressPlugin, which causes unneeded serialization of the Persistent Cache
upgrade terser-webpack-plugin for performance improvements
upgrade webpack-sources for performance improvements
","Bugfixes
fix incorrect concatenation of modules when multiple runtimes are involved
fixes a ""This should not happen"" error
fixes a webpack_require(null) problem
run CLI correctly after installing
fixes a huge performance issue when processing minimized code with SourceMap
Use string[] types instead of [string, ...string[]] for arrays that must not be empty
this is more convinient to use
Performance
avoid incorrect store of counts in the ProgressPlugin, which causes unneeded serialization of the Persistent Cache
upgrade terser-webpack-plugin for performance improvements
upgrade webpack-sources for performance improvements"
149,"Features and Bugfixes

generate runtime conditional code when modules are forcefully merged from multiple runtimes
This fixes a Cannot read property 'call' of undefined error in webpack runtime, because modules are used that are not in the graph in one runtime
disabled source code analysis for side effects in non-production modes
this causes unnecessary changes to parent modules in development
add optimization.sideEffects: ""flag"" as option for this
","Features and Bugfixes
generate runtime conditional code when modules are forcefully merged from multiple runtimes
This fixes a Cannot read property 'call' of undefined error in webpack runtime, because modules are used that are not in the graph in one runtime
disabled source code analysis for side effects in non-production modes
this causes unnecessary changes to parent modules in development
add optimization.sideEffects: ""flag"" as option for this"
150,"Bugfixes

add watchOptions.followSymlinks option to schema
fix hard crash when calling resolve with undefined value
fix emit problem when files have hash in query string
fix unneeded generation of SourceMaps when no devtool is used
fixes a huge performance regression with terser-webpack-plugin
","Bugfixes
add watchOptions.followSymlinks option to schema
fix hard crash when calling resolve with undefined value
fix emit problem when files have hash in query string
fix unneeded generation of SourceMaps when no devtool is used
fixes a huge performance regression with terser-webpack-plugin"
151,"Features

add sourceFilename and javascriptModule to asset info for plugins

Bugfixes

fix variable name collision when using module concatenation
fix arrow functions in ie 11
fix this externals with module concatenation
force update for enhanced-resolve for critical bugfixes (see changelog)
","Features
add sourceFilename and javascriptModule to asset info for plugins
Bugfixes
fix variable name collision when using module concatenation
fix arrow functions in ie 11
fix this externals with module concatenation
force update for enhanced-resolve for critical bugfixes (see changelog)"
152,"Bugfixes

omit unused modules from chunks when modules are only unused in some runtimes
fixes Self-reference dependency has unused export name error
fix order of asset optimization to fix conflict between compression-plugin and real hash plugin
","Bugfixes
omit unused modules from chunks when modules are only unused in some runtimes
fixes Self-reference dependency has unused export name error
fix order of asset optimization to fix conflict between compression-plugin and real hash plugin"
153,"Bugfixes

revert: omit unused modules from chunk when modules are only unused in some runtimes
caused issues with mini-css modules
","Bugfixes
revert: omit unused modules from chunk when modules are only unused in some runtimes
caused issues with mini-css modules"
154,"Bugfixes

fix order of chunk hashing to allow to uses hashes in WebWorkers
update to terser-webpack-plugin 5
reduces number of dependencies by dropping webpack 4 support
omit unused modules from chunk when modules are only unused in some runtimes
fixes Self-reference dependency has unused export name error
fix hanging production builds because of infinite loop in inner graph optimization
Compilation.deleteAsset updates chunk to file mappings
","Bugfixes
fix order of chunk hashing to allow to uses hashes in WebWorkers
update to terser-webpack-plugin 5
reduces number of dependencies by dropping webpack 4 support
omit unused modules from chunk when modules are only unused in some runtimes
fixes Self-reference dependency has unused export name error
fix hanging production builds because of infinite loop in inner graph optimization
Compilation.deleteAsset updates chunk to file mappings"
155,"Features

expose webpack property from Compiler
expose cleverMerge, EntryOptionPlugin, DynamicEntryPlugin

Bugfixes

missing require("".."").xxx in try-catch produces a warning instead of an error now
handle reexports in concatenated modules correctly when they are side-effect-free
fix incorrect deprecation message for ModuleTemplate.hooks.hash
","Features
expose webpack property from Compiler
expose cleverMerge, EntryOptionPlugin, DynamicEntryPlugin
Bugfixes
missing require("".."").xxx in try-catch produces a warning instead of an error now
handle reexports in concatenated modules correctly when they are side-effect-free
fix incorrect deprecation message for ModuleTemplate.hooks.hash"
156,Announcement and changelog,Announcement and changelog
157,"Bugfixes

fix evaluation order of concatenated modules
fix parsing of calls for ProvidePlugin
fix electron-renderer target
","Bugfixes
fix evaluation order of concatenated modules
fix parsing of calls for ProvidePlugin
fix electron-renderer target"
158,"Bugfixes

fix crash in getNumberOfMatchingSizeTypes
fix crash in SideEffectsFlagPlugin
fix crash when using runtimeChunk and Module Federation shared
add some missing type exports

Migration

improve Node.js polyfill message
","Bugfixes
fix crash in getNumberOfMatchingSizeTypes
fix crash in SideEffectsFlagPlugin
fix crash when using runtimeChunk and Module Federation shared
add some missing type exports
Migration
improve Node.js polyfill message"
159,"Features

optimization.sideEffects will detect simple cases of modules without side effects from the source code now
supported: class and function declarations, variable declarations with pure init expression, if, while, for, switch, export, import, function calls with pure flag
added a ""transitive only"" side effects mode which drops the module but keeps dependencies
This is useful for mini-css-extract-plugin to allow droping the extracted JS, while keeping the CSS dependencies

Bugfixes

accessing properties of the prototype from imported modules is now possible. They are no longer incorrectly mangled.

Dependencies

update schema-utils to major 3
update acorn to major 8
","Features
optimization.sideEffects will detect simple cases of modules without side effects from the source code now
supported: class and function declarations, variable declarations with pure init expression, if, while, for, switch, export, import, function calls with pure flag
added a ""transitive only"" side effects mode which drops the module but keeps dependencies
This is useful for mini-css-extract-plugin to allow droping the extracted JS, while keeping the CSS dependencies
Bugfixes
accessing properties of the prototype from imported modules is now possible. They are no longer incorrectly mangled.
Dependencies
update schema-utils to major 3
update acorn to major 8"
160,"Bugfixes

delete x.y.z now also works in concatenated modules
folder and file names containing # are now supported
","Bugfixes
delete x.y.z now also works in concatenated modules
folder and file names containing # are now supported"
161,"Features

[Stats] do not display loader prefix for modules in bold
[Stats] improve grouping by path for modules and assets
add optimization.splitChunks.defaultSizeTypes to specify size types considered for sizes when only a number is specified
this allows plugins to add default size types

Bugfixes

[Stats] fix some space calculation issues for assets and modules space limit
[Stats] fix filtered item count
remove error when watch option is used without callback and show a deprecation message instead.
","Features
[Stats] do not display loader prefix for modules in bold
[Stats] improve grouping by path for modules and assets
add optimization.splitChunks.defaultSizeTypes to specify size types considered for sizes when only a number is specified
this allows plugins to add default size types
Bugfixes
[Stats] fix some space calculation issues for assets and modules space limit
[Stats] fix filtered item count
remove error when watch option is used without callback and show a deprecation message instead."
162,"Breaking Changes

uses target: ""browserslist"" as default when a browserslist config has been found, otherwise fallback to target: ""web"" as usual
This could have unexpected changed to the EcmaScript version of the generated code
In same cases this might causes builds to fail because browserslist contain web and node versions
In most cases we expect this to simplify migration while still allowing to generate better code
This partially reverts a breaking change: Instead of changing the generated code from ES5 to ES6, this now changes it from ES5 to an automatic version depending on browserslist when available



Features

add support for target: ""browserslist"" and more advanced options
expose more classes as needed by plugins
add Compiler.watching
add parser.worker for javascript files to allow to modify which syntax is special for WebWorker support
allow output.chunkFilename to be a function via schema
allow RegExp for watchOptions.ignored via schema
add resolve.preferRelative option, which allows to resolve module requests also as relative requests

Migration

add more hints regarding breaking changes in config
improve deprecation layer for Array -> Set to allow accessing the first index
allow to use splitChunks name to move modules to an parent chunk

Bugfixes

avoid some errors in dependencies when target module failed
when min(Remaingin)Size is violated, use only modules that are fine, instead of failing for all modules
fix infinite recursion when having a circular symlink and a context containing it
warning for importing an disposed module displays the correct module
fix too wide hash for javascript chunks that caused unnecessary invalidation of the rendered files
fix new URL(""relative/file.png"", import.meta.url) to resolve relative
update webpack-sources to fix crash with source ""."" is not in SourceMap
fix stack overflow in resolving
","Breaking Changes
uses target: ""browserslist"" as default when a browserslist config has been found, otherwise fallback to target: ""web"" as usual
This could have unexpected changed to the EcmaScript version of the generated code
In same cases this might causes builds to fail because browserslist contain web and node versions
In most cases we expect this to simplify migration while still allowing to generate better code
This partially reverts a breaking change: Instead of changing the generated code from ES5 to ES6, this now changes it from ES5 to an automatic version depending on browserslist when available
Features
add support for target: ""browserslist"" and more advanced options
expose more classes as needed by plugins
add Compiler.watching
add parser.worker for javascript files to allow to modify which syntax is special for WebWorker support
allow output.chunkFilename to be a function via schema
allow RegExp for watchOptions.ignored via schema
add resolve.preferRelative option, which allows to resolve module requests also as relative requests
Migration
add more hints regarding breaking changes in config
improve deprecation layer for Array -> Set to allow accessing the first index
allow to use splitChunks name to move modules to an parent chunk
Bugfixes
avoid some errors in dependencies when target module failed
when min(Remaingin)Size is violated, use only modules that are fine, instead of failing for all modules
fix infinite recursion when having a circular symlink and a context containing it
warning for importing an disposed module displays the correct module
fix too wide hash for javascript chunks that caused unnecessary invalidation of the rendered files
fix new URL(""relative/file.png"", import.meta.url) to resolve relative
update webpack-sources to fix crash with source ""."" is not in SourceMap
fix stack overflow in resolving"
163,"Full Changelog
Known Problems

delete x.y.z doesn't work with optimization.concatenateModules: true yet.
mini-css-extract-plugin is not fully compatible and there a few problems.
~html-webpack-plugin doesn't understand the new default automatic publicPath yet. Use output.publicPath: """" instead.~
target doesn't support individual browser versions yet. Use the general targets for now: target: [""web"", ""es2020""]
The stable webpack-cli shows too verbose output for schema validation problems.
new URL with string not starting with ./ or ../ works incorrectly
The stats grouping algorithm need still some fine-tuning
","Full Changelog
Known Problems
delete x.y.z doesn't work with optimization.concatenateModules: true yet.
mini-css-extract-plugin is not fully compatible and there a few problems.
~html-webpack-plugin doesn't understand the new default automatic publicPath yet. Use output.publicPath: """" instead.~
target doesn't support individual browser versions yet. Use the general targets for now: target: [""web"", ""es2020""]
The stable webpack-cli shows too verbose output for schema validation problems.
new URL with string not starting with ./ or ../ works incorrectly
The stats grouping algorithm need still some fine-tuning"
164,"Changes

deprecate stats.warningsFilter in favor of ignoreWarnings
We need to filter warnings earlier and not only for display, e. g. for correct ignoring in hasWarnings()

Bugfixes

fix missing fileDependencies for managed items
","Changes
deprecate stats.warningsFilter in favor of ignoreWarnings
We need to filter warnings earlier and not only for display, e. g. for correct ignoring in hasWarnings()
Bugfixes
fix missing fileDependencies for managed items"
165,"Features

sort assets by size
update all dependencies to stable versions only
output.publicPath is now ""auto"" by default when supported by target
add output.publicPath: ""auto"" to determine publicPath automatically

Bugfixes

avoid error for managed paths that only contain a node_modules
","Features
sort assets by size
update all dependencies to stable versions only
output.publicPath is now ""auto"" by default when supported by target
add output.publicPath: ""auto"" to determine publicPath automatically
Bugfixes
avoid error for managed paths that only contain a node_modules"
166,"Features

refactor module concatenation to be more flexible
support non-namespace exports
allow to concatenate externals
allow to concatenate json modules
add a breaking change hint when modules can't be resolve because requests are expected to be fully specified
add support for imports field in package.json
add resolve.fallback option and recommend that for polyfilling

Bugfixes

fixes parsing of this when in an arrow IIFE
fix caching in RealContentHashPlugin when assets contain their own hash
fix chunk group connections for cases where referenced chunk group is sometimes already included
[Module Federation] fix circular references of containers when using async externals
fixes a hanging promise
[Module Federation] fix circular dependencies of modules between containers
fixes another hanging promise
[Module Federation] fix crash when no sharing is used in the container at all

Performance

improve performance of deprecated needRebuild method

Deprecations

officially deprecate needRebuild in favor of needBuild
","Features
refactor module concatenation to be more flexible
support non-namespace exports
allow to concatenate externals
allow to concatenate json modules
add a breaking change hint when modules can't be resolve because requests are expected to be fully specified
add support for imports field in package.json
add resolve.fallback option and recommend that for polyfilling
Bugfixes
fixes parsing of this when in an arrow IIFE
fix caching in RealContentHashPlugin when assets contain their own hash
fix chunk group connections for cases where referenced chunk group is sometimes already included
[Module Federation] fix circular references of containers when using async externals
fixes a hanging promise
[Module Federation] fix circular dependencies of modules between containers
fixes another hanging promise
[Module Federation] fix crash when no sharing is used in the container at all
Performance
improve performance of deprecated needRebuild method
Deprecations
officially deprecate needRebuild in favor of needBuild"
167,"Bugfixes

make sure to generate correct chunk connection for blocks that are only connected in some runtimes
fixes a bug where filename contains undefined hash at runtime
","Bugfixes
make sure to generate correct chunk connection for blocks that are only connected in some runtimes
fixes a bug where filename contains undefined hash at runtime"
168,"Highlights

There will be a Release Candidate soon
See #11406 for a list of outstanding items
new URL(""..."", import.meta.url) is treated as dependency and creates an asset module
Worker support
new Worker(new URL(""..."", import.meta.url)) creates a WebWorker (same for new SharedWorker)
known issue: type: ""module"" doesn't work yet


navigator.serviceWorker.register(new URL(""..."", import.meta.url)) creates a ServiceWorker
Improved target
target option allows versions, e. g. target: ""node10.13"" or target: ""es2020""
target allows an array of targets, e. g. target: [""web"", ""es2020""]

Features

Stats improvements
Group assets and modules in stats text output by default to keep within space limit
asset modules are enabled by default (type: ""asset"")
Put name, version, time, errors/warnings and hash in a single line as summary in the stats
Use output.wasmLoading (and output.workerWasmLoading) to specify the wasm loading method (similar to output.chunkLoading)
New option externalsPreset with presets for externals for
node
nwjs (deprecated)
electronMain
electronPreload
electronRenderer
web
webAsync
defaults choosen based on targets
mjs experiment is enabled by default
.mjs and .js with type: ""module"" in package.json puts ESM in strict mode
no CommonJs allowed
extensions are required in imports
no named exports of non-esm modules
no __esModule support (will be added once this landed in node.js)


.cjs and .js with type: ""commonjs"" in package.json disables ESM support
.wasm with type: ""module"" in package.json also makes extensions required in wasm imports
output.ecmaVersion is replaced with output.environment which lists features used by webpack

Changes

Stats improvements
Hide hash by default in stats
Hide entrypoints in stats by default when unnecessary
Show only files count in entrypoints when there are too many files
Hide auxiliary files for entrypoints in stats by default

Bugfixes

improve ASI handling to avoid Object(...) wrapping
fix incorrect disposing of modules when a whole chunk is removed during Hot Module Replacement
","Highlights
There will be a Release Candidate soon
See #11406 for a list of outstanding items
new URL(""..."", import.meta.url) is treated as dependency and creates an asset module
Worker support
new Worker(new URL(""..."", import.meta.url)) creates a WebWorker (same for new SharedWorker)
known issue: type: ""module"" doesn't work yet
navigator.serviceWorker.register(new URL(""..."", import.meta.url)) creates a ServiceWorker
Improved target
target option allows versions, e. g. target: ""node10.13"" or target: ""es2020""
target allows an array of targets, e. g. target: [""web"", ""es2020""]
Features
Stats improvements
Group assets and modules in stats text output by default to keep within space limit
asset modules are enabled by default (type: ""asset"")
Put name, version, time, errors/warnings and hash in a single line as summary in the stats
Use output.wasmLoading (and output.workerWasmLoading) to specify the wasm loading method (similar to output.chunkLoading)
New option externalsPreset with presets for externals for
node
nwjs (deprecated)
electronMain
electronPreload
electronRenderer
web
webAsync
defaults choosen based on targets
mjs experiment is enabled by default
.mjs and .js with type: ""module"" in package.json puts ESM in strict mode
no CommonJs allowed
extensions are required in imports
no named exports of non-esm modules
no __esModule support (will be added once this landed in node.js)
.cjs and .js with type: ""commonjs"" in package.json disables ESM support
.wasm with type: ""module"" in package.json also makes extensions required in wasm imports
output.ecmaVersion is replaced with output.environment which lists features used by webpack
Changes
Stats improvements
Hide hash by default in stats
Hide entrypoints in stats by default when unnecessary
Show only files count in entrypoints when there are too many files
Hide auxiliary files for entrypoints in stats by default
Bugfixes
improve ASI handling to avoid Object(...) wrapping
fix incorrect disposing of modules when a whole chunk is removed during Hot Module Replacement"
169,"Breaking Changes

config options have moved
cache.managedPaths/immutablePaths -> snapshot.managedPaths/immutablePaths
output.hotUpdateFunction -> output.hotUpdateGlobal
output.jsonpFunction -> output.chunkLoadingGlobal
output.chunkCallbackFunction -> output.chunkLoadingGlobal

Features

new RegExp() can be evaluated now, e. g. when used in require.context
add additional logging for FileSystemInfo regarding snapshotting
new config options how snapshots are created.
snapshot.module: Snapshots for building of modules
snapshot.resolve: Snapshots for resolving of requests
snapshot.buildDependencies: Snapshots for build dependencies when using the persistent cache
snapshot.resolveBuildDependencies: Snapshots for resolving of build dependencies when using the persistent cache
new options:
output.chunkLoading: The method of loading chunks (methods included by default are 'jsonp' (web), 'import-scripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).
output.chunkFormat: The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), but others might be added by plugins).
defaults are chosen based on target option
output.enabledChunkLoadingTypes: List of chunk loading types enabled. Will be automatically filled by webpack. Only needed when using a function as entry option and returning chunkLoading option from there.
entry.*.chunkLoading: Like output.chunkLoading but only for this entry.
output.library and output.chunkLoading now also allow any string in schema, to support adding custom types via plugins.

Changes

in production mode module snapshotting will use timestamp + hash mode to allow persistent caching on CI
output.globalObject defaults to self instead of window of web-like targets

Bugfixes

fix generated code for export default function*() {}
allow caching of modules that are not parsed because of module.noParse
fix generated code of new.target
avoid using require(""module"").builtinModules for getting node.js built-in modules
fix watching when more than 2000 directories are watched on MacOS

Performance

Performance improvements for snapshotting
snapshot content other than file timestamps is deduplicated
lazy deserialize inner source in CachedSource
avoid touching LazySet for cache dependencies from ModuleFactory to avoid eager merging
refactor how cache dependencies are read from Modules for performance
store cache dependencies instead of Snapshot to avoid duplicate serialization and allow deduplication
create multiple files when more then 50k cache items are stored at once
optimize serialization of lazy deserialized content in BinaryMiddleware
","Breaking Changes
config options have moved
cache.managedPaths/immutablePaths -> snapshot.managedPaths/immutablePaths
output.hotUpdateFunction -> output.hotUpdateGlobal
output.jsonpFunction -> output.chunkLoadingGlobal
output.chunkCallbackFunction -> output.chunkLoadingGlobal
Features
new RegExp() can be evaluated now, e. g. when used in require.context
add additional logging for FileSystemInfo regarding snapshotting
new config options how snapshots are created.
snapshot.module: Snapshots for building of modules
snapshot.resolve: Snapshots for resolving of requests
snapshot.buildDependencies: Snapshots for build dependencies when using the persistent cache
snapshot.resolveBuildDependencies: Snapshots for resolving of build dependencies when using the persistent cache
new options:
output.chunkLoading: The method of loading chunks (methods included by default are 'jsonp' (web), 'import-scripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).
output.chunkFormat: The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), but others might be added by plugins).
defaults are chosen based on target option
output.enabledChunkLoadingTypes: List of chunk loading types enabled. Will be automatically filled by webpack. Only needed when using a function as entry option and returning chunkLoading option from there.
entry.*.chunkLoading: Like output.chunkLoading but only for this entry.
output.library and output.chunkLoading now also allow any string in schema, to support adding custom types via plugins.
Changes
in production mode module snapshotting will use timestamp + hash mode to allow persistent caching on CI
output.globalObject defaults to self instead of window of web-like targets
Bugfixes
fix generated code for export default function*() {}
allow caching of modules that are not parsed because of module.noParse
fix generated code of new.target
avoid using require(""module"").builtinModules for getting node.js built-in modules
fix watching when more than 2000 directories are watched on MacOS
Performance
Performance improvements for snapshotting
snapshot content other than file timestamps is deduplicated
lazy deserialize inner source in CachedSource
avoid touching LazySet for cache dependencies from ModuleFactory to avoid eager merging
refactor how cache dependencies are read from Modules for performance
store cache dependencies instead of Snapshot to avoid duplicate serialization and allow deduplication
create multiple files when more then 50k cache items are stored at once
optimize serialization of lazy deserialized content in BinaryMiddleware"
170,"Features

terser 5
expose missing plugins for applying targets

Bugfixes

fix crash in RealContentHashPlugin when using Source-like object instead of real Source objects (or old webpack-sources versions)

Performance

cache Source access in RealContentHashPlugin
","Features
terser 5
expose missing plugins for applying targets
Bugfixes
fix crash in RealContentHashPlugin when using Source-like object instead of real Source objects (or old webpack-sources versions)
Performance
cache Source access in RealContentHashPlugin"
171,"Features

static analysis for CommonJS now supports reexports via
module.exports = require(""..."")
module.exports.a.b.c = require(""..."").a.b.c
Unused exports for these constructs are elimiated, but export names are not mangled yet
add optimization.realContentHash option
defaults to true in production mode
a real content hash is calculated for [contenthash] after asset processing, e. g. for minimizing etc.
add output.charset option
defaults to true
setting it to false omits the charset attribute on injected scripts
expose require(""webpack-sources"") as require(""webpack"").sources
avoids version conflict with different webpack-sources version
webpack should be consumes as peerDependecy by plugins

Bugfixes

fixes a crash with TypeError: Cannot mix BigInt and other types, use explicit conversions in the SplitChunksPlugin in rare edge cases
Persistent Cache can serialize unaffected cache items even when other cache items fail to serialize
Shows all serializing problems as warnings
","Features
static analysis for CommonJS now supports reexports via
module.exports = require(""..."")
module.exports.a.b.c = require(""..."").a.b.c
Unused exports for these constructs are elimiated, but export names are not mangled yet
add optimization.realContentHash option
defaults to true in production mode
a real content hash is calculated for [contenthash] after asset processing, e. g. for minimizing etc.
add output.charset option
defaults to true
setting it to false omits the charset attribute on injected scripts
expose require(""webpack-sources"") as require(""webpack"").sources
avoids version conflict with different webpack-sources version
webpack should be consumes as peerDependecy by plugins
Bugfixes
fixes a crash with TypeError: Cannot mix BigInt and other types, use explicit conversions in the SplitChunksPlugin in rare edge cases
Persistent Cache can serialize unaffected cache items even when other cache items fail to serialize
Shows all serializing problems as warnings"
172,"Features

add error message when there are conflicting star exports
track reexports in opimization.providedExports
display reexports in output.pathinfo
improve performance
chunk graph building
optimization.splitChunks
hashing
add more statistics for performance-related issues

Bugfixes

fix problem with script externals where the url contains @
improves handling of dynamic modules for reexporting
build errors are no longer treated as warnings for optional modules
","Features
add error message when there are conflicting star exports
track reexports in opimization.providedExports
display reexports in output.pathinfo
improve performance
chunk graph building
optimization.splitChunks
hashing
add more statistics for performance-related issues
Bugfixes
fix problem with script externals where the url contains @
improves handling of dynamic modules for reexporting
build errors are no longer treated as warnings for optional modules"
173,"Features

Compilation.deleteAsset to correctly delete an assets and non-shared related assets
Add support for optional chaining a?.b in parsing and evaluation
allows e. g. import.meta.webpackHot?.accept(""./dep"")

Bugfixes

runtime chunk is now part of the generated entry info in the chunk
upgrade watchpack to beta 14
merged watchers to recursive watchers when reaching watcher limit (MacOS: 2,000, Windows: 10,000)
This fixes watching errors when watching more than 4096 directories on MacOS
import() of async externals now works correctly
fix variable declarations in switch cases
","Features
Compilation.deleteAsset to correctly delete an assets and non-shared related assets
Add support for optional chaining a?.b in parsing and evaluation
allows e. g. import.meta.webpackHot?.accept(""./dep"")
Bugfixes
runtime chunk is now part of the generated entry info in the chunk
upgrade watchpack to beta 14
merged watchers to recursive watchers when reaching watcher limit (MacOS: 2,000, Windows: 10,000)
This fixes watching errors when watching more than 4096 directories on MacOS
import() of async externals now works correctly
fix variable declarations in switch cases"
174,"Features

new stats.relatedAssets option to show assets that are related to other assets (like SourceMap, compressed version, etc.)
removed assets table in favor of assets list in stats text
assetInfo from emitAsset will now merge when nested objects or arrays are used
remove experiments.importAsync and enable it by default
remove experiments.importAwait
[query] is now a valid placeholder when for paths based on a filename like assets
output.assetModuleFilename includes [query] now
This allows to use querystrings with asset modules, e. g. when using some kind of server-side processing layer for assets

Bugfixes

fix a problem were context modules misses some items when remove.modules is used
fixes a problem when multiple webpack runtimes try to load the same script (e. g. as script external with Module Federation)
fix a problem where shareScope is ignored in ModuleFederationPlugin and SharePlugin
exclude deprecated --module-rules-options from Cli arguments
fixes problems with relative paths when using nested or weird entry names (for web, node, webworker)
fix version comparsion for Module Federation
","Features
new stats.relatedAssets option to show assets that are related to other assets (like SourceMap, compressed version, etc.)
removed assets table in favor of assets list in stats text
assetInfo from emitAsset will now merge when nested objects or arrays are used
remove experiments.importAsync and enable it by default
remove experiments.importAwait
[query] is now a valid placeholder when for paths based on a filename like assets
output.assetModuleFilename includes [query] now
This allows to use querystrings with asset modules, e. g. when using some kind of server-side processing layer for assets
Bugfixes
fix a problem were context modules misses some items when remove.modules is used
fixes a problem when multiple webpack runtimes try to load the same script (e. g. as script external with Module Federation)
fix a problem where shareScope is ignored in ModuleFederationPlugin and SharePlugin
exclude deprecated --module-rules-options from Cli arguments
fixes problems with relative paths when using nested or weird entry names (for web, node, webworker)
fix version comparsion for Module Federation"
175,"Highlights
webpack now optimizes exports and concatenates modules per runtime (often equal entrypoint), which will lead to better optimization when using multiple entrypoints.
Entrypoints do no longer affect each other when using a runtime per entrypoint.
webpack defaults has been improved to be optimized for http/2 serving (creating more chunks as request limit as been increased).
Features

new option splitChunks.enforceSizeThreshold resp. splitChunks.cacheGroups[x].enforceSizeThreshold
when over this limit, minRemainingSize, maxInitialRequests and maxAsyncRequests are ignore
This enforces big chunks to be splitted, e. g. big vendors, even if this adds more requests or keeps small remaining chunks
added compilation/compiler.getCache API for easier to use caching
also exposes getLazyHashedEtag to plugins
Allow to use ""..."" in more configuration options to access the defaults:
  cache.managed/immutablePaths, module.defaultRules, optimization.minimizer
assets now use a content hash instead of the module hash
improved the experiments.mjs to mirror node.js behavior
type: ""module""
*.cjs and *.mjs
data:text/javascript and data:application/javascript
Disallow not fully specified requests in imports from these types
add Rule.descriptionData to allow matching data from the package.json
add support for parsing and evaluating ?? expressions
add entry[x].runtime option to set runtimeChunk set entry
optimization.usedExports now analyses used exports separately per runtime to allow independent optimization
add ""global"" option to optimization.usedExports analyse used exports globally instead (faster)
optimization.concatenateModules now optimizes per runtime when analysed by optimization.usedExports
add splitChunks.usedExports resp. splitChunks.cacheGroups[x].usedExports to compare modules based on used exports or ignore them while comparing
This is relevant when looking for shared module to combine them in a chunk. When enabled modules will only be considered as equal when used exports match.
false is usually better for long term caching and a smaller total size
true is usually better for load performance of individual pages.
This is enabled by default in production mode.
add optimization.mangleExports: ""size"" to optimize export names for minimal size
give useful error message when using runtime or dependOn incorrectly in entry
improve --progress and --progress --profile output
store build dependencies and store cache after finishing the compilation in watch mode to avoid adding extra delay

Changes

splitChunks.minSize defaults to 20k in production
splitChunks.enforceSizeThreshold defaults to 50k in production
using compilation.cache directly is now deprecated
deprecate optimization.noEmitOnErrors in favor of optimization.emitOnErrors
negative flags can be confusing

Bugfixes

improve the merging of resolve options to apply byDependency in the correct order as specified
calling compiler.close multiple times will still call all callbacks correctly
Compiler.hooks.invalid will now also be triggered when manually invalidating the watching
fix passing externalsType via configuration
add webpack-cli as optional peer dependency to allow using it with Yarn 2
fix display for built time in stats at 10 o'clock
","Highlights
webpack now optimizes exports and concatenates modules per runtime (often equal entrypoint), which will lead to better optimization when using multiple entrypoints.
Entrypoints do no longer affect each other when using a runtime per entrypoint.
webpack defaults has been improved to be optimized for http/2 serving (creating more chunks as request limit as been increased).
Features
new option splitChunks.enforceSizeThreshold resp. splitChunks.cacheGroups[x].enforceSizeThreshold
when over this limit, minRemainingSize, maxInitialRequests and maxAsyncRequests are ignore
This enforces big chunks to be splitted, e. g. big vendors, even if this adds more requests or keeps small remaining chunks
added compilation/compiler.getCache API for easier to use caching
also exposes getLazyHashedEtag to plugins
Allow to use ""..."" in more configuration options to access the defaults:
  cache.managed/immutablePaths, module.defaultRules, optimization.minimizer
assets now use a content hash instead of the module hash
improved the experiments.mjs to mirror node.js behavior
type: ""module""
.cjs and .mjs
data:text/javascript and data:application/javascript
Disallow not fully specified requests in imports from these types
add Rule.descriptionData to allow matching data from the package.json
add support for parsing and evaluating ?? expressions
add entry[x].runtime option to set runtimeChunk set entry
optimization.usedExports now analyses used exports separately per runtime to allow independent optimization
add ""global"" option to optimization.usedExports analyse used exports globally instead (faster)
optimization.concatenateModules now optimizes per runtime when analysed by optimization.usedExports
add splitChunks.usedExports resp. splitChunks.cacheGroups[x].usedExports to compare modules based on used exports or ignore them while comparing
This is relevant when looking for shared module to combine them in a chunk. When enabled modules will only be considered as equal when used exports match.
false is usually better for long term caching and a smaller total size
true is usually better for load performance of individual pages.
This is enabled by default in production mode.
add optimization.mangleExports: ""size"" to optimize export names for minimal size
give useful error message when using runtime or dependOn incorrectly in entry
improve --progress and --progress --profile output
store build dependencies and store cache after finishing the compilation in watch mode to avoid adding extra delay
Changes
splitChunks.minSize defaults to 20k in production
splitChunks.enforceSizeThreshold defaults to 50k in production
using compilation.cache directly is now deprecated
deprecate optimization.noEmitOnErrors in favor of optimization.emitOnErrors
negative flags can be confusing
Bugfixes
improve the merging of resolve options to apply byDependency in the correct order as specified
calling compiler.close multiple times will still call all callbacks correctly
Compiler.hooks.invalid will now also be triggered when manually invalidating the watching
fix passing externalsType via configuration
add webpack-cli as optional peer dependency to allow using it with Yarn 2
fix display for built time in stats at 10 o'clock"
176,"Bugfixes

fix bug in sideEffects optimization when using export * from ""non-esm"" and a default export.
add missing optional peerDependencies for webpack-cli and webpack-command to support Yarn 2
","Bugfixes
fix bug in sideEffects optimization when using export * from ""non-esm"" and a default export.
add missing optional peerDependencies for webpack-cli and webpack-command to support Yarn 2"
177,"Features

Improve sideEffects flag behavior when dynamic modules are part of the tree
Fixes a bug which causes empty modules (or type-only modules) to ""break"" Tree Shaking
add splitChunks.enforceSizeThreshold to allow enfore splitting larger chunks unrelated from other limiations
Not set by default to avoid breaking change
It will be set by default to 50k in webpack 5
It's recommended to set it in webpack 4 too
add support for resolve.roots and default resolve.roots: [context]
This allows to resolve server-relative urls (e.g. /src/abc) to the project root (or other locations when configured)
This allows to use loaders that rely on that behavior

Bugfixes

fix bug where splitChunks produced non-optimal results when minSize is set to 0
This lead to NaNs in some places which breaks ordering
Fix bug which lead to HMR not working for splitChunks in entrypoints
force update watchpack and chokidar for chokidar bugfix which causes files to stop being watched
","Features
Improve sideEffects flag behavior when dynamic modules are part of the tree
Fixes a bug which causes empty modules (or type-only modules) to ""break"" Tree Shaking
add splitChunks.enforceSizeThreshold to allow enfore splitting larger chunks unrelated from other limiations
Not set by default to avoid breaking change
It will be set by default to 50k in webpack 5
It's recommended to set it in webpack 4 too
add support for resolve.roots and default resolve.roots: [context]
This allows to resolve server-relative urls (e.g. /src/abc) to the project root (or other locations when configured)
This allows to use loaders that rely on that behavior
Bugfixes
fix bug where splitChunks produced non-optimal results when minSize is set to 0
This lead to NaNs in some places which breaks ordering
Fix bug which lead to HMR not working for splitChunks in entrypoints
force update watchpack and chokidar for chokidar bugfix which causes files to stop being watched"
178,"Features

throw error when trying to emit assets that only differ in casing
add watchFileSystem to MultiCompiler
avoid tracking exports usage information for non-statically analyzable modules
do not show harmony linking warnings/errors (export not found) when the imported module already has build errors

Bugfixes

handle snapshot creation failure in resolver cache
[Cli] fix conversion from string to number arguments
use different approach of elimination build cycles in HotModuleReplacementPlugin
[Module Federation] providing modules do no override already loaded shared modules in the same version

Changes

do no track exports usage information in development

Removals

remove ability to modify the compilation hash after the hash has been created
remove HotModuleReplacementPlugin multiStep mode
","Features
throw error when trying to emit assets that only differ in casing
add watchFileSystem to MultiCompiler
avoid tracking exports usage information for non-statically analyzable modules
do not show harmony linking warnings/errors (export not found) when the imported module already has build errors
Bugfixes
handle snapshot creation failure in resolver cache
[Cli] fix conversion from string to number arguments
use different approach of elimination build cycles in HotModuleReplacementPlugin
[Module Federation] providing modules do no override already loaded shared modules in the same version
Changes
do no track exports usage information in development
Removals
remove ability to modify the compilation hash after the hash has been created
remove HotModuleReplacementPlugin multiStep mode"
179,"Features

export * as X from ""..."" is now supported
webpack now better understand URLs
add support for file: URLs
add support for fragments #fragment
add new hooks to allow plugins to add custom schemes
add support for import.meta
import.meta.webpackHot is the HMR API for ESM
import.meta.webpack is the webpack major version
import.meta.url is the file: url of the current file
Module Federation
add complete SemVer ranges support (e. g. >=1 <4 || >5 <=7 || 3.4.X || 3.5.0-beta)
choose shared version deterministic by uniqueName for better caching
remove ability to pass version or requiredVersion as array (only strings are supported)
Container API changed: Share Scope format is different now

Bugfixes

improve compat layer for MainTemplate and Module.source() to support more webpack 4 plugins
Module Federation
fix a crash when two runtimes try to remove a script tag
make bundles more deterministic to avoid random changes
","Features
export * as X from ""..."" is now supported
webpack now better understand URLs
add support for file: URLs
add support for fragments #fragment
add new hooks to allow plugins to add custom schemes
add support for import.meta
import.meta.webpackHot is the HMR API for ESM
import.meta.webpack is the webpack major version
import.meta.url is the file: url of the current file
Module Federation
add complete SemVer ranges support (e. g. >=1 <4 || >5 <=7 || 3.4.X || 3.5.0-beta)
choose shared version deterministic by uniqueName for better caching
remove ability to pass version or requiredVersion as array (only strings are supported)
Container API changed: Share Scope format is different now
Bugfixes
improve compat layer for MainTemplate and Module.source() to support more webpack 4 plugins
Module Federation
fix a crash when two runtimes try to remove a script tag
make bundles more deterministic to avoid random changes"
180,"Bugfixes

Remove broken postinstall script
","Bugfixes
Remove broken postinstall script"
181,"Features

Data Uri are now supported
application/json, text/javascript, application/javascript, application/node, application/wasm are supported by default as mimetype
added Rule.mimetype to match mimetype in rules
[Node Chunk Loading] support runtime and entries being in different chunks (e. g. with runtimeChunk single)
[splitChunks] defaults for splitChunks.maxAsyncRequests and splitChunks.maxInitialRequests has been increased to 30

Bugfixes

[Chunk Loading] fix a race condition with chunk loading with multiple webpack builds on a single page with overlapping chunk ids (since beta.18)
data-webpack has now a output.uniqueName + "":"" prefix
data-webpack is not used when no output.uniqueName is specified
[HMR] callback function in module.hot.accept is now parsed
[splitChunks.maxSize] chunks are not unnecessary renamed when not splitted at all
[splitChunks.maxSize] no longer generates filenames that only differ in casing
[Module Federation] providing modules now also works in incremental builds
[Normalization] stats: true now normalizes to stats: { preset: ""normal"" }
[Stats] fixed as incorrectly inserted new line in the assets table
[Jsonp Chunk Loading] fix a problem with non-js chunk in the entrypoint

Changes

rename output.jsonpScriptType to output.scriptType as it's now also used for other things than jsonp (e. g. script externals)

Performance

improvements in SplitChunksPlugin

Contributing

yarn lockfile is now deduplicated and checked by CI
","Features
Data Uri are now supported
application/json, text/javascript, application/javascript, application/node, application/wasm are supported by default as mimetype
added Rule.mimetype to match mimetype in rules
[Node Chunk Loading] support runtime and entries being in different chunks (e. g. with runtimeChunk single)
[splitChunks] defaults for splitChunks.maxAsyncRequests and splitChunks.maxInitialRequests has been increased to 30
Bugfixes
[Chunk Loading] fix a race condition with chunk loading with multiple webpack builds on a single page with overlapping chunk ids (since beta.18)
data-webpack has now a output.uniqueName + "":"" prefix
data-webpack is not used when no output.uniqueName is specified
[HMR] callback function in module.hot.accept is now parsed
[splitChunks.maxSize] chunks are not unnecessary renamed when not splitted at all
[splitChunks.maxSize] no longer generates filenames that only differ in casing
[Module Federation] providing modules now also works in incremental builds
[Normalization] stats: true now normalizes to stats: { preset: ""normal"" }
[Stats] fixed as incorrectly inserted new line in the assets table
[Jsonp Chunk Loading] fix a problem with non-js chunk in the entrypoint
Changes
rename output.jsonpScriptType to output.scriptType as it's now also used for other things than jsonp (e. g. script externals)
Performance
improvements in SplitChunksPlugin
Contributing
yarn lockfile is now deduplicated and checked by CI"
182,"Features

add script external type, which allows to load a global from a script tag
allow entry: {} for no entries
allow magic comment in import() for used exports
/* webpackExports: ""default"" */
/* webpackExports: [""named"", ""default""] */
add support for the ""exports"" field in package.json
add resolve.restrictions to restrict the paths a request can resolve to
ModuleFederationPlugin
change defaults to use script as remoteType by default
for module requests in shared (like shared: [""package"", ""package/sub/path""])
this will apply only the references to modules that match this shared module
requiredVersion will be extracted from package.json of the consumer automatically
new packageName option allow to choose the package name for the dependencies lookup (or dev/peer/optionalDependencies)
requiredVersion: false allows to disable this
This means webpack will look for cases in your source code where your are using something like import ""package"". The next package.json for the referencing module is used to determine a requiredVersion. The resolved result will be provided as shared module in the version of the package.json at the resulting location.


for relative requests in shared (like shared: [""./relative/path""])
will resolve relative to context
doesn't depend on usage in the build. Always provided.
do not use a requiredVersion by default. Only when specified or packageName is specified.
This means webpack will resolve the relative request and provide the result as shared module in the version of the next package.json found at the location of the result. All requests resolving to the same file location will consume the shared module without any required version check.


module requests with tailing / in shared (like shared: [""package/""])
will match all module request with this prefix
otherwise behave like normal module requests



Bugfixes

Fix a bug in HMR runtime code that causes a crash with Cannot read property 'hot' of undefined.
","Features
add script external type, which allows to load a global from a script tag
allow entry: {} for no entries
allow magic comment in import() for used exports
/ webpackExports: ""default"" /
/ webpackExports: [""named"", ""default""] /
add support for the ""exports"" field in package.json
add resolve.restrictions to restrict the paths a request can resolve to
ModuleFederationPlugin
change defaults to use script as remoteType by default
for module requests in shared (like shared: [""package"", ""package/sub/path""])
this will apply only the references to modules that match this shared module
requiredVersion will be extracted from package.json of the consumer automatically
new packageName option allow to choose the package name for the dependencies lookup (or dev/peer/optionalDependencies)
requiredVersion: false allows to disable this
This means webpack will look for cases in your source code where your are using something like import ""package"". The next package.json for the referencing module is used to determine a requiredVersion. The resolved result will be provided as shared module in the version of the package.json at the resulting location.
for relative requests in shared (like shared: [""./relative/path""])
will resolve relative to context
doesn't depend on usage in the build. Always provided.
do not use a requiredVersion by default. Only when specified or packageName is specified.
This means webpack will resolve the relative request and provide the result as shared module in the version of the next package.json found at the location of the result. All requests resolving to the same file location will consume the shared module without any required version check.
module requests with tailing / in shared (like shared: [""package/""])
will match all module request with this prefix
otherwise behave like normal module requests
Bugfixes
Fix a bug in HMR runtime code that causes a crash with Cannot read property 'hot' of undefined."
183,"Known Problems

~The transitive move-file dependency requires node >= 10.17, while webpack is intended to be >= 10.13 compatible. This temporary increases the min node version for this beta release until we found a solution to that.~
Fixed, latest patch releases are >= 10.13 compatible

Features

Using module in an ESM no longer needs the whole namespace object
SideEffects flag can follow reexports that are partially dynamic or use a compat default
export * uses more exports info data for better exports
dynamic export * no longer flags the default export as maybe provided
allow module concatenation even when provided exports are unknown, but used exports are known
add promise external, which is like var but awaits the global value in a async module
add import external, which uses import() to load a native ESM
add output.importFunctionName to change the import() to something else, e.g. to a polyfill.
remove some unneeded dependencies
Module Federation
removed scope shortcut object config for container plugins (BREAKING)
add ability to pass advanced options to container plugins
allow to expose an array of modules (similar to entry)
allow to provide an array of remote locations (they act as fallback)
await when a promise is returned by the external
allow to expose an index module which is used when using the remote without subpath
change exposed keys to be prefixed with ./ (BREAKING)
automatically inferred keys do no longer omit leading non-word chars
add version handling to shared modules (see https://github.com/webpack/webpack/pull/10960 for details, BREAKING)

Bugfixes

export default no longer converts function declarations to expressions
inline external type can also provided when using an array external.
fixed a bug in snapshotting that caused changes to be ignored during watching
add missing dependency for correct typings
Persistent Caching
DllPlugin related classes are now serializable
Dates are serializable

Changes

merged all asset processing hooks into a new hook processAssets with stages
Modifications to compilation.asset after sealing are deprecated
","Known Problems
~The transitive move-file dependency requires node >= 10.17, while webpack is intended to be >= 10.13 compatible. This temporary increases the min node version for this beta release until we found a solution to that.~
Fixed, latest patch releases are >= 10.13 compatible
Features
Using module in an ESM no longer needs the whole namespace object
SideEffects flag can follow reexports that are partially dynamic or use a compat default
export * uses more exports info data for better exports
dynamic export * no longer flags the default export as maybe provided
allow module concatenation even when provided exports are unknown, but used exports are known
add promise external, which is like var but awaits the global value in a async module
add import external, which uses import() to load a native ESM
add output.importFunctionName to change the import() to something else, e.g. to a polyfill.
remove some unneeded dependencies
Module Federation
removed scope shortcut object config for container plugins (BREAKING)
add ability to pass advanced options to container plugins
allow to expose an array of modules (similar to entry)
allow to provide an array of remote locations (they act as fallback)
await when a promise is returned by the external
allow to expose an index module which is used when using the remote without subpath
change exposed keys to be prefixed with ./ (BREAKING)
automatically inferred keys do no longer omit leading non-word chars
add version handling to shared modules (see link for details, BREAKING)
Bugfixes
export default no longer converts function declarations to expressions
inline external type can also provided when using an array external.
fixed a bug in snapshotting that caused changes to be ignored during watching
add missing dependency for correct typings
Persistent Caching
DllPlugin related classes are now serializable
Dates are serializable
Changes
merged all asset processing hooks into a new hook processAssets with stages
Modifications to compilation.asset after sealing are deprecated"
184,"Features

added experimental ""Module Federation"" - a way to load modules from separate builds into one application
read more about the concepts here: https://github.com/webpack/changelog-v5/blob/master/guides/module-federation.md
improve error messages when wasm experiments are disabled
expose some webpack options types in typings
added more details to ProgressPlugin

Bugfixes

refactor exports info logic for CommonJs exports
fixes a bug when using an export named default in CommonJs
record chunk id using chunk group name and index in it
fixes a bug when using HMR and split-chunked initial chunk
also set parents in module graph when using non-recursive module creation
fixes crash in harmony dependency when using this.loadModule with imports
force upgrade terser-webpack-plugin for memory leak bugfix
fix small non-monotony in the ProgressPlugin
track runtime modules that need a full hash and calculate it
fixes a bug where main.js is not updated on a HMR update
This caused that all previous HMR updates are applied on reload

Contributing

CI tests node.js 14 instead of 13 now
ignore code coverage for timing dependent code

Full Changelog
Feedback","Features
added experimental ""Module Federation"" - a way to load modules from separate builds into one application
read more about the concepts here: link
improve error messages when wasm experiments are disabled
expose some webpack options types in typings
added more details to ProgressPlugin
Bugfixes
refactor exports info logic for CommonJs exports
fixes a bug when using an export named default in CommonJs
record chunk id using chunk group name and index in it
fixes a bug when using HMR and split-chunked initial chunk
also set parents in module graph when using non-recursive module creation
fixes crash in harmony dependency when using this.loadModule with imports
force upgrade terser-webpack-plugin for memory leak bugfix
fix small non-monotony in the ProgressPlugin
track runtime modules that need a full hash and calculate it
fixes a bug where main.js is not updated on a HMR update
This caused that all previous HMR updates are applied on reload
Contributing
CI tests node.js 14 instead of 13 now
ignore code coverage for timing dependent code
Full Changelog
Feedback"
185,"Breaking Changes

generate and expose typescript typings from webpack

Features

add API to generate and process CLI arguments targeting webpack configuration
add __system_context__ as context from System.js when using System.js as libraryTarget
add module.hot.invalidate() API to trigger an additional hot update of this module
add bigint support for the DefinePlugin
add bigint support for basic evaluations like maths

Bugfixes

fix a ReferenceError: xxx is not defined where some pure expression where not be removed from the code
fix handling of extends in class when class is unused
fix incorrect schema validation for Rule conditions (include, exclude and test are not valid here)
fix some spelling issues
add space between value and unit in output
fix generated code when using the DefinePlugin with -0
Exports from System.js externals behave correctly as ESM now

Improvements

remove some duplication info in seralization
make descriptions in schema more consistent in formating

Internal

add spellcheck to CI

Full Changelog
Feedback","Breaking Changes
generate and expose typescript typings from webpack
Features
add API to generate and process CLI arguments targeting webpack configuration
add system_context as context from System.js when using System.js as libraryTarget
add module.hot.invalidate() API to trigger an additional hot update of this module
add bigint support for the DefinePlugin
add bigint support for basic evaluations like maths
Bugfixes
fix a ReferenceError: xxx is not defined where some pure expression where not be removed from the code
fix handling of extends in class when class is unused
fix incorrect schema validation for Rule conditions (include, exclude and test are not valid here)
fix some spelling issues
add space between value and unit in output
fix generated code when using the DefinePlugin with -0
Exports from System.js externals behave correctly as ESM now
Improvements
remove some duplication info in seralization
make descriptions in schema more consistent in formating
Internal
add spellcheck to CI
Full Changelog
Feedback"
186,"Features

add module.hot.invalidate() to HMR API

Dependencies

push versions for forced security updates
","Features
add module.hot.invalidate() to HMR API
Dependencies
push versions for forced security updates"
187,"Bugfixes

update webassemblyjs dependencies for instruction update
update mkdirp dependency for security reasons
","Bugfixes
update webassemblyjs dependencies for instruction update
update mkdirp dependency for security reasons"
188,"Changes

optimization.sideEffects, optimization.innerGraph and optimization.usedExports are on by default now (only production before)
Motivation: less difference between prod and dev builds, getting sideEffects benefits in dev mode.
EnvironmentPlugin shows an error now when referenced env variable is missing and has no fallback
Motivation: Builds should fail when an expected env variable is missing
Remove serve property from schema
Motivation: No longer needed, as this has move to a plugin
merge all library related options into output.library
output.library: { type, name, export, auxiliaryComment, umdNamedDefine }
old options are still possible, but no longer recommended
Motivation: more clear structure, easier sharing with library in the entry option

Features

Allow a entry description object for advanced entrypoint configuration
entry: { main: { ... } }
import: list of modules
filename: custom filename template
Using output.chunkFilename is no longer recommended and only output.filename should be used now


dependOn: list of other entrypoint which are expected to be available on page
library: library exposing
add percentBy option to ProgressPlugin to change percent calculation
DefinePlugin supports arrays directly now
sync wasm support v128 now
Update PnP support to pnp version 3 (yarn berry)
add output.uniqueName option
defaults to the package.json name in the current directory
affects globals used for chunk communication e. g. output.jsonpFunction

DX

Make Compiler/Compilation.cache property read-only to make it easier to fix compat issues
ProgressPlugin stores and restores counts from last build to persistent cache for better progress calculation
Add Did you mean to error message for some common configuration mistakes

Bugfixes

fix infinite loop when using export * in a circular way
CLI has non-zero exit code when stdin is not available to ask for webpack-cli installation
hoist exports in concatenated modules
fixes bug with circular dependencies with non-concatenated modules
generate valid syntax for the injected error code when modules are not found

Refactoring

Internal refactoring of the inner graph API
The way the default webpack configuration is created has been refactored
New process: 1. configuration is normalized, 2. Plugins are applied, 3. configuration defaults are set
This allows plugins to apply their own configuration defaults.
This allows to write Configuration Preset Plugins.
refactor the way library exposing is handled

Performance

Increase the time logging of the core when using verbose logging
Performance improvements
Chunk Graph
Persistent Caching
SplitChunks
Chunk

Full Changelog
Feedback","Changes
optimization.sideEffects, optimization.innerGraph and optimization.usedExports are on by default now (only production before)
Motivation: less difference between prod and dev builds, getting sideEffects benefits in dev mode.
EnvironmentPlugin shows an error now when referenced env variable is missing and has no fallback
Motivation: Builds should fail when an expected env variable is missing
Remove serve property from schema
Motivation: No longer needed, as this has move to a plugin
merge all library related options into output.library
output.library: { type, name, export, auxiliaryComment, umdNamedDefine }
old options are still possible, but no longer recommended
Motivation: more clear structure, easier sharing with library in the entry option
Features
Allow a entry description object for advanced entrypoint configuration
entry: { main: { ... } }
import: list of modules
filename: custom filename template
Using output.chunkFilename is no longer recommended and only output.filename should be used now
dependOn: list of other entrypoint which are expected to be available on page
library: library exposing
add percentBy option to ProgressPlugin to change percent calculation
DefinePlugin supports arrays directly now
sync wasm support v128 now
Update PnP support to pnp version 3 (yarn berry)
add output.uniqueName option
defaults to the package.json name in the current directory
affects globals used for chunk communication e. g. output.jsonpFunction
DX
Make Compiler/Compilation.cache property read-only to make it easier to fix compat issues
ProgressPlugin stores and restores counts from last build to persistent cache for better progress calculation
Add Did you mean to error message for some common configuration mistakes
Bugfixes
fix infinite loop when using export * in a circular way
CLI has non-zero exit code when stdin is not available to ask for webpack-cli installation
hoist exports in concatenated modules
fixes bug with circular dependencies with non-concatenated modules
generate valid syntax for the injected error code when modules are not found
Refactoring
Internal refactoring of the inner graph API
The way the default webpack configuration is created has been refactored
New process: 1. configuration is normalized, 2. Plugins are applied, 3. configuration defaults are set
This allows plugins to apply their own configuration defaults.
This allows to write Configuration Preset Plugins.
refactor the way library exposing is handled
Performance
Increase the time logging of the core when using verbose logging
Performance improvements
Chunk Graph
Persistent Caching
SplitChunks
Chunk
Full Changelog
Feedback"
189,"Bugfixes

Disable constant replacements in ""use asm"" scope
Update schema to disallow functions for output.hotUpdateChunkFilename as this doesn't work
Hoist exports in concatenated module to handle circular references with non-concatenated modules correctly
Flag all modules as used in DLLs to fix missing exports
","Bugfixes
Disable constant replacements in ""use asm"" scope
Update schema to disallow functions for output.hotUpdateChunkFilename as this doesn't work
Hoist exports in concatenated module to handle circular references with non-concatenated modules correctly
Flag all modules as used in DLLs to fix missing exports"
190,"Bugfixes

Windows network paths are considered as absolute paths
fix hanging of FlagDependencyExportsPlugin when using export * in a circular matter
","Bugfixes
Windows network paths are considered as absolute paths
fix hanging of FlagDependencyExportsPlugin when using export * in a circular matter"
191,"Features

this.getOptions in loader context
optionally takes a schema for validation
see https://github.com/webpack/webpack/pull/10017 for more information
Persistent Cache storage has been improved
Multiple files instead of one big file. Separate files are created when cache items are unused or unchanged, while trying to keep each file > 1MB
generator.filename support for type: ""asset""/""asset/resource""

Bugfixes

fix ident handling for Rule.options
fix handling of watchOptions.aggregateTimeout: 0
fix default for output.hotUpdatefunction/jsonpFunction/chunkCallbackName when output.library is an array
fix target: ""node"" chunk loading when output files are in different folders
disable constant evaluation in ""use asm"" code
fix bug with variable renaming in concatenated modules introduced in 5.0.0-beta.11

Full Changelog
Feedback","Features
this.getOptions in loader context
optionally takes a schema for validation
see link for more information
Persistent Cache storage has been improved
Multiple files instead of one big file. Separate files are created when cache items are unused or unchanged, while trying to keep each file > 1MB
generator.filename support for type: ""asset""/""asset/resource""
Bugfixes
fix ident handling for Rule.options
fix handling of watchOptions.aggregateTimeout: 0
fix default for output.hotUpdatefunction/jsonpFunction/chunkCallbackName when output.library is an array
fix target: ""node"" chunk loading when output files are in different folders
disable constant evaluation in ""use asm"" code
fix bug with variable renaming in concatenated modules introduced in 5.0.0-beta.11
Full Changelog
Feedback"
192,"Bugfixes

handled sourceRoot in SourceMaps from modules/loaders
make order of exports in hashing deterministic to fix a hash change on recompilation
generate async module code correctly even when no await is used, but other async module is imported
flag all modules as used when using DllPlugin with entryOnly: false
fix a race condition in the persistent cache where the cache file is persisted twice in parallel
upgrade watchpack for incorrectly emitted change events and wrong timestamps
fix string/number formatting inconsistency in HMR output files
/*#__PURE__*/ is applied to function calls when doing innerGraph analysis

Changes

change the default of entryOnly of the DllPlugin to true
remove special request shortening logic and use single relative paths for readable module names

Features

allow webpack:// urls in SourceMaps to provided paths relative to webpack root context
show all possible exports in the warning/error when export was not found or name is incorrect
treat sequence expression, function and class expressions as pure for innerGraph analysis

Full Changelog
Feedback","Bugfixes
handled sourceRoot in SourceMaps from modules/loaders
make order of exports in hashing deterministic to fix a hash change on recompilation
generate async module code correctly even when no await is used, but other async module is imported
flag all modules as used when using DllPlugin with entryOnly: false
fix a race condition in the persistent cache where the cache file is persisted twice in parallel
upgrade watchpack for incorrectly emitted change events and wrong timestamps
fix string/number formatting inconsistency in HMR output files
/#PURE/ is applied to function calls when doing innerGraph analysis
Changes
change the default of entryOnly of the DllPlugin to true
remove special request shortening logic and use single relative paths for readable module names
Features
allow webpack:// urls in SourceMaps to provided paths relative to webpack root context
show all possible exports in the warning/error when export was not found or name is incorrect
treat sequence expression, function and class expressions as pure for innerGraph analysis
Full Changelog
Feedback"
193,"Bugfixes

handle relative paths with webpack:// prefix in SourceMaps correctly
fixes a non-determinism about providedExports with export * which caused changing module hashes and unnecessary HMR invalidation
","Bugfixes
handle relative paths with webpack:// prefix in SourceMaps correctly
fixes a non-determinism about providedExports with export * which caused changing module hashes and unnecessary HMR invalidation"
194,"Bugfixes

show error when mimetype is missing for type: ""asset""
fix parsing of requires with nesting require(""x"").fn(require(""x""))

Improvements

rename symbols less often in concatenated modules

Full Changelog
Feedback","Bugfixes
show error when mimetype is missing for type: ""asset""
fix parsing of requires with nesting require(""x"").fn(require(""x""))
Improvements
rename symbols less often in concatenated modules
Full Changelog
Feedback"
195,"Features

Concatented modules are persistent cacheable now
add an explanation comment to eval-based devtools about readablilty of output files
improved profiling mode of progress to display timings per plugin and substep

Bugfixes

fix a no ChunkGraph assigned crash when using HMR and the mini-css-extract-plugin
bailout inner graph optimization when a module uses eval()
detect a cycle in this.loadModule and show error in this case
allow mangle even if object prototype export names are used
prevent mangling for object prototype export names in CommonJS
only treat Object.defineProperty for top-level this as export
replace Object.defineProperty correctly when value is in brakets

Performance

add in-memory cache for wrapper code of module factories

Deprecations

deprecate using string loader option in config
prefer passing an object to options

Internal

refactor prefetch/preload logic into separate plugin to be reusable for other module types

Full Changelog
Feedback","Features
Concatented modules are persistent cacheable now
add an explanation comment to eval-based devtools about readablilty of output files
improved profiling mode of progress to display timings per plugin and substep
Bugfixes
fix a no ChunkGraph assigned crash when using HMR and the mini-css-extract-plugin
bailout inner graph optimization when a module uses eval()
detect a cycle in this.loadModule and show error in this case
allow mangle even if object prototype export names are used
prevent mangling for object prototype export names in CommonJS
only treat Object.defineProperty for top-level this as export
replace Object.defineProperty correctly when value is in brakets
Performance
add in-memory cache for wrapper code of module factories
Deprecations
deprecate using string loader option in config
prefer passing an object to options
Internal
refactor prefetch/preload logic into separate plugin to be reusable for other module types
Full Changelog
Feedback"
196,"Bugfixes

fix case where __webpack_require__.e is not a function when using module concatenation
fix incorrect imported module when using sideEffects in a certain constellation of export names

Performance

lazy-require Webassembly related modules for improved startup performance
","Bugfixes
fix case where webpack_require.e is not a function when using module concatenation
fix incorrect imported module when using sideEffects in a certain constellation of export names
Performance
lazy-require Webassembly related modules for improved startup performance"
197,"Security

force upgrade terser-webpack-plugin dependency for security fix (not affecting webpack)

Funding

add npm funding field to package.json
","Security
force upgrade terser-webpack-plugin dependency for security fix (not affecting webpack)
Funding
add npm funding field to package.json"
198,"Features

add Tree Shaking for some CommonJS constructs

Refactoring

split logic from exportType: ""default"" into separate defaultObject: true|false|""redirect""|""redirect-warn"" property
unhandled calls in parser fall back to expression of call context instead of called function

Full Changelog
Feedback","Features
add Tree Shaking for some CommonJS constructs
Refactoring
split logic from exportType: ""default"" into separate defaultObject: true|false|""redirect""|""redirect-warn"" property
unhandled calls in parser fall back to expression of call context instead of called function
Full Changelog
Feedback"
199,"Features

add parser.parse option for json module type

Asset experiment

add module types asset asset/resource asset/inline asset/source
add parser.dataUrlCondition option
add generator.dataUrl option

Bugfixes

resolving from loader context will add resolve dependencies to module dependencies
fix schema for resolve.plugins

Improvements

use arrow functions for runtime modules when possible
add hasOwnProperty helper function to runtime to reduce size of other runtime code

Full Changelog
Feedback","Features
add parser.parse option for json module type
Asset experiment
add module types asset asset/resource asset/inline asset/source
add parser.dataUrlCondition option
add generator.dataUrl option
Bugfixes
resolving from loader context will add resolve dependencies to module dependencies
fix schema for resolve.plugins
Improvements
use arrow functions for runtime modules when possible
add hasOwnProperty helper function to runtime to reduce size of other runtime code
Full Changelog
Feedback"
200,"Features

add deprecation codes to all deprecations
add Compiler.modifiedFiles with a Set of all modified files in this watchRun
upgrade watchpack

Bugfixes

enable chunk reuse of defaultVendors to allow webpackChunkName for vendor-only chunks
fix a missing runtime requirement when using top level await without exports
fix missing newlines for stats.errorDetails and stats.errorStacks
fix a crash in webpack-sources accessing mappings of null (Persistent Cache)

Changes

Multiple assets emit different content to the same filename is an error now
parser and generator options are no longer stringified, but parser and generators are cached based on option identity instead
in strict ESM modules JSON modules have no longer named exports

Refactoring

rename exportsType = ""named"" to exportsType = ""default""
","Features
add deprecation codes to all deprecations
add Compiler.modifiedFiles with a Set of all modified files in this watchRun
upgrade watchpack
Bugfixes
enable chunk reuse of defaultVendors to allow webpackChunkName for vendor-only chunks
fix a missing runtime requirement when using top level await without exports
fix missing newlines for stats.errorDetails and stats.errorStacks
fix a crash in webpack-sources accessing mappings of null (Persistent Cache)
Changes
Multiple assets emit different content to the same filename is an error now
parser and generator options are no longer stringified, but parser and generators are cached based on option identity instead
in strict ESM modules JSON modules have no longer named exports
Refactoring
rename exportsType = ""named"" to exportsType = ""default"""
201,"Bugfixes

fixes non-deterministic order of entry modules in hashing
fixed snapshotting of directories
fix logging of FileSystemInfo for multiple different invalidation reasons
include runtime modules in chunk hash

Performance

improve snapshot size of missingDependencies
move restored data for provided exports in new class

Full Changelog
Feedback","Bugfixes
fixes non-deterministic order of entry modules in hashing
fixed snapshotting of directories
fix logging of FileSystemInfo for multiple different invalidation reasons
include runtime modules in chunk hash
Performance
improve snapshot size of missingDependencies
move restored data for provided exports in new class
Full Changelog
Feedback"
202,"Performance

Fixes incorrectly inverted logic for cacheWithContext in ResolverCachePlugin

Persistent Caching

use array instead of map to lookup deserializer in ObjectMiddleware
More compact serialization for ReplaceSources with many replacements
webpack-sources ConcatSource uses Buffers for SourceMaps string

Full Changelog
Feedback","Performance
Fixes incorrectly inverted logic for cacheWithContext in ResolverCachePlugin
Persistent Caching
use array instead of map to lookup deserializer in ObjectMiddleware
More compact serialization for ReplaceSources with many replacements
webpack-sources ConcatSource uses Buffers for SourceMaps string
Full Changelog
Feedback"
203,"Features

add dependencies to ProgressPlugin, enabled by default
add support for npm fund

Persistent Caching

make SourceMap and source names in NormalModule context-independent
upgrade webpack-sources
use only public methods for serialization
add caching support for SourceMapDevToolPlugin (all non eval based source-map devtools)

Bugfixes

different resolve options are not cached separately
fix throttling of ProgressPlugin output

Performance

resolver cache respects resolve.cacheWithContext now, which defaults to false
merge concurrent resolve request in cache
newly created file system snapshots are considered as valid now
avoid creating arrays in ModuleGraph getConnections
allocate lazily:
ModuleGraphConnection.explanations
ChunkGraphModule.entryInChunks, ChunkGraphModule.runtimeInChunks
Module.warnings, Module.errors
NormalModule._sourceSizes, NormalModule.presentationalDependencies
Module.factoryMeta
ModuleGraphModule.outgoingConnections
omit unneeded process.nextTicks
remove return value of ChunkGraph.connectChunkAndModule to skip check
upgrade webpack-sources
cache utf-8 to buffer conversions and reverse
cache string to json conversions and reverse
ProgressPlugin
fix throttling of output
AsyncQueue
use setImmediate instead of process.nextTick to schedule the next task
This keeps event loop spinning and improved build speed


hoist some expressions/RegExps

Persistent Caching

nested plain object are (de)serialize in one pass
print warning when big strings are serialized
upgrade webpack-sources
avoid serializing strings, prefer Buffers
allow lazy stringified etags for identity check for memory cache

Full Changelog
Feedback","Features
add dependencies to ProgressPlugin, enabled by default
add support for npm fund
Persistent Caching
make SourceMap and source names in NormalModule context-independent
upgrade webpack-sources
use only public methods for serialization
add caching support for SourceMapDevToolPlugin (all non eval based source-map devtools)
Bugfixes
different resolve options are not cached separately
fix throttling of ProgressPlugin output
Performance
resolver cache respects resolve.cacheWithContext now, which defaults to false
merge concurrent resolve request in cache
newly created file system snapshots are considered as valid now
avoid creating arrays in ModuleGraph getConnections
allocate lazily:
ModuleGraphConnection.explanations
ChunkGraphModule.entryInChunks, ChunkGraphModule.runtimeInChunks
Module.warnings, Module.errors
NormalModule._sourceSizes, NormalModule.presentationalDependencies
Module.factoryMeta
ModuleGraphModule.outgoingConnections
omit unneeded process.nextTicks
remove return value of ChunkGraph.connectChunkAndModule to skip check
upgrade webpack-sources
cache utf-8 to buffer conversions and reverse
cache string to json conversions and reverse
ProgressPlugin
fix throttling of output
AsyncQueue
use setImmediate instead of process.nextTick to schedule the next task
This keeps event loop spinning and improved build speed
hoist some expressions/RegExps
Persistent Caching
nested plain object are (de)serialize in one pass
print warning when big strings are serialized
upgrade webpack-sources
avoid serializing strings, prefer Buffers
allow lazy stringified etags for identity check for memory cache
Full Changelog
Feedback"
204,"Features

(deep) keys in JSON modules can be mangled by the optimization.mangleExports
unused (deep) keys in JSON modules can be droped by the optimization.usedExports
skip writing output files to disk when they already exist
Logger.getChildLogger added

Bugfixes

Reexporting exports from JSON modules works correctly now
directory listing is correctly invalidated on watch change now (enhanced-resolve)
fix WatchIgnorePlugin (but it's still deprecated)

Logging

FileSystemInfo log warnings, errors and the first 40 paths that contribute to invalid snapshots

Performance

faster serialization when working with deserialized data
faster emitting when files already exist on disk
lazy dependency tracking in resolver
less memory usage in snapshot validation

Full Changelog
Feedback","Features
(deep) keys in JSON modules can be mangled by the optimization.mangleExports
unused (deep) keys in JSON modules can be droped by the optimization.usedExports
skip writing output files to disk when they already exist
Logger.getChildLogger added
Bugfixes
Reexporting exports from JSON modules works correctly now
directory listing is correctly invalidated on watch change now (enhanced-resolve)
fix WatchIgnorePlugin (but it's still deprecated)
Logging
FileSystemInfo log warnings, errors and the first 40 paths that contribute to invalid snapshots
Performance
faster serialization when working with deserialized data
faster emitting when files already exist on disk
lazy dependency tracking in resolver
less memory usage in snapshot validation
Full Changelog
Feedback"
205,"Performance

Cache validated snapshots
Join concurrent snapshot validation requests
deduplicate Sets in LazySet before merging
avoid iterating dependencies, iterate connections in the ModuleGraph instead
add some inline cached for Map access
upgrade watchpack for performance improvements
avoid calling getDependencyReference, instead split method into parts and use them on demand
enabled/disabled -> connections in ModuleGraph can be conditional
It's also great because it's visible in the stats


getModule -> ModuleGraphConnection.module
importedNames -> getReferencedExports()
weak -> Dependency.weak
order -> HarmonyImportDependency.sourceOrder
differ between normal dependencies and cheaper presentational dependencies which are only used for templating and ignored otherwise
call isOptional only when there are errors

Bugfixes

fix crash on Watcher.invalidate
fix problem with retrying import() after it the promise was rejected
make RequireIncludeDeprecationWarning serialize-able
fix a bug which failed identifiers to be imported when the free name is already taken by webpack

Full Changelog
Feedback","Performance
Cache validated snapshots
Join concurrent snapshot validation requests
deduplicate Sets in LazySet before merging
avoid iterating dependencies, iterate connections in the ModuleGraph instead
add some inline cached for Map access
upgrade watchpack for performance improvements
avoid calling getDependencyReference, instead split method into parts and use them on demand
enabled/disabled -> connections in ModuleGraph can be conditional
It's also great because it's visible in the stats
getModule -> ModuleGraphConnection.module
importedNames -> getReferencedExports()
weak -> Dependency.weak
order -> HarmonyImportDependency.sourceOrder
differ between normal dependencies and cheaper presentational dependencies which are only used for templating and ignored otherwise
call isOptional only when there are errors
Bugfixes
fix crash on Watcher.invalidate
fix problem with retrying import() after it the promise was rejected
make RequireIncludeDeprecationWarning serialize-able
fix a bug which failed identifiers to be imported when the free name is already taken by webpack
Full Changelog
Feedback"
206,"Changes

hide webpack-internal stack trace of errors in stats by default
devtool is stricter and supports only this format (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map)
remove unused minChunkSize from LimitChunkCountPlugin
increase minimium node.js version to 10.13.0 (LTS)
deprecate require.include and emit a warning when used
can be changed with parser.requireInclude

Features

new stats.errorStack option to display webpack-internal stack trace of errors
optimize module order in chunks for better gzip
omit trailing whitespace in BannerPlugin
upgrade to terser-webpack-plugin v2
no deprecation warnings

Bugfixes

fix unparsed expression when evaluating String.concat

Performance

lazy require webassembly libraries only when wasm is used

Removals

removed all possible values from cache.store option, only supporting pack mode

Contributing

reorganize from javascript related files into sub-directory
webpack.JavascriptModulesPlugins -> webpack.javascript.JavascriptModulesPlugins
update dependencies for development

Full Changelog
Feedback","Changes
hide webpack-internal stack trace of errors in stats by default
devtool is stricter and supports only this format (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map)
remove unused minChunkSize from LimitChunkCountPlugin
increase minimium node.js version to 10.13.0 (LTS)
deprecate require.include and emit a warning when used
can be changed with parser.requireInclude
Features
new stats.errorStack option to display webpack-internal stack trace of errors
optimize module order in chunks for better gzip
omit trailing whitespace in BannerPlugin
upgrade to terser-webpack-plugin v2
no deprecation warnings
Bugfixes
fix unparsed expression when evaluating String.concat
Performance
lazy require webassembly libraries only when wasm is used
Removals
removed all possible values from cache.store option, only supporting pack mode
Contributing
reorganize from javascript related files into sub-directory
webpack.JavascriptModulesPlugins -> webpack.javascript.JavascriptModulesPlugins
update dependencies for development
Full Changelog
Feedback"
207,"Bugfixes

fix issue with invalide timezone
","Bugfixes
fix issue with invalide timezone"
208,"First beta version. :tada:
Please see feedback issue here: https://github.com/webpack/webpack/issues/9802","First beta version. :tada:
Please see feedback issue here: link"
209,"Features

output.ecmaVersion can be 5 - 11 or 2009 - 2020
avoid dynamic require in serialization
","Features
output.ecmaVersion can be 5 - 11 or 2009 - 2020
avoid dynamic require in serialization"
210,"Bugfixes

fix incorrect request shortening when directory looks similar to parent directory
fix crash when timezone is unknown
","Bugfixes
fix incorrect request shortening when directory looks similar to parent directory
fix crash when timezone is unknown"
211,"(based on 4.41.0)
Deprecation
Main/Chunk/ModuleTemplate deprecation
Bundle templating has been refactored. MainTemplate/ChunkTemplate/ModuleTemplate were deprecated and the JavascriptModulesPlugin takes care of JS templating now.
Before that refactoring JS output was handled by Main/ChunkTemplate while other output (i. e. WASM, CSS) was handled by plugins. This looks like JS is first class, while other output is second class. The refactoring changes that and all output is handled by their plugins.
It's still possible to hook into parts of the templating. The hooks are in JavascriptModulesPlugin instead of Main/ChunkTemplate now. (Yes plugins can have hooks too. I call them attached hooks.)
There is a compat-layer, so Main/Chunk/ModuleTemplate still exist, but only delegate tap calls to the new hook locations.
Features
Entry inlining
Instead of starting bundle execution when a require call, webpack can inline the code of the entrypoint under some conditions now. This means execution starts directly with the first module. This module is inlined into the bundle without module wrapper function.
Runtime-less
The new RuntimeModule architecture allows to add runtime code only when needed. This release reaches a final milestone for this. All runtime code is correctly flagged and only added when needed. This means under some conditions, when no runtime code is needed, we can generate a bundle without runtime (example). In other cases we generate very small runtimes.
Output as module
(experimental: experiments.outputModule: true)
A new option output.module allows to generate output files in a way that <script type=""module""> is used. This has multiple effects:

Lazy-loaded chunks are loaded with <script type=""module""> too (output.jsonpScriptType: ""module"")
All modules are in strict mode
The IIFE used for scope isolation is omitted (output.iife: false)
The default terser config respects that

In future this also means:

exports from the entrypoint are exposed when imported (output.libraryTarget: ""module"")
externals can used import to import another module

Other Features

The default terser inherits output.terserVersion
Code Generation is a separate Compilation phase now
Better progress reporting
Module.source() and Module.getRuntimeRequirements() are deprecated in favor of Module.codeGeneration()
stats.ids has been added
Defaults to false when stats.toString() is used
This means module and chunk ids are hidden by default in stats output to make it more user friendly
stats.chunkModulesSort stats.chunkRootModulesSort stats.nestedModulesSort has been added to sort the different module lists
stats.modulesSort is ""depth"" by default now
stats.chunkModulesSort is ""name"" by default now
stats.chunkRootModulesSort is ""name"" by default now
stats.nestedModulesSort is false by default now
stats.children is false for toString() by default now
added chunk.idHints asset.chunkIdHints asset.auxiliaryChunkIdHints to stats json
show chunk id hints in stats string output
ProgressPlugin doesn't show active module count by default now

Full Changelog
Feedback","(based on 4.41.0)
Deprecation
Main/Chunk/ModuleTemplate deprecation
Bundle templating has been refactored. MainTemplate/ChunkTemplate/ModuleTemplate were deprecated and the JavascriptModulesPlugin takes care of JS templating now.
Before that refactoring JS output was handled by Main/ChunkTemplate while other output (i. e. WASM, CSS) was handled by plugins. This looks like JS is first class, while other output is second class. The refactoring changes that and all output is handled by their plugins.
It's still possible to hook into parts of the templating. The hooks are in JavascriptModulesPlugin instead of Main/ChunkTemplate now. (Yes plugins can have hooks too. I call them attached hooks.)
There is a compat-layer, so Main/Chunk/ModuleTemplate still exist, but only delegate tap calls to the new hook locations.
Features
Entry inlining
Instead of starting bundle execution when a require call, webpack can inline the code of the entrypoint under some conditions now. This means execution starts directly with the first module. This module is inlined into the bundle without module wrapper function.
Runtime-less
The new RuntimeModule architecture allows to add runtime code only when needed. This release reaches a final milestone for this. All runtime code is correctly flagged and only added when needed. This means under some conditions, when no runtime code is needed, we can generate a bundle without runtime (example). In other cases we generate very small runtimes.
Output as module
(experimental: experiments.outputModule: true)
A new option output.module allows to generate output files in a way that "
212,"(based on 4.41.0)
Bugfixes

fixes handling of circular references in modules in Tree Shaking (optimization.innerGraph)
fixes compat issue with some plugins which change module._source after module as been already parsed

Full Changelog
Feedback","(based on 4.41.0)
Bugfixes
fixes handling of circular references in modules in Tree Shaking (optimization.innerGraph)
fixes compat issue with some plugins which change module._source after module as been already parsed
Full Changelog
Feedback"
213,"(based on 4.41.0)
Bugfixes

fixes handling of circular references in modules in Tree Shaking (optimization.innerGraph)

Full Changelog
Feedback","(based on 4.41.0)
Bugfixes
fixes handling of circular references in modules in Tree Shaking (optimization.innerGraph)
Full Changelog
Feedback"
214,"(based on 4.41.0)
Compatibility

add a lot of checks, compat-layers and deprecated methods to allow mini-css-extract-plugin work unmodified

Full Changelog
Feedback","(based on 4.41.0)
Compatibility
add a lot of checks, compat-layers and deprecated methods to allow mini-css-extract-plugin work unmodified
Full Changelog
Feedback"
215,"(based on 4.40.3)
Changes

The assetEmitted hook has different arguments now.
The second argument is an object containing multiple information now { content: Buffer, source: Source, compilation: Compilation, outputPath: string, targetPath: string }
SourceMapDevToolPlugin applies to non-chunk assets too now
SourceMaps are flags as auxiliary files

Full Changelog
Feedback","(based on 4.40.3)
Changes
The assetEmitted hook has different arguments now.
The second argument is an object containing multiple information now { content: Buffer, source: Source, compilation: Compilation, outputPath: string, targetPath: string }
SourceMapDevToolPlugin applies to non-chunk assets too now
SourceMaps are flags as auxiliary files
Full Changelog
Feedback"
216,"Developer Experience

disallow cache group named test with shorthand syntax to point out a potential config error

Performance

Improve performance of LimitChunkCountPlugin
","Developer Experience
disallow cache group named test with shorthand syntax to point out a potential config error
Performance
Improve performance of LimitChunkCountPlugin"
217,"Bugfixes

fix a bug that the HMR plugin affected child compilations

Performance

improve performance of splitChunks name option by caching hashed value
improve rebuild performance by caching module size computation
","Bugfixes
fix a bug that the HMR plugin affected child compilations
Performance
improve performance of splitChunks name option by caching hashed value
improve rebuild performance by caching module size computation"
218,"Bugfixes

fix a bug where asset is undefined
","Bugfixes
fix a bug where asset is undefined"
219,"Bugfixes

convert ""multiple assets emit to the same filename"" error into a warning
compare asset content when multiple assets emit to the same filename
","Bugfixes
convert ""multiple assets emit to the same filename"" error into a warning
compare asset content when multiple assets emit to the same filename"
220,"Features

adds asset info for emitted assets
new methods allow easy emitting/updating of assets compilation.emitAsset/updateAsset (instead of accessing the Object compilation.assets)
new getter methods to get assets compilation.getAssets() and compilation.getAsset(name)
3 flags in asset info:
immutable: when set an asset can be cache infinitely
development: when set an asset is some kind of development tool (i. e. a SourceMap)
hotModuleReplacement: when set an asset is generated for an hot update


Stats expose info object in assets
String version of Stats show flags
","Features
adds asset info for emitted assets
new methods allow easy emitting/updating of assets compilation.emitAsset/updateAsset (instead of accessing the Object compilation.assets)
new getter methods to get assets compilation.getAssets() and compilation.getAsset(name)
3 flags in asset info:
immutable: when set an asset can be cache infinitely
development: when set an asset is some kind of development tool (i. e. a SourceMap)
hotModuleReplacement: when set an asset is generated for an hot update
Stats expose info object in assets
String version of Stats show flags"
221,"(based on 4.39.3)
Bugfixes

fix a bug where unused pure expression was inserted into dead branches and caused invalid code
fix crash where hash was updated with null value during build dependencies handling
fix error probagation in context hash and timestamping
fix a bug where hidden files in node_modules where incorrectly threated as modules (i. e. .yarn-integrity)
fix error handling of managed items on *nix systems
fix scope handling of try-catch-finally statements
fix bug where global identifiers where threated as pure expression (they could cause a ""not defined"" error)

Full Changelog
Feedback","(based on 4.39.3)
Bugfixes
fix a bug where unused pure expression was inserted into dead branches and caused invalid code
fix crash where hash was updated with null value during build dependencies handling
fix error probagation in context hash and timestamping
fix a bug where hidden files in node_modules where incorrectly threated as modules (i. e. .yarn-integrity)
fix error handling of managed items on *nix systems
fix scope handling of try-catch-finally statements
fix bug where global identifiers where threated as pure expression (they could cause a ""not defined"" error)
Full Changelog
Feedback"
222,"(based on 4.39.3)
Bugfixes

fix a bug with the new scope analysis and side-effect-free modules

Full Changelog
Feedback","(based on 4.39.3)
Bugfixes
fix a bug with the new scope analysis and side-effect-free modules
Full Changelog
Feedback"
223,"(based on 4.39.3)
Features

""Deep Scope Analysis"": top level symbols are now tracked in modules when optimization.innerGraph is on (it's on by default in production mode)
This allows to track export usage through modules and will flag more exports as unused, reducing bundle size
The following constructs are supported:
function and class declarations
var/let/const declarations of function, arrow function or class expressions
var/let/const declarations of expressions annotated with /*#__PURE__*/
var/let/const declarations of simple pure expressions like identifiers or literals


add support for timestamping of directories
add __webpack_exports_info__.usedExports to get a list of used exports (mainly of testing)
ContextModules are now serializable/cache-able

Bugfixes

fix an incorrect output in concatenated modules with unused exports
fix crash in Persistent Caching when no build snapshot was stored

Full Changelog
Feedback","(based on 4.39.3)
Features
""Deep Scope Analysis"": top level symbols are now tracked in modules when optimization.innerGraph is on (it's on by default in production mode)
This allows to track export usage through modules and will flag more exports as unused, reducing bundle size
The following constructs are supported:
function and class declarations
var/let/const declarations of function, arrow function or class expressions
var/let/const declarations of expressions annotated with /#PURE/
var/let/const declarations of simple pure expressions like identifiers or literals
add support for timestamping of directories
add webpack_exports_info.usedExports to get a list of used exports (mainly of testing)
ContextModules are now serializable/cache-able
Bugfixes
fix an incorrect output in concatenated modules with unused exports
fix crash in Persistent Caching when no build snapshot was stored
Full Changelog
Feedback"
224,"(based on 4.39.3)
Features

add option output.ecmaVersion to specify level of generated code emitted by webpack
By using arrow functions we can emit smaller code, i. e. for exports
By using const variables we can emit more correct code for export default

Changes

(BREAKING) changed default of output.ecmaVersion from implict 5 to 2015
This might be incompatible with some older browser.
If you need support for these browser use output.ecmaVersion: 5.

Full Changelog
Feedback","(based on 4.39.3)
Features
add option output.ecmaVersion to specify level of generated code emitted by webpack
By using arrow functions we can emit smaller code, i. e. for exports
By using const variables we can emit more correct code for export default
Changes
(BREAKING) changed default of output.ecmaVersion from implict 5 to 2015
This might be incompatible with some older browser.
If you need support for these browser use output.ecmaVersion: 5.
Full Changelog
Feedback"
225,"Bugfixes

fix a missing module in chunk caused by incorrect chunk graph generation of async chunks
","Bugfixes
fix a missing module in chunk caused by incorrect chunk graph generation of async chunks"
226,"(based on 4.39.2)
Improvements

Improve ASI detection to avoid Object(...) in favor of (0,...)
This improves bundles size
Merge multiple exports via __webpack_require__.d into a single statement
This improves bundles size

Full Changelog
Feedback","(based on 4.39.2)
Improvements
Improve ASI detection to avoid Object(...) in favor of (0,...)
This improves bundles size
Merge multiple exports via webpack_require.d into a single statement
This improves bundles size
Full Changelog
Feedback"
227,"(based on 4.39.2)
Features

Upgrade to acorn 7
Persistent Caching
track dependencies while resolving build dependencies to snapshot them
when build dependencies resolving snapshot is invalid, re-resolve build dependencies to see if something changed
new option cache.immutablePaths, similar to cache.managedPaths but assumes that existing content of this folder never changes. Defaults to yarn cache when PnP is used.
cache.cacheDirectory defaults to node_modules/.cache/webpack when package.json exists somewhere above cwd, .pnp/.cache/webpack when .pnp.js exists, .cache/webpack otherwise.
add __webpack_exports_info__ module API

Bugfixes

fix a bug where external default imports in concatenated modules where incorrectly generated
improve usage/provision info for nested exports

Full Changelog
Feedback","(based on 4.39.2)
Features
Upgrade to acorn 7
Persistent Caching
track dependencies while resolving build dependencies to snapshot them
when build dependencies resolving snapshot is invalid, re-resolve build dependencies to see if something changed
new option cache.immutablePaths, similar to cache.managedPaths but assumes that existing content of this folder never changes. Defaults to yarn cache when PnP is used.
cache.cacheDirectory defaults to node_modules/.cache/webpack when package.json exists somewhere above cwd, .pnp/.cache/webpack when .pnp.js exists, .cache/webpack otherwise.
add webpack_exports_info module API
Bugfixes
fix a bug where external default imports in concatenated modules where incorrectly generated
improve usage/provision info for nested exports
Full Changelog
Feedback"
228,"(based on 4.39.2)
Performance

Compilation/NormalModuleFactory.file/context/missingDependencies are now LazySets
Performance improvements in deserialization
Performance improvements in module graph building

Features

add cache.managedPaths. It is an array of package-manager only managed paths. webpack will avoid hashing/timestamping them, assume the version is unique and will use this as snapshot (for both memory and filesystem cache).
These must be node_modules directories.
cache.managedPaths defaults to the node_modules directory webpack is inside of.
add cache.buildDependencies. It is an object of arrays of additional code dependencies of the build. webpack will use an hash of these items and all dependencies to invalidate the filesystem cache.
cache.buildDependencies.defaultWebpack defaults to webpack/lib to get webpack and all dependencies.
It's recommended to set cache.buildDependencies.config: [__filename] in webpack.config.js to get the config and all dependencies.

Changes

Use schema-utils@2 for schema validation
validateSchema API now throws an Error instead of returning an Array of Errors
Persistent Caching uses the infrastructureLogger for logging

Removals

remove cache.loglevel
Use infrastructureLogging.level instead

Full Changelog
Feedback","(based on 4.39.2)
Performance
Compilation/NormalModuleFactory.file/context/missingDependencies are now LazySets
Performance improvements in deserialization
Performance improvements in module graph building
Features
add cache.managedPaths. It is an array of package-manager only managed paths. webpack will avoid hashing/timestamping them, assume the version is unique and will use this as snapshot (for both memory and filesystem cache).
These must be node_modules directories.
cache.managedPaths defaults to the node_modules directory webpack is inside of.
add cache.buildDependencies. It is an object of arrays of additional code dependencies of the build. webpack will use an hash of these items and all dependencies to invalidate the filesystem cache.
cache.buildDependencies.defaultWebpack defaults to webpack/lib to get webpack and all dependencies.
It's recommended to set cache.buildDependencies.config: [__filename] in webpack.config.js to get the config and all dependencies.
Changes
Use schema-utils@2 for schema validation
validateSchema API now throws an Error instead of returning an Array of Errors
Persistent Caching uses the infrastructureLogger for logging
Removals
remove cache.loglevel
Use infrastructureLogging.level instead
Full Changelog
Feedback"
229,"Bugfixes

fix ProfilingPlugin not ending traces correctly
","Bugfixes
fix ProfilingPlugin not ending traces correctly"
230,"(based on 4.39.1)
Features

add afterDone hook to Compiler
upgrade watchpack, which adds watchOptions.followSymlinks
experimental -> experiments
rename webassembly/async-experimental to webassembly/async
rename webassembly/experimental to webassembly/sync
add experiments.syncWebAssembly
add experiments.asyncWebAssembly
add asset module type experiment
add experiments.asset
add output.assetModuleFilename (string or function)
add type: ""asset"" for asset module type in rules
add asset examples
separate between files and auxiliaryFiles for chunk assets
normal files: JS, CSS (tags need to be added for entrypoints)
auxiliary files: WASM, assets, any loader emitted file (no tags need to be added for entrypoints)
auxiliary files are displayed in brackets in Stats
Some core implementations and plugins do some time and statistics logging now (try stats.loggingDebug: /webpack/)
add Compilation.hooks.stillValidModule similar to failedModule and succeedModule when a module has been taken from cache

Bugfixes

undefined values are now ignored in rules
fix schema of resolve.alias when array (properties are now required)
pass idleTimeout to persistent caching implementation
fix module done counting for cached modules
add back stats.cachedAssets
fix stats option processing for objects with prototype chain
track call context in concatenated modules correctly

Performance

upgrade enhanced-resolve to fix some function deopts
fix some function deopts in webpack
avoid using toLocaleDateString and toLocaleTimeString for performance (intl need to be initialized)
ChunkGroup parents and children are no longer sorted
Stats assigns chunks with assets only once, instead of for every asset
StatsFactory and StatsPrinter cache used hooks for items
Hashes for small data < 1kb is cached
Put deprecation stuff for Sets in prototype instead of on every instance
Cache Map lookups and create less objects during module dependency processing
default cache.idleTimeout to 60s instead of 10s

Examples

add typescript example

Contributing

add a typing coverage report, to see type coverage of the repo
upgraded many dependencies

Full Changelog
Feedback","(based on 4.39.1)
Features
add afterDone hook to Compiler
upgrade watchpack, which adds watchOptions.followSymlinks
experimental -> experiments
rename webassembly/async-experimental to webassembly/async
rename webassembly/experimental to webassembly/sync
add experiments.syncWebAssembly
add experiments.asyncWebAssembly
add asset module type experiment
add experiments.asset
add output.assetModuleFilename (string or function)
add type: ""asset"" for asset module type in rules
add asset examples
separate between files and auxiliaryFiles for chunk assets
normal files: JS, CSS (tags need to be added for entrypoints)
auxiliary files: WASM, assets, any loader emitted file (no tags need to be added for entrypoints)
auxiliary files are displayed in brackets in Stats
Some core implementations and plugins do some time and statistics logging now (try stats.loggingDebug: /webpack/)
add Compilation.hooks.stillValidModule similar to failedModule and succeedModule when a module has been taken from cache
Bugfixes
undefined values are now ignored in rules
fix schema of resolve.alias when array (properties are now required)
pass idleTimeout to persistent caching implementation
fix module done counting for cached modules
add back stats.cachedAssets
fix stats option processing for objects with prototype chain
track call context in concatenated modules correctly
Performance
upgrade enhanced-resolve to fix some function deopts
fix some function deopts in webpack
avoid using toLocaleDateString and toLocaleTimeString for performance (intl need to be initialized)
ChunkGroup parents and children are no longer sorted
Stats assigns chunks with assets only once, instead of for every asset
StatsFactory and StatsPrinter cache used hooks for items
Hashes for small data < 1kb is cached
Put deprecation stuff for Sets in prototype instead of on every instance
Cache Map lookups and create less objects during module dependency processing
default cache.idleTimeout to 60s instead of 10s
Examples
add typescript example
Contributing
add a typing coverage report, to see type coverage of the repo
upgraded many dependencies
Full Changelog
Feedback"
231,"Bugfixes

fix problem that progress lines were too long on some terminals
fix a problem that ...100% is displayed instead of 100%
","Bugfixes
fix problem that progress lines were too long on some terminals
fix a problem that ...100% is displayed instead of 100%"
232,"Features

Infrastructure logger for node.js has now colors + symbols to mark different kind of messages
Logger API has now a status method which allows to write temporary status messages
ProgressPlugin default handler uses the Infrastructure Logger status message to output messages
Placeholders in paths can now be escaped with i. e. [\id\]
Compiler.hooks.assetEmitted have been added to get byte content of emitted assets

Bugfixes

Logging output is now aligned to have space for symbols
renamed Compiler.hooks.infrastructurelog to Compiler.hooks.infrastructureLog
Properties that are defined on the Object.prototype can now be chunk ids (i. e. constructor)
library.name now supports placeholders in libraryTarget: ""system""
2 places were module profiles were incorrectly captured were fixed

Dependencies

Forced upgrade of all direct dependencies
webpack-sources + terser-webpack-plugin comes with quality optimizations for SourceMaps
","Features
Infrastructure logger for node.js has now colors + symbols to mark different kind of messages
Logger API has now a status method which allows to write temporary status messages
ProgressPlugin default handler uses the Infrastructure Logger status message to output messages
Placeholders in paths can now be escaped with i. e. [\id]
Compiler.hooks.assetEmitted have been added to get byte content of emitted assets
Bugfixes
Logging output is now aligned to have space for symbols
renamed Compiler.hooks.infrastructurelog to Compiler.hooks.infrastructureLog
Properties that are defined on the Object.prototype can now be chunk ids (i. e. constructor)
library.name now supports placeholders in libraryTarget: ""system""
2 places were module profiles were incorrectly captured were fixed
Dependencies
Forced upgrade of all direct dependencies
webpack-sources + terser-webpack-plugin comes with quality optimizations for SourceMaps"
233,"Performance

Improved performance of ProgressPlugin
Improved performance of chunk graph generation
This can boost performance when many chunks are used, especially incremental build performance
Modules from parent chunks are now tracked during chunk graph generation, which allows to skip these modules in async chunks. This often renders optimization.removeAvailableModules unneeded, expect in scenarios where chunks are merged during optimization.
optimization.removeAvailableModules is now disabled in development mode by default
optimization.removeAvailableModules will be disabled for all modes in next major release, feel free to disable it in production too if you want extra performance.
","Performance
Improved performance of ProgressPlugin
Improved performance of chunk graph generation
This can boost performance when many chunks are used, especially incremental build performance
Modules from parent chunks are now tracked during chunk graph generation, which allows to skip these modules in async chunks. This often renders optimization.removeAvailableModules unneeded, expect in scenarios where chunks are merged during optimization.
optimization.removeAvailableModules is now disabled in development mode by default
optimization.removeAvailableModules will be disabled for all modes in next major release, feel free to disable it in production too if you want extra performance."
234,"Features

add logging API (see https://github.com/webpack/webpack/pull/9436 for details)
","Features
add logging API (see link for details)"
235,"Bugfixes

fix regression in 4.36.0 when using happypack
","Bugfixes
fix regression in 4.36.0 when using happypack"
236,"Features

SourceMapDevToolPlugin append option now supports the default placeholders in addition to [url]
Arrays in resolve and parser options (Rule and Loader API) support backreferences with ""..."" when overriding options.
","Features
SourceMapDevToolPlugin append option now supports the default placeholders in addition to [url]
Arrays in resolve and parser options (Rule and Loader API) support backreferences with ""..."" when overriding options."
237,"(based on 4.35.3)
Features

update enhanced-resolve to new major: see https://github.com/webpack/enhanced-resolve/releases/tag/v5.0.0-beta.0
Yarn PnP
more dependencies tracked
alias with multiple fallbacks resolve.alias: { something: [""a"", ""b""] }
Performance
NodeJsInputFileSystem removed (pass real fs or memfs)

Bugfixes

fixes resolve.alias: { something: false } to ignore module

Full Changelog
Feedback","(based on 4.35.3)
Features
update enhanced-resolve to new major: see link
Yarn PnP
more dependencies tracked
alias with multiple fallbacks resolve.alias: { something: [""a"", ""b""] }
Performance
NodeJsInputFileSystem removed (pass real fs or memfs)
Bugfixes
fixes resolve.alias: { something: false } to ignore module
Full Changelog
Feedback"
238,"Bugfixes

update acorn to include import()

Performance

Improved runtime performance for large JSON modules
","Bugfixes
update acorn to include import()
Performance
Improved runtime performance for large JSON modules"
239,"(based on 4.35.2)
Features

allow output.filename and splitChunks...filename to be a function
update watchpack dependency (ignored is added again, avoid fs.watchFile for own polling)

Bugfixes

fix a case where modules are not added to chunks when using the same name multiple times in splitChunks
fix an internal use of a deprecated API

Full Changelog
Feedback","(based on 4.35.2)
Features
allow output.filename and splitChunks...filename to be a function
update watchpack dependency (ignored is added again, avoid fs.watchFile for own polling)
Bugfixes
fix a case where modules are not added to chunks when using the same name multiple times in splitChunks
fix an internal use of a deprecated API
Full Changelog
Feedback"
240,"Bugfixes

realResource must match absolute paths
","Bugfixes
realResource must match absolute paths"
241,"Bugfixes

add realResource condition in rule to schema
fixes order of loaders when using a matchResource
","Bugfixes
add realResource condition in rule to schema
fixes order of loaders when using a matchResource"
242,"Features

ProgressPlugin limit output to column width in terminal
add Watching.suspend and Watching.resume
add splitChunks.automaticNameMaxLength and splitChunks.cacheGroups[x].automaticNameMaxLength

Bugfixes

webworker target now respect publicPath when loading chunks
holey arrays of configs will fail the validation
","Features
ProgressPlugin limit output to column width in terminal
add Watching.suspend and Watching.resume
add splitChunks.automaticNameMaxLength and splitChunks.cacheGroups[x].automaticNameMaxLength
Bugfixes
webworker target now respect publicPath when loading chunks
holey arrays of configs will fail the validation"
243,"(based on 4.34.0)
Features

add Compiler.intermediateFileSystem for all non-output, non-input fs actions
remove mkdirp dependency
join and mkdirp is optional in fs interface now
Emit warnings when using the non-default export of JSON modules (spec alignment)

Bugfixes

minRemainingSize is only active when a single chunk remains

Removals

IgnorePlugin remove checkContext

Refactoring

Chunk.files is now a Set

Contribute

Test on node.js 12 by default and node.js 13 nightly

Full Changelog
Feedback","(based on 4.34.0)
Features
add Compiler.intermediateFileSystem for all non-output, non-input fs actions
remove mkdirp dependency
join and mkdirp is optional in fs interface now
Emit warnings when using the non-default export of JSON modules (spec alignment)
Bugfixes
minRemainingSize is only active when a single chunk remains
Removals
IgnorePlugin remove checkContext
Refactoring
Chunk.files is now a Set
Contribute
Test on node.js 12 by default and node.js 13 nightly
Full Changelog
Feedback"
244,"Features

Error message when parsing fails shows used loaders now

Bugfixes

importing the namespace object from non-ESM (CJS) modules no longer leads to an warning
Error message in HMR logging works for Firefox too now
Parser understands block scoping now
","Features
Error message when parsing fails shows used loaders now
Bugfixes
importing the namespace object from non-ESM (CJS) modules no longer leads to an warning
Error message in HMR logging works for Firefox too now
Parser understands block scoping now"
245,"(based on 4.33.0)
Features

when exporting imported namespace objects, they are now tracked for Tree Shaking
added experiments config option which allows to enable experimental features
Note that these experiments have relaxed SemVer compatibility (breaking changes to experimental feature may occur in minor version)
(BREAKING CHANGE) .mjs support is now disabled by default and can be enabled with experiments.mjs: true
(BREAKING CHANGE) WebAssembly support is now disabled by default and can be enabled with experiments.syncWebAssembly: true or experiments.asyncWebAssembly: true
experiments.syncWebAssembly: true: The implementation used in webpack 4
experiments.asyncWebAssembly: true: The updated spec based on async modules
added experiments.importAwait: true to allow to use import await and export await to import/reexport async modules
added experiments.importAsync: true which allows normal import and export to import/reexport async modules
added experiments.topLevelAwait: true which allows to use await in EcmaScript Modules on top-level (makes the module an async module)

Full Changelog
Feedback","(based on 4.33.0)
Features
when exporting imported namespace objects, they are now tracked for Tree Shaking
added experiments config option which allows to enable experimental features
Note that these experiments have relaxed SemVer compatibility (breaking changes to experimental feature may occur in minor version)
(BREAKING CHANGE) .mjs support is now disabled by default and can be enabled with experiments.mjs: true
(BREAKING CHANGE) WebAssembly support is now disabled by default and can be enabled with experiments.syncWebAssembly: true or experiments.asyncWebAssembly: true
experiments.syncWebAssembly: true: The implementation used in webpack 4
experiments.asyncWebAssembly: true: The updated spec based on async modules
added experiments.importAwait: true to allow to use import await and export await to import/reexport async modules
added experiments.importAsync: true which allows normal import and export to import/reexport async modules
added experiments.topLevelAwait: true which allows to use await in EcmaScript Modules on top-level (makes the module an async module)
Full Changelog
Feedback"
246,"Features

add target: ""electron-preload"" for electron 5
renderer should use target: ""web"" in electron 5

Bugfixes

fix HMR rejection of removed and readded self-accepted modules
","Features
add target: ""electron-preload"" for electron 5
renderer should use target: ""web"" in electron 5
Bugfixes
fix HMR rejection of removed and readded self-accepted modules"
247,"(based on 4.32.2)
Features

When using target: ""node"" and splitChunks module evaluation will not be delayed by a microtick and exports become a Promise
When a __webpack_require__ param declaration is found in a module it will be renamed to something else
For chunks without JS part no JS file will be emitted or loaded
Remaining node things are disabled by default in node-like targets

Bugfixes

A , in the runtime requirements comment was incorrectly placed

Full Changelog
Feedback","(based on 4.32.2)
Features
When using target: ""node"" and splitChunks module evaluation will not be delayed by a microtick and exports become a Promise
When a webpack_require param declaration is found in a module it will be renamed to something else
For chunks without JS part no JS file will be emitted or loaded
Remaining node things are disabled by default in node-like targets
Bugfixes
A , in the runtime requirements comment was incorrectly placed
Full Changelog
Feedback"
248,"Bugfixes

fix some weird schema validation messages
fix problem in production mode (sideEffects + concatenation) which caused reexported values to become undefined (bug since 4.32.0)
","Bugfixes
fix some weird schema validation messages
fix problem in production mode (sideEffects + concatenation) which caused reexported values to become undefined (bug since 4.32.0)"
249,"Bugfixes

reverts some changes from 4.32.0 which accidentally disabled some CommonJs features when using node: false.
","Bugfixes
reverts some changes from 4.32.0 which accidentally disabled some CommonJs features when using node: false."
250,"(based on 4.32.0)
Features

add stage constants for Cache plugins
Memory, Disk, Default, Network
add minRemainingSize option for splitChunks
see #9123
resolve and parser options now merge deeply
""..."" in arrays reference the old array
replace micromatch with glob-to-regexp
micromatch has to many dependencies

Bugfixes

realResource has been added to the schema

Removals

query and loaders properties in Rules has be removed

Refactoring

Refactor RuleSet to RuleSetCompiler
see #9138

Full Changelog
Feedback","(based on 4.32.0)
Features
add stage constants for Cache plugins
Memory, Disk, Default, Network
add minRemainingSize option for splitChunks
see #9123
resolve and parser options now merge deeply
""..."" in arrays reference the old array
replace micromatch with glob-to-regexp
micromatch has to many dependencies
Bugfixes
realResource has been added to the schema
Removals
query and loaders properties in Rules has be removed
Refactoring
Refactor RuleSet to RuleSetCompiler
see #9138
Full Changelog
Feedback"
251,"Features

Added this.mode to the loader API, to allow loaders to choose defaults by mode similar to webpacks options
Stack Trace for Errors in rejected Promises from import() now includes the stack from where the import() was called

Bugfixes

The Parser can now analyse identifiers in rest patterns too
const { a, ...rest } = obj, where rest conflicts with an imported binding etc.
node: false now correctly disables __dirname and __filename too
__dirname and __filename now no longer evaluates to something when node: false or node.__file/dirname: false is set
if(__dirname !== """") is no longer replaced with if(true) in such scenarios
prefetching chunks is no executed after the initial module evaluation
This allows to override i. e. __webpack_public_path__ for prefetching too
fixes a runtime crash when using side-effect-free modules with the DllPlugin

Contribute

CI tests node.js 12 now too
webpack-bot now merges dependabot PRs automatically when status checks succeed
","Features
Added this.mode to the loader API, to allow loaders to choose defaults by mode similar to webpacks options
Stack Trace for Errors in rejected Promises from import() now includes the stack from where the import() was called
Bugfixes
The Parser can now analyse identifiers in rest patterns too
const { a, ...rest } = obj, where rest conflicts with an imported binding etc.
node: false now correctly disables dirname and __filename too
__dirname and __filename now no longer evaluates to something when node: false or node.__file/dirname: false is set
if(__dirname !== """") is no longer replaced with if(true) in such scenarios
prefetching chunks is no executed after the initial module evaluation
This allows to override i. e. __webpack_public_path for prefetching too
fixes a runtime crash when using side-effect-free modules with the DllPlugin
Contribute
CI tests node.js 12 now too
webpack-bot now merges dependabot PRs automatically when status checks succeed"
252,"(based on 4.31.0)
Features

add __webpack_get_script_filename__ function
remove webpack-command fallback
use find-cache-dir to determine cache directory
watchpack update (fixes bug where changes are lost)
tapable 2 (deprecates things)
Improve mangling of export names

Performance

lazy-require plugins depending on config

Full Changelog
Feedback","(based on 4.31.0)
Features
add webpack_get_script_filename function
remove webpack-command fallback
use find-cache-dir to determine cache directory
watchpack update (fixes bug where changes are lost)
tapable 2 (deprecates things)
Improve mangling of export names
Performance
lazy-require plugins depending on config
Full Changelog
Feedback"
253,"Features

add errors-warnings stats preset

Bugfixes

allow top-level return in non-ESM modules
","Features
add errors-warnings stats preset
Bugfixes
allow top-level return in non-ESM modules"
254,"Features

add amd: false to disable AMD support
Compilation.hooks.finishModules now also allows async plugins
add output.libraryTarget: ""system"" to compile for SystemJs environment

Bugfixes

fix generating a null id when concatenating an entry module in a different chunk
fix unneeded chunk references when splitting modules from chunks
fix parsing of function name in function scope

Performance

Lazy require some internal files
Faster way to generate function headers

Contributing

Run prettier on examples markdown
","Features
add amd: false to disable AMD support
Compilation.hooks.finishModules now also allows async plugins
add output.libraryTarget: ""system"" to compile for SystemJs environment
Bugfixes
fix generating a null id when concatenating an entry module in a different chunk
fix unneeded chunk references when splitting modules from chunks
fix parsing of function name in function scope
Performance
Lazy require some internal files
Faster way to generate function headers
Contributing
Run prettier on examples markdown"
255,"Bugfixes

typeof __webpack_require__ and require.onError is no longer evaluated to undefined and evaluation is done at runtime instead.
this value in module.hot.accept with imported dependency is correctly preserved.
webassemblyjs updated to latest version

Contributing

added a linting step to ensure all dependencies resolve to npm modules
","Bugfixes
typeof webpack_require and require.onError is no longer evaluated to undefined and evaluation is done at runtime instead.
this value in module.hot.accept with imported dependency is correctly preserved.
webassemblyjs updated to latest version
Contributing
added a linting step to ensure all dependencies resolve to npm modules"
256,"(based on 4.29.5)
Bugfixes

generate valid code for chunk filename runtime module

Features

splitChunks.filename is no longer restricted to initial chunks only. It now also works for async chunks.
Optimized chunk filename runtime module to generate shorter code
It now selects the most commonly used filename template as expression

Full Changelog
Feedback","(based on 4.29.5)
Bugfixes
generate valid code for chunk filename runtime module
Features
splitChunks.filename is no longer restricted to initial chunks only. It now also works for async chunks.
Optimized chunk filename runtime module to generate shorter code
It now selects the most commonly used filename template as expression
Full Changelog
Feedback"
257,"Bugfixes

update @webassemblyjs to remove git dependency
","Bugfixes
update @webassemblyjs to remove git dependency"
258,"Bugfixes

update @webassemblyjs for bugfixes
","Bugfixes
update @webassemblyjs for bugfixes"
259,"(based on 4.29.3)
Bugfixes

added option optimization.mangleExports (enabled only in production mode, depends on used and provided exports)
fix duplicate runtime modules when using runtimeChunk: ""single""
add runtime requirement for AMD define on module

Refactoring

Refactored how information about exports are stored internally

Full Changelog
Feedback","(based on 4.29.3)
Bugfixes
added option optimization.mangleExports (enabled only in production mode, depends on used and provided exports)
fix duplicate runtime modules when using runtimeChunk: ""single""
add runtime requirement for AMD define on module
Refactoring
Refactored how information about exports are stored internally
Full Changelog
Feedback"
260,"Bugfixes

fixes a bug where import() context uses __webpack_require__.e, but it is not in the runtime
WebpackErrors now console.log correctly in node > 10
","Bugfixes
fixes a bug where import() context uses webpack_require.e, but it is not in the runtime
WebpackErrors now console.log correctly in node > 10"
261,"Internal changes

update dependencies
","Internal changes
update dependencies"
262,"Bugfixes

add missing __esModule flag when modules are concatenated, but without usage information
","Bugfixes
add missing __esModule flag when modules are concatenated, but without usage information"
263,"(based on 4.29.0)
Features

performance improvements to persitent caching
measure size of cache objects to decide if they should be lazy or eagerly loaded
remove json-stable-stringify dependency

Bugfixes

flag dependencies usage correctly when multiple entries are used

Full Changelog
Feedback","(based on 4.29.0)
Features
performance improvements to persitent caching
measure size of cache objects to decide if they should be lazy or eagerly loaded
remove json-stable-stringify dependency
Bugfixes
flag dependencies usage correctly when multiple entries are used
Full Changelog
Feedback"
264,"Important Note for npm users
This release updates some dependencies, which may trigger a npm bug. See here for the webpack issue. The npm bug has been fixed, but a new npm version has not been released yet.
For workarounds see this comment.
Eventually the fix will be to upgrade npm once the bugfix is released.
Features

update acorn to v6
limit the number of in parallel written output files to 15
add output.futureEmitAssets which gives the emitting logic of webpack 5
assets are replaced with SizeOnlySources
reading assets after emitting is no longer allowed
This allows memory to be garbage-collected
","Important Note for npm users
This release updates some dependencies, which may trigger a npm bug. See here for the webpack issue. The npm bug has been fixed, but a new npm version has not been released yet.
For workarounds see this comment.
Eventually the fix will be to upgrade npm once the bugfix is released.
Features
update acorn to v6
limit the number of in parallel written output files to 15
add output.futureEmitAssets which gives the emitting logic of webpack 5
assets are replaced with SizeOnlySources
reading assets after emitting is no longer allowed
This allows memory to be garbage-collected"
265,"(based on 4.28.4)
Breaking Changes

Replace Source in assets with SizeOnlySource after emitting
Do no read source or map from assets after emitting
upgraded webpack-sources to new major version
no longer sort file/context/missingDependencies in Compilation
change Cache Plugin API for better performance
got hook removed
get hook as new argument gotHandlers

Features

add cache.idleTimeout and cache.idleTimeoutForIntialStore to delay cache storing while idle
log a warning when loglevel is at least warning and serialization in pack fails

Bugfixes

improve data reading from cache file and error message when cache file is incomplete

Performance

removed .json from extensions in resolveLoader
add memory caching for contextify

Full Changelog
Feedback","(based on 4.28.4)
Breaking Changes
Replace Source in assets with SizeOnlySource after emitting
Do no read source or map from assets after emitting
upgraded webpack-sources to new major version
no longer sort file/context/missingDependencies in Compilation
change Cache Plugin API for better performance
got hook removed
get hook as new argument gotHandlers
Features
add cache.idleTimeout and cache.idleTimeoutForIntialStore to delay cache storing while idle
log a warning when loglevel is at least warning and serialization in pack fails
Bugfixes
improve data reading from cache file and error message when cache file is incomplete
Performance
removed .json from extensions in resolveLoader
add memory caching for contextify
Full Changelog
Feedback"
266,Broken see v5.0.0-alpha.8 for changelog,Broken see v5.0.0-alpha.8 for changelog
267,"(based on 4.28.4)

fixed a max stack trace crash with very depth module chains
write out buffers of the cache file in a streaming way (to avoid duplicating memory)
add resolvedModuleId resolvedModuleIdentifier and resolvedModule to reasons in Stats which point to the module before optimizations like scope hoisting
show resolvedModule in Stats toString output
in bail mode: errors are no longer hidden by a ""Queue was stopped"" error
loader-runner was upgraded: https://github.com/webpack/loader-runner/releases/tag/v3.0.0

Full Changelog
Feedback","(based on 4.28.4)
fixed a max stack trace crash with very depth module chains
write out buffers of the cache file in a streaming way (to avoid duplicating memory)
add resolvedModuleId resolvedModuleIdentifier and resolvedModule to reasons in Stats which point to the module before optimizations like scope hoisting
show resolvedModule in Stats toString output
in bail mode: errors are no longer hidden by a ""Queue was stopped"" error
loader-runner was upgraded: link
Full Changelog
Feedback"
268,"Bugfixes

ProfilingPlugin creates output path if not existing
fixed support for arrow function functions for optimization.minimizer
failed hooks is now also called when run() fails
","Bugfixes
ProfilingPlugin creates output path if not existing
fixed support for arrow function functions for optimization.minimizer
failed hooks is now also called when run() fails"
269,"(based on 4.28.3)

Removed compilationParams.compilationDependencies
Plugins can add dependencies to the compilation by adding to compilation.file/context/missingDependencies
Changed hooks in NormalModuleFactory from waterfall to bailing, changed and renamed hooks that return waterfall functions
Changed WatchFileSystem interface
New watchpack major version without chokidar and fsevents
watchOptions.ignored option not functional for now
Performance improvements
More dependencies are now tracked by the watcher (resolve dependencies)
Snapshots for fs entries are now done for resolving and NormalModule (FileSystemInfo.createSnapshot)

Full Changelog
Feedback","(based on 4.28.3)
Removed compilationParams.compilationDependencies
Plugins can add dependencies to the compilation by adding to compilation.file/context/missingDependencies
Changed hooks in NormalModuleFactory from waterfall to bailing, changed and renamed hooks that return waterfall functions
Changed WatchFileSystem interface
New watchpack major version without chokidar and fsevents
watchOptions.ignored option not functional for now
Performance improvements
More dependencies are now tracked by the watcher (resolve dependencies)
Snapshots for fs entries are now done for resolving and NormalModule (FileSystemInfo.createSnapshot)
Full Changelog
Feedback"
270,"(based on 4.28.3)
Refactoring

module.buildMeta.providedExports has been removed
Moved into ModuleGraph

Bugfixes

node.global is now true by default again
fix stats.assetsByChunkName[x] to make is similar to webpack 4 again
but stats.assetsByChunkName[x] is now always an array
fixed a bug which produced invalid JS with chunk prefetching

Full Changelog
Feedback","(based on 4.28.3)
Refactoring
module.buildMeta.providedExports has been removed
Moved into ModuleGraph
Bugfixes
node.global is now true by default again
fix stats.assetsByChunkName[x] to make is similar to webpack 4 again
but stats.assetsByChunkName[x] is now always an array
fixed a bug which produced invalid JS with chunk prefetching
Full Changelog
Feedback"
271,"(based on 4.28.3)
Bugfixes

fixed missing entrypoints in stats json namedChunkGroups
MultiStats.toJson now allows calling without argument

Features

expose the serialization api webpack.util.serialization
dependent chunks for webworker node async-node node-webkit electron-main targets are now loaded by runtime
this allows to split initial chunks into mutliple parts for these targets (splitChunks)

Internal changes

Cache is now layered, filesystem cache results in FileCachePlugin and MemoryCachePlugin applied
update terser plugin dependency to get rid of deprecation messages

Full Changelog
Feedback","(based on 4.28.3)
Bugfixes
fixed missing entrypoints in stats json namedChunkGroups
MultiStats.toJson now allows calling without argument
Features
expose the serialization api webpack.util.serialization
dependent chunks for webworker node async-node node-webkit electron-main targets are now loaded by runtime
this allows to split initial chunks into mutliple parts for these targets (splitChunks)
Internal changes
Cache is now layered, filesystem cache results in FileCachePlugin and MemoryCachePlugin applied
update terser plugin dependency to get rid of deprecation messages
Full Changelog
Feedback"
272,"Bugfixes

ProfilingPlugin creates the output folder if necessary
","Bugfixes
ProfilingPlugin creates the output folder if necessary"
273,"Bugfixes

objects with null prototype can now be serialized
stats toJson now respects all: false for all options
the HMR defaults now use [fullhash] instead of [hash]
using [fullhash] in some filename options now correctly includes the hash runtime module
when converting absolute path to relative query string is correctly preserved

Full Changelog
Feedback","Bugfixes
objects with null prototype can now be serialized
stats toJson now respects all: false for all options
the HMR defaults now use [fullhash] instead of [hash]
using [fullhash] in some filename options now correctly includes the hash runtime module
when converting absolute path to relative query string is correctly preserved
Full Changelog
Feedback"
274,"Changelog
Feedback","Changelog
Feedback"
275,"Bugfixes

fixes a crash when multiple IgnorePlugins are used
","Bugfixes
fixes a crash when multiple IgnorePlugins are used"
276,"Changelog
Feedback","Changelog
Feedback"
277,"Bugfixes

fix error in IgnorePlugin when no contextRegExp is passed
","Bugfixes
fix error in IgnorePlugin when no contextRegExp is passed"
278,"Features

IgnorePlugin: checkResource has an additional context argument

Bugfixes

Injection of node.js globals has been disabled for .mjs files as it's crashing
","Features
IgnorePlugin: checkResource has an additional context argument
Bugfixes
Injection of node.js globals has been disabled for .mjs files as it's crashing"
279,"Bugfixes

v4.27.0 accidentially introduced a breaking change. This reverts the change and restores the original behavior for splitChunks enforce.
","Bugfixes
v4.27.0 accidentially introduced a breaking change. This reverts the change and restores the original behavior for splitChunks enforce."
280,"Features

When using functions as plugins they are now also called with the compiler as parameter
This make it possible to use arrow functions as plugins
splitChunks.maxSize now emits a warning when minSize > maxSize
Loaders have now access to a getResolve method to create their own resolver function with custom options

Bugfixes

splitChunks.cacheGroups.xxx.enforce now behaves as documented and enforce chunk creation
splitChunks.cacheGroups.xxx.enforce now no longer deletes minSize for maxSize
fixes a bug where splitChunks cause cacheGroups to be incorrectly merged when using the same name
now conditions are considered per cacheGroup
the correct cache group comment is displayed in stats
fixes a bug which causes providedExports not to be updated on rebuilds when using export * from
","Features
When using functions as plugins they are now also called with the compiler as parameter
This make it possible to use arrow functions as plugins
splitChunks.maxSize now emits a warning when minSize > maxSize
Loaders have now access to a getResolve method to create their own resolver function with custom options
Bugfixes
splitChunks.cacheGroups.xxx.enforce now behaves as documented and enforce chunk creation
splitChunks.cacheGroups.xxx.enforce now no longer deletes minSize for maxSize
fixes a bug where splitChunks cause cacheGroups to be incorrectly merged when using the same name
now conditions are considered per cacheGroup
the correct cache group comment is displayed in stats
fixes a bug which causes providedExports not to be updated on rebuilds when using export * from"
281,"Bugfixes

fix a bug where splitChunks.maxSize causes a hanging build
fix a bug where splitChunks.maxSize crashes when minSize > maxSize
fix a edgecase where splitChunks.maxSize can cause chunks bigger than minSize
remove unnecessary code from global builtin 
","Bugfixes
fix a bug where splitChunks.maxSize causes a hanging build
fix a bug where splitChunks.maxSize crashes when minSize > maxSize
fix a edgecase where splitChunks.maxSize can cause chunks bigger than minSize
remove unnecessary code from global builtin "
282,"Features

Switch from uglify-es to terser as default minimizer

Note: While they are officially backward-compatible, it can still happen that a new bugs occurs with terser, which break your production builds. Make sure to validate your production builds after upgrading to this version. (Note that it's always a good idea to test your output assets before deploying.)
If you want to report bugs to terser (https://github.com/terser-js/terser), please provide a minimal repro case with minimized and non-minimized code. You can configure webpack to generate non-minimized code in production mode by setting optimization.minimize: false. When reporting a bug to terser, best report a repro case which doesn't require running webpack and is reproducible with only the terser command line.
See optimization.minimizers configuration option to switch back to uglify-es or provide additional minimize options for terser.","Features
Switch from uglify-es to terser as default minimizer
Note: While they are officially backward-compatible, it can still happen that a new bugs occurs with terser, which break your production builds. Make sure to validate your production builds after upgrading to this version. (Note that it's always a good idea to test your output assets before deploying.)
If you want to report bugs to terser (link), please provide a minimal repro case with minimized and non-minimized code. You can configure webpack to generate non-minimized code in production mode by setting optimization.minimize: false. When reporting a bug to terser, best report a repro case which doesn't require running webpack and is reproducible with only the terser command line.
See optimization.minimizers configuration option to switch back to uglify-es or provide additional minimize options for terser."
283,"Bugfixes

fix replacement of compile-time constant expression when expression is a wrapped expression (string prefix and/or suffix).
","Bugfixes
fix replacement of compile-time constant expression when expression is a wrapped expression (string prefix and/or suffix)."
284,"Features

add format option to DllPlugin to allow generating formated manifest json
add flags to ProgressPlugin to add and remove information
entrypoint counter was added, but disabled by default to avoid breaking change

Bugfixes

fix code generation for context dependencies when replacing compile-time constant expressions
disable the effect of the ProvidePlugin for .mjs
","Features
add format option to DllPlugin to allow generating formated manifest json
add flags to ProgressPlugin to add and remove information
entrypoint counter was added, but disabled by default to avoid breaking change
Bugfixes
fix code generation for context dependencies when replacing compile-time constant expressions
disable the effect of the ProvidePlugin for .mjs"
285,"Features

allow to pass no dependencies to DefinePlugin runtime value
DefinePlugin.runtimeValue(() => {...}, true) is always evaluated
add module argument to DefinePlugin.runtimeValue

Bugfixes

update webassemblyjs dependency
fix bug when using entry names that look like numbers with HMR
","Features
allow to pass no dependencies to DefinePlugin runtime value
DefinePlugin.runtimeValue(() => {...}, true) is always evaluated
add module argument to DefinePlugin.runtimeValue
Bugfixes
update webassemblyjs dependency
fix bug when using entry names that look like numbers with HMR"
286,"Bugfixes

add space when replacing expression with constant
i. e. for code like return'development'===process.env.NODE_ENV&&'foo'
","Bugfixes
add space when replacing expression with constant
i. e. for code like return'development'===process.env.NODE_ENV&&'foo'"
287,"Features

add watchMode flag to Compiler to be able to detect watch mode in plugins
Prefer chunk names of entrypoints when merging chunks
add removedFiles property to Compiler to detect removed files

Bugfixes

publish declarations to npm
upgrade @webassemblyjs/* for bugfix
fix crash when using a side-effect-free wasm module in production mode

Internal changes

test on node.js 12
fix memory leak in test suite
","Features
add watchMode flag to Compiler to be able to detect watch mode in plugins
Prefer chunk names of entrypoints when merging chunks
add removedFiles property to Compiler to detect removed files
Bugfixes
publish declarations to npm
upgrade @webassemblyjs/* for bugfix
fix crash when using a side-effect-free wasm module in production mode
Internal changes
test on node.js 12
fix memory leak in test suite"
288,"Features

Add support for evaluating && and || expressions

Bugfixes

fix problems where order of things where not deterministic

Performance

improve performance of chunk graph creation
this will improve rebuild performance in watch mode
","Features
Add support for evaluating && and || expressions
Bugfixes
fix problems where order of things where not deterministic
Performance
improve performance of chunk graph creation
this will improve rebuild performance in watch mode"
289,"Features

add output.libraryTarget: ""amd-require"" which generates a AMD require([], ...) wrapper instead of a define([], ...) wrapper
support arrays of strings passed to output.library, which exposes the library to a subproperty

Bugfixes

fix cases where __webpack_require__.e is used at runtime but is not defined in the bundle
fix behavior of externals of global type

Performance

Some performance improvements to the chunk graph generation
","Features
add output.libraryTarget: ""amd-require"" which generates a AMD require([], ...) wrapper instead of a define([], ...) wrapper
support arrays of strings passed to output.library, which exposes the library to a subproperty
Bugfixes
fix cases where webpack_require.e is used at runtime but is not defined in the bundle
fix behavior of externals of global type
Performance
Some performance improvements to the chunk graph generation"
290,"Bugfixes

keep comments in export default in concatenated modules
","Bugfixes
keep comments in export default in concatenated modules"
291,"Bugfixes

fix crash when using libraryTarget: ""amd"" without library name
","Bugfixes
fix crash when using libraryTarget: ""amd"" without library name"
292,"Bugfixes

update dependencies (webpack-sources, @webassemblyjs/*)
Handle errors thrown in renderes without crashing

Internal changes

Extended typings
Update internal structure of options schema to generate typings
Note: this exposed an issue in webpack-cli, you need to upgrade to webpack-cli@3.1.1
","Bugfixes
update dependencies (webpack-sources, @webassemblyjs/*)
Handle errors thrown in renderes without crashing
Internal changes
Extended typings
Update internal structure of options schema to generate typings
Note: this exposed an issue in webpack-cli, you need to upgrade to webpack-cli@3.1.1"
293,"Bugfixes

Internal requested filename for import() with target: ""electron-main"" uses correct path separator on windows
  (This fixes a problem with filemappings in vscode)
devtool: ""source-map"" and variants generate SourceMaps when output file is .mjs
browser field as object is used when using target: ""electron-renderer""
Comments near export default are preserved
Passing an array as externals value, now works correctly as documented
","Bugfixes
Internal requested filename for import() with target: ""electron-main"" uses correct path separator on windows
  (This fixes a problem with filemappings in vscode)
devtool: ""source-map"" and variants generate SourceMaps when output file is .mjs
browser field as object is used when using target: ""electron-renderer""
Comments near export default are preserved
Passing an array as externals value, now works correctly as documented"
294,"Bugfixes

Create a hash of the whole runtime code for the chunk/contenthash of entry chunks
Before hash was (incorrectly) calculated from (some) inputs
","Bugfixes
Create a hash of the whole runtime code for the chunk/contenthash of entry chunks
Before hash was (incorrectly) calculated from (some) inputs"
295,"Bugfixes

Update tapable version, which fixes a memory leak
","Bugfixes
Update tapable version, which fixes a memory leak"
296,"Features

Upgrade webassemblyjs dependency
","Features
Upgrade webassemblyjs dependency"
297,"Bugfixes

Fix exit code when multiple CLIs are installed
No longer recommend installing webpack-command, but still support it when installed
","Bugfixes
Fix exit code when multiple CLIs are installed
No longer recommend installing webpack-command, but still support it when installed"
298,"Bugfixes

fix a spacing issue with the ProgressPlugin on some terminals
force-upgrade webpack-sources for performance improvement (was already in semver range)
","Bugfixes
fix a spacing issue with the ProgressPlugin on some terminals
force-upgrade webpack-sources for performance improvement (was already in semver range)"
299,"Bugfixes

fix missing reexports in export * in a concatenated module
","Bugfixes
fix missing reexports in export * in a concatenated module"
300,"Features

allow to provide custom functions to IgnorePlugin

Bugfixes

remove incorrectly emitted dead code in concatenated modules
chunk ids contribute to [contenthash] for js assets
fix crash when trying to export globals in concatenated modules
","Features
allow to provide custom functions to IgnorePlugin
Bugfixes
remove incorrectly emitted dead code in concatenated modules
chunk ids contribute to [contenthash] for js assets
fix crash when trying to export globals in concatenated modules"
301,"Bugfixes

(resource) query now works in import()
adding entries multiple times now overrides properly
This caused an issue when using webpack-hot-client and runtime chunks
","Bugfixes
(resource) query now works in import()
adding entries multiple times now overrides properly
This caused an issue when using webpack-hot-client and runtime chunks"
302,"Bugfixes

fix chunkAsset hook in HotModuleReplacementPlugin
","Bugfixes
fix chunkAsset hook in HotModuleReplacementPlugin"
303,"Bugfixes

fix missing modules with chunks nested in unneeded require.ensures.
","Bugfixes
fix missing modules with chunks nested in unneeded require.ensures."
304,"Bugfixes

handle module.require like require
emit warnings for module.main.require and module.parent.require
sort reasons in stats
handle errors when parsing manifest in DllReferencePlugin
","Bugfixes
handle module.require like require
emit warnings for module.main.require and module.parent.require
sort reasons in stats
handle errors when parsing manifest in DllReferencePlugin"
305,"Bugfixes

fix reversed order when using optimization.occurrenceOrder (default in production mode)
output.hashDigest has a more relaxed schema
update dependencies
fix typo in schema

Internal changes

typescript 3 rc
","Bugfixes
fix reversed order when using optimization.occurrenceOrder (default in production mode)
output.hashDigest has a more relaxed schema
update dependencies
fix typo in schema
Internal changes
typescript 3 rc"
306,"Features

add wasm support for electron-renderer target
add optimization.moduleIds and optimization.chunkIds options to replace other options

Bugfixes

fix order of side effect evaluation for exported dependencies in side-effect-free modules
fix some typos
Support the case when passing an array to output.library.root and using a devtool
fix a HMR logging message issue in browser where err.stack is not set
add missing default extensions to the DllReferencePlugin
module/chunk ids in Stats now sort numerical when they are numbers
fix lost chunk reasons when using optimization.splitChunks.maxSize
fix cases where Dependency.loc is a string instead of an object

Deprecations

deprecated Dependency.compare in favor of compareLocations
optimization.namedModules is now deprecated
optimization.hashedModuleIds is now deprecated
optimization.namedChunks is now deprecated
optimization.occurrenceOrder is now deprecated
","Features
add wasm support for electron-renderer target
add optimization.moduleIds and optimization.chunkIds options to replace other options
Bugfixes
fix order of side effect evaluation for exported dependencies in side-effect-free modules
fix some typos
Support the case when passing an array to output.library.root and using a devtool
fix a HMR logging message issue in browser where err.stack is not set
add missing default extensions to the DllReferencePlugin
module/chunk ids in Stats now sort numerical when they are numbers
fix lost chunk reasons when using optimization.splitChunks.maxSize
fix cases where Dependency.loc is a string instead of an object
Deprecations
deprecated Dependency.compare in favor of compareLocations
optimization.namedModules is now deprecated
optimization.hashedModuleIds is now deprecated
optimization.namedChunks is now deprecated
optimization.occurrenceOrder is now deprecated"
307,"Bugfixes

fix memory leaks when using HMR and in SplitChunksPlugin cache
fix undefined automaticNameDelimiter in cache groups when using maxSize
fix ProfilingPlugin for node.js 10 and 6
","Bugfixes
fix memory leaks when using HMR and in SplitChunksPlugin cache
fix undefined automaticNameDelimiter in cache groups when using maxSize
fix ProfilingPlugin for node.js 10 and 6"
308,"Features:

add maxSize option for splitChunks (experimental)
add a helpful error when using wasm in a initial chunk
","Features:
add maxSize option for splitChunks (experimental)
add a helpful error when using wasm in a initial chunk"
309,"Features

add new hook Compilation.dependencyReference to modify the dependency references

Bugfixes

Allow chunks to emit multiple assets to the same filename when hash matches
","Features
add new hook Compilation.dependencyReference to modify the dependency references
Bugfixes
Allow chunks to emit multiple assets to the same filename when hash matches"
310,"Features

the DefinePlugin now supports runtimeValues to pass computed values with dependencies that can change over time
added optimization.hashedModuleIds
crossOrigin for chunks is only set when really needed
added per chunk group indicies
updated enhanced-resolve
You can now use absolute paths as keys to resolve.alias

Bugfixes

when delegating CLI the bin fields are used
when assigning indicies sync dependencies are now walked before async dependencies
","Features
the DefinePlugin now supports runtimeValues to pass computed values with dependencies that can change over time
added optimization.hashedModuleIds
crossOrigin for chunks is only set when really needed
added per chunk group indicies
updated enhanced-resolve
You can now use absolute paths as keys to resolve.alias
Bugfixes
when delegating CLI the bin fields are used
when assigning indicies sync dependencies are now walked before async dependencies"
311,"Bugfixes

fix crash when using invalid JSON with HMR
fix missing modules when a side-effect-free package is root of module concatenation
update chunkhash when entry-chunks list or prefetched chunks change
","Bugfixes
fix crash when using invalid JSON with HMR
fix missing modules when a side-effect-free package is root of module concatenation
update chunkhash when entry-chunks list or prefetched chunks change"
312,"Bugfixes

fix problem causing a stack overflow when reexporting circular
fix a bug causing missing modules in bundles when using splitChunks
run modules in correct order when using import with sideEffects: false
added order to DependencyReference
add missing support for [chunkhash] in target: ""webworker""
fix bug causing incomplete profile (race condition) with the ProfilingPlugin

Internal changes

Added more types
lint files on commit with lint-staged
","Bugfixes
fix problem causing a stack overflow when reexporting circular
fix a bug causing missing modules in bundles when using splitChunks
run modules in correct order when using import with sideEffects: false
added order to DependencyReference
add missing support for [chunkhash] in target: ""webworker""
fix bug causing incomplete profile (race condition) with the ProfilingPlugin
Internal changes
Added more types
lint files on commit with lint-staged"
313,"Features

Errors from loaders show the loader path in the error message
add support for optional catch and line and paragraph separator in strings (ES2019)

Bugfixes

fixes a bug where chunks have duplicate ids when using records
fix bubbling in HMR for import() when importing a non-ESM
fix issue with in installing with pnpm
update dependencies of the ProfilingPlugin
","Features
Errors from loaders show the loader path in the error message
add support for optional catch and line and paragraph separator in strings (ES2019)
Bugfixes
fixes a bug where chunks have duplicate ids when using records
fix bubbling in HMR for import() when importing a non-ESM
fix issue with in installing with pnpm
update dependencies of the ProfilingPlugin"
314,"Features

add optimization.mangleWasmImports option to disable mangling of wasm imports

Bugfixes

disable wasm import mangling temporary because of bugs in the underlying wasm processing
","Features
add optimization.mangleWasmImports option to disable mangling of wasm imports
Bugfixes
disable wasm import mangling temporary because of bugs in the underlying wasm processing"
315,"Features

support reportProgress in afterEmit
Warnings are now emitted if magic comments don't compile
Added support for matchResource inline request for loaders
Using webpackPrefetch in entry chunk now triggers prefetching in runtime
No link tag needed for this in HTML
Warnings will be emitted when trying to use i64-functions imported from wasm

Bugfixes

get_global initializer in wasm globals now work correctly
Reexporting globals is now handled correctly
Error origins and locations are now displayed correctly
","Features
support reportProgress in afterEmit
Warnings are now emitted if magic comments don't compile
Added support for matchResource inline request for loaders
Using webpackPrefetch in entry chunk now triggers prefetching in runtime
No link tag needed for this in HTML
Warnings will be emitted when trying to use i64-functions imported from wasm
Bugfixes
get_global initializer in wasm globals now work correctly
Reexporting globals is now handled correctly
Error origins and locations are now displayed correctly"
316,"Bugfixes

order of wasm globals is correctly preversed while rewriting
skipping side-effect-free modules up to a concatenated modules will not longer cause null module ids
","Bugfixes
order of wasm globals is correctly preversed while rewriting
skipping side-effect-free modules up to a concatenated modules will not longer cause null module ids"
317,"Bugfixes

update reasons correctly when skipping side-effect-free modules
","Bugfixes
update reasons correctly when skipping side-effect-free modules"
318,"Features

Export and import name strings in them wasm are mangled
Unused exports in wasm are removed (Tree Shaking)
Don't expect size improvements yet since there is not minimizer for WASM yet which does the Dead Code Elimination, which is the second part for this optimization
Direct WASM dependencies are enforced for:
functions imports with i64 parameters or return values
memory and table imports
generate shorter wasm runtime code
ESM namespace object now have Symbol.toStringTag ""Module""

Bugfixes

generate correct initializer for imported globals in wasm
side-effect-free modules referenced by export * from are no longer including in the bundle
the side-effects optimization is now possible in incremental compilation
","Features
Export and import name strings in them wasm are mangled
Unused exports in wasm are removed (Tree Shaking)
Don't expect size improvements yet since there is not minimizer for WASM yet which does the Dead Code Elimination, which is the second part for this optimization
Direct WASM dependencies are enforced for:
functions imports with i64 parameters or return values
memory and table imports
generate shorter wasm runtime code
ESM namespace object now have Symbol.toStringTag ""Module""
Bugfixes
generate correct initializer for imported globals in wasm
side-effect-free modules referenced by export * from are no longer including in the bundle
the side-effects optimization is now possible in incremental compilation"
319,"Bugfixes

functions is defined because used (fixes undeclared function error in firefox)
progress plugin works now in MultiCompiler scenarios again
","Bugfixes
functions is defined because used (fixes undeclared function error in firefox)
progress plugin works now in MultiCompiler scenarios again"
320,"Bugfixes

fix parameter references in default parameters

Internal changes

change test cases to text format
","Bugfixes
fix parameter references in default parameters
Internal changes
change test cases to text format"
321,"Features

BannerPlugin supports a function as banner option
allow serve property in configuration schema
add entryOnly option to DllPlugin to only expose modules in the entry point
Allow to choose between webpack-cli and webpack-command
improve error message when JSON parsing fails
allow BOM in JSON
sort usedIds in records for stablility

Bugfixes

align module not found error message with node.js
fix behavior of splitChunks when request limit has reached (caused suboptimal splitting)
fix handling of RegExp in records (caused absolute path in records)
fix handling of circular chunks (caused missing __webpack_require__.e)
runtimeChunk is even generated when all modules are moved by splitChunks (caused multiple runtime chunks instead of single one)
string ids are no longer recorded (caused duplicate/wrong chunk ids)
fix link to migration guide in error message

Internal changes

add more typings
Use travis stages
add many-pages example
","Features
BannerPlugin supports a function as banner option
allow serve property in configuration schema
add entryOnly option to DllPlugin to only expose modules in the entry point
Allow to choose between webpack-cli and webpack-command
improve error message when JSON parsing fails
allow BOM in JSON
sort usedIds in records for stablility
Bugfixes
align module not found error message with node.js
fix behavior of splitChunks when request limit has reached (caused suboptimal splitting)
fix handling of RegExp in records (caused absolute path in records)
fix handling of circular chunks (caused missing webpack_require.e)
runtimeChunk is even generated when all modules are moved by splitChunks (caused multiple runtime chunks instead of single one)
string ids are no longer recorded (caused duplicate/wrong chunk ids)
fix link to migration guide in error message
Internal changes
add more typings
Use travis stages
add many-pages example"
322,"Bugfixes

fix missing debug dependency
support arrays in output.library.root
","Bugfixes
fix missing debug dependency
support arrays in output.library.root"
323,"Bugfixes

WASM parser bugfixes
fix edge case when replacing top-level this in IIFE
avoid parser wasm many times
","Bugfixes
WASM parser bugfixes
fix edge case when replacing top-level this in IIFE
avoid parser wasm many times"
324,"Bugfixes

Sort modules by index by default
fix hot.accept creating duplicates when using the DefinePlugin
","Bugfixes
Sort modules by index by default
fix hot.accept creating duplicates when using the DefinePlugin"
325,"Bugfixes

fix some WASM parsing issues
","Bugfixes
fix some WASM parsing issues"
326,"Features

new WASM pipeline
use instantiateStreaming when available
allow circular dependencies between wasm modules (functions only)

Bugfixes

fix a bug where runtime code for wasm was incorrectly cached
fix a bug where a splitChunks cacheGroup without name wasn't executed
","Features
new WASM pipeline
use instantiateStreaming when available
allow circular dependencies between wasm modules (functions only)
Bugfixes
fix a bug where runtime code for wasm was incorrectly cached
fix a bug where a splitChunks cacheGroup without name wasn't executed"
327,"Features

add webpackIgnore magic comment (import(/* webpackIgnore: true */ ""..."")) to keep the import in the bundle
add chunkGroups to Stats
chunkGroups option
namedChunkGroups property
Chunk Group text output

Bugfixes

prevent chunk merging for the runtimeChunk
fix a caching issue for concatenated modules
namedModules now handle name conflicts correctly
fix a crash when using [contenthash:n] without on-demand-chunks

Internal changes

testing uses Jest now
testing in node.js 10 too
Performance improvements
","Features
add webpackIgnore magic comment (import(/ webpackIgnore: true / ""..."")) to keep the import in the bundle
add chunkGroups to Stats
chunkGroups option
namedChunkGroups property
Chunk Group text output
Bugfixes
prevent chunk merging for the runtimeChunk
fix a caching issue for concatenated modules
namedModules now handle name conflicts correctly
fix a crash when using [contenthash:n] without on-demand-chunks
Internal changes
testing uses Jest now
testing in node.js 10 too
Performance improvements"
328,"Features

improve stats output alignment
improve stats text output when all exports are used
add webpackPrefetch/webpackPreload magic comments to import()
add stats.entrypoints[].children and stats.entrypoints[].childAssets to stats json
add prefetched/preloaded chunks and assets to stats text output
Performance improvements

Bugfixes

Escape chunk ids for target: ""webworker""
fix this to undefined ESM replacement in function default values
new require(...) is weird, but now behaves like in node.js
fix behavior of export * from ""commonjs"" with partial override
fixed build time output in current locale in stats text output
fixed ChunkModuleIdRangePlugin and add tests
avoid race condition when using the loadModule loader API
fix default value of output.globalObject in target: ""node-webkit""
fix a bug with loadModules and dependencies in these modules
fix hot.accept parser plugin to allow defined values as argument
print unknown size when size is unknown
fix a bug where some chunks were missing in the ""single"" runtime chunk
fix cloning of optimization configuration

Internal changes

Set up infrastructure for linting typings with TypeScript
","Features
improve stats output alignment
improve stats text output when all exports are used
add webpackPrefetch/webpackPreload magic comments to import()
add stats.entrypoints[].children and stats.entrypoints[].childAssets to stats json
add prefetched/preloaded chunks and assets to stats text output
Performance improvements
Bugfixes
Escape chunk ids for target: ""webworker""
fix this to undefined ESM replacement in function default values
new require(...) is weird, but now behaves like in node.js
fix behavior of export * from ""commonjs"" with partial override
fixed build time output in current locale in stats text output
fixed ChunkModuleIdRangePlugin and add tests
avoid race condition when using the loadModule loader API
fix default value of output.globalObject in target: ""node-webkit""
fix a bug with loadModules and dependencies in these modules
fix hot.accept parser plugin to allow defined values as argument
print unknown size when size is unknown
fix a bug where some chunks were missing in the ""single"" runtime chunk
fix cloning of optimization configuration
Internal changes
Set up infrastructure for linting typings with TypeScript"
329,"Features

Performance improvements
Improve readablility of error messages with long loader string

Bugfixes

Sort child compilations for consistent compilation hash
Fix bug causing all symbols to be renamed when concatenating modules

Contributing

add yarn setup script for bootstrapping local development
","Features
Performance improvements
Improve readablility of error messages with long loader string
Bugfixes
Sort child compilations for consistent compilation hash
Fix bug causing all symbols to be renamed when concatenating modules
Contributing
add yarn setup script for bootstrapping local development"
330,"Bugfixes

fix yarn/npm install script on windows
","Bugfixes
fix yarn/npm install script on windows"
331,"Features

When webpack-cli is not installed it will ask to install it
splitChunks.chunks supports a custom function now
Better warning when omitting mode

Bugfixes

disallow functions for chunkFilename, because it's not working
generate correct code when using export default (function xxx() {})

Performance

Performance improvements for sorting by identifier
","Features
When webpack-cli is not installed it will ask to install it
splitChunks.chunks supports a custom function now
Better warning when omitting mode
Bugfixes
disallow functions for chunkFilename, because it's not working
generate correct code when using export default (function xxx() {})
Performance
Performance improvements for sorting by identifier"
332,"Features

add support for [contenthash] placeholder

Bugfixes

browser field is used for target electron-renderer
set devtoolNamespace default correctly when passing an object to output.library
","Features
add support for [contenthash] placeholder
Bugfixes
browser field is used for target electron-renderer
set devtoolNamespace default correctly when passing an object to output.library"
333,"Features

add splitChunks.automaticNameDelimiter to configure the name separator for automatic names
stats.excludeModules now also accept booleans
webpack throws an error when trying to run in twice at a time
performance is disabled by default in non-web targets
AMD parser plugins can now be extended by inheriting

Bugfixes

Fix a race condition when writing events.json in ProfilingPlugin
HMR runtime code is reverted to ES5 style
script timeout is not correctly in seconds
reexporting JSON exports works correctly now
fix a bug when combining ProfilingPlugin with SourceMapDevToolPlugin
add a missing semicolon to the runtime code
","Features
add splitChunks.automaticNameDelimiter to configure the name separator for automatic names
stats.excludeModules now also accept booleans
webpack throws an error when trying to run in twice at a time
performance is disabled by default in non-web targets
AMD parser plugins can now be extended by inheriting
Bugfixes
Fix a race condition when writing events.json in ProfilingPlugin
HMR runtime code is reverted to ES5 style
script timeout is not correctly in seconds
reexporting JSON exports works correctly now
fix a bug when combining ProfilingPlugin with SourceMapDevToolPlugin
add a missing semicolon to the runtime code"
334,"Features

Stats now displays the number of assets of a module

Bugfixes

sourceMap option of the default UglifyJsPlugin now defaults to true when the SourceMapDevToolPlugin is used
module.assets is now working again in the Stats
chunk ids are not stringified on target node
devtoolNamespace default works now also for arrays passed to output.library
Format date with 2 digits in Stats for Build At 
fix a bug renaming classes incorrectly
fix a bug where modules ignore the chunks option of optimization.splitChunks
","Features
Stats now displays the number of assets of a module
Bugfixes
sourceMap option of the default UglifyJsPlugin now defaults to true when the SourceMapDevToolPlugin is used
module.assets is now working again in the Stats
chunk ids are not stringified on target node
devtoolNamespace default works now also for arrays passed to output.library
Format date with 2 digits in Stats for Build At 
fix a bug renaming classes incorrectly
fix a bug where modules ignore the chunks option of optimization.splitChunks"
335,"Features

add filename option to optimization.splitChunks to modify the filename template for splitted chunks
allow modules which doesn't emit code into the bundle

Bugfixes

watchpack updated to 1.5.0
performance fix for Module Concatenation (v8 bug)
fix using this.xxx in ProvidePlugin
","Features
add filename option to optimization.splitChunks to modify the filename template for splitted chunks
allow modules which doesn't emit code into the bundle
Bugfixes
watchpack updated to 1.5.0
performance fix for Module Concatenation (v8 bug)
fix using this.xxx in ProvidePlugin"
336,"Features

add version property to webpack exports

Bugfixes

import() with CJS now gives correct exports
Module concatenation bailout messages now point to correct module
","Features
add version property to webpack exports
Bugfixes
import() with CJS now gives correct exports
Module concatenation bailout messages now point to correct module"
337,"Big changes

Environment
Node.js 4 is no longer supported. Source Code was upgraded to a higher ecmascript version.
Usage
You have to choose (mode or --mode) between two modes now: production or development
production enables all kind of optimizations to generate optimized bundles
development enables comments and hint for development and enables the eval devtool
production doesn't support watching, development is optimized for fast incremental rebuilds
production also enables module concatenating (Scope Hoisting)
You can configure this in detail with the flags in optimization.* (build your custom mode)
process.env.NODE_ENV are set to production or development (only in built code, not in config)
There is a hidden none mode which disables everything


Syntax
import() always returns a namespace object. CommonJS modules are wrapped into the default export
This probably breaks your code, if you used to import CommonJs with import()


Configuration
You no longer need to use these plugins:
NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors (on by default in production mode)
ModuleConcatenationPlugin -> optimization.concatenateModules (on by default in production mode)
NamedModulesPlugin -> optimization.namedModules (on by default in develoment mode)


CommonsChunkPlugin was removed -> optimization.splitChunks, optimization.runtimeChunk
JSON
webpack now handles JSON natively
You may need to add type: ""javascript/auto"" when transforming JSON via loader to JS
Just using JSON without loader should still work


allows to import JSON via ESM syntax
unused exports elimination for JSON modules


Optimization
Upgrade uglifyjs-webpack-plugin to v1
ES15 support



Big features

Modules
webpack now supports these module types:
javascript/auto: (The default one in webpack 3) Javascript module with all module systems enabled: CommonJS, AMD, ESM
javascript/esm: EcmaScript modules, all other module system are not available
javascript/dynamic: Only CommonJS and, EcmaScript modules are not available
json: JSON data, it's available via require and import
webassembly/experimental: WebAssembly modules (currently experimental)


javascript/esm handles ESM more strictly compared to javascript/auto:
Imported names need to exist on imported module
Dynamic modules (non-esm, i. e. CommonJs) can only imported via default import, everything else (including namespace import) emit errors


In .mjs modules are javascript/esm by default
WebAssembly modules
can import other modules (JS and WASM)
Exports from WebAssembly modules are validated by ESM import
You'll get a warning/error when trying to import a non-existing export from WASM
can only be used in async chunks. They doesn't work in initial chunks (would be bad for web performance)
Import modules using WASM via import()
This is an experimental feature and subject of change


Optimization
sideEffects: false is now supported in package.json
sideEffects in package.json also supports glob expressions and arrays of glob expressions


Instead of a JSONP function a JSONP array is used -> async script tag support, order no longer matter
New optimization.splitChunks option was introduced
    Details: https://gist.github.com/sokra/1522d586b8e5c0f5072d7565c2bee693
Dead branches are now removed by webpack itself
Before: Uglify removed the dead code
Now: webpack removes the dead code (in some cases)
This prevents crashing when import() occur in a dead branch


Syntax
webpackInclude and webpackExclude are supported by the magic comment for import(). They allow to filter files when using a dynamic expression.
Using System.import() now emits a warning
You can disable the warning with Rule.parser.system: true
You can disable System.import with Rule.parser.system: false


Configuration
Resolving can now be configured with module.rules[].resolve. It's merged with the global configuration.
optimization.minimize has been added to switch minimizing on/off
By default: on in production mode, off in development mode


optimization.minimizer has been added to configurate minimizers and options
Usage
Some Plugin options are now validated
CLI has been move to webpack-cli, you need to install webpack-cli to use the CLI
The ProgressPlugin (--progress) now displays plugin names
At least for plugins migrated to the new plugin system


Performance
UglifyJs now caches and parallizes by default
Multiple performance improvements, especially for faster incremental rebuilds
performance improvement for RemoveParentModulesPlugin
Stats
Stats can display modules nested in concatenated modules

Features

Configuration
Module type is automatically choosen for mjs, json and wasm extensions. Other extensions need to be configured via module.rules[].type
Incorrect options.dependencies configurations now throw error
sideEffects can be overriden via module.rules
output.hashFunction can now be a Constructor to a custom hash function
You can provide a non-cryto hash function for performance reasons


add output.globalObject config option to allow to choose the global object reference in runtime exitCode
Runtime
Error for chunk loading now includes more information and two new properties type and request.
Devtool
remove comment footer from SourceMaps and eval
add support for include test and exclude to the eval source map devtool plugin
Performance
webpacks AST can be passed directly from loader to webpack to avoid extra parsing
Unused modules are no longer unnecessarly concatenated
Add a ProfilingPlugin which write a (Chrome) profile file which includes timings of plugins
Migrate to using for of instead of forEach
Migrate to using Map and Set instead of Objects
Migrate to using includes instead of indexOf
Replaced some RegExp with string methods
Queue don't enqueues the same job twice
Use faster md4 hash for hashing by default
Optimization
When using more than 25 exports mangled export names are shorter.
script tags are no longer text/javascript and async as this are the default values (saves a few bytes)
The concatenated module now generates a bit less code
constant replacements now don't need __webpack_require__ and argument is omitted
Defaults
webpack now looks for the .wasm, .mjs, .js and .json extensions in this order
output.pathinfo is now on by default in develoment mode
in-memory caching is now off by default in production
entry defaults to ./src
output.path defaults to ./dist
Use production defaults when omiting the mode option
Usage
Add detailed progress reporting to SourceMapDevToolPlugin
removed plugins now give a useful error message
Stats
Sizes are now shown in kiB instead of kB in Stats
entrypoints are now shows by default in Stats
chunks now display <{parents}> >{children}< and ={siblings}= in Stats
add buildAt time to stats
stats json now includes the output path
Syntax
A resource query is supported in context
Referencing entry point name in import() now emits a error instead of a warning
Upgraded to acorn 5 and support ES 2018
Plugins
done is now an async hook

Bugfixes

Generated comments no longer break on */
webpack no longer modifies the passed options object
Compiler ""watch-run"" hook now has the Compiler as first parameter
add output.chunkCallbackName to the schema to allow configurating WebWorker template
Using module.id/loaded now correctly bails out of Module Concatentation (Scope Hoisting)
OccurenceOrderPlugin now sorts modules in correct order (instead of reversed)
timestamps for files are read from watcher when calling Watching.invalidate
fix incorrect -! behavior with post loaders
add run and watchRun hooks for MultiCompiler
this is now undefined in ESM
VariableDeclaration are correctly identified as var, const or let
Parser now parse the source code with the correct source type (module/script) when the module type javascript/dynamic or javascript/module is used.
don't crash on missing modules with buildMeta of null
add original-fs module for electron targets
HMRPlugin can be added to the Compiler outside of plugins

Internal changes

Replaced plugin calls with tap calls (new plugin system)
Migrated many deprecated plugins to new plugin system API
added buildMeta.exportsType: ""default"" for json modules
Remove unused methods from Parser (parserStringArray, parserCalculatedStringArray)
Remove ability to clear BasicEvaluatedExpression and to have multiple types
Buffer.from instead of new Buffer
Avoid using forEach and use for of instead
Use neo-async instead of async
Update tapable and enhanced-resolve dependencies to new major versions
Use prettier

Removed features

removed module.loaders
removed loaderContext.options
removed Compilation.notCacheable flag
removed NoErrorsPlugin
removed Dependency.isEqualResource
removed NewWatchingPlugin
removed CommonsChunkPlugin

Breaking changes for plugins/loaders

new plugin system
plugin method is backward-compatible
Plugins should use Compiler.hooks.xxx.tap(<plugin name>, fn) now
New major version of enhanced-resolve
Templates for chunks may now generate multiple assets
Chunk.chunks/parents/blocks are no longer Arrays. A Set is used internally and there are methods to access it.
Parser.scope.renames and Parser.scope.definitions are no longer Objects/Arrays, but Map/Sets.
Parser uses StackedSetMap (LevelDB-like datastructure) instead of Arrays
Compiler.options is no longer set while applying plugins
Harmony Dependencies has changed because of refactoring
Dependency.getReference() may now return a weak property. Dependency.weak is now used by the Dependency base class and returned in the base impl of getReference()
Constructor arguments changed for all Modules
Merged options into options object for ContextModule and resolveDependencies
Changed and renamed dependencies for `import()
Moved Compiler.resolvers into Compiler.resolverFactory accessible with plugins
Dependency.isEqualResource has been replaced with Dependency.getResourceIdentifier
Methods on Template are now static
A new RuntimeTemplate class has been added and outputOptions and requestShortener has been moved to this class
Many methods has been updated to use the RuntimeTemplate instead
We plan to move code which accesses the runtime to this new class
Module.meta has been replaced with Module.buildMeta
Module.buildInfo and Module.factoryMeta have been added
Some properties of Module have been moved into the new objects
added loaderContext.rootContext which points to the context options. Loaders may use it to make stuff relative to the application root.
add this.hot flag to loader context when HMR is enabled
buildMeta.harmony has been replaced with buildMeta.exportsType: ""namespace
The chunk graph has changed:
Before: Chunks were connected with parent-child-relationships.
Now: ChunkGroups are connected with parent-child-relationships. ChunkGroups contain Chunks in order.
Before: AsyncDependenciesBlocks reference a list of Chunks in order.
Now: AsyncDependenciesBlocks reference a single ChunkGroup.
file/contextTimestamps are Maps now
map/foreach Chunks/Modules/Parents methods are now deprecated/removed
NormalModule accept options object in Constructor
Added required generator argument for NormalModule
Added createGenerator and generator hooks for NormalModuleFactory to customize code generation
Allow to customize render manifest for Chunks via hooks
","Big changes
Environment
Node.js 4 is no longer supported. Source Code was upgraded to a higher ecmascript version.
Usage
You have to choose (mode or --mode) between two modes now: production or development
production enables all kind of optimizations to generate optimized bundles
development enables comments and hint for development and enables the eval devtool
production doesn't support watching, development is optimized for fast incremental rebuilds
production also enables module concatenating (Scope Hoisting)
You can configure this in detail with the flags in optimization.* (build your custom mode)
process.env.NODE_ENV are set to production or development (only in built code, not in config)
There is a hidden none mode which disables everything
Syntax
import() always returns a namespace object. CommonJS modules are wrapped into the default export
This probably breaks your code, if you used to import CommonJs with import()
Configuration
You no longer need to use these plugins:
NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors (on by default in production mode)
ModuleConcatenationPlugin -> optimization.concatenateModules (on by default in production mode)
NamedModulesPlugin -> optimization.namedModules (on by default in develoment mode)
CommonsChunkPlugin was removed -> optimization.splitChunks, optimization.runtimeChunk
JSON
webpack now handles JSON natively
You may need to add type: ""javascript/auto"" when transforming JSON via loader to JS
Just using JSON without loader should still work
allows to import JSON via ESM syntax
unused exports elimination for JSON modules
Optimization
Upgrade uglifyjs-webpack-plugin to v1
ES15 support
Big features
Modules
webpack now supports these module types:
javascript/auto: (The default one in webpack 3) Javascript module with all module systems enabled: CommonJS, AMD, ESM
javascript/esm: EcmaScript modules, all other module system are not available
javascript/dynamic: Only CommonJS and, EcmaScript modules are not available
json: JSON data, it's available via require and import
webassembly/experimental: WebAssembly modules (currently experimental)
javascript/esm handles ESM more strictly compared to javascript/auto:
Imported names need to exist on imported module
Dynamic modules (non-esm, i. e. CommonJs) can only imported via default import, everything else (including namespace import) emit errors
In .mjs modules are javascript/esm by default
WebAssembly modules
can import other modules (JS and WASM)
Exports from WebAssembly modules are validated by ESM import
You'll get a warning/error when trying to import a non-existing export from WASM
can only be used in async chunks. They doesn't work in initial chunks (would be bad for web performance)
Import modules using WASM via import()
This is an experimental feature and subject of change
Optimization
sideEffects: false is now supported in package.json
sideEffects in package.json also supports glob expressions and arrays of glob expressions
Instead of a JSONP function a JSONP array is used -> async script tag support, order no longer matter
New optimization.splitChunks option was introduced
    Details: link
Dead branches are now removed by webpack itself
Before: Uglify removed the dead code
Now: webpack removes the dead code (in some cases)
This prevents crashing when import() occur in a dead branch
Syntax
webpackInclude and webpackExclude are supported by the magic comment for import(). They allow to filter files when using a dynamic expression.
Using System.import() now emits a warning
You can disable the warning with Rule.parser.system: true
You can disable System.import with Rule.parser.system: false
Configuration
Resolving can now be configured with module.rules[].resolve. It's merged with the global configuration.
optimization.minimize has been added to switch minimizing on/off
By default: on in production mode, off in development mode
optimization.minimizer has been added to configurate minimizers and options
Usage
Some Plugin options are now validated
CLI has been move to webpack-cli, you need to install webpack-cli to use the CLI
The ProgressPlugin (--progress) now displays plugin names
At least for plugins migrated to the new plugin system
Performance
UglifyJs now caches and parallizes by default
Multiple performance improvements, especially for faster incremental rebuilds
performance improvement for RemoveParentModulesPlugin
Stats
Stats can display modules nested in concatenated modules
Features
Configuration
Module type is automatically choosen for mjs, json and wasm extensions. Other extensions need to be configured via module.rules[].type
Incorrect options.dependencies configurations now throw error
sideEffects can be overriden via module.rules
output.hashFunction can now be a Constructor to a custom hash function
You can provide a non-cryto hash function for performance reasons
add output.globalObject config option to allow to choose the global object reference in runtime exitCode
Runtime
Error for chunk loading now includes more information and two new properties type and request.
Devtool
remove comment footer from SourceMaps and eval
add support for include test and exclude to the eval source map devtool plugin
Performance
webpacks AST can be passed directly from loader to webpack to avoid extra parsing
Unused modules are no longer unnecessarly concatenated
Add a ProfilingPlugin which write a (Chrome) profile file which includes timings of plugins
Migrate to using for of instead of forEach
Migrate to using Map and Set instead of Objects
Migrate to using includes instead of indexOf
Replaced some RegExp with string methods
Queue don't enqueues the same job twice
Use faster md4 hash for hashing by default
Optimization
When using more than 25 exports mangled export names are shorter.
script tags are no longer text/javascript and async as this are the default values (saves a few bytes)
The concatenated module now generates a bit less code
constant replacements now don't need webpack_require and argument is omitted
Defaults
webpack now looks for the .wasm, .mjs, .js and .json extensions in this order
output.pathinfo is now on by default in develoment mode
in-memory caching is now off by default in production
entry defaults to ./src
output.path defaults to ./dist
Use production defaults when omiting the mode option
Usage
Add detailed progress reporting to SourceMapDevToolPlugin
removed plugins now give a useful error message
Stats
Sizes are now shown in kiB instead of kB in Stats
entrypoints are now shows by default in Stats
chunks now display <{parents}> >{children}< and ={siblings}= in Stats
add buildAt time to stats
stats json now includes the output path
Syntax
A resource query is supported in context
Referencing entry point name in import() now emits a error instead of a warning
Upgraded to acorn 5 and support ES 2018
Plugins
done is now an async hook
Bugfixes
Generated comments no longer break on */
webpack no longer modifies the passed options object
Compiler ""watch-run"" hook now has the Compiler as first parameter
add output.chunkCallbackName to the schema to allow configurating WebWorker template
Using module.id/loaded now correctly bails out of Module Concatentation (Scope Hoisting)
OccurenceOrderPlugin now sorts modules in correct order (instead of reversed)
timestamps for files are read from watcher when calling Watching.invalidate
fix incorrect -! behavior with post loaders
add run and watchRun hooks for MultiCompiler
this is now undefined in ESM
VariableDeclaration are correctly identified as var, const or let
Parser now parse the source code with the correct source type (module/script) when the module type javascript/dynamic or javascript/module is used.
don't crash on missing modules with buildMeta of null
add original-fs module for electron targets
HMRPlugin can be added to the Compiler outside of plugins
Internal changes
Replaced plugin calls with tap calls (new plugin system)
Migrated many deprecated plugins to new plugin system API
added buildMeta.exportsType: ""default"" for json modules
Remove unused methods from Parser (parserStringArray, parserCalculatedStringArray)
Remove ability to clear BasicEvaluatedExpression and to have multiple types
Buffer.from instead of new Buffer
Avoid using forEach and use for of instead
Use neo-async instead of async
Update tapable and enhanced-resolve dependencies to new major versions
Use prettier
Removed features
removed module.loaders
removed loaderContext.options
removed Compilation.notCacheable flag
removed NoErrorsPlugin
removed Dependency.isEqualResource
removed NewWatchingPlugin
removed CommonsChunkPlugin
Breaking changes for plugins/loaders
new plugin system
plugin method is backward-compatible
Plugins should use Compiler.hooks.xxx.tap(, fn) now
New major version of enhanced-resolve
Templates for chunks may now generate multiple assets
Chunk.chunks/parents/blocks are no longer Arrays. A Set is used internally and there are methods to access it.
Parser.scope.renames and Parser.scope.definitions are no longer Objects/Arrays, but Map/Sets.
Parser uses StackedSetMap (LevelDB-like datastructure) instead of Arrays
Compiler.options is no longer set while applying plugins
Harmony Dependencies has changed because of refactoring
Dependency.getReference() may now return a weak property. Dependency.weak is now used by the Dependency base class and returned in the base impl of getReference()
Constructor arguments changed for all Modules
Merged options into options object for ContextModule and resolveDependencies
Changed and renamed dependencies for `import()
Moved Compiler.resolvers into Compiler.resolverFactory accessible with plugins
Dependency.isEqualResource has been replaced with Dependency.getResourceIdentifier
Methods on Template are now static
A new RuntimeTemplate class has been added and outputOptions and requestShortener has been moved to this class
Many methods has been updated to use the RuntimeTemplate instead
We plan to move code which accesses the runtime to this new class
Module.meta has been replaced with Module.buildMeta
Module.buildInfo and Module.factoryMeta have been added
Some properties of Module have been moved into the new objects
added loaderContext.rootContext which points to the context options. Loaders may use it to make stuff relative to the application root.
add this.hot flag to loader context when HMR is enabled
buildMeta.harmony has been replaced with buildMeta.exportsType: ""namespace
The chunk graph has changed:
Before: Chunks were connected with parent-child-relationships.
Now: ChunkGroups are connected with parent-child-relationships. ChunkGroups contain Chunks in order.
Before: AsyncDependenciesBlocks reference a list of Chunks in order.
Now: AsyncDependenciesBlocks reference a single ChunkGroup.
file/contextTimestamps are Maps now
map/foreach Chunks/Modules/Parents methods are now deprecated/removed
NormalModule accept options object in Constructor
Added required generator argument for NormalModule
Added createGenerator and generator hooks for NormalModuleFactory to customize code generation
Allow to customize render manifest for Chunks via hooks"
338,"Features

add validation schema for ProfilingProfile
sideEffects in package.json now supports glob expressions and arrays of glob expressions
Use faster md4 hash for hashing by default
update acorn to support ES 2018

Bugfixes

add original-fs module for electron targets
fix warning about ids in schemas
HMRPlugin can be added to the Compiler outside of plugins

Performance

optimize assignDepth

Internal changes

Use neo-async instead of async
Update tapable and enhanced-resolve dependencies to stable versions
","Features
add validation schema for ProfilingProfile
sideEffects in package.json now supports glob expressions and arrays of glob expressions
Use faster md4 hash for hashing by default
update acorn to support ES 2018
Bugfixes
add original-fs module for electron targets
fix warning about ids in schemas
HMRPlugin can be added to the Compiler outside of plugins
Performance
optimize assignDepth
Internal changes
Use neo-async instead of async
Update tapable and enhanced-resolve dependencies to stable versions"
339,"Bugfixes

fixed a typo: mergedDuplicateChunks -> mergeDuplicateChunks
NODE_ENV defaults to ""production"" when passing no mode
fixed incorrect priorities for chunk splitting
allow to use a subset of the chunks for chunk splitting
","Bugfixes
fixed a typo: mergedDuplicateChunks -> mergeDuplicateChunks
NODE_ENV defaults to ""production"" when passing no mode
fixed incorrect priorities for chunk splitting
allow to use a subset of the chunks for chunk splitting"
340,"Features

done is now an async hook
add ""single"" option for runtimeChunk, which create a single changed runtime chunk
add buildAt time to stats
removed plugins now give a useful error message
stats json now includes the output path
remove comment footer from SourceMaps
add support for include test and exclude to the eval source map devtool plugin
update ajv

Bugfixes

Don't rewrite this to undefined in default arguments of class methods
hash generated names for splitChunks when they are too long
fix bug in splitChunks which adds modules to multiple chunks
don't crash on arrays with empty items
workaround for node 8 and 9 bug while reading empty env values
don't crash on missing modules with buildMeta of null
module is no longer considered as main field from .mjs files
","Features
done is now an async hook
add ""single"" option for runtimeChunk, which create a single changed runtime chunk
add buildAt time to stats
removed plugins now give a useful error message
stats json now includes the output path
remove comment footer from SourceMaps
add support for include test and exclude to the eval source map devtool plugin
update ajv
Bugfixes
Don't rewrite this to undefined in default arguments of class methods
hash generated names for splitChunks when they are too long
fix bug in splitChunks which adds modules to multiple chunks
don't crash on arrays with empty items
workaround for node 8 and 9 bug while reading empty env values
don't crash on missing modules with buildMeta of null
module is no longer considered as main field from .mjs files"
341,"Features

Parser supports new Foo expressions
Evaluator supports bitwise and exponential operator
Many config options supporting placeholder now also support functions
add jsonpScriptType to specify script type for lazy loaded script tags
update ajv

Bugfixes

allow ident in schema
ident is not lost when referencing by ident
Prefer process.exitCode instead of process.exit
workaround for bluebird warning in hot/signal
Errors in child compilation now lead to global error
Initial chunk are no longer part of the chunk manifest and no longer contribute to the hash
don't crash on arrays with empty items
workaround for node 8 and 9 bug while reading empty env values
","Features
Parser supports new Foo expressions
Evaluator supports bitwise and exponential operator
Many config options supporting placeholder now also support functions
add jsonpScriptType to specify script type for lazy loaded script tags
update ajv
Bugfixes
allow ident in schema
ident is not lost when referencing by ident
Prefer process.exitCode instead of process.exit
workaround for bluebird warning in hot/signal
Errors in child compilation now lead to global error
Initial chunk are no longer part of the chunk manifest and no longer contribute to the hash
don't crash on arrays with empty items
workaround for node 8 and 9 bug while reading empty env values"
342,"Big changes

Environment
Node.js 4 is no longer supported. Source Code was upgraded to a higher ecmascript version.
Usage
You have to choose (mode or --mode) between two modes now: production or development
production enables all kind of optimizations to generate optimized bundles
development enables comments and hint for development and enables the eval devtool
WIP: addition hints in development mode
production doesn't support watching, development is optimized for fast incremental rebuilds
production also enables module concatenating (Scope Hoisting)
You can configure this in detail with the flags in optimization.* (build your custom mode)
process.env.NODE_ENV are set to production or development (only in built code, not in config)
There is a hidden none mode which disables everything


Syntax
import() always returns a namespace object. CommonJS modules are wrapped into the default export
This probably breaks your code, if you used to import CommonJs with import()


Configuration
You no longer need to use these plugins:
NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors (on by default in production mode)
ModuleConcatenationPlugin -> optimization.concatenateModules (on by default in production mode)
NamedModulesPlugin -> optimization.namedModules (on by default in develoment mode)


CommonsChunkPlugin was removed -> optimization.splitChunks
JSON
webpack now handles JSON natively
You may need to add type: ""javascript/auto"" when transforming JSON via loader to JS
Just using JSON without loader should still work


allows to import JSON via ESM syntax
unused exports elimination for JSON modules


Optimization
Upgrade uglifyjs-webpack-plugin to v1
ES15 support



Big features

Modules
webpack now supports these module types:
javascript/auto: (The default one in webpack 3) Javascript module with all module systems enabled: CommonJS, AMD, ESM
javascript/esm: EcmaScript modules, all other module system are not available
javascript/dynamic: Only CommonJS and, EcmaScript modules are not available
json: JSON data, it's available via require and import
webassembly/experimental: WebAssembly modules (currently experimental)


javascript/esm handles ESM more strictly compared to javascript/auto:
Imported names need to exist on imported module
Dynamic modules (non-esm, i. e. CommonJs) can only imported via default import, everything else (including namespace import) emit errors


In .mjs modules is javascript/esm by default
WebAssembly modules
can import other modules (JS and WASM)
Exports from WebAssembly modules are validated by ESM import
You'll get a warning/error when trying to import a non-existing export from WASM
can only be used in async chunks. They doesn't work in initial chunks (would be bad for web performance)
Import modules using WASM via import()


Optimization
sideEffects: false is now supported in package.json
Instead of a JSONP function a JSONP array is used -> async support
New optimization.splitChunks option was introduced
    Details: https://gist.github.com/sokra/1522d586b8e5c0f5072d7565c2bee693
Dead branches are now removed by webpack itself
Before: Uglify removed the dead code
Now: webpack removes the dead code (in some cases)
This prevents crashing when import() occur in a dead branch


Syntax
webpackInclude and webpackExclude are supported by the magic comment for import(). They allow to filter files when using a dynamic expression.
Using System.import() now emits a warning
You can disable the warning with Rule.parser.system: true
You can disable System.import with Rule.parser.system: false


Configuration
Resolving can now be configured with module.rules[].resolve. It's merged with the global configuration.
optimization.minimize has been added to switch minimizing on/off
By default: on in production mode, off in development mode


optimization.minimizer has been added to configurate minimizers and options
many config options which support placeholders now also support a function
Usage
Some Plugin options are now validated
WIP: Better output, no process exit, stack trace, more plugins


CLI has been move to webpack-cli, you need to install webpack-cli to use the CLI
The ProgressPlugin (--progress) now displays plugin names
At least for plugins migrated to the new plugin system


Performance
UglifyJs now caches and parallizes by default
Multiple performance improvements, especially for faster incremental rebuilds
performance improvement for RemoveParentModulesPlugin
Stats
Stats can display modules nested in concatenated modules

Features

Configuration
Module type is automatically choosen for mjs, json and wasm extensions. Other extensions need to be configured via module.rules[].type
Incorrect options.dependencies configurations now throw error
Rule.ident is now allowed by schema
sideEffects can be overriden via module.rules
output.hashFunction can now be a Constructor to a custom hash function
You can provide a non-cryto hash function for performance reasons


add output.globalObject config option to allow to choose the global object reference in runtime exitCode
Runtime
Error for chunk loading now includes more information and two new properties type and request.
Performance
webpacks AST can be passed directly from loader to webpack to avoid extra parsing
Unused modules are no longer unnecessarly concatenated
Add a ProfilingPlugin which write a (Chrome) profile file which includes timings of plugins
Migrate to using for of instead of forEach
Migrate to using Map and Set instead of Objects
Migrate to using includes instead of indexOf
Replaced some RegExp with string methods
Queue don't enqueues the same job twice
Optimization
When using more than 25 exports mangled export names are shorter.
script tags are no longer text/javascript and async as this are the default values (saves a few bytes)
The concatenated module now generates a bit less code
constant replacements now don't need __webpack_require__ and argument is omitted
Defaults
webpack now looks for the .wasm, .mjs, .js and .json extensions in this order
output.pathinfo is now on by default in develoment mode
in-memory caching is now off by default in production
entry defaults to ./src
output.path defaults to ./dist
Use production defaults when omiting the mode option
Usage
Add detailed progress reporting to SourceMapDevToolPlugin
Stats
Sizes are now shown in kiB instead of kB in Stats
entrypoints are now shows by default in Stats
chunks now display <{parent}> >{children}< and ={siblings}= in Stats
Syntax
A resource query is supported in context
Parser now understand new Foo() expressions
Parser can now evaluate **, &, |, ^, >>>, >>, << and ~
Referencing entry point name in import() now emits a error instead of a warning
Upgraded to acorn 5

Bugfixes

Generated comments no longer break on */
webpack no longer modifies the passed options object
Compiler ""watch-run"" hook now has the Compiler as first parameter
add chunkCallbackName to the schema to allow configurating WebWorker template
Using module.id/loaded now correctly bails out of Module Concatentation (Scope Hoisting)
OccurenceOrderPlugin now sorts modules in correct order (instead of reversed)
timestamps for files are read from watcher when calling Watching.invalidate
Avoid using process.exit and use process.exitCode instead
fix bluebird warning in webpack/hot/signal
fix incorrect -! behavior with post loaders
add run and watchRun hooks for MultiCompiler
this is now undefined in ESM
Initial chunks no longer contribute to chunkhash of runtime chunk and hashes don't occur in chunk hash map
VariableDeclaration are correctly identified as var, const or let
Parser now parse the source code with the correct source type (module/script) when the module type javascript/dynamic or javascript/module is used.

Internal changes

Replaced plugin calls with tap calls (new plugin system)
Migrated many deprecated plugins to new plugin system API
added buildMeta.exportsType: ""default"" for json modules
Remove unused methods from Parser (parserStringArray, parserCalculatedStringArray)
Remove ability to clear BasicEvaluatedExpression and to have multiple types
Buffer.from instead of new Buffer
Avoid using forEach and use for of instead

Removed features

removed module.loaders
removed loaderContext.options
removed Compilation.notCacheable flag
removed NoErrorsPlugin
removed Dependency.isEqualResource
removed NewWatchingPlugin
removed CommonsChunkPlugin

Breaking changes for plugins/loaders

new plugin system
plugin method is backward-compatible
Plugins should use Compiler.hooks.xxx.tap(<plugin name>, fn) now
New major version of enhanced-resolve
Templates for chunks may now generate multiple assets
Chunk.chunks/parents/blocks are no longer Arrays. A Set is used internally and there are methods to access it.
Parser.scope.renames and Parser.scope.definitions are no longer Objects/Arrays, but Map/Sets.
Parser uses StackedSetMap (LevelDB-like datastructure) instead of Arrays
Compiler.options is no longer set while applying plugins
Harmony Dependencies has changed because of refactoring
Dependency.getReference() may now return a weak property. Dependency.weak is now used by the Dependency base class and returned in the base impl of getReference()
Constructor arguments changed for all Modules
Merged options into options object for ContextModule and resolveDependencies
Changed and renamed dependencies for `import()
Moved Compiler.resolvers into Compiler.resolverFactory accessible with plugins
Dependency.isEqualResource has been replaced with Dependency.getResourceIdentifier
Methods on Template are now static
A new RuntimeTemplate class has been added and outputOptions and requestShortener has been moved to this class
Many methods has been updated to use the RuntimeTemplate instead
We plan to move code which accesses the runtime to this new class
Module.meta has been replaced with Module.buildMeta
Module.buildInfo and Module.factoryMeta have been added
Some properties of Module have been moved into the new objects
added loaderContext.rootContext which points to the context options. Loaders may use it to make stuff relative to the application root.
add this.hot flag to loader context when HMR is enabled
buildMeta.harmony has been replaced with buildMeta.exportsType: ""namespace
The chunk graph has changed:
Before: Chunks were connected with parent-child-relationships.
Now: ChunkGroups are connected with parent-child-relationships. ChunkGroups contain Chunks in order.
Before: AsyncDependenciesBlocks reference a list of Chunks in order.
Now: AsyncDependenciesBlocks reference a single ChunkGroup.
file/contextTimestamps are Maps now
map/foreach Chunks/Modules/Parents methods are now deprecated/removed
NormalModule accept options object in Constructor
Added required generator argument for NormalModule
Added createGenerator and generator hooks for NormalModuleFactory to customize code generation
Allow to customize render manifest for Chunks via hooks
","Big changes
Environment
Node.js 4 is no longer supported. Source Code was upgraded to a higher ecmascript version.
Usage
You have to choose (mode or --mode) between two modes now: production or development
production enables all kind of optimizations to generate optimized bundles
development enables comments and hint for development and enables the eval devtool
WIP: addition hints in development mode
production doesn't support watching, development is optimized for fast incremental rebuilds
production also enables module concatenating (Scope Hoisting)
You can configure this in detail with the flags in optimization.* (build your custom mode)
process.env.NODE_ENV are set to production or development (only in built code, not in config)
There is a hidden none mode which disables everything
Syntax
import() always returns a namespace object. CommonJS modules are wrapped into the default export
This probably breaks your code, if you used to import CommonJs with import()
Configuration
You no longer need to use these plugins:
NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors (on by default in production mode)
ModuleConcatenationPlugin -> optimization.concatenateModules (on by default in production mode)
NamedModulesPlugin -> optimization.namedModules (on by default in develoment mode)
CommonsChunkPlugin was removed -> optimization.splitChunks
JSON
webpack now handles JSON natively
You may need to add type: ""javascript/auto"" when transforming JSON via loader to JS
Just using JSON without loader should still work
allows to import JSON via ESM syntax
unused exports elimination for JSON modules
Optimization
Upgrade uglifyjs-webpack-plugin to v1
ES15 support
Big features
Modules
webpack now supports these module types:
javascript/auto: (The default one in webpack 3) Javascript module with all module systems enabled: CommonJS, AMD, ESM
javascript/esm: EcmaScript modules, all other module system are not available
javascript/dynamic: Only CommonJS and, EcmaScript modules are not available
json: JSON data, it's available via require and import
webassembly/experimental: WebAssembly modules (currently experimental)
javascript/esm handles ESM more strictly compared to javascript/auto:
Imported names need to exist on imported module
Dynamic modules (non-esm, i. e. CommonJs) can only imported via default import, everything else (including namespace import) emit errors
In .mjs modules is javascript/esm by default
WebAssembly modules
can import other modules (JS and WASM)
Exports from WebAssembly modules are validated by ESM import
You'll get a warning/error when trying to import a non-existing export from WASM
can only be used in async chunks. They doesn't work in initial chunks (would be bad for web performance)
Import modules using WASM via import()
Optimization
sideEffects: false is now supported in package.json
Instead of a JSONP function a JSONP array is used -> async support
New optimization.splitChunks option was introduced
    Details: link
Dead branches are now removed by webpack itself
Before: Uglify removed the dead code
Now: webpack removes the dead code (in some cases)
This prevents crashing when import() occur in a dead branch
Syntax
webpackInclude and webpackExclude are supported by the magic comment for import(). They allow to filter files when using a dynamic expression.
Using System.import() now emits a warning
You can disable the warning with Rule.parser.system: true
You can disable System.import with Rule.parser.system: false
Configuration
Resolving can now be configured with module.rules[].resolve. It's merged with the global configuration.
optimization.minimize has been added to switch minimizing on/off
By default: on in production mode, off in development mode
optimization.minimizer has been added to configurate minimizers and options
many config options which support placeholders now also support a function
Usage
Some Plugin options are now validated
WIP: Better output, no process exit, stack trace, more plugins
CLI has been move to webpack-cli, you need to install webpack-cli to use the CLI
The ProgressPlugin (--progress) now displays plugin names
At least for plugins migrated to the new plugin system
Performance
UglifyJs now caches and parallizes by default
Multiple performance improvements, especially for faster incremental rebuilds
performance improvement for RemoveParentModulesPlugin
Stats
Stats can display modules nested in concatenated modules
Features
Configuration
Module type is automatically choosen for mjs, json and wasm extensions. Other extensions need to be configured via module.rules[].type
Incorrect options.dependencies configurations now throw error
Rule.ident is now allowed by schema
sideEffects can be overriden via module.rules
output.hashFunction can now be a Constructor to a custom hash function
You can provide a non-cryto hash function for performance reasons
add output.globalObject config option to allow to choose the global object reference in runtime exitCode
Runtime
Error for chunk loading now includes more information and two new properties type and request.
Performance
webpacks AST can be passed directly from loader to webpack to avoid extra parsing
Unused modules are no longer unnecessarly concatenated
Add a ProfilingPlugin which write a (Chrome) profile file which includes timings of plugins
Migrate to using for of instead of forEach
Migrate to using Map and Set instead of Objects
Migrate to using includes instead of indexOf
Replaced some RegExp with string methods
Queue don't enqueues the same job twice
Optimization
When using more than 25 exports mangled export names are shorter.
script tags are no longer text/javascript and async as this are the default values (saves a few bytes)
The concatenated module now generates a bit less code
constant replacements now don't need webpack_require and argument is omitted
Defaults
webpack now looks for the .wasm, .mjs, .js and .json extensions in this order
output.pathinfo is now on by default in develoment mode
in-memory caching is now off by default in production
entry defaults to ./src
output.path defaults to ./dist
Use production defaults when omiting the mode option
Usage
Add detailed progress reporting to SourceMapDevToolPlugin
Stats
Sizes are now shown in kiB instead of kB in Stats
entrypoints are now shows by default in Stats
chunks now display <{parent}> >{children}< and ={siblings}= in Stats
Syntax
A resource query is supported in context
Parser now understand new Foo() expressions
Parser can now evaluate **, &, |, ^, >>>, >>, << and ~
Referencing entry point name in import() now emits a error instead of a warning
Upgraded to acorn 5
Bugfixes
Generated comments no longer break on */
webpack no longer modifies the passed options object
Compiler ""watch-run"" hook now has the Compiler as first parameter
add chunkCallbackName to the schema to allow configurating WebWorker template
Using module.id/loaded now correctly bails out of Module Concatentation (Scope Hoisting)
OccurenceOrderPlugin now sorts modules in correct order (instead of reversed)
timestamps for files are read from watcher when calling Watching.invalidate
Avoid using process.exit and use process.exitCode instead
fix bluebird warning in webpack/hot/signal
fix incorrect -! behavior with post loaders
add run and watchRun hooks for MultiCompiler
this is now undefined in ESM
Initial chunks no longer contribute to chunkhash of runtime chunk and hashes don't occur in chunk hash map
VariableDeclaration are correctly identified as var, const or let
Parser now parse the source code with the correct source type (module/script) when the module type javascript/dynamic or javascript/module is used.
Internal changes
Replaced plugin calls with tap calls (new plugin system)
Migrated many deprecated plugins to new plugin system API
added buildMeta.exportsType: ""default"" for json modules
Remove unused methods from Parser (parserStringArray, parserCalculatedStringArray)
Remove ability to clear BasicEvaluatedExpression and to have multiple types
Buffer.from instead of new Buffer
Avoid using forEach and use for of instead
Removed features
removed module.loaders
removed loaderContext.options
removed Compilation.notCacheable flag
removed NoErrorsPlugin
removed Dependency.isEqualResource
removed NewWatchingPlugin
removed CommonsChunkPlugin
Breaking changes for plugins/loaders
new plugin system
plugin method is backward-compatible
Plugins should use Compiler.hooks.xxx.tap(, fn) now
New major version of enhanced-resolve
Templates for chunks may now generate multiple assets
Chunk.chunks/parents/blocks are no longer Arrays. A Set is used internally and there are methods to access it.
Parser.scope.renames and Parser.scope.definitions are no longer Objects/Arrays, but Map/Sets.
Parser uses StackedSetMap (LevelDB-like datastructure) instead of Arrays
Compiler.options is no longer set while applying plugins
Harmony Dependencies has changed because of refactoring
Dependency.getReference() may now return a weak property. Dependency.weak is now used by the Dependency base class and returned in the base impl of getReference()
Constructor arguments changed for all Modules
Merged options into options object for ContextModule and resolveDependencies
Changed and renamed dependencies for `import()
Moved Compiler.resolvers into Compiler.resolverFactory accessible with plugins
Dependency.isEqualResource has been replaced with Dependency.getResourceIdentifier
Methods on Template are now static
A new RuntimeTemplate class has been added and outputOptions and requestShortener has been moved to this class
Many methods has been updated to use the RuntimeTemplate instead
We plan to move code which accesses the runtime to this new class
Module.meta has been replaced with Module.buildMeta
Module.buildInfo and Module.factoryMeta have been added
Some properties of Module have been moved into the new objects
added loaderContext.rootContext which points to the context options. Loaders may use it to make stuff relative to the application root.
add this.hot flag to loader context when HMR is enabled
buildMeta.harmony has been replaced with buildMeta.exportsType: ""namespace
The chunk graph has changed:
Before: Chunks were connected with parent-child-relationships.
Now: ChunkGroups are connected with parent-child-relationships. ChunkGroups contain Chunks in order.
Before: AsyncDependenciesBlocks reference a list of Chunks in order.
Now: AsyncDependenciesBlocks reference a single ChunkGroup.
file/contextTimestamps are Maps now
map/foreach Chunks/Modules/Parents methods are now deprecated/removed
NormalModule accept options object in Constructor
Added required generator argument for NormalModule
Added createGenerator and generator hooks for NormalModuleFactory to customize code generation
Allow to customize render manifest for Chunks via hooks"
343,For changelog and feedback see https://github.com/webpack/webpack/issues/6357,For changelog and feedback see link
344,For changelog and feedback see https://github.com/webpack/webpack/issues/6244,For changelog and feedback see link
345,For changelog and feedback see https://github.com/webpack/webpack/issues/6244,For changelog and feedback see link
346,For changelog and feeback see #6179,For changelog and feeback see #6179
347,For changelog and feedback see https://github.com/webpack/webpack/issues/6132,For changelog and feedback see link
348,For changelog and feedback see https://github.com/webpack/webpack/issues/6064,For changelog and feedback see link
349,"Features:

add publicPath and fileContext to SourceMapDevToolPlugin
require.include no longer uses all exports (Tree Shaking)
","Features:
add publicPath and fileContext to SourceMapDevToolPlugin
require.include no longer uses all exports (Tree Shaking)"
350,"Bugfixes:

add ignored and stdin to schema of watchOptions
","Bugfixes:
add ignored and stdin to schema of watchOptions"
351,"Features

add more descriptions to the schema for better validation errors
Handle arrow functions in AMD define/require

Bugfixes

added stats.all option to schema
UMD uses self before this as global object
Use window instead of this in JSONP
handle null in SourceMap correctly
Use Error name instead of instanceof to check for validation Error
Respect node.js deprecation configuration for some deprecation messages in webpack
Generate shorter identifiers for ConcatenatedModules to save memory
fix increasing delay when using HMR with multiStep: true
","Features
add more descriptions to the schema for better validation errors
Handle arrow functions in AMD define/require
Bugfixes
added stats.all option to schema
UMD uses self before this as global object
Use window instead of this in JSONP
handle null in SourceMap correctly
Use Error name instead of instanceof to check for validation Error
Respect node.js deprecation configuration for some deprecation messages in webpack
Generate shorter identifiers for ConcatenatedModules to save memory
fix increasing delay when using HMR with multiStep: true"
352,"Bugfixes:

add missing keys to stats schema for validation
","Bugfixes:
add missing keys to stats schema for validation"
353,"Features:

It's now possible to include the --env data in stats (@jbottigliero)
There is a warning when trying to load a initial chunk with import() or require.ensure now (@sokra)

Bugfixes:

fix a race condition for ENOENT errors (@simon-paris)
chunk reasons comments are now set more consistent (@sokra)
fix schema for stats and be more strict (@jbottigliero)
This may lead to errors if you've provided wrong properties.
remove the absolute path from the parser error message (@sokra)
fix changed behavior when loading a initial chunk on demand (@sokra)

Performance

chunk graph is now build in breath-first traversal, which is faster (@sokra)
fix a performance problem in some edge cases (@sokra)
","Features:
It's now possible to include the --env data in stats (@jbottigliero)
There is a warning when trying to load a initial chunk with import() or require.ensure now (@sokra)
Bugfixes:
fix a race condition for ENOENT errors (@simon-paris)
chunk reasons comments are now set more consistent (@sokra)
fix schema for stats and be more strict (@jbottigliero)
This may lead to errors if you've provided wrong properties.
remove the absolute path from the parser error message (@sokra)
fix changed behavior when loading a initial chunk on demand (@sokra)
Performance
chunk graph is now build in breath-first traversal, which is faster (@sokra)
fix a performance problem in some edge cases (@sokra)"
354,"Bugfixes

fix crash for undefined optional in ExternalModule (@STRML)
","Bugfixes
fix crash for undefined optional in ExternalModule (@STRML)"
355,"Features

Static analysis can now concat string with .concat (@loganfsmyth)
add ContextExclusionPlugin to exclude files in a context (@timse)
add deepChildren flag to CommonChunkPlugin (@ArcEglos, @ljcrapo)
Allow using non-UMD externals combined with UMD externals (@NMinhNguyen)

Bugfixes

References to dll now contribute correctly to hash (@dtinth)
fix behavior of --watch-poll in CLI (@Aladdin-ADD)
set crossOrigin on script tags for HMR (@STRML)
fix usage of local AMD modules in AMD require (@chuckdumont)
show a warning when using g or y flag for context RegExp (@simon-paris)
chunk graph should be now more correct (@sokra)

Performance

fixes a performance problem with many ESM import/exports in a module (@sokra)
fixes a performance problem with heavily circular/interconnected chunks graphs (@sokra)
","Features
Static analysis can now concat string with .concat (@loganfsmyth)
add ContextExclusionPlugin to exclude files in a context (@timse)
add deepChildren flag to CommonChunkPlugin (@ArcEglos, @ljcrapo)
Allow using non-UMD externals combined with UMD externals (@NMinhNguyen)
Bugfixes
References to dll now contribute correctly to hash (@dtinth)
fix behavior of --watch-poll in CLI (@Aladdin-ADD)
set crossOrigin on script tags for HMR (@STRML)
fix usage of local AMD modules in AMD require (@chuckdumont)
show a warning when using g or y flag for context RegExp (@simon-paris)
chunk graph should be now more correct (@sokra)
Performance
fixes a performance problem with many ESM import/exports in a module (@sokra)
fixes a performance problem with heavily circular/interconnected chunks graphs (@sokra)"
356,"Bugfixes

Using folder names on CLI now correctly uses folder as entry (@gyandeeps)
Assign correct cache object to child compiler (@sokra)
","Bugfixes
Using folder names on CLI now correctly uses folder as entry (@gyandeeps)
Assign correct cache object to child compiler (@sokra)"
357,"Bugfixes

--watch-poll also accepts a number now (@civalin)
optimization bailout messages are now correctly cleared on incremental compilation (@STRML)
(back)slashes in querystring are not correctly handled when making the request relative to context (@donocode)
orginalError -> originalError in HMR API (@sokra)
fix Cannot read property '0' of undefined in harmony modules (@sokra)
Handle require to root of concatenated module correctly and don't generate __webpack_require__(null) (@sokra)
No longer use async as variable name (@sokra)
Object in options are now cloned when applying defaults (@sokra)

Performance

Performance improvements for SourceMap devtool (@filipesilva)
","Bugfixes
--watch-poll also accepts a number now (@civalin)
optimization bailout messages are now correctly cleared on incremental compilation (@STRML)
(back)slashes in querystring are not correctly handled when making the request relative to context (@donocode)
orginalError -> originalError in HMR API (@sokra)
fix Cannot read property '0' of undefined in harmony modules (@sokra)
Handle require to root of concatenated module correctly and don't generate webpack_require(null) (@sokra)
No longer use async as variable name (@sokra)
Object in options are now cloned when applying defaults (@sokra)
Performance
Performance improvements for SourceMap devtool (@filipesilva)"
358,"Bugfixes:

fixes a bug where modules where incorrectly removed from chunks resulting in call on undefined errors (can happen when using externals and CommonChunkPlugin)
Modules no longer loose __esModule flag on incremental build with ModuleConcatenationPlugin
__esModule flag is now only set when needed with the ModuleConcatenationPlugin
","Bugfixes:
fixes a bug where modules where incorrectly removed from chunks resulting in call on undefined errors (can happen when using externals and CommonChunkPlugin)
Modules no longer loose __esModule flag on incremental build with ModuleConcatenationPlugin
__esModule flag is now only set when needed with the ModuleConcatenationPlugin"
359,"Bugfixes

Warnings and errors contribute to hash, which shows stats on warning-only change
HMR: avoid crash when calling accept handler on disposed module
HMR: disable Scope Hoisting for modules using HMR
restore backwards compatibility of ConcatenatedModule (@kisenka)

Features:

Add option to limit the number of parallel processed modules (parallelism)
","Bugfixes
Warnings and errors contribute to hash, which shows stats on warning-only change
HMR: avoid crash when calling accept handler on disposed module
HMR: disable Scope Hoisting for modules using HMR
restore backwards compatibility of ConcatenatedModule (@kisenka)
Features:
Add option to limit the number of parallel processed modules (parallelism)"
360,"Bugfixes

fixes a name conflict with the ModuleConcatenationPlugin
","Bugfixes
fixes a name conflict with the ModuleConcatenationPlugin"
361,"Bugfixes:

fixes stack overflow with circular dependencies (ModuleConcatenationPlugin)
","Bugfixes:
fixes stack overflow with circular dependencies (ModuleConcatenationPlugin)"
362,"Bugfixes:

fix invalid syntax when using non-number ids with Scope Hoisting
","Bugfixes:
fix invalid syntax when using non-number ids with Scope Hoisting"
363,"Features:

add stats.excludeAssets to allow to filter assets in list (@ldrick)
add import(/* webpackMode: ""weak"" */ ""module"") to try to load a module without network request (@faceyspacey)
add 4. argument to require.context which is the context mode. Can be false, ""eager"", ""lazy-once"", ""weak"" and ""async-weak"". (@faceyspacey)
require.resolveWeak now support expressions (@faceyspacey)
generate only a single require for modules references in scope-hoisted modules (ModuleConcatenationPlugin)

Bugfixes:

keep correct import order when using the ModuleConcatenationPlugin
Generate shorter, more readable identifiers in ConcatenatedModule
--help output is flushed before process exit (@esbenp)
exit code is reliable reported for CLI validation error (@polomsky)
stats options are now validated by schema (@esbenp)
fixes problem when using the CommonsChunkPlugin in async mode without name argument
fixes description of --resolve-extensions (@tomek-d)
fixes has no internal name when using dependency variable in root of scope-hoisted modules (ModuleConcatenationPlugin)

Examples:

add an example for dll + app (@aretecode)
","Features:
add stats.excludeAssets to allow to filter assets in list (@ldrick)
add import(/ webpackMode: ""weak"" / ""module"") to try to load a module without network request (@faceyspacey)
add 4. argument to require.context which is the context mode. Can be false, ""eager"", ""lazy-once"", ""weak"" and ""async-weak"". (@faceyspacey)
require.resolveWeak now support expressions (@faceyspacey)
generate only a single require for modules references in scope-hoisted modules (ModuleConcatenationPlugin)
Bugfixes:
keep correct import order when using the ModuleConcatenationPlugin
Generate shorter, more readable identifiers in ConcatenatedModule
--help output is flushed before process exit (@esbenp)
exit code is reliable reported for CLI validation error (@polomsky)
stats options are now validated by schema (@esbenp)
fixes problem when using the CommonsChunkPlugin in async mode without name argument
fixes description of --resolve-extensions (@tomek-d)
fixes has no internal name when using dependency variable in root of scope-hoisted modules (ModuleConcatenationPlugin)
Examples:
add an example for dll + app (@aretecode)"
364,"Bugfixes:

fix incorrect warnings about exports when using the DllReferencePlugin
","Bugfixes:
fix incorrect warnings about exports when using the DllReferencePlugin"
365,"Features:

Improved optimization bailout messages
NamedModulesPlugins and HashedModuleIdsPlugin work now properly with delegated modules (DllReferencePlugin) and externals.
add --config-name option to choose a config by name for compiling a part of the config
Improved error message when parsing in ModuleConcatenationPlugin fails
Upgrade a lot of dependencies
Child compilation names are not relative in stats

Bugfixes:

Fix setting boolean options in configuration (profile, bail)
Fix ""uncatched"" exception in HMR runtime code
Fix two cases where ModuleConcatenationPlugin crashes (missing internal name)
Concatating delegated modules (from Dlls)
reference to the default export of the root module
Fix --module-bind-pre and --module-bind-post

Performance:

Performance improvements in 
SourceMapDevToolPlugin
AggressiveSplittingPlugin
NormalModule variable injection
Parser
RecordIdsPlugin
Stats
","Features:
Improved optimization bailout messages
NamedModulesPlugins and HashedModuleIdsPlugin work now properly with delegated modules (DllReferencePlugin) and externals.
add --config-name option to choose a config by name for compiling a part of the config
Improved error message when parsing in ModuleConcatenationPlugin fails
Upgrade a lot of dependencies
Child compilation names are not relative in stats
Bugfixes:
Fix setting boolean options in configuration (profile, bail)
Fix ""uncatched"" exception in HMR runtime code
Fix two cases where ModuleConcatenationPlugin crashes (missing internal name)
Concatating delegated modules (from Dlls)
reference to the default export of the root module
Fix --module-bind-pre and --module-bind-post
Performance:
Performance improvements in 
SourceMapDevToolPlugin
AggressiveSplittingPlugin
NormalModule variable injection
Parser
RecordIdsPlugin
Stats"
366,"Features:

HMR logging now displays an expandable shorter module id.

Bugfixes:

Fix refactoring typo this.compiler.compiler is not a function
NormalModule source can be cache between compilations (performance for incremental builds)
webpack now also watches when missing directories are added (i. e. when a module was missing and is installed)
","Features:
HMR logging now displays an expandable shorter module id.
Bugfixes:
Fix refactoring typo this.compiler.compiler is not a function
NormalModule source can be cache between compilations (performance for incremental builds)
webpack now also watches when missing directories are added (i. e. when a module was missing and is installed)"
367,"Features:

add resolve.cacheWithContext to schema
add workaround for chrome with eval-source-maps
update webpack-sources for performance reasons
allow [contenthash] in sourceMapFilename as workaround for a caching bug
","Features:
add resolve.cacheWithContext to schema
add workaround for chrome with eval-source-maps
update webpack-sources for performance reasons
allow [contenthash] in sourceMapFilename as workaround for a caching bug"
368,"Bugfixes:

fix duplicate entries in SourceMaps.
call imported functions with correct context.
support strictThisContextOnImports in ConcatenatedModules.
fix a bug which prevents parsing arguments for imported function calls when using strictThisContextOnImports.
support nested .call() renames of this.
fix typeof with require.resolve(Weak).
fix hashing with ConcatenatedModules.
","Bugfixes:
fix duplicate entries in SourceMaps.
call imported functions with correct context.
support strictThisContextOnImports in ConcatenatedModules.
fix a bug which prevents parsing arguments for imported function calls when using strictThisContextOnImports.
support nested .call() renames of this.
fix typeof with require.resolve(Weak).
fix hashing with ConcatenatedModules."
369,"Features:

Allow different library names for UMD
Support for passing a defined identifier as this in a IIFE
Use the new resolve performance option cacheWithContext: false by default when it's safe
Support array of functions as configuration
add sortModules to Chunk which is required in extract-text-plugin to support webpack 3

Bugfixes:

! with truthy webpack identifier will evaluate correctly
assets and dependencies are preserved in concatenated modules
Fix some internal usage of deprecated APIs
","Features:
Allow different library names for UMD
Support for passing a defined identifier as this in a IIFE
Use the new resolve performance option cacheWithContext: false by default when it's safe
Support array of functions as configuration
add sortModules to Chunk which is required in extract-text-plugin to support webpack 3
Bugfixes:
! with truthy webpack identifier will evaluate correctly
assets and dependencies are preserved in concatenated modules
Fix some internal usage of deprecated APIs"
370,"Changes from 2.6.1 to 3.0.0
Features

node_modules no longer mangle to ~ in stats [breaking change]
timeout for HMR requests is configurable
added experimental Scope Hoisting (webpack.optimize.ModuleConcatenationPlugin)
some performance improvements
added output.libraryExport to select an export for the library
sourceMapFilename now supports [contenthash] [breaking change]
module.noParse supports functions
add node: false option to disable all node specific additions

Bugfixes

add workaround for breakpoints in eval source maps (chrome)
avoid creating redundant connections in chunk graph
enable chunk modules in stats by default
add special behavior when using CommonsChunkPlugin with only async option
error is shown when hot-only HMR fails
fixed a few issues with weird stats output [breaking change]
fixed a bug in occurrence order plugin [breaking change]
optimization plugins now only affect the current compilation [breaking change]
context now also include index files [breaking change]
require.resolve evaluate truthy [breaking change]
import order no longer adds to hash
Hashing for RawModule fixed

Internal changes

child compilations get records and cache assigned (they need a unique name) [breaking change]
Set is used for Child.modules, Module.chunks, Reason.chunks [breaking change]
uglifyjs-plugin is moved into separate repository

Changes from 3.0.0-rc.2 to 3.0.0
Bugfixes

fix duplicate dependencies in ConcatenatedModule
Hashing for RawModule fixed

Internal changes

uglifyjs-plugin is moved into separate repository
","Changes from 2.6.1 to 3.0.0
Features
node_modules no longer mangle to ~ in stats [breaking change]
timeout for HMR requests is configurable
added experimental Scope Hoisting (webpack.optimize.ModuleConcatenationPlugin)
some performance improvements
added output.libraryExport to select an export for the library
sourceMapFilename now supports [contenthash] [breaking change]
module.noParse supports functions
add node: false option to disable all node specific additions
Bugfixes
add workaround for breakpoints in eval source maps (chrome)
avoid creating redundant connections in chunk graph
enable chunk modules in stats by default
add special behavior when using CommonsChunkPlugin with only async option
error is shown when hot-only HMR fails
fixed a few issues with weird stats output [breaking change]
fixed a bug in occurrence order plugin [breaking change]
optimization plugins now only affect the current compilation [breaking change]
context now also include index files [breaking change]
require.resolve evaluate truthy [breaking change]
import order no longer adds to hash
Hashing for RawModule fixed
Internal changes
child compilations get records and cache assigned (they need a unique name) [breaking change]
Set is used for Child.modules, Module.chunks, Reason.chunks [breaking change]
uglifyjs-plugin is moved into separate repository
Changes from 3.0.0-rc.2 to 3.0.0
Bugfixes
fix duplicate dependencies in ConcatenatedModule
Hashing for RawModule fixed
Internal changes
uglifyjs-plugin is moved into separate repository"
371,"Features

Scope Hoisting now works for module in multiple chunks
chunks in module reason is now a Set for better performance

Bugfixes

add workaround for breakpoints in eval source maps (chrome)
avoid creating redundant connections in chunk graph
enable chunk modules in stats by default
add special behavior when using CommonsChunkPlugin with only async option
Scope Hoisting: rename correctly when using shorthand declarations
","Features
Scope Hoisting now works for module in multiple chunks
chunks in module reason is now a Set for better performance
Bugfixes
add workaround for breakpoints in eval source maps (chrome)
avoid creating redundant connections in chunk graph
enable chunk modules in stats by default
add special behavior when using CommonsChunkPlugin with only async option
Scope Hoisting: rename correctly when using shorthand declarations"
372,"Bugfixes:

CLI args --display-modules and --display-optimization-bailout now work as expected
Scope Hoisting + class now works correctly
Scope Hoisting + namespace exports works correctly
deprecation for Module.chunks now works correctly
","Bugfixes:
CLI args --display-modules and --display-optimization-bailout now work as expected
Scope Hoisting + class now works correctly
Scope Hoisting + namespace exports works correctly
deprecation for Module.chunks now works correctly"
373,"Features

node_modules no longer mangle to ~ in stats [breaking change]
timeout for HMR requests is configurable
added experimental Scope Hoisting (webpack.optimize.ModuleConcatenationPlugin)
some performance improvements
added output.libraryExport to select an export for the library
sourceMapFilename now supports [contenthash] [breaking change]
module.noParse supports functions
add node: false option to disable all node specific additions

Bugfixes

error is shown when hot-only HMR fails
fixed a few issues with weird stats output [breaking change]
fixed a bug in occurrence order plugin [breaking change]
optimization plugins now only affect the current compilation [breaking change]
context now also include index files [breaking change]
require.resolve evaluate truthy [breaking change]
import order no longer adds to hash

Internal changes

child compilations get records and cache assigned (they need a unique name) [breaking change]
Set is used for Child.modules and Module.chunks [breaking change]
","Features
node_modules no longer mangle to ~ in stats [breaking change]
timeout for HMR requests is configurable
added experimental Scope Hoisting (webpack.optimize.ModuleConcatenationPlugin)
some performance improvements
added output.libraryExport to select an export for the library
sourceMapFilename now supports [contenthash] [breaking change]
module.noParse supports functions
add node: false option to disable all node specific additions
Bugfixes
error is shown when hot-only HMR fails
fixed a few issues with weird stats output [breaking change]
fixed a bug in occurrence order plugin [breaking change]
optimization plugins now only affect the current compilation [breaking change]
context now also include index files [breaking change]
require.resolve evaluate truthy [breaking change]
import order no longer adds to hash
Internal changes
child compilations get records and cache assigned (they need a unique name) [breaking change]
Set is used for Child.modules and Module.chunks [breaking change]"
374,"Bugfixes:

Promise is now only needed when loading chunk, not in initialization
variable injection in require.ensure is now working again
better comment message when no export found (output.pathinfo)
","Bugfixes:
Promise is now only needed when loading chunk, not in initialization
variable injection in require.ensure is now working again
better comment message when no export found (output.pathinfo)"
375,"Features:

add webpackMode comment option for import()
add output.chunkLoadTimeout

Bugfixes:

fixed providing webpackChunkName for import() with expression
fixed parsing of destructing in assignment
fixed some edge cases when parsing declarations
","Features:
add webpackMode comment option for import()
add output.chunkLoadTimeout
Bugfixes:
fixed providing webpackChunkName for import() with expression
fixed parsing of destructing in assignment
fixed some edge cases when parsing declarations"
376,"Bugfixes:

Fix crash when error happens while watching
Fix hoisting of exports
","Bugfixes:
Fix crash when error happens while watching
Fix hoisting of exports"
377,"Bugfixes:

add hashSalt to schema
webpack's source code no longer contains sourceMappingURL, which caused issues with some tools
Added missing semicolon in dll-imported modules
DllPlugin manifest is smaller (not pretty printed)
CommonsChunkPlugin in async mode doesn't extract from initial chunks

Features:

allow placeholders in the BannerPlugin
add option to disable the module trace in stats
","Bugfixes:
add hashSalt to schema
webpack's source code no longer contains sourceMappingURL, which caused issues with some tools
Added missing semicolon in dll-imported modules
DllPlugin manifest is smaller (not pretty printed)
CommonsChunkPlugin in async mode doesn't extract from initial chunks
Features:
allow placeholders in the BannerPlugin
add option to disable the module trace in stats"
378,"Bugfixes:

Fix scope analysis in function declarations
","Bugfixes:
Fix scope analysis in function declarations"
379,"Highlighted Features:
import() now allows to configure a chunk name
js
import(/* webpackChunkName: ""my-chunk-name"" */ ""module"")
require.ensure has a error callback
js
require.ensure([], () => {
    require(""a"");
}, err => {
    console.error(""We failed to load chunk: "" + err);
}, ""chunk-name"");
Features:

update to acorn 5
resolve context is provided to resolver
add warningsFilter to stats options to filter warnings
add __webpack_chunkname__ to ExtendedAPIPlugin
support string chunk ids
add NamedChunksPlugin which allows to set chunk id, i. e. to chunk name
allow to provided different watch options for multiple compilations
add error handler callback to require.ensure
add chunk name option for import()

Bugfixes:

main flag for HMR is set correctly
ignored modules are now context-agnositic
recorded paths are now platform-agnositic
fix for local AMD modules which wrap commonjs
erros now print more detailed message when logged
fix missing SourceMaps for non-entry chunks after rebuild
variables now hoist in scope
","Highlighted Features:
import() now allows to configure a chunk name
js
import(/ webpackChunkName: ""my-chunk-name"" / ""module"")
require.ensure has a error callback
js
require.ensure([], () => {
    require(""a"");
}, err => {
    console.error(""We failed to load chunk: "" + err);
}, ""chunk-name"");
Features:
update to acorn 5
resolve context is provided to resolver
add warningsFilter to stats options to filter warnings
add webpack_chunkname to ExtendedAPIPlugin
support string chunk ids
add NamedChunksPlugin which allows to set chunk id, i. e. to chunk name
allow to provided different watch options for multiple compilations
add error handler callback to require.ensure
add chunk name option for import()
Bugfixes:
main flag for HMR is set correctly
ignored modules are now context-agnositic
recorded paths are now platform-agnositic
fix for local AMD modules which wrap commonjs
erros now print more detailed message when logged
fix missing SourceMaps for non-entry chunks after rebuild
variables now hoist in scope"
380,"Note: webpack 1 do no longer receive bugfixes/features. Please upgrade to webpack 2.
Bugfixes:

check for own property when adding modules from chunk (IE8)
support uglifyjs mangle options

Features:

wrap module function in parentheses
","Note: webpack 1 do no longer receive bugfixes/features. Please upgrade to webpack 2.
Bugfixes:
check for own property when adding modules from chunk (IE8)
support uglifyjs mangle options
Features:
wrap module function in parentheses"
381,"Bugfixes:

fix progress in multi compiler
","Bugfixes:
fix progress in multi compiler"
382,"Bugfixes:

Fix performance issue with cheap-source-maps
Fix a line offset issue with cheap-source-maps
Allow lowercased drive letters as absolute paths (not recommended)
Improve some error reporting
","Bugfixes:
Fix performance issue with cheap-source-maps
Fix a line offset issue with cheap-source-maps
Allow lowercased drive letters as absolute paths (not recommended)
Improve some error reporting"
383,"Bugfixes:

add stacktrace when calling emitWarning/Error from loader with non-Error value
remove extra newline in absolute/relative path validation
fix crash in MinChunkSizePlugin
","Bugfixes:
add stacktrace when calling emitWarning/Error from loader with non-Error value
remove extra newline in absolute/relative path validation
fix crash in MinChunkSizePlugin"
384,"Features:

add extensions option to DllReferencePlugin
add warningsFilter to UglifyJsPlugin to hide warnings selectively
add extractComments to UglifyJsPlugin to move kept comments into separate file (i. e. LICENSE file)
validate relative and absolute paths in configuration
validate stats options
allow to match on compiler (name in configuration) in rules
i. e. allows to specify different rules for extract-text-webpack-plugin or html-webpack-plugin
Allow to pass multiple entries via CLI
Performance improvements
CommonsChunkPlugin give errors on incorrect options
add module.strictExportPresence to make missing export an error instead of warning
Compiler emits watch-close event when the watcher is closed
Allow additional compress options in UglifyJsPlugin
empty chunk numbers are not flags in every chunk, this improves caching invalidation

Bugfixes:

OccurrenceOrderPlugin now counts occurrences correctly
Fix cheap-source-maps when combined with ES Modules (lines were offset)
Watcher now detects file deleting correctly
Resolve output path if relative output path is given via CLI
Handle stack traces in errors correctly
Some usages of System now generate valid code i. e. System.global
Dynamic property names are now parsed and can contain webpack stuff (i. e. imports)
Empty enviroment variables are now supported in the EnvironmentPlugin
(Maybe) Fixes chunk loading in IE when script is cached

Notes
The validation now fails when passing absolute paths with lowercase drive letter on windows.
(i. e. c:\work\stuff instead of C:\work\stuff)
Lowercase drive letters will cause weird errors (node.js behavior is inconsistent about drive letter casing) in some cases.
So please fix the paths in your shell resp. your tooling and always call webpack with uppercase drive letter. Don't use lowercase drive letters.","Features:
add extensions option to DllReferencePlugin
add warningsFilter to UglifyJsPlugin to hide warnings selectively
add extractComments to UglifyJsPlugin to move kept comments into separate file (i. e. LICENSE file)
validate relative and absolute paths in configuration
validate stats options
allow to match on compiler (name in configuration) in rules
i. e. allows to specify different rules for extract-text-webpack-plugin or html-webpack-plugin
Allow to pass multiple entries via CLI
Performance improvements
CommonsChunkPlugin give errors on incorrect options
add module.strictExportPresence to make missing export an error instead of warning
Compiler emits watch-close event when the watcher is closed
Allow additional compress options in UglifyJsPlugin
empty chunk numbers are not flags in every chunk, this improves caching invalidation
Bugfixes:
OccurrenceOrderPlugin now counts occurrences correctly
Fix cheap-source-maps when combined with ES Modules (lines were offset)
Watcher now detects file deleting correctly
Resolve output path if relative output path is given via CLI
Handle stack traces in errors correctly
Some usages of System now generate valid code i. e. System.global
Dynamic property names are now parsed and can contain webpack stuff (i. e. imports)
Empty enviroment variables are now supported in the EnvironmentPlugin
(Maybe) Fixes chunk loading in IE when script is cached
Notes
The validation now fails when passing absolute paths with lowercase drive letter on windows.
(i. e. c:\work\stuff instead of C:\work\stuff)
Lowercase drive letters will cause weird errors (node.js behavior is inconsistent about drive letter casing) in some cases.
So please fix the paths in your shell resp. your tooling and always call webpack with uppercase drive letter. Don't use lowercase drive letters."
385,"Bugfixes:

ident is no longer required, but it will choose one automatically
DefinePlugin no longer generates invalid code when using nested objects without semicolons

Features:

You can provide defaults and silence warnings of the EnvironmentPlugin now
","Bugfixes:
ident is no longer required, but it will choose one automatically
DefinePlugin no longer generates invalid code when using nested objects without semicolons
Features:
You can provide defaults and silence warnings of the EnvironmentPlugin now"
386,"The first webpack 2 release
No changes here. It's equal to the last RC, but with an updated version number.
Here is a migration guide if you want to migrate from webpack 1 to webpack 2.
Here is a blog post about the release.
Here is the documentation for webpack 2. It's new!","The first webpack 2 release
No changes here. It's equal to the last RC, but with an updated version number.
Here is a migration guide if you want to migrate from webpack 1 to webpack 2.
Here is a blog post about the release.
Here is the documentation for webpack 2. It's new!"
387,"Bugfixes:

fix watch flag in config with multiple configs
hoist export * from correctly to prevent use before define bug

Optimization:

remove some properties which are set to the default value
","Bugfixes:
fix watch flag in config with multiple configs
hoist export * from correctly to prevent use before define bug
Optimization:
remove some properties which are set to the default value"
388,"Bugfixes:

It's now possible to use var injections (i. e. global, ProvidePlugin) in ESM
","Bugfixes:
It's now possible to use var injections (i. e. global, ProvidePlugin) in ESM"
389,"Breaking change:

Reverted breaking change from last version
In ES module (import or export exists in module):
exports is undefined
define is undefined
module.exports is read-only and undefined

Bugfixes:

stats are no longer ignored when using the CLI
engine excludes now correctly node.js 5
export default now inserts the semicolon at the correct position
","Breaking change:
Reverted breaking change from last version
In ES module (import or export exists in module):
exports is undefined
define is undefined
module.exports is read-only and undefined
Bugfixes:
stats are no longer ignored when using the CLI
engine excludes now correctly node.js 5
export default now inserts the semicolon at the correct position"
390,"Node.js dropped support for 0.12, so we do.
Breaking changes:

Using CommonJS or AMD export stuff in a ES2015 module will emit errors.

Usablility:

performance hints are off by default. It was too annoying, but you can still see the [big] flag by default.

Bugfixes:

webpack now exits with non-zero exit code when configuration Promise is rejected.

Features:

ProvidePlugin supports passing array to access members of a module
renamed NoErrorsPlugin to NoEmitOnErrorsPlugin, NoErrorsPlugin is still working but is deprecated

Development:

Migrated many internal classes to ES2015
improved tests, linting and CI
added testcases for CLI

Final Release
This is probably the last RC. We released it as final test.
If no critial bugs are discovered, we release 2.2.0 in < 10 days.","Node.js dropped support for 0.12, so we do.
Breaking changes:
Using CommonJS or AMD export stuff in a ES2015 module will emit errors.
Usablility:
performance hints are off by default. It was too annoying, but you can still see the [big] flag by default.
Bugfixes:
webpack now exits with non-zero exit code when configuration Promise is rejected.
Features:
ProvidePlugin supports passing array to access members of a module
renamed NoErrorsPlugin to NoEmitOnErrorsPlugin, NoErrorsPlugin is still working but is deprecated
Development:
Migrated many internal classes to ES2015
improved tests, linting and CI
added testcases for CLI
Final Release
This is probably the last RC. We released it as final test.
If no critial bugs are discovered, we release 2.2.0 in < 10 days."
391,"Bugfixes:

fixes chunk loading in old IEs 
fixes error which prevented using arrow functions in require.ensure (https://github.com/webpack/webpack/commit/ccfc6085204640f44d785111a92380edc6edc726)
fixes bug when passing function to rules.use (https://github.com/webpack/webpack/commit/44baa7c410131a405d4357858d732124b814d204)
fixes bug for --progress output (https://github.com/webpack/webpack/commit/0636e7cf79178fc36a144591e901e1baafec06c2)
fixes bug with export * and non-harmony modules (https://github.com/webpack/webpack/commit/ee3d53cb9314ea2313184b3a198f288b89375342)
fixes bug when removing assets from the compilation (https://github.com/webpack/webpack/commit/cb4c209fcf150a7915ae7c324f440662da53d40d)
","Bugfixes:
fixes chunk loading in old IEs 
fixes error which prevented using arrow functions in require.ensure (link)
fixes bug when passing function to rules.use (link)
fixes bug for --progress output (link)
fixes bug with export * and non-harmony modules (link)
fixes bug when removing assets from the compilation (link)"
392,"Features:

Stats output now disables only 15 modules by default (see new option stats.maxModules, --display-max-modules)
Stats for modules now includes a depth for modules which is the distance to the entry point.
add --display-depth for CLI to display the module depth in stats

Bugfixes:

Cached modules now correctly reset meta information
arrow functions in require.ensure now work correctly
","Features:
Stats output now disables only 15 modules by default (see new option stats.maxModules, --display-max-modules)
Stats for modules now includes a depth for modules which is the distance to the entry point.
add --display-depth for CLI to display the module depth in stats
Bugfixes:
Cached modules now correctly reset meta information
arrow functions in require.ensure now work correctly"
393,"Bugfixes:

webpack was not able to recover after an error in a file occured in watch mode
It was not possible to set UglifyJs screw_ie8 option
","Bugfixes:
webpack was not able to recover after an error in a file occured in watch mode
It was not possible to set UglifyJs screw_ie8 option"
394,"This is the first RC for webpack 2. We will try to avoid breaking changes now until webpack 3.
Bugfixes:

id in generated code of a context module is correctly escaped
context modules are now affected by NamedModulesPlugin, HashedModuleIdsPlugin, DllPlugin
performance hints ignore SourceMaps now
don't include multiple use stricts
imports also mark the module as ES2015 module like exports
exit the process correctly when watching and a critical error happens
externals are no longer moved by the commons chunk plugin

Features:

entrypoints are flagged with [big] if they are over the limit
improve validation errors
allow to alias loaders to a value with query
performance improvements
","This is the first RC for webpack 2. We will try to avoid breaking changes now until webpack 3.
Bugfixes:
id in generated code of a context module is correctly escaped
context modules are now affected by NamedModulesPlugin, HashedModuleIdsPlugin, DllPlugin
performance hints ignore SourceMaps now
don't include multiple use stricts
imports also mark the module as ES2015 module like exports
exit the process correctly when watching and a critical error happens
externals are no longer moved by the commons chunk plugin
Features:
entrypoints are flagged with [big] if they are over the limit
improve validation errors
allow to alias loaders to a value with query
performance improvements"
395,"Major changes:

add import() as Code Splitting construct. It should be used instead of System.import when possible. System.import will be deprecated in webpack 2 release (removed in webpack 3) as it's behavior is incorrect according to the spec.
*.json files are now supported without the json-loader. You may still use it. It's not a breaking change.
webpack will now show performance warnings when bundle size is too big. You can disable them with performance.hints = false. It recommended to disable them in development but leave them enabled in production.

Bugfixes:

Generate equal code on each platform when using node.js modules, module, process, global, etc.
CLI: Fixes --module-bind for the -loader change
Validation: externals now allows boolean values
Loaders: Complex options are now correctly passed when using remainingRequest like with the style-loader
Fixes a event leak when using watch mode
Stats: exclude now only tests resource and not complete identifier
Fixes bug related to export * from ...
CLI: Fix behavior of --cache and --no-cache
It's now possible to combine webpack ES2015 modules with babel ES2015 modules

Features:

add output.strictModuleExceptionHandling option which handles exceptions in modules correctly, but with less performance. The more performant variant is enabled by default.
Template strings are now allowed at locations where expressions are allowed. import(./template/${template})
Allow to match rules on resourceQuery
add __webpack_nonce__ to set nonce for chunk loading script tags
Improve tree shaking for import *

Performance:

Cache some expensive stuff 


🎄 We are approaching the first Release Candidate... ","Major changes:
add import() as Code Splitting construct. It should be used instead of System.import when possible. System.import will be deprecated in webpack 2 release (removed in webpack 3) as it's behavior is incorrect according to the spec.
*.json files are now supported without the json-loader. You may still use it. It's not a breaking change.
webpack will now show performance warnings when bundle size is too big. You can disable them with performance.hints = false. It recommended to disable them in development but leave them enabled in production.
Bugfixes:
Generate equal code on each platform when using node.js modules, module, process, global, etc.
CLI: Fixes --module-bind for the -loader change
Validation: externals now allows boolean values
Loaders: Complex options are now correctly passed when using remainingRequest like with the style-loader
Fixes a event leak when using watch mode
Stats: exclude now only tests resource and not complete identifier
Fixes bug related to export * from ...
CLI: Fix behavior of --cache and --no-cache
It's now possible to combine webpack ES2015 modules with babel ES2015 modules
Features:
add output.strictModuleExceptionHandling option which handles exceptions in modules correctly, but with less performance. The more performant variant is enabled by default.
Template strings are now allowed at locations where expressions are allowed. import(./template/${template})
Allow to match rules on resourceQuery
add webpack_nonce to set nonce for chunk loading script tags
Improve tree shaking for import *
Performance:
Cache some expensive stuff 
🎄 We are approaching the first Release Candidate... "
396,"Bugfixes:

fix this context for AMD require when combined with async commons chunk
update core dependency, which fixes a SourceMap bug
update node.js core libs
","Bugfixes:
fix this context for AMD require when combined with async commons chunk
update core dependency, which fixes a SourceMap bug
update node.js core libs"
397,"Bugfixes:

fixed indexed access to imported namespace object import * as X; X[""abc""]
Deprecated DedupePlugin
Display an additional message for the breaking change in beta.26 to hint the user
fixed schema validation problem with noParse
","Bugfixes:
fixed indexed access to imported namespace object import * as X; X[""abc""]
Deprecated DedupePlugin
Display an additional message for the breaking change in beta.26 to hint the user
fixed schema validation problem with noParse"
398,"Breaking Changes:
-loader is no longer automatically added when resolving loaders
This was removed because it often lead to problems.
You can still opt-in to the old behavior with the resolveLoader.moduleExtensions configuration option.
Node.js 0.10 is no longer supported
Node.js LTS for this version is expired. You won't miss it.
Note: 0.12 will expire in December 2017. We will remove it soon too.
Features:

AMD require now supports an error callback as 3rd argument

Bugfixes:

Declarations from destruction now hides imports
The parser now detects identifiers in destruction and default arguments
The parser no longer crashes on empty patterns [, a]
The schema now validates more stuff correctly
--version now works correctly
","Breaking Changes:
-loader is no longer automatically added when resolving loaders
This was removed because it often lead to problems.
You can still opt-in to the old behavior with the resolveLoader.moduleExtensions configuration option.
Node.js 0.10 is no longer supported
Node.js LTS for this version is expired. You won't miss it.
Note: 0.12 will expire in December 2017. We will remove it soon too.
Features:
AMD require now supports an error callback as 3rd argument
Bugfixes:
Declarations from destruction now hides imports
The parser now detects identifiers in destruction and default arguments
The parser no longer crashes on empty patterns [, a]
The schema now validates more stuff correctly
--version now works correctly"
399,"Features:

better error message for debug and custom properties.

Fixed Bugs:

node configuration also accepts ""empty""
fixed a Testcase
","Features:
better error message for debug and custom properties.
Fixed Bugs:
node configuration also accepts ""empty""
fixed a Testcase"
400,"Breaking changes:

renamed enforce: ""left""/""right"" to enforce: ""pre""/""post"", because it's easier to understand and makes migration simpler

Fixed bugs:

Validation
added special error message which points to the LoaderOptionsPlugin
Schema
sort alphabetically
fixes issues with oneOf schema type
CI
fixed build
","Breaking changes:
renamed enforce: ""left""/""right"" to enforce: ""pre""/""post"", because it's easier to understand and makes migration simpler
Fixed bugs:
Validation
added special error message which points to the LoaderOptionsPlugin
Schema
sort alphabetically
fixes issues with oneOf schema type
CI
fixed build"
401,"Breaking Changes:
removed postLoaders and preLoaders
rules enforce: ""left"" and enforce: ""right"" can be used instead.
rules should be used instead of loaders, but the old one still work.
Same syntax + additional options. Allows to configure the parser too. Allows matching by issuer.
configuration is validated against a schema
moved parser instancation into NormalModuleFactory
compiler.parser must no longer be used. Use this instead:
js
compiler.plugin(""compilation"", function(compilation, params) {
  params.normalModuleFactory.plugin(""parser"", function(parser, parserOptions) {
    parser.plugin(/* ... */);
  });
});
Features:

DllReferencePlugin
added extensions option.
manifest can be a path to a manifest, which is resolve at compile time.
Rules
parser can be configured. Disable parsing features is now possible.
loader options (query) can be any object now. (Before only stringify-able object were possible)
Loaders
loader-runner: loaders can return a Promise.
Compilation
WebWorker: fixed HMR template
ChunkModuleIdRangePlugin: added experimental plugin to assign module ids to a chunk. (related to Long Term Caching)
UglifyJs: version updated.
MultiCompiler: dependencies parameter added. Allows to specify dependencies with multiple configurations. They are compiled in this order.
CLI
multiple --configs allowed.
added --display-provided-exports and --display-used-exports
-v prints version
CI
.editorconfig is validated

Fixed Bugs:

Tree Shaking
System parsing

Migration Example
Below is an example PR that you can reference to help assist you in migrating from .22 to .23:
https://github.com/angular/angular-cli/pull/2237/files","Breaking Changes:
removed postLoaders and preLoaders
rules enforce: ""left"" and enforce: ""right"" can be used instead.
rules should be used instead of loaders, but the old one still work.
Same syntax + additional options. Allows to configure the parser too. Allows matching by issuer.
configuration is validated against a schema
moved parser instancation into NormalModuleFactory
compiler.parser must no longer be used. Use this instead:
js
compiler.plugin(""compilation"", function(compilation, params) {
  params.normalModuleFactory.plugin(""parser"", function(parser, parserOptions) {
    parser.plugin(/ ... /);
  });
});
Features:
DllReferencePlugin
added extensions option.
manifest can be a path to a manifest, which is resolve at compile time.
Rules
parser can be configured. Disable parsing features is now possible.
loader options (query) can be any object now. (Before only stringify-able object were possible)
Loaders
loader-runner: loaders can return a Promise.
Compilation
WebWorker: fixed HMR template
ChunkModuleIdRangePlugin: added experimental plugin to assign module ids to a chunk. (related to Long Term Caching)
UglifyJs: version updated.
MultiCompiler: dependencies parameter added. Allows to specify dependencies with multiple configurations. They are compiled in this order.
CLI
multiple --configs allowed.
added --display-provided-exports and --display-used-exports
-v prints version
CI
.editorconfig is validated
Fixed Bugs:
Tree Shaking
System parsing
Migration Example
Below is an example PR that you can reference to help assist you in migrating from .22 to .23:
link"
