Index,Release Note,Release Note Abstract
1,"What's Changed
6.13.0 is really a patch release in spirit but comes with a SemVer minor bump since we added a new future flag.
The tl;dr; is that 6.13.0 is the same as 6.12.0 bue we've moved the usage of React.startTransition behind an opt-in future.v7_startTransition future flag because we found that there are applications in the wild that are currently using Suspense in ways that are incompatible with React.startTransition.
Therefore, in 6.13.0 the default behavior will no longer leverage React.startTransition:
```jsx

{/.../}


```
If you wish to enable React.startTransition, pass the future flag to your router component:
```jsx

{/.../}


```
We recommend folks adopt this flag sooner rather than later to be better compatible with React concurrent mode, but if you run into issues you can continue without the use of React.startTransition until v7. Issues usually boil down to creating net-new promises during the render cycle, so if you run into issues when opting into React.startTransition, you should either lift your promise creation out of the render cycle or put it behind a useMemo.
Minor Changes

Move React.startTransition usage behinds a future flag (#10596)

Patch Changes

Work around webpack/terser React.startTransition minification bug in production mode (#10588)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.12.1...react-router@6.13.0","What's Changed
6.13.0 is really a patch release in spirit but comes with a SemVer minor bump since we added a new future flag.
The tl;dr; is that 6.13.0 is the same as 6.12.0 bue we've moved the usage of React.startTransition behind an opt-in future.v7_startTransition future flag because we found that there are applications in the wild that are currently using Suspense in ways that are incompatible with React.startTransition.
Therefore, in 6.13.0 the default behavior will no longer leverage React.startTransition:
```jsx
{/.../}
modulejsx
{/.../}
```
We recommend folks adopt this flag sooner rather than later to be better compatible with React concurrent mode, but if you run into issues you can continue without the use of React.startTransition until v7. Issues usually boil down to creating net-new promises during the render cycle, so if you run into issues when opting into React.startTransition, you should either lift your promise creation out of the render cycle or put it behind a useMemo.
Minor Changes
Move React.startTransition usage behinds a future flag (#10596)
Patch Changes
Work around webpack/terser React.startTransition minification bug in production mode (#10588)
Full Changelog: link"
2,"
Warning
Please use version 6.13.0 or later instead of 6.12.0/6.12.1. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See #10569 and #10579 for more details.

Patch Changes

Adjust feature detection of React.startTransition to fix webpack + react 17 compilation error (#10569)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.12.0...react-router@6.12.1","Warning
Please use version 6.13.0 or later instead of 6.12.0/6.12.1. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See #10569 and #10579 for more details.
Patch Changes
Adjust feature detection of React.startTransition to fix webpack + react 17 compilation error (#10569)
Full Changelog: link"
3,"
Warning
Please use version 6.13.0 or later instead of 6.12.0/6.12.1. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See #10569 and #10579 for more details.

What's Changed
With 6.12.0 we've added better support for suspending components by wrapping the internal router state updates in React.startTransition. This means that, for example, if one of your components in a destination route suspends and you have not provided a Suspense boundary to show a fallback, React will delay the rendering of the new UI and show the old UI until that asynchronous operation resolves. This could be useful for waiting for things such as waiting for images or CSS files to load (and technically, yes, you could use it for data loading but we'd still recommend using loaders for that 😀). For a quick overview of this usage, check out Ryan's demo on Twitter.
Minor Changes

Wrap internal router state updates with React.startTransition (#10438)

Patch Changes

Allow fetcher revalidations to complete if submitting fetcher is deleted (#10535)
Re-throw DOMException (DataCloneError) when attempting to perform a PUSH navigation with non-serializable state. (#10427)
Ensure revalidations happen when hash is present (#10516)
Upgrade jest and jsdom (#10453)
Updated dependencies:
@remix-run/router@1.6.3 (Changelog)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.11.2...react-router@6.12.0","Warning
Please use version 6.13.0 or later instead of 6.12.0/6.12.1. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See #10569 and #10579 for more details.
What's Changed
With 6.12.0 we've added better support for suspending components by wrapping the internal router state updates in React.startTransition. This means that, for example, if one of your components in a destination route suspends and you have not provided a Suspense boundary to show a fallback, React will delay the rendering of the new UI and show the old UI until that asynchronous operation resolves. This could be useful for waiting for things such as waiting for images or CSS files to load (and technically, yes, you could use it for data loading but we'd still recommend using loaders for that 😀). For a quick overview of this usage, check out Ryan's demo on Twitter.
Minor Changes
Wrap internal router state updates with React.startTransition (#10438)
Patch Changes
Allow fetcher revalidations to complete if submitting fetcher is deleted (#10535)
Re-throw DOMException (DataCloneError) when attempting to perform a PUSH navigation with non-serializable state. (#10427)
Ensure revalidations happen when hash is present (#10516)
Upgrade jest and jsdom (#10453)
Updated dependencies:
@remix-run/router@1.6.3 (Changelog)
Full Changelog: link"
4,"Patch Changes

Fix basename duplication in descendant <Routes> inside a <RouterProvider> (#10492)
Fix bug where initial data load would not kick off when hash is present (#10493)
Export SetURLSearchParams type (#10444)
Fix Remix HMR-driven error boundaries by properly reconstructing new routes and manifest in _internalSetRoutes (#10437)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.11.1...react-router@6.11.2","Patch Changes
Fix basename duplication in descendant  inside a  (#10492)
Fix bug where initial data load would not kick off when hash is present (#10493)
Export SetURLSearchParams type (#10444)
Fix Remix HMR-driven error boundaries by properly reconstructing new routes and manifest in _internalSetRoutes (#10437)
Full Changelog: link"
5,"Patch Changes

Fix usage of Component API within descendant <Routes> (#10434)
Fix bug when calling useNavigate from <Routes> inside a <RouterProvider> (#10432)
Fix usage of <Navigate> in strict mode when using a data router (#10435)
Fix basename handling when navigating without a path (#10433)
""Same hash"" navigations no longer re-run loaders to match browser behavior (i.e. /path#hash -> /path#hash) (#10408)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.11.0...react-router@6.11.1","Patch Changes
Fix usage of Component API within descendant  (#10434)
Fix bug when calling useNavigate from  inside a  (#10432)
Fix usage of  in strict mode when using a data router (#10435)
Fix basename handling when navigating without a path (#10433)
""Same hash"" navigations no longer re-run loaders to match browser behavior (i.e. /path#hash -> /path#hash) (#10408)
Full Changelog: link"
6,"What's Changed
Minor Changes

Enable basename support in useFetcher (#10336)
If you were previously working around this issue by manually prepending the basename then you will need to remove the manually prepended basename from your fetcher calls (fetcher.load('/basename/route') -> fetcher.load('/route'))
Updated dependencies:
@remix-run/router@1.6.0 (Changelog)

Patch Changes

When using a RouterProvider, useNavigate/useSubmit/fetcher.submit are now stable across location changes, since we can handle relative routing via the @remix-run/router instance and get rid of our dependence on useLocation() (#10336)
When using BrowserRouter, these hooks remain unstable across location changes because they still rely on useLocation()
Fetchers should no longer revalidate on search params changes or routing to the same URL, and will only revalidate on action submissions or router.revalidate calls (#10344)
Fix inadvertent re-renders when using Component instead of element on a route definition (#10287)
Fail gracefully on <Link to=""//""> and other invalid URL values (#10367)
Switched from useSyncExternalStore to useState for internal @remix-run/router router state syncing in <RouterProvider>. We found some subtle bugs where router state updates got propagated before other normal useState updates, which could lead to foot guns in useEffect calls. (#10377, #10409)
Log loader/action errors caught by the default error boundary to the console in dev for easier stack trace evaluation (#10286)
Fix bug preventing rendering of descendant <Routes> when RouterProvider errors existed (#10374)
Fix detection of useNavigate in the render cycle by setting the activeRef in a layout effect, allowing the navigate function to be passed to child components and called in a useEffect there (#10394)
Allow useRevalidator() to resolve a loader-driven error boundary scenario (#10369)
Enhance LoaderFunction/ActionFunction return type to prevent undefined from being a valid return value (#10267)
Ensure proper 404 error on fetcher.load call to a route without a loader (#10345)
Decouple AbortController usage between revalidating fetchers and the thing that triggered them such that the unmount/deletion of a revalidating fetcher doesn't impact the ongoing triggering navigation/revalidation (#10271)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.10.0...react-router@6.11.0","What's Changed
Minor Changes
Enable basename support in useFetcher (#10336)
If you were previously working around this issue by manually prepending the basename then you will need to remove the manually prepended basename from your fetcher calls (fetcher.load('/basename/route') -> fetcher.load('/route'))
Updated dependencies:
@remix-run/router@1.6.0 (Changelog)
Patch Changes
When using a RouterProvider, useNavigate/useSubmit/fetcher.submit are now stable across location changes, since we can handle relative routing via the @remix-run/router instance and get rid of our dependence on useLocation() (#10336)
When using BrowserRouter, these hooks remain unstable across location changes because they still rely on useLocation()
Fetchers should no longer revalidate on search params changes or routing to the same URL, and will only revalidate on action submissions or router.revalidate calls (#10344)
Fix inadvertent re-renders when using Component instead of element on a route definition (#10287)
Fail gracefully on  and other invalid URL values (#10367)
Switched from useSyncExternalStore to useState for internal @remix-run/router router state syncing in . We found some subtle bugs where router state updates got propagated before other normal useState updates, which could lead to foot guns in useEffect calls. (#10377, #10409)
Log loader/action errors caught by the default error boundary to the console in dev for easier stack trace evaluation (#10286)
Fix bug preventing rendering of descendant  when RouterProvider errors existed (#10374)
Fix detection of useNavigate in the render cycle by setting the activeRef in a layout effect, allowing the navigate function to be passed to child components and called in a useEffect there (#10394)
Allow useRevalidator() to resolve a loader-driven error boundary scenario (#10369)
Enhance LoaderFunction/ActionFunction return type to prevent undefined from being a valid return value (#10267)
Ensure proper 404 error on fetcher.load call to a route without a loader (#10345)
Decouple AbortController usage between revalidating fetchers and the thing that triggered them such that the unmount/deletion of a revalidating fetcher doesn't impact the ongoing triggering navigation/revalidation (#10271)
Full Changelog: link"
7,"What's Changed
We recently published a post over on the Remix Blog titled ""Future Proofing Your Remix App"" that goes through our strategy to ensure smooth upgrades for your Remix and React Router apps going forward.  React Router 6.10.0 adds support for these flags (for data routers) which you can specify when you create your router:
js
const router = createBrowserRouter(routes, {
  future: {
    // specify future flags here
  },
});
You can also check out the docs here and here.
Minor Changes


The first future flag being introduced is future.v7_normalizeFormMethod which will normalize the exposed useNavigation()/useFetcher() formMethod fields as uppercase HTTP methods to align with the fetch() (and some Remix) behavior. (#10207)


When future.v7_normalizeFormMethod is unspecified or set to false (default v6 behavior),

useNavigation().formMethod is lowercase
useFetcher().formMethod is lowercase


When future.v7_normalizeFormMethod === true:
useNavigation().formMethod is UPPERCASE
useFetcher().formMethod is UPPERCASE



Patch Changes

Fix createStaticHandler to also check for ErrorBoundary on routes in addition to errorElement (#10190)
Fix route ID generation when using Fragments in createRoutesFromElements (#10193)
Provide fetcher submission to shouldRevalidate if the fetcher action redirects (#10208)
Properly handle lazy() errors during router initialization (#10201)
Remove instanceof check for DeferredData to be resilient to ESM/CJS boundaries in SSR bundling scenarios (#10247)
Update to latest @remix-run/web-fetch@4.3.3 (#10216)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.9.0...react-router@6.10.0","What's Changed
We recently published a post over on the Remix Blog titled ""Future Proofing Your Remix App"" that goes through our strategy to ensure smooth upgrades for your Remix and React Router apps going forward.  React Router 6.10.0 adds support for these flags (for data routers) which you can specify when you create your router:
js
const router = createBrowserRouter(routes, {
  future: {
    // specify future flags here
  },
});
You can also check out the docs here and here.
Minor Changes
The first future flag being introduced is future.v7_normalizeFormMethod which will normalize the exposed useNavigation()/useFetcher() formMethod fields as uppercase HTTP methods to align with the fetch() (and some Remix) behavior. (#10207)
When future.v7_normalizeFormMethod is unspecified or set to false (default v6 behavior),
useNavigation().formMethod is lowercase
useFetcher().formMethod is lowercase
When future.v7_normalizeFormMethod === true:
useNavigation().formMethod is UPPERCASE
useFetcher().formMethod is UPPERCASE
Patch Changes
Fix createStaticHandler to also check for ErrorBoundary on routes in addition to errorElement (#10190)
Fix route ID generation when using Fragments in createRoutesFromElements (#10193)
Provide fetcher submission to shouldRevalidate if the fetcher action redirects (#10208)
Properly handle lazy() errors during router initialization (#10201)
Remove instanceof check for DeferredData to be resilient to ESM/CJS boundaries in SSR bundling scenarios (#10247)
Update to latest @remix-run/web-fetch@4.3.3 (#10216)
Full Changelog: link"
8,"What's Changed
Minor Changes

React Router now supports an alternative way to define your route element and errorElement fields as React Components instead of React Elements. You can instead pass a React Component to the new Component and ErrorBoundary fields if you choose. There is no functional difference between the two, so use whichever approach you prefer 😀. You shouldn't be defining both, but if you do Component/ErrorBoundary will ""win"". (#10045)

Example JSON Syntax
```jsx
  // Both of these work the same:
  const elementRoutes = [{
    path: '/',
    element: ,
    errorElement: ,
  }]
const componentRoutes = [{
    path: '/',
    Component: Home,
    ErrorBoundary: HomeError,
  }]
function Home() { ... }
  function HomeError() { ... }
  ```
Example JSX Syntax
```jsx
  // Both of these work the same:
  const elementRoutes = createRoutesFromElements(
    } errorElement={\ } />
  );
const componentRoutes = createRoutesFromElements(
    
  );
function Home() { ... }
  function HomeError() { ... }
  ```

Introducing Lazy Route Modules! (#10045)

In order to keep your application bundles small and support code-splitting of your routes, we've introduced a new lazy() route property. This is an async function that resolves the non-route-matching portions of your route definition (loader, action, element/Component, errorElement/ErrorBoundary, shouldRevalidate, handle).
Lazy routes are resolved on initial load and during the loading or submitting phase of a navigation or fetcher call. You cannot lazily define route-matching properties (path, index, children) since we only execute your lazy route functions after we've matched known routes.
Your lazy functions will typically return the result of a dynamic import.
jsx
  // In this example, we assume most folks land on the homepage so we include that
  // in our critical-path bundle, but then we lazily load modules for /a and /b so
  // they don't load until the user navigates to those routes
  let routes = createRoutesFromElements(
    <Route path=""/"" element={<Layout />}>
      <Route index element={<Home />} />
      <Route path=""a"" lazy={() => import(""./a"")} />
      <Route path=""b"" lazy={() => import(""./b"")} />
    </Route>
  );
Then in your lazy route modules, export the properties you want defined for the route:
```jsx
  export async function loader({ request }) {
    let data = await fetchData(request);
    return json(data);
  }
// Export a Component directly instead of needing to create a React Element from it
  export function Component() {
    let data = useLoaderData();
return (
  <>
    <h1>You made it!</h1>
    <p>{data}</p>
  
);

}
// Export an ErrorBoundary directly instead of needing to create a React Element from it
  export function ErrorBoundary() {
    let error = useRouteError();
    return isRouteErrorResponse(error) ? (
      
        {error.status} {error.statusText}
      
    ) : (
      {error.message || error}
    );
  }
  ```
An example of this in action can be found in the examples/lazy-loading-router-provider directory of the repository.  For more info, check out the lazy docs.
🙌 Huge thanks to @rossipedia for the Initial Proposal and POC Implementation.
Patch Changes

Improve memoization for context providers to avoid unnecessary re-renders (#9983)
Fix generatePath incorrectly applying parameters in some cases (#10078)
[react-router-dom-v5-compat] Add missed data router API re-exports (#10171)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.8.2...react-router@6.9.0","What's Changed
Minor Changes
React Router now supports an alternative way to define your route element and errorElement fields as React Components instead of React Elements. You can instead pass a React Component to the new Component and ErrorBoundary fields if you choose. There is no functional difference between the two, so use whichever approach you prefer 😀. You shouldn't be defining both, but if you do Component/ErrorBoundary will ""win"". (#10045)
Example JSON Syntax
module
Example JSX Syntax
```jsx
  // Both of these work the same:
  const elementRoutes = createRoutesFromElements(
    } errorElement={\ } />
  );
const componentRoutes = createRoutesFromElements(
);
function Home() { ... }
  function HomeError() { ... }
  ```
Introducing Lazy Route Modules! (#10045)
In order to keep your application bundles small and support code-splitting of your routes, we've introduced a new lazy() route property. This is an async function that resolves the non-route-matching portions of your route definition (loader, action, element/Component, errorElement/ErrorBoundary, shouldRevalidate, handle).
Lazy routes are resolved on initial load and during the loading or submitting phase of a navigation or fetcher call. You cannot lazily define route-matching properties (path, index, children) since we only execute your lazy route functions after we've matched known routes.
Your lazy functions will typically return the result of a dynamic import.
jsx
  // In this example, we assume most folks land on the homepage so we include that
  // in our critical-path bundle, but then we lazily load modules for /a and /b so
  // they don't load until the user navigates to those routes
  let routes = createRoutesFromElements(
    }>
      } />
       import(""./a"")} />
       import(""./b"")} />
    
  );
Then in your lazy route modules, export the properties you want defined for the route:
```jsx
  export async function loader({ request }) {
    let data = await fetchData(request);
    return json(data);
  }
// Export a Component directly instead of needing to create a React Element from it
  export function Component() {
    let data = useLoaderData();
return (
  <>
    You made it!
{data}
);
}
// Export an ErrorBoundary directly instead of needing to create a React Element from it
  export function ErrorBoundary() {
    let error = useRouteError();
    return isRouteErrorResponse(error) ? (
module
}
  ```
An example of this in action can be found in the examples/lazy-loading-router-provider directory of the repository.  For more info, check out the lazy docs.
🙌 Huge thanks to @rossipedia for the Initial Proposal and POC Implementation.
Patch Changes
Improve memoization for context providers to avoid unnecessary re-renders (#9983)
Fix generatePath incorrectly applying parameters in some cases (#10078)
[react-router-dom-v5-compat] Add missed data router API re-exports (#10171)
Full Changelog: link"
9,"What's Changed

Treat same-origin absolute URLs in <Link to> as external if they are outside of the router basename (#10135)
Correctly perform a hard redirect for same-origin absolute URLs outside of the router basename (#10076)
Fix SSR of absolute <Link to> urls (#10112)
Properly escape HTML characters in StaticRouterProvider serialized hydration data (#10068)
Fix useBlocker to return IDLE_BLOCKER during SSR (#10046)
Ensure status code and headers are maintained for defer loader responses in createStaticHandler's query() method (#10077)
Change invariant to an UNSAFE_invariant export since it's only intended for internal use (#10066)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.8.1...react-router@6.8.2","What's Changed
Treat same-origin absolute URLs in  as external if they are outside of the router basename (#10135)
Correctly perform a hard redirect for same-origin absolute URLs outside of the router basename (#10076)
Fix SSR of absolute  urls (#10112)
Properly escape HTML characters in StaticRouterProvider serialized hydration data (#10068)
Fix useBlocker to return IDLE_BLOCKER during SSR (#10046)
Ensure status code and headers are maintained for defer loader responses in createStaticHandler's query() method (#10077)
Change invariant to an UNSAFE_invariant export since it's only intended for internal use (#10066)
Full Changelog: link"
10,"What's Changed

Remove inaccurate console warning for POP navigations and update active blocker logic (#10030)
Only check for differing origin on absolute URL redirects (#10033)
Improved absolute url detection in Link component (now also supports mailto: urls) (#9994)
Fix partial object (search or hash only) pathnames losing current path value (#10029)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.8.0...react-router@6.8.1","What's Changed
Remove inaccurate console warning for POP navigations and update active blocker logic (#10030)
Only check for differing origin on absolute URL redirects (#10033)
Improved absolute url detection in Link component (now also supports mailto: urls) (#9994)
Fix partial object (search or hash only) pathnames losing current path value (#10029)
Full Changelog: link"
11,"What's Changed
Minor Changes
Support absolute URLs in <Link to>. If the URL is for the current origin, it will still do a client-side navigation. If the URL is for a different origin then it will do a fresh document request for the new origin. (#9900)
tsx
<Link to=""https://neworigin.com/some/path"">    {/* Document request */}
<Link to=""//neworigin.com/some/path"">          {/* Document request */}
<Link to=""https://www.currentorigin.com/path""> {/* Client-side navigation */}
Patch Changes

Fixes 2 separate issues for revalidating fetcher shouldRevalidate calls (#9948)
The shouldRevalidate function was only being called for explicit revalidation scenarios (after a mutation, manual useRevalidator call, or an X-Remix-Revalidate header used for cookie setting in Remix). It was not properly being called on implicit revalidation scenarios that also apply to navigation loader revalidation, such as a change in search params or clicking a link for the page we're already on. It's now correctly called in those additional scenarios.
The parameters being passed were incorrect and inconsistent with one another since the current*/next* parameters reflected the static fetcher.load URL (and thus were identical). Instead, they should have reflected the the navigation that triggered the revalidation (as the form* parameters did). These parameters now correctly reflect the triggering navigation.
Fix bug with search params removal via useSearchParams (#9969)
Respect preventScrollReset on <fetcher.Form> (#9963)
Fix navigation for hash routers on manual URL changes (#9980)
Use pagehide instead of beforeunload for <ScrollRestoration>. This has better cross-browser support, specifically on Mobile Safari. (#9945)
Do not short circuit on hash change only mutation submissions (#9944)
Remove instanceof check from isRouteErrorResponse to avoid bundling issues on the server (#9930)
Detect when a defer call only contains critical data and remove the AbortController (#9965)
Send the name as the value when url-encoding File FormData entries (#9867)
react-router-dom-v5-compat - Fix SSR useLayoutEffect console.error when using CompatRouter (#9820)

New Contributors

@fyzhu made their first contribution in https://github.com/remix-run/react-router/pull/9874
@cassidoo made their first contribution in https://github.com/remix-run/react-router/pull/9889
@machour made their first contribution in https://github.com/remix-run/react-router/pull/9893
@jdufresne made their first contribution in https://github.com/remix-run/react-router/pull/9916
@LordThi made their first contribution in https://github.com/remix-run/react-router/pull/9953
@bbrowning918 made their first contribution in https://github.com/remix-run/react-router/pull/9954


Full Changelog: v6.7.0...v6.8.0","What's Changed
Minor Changes
Support absolute URLs in . If the URL is for the current origin, it will still do a client-side navigation. If the URL is for a different origin then it will do a fresh document request for the new origin. (#9900)
tsx
<Link to=""link    {/ Document request /}
          {/ Document request /}
<Link to=""link {/ Client-side navigation /}
Patch Changes
Fixes 2 separate issues for revalidating fetcher shouldRevalidate calls (#9948)
The shouldRevalidate function was only being called for explicit revalidation scenarios (after a mutation, manual useRevalidator call, or an X-Remix-Revalidate header used for cookie setting in Remix). It was not properly being called on implicit revalidation scenarios that also apply to navigation loader revalidation, such as a change in search params or clicking a link for the page we're already on. It's now correctly called in those additional scenarios.
The parameters being passed were incorrect and inconsistent with one another since the current/next parameters reflected the static fetcher.load URL (and thus were identical). Instead, they should have reflected the the navigation that triggered the revalidation (as the form* parameters did). These parameters now correctly reflect the triggering navigation.
Fix bug with search params removal via useSearchParams (#9969)
Respect preventScrollReset on  (#9963)
Fix navigation for hash routers on manual URL changes (#9980)
Use pagehide instead of beforeunload for . This has better cross-browser support, specifically on Mobile Safari. (#9945)
Do not short circuit on hash change only mutation submissions (#9944)
Remove instanceof check from isRouteErrorResponse to avoid bundling issues on the server (#9930)
Detect when a defer call only contains critical data and remove the AbortController (#9965)
Send the name as the value when url-encoding File FormData entries (#9867)
react-router-dom-v5-compat - Fix SSR useLayoutEffect console.error when using CompatRouter (#9820)
New Contributors
@fyzhu made their first contribution in link
@cassidoo made their first contribution in link
@machour made their first contribution in link
@jdufresne made their first contribution in link
@LordThi made their first contribution in link
@bbrowning918 made their first contribution in link
Full Changelog: v6.7.0...v6.8.0"
12,"What's Changed
Minor Changes

Add unstable_useBlocker/unstable_usePrompt hooks for blocking navigations within the app's location origin (#9709, #9932)
Add preventScrollReset prop to <Form> (#9886)

Patch Changes

Added pass-through event listener options argument to useBeforeUnload (#9709)
Fix generatePath when optional params are present (#9764)
Update <Await> to accept ReactNode as children function return result (#9896)
Improved absolute redirect url detection in actions/loaders (#9829)
Fix URL creation with memory histories (#9814)
Fix scroll reset if a submission redirects (#9886)
Fix 404 bug with same-origin absolute redirects (#9913)
Streamline jsdom bug workaround in tests (#9824)

New Contributors

@damianstasik made their first contribution in https://github.com/remix-run/react-router/pull/9835
@akamfoad made their first contribution in https://github.com/remix-run/react-router/pull/9877
@lkwr made their first contribution in https://github.com/remix-run/react-router/pull/9829


Full Changelog: v6.6.2...v6.7.0","What's Changed
Minor Changes
Add unstable_useBlocker/unstable_usePrompt hooks for blocking navigations within the app's location origin (#9709, #9932)
Add preventScrollReset prop to  (#9886)
Patch Changes
Added pass-through event listener options argument to useBeforeUnload (#9709)
Fix generatePath when optional params are present (#9764)
Update  to accept ReactNode as children function return result (#9896)
Improved absolute redirect url detection in actions/loaders (#9829)
Fix URL creation with memory histories (#9814)
Fix scroll reset if a submission redirects (#9886)
Fix 404 bug with same-origin absolute redirects (#9913)
Streamline jsdom bug workaround in tests (#9824)
New Contributors
@damianstasik made their first contribution in link
@akamfoad made their first contribution in link
@lkwr made their first contribution in link
Full Changelog: v6.6.2...v6.7.0"
13,"What's Changed

Ensure useId consistency during SSR (#9805)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.6.1...react-router@6.6.2","What's Changed
Ensure useId consistency during SSR (#9805)
Full Changelog: link"
14,"What's Changed

Include submission info in shouldRevalidate on action redirects (#9777, #9782)
Reset actionData on action redirect to current location (#9772)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.6.0...react-router@6.6.1","What's Changed
Include submission info in shouldRevalidate on action redirects (#9777, #9782)
Reset actionData on action redirect to current location (#9772)
Full Changelog: link"
15,"What's Changed
This minor release is primarily to stabilize our SSR APIs for Data Routers now that we've wired up the new RouterProvider in Remix as part of the React Router-ing Remix work.
Minor Changes

Remove unstable_ prefix from createStaticHandler/createStaticRouter/StaticRouterProvider (#9738)
Add useBeforeUnload() hook (#9664)

Patch Changes

Support uppercase <Form method> and useSubmit method values (#9664)
Fix <button formmethod> form submission overriddes (#9664)
Fix explicit replace on submissions and PUSH on submission to new paths (#9734)
Prevent useLoaderData usage in errorElement (#9735)
Proper hydration of Error objects from StaticRouterProvider (#9664)
Skip initial scroll restoration for SSR apps with hydrationData (#9664)
Fix a few bugs where loader/action data wasn't properly cleared on errors (#9735)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.5.0...react-router@6.6.0","What's Changed
This minor release is primarily to stabilize our SSR APIs for Data Routers now that we've wired up the new RouterProvider in Remix as part of the React Router-ing Remix work.
Minor Changes
Remove unstable_ prefix from createStaticHandler/createStaticRouter/StaticRouterProvider (#9738)
Add useBeforeUnload() hook (#9664)
Patch Changes
Support uppercase  and useSubmit method values (#9664)
Fix  form submission overriddes (#9664)
Fix explicit replace on submissions and PUSH on submission to new paths (#9734)
Prevent useLoaderData usage in errorElement (#9735)
Proper hydration of Error objects from StaticRouterProvider (#9664)
Skip initial scroll restoration for SSR apps with hydrationData (#9664)
Fix a few bugs where loader/action data wasn't properly cleared on errors (#9735)
Full Changelog: link"
16,"What's Changed
This release introduces support for Optional Route Segments. Now, adding a ? to the end of any path segment will make that entire segment optional. This works for both static segments and dynamic parameters.
Optional Params Examples

<Route path="":lang?/about> will match:
/:lang/about
/about
<Route path=""/multistep/:widget1?/widget2?/widget3?""> will match:
/multistep
/multistep/:widget1
/multistep/:widget1/:widget2
/multistep/:widget1/:widget2/:widget3

Optional Static Segment Example

<Route path=""/home?""> will match:
/
/home
<Route path=""/fr?/about""> will match:
/about
/fr/about

Minor Changes

Allows optional routes and optional static segments (#9650)

Patch Changes

Stop incorrectly matching on partial named parameters, i.e. <Route path=""prefix-:param"">, to align with how splat parameters work. If you were previously relying on this behavior then it's recommended to extract the static portion of the path at the useParams call site: (#9506)

```jsx
// Old behavior at URL /prefix-123
 }>
function Comp() {
  let params = useParams(); // { id: '123' }
  let id = params.id; // ""123""
  ...
}
// New behavior at URL /prefix-123
 }>
function Comp() {
  let params = useParams(); // { id: 'prefix-123' }
  let id = params.id.replace(/^prefix-/, ''); // ""123""
  ...
}
```

Persist headers on loader request's after SSR document action request (#9721)
Fix requests sent to revalidating loaders so they reflect a GET request (#9660)
Fix issue with deeply nested optional segments (#9727)
GET forms now expose a submission on the loading navigation (#9695)
Fix error boundary tracking for multiple errors bubbling to the same boundary (#9702)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.4.5...react-router@6.5.0","What's Changed
This release introduces support for Optional Route Segments. Now, adding a ? to the end of any path segment will make that entire segment optional. This works for both static segments and dynamic parameters.
Optional Params Examples
 will match:
/multistep
/multistep/:widget1
/multistep/:widget1/:widget2
/multistep/:widget1/:widget2/:widget3
Optional Static Segment Example
 will match:
/
/home
 will match:
/about
/fr/about
Minor Changes
Allows optional routes and optional static segments (#9650)
Patch Changes
Stop incorrectly matching on partial named parameters, i.e. , to align with how splat parameters work. If you were previously relying on this behavior then it's recommended to extract the static portion of the path at the useParams call site: (#9506)
module
Persist headers on loader request's after SSR document action request (#9721)
Fix requests sent to revalidating loaders so they reflect a GET request (#9660)
Fix issue with deeply nested optional segments (#9727)
GET forms now expose a submission on the loading navigation (#9695)
Fix error boundary tracking for multiple errors bubbling to the same boundary (#9702)
Full Changelog: link"
17,"What's Changed

Fix requests sent to revalidating loaders so they reflect a GET request (#9680)
Remove instanceof Response checks in favor of isResponse (#9690)
Fix URL creation in Cloudflare Pages or other non-browser-environments (#9682, #9689)
Add requestContext support to static handler query/queryRoute (#9696)
Note that the unstable API of queryRoute(path, routeId) has been changed to queryRoute(path, { routeId, requestContext })

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.4.4...react-router@6.4.5","What's Changed
Fix requests sent to revalidating loaders so they reflect a GET request (#9680)
Remove instanceof Response checks in favor of isResponse (#9690)
Fix URL creation in Cloudflare Pages or other non-browser-environments (#9682, #9689)
Add requestContext support to static handler query/queryRoute (#9696)
Note that the unstable API of queryRoute(path, routeId) has been changed to queryRoute(path, { routeId, requestContext })
Full Changelog: link"
18,"What's Changed

Throw an error if an action/loader function returns undefined as revalidations need to know whether the loader has previously been executed. undefined also causes issues during SSR stringification for hydration. You should always ensure your loader/action returns a value, and you may return null if you don't wish to return anything. (#9511)
Properly handle redirects to external domains (#9590, #9654)
Preserve the HTTP method on 307/308 redirects (#9597)
Support basename in static data routers (#9591)
Enhanced ErrorResponse bodies to contain more descriptive text in internal 403/404/405 scenarios
Fix issues with encoded characters in NavLink and descendant <Routes> (#9589, #9647)
Properly serialize/deserialize ErrorResponse instances when using built-in hydration (#9593)
Support basename in static data routers (#9591)
Updated dependencies:
@remix-run/router@1.0.4
react-router@6.4.4

Full Changelog: https://github.com/remix-run/react-router/compare/react-router-dom@6.4.3...react-router-dom@6.4.4","What's Changed
Throw an error if an action/loader function returns undefined as revalidations need to know whether the loader has previously been executed. undefined also causes issues during SSR stringification for hydration. You should always ensure your loader/action returns a value, and you may return null if you don't wish to return anything. (#9511)
Properly handle redirects to external domains (#9590, #9654)
Preserve the HTTP method on 307/308 redirects (#9597)
Support basename in static data routers (#9591)
Enhanced ErrorResponse bodies to contain more descriptive text in internal 403/404/405 scenarios
Fix issues with encoded characters in NavLink and descendant  (#9589, #9647)
Properly serialize/deserialize ErrorResponse instances when using built-in hydration (#9593)
Support basename in static data routers (#9591)
Updated dependencies:
@remix-run/router@1.0.4
react-router@6.4.4
Full Changelog: link"
19,"What's Changed

Generate correct <a href> values when using createHashRouter (#9409)
Better handle encoding/matching with special characters in URLs and route paths (#9477, #9496)
Generate correct formAction pathnames when an index route also has a path (#9486)
Respect relative=path prop on NavLink (#9453)
Fix NavLink behavior for root urls (#9497)
useRoutes should be able to return null when passing locationArg (#9485)
Fix initialEntries type in createMemoryRouter (#9498)
Support basename and relative routing in loader/action redirects (#9447)
Ignore pathless layout routes when looking for proper submission action function (#9455)
Add UMD build for @remix-run/router (#9446)
Fix createURL in local file execution in Firefox (#9464)

New Contributors

@danielberndt made their first contribution in #9485
@AchThomas made their first contribution in #9464
@manzano78 made their first contribution in #9451

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.4.2...react-router@6.4.3","What's Changed
Generate correct  values when using createHashRouter (#9409)
Better handle encoding/matching with special characters in URLs and route paths (#9477, #9496)
Generate correct formAction pathnames when an index route also has a path (#9486)
Respect relative=path prop on NavLink (#9453)
Fix NavLink behavior for root urls (#9497)
useRoutes should be able to return null when passing locationArg (#9485)
Fix initialEntries type in createMemoryRouter (#9498)
Support basename and relative routing in loader/action redirects (#9447)
Ignore pathless layout routes when looking for proper submission action function (#9455)
Add UMD build for @remix-run/router (#9446)
Fix createURL in local file execution in Firefox (#9464)
New Contributors
@danielberndt made their first contribution in #9485
@AchThomas made their first contribution in #9464
@manzano78 made their first contribution in #9451
Full Changelog: link"
20,"What's Changed

Respect basename in useFormAction (#9352)
Fix IndexRouteObject and NonIndexRouteObject types to make hasErrorElement optional (#9394)
Enhance console error messages for invalid usage of data router hooks (#9311)
If an index route has children, it will result in a runtime error. We have strengthened our RouteObject/RouteProps types to surface the error in TypeScript. (#9366)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.4.1...react-router@6.4.2","What's Changed
Respect basename in useFormAction (#9352)
Fix IndexRouteObject and NonIndexRouteObject types to make hasErrorElement optional (#9394)
Enhance console error messages for invalid usage of data router hooks (#9311)
If an index route has children, it will result in a runtime error. We have strengthened our RouteObject/RouteProps types to surface the error in TypeScript. (#9366)
Full Changelog: link"
21,"We removed the mini-create-react-context dependency, moving it into an internal module to eliminate peer dependency warnings for users on React 18 (#9382).
Full Changelog: https://github.com/remix-run/react-router/compare/v5.3.3...v5.3.4","We removed the mini-create-react-context dependency, moving it into an internal module to eliminate peer dependency warnings for users on React 18 (#9382).
Full Changelog: link"
22,"What's Changed
Bug Fixes

Preserve state from initialEntries (#9288)
Preserve ?index for fetcher get submissions to index routes (#9312)

Full Changelog: https://github.com/remix-run/react-router/compare/react-router@6.4.0...react-router@6.4.1","What's Changed
Bug Fixes
Preserve state from initialEntries (#9288)
Preserve ?index for fetcher get submissions to index routes (#9312)
Full Changelog: link"
23,"Whoa this is a big one! 6.4.0 brings all the data loading and mutation APIs over from Remix. Here's a quick high level overview, but it's recommended you go check out the docs, especially the feature overview and the tutorial.
New APIs

Create your router with createMemoryRouter
Render your router with <RouterProvider>
Load data with a Route loader and mutate with a Route action
Handle errors with Route errorElement
Defer non-critical data with defer and Await

react-router-dom APIs

Create your router with createBrowserRouter/createHashRouter
Submit data with the new <Form> component
Perform in-page data loads and mutations with useFetcher()
Defer non-critical data with defer and Await
Manage scroll position with <ScrollRestoration>
Perform path-relative navigations with <Link relative=""path""> (#9160)

Bug Fixes

Path resolution is now trailing slash agnostic (#8861)
useLocation returns the scoped location inside a <Routes location> component (#9094)
Respect the <Link replace> prop if it is defined (#8779)
","Whoa this is a big one! 6.4.0 brings all the data loading and mutation APIs over from Remix. Here's a quick high level overview, but it's recommended you go check out the docs, especially the feature overview and the tutorial.
New APIs
Create your router with createMemoryRouter
Render your router with 
Load data with a Route loader and mutate with a Route action
Handle errors with Route errorElement
Defer non-critical data with defer and Await
react-router-dom APIs
Create your router with createBrowserRouter/createHashRouter
Submit data with the new  component
Perform in-page data loads and mutations with useFetcher()
Defer non-critical data with defer and Await
Manage scroll position with 
Perform path-relative navigations with  (#9160)
Bug Fixes
Path resolution is now trailing slash agnostic (#8861)
useLocation returns the scoped location inside a  component (#9094)
Respect the  prop if it is defined (#8779)"
24,"This is the first stable release of @remix-run/router, which provides all the underlying routing and data loading/mutation logic for react-router. You should not be using this package directly unless you are authoring a routing library similar to react-router.
For an overview of the features provided by react-router, we recommend you go check out the docs, especially the feature overview and the tutorial.
For an overview of the features provided by @remix-run/router, please check out the README.","This is the first stable release of @remix-run/router, which provides all the underlying routing and data loading/mutation logic for react-router. You should not be using this package directly unless you are authoring a routing library similar to react-router.
For an overview of the features provided by react-router, we recommend you go check out the docs, especially the feature overview and the tutorial.
For an overview of the features provided by @remix-run/router, please check out the README."
25,"Patch Changes


fix: remove internal router singleton (#9227)
This change removes the internal module-level routerSingleton we create and maintain inside our data routers since it was causing a number of headaches for non-simple use cases:

Unit tests are a pain because you need to find a way to reset the singleton in-between tests
Use use a _resetModuleScope singleton for our tests
...but this isn't exposed to users who may want to do their own tests around our router


The JSX children <Route> objects cause non-intuitive behavior based on idiomatic react expectations
Conditional runtime <Route>'s won't get picked up
Adding new <Route>'s during local dev won't get picked up during HMR
Using external state in your elements doesn't work as one might expect (see #9225)



Instead, we are going to lift the singleton out into user-land, so that they create the router singleton and manage it outside the react tree - which is what react 18 is encouraging with useSyncExternalStore anyways! This also means that since users create the router - there's no longer any difference in the rendering aspect for memory/browser/hash routers (which only impacts router/history creation) - so we can get rid of those and trim to a simple RouterProvider
```jsx
// Before
function App() {
  
}>
      }>
    

}
// After
let router = createBrowserRouter([{
  path: ""/"",
  element: ,
  children: [{
    index: true,
    element: ,
  }]
}]);
function App() {
  return 
}
```
If folks still prefer the JSX notation, they can leverage createRoutesFromElements (aliased from createRoutesFromChildren since they are not ""children"" in this usage):
```jsx
let routes = createRoutesFromElements(
  }>
    }>
  
);
let router = createBrowserRouter(routes);
function App() {
  return 
}
```
And now they can also hook into HMR correctly for router disposal:
if (import.meta.hot) {
  import.meta.hot.dispose(() => router.dispose());
}

And finally since <RouterProvider> accepts a router, it makes unit testing easer since you can create a fresh router with each test.
Removed APIs

<DataMemoryRouter>
<DataBrowserRouter>
<DataHashRouter>
<DataRouterProvider>
<DataRouter>

Modified APIs

createMemoryRouter/createBrowserRouter/createHashRouter used to live in @remix-run/router to prevent devs from needing to create their own history. These are now moved to react-router/react-router-dom and handle the RouteObject -> AgnosticRouteObject conversion.

Added APIs

<RouterProvider>
createRoutesFromElements (alias of createRoutesFromChildren)



Updated dependencies

react-router@6.4.0-pre.15


","Patch Changes
fix: remove internal router singleton (#9227)
This change removes the internal module-level routerSingleton we create and maintain inside our data routers since it was causing a number of headaches for non-simple use cases:
Unit tests are a pain because you need to find a way to reset the singleton in-between tests
Use use a _resetModuleScope singleton for our tests
...but this isn't exposed to users who may want to do their own tests around our router
The JSX children  objects cause non-intuitive behavior based on idiomatic react expectations
Conditional runtime 's won't get picked up
Adding new 's during local dev won't get picked up during HMR
Using external state in your elements doesn't work as one might expect (see #9225)
Instead, we are going to lift the singleton out into user-land, so that they create the router singleton and manage it outside the react tree - which is what react 18 is encouraging with useSyncExternalStore anyways! This also means that since users create the router - there's no longer any difference in the rendering aspect for memory/browser/hash routers (which only impacts router/history creation) - so we can get rid of those and trim to a simple RouterProvider
```jsx
// Before
function App() {
}>
      }>
}
// After
let router = createBrowserRouter([{
  path: ""/"",
  element: ,
  children: [{
    index: true,
    element: ,
  }]
}]);
function App() {
  return 
}
modulejsx
let routes = createRoutesFromElements(
  }>
    }>
);
let router = createBrowserRouter(routes);
function App() {
  return 
}
```
And now they can also hook into HMR correctly for router disposal:
if (import.meta.hot) {
  import.meta.hot.dispose(() => router.dispose());
}
And finally since  accepts a router, it makes unit testing easer since you can create a fresh router with each test.
Removed APIs





Modified APIs
createMemoryRouter/createBrowserRouter/createHashRouter used to live in @remix-run/router to prevent devs from needing to create their own history. These are now moved to react-router/react-router-dom and handle the RouteObject -> AgnosticRouteObject conversion.
Added APIs

createRoutesFromElements (alias of createRoutesFromChildren)
Updated dependencies
react-router@6.4.0-pre.15"
26,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.15
react-router-dom@6.4.0-pre.15


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.15
react-router-dom@6.4.0-pre.15"
27,"Patch Changes

fix: rename resetScroll -> preventScrollReset (#9199)
Updated dependencies
@remix-run/router@0.2.0-pre.9


","Patch Changes
fix: rename resetScroll -> preventScrollReset (#9199)
Updated dependencies
@remix-run/router@0.2.0-pre.9"
28,"Patch Changes


c3406eb9: fix: Rename <Deferred> to <Await> (#9095)

We are no longer replacing the Promise on loaderData with the value/error
    when it settles so it's now always a Promise.
To that end, we changed from <Deferred value={promise}> to
    <Await resolve={promise}> for clarity, and it also now supports using
    <Await> with raw promises from anywhere, not only those on loaderData
    from a defer() call.
Note that raw promises will not be automatically cancelled on interruptions
    so they are not recommended


The hooks are now useAsyncValue/useAsyncError



Updated dependencies

@remix-run/router@0.2.0-pre.6


","Patch Changes
c3406eb9: fix: Rename  to  (#9095)
We are no longer replacing the Promise on loaderData with the value/error
    when it settles so it's now always a Promise.
To that end, we changed from  to
     for clarity, and it also now supports using
     with raw promises from anywhere, not only those on loaderData
    from a defer() call.
Note that raw promises will not be automatically cancelled on interruptions
    so they are not recommended
The hooks are now useAsyncValue/useAsyncError
Updated dependencies
@remix-run/router@0.2.0-pre.6"
29,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.11


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.11"
30,"Patch Changes

Updated dependencies [c3406eb9]
react-router@6.4.0-pre.11


","Patch Changes
Updated dependencies [c3406eb9]
react-router@6.4.0-pre.11"
31,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.11
react-router-dom@6.4.0-pre.11


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.11
react-router-dom@6.4.0-pre.11"
32,"Patch Changes


c3406eb9: fix: Rename <Deferred> to <Await> (#9095)

We are no longer replacing the Promise on loaderData with the value/error
    when it settles so it's now always a Promise.
To that end, we changed from <Deferred value={promise}> to
    <Await resolve={promise}> for clarity, and it also now supports using
    <Await> with raw promises from anywhere, not only those on loaderData
    from a defer() call.
Note that raw promises will not be automatically cancelled on interruptions
    so they are not recommended


The hooks are now useAsyncValue/useAsyncError


","Patch Changes
c3406eb9: fix: Rename  to  (#9095)
We are no longer replacing the Promise on loaderData with the value/error
    when it settles so it's now always a Promise.
To that end, we changed from  to
     for clarity, and it also now supports using
     with raw promises from anywhere, not only those on loaderData
    from a defer() call.
Note that raw promises will not be automatically cancelled on interruptions
    so they are not recommended
The hooks are now useAsyncValue/useAsyncError"
33,"Patch Changes


feat: Deferred API Updates (#9070)

Removes <Suspense> from inside <Deferred>, requires users to render their own suspense boundaries
Updates Deferred to use a true error boundary to catch render errors as well as data errors
Support array and single promise usages
return deferred([ await critical(), lazy() ])
return deferred(lazy())


Remove Deferrable/ResolvedDeferrable in favor of raw Promise's and Awaited
Remove generics from useDeferredData until useLoaderData generic is decided in 6.5



Updated dependencies

@remix-run/router@0.2.0-pre.5


","Patch Changes
feat: Deferred API Updates (#9070)
Removes  from inside , requires users to render their own suspense boundaries
Updates Deferred to use a true error boundary to catch render errors as well as data errors
Support array and single promise usages
return deferred([ await critical(), lazy() ])
return deferred(lazy())
Remove Deferrable/ResolvedDeferrable in favor of raw Promise's and Awaited
Remove generics from useDeferredData until useLoaderData generic is decided in 6.5
Updated dependencies
@remix-run/router@0.2.0-pre.5"
34,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.10


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.10"
35,"Patch Changes


SSR Updates for React Router (#9058)
Note: The Data-Router SSR aspects of @remix-run/router and react-router-dom are being released as unstable in this release (unstable_createStaticHandler and unstable_DataStaticRouter), and we plan to finalize them in a subsequent minor release once the kinks can be worked out with the Remix integration. To that end, they are available for use, but are subject to breaking changes in the next minor release.

Remove useRenderDataRouter() in favor of <DataRouterProvider>/<DataRouter>
Support automatic hydration in <DataStaticRouter>/<DataBrowserRouter>/<DataHashRouter>
Uses window.__staticRouterHydrationData
Can be disabled on the server via <DataStaticRouter hydrate={false}>
Can be disabled (or overridden) in the browser by passing hydrationData to <DataBrowserRouter>/<DataHashRouter>


<DataStaticRouter> now tracks it's own SSR error boundaries on StaticHandlerContext
StaticHandlerContext now exposes statusCode/loaderHeaders/actionHeaders
foundMissingHydrationData check removed since Remix routes may have loaders (for modules) that don't return data for loaderData



Updated dependencies

react-router@6.4.0-pre.10


","Patch Changes
SSR Updates for React Router (#9058)
Note: The Data-Router SSR aspects of @remix-run/router and react-router-dom are being released as unstable in this release (unstable_createStaticHandler and unstable_DataStaticRouter), and we plan to finalize them in a subsequent minor release once the kinks can be worked out with the Remix integration. To that end, they are available for use, but are subject to breaking changes in the next minor release.
Remove useRenderDataRouter() in favor of /
Support automatic hydration in //
Uses window.__staticRouterHydrationData
Can be disabled on the server via 
Can be disabled (or overridden) in the browser by passing hydrationData to /
 now tracks it's own SSR error boundaries on StaticHandlerContext
StaticHandlerContext now exposes statusCode/loaderHeaders/actionHeaders
foundMissingHydrationData check removed since Remix routes may have loaders (for modules) that don't return data for loaderData
Updated dependencies
react-router@6.4.0-pre.10"
36,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.10
react-router-dom@6.4.0-pre.10


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.10
react-router-dom@6.4.0-pre.10"
37,"Patch Changes


feat: Deferred API Updates (#9070)

Support array and single promise usages
return deferred([ await critical(), lazy() ])
return deferred(lazy())


Remove Deferrable/ResolvedDeferrable in favor of raw Promise's and Awaited
Remove generics from useDeferredData until useLoaderData generic is decided in 6.5



feat: Add createStaticRouter for @remix-run/router SSR usage (#9013)
Notable changes:

request is now the driving force inside the router utils, so that we can better handle Request instances coming form the server (as opposed to string and Path instances coming from the client)
Removed the signal param from loader and action functions in favor of request.signal

Example usage (Document Requests):
```jsx
// Create a static handler
let { query } = unstable_createStaticHandler(routes);
// Perform a full-document query for the incoming Fetch Request.  This will
// execute the appropriate action/loaders and return either the state or a
// Fetch Response in the case of redirects.
let state = await query(fetchRequest);
// If we received a Fetch Response back, let our server runtime handle directly
if (state instanceof Response) {
  throw state;
}
// Otherwise, render our application providing the data routes and state
let html = ReactDOMServer.renderToString(
  


);
```
Example usage (Data Requests):
```jsx
// Create a static route handler
let { queryRoute } = unstable_createStaticHandler(routes);
// Perform a single-route query for the incoming Fetch Request.  This will
// execute the appropriate singular action/loader and return either the raw
// data or a Fetch Response
let data = await queryRoute(fetchRequest);
// If we received a Fetch Response back, return it directly
if (data instanceof Response) {
  return data;
}
// Otherwise, construct a Response from the raw data (assuming json here)
return new Response(JSON.stringify(data), {
  headers: {
    ""Content-Type"": ""application/json; charset=utf-8"",
  },
});
```


feat: SSR Updates for React Router (#9058)
Note: The Data-Router SSR aspects of @remix-run/router and react-router-dom are being released as unstable in this release (unstable_createStaticHandler and unstable_DataStaticRouter), and we plan to finalize them in a subsequent minor release once the kinks can be worked out with the Remix integration. To that end, they are available for use, but are subject to breaking changes in the next minor release.

Remove useRenderDataRouter() in favor of <DataRouterProvider>/<DataRouter>
Support automatic hydration in <DataStaticRouter>/<DataBrowserRouter>/<DataHashRouter>
Uses window.__staticRouterHydrationData
Can be disabled on the server via <DataStaticRouter hydrate={false}>
Can be disabled (or overridden) in the browser by passing hydrationData to <DataBrowserRouter>/<DataHashRouter>


<DataStaticRouter> now tracks it's own SSR error boundaries on StaticHandlerContext
StaticHandlerContext now exposes statusCode/loaderHeaders/actionHeaders
foundMissingHydrationData check removed since Remix routes may have loaders (for modules) that don't return data for loaderData


","Patch Changes
feat: Deferred API Updates (#9070)
Support array and single promise usages
return deferred([ await critical(), lazy() ])
return deferred(lazy())
Remove Deferrable/ResolvedDeferrable in favor of raw Promise's and Awaited
Remove generics from useDeferredData until useLoaderData generic is decided in 6.5
feat: Add createStaticRouter for @remix-run/router SSR usage (#9013)
Notable changes:
request is now the driving force inside the router utils, so that we can better handle Request instances coming form the server (as opposed to string and Path instances coming from the client)
Removed the signal param from loader and action functions in favor of request.signal
Example usage (Document Requests):
```jsx
// Create a static handler
let { query } = unstable_createStaticHandler(routes);
// Perform a full-document query for the incoming Fetch Request.  This will
// execute the appropriate action/loaders and return either the state or a
// Fetch Response in the case of redirects.
let state = await query(fetchRequest);
// If we received a Fetch Response back, let our server runtime handle directly
if (state instanceof Response) {
  throw state;
}
// Otherwise, render our application providing the data routes and state
let html = ReactDOMServer.renderToString(
);
modulejsx
// Create a static route handler
let { queryRoute } = unstable_createStaticHandler(routes);
// Perform a single-route query for the incoming Fetch Request.  This will
// execute the appropriate singular action/loader and return either the raw
// data or a Fetch Response
let data = await queryRoute(fetchRequest);
// If we received a Fetch Response back, return it directly
if (data instanceof Response) {
  return data;
}
// Otherwise, construct a Response from the raw data (assuming json here)
return new Response(JSON.stringify(data), {
  headers: {
    ""Content-Type"": ""application/json; charset=utf-8"",
  },
});
```
feat: SSR Updates for React Router (#9058)
Note: The Data-Router SSR aspects of @remix-run/router and react-router-dom are being released as unstable in this release (unstable_createStaticHandler and unstable_DataStaticRouter), and we plan to finalize them in a subsequent minor release once the kinks can be worked out with the Remix integration. To that end, they are available for use, but are subject to breaking changes in the next minor release.
Remove useRenderDataRouter() in favor of /
Support automatic hydration in //
Uses window.__staticRouterHydrationData
Can be disabled on the server via 
Can be disabled (or overridden) in the browser by passing hydrationData to /
 now tracks it's own SSR error boundaries on StaticHandlerContext
StaticHandlerContext now exposes statusCode/loaderHeaders/actionHeaders
foundMissingHydrationData check removed since Remix routes may have loaders (for modules) that don't return data for loaderData"
38,"Patch Changes


Feat: adds deferred support to data routers (#9002)
Returning a deferred from a loader allows you to separate critical loader data that you want to wait for prior to rendering the destination page from non-critical data that you are OK to show a spinner for until it loads.
```jsx
// In your route loader, return a deferred() and choose per-key whether to
// await the promise or not.  As soon as the awaited promises resolve, the
// page will be rendered.
function loader() {
  return deferred({
    critical: await getCriticalData(),
    lazy: getLazyData(),
  });
};
// In your route element, grab the values from useLoaderData and render them
// with 
function DeferredPage() {
  let data = useLoaderData();
  return (
    <>
      Critical Data: {data.critical}
Loading...\}
        errorElement={\}>
        


  );
}
// Use separate components to render the data once it resolves, and access it
// via the useDeferredData hook
function RenderDeferredData() {
  let data = useDeferredData();
  return Lazy: {data};
}
function RenderDeferredError() {
  let data = useRouteError();
  return Error! {data.message} {data.stack};
}
```
If you want to skip the separate components, you can use the Render Props
pattern and handle the rendering of the deferred data inline:
jsx
function DeferredPage() {
  let data = useLoaderData();
  return (
    <>
      <p>Critical Data: {data.critical}</p>
      <Deferred value={data.lazy} fallback={<p>Loading...</p>}>
        {(data) => <p>{data}</p>}
      </Deferred>
    
  );
}


feat: add basename support for data routers (#9026)


fix: Fix trailing slash behavior on pathless routing when using a basename (#9045)


Updated dependencies

@remix-run/router@0.2.0-pre.4


","Patch Changes
Feat: adds deferred support to data routers (#9002)
Returning a deferred from a loader allows you to separate critical loader data that you want to wait for prior to rendering the destination page from non-critical data that you are OK to show a spinner for until it loads.
```jsx
// In your route loader, return a deferred() and choose per-key whether to
// await the promise or not.  As soon as the awaited promises resolve, the
// page will be rendered.
function loader() {
  return deferred({
    critical: await getCriticalData(),
    lazy: getLazyData(),
  });
};
// In your route element, grab the values from useLoaderData and render them
// with 
function DeferredPage() {
  let data = useLoaderData();
  return (
    <>
      Critical Data: {data.critical}
Loading...}
        errorElement={}>
);
}
// Use separate components to render the data once it resolves, and access it
// via the useDeferredData hook
function RenderDeferredData() {
  let data = useDeferredData();
  return Lazy: {data};
}
function RenderDeferredError() {
  let data = useRouteError();
  return Error! {data.message} {data.stack};
}
```
If you want to skip the separate components, you can use the Render Props
pattern and handle the rendering of the deferred data inline:
jsx
function DeferredPage() {
  let data = useLoaderData();
  return (
    <>
      Critical Data: {data.critical}
Loading...\}>
        {(data) => {data}}
      
);
}
feat: add basename support for data routers (#9026)
fix: Fix trailing slash behavior on pathless routing when using a basename (#9045)
Updated dependencies
@remix-run/router@0.2.0-pre.4"
39,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.9


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.9"
40,"Patch Changes

feat: add basename support for data routers (#9026)
Updated dependencies
react-router@6.4.0-pre.9


","Patch Changes
feat: add basename support for data routers (#9026)
Updated dependencies
react-router@6.4.0-pre.9"
41,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.9
react-router-dom@6.4.0-pre.9


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.9
react-router-dom@6.4.0-pre.9"
42,"Patch Changes

fix: Handle fetcher 404s as normal boundary errors (#9015)
feat: adds deferred support to data routers (#9002)
feat: add basename support for data routers (#9026)
ci: simplify dist/ directory for CJS/ESM only (#9017)
fix: Fix trailing slash behavior on pathless routing when using a basename (#9045)
","Patch Changes
fix: Handle fetcher 404s as normal boundary errors (#9015)
feat: adds deferred support to data routers (#9002)
feat: add basename support for data routers (#9026)
ci: simplify dist/ directory for CJS/ESM only (#9017)
fix: Fix trailing slash behavior on pathless routing when using a basename (#9045)"
43,"Patch Changes

fix: Make path resolution trailing slash agnostic (#8861)
fix: Additional logic fixed for relative navigation from index/pathless layout routes (#8985)
fix: export ActionFunctionArgs/LoaderFunctionArgs up through router packages (#8975)
Updated dependencies
@remix-run/router@0.2.0-pre.3


","Patch Changes
fix: Make path resolution trailing slash agnostic (#8861)
fix: Additional logic fixed for relative navigation from index/pathless layout routes (#8985)
fix: export ActionFunctionArgs/LoaderFunctionArgs up through router packages (#8975)
Updated dependencies
@remix-run/router@0.2.0-pre.3"
44,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.8


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.8"
45,"Patch Changes

fix: Make path resolution trailing slash agnostic (#8861)
fix: export ActionFunctionArgs/LoaderFunctionArgs up through router packages (#8975)
Updated dependencies
react-router@6.4.0-pre.8


","Patch Changes
fix: Make path resolution trailing slash agnostic (#8861)
fix: export ActionFunctionArgs/LoaderFunctionArgs up through router packages (#8975)
Updated dependencies
react-router@6.4.0-pre.8"
46,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.8
react-router-dom@6.4.0-pre.8


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.8
react-router-dom@6.4.0-pre.8"
47,"Patch Changes

fix: properly handle <Form encType=""multipart/form-data""> submissions (#8984)
fix: Make path resolution trailing slash agnostic (#8861)
fix: don't default to a REPLACE navigation on form submissions if the action redirected. The redirect takes care of avoiding the back-button-resubmit scenario, so by using a PUSH we allow the back button to go back to the pre-submission form page (#8979)
fix: export ActionFunctionArgs/LoaderFunctionArgs up through router packages (#8975)
fix: preserve loader data for loaders that opted out of revalidation (#8973)

Full Changes","Patch Changes
fix: properly handle  submissions (#8984)
fix: Make path resolution trailing slash agnostic (#8861)
fix: don't default to a REPLACE navigation on form submissions if the action redirected. The redirect takes care of avoiding the back-button-resubmit scenario, so by using a PUSH we allow the back button to go back to the pre-submission form page (#8979)
fix: export ActionFunctionArgs/LoaderFunctionArgs up through router packages (#8975)
fix: preserve loader data for loaders that opted out of revalidation (#8973)
Full Changes"
48,"Minor Changes

Add support for functional updates in useSearchParams (similar to the useState callback signature) (#8955)

Patch Changes

Properly handle relative navigation from index/pathless routes (#8954)
Fix issues building with webpack + React 17 (#8938)
Updated dependencies
@remix-run/router@0.2.0-pre.2


","Minor Changes
Add support for functional updates in useSearchParams (similar to the useState callback signature) (#8955)
Patch Changes
Properly handle relative navigation from index/pathless routes (#8954)
Fix issues building with webpack + React 17 (#8938)
Updated dependencies
@remix-run/router@0.2.0-pre.2"
49,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.7


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.7"
50,"Patch Changes

26302209: Respect the <Link replace> prop if it is defined (#8779)
Updated dependencies
react-router@6.4.0-pre.7


","Patch Changes
26302209: Respect the  prop if it is defined (#8779)
Updated dependencies
react-router@6.4.0-pre.7"
51,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.7
react-router-dom@6.4.0-pre.7


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.7
react-router-dom@6.4.0-pre.7"
52,"Patch Changes

Capture fetcher errors at contextual route error boundaries (#8945)
","Patch Changes
Capture fetcher errors at contextual route error boundaries (#8945)"
53,,
54,"Patch Changes

react-router@6.4.0-pre.6
","Patch Changes
react-router@6.4.0-pre.6"
55,"Patch Changes

react-router@6.4.0-pre.6
","Patch Changes
react-router@6.4.0-pre.6"
56,"Patch Changes

44bce3c6: Fix react-router-dom peer dependency version
react-router@6.4.0-pre.6
react-router-dom@6.4.0-pre.6


","Patch Changes
44bce3c6: Fix react-router-dom peer dependency version
react-router@6.4.0-pre.6
react-router-dom@6.4.0-pre.6"
57,"Patch Changes

Fix broken require for CJS builds
","Patch Changes
Fix broken require for CJS builds"
58,"Patch Changes

031d5d1f: Fix missing dist files
","Patch Changes
031d5d1f: Fix missing dist files"
59,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.5


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.5"
60,"Patch Changes

Fix missing dist files
","Patch Changes
Fix missing dist files"
61,"Patch Changes

Fix broken require for CJS builds
Updated dependencies
react-router@6.4.0-pre.5


","Patch Changes
Fix broken require for CJS builds
Updated dependencies
react-router@6.4.0-pre.5"
62,"Patch Changes

Fix missing dist files
","Patch Changes
Fix missing dist files"
63,"Patch Changes

Updated dependencies
react-router@6.4.0-pre.5
react-router-dom@6.4.0-pre.5


","Patch Changes
Updated dependencies
react-router@6.4.0-pre.5
react-router-dom@6.4.0-pre.5"
64,"Patch Changes

Fix missing dist files
","Patch Changes
Fix missing dist files"
65,"Patch Changes

Fix missing dist files
","Patch Changes
Fix missing dist files"
66,"Patch Changes

Make fallbackElement optional and change type to ReactNode (type changes only) (#8896)
Properly trigger error boundaries on 404 routes
","Patch Changes
Make fallbackElement optional and change type to ReactNode (type changes only) (#8896)
Properly trigger error boundaries on 404 routes"
67,"Patch Changes

Updated dependencies
","Patch Changes
Updated dependencies"
68,"Patch Changes

Make fallbackElement optional and change type to ReactNode (type changes only) (#8896)
Properly trigger error boundaries on 404 routes
","Patch Changes
Make fallbackElement optional and change type to ReactNode (type changes only) (#8896)
Properly trigger error boundaries on 404 routes"
69,"Patch Changes

Updated dependencies
","Patch Changes
Updated dependencies"
70,"This pre-release brings the data abstractions from Remix to React Router. There will be more complete release notes for the v6.4 final release. Here are a couple quick resources to take it for a spin:

Simple demo on stackblitz
Getting Started With Data Guide on the new (beta) documentation site.

We have a lot more documentation work to do around guides, examples, and use-cases, but the API reference documentation on the new beta site is already quite complete.
sh
npm i react-router-dom@next
Enjoy!","This pre-release brings the data abstractions from Remix to React Router. There will be more complete release notes for the v6.4 final release. Here are a couple quick resources to take it for a spin:
Simple demo on stackblitz
Getting Started With Data Guide on the new (beta) documentation site.
We have a lot more documentation work to do around guides, examples, and use-cases, but the API reference documentation on the new beta site is already quite complete.
sh
npm i react-router-dom@next
Enjoy!"
71,This release fixes a bad version selector in react-router-native. ,This release fixes a bad version selector in react-router-native. 
72,"Changes

Fix: make v5 Router compatible with v18 StrictMode by @jgoz in https://github.com/remix-run/react-router/pull/8831
","Changes
Fix: make v5 Router compatible with v18 StrictMode by @jgoz in link"
73,This release adds missing LICENSE files to the published build.,This release adds missing LICENSE files to the published build.
74,"What's Changed

Added the v5 to v6 backwards compatibility package 💜 (https://github.com/remix-run/react-router/pull/8752). The official guide can be found in this discussion

New Contributors

@mfijas made their first contribution in https://github.com/remix-run/react-router/pull/8717
@ThornWu made their first contribution in https://github.com/remix-run/react-router/pull/8718
@janpaepke made their first contribution in https://github.com/remix-run/react-router/pull/8651
@rtmann made their first contribution in https://github.com/remix-run/react-router/pull/8725

Full Changelog: https://github.com/remix-run/react-router/compare/v6.2.2...v6.3.0","What's Changed
Added the v5 to v6 backwards compatibility package 💜 (link). The official guide can be found in this discussion
New Contributors
@mfijas made their first contribution in link
@ThornWu made their first contribution in link
@janpaepke made their first contribution in link
@rtmann made their first contribution in link
Full Changelog: link"
75,,
76,,
77,,
78,,
79,,
80,"What's Changed
🐛 Bug Fixes

Fixed nested splat routes that begin with special URL-safe characters (#8563)
Fixed a bug where index routes were missing route context in some cases (#8497) 

New Contributors

@chasinhues made their first contribution in https://github.com/remix-run/react-router/pull/8514
@underager made their first contribution in https://github.com/remix-run/react-router/pull/8531
@kantuni made their first contribution in https://github.com/remix-run/react-router/pull/8537
@ArjaanBuijk made their first contribution in https://github.com/remix-run/react-router/pull/8536
@jmargeta made their first contribution in https://github.com/remix-run/react-router/pull/8548
@koojaa made their first contribution in https://github.com/remix-run/react-router/pull/8542
@chrisngobanh made their first contribution in https://github.com/remix-run/react-router/pull/8576
@ChristopherChudzicki made their first contribution in https://github.com/remix-run/react-router/pull/8582
@awreese made their first contribution in https://github.com/remix-run/react-router/pull/8596
@bhbs made their first contribution in https://github.com/remix-run/react-router/pull/8601
@LukerSpringtree made their first contribution in https://github.com/remix-run/react-router/pull/8619
@hsbtr made their first contribution in https://github.com/remix-run/react-router/pull/8476
@abhi-kr-2100 made their first contribution in https://github.com/remix-run/react-router/pull/8658
@cvbuelow made their first contribution in https://github.com/remix-run/react-router/pull/8663
@hyesungoh made their first contribution in https://github.com/remix-run/react-router/pull/8666
@BrianT1414 made their first contribution in https://github.com/remix-run/react-router/pull/8667
@IbraRouisDev made their first contribution in https://github.com/remix-run/react-router/pull/8683
@shihanng made their first contribution in https://github.com/remix-run/react-router/pull/8689
@latin-1 made their first contribution in https://github.com/remix-run/react-router/pull/8529
@Isammoc made their first contribution in https://github.com/remix-run/react-router/pull/8533
@KutnerUri made their first contribution in https://github.com/remix-run/react-router/pull/8278
@shamsup made their first contribution in https://github.com/remix-run/react-router/pull/8563
@brophdawg11 made their first contribution in https://github.com/remix-run/react-router/pull/8691

Full Changelog: https://github.com/remix-run/react-router/compare/v6.2.1...v6.2.2","What's Changed
🐛 Bug Fixes
Fixed nested splat routes that begin with special URL-safe characters (#8563)
Fixed a bug where index routes were missing route context in some cases (#8497) 
New Contributors
@chasinhues made their first contribution in link
@underager made their first contribution in link
@kantuni made their first contribution in link
@ArjaanBuijk made their first contribution in link
@jmargeta made their first contribution in link
@koojaa made their first contribution in link
@chrisngobanh made their first contribution in link
@ChristopherChudzicki made their first contribution in link
@awreese made their first contribution in link
@bhbs made their first contribution in link
@LukerSpringtree made their first contribution in link
@hsbtr made their first contribution in link
@abhi-kr-2100 made their first contribution in link
@cvbuelow made their first contribution in link
@hyesungoh made their first contribution in link
@BrianT1414 made their first contribution in link
@IbraRouisDev made their first contribution in link
@shihanng made their first contribution in link
@latin-1 made their first contribution in link
@Isammoc made their first contribution in link
@KutnerUri made their first contribution in link
@shamsup made their first contribution in link
@brophdawg11 made their first contribution in link
Full Changelog: link"
81,,
82,"This release updates the internal history dependency to 5.2.0.
Full Changelog: https://github.com/remix-run/react-router/compare/v6.2.0...v6.2.1","This release updates the internal history dependency to 5.2.0.
Full Changelog: link"
83,"🐛 Bug fixes

Fixed the RouteProps element type, which should be a ReactNode (#8473)
Fixed a bug with useOutlet for top-level routes (#8483)

✨ Features

We now use statically analyzable CJS exports. This enables named imports in Node ESM scripts (See the commit).

New Contributors

@thisiskartik made their first contribution in https://github.com/remix-run/react-router/pull/8487
@vijaypushkin made their first contribution in https://github.com/remix-run/react-router/pull/8491

Full Changelog: https://github.com/remix-run/react-router/compare/v6.1.1...v6.2.0","🐛 Bug fixes
Fixed the RouteProps element type, which should be a ReactNode (#8473)
Fixed a bug with useOutlet for top-level routes (#8483)
✨ Features
We now use statically analyzable CJS exports. This enables named imports in Node ESM scripts (See the commit).
New Contributors
@thisiskartik made their first contribution in link
@vijaypushkin made their first contribution in link
Full Changelog: link"
84,"In v6.1.0 we inadvertently shipped a new, undocumented API that will likely introduce bugs (#7586). We have flagged HistoryRouter as unstable_HistoryRouter, as this API will likely need to change before a new major release.
Full Changelog: https://github.com/remix-run/react-router/compare/v6.1.0...v6.1.1","In v6.1.0 we inadvertently shipped a new, undocumented API that will likely introduce bugs (#7586). We have flagged HistoryRouter as unstable_HistoryRouter, as this API will likely need to change before a new major release.
Full Changelog: link"
85,"🐛 Bug fixes

Fixed a bug that broke support for base64 encoded IDs on nested routes (#8291)

✨ Features

<Outlet> can now receive a context prop. This value is passed to child routes and is accessible via the new useOutletContext hook. See the API docs for details. (#8461)
<NavLink> can now receive a child function for access to its props. (#8164)

💅 Enhancements

Improved TypeScript signature for useMatch and matchPath. For example, when you call useMatch(""foo/:bar/:baz""), the path is parsed and the return type will be PathMatch<""bar"" | ""baz"">. (#8030)
A few error message improvements (#8202)

New Contributors

@rwieruch made their first contribution in https://github.com/remix-run/react-router/pull/8244
@codeiotic made their first contribution in https://github.com/remix-run/react-router/pull/8247
@Sannnao made their first contribution in https://github.com/remix-run/react-router/pull/8263
@mattmazzola made their first contribution in https://github.com/remix-run/react-router/pull/8255
@ngokevin made their first contribution in https://github.com/remix-run/react-router/pull/8267
@TimisRobert made their first contribution in https://github.com/remix-run/react-router/pull/8269
@mikeldking made their first contribution in https://github.com/remix-run/react-router/pull/8279
@fishmandev made their first contribution in https://github.com/remix-run/react-router/pull/8289
@rjerue made their first contribution in https://github.com/remix-run/react-router/pull/8304
@rockingskier made their first contribution in https://github.com/remix-run/react-router/pull/8314
@arinthros made their first contribution in https://github.com/remix-run/react-router/pull/8337
@noisypigeon made their first contribution in https://github.com/remix-run/react-router/pull/8361
@elylucas made their first contribution in https://github.com/remix-run/react-router/pull/8368
@paulsmithkc made their first contribution in https://github.com/remix-run/react-router/pull/8357
@sanketshah19 made their first contribution in https://github.com/remix-run/react-router/pull/8372
@JakubDrozd made their first contribution in https://github.com/remix-run/react-router/pull/8402
@markivancho made their first contribution in https://github.com/remix-run/react-router/pull/8414
@turansky made their first contribution in https://github.com/remix-run/react-router/pull/8420
@shivamsinghchahar made their first contribution in https://github.com/remix-run/react-router/pull/8423
@petersendidit made their first contribution in https://github.com/remix-run/react-router/pull/8436
@Ajayff4 made their first contribution in https://github.com/remix-run/react-router/pull/8373
@RobHannay made their first contribution in https://github.com/remix-run/react-router/pull/8455
@kddnewton made their first contribution in https://github.com/remix-run/react-router/pull/8030
@brockross made their first contribution in https://github.com/remix-run/react-router/pull/8462
@sergiodxa made their first contribution in https://github.com/remix-run/react-router/pull/8164
@baozouai made their first contribution in https://github.com/remix-run/react-router/pull/8171
@liuhanqu made their first contribution in https://github.com/remix-run/react-router/pull/8374

Full Changelog: https://github.com/remix-run/react-router/compare/v6.0.1...v6.1.0","🐛 Bug fixes
Fixed a bug that broke support for base64 encoded IDs on nested routes (#8291)
✨ Features
 can now receive a context prop. This value is passed to child routes and is accessible via the new useOutletContext hook. See the API docs for details. (#8461)
 can now receive a child function for access to its props. (#8164)
💅 Enhancements
Improved TypeScript signature for useMatch and matchPath. For example, when you call useMatch(""foo/:bar/:baz""), the path is parsed and the return type will be PathMatch<""bar"" | ""baz"">. (#8030)
A few error message improvements (#8202)
New Contributors
@rwieruch made their first contribution in link
@codeiotic made their first contribution in link
@Sannnao made their first contribution in link
@mattmazzola made their first contribution in link
@ngokevin made their first contribution in link
@TimisRobert made their first contribution in link
@mikeldking made their first contribution in link
@fishmandev made their first contribution in link
@rjerue made their first contribution in link
@rockingskier made their first contribution in link
@arinthros made their first contribution in link
@noisypigeon made their first contribution in link
@elylucas made their first contribution in link
@paulsmithkc made their first contribution in link
@sanketshah19 made their first contribution in link
@JakubDrozd made their first contribution in link
@markivancho made their first contribution in link
@turansky made their first contribution in link
@shivamsinghchahar made their first contribution in link
@petersendidit made their first contribution in link
@Ajayff4 made their first contribution in link
@RobHannay made their first contribution in link
@kddnewton made their first contribution in link
@brockross made their first contribution in link
@sergiodxa made their first contribution in link
@baozouai made their first contribution in link
@liuhanqu made their first contribution in link
Full Changelog: link"
86,"✨ Features

Added the reloadDocument prop to <Link>. This allows <Link> to function like a normal anchor tag by reloading the document after navigation while maintaining the relative to resolution.

🗒️ Docs

Fixed several issues in docblocks and the docs themselves. See the full changelog for the deets!

🤝 New Contributors

@rwieruch made their first contribution in https://github.com/remix-run/react-router/pull/8244
@ProProgrammer2504 made their first contribution in https://github.com/remix-run/react-router/pull/8247
@Sannnao made their first contribution in https://github.com/remix-run/react-router/pull/8263
@mattmazzola made their first contribution in https://github.com/remix-run/react-router/pull/8255
@ngokevin made their first contribution in https://github.com/remix-run/react-router/pull/8267
@TimisRobert made their first contribution in https://github.com/remix-run/react-router/pull/8269
@mikeldking made their first contribution in https://github.com/remix-run/react-router/pull/8279
@fishmandev made their first contribution in https://github.com/remix-run/react-router/pull/8289

Full Changelog
https://github.com/remix-run/react-router/compare/v6.0.1...v6.0.2","✨ Features
Added the reloadDocument prop to . This allows  to function like a normal anchor tag by reloading the document after navigation while maintaining the relative to resolution.
🗒️ Docs
Fixed several issues in docblocks and the docs themselves. See the full changelog for the deets!
🤝 New Contributors
@rwieruch made their first contribution in link
@ProProgrammer2504 made their first contribution in link
@Sannnao made their first contribution in link
@mattmazzola made their first contribution in link
@ngokevin made their first contribution in link
@TimisRobert made their first contribution in link
@mikeldking made their first contribution in link
@fishmandev made their first contribution in link
Full Changelog
link"
87,"🐛 Bug Fixes

Add a default <StaticRouter location> value (#8243)
Add invariant for using <Route> inside <Routes> to help people make the change (#8238)
","🐛 Bug Fixes
Add a default  value (#8243)
Add invariant for using  inside  to help people make the change (#8238)"
88,"React Router v6 is here!
Please go read our blog post for more information on all the great stuff in v6 including notes about how to upgrade from React Router v5 and Reach Router.","React Router v6 is here!
Please go read our blog post for more information on all the great stuff in v6 including notes about how to upgrade from React Router v5 and Reach Router."
89,"Remember last week when we said

We anticipate this will be the last beta release before v6 stable next week.

Yeah, about that … 😅 
We found and squashed a few high-priority bugs that needed to be addressed first. But it's coming very soon, we promise! In the mean time, here's what you'll get from our eight-est and greatest beta release:
🐛 Bug Fixes

We fixed a few bugs in useHref that resulted in the incorrect resolved value in cases where a basename is used on the <Router /> component (See #8133 and #8142 for details).
We also fixed a bug in our path ranking algorithm so that splat routes (routes with a * path value) are now correctly ranked ahead of layout routes.

🗒️ Docs
We've added lots of goodies to our docs and examples, and there's a lot more yet to come. Take a look and see if you find something that makes your work a little easier! We think the lazy loading and custom query parsing examples are particularly cool! 🤓 ","Remember last week when we said
We anticipate this will be the last beta release before v6 stable next week.
Yeah, about that … 😅 
We found and squashed a few high-priority bugs that needed to be addressed first. But it's coming very soon, we promise! In the mean time, here's what you'll get from our eight-est and greatest beta release:
🐛 Bug Fixes
We fixed a few bugs in useHref that resulted in the incorrect resolved value in cases where a basename is used on the  component (See #8133 and #8142 for details).
We also fixed a bug in our path ranking algorithm so that splat routes (routes with a * path value) are now correctly ranked ahead of layout routes.
🗒️ Docs
We've added lots of goodies to our docs and examples, and there's a lot more yet to come. Take a look and see if you find something that makes your work a little easier! We think the lazy loading and custom query parsing examples are particularly cool! 🤓 "
90,"In this release we made a small but significant change to how <Link to=""..""> works. This is going to help out a lot if you were trying to use links in a * route.
We have also backed out our blocking/prompt APIs for the stable v6 release. We will revisit this post 6.0 when we have a little more time to get it right.
✨ Features
The major change in this release could also be classified as a bugfix or a breaking change, depending on how you look at it. We essentialy altered the way <Link to=""..""> works. See #8086 for the motivation behind this change.
You'll probably want to reread the section in the v5 => v6 migration guide about <Link to> values (it has been updated), but it basically boils down to this: any leading .. segment in a <Link to> value traverses ""up"" one route and builds upon that route's path instead of just removing one URL segment. This feature really completes the story of relative routes and links.
We could consider this a bugfix, since this is how it was always intended to work in the first place. Without it, you'd have a difficult time linking predictably in * routes because your <a href> would be different depending on the number of segments in the current URL.
The reason this could also be considered a breaking change is that .. now works slightly differently in <Link to> than it would in <a href>. When you have <a href=""..""> it operates on the URL pathname, removing one segment of the current URL. However, since many routes really only match a single segment of the URL, there is often no difference between <Link to=""..""> and <a href="".."">.
💔 Breaking Changes

We removed useBlocker(), usePrompt(), and <Prompt> for now. We will revisit these post 6.0 when we have more time to get it right. But we don't want it to block (see what I did there) the release of all the other awesome stuff we've got in v6.

🛠 Roadmap
We anticipate this will be the last beta release before v6 stable next week. Please give it a shot and let us know how it goes!
👍 Upgrading
If you're thinking about upgrading to v6, I published a few notes this past week that may help you:

This note talks about removing <Redirect> elements from any <Switch>es you may have in your v5 app and how you can get better SEO in the process if you're currently relying on client-side redirects.
This note talks about how to refactor your code to avoid ""wrapping"" <Route> elements, which won't work in v6.

Both of those posts contain steps you can take today in your v5 app without upgrading to v6.
We are also developing a backwards compat lib that should help some of you upgrade from v5 to v6. We'll post more about this when it's ready.
💻 Installing
Development for v6 has switched from dev to the main branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next","In this release we made a small but significant change to how  works. This is going to help out a lot if you were trying to use links in a * route.
We have also backed out our blocking/prompt APIs for the stable v6 release. We will revisit this post 6.0 when we have a little more time to get it right.
✨ Features
The major change in this release could also be classified as a bugfix or a breaking change, depending on how you look at it. We essentialy altered the way  works. See #8086 for the motivation behind this change.
You'll probably want to reread the section in the v5 => v6 migration guide about  values (it has been updated), but it basically boils down to this: any leading .. segment in a  value traverses ""up"" one route and builds upon that route's path instead of just removing one URL segment. This feature really completes the story of relative routes and links.
We could consider this a bugfix, since this is how it was always intended to work in the first place. Without it, you'd have a difficult time linking predictably in * routes because your  would be different depending on the number of segments in the current URL.
The reason this could also be considered a breaking change is that .. now works slightly differently in  than it would in . When you have  it operates on the URL pathname, removing one segment of the current URL. However, since many routes really only match a single segment of the URL, there is often no difference between  and .
💔 Breaking Changes
We removed useBlocker(), usePrompt(), and  for now. We will revisit these post 6.0 when we have more time to get it right. But we don't want it to block (see what I did there) the release of all the other awesome stuff we've got in v6.
🛠 Roadmap
We anticipate this will be the last beta release before v6 stable next week. Please give it a shot and let us know how it goes!
👍 Upgrading
If you're thinking about upgrading to v6, I published a few notes this past week that may help you:
This note talks about removing  elements from any es you may have in your v5 app and how you can get better SEO in the process if you're currently relying on client-side redirects.
This note talks about how to refactor your code to avoid ""wrapping""  elements, which won't work in v6.
Both of those posts contain steps you can take today in your v5 app without upgrading to v6.
We are also developing a backwards compat lib that should help some of you upgrade from v5 to v6. We'll post more about this when it's ready.
💻 Installing
Development for v6 has switched from dev to the main branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next"
91,"No big enhancements in this release, just squashing bugs and writing lots of tests! Also, we are hard at work on cranking out examples for v6. See the end of this post for an update on our roadmap between here and v6 stable.
🧰 Examples
We have begun creating some examples for v6 that we hope will help developers make effective use of all the new features we have. So far, we have examples for the following:

Basic Example – A basic client-side app for v6 showing how to use nested routes, layouts, links, and the new <Outlet> API
Auth Example – Demonstrates an authentication flow including using the new useNavigate() hook, the <Navigate> element, and location.state
Search Params Example – Demonstrates how to build a simple search form that uses the new useSearchParams() hook
SSR Example – A server-rendered app that uses <StaticRouter> on the server and uses a <BrowserRouter> with ReactDOM.hydrate() on the client

Each example includes a button in the README that allows you to instantly launch a running instance on StackBlitz that you can play with. We hope you enjoy exploring!
🐛  Bugfixes

Make <NavLink> match only whole URL segments instead of pieces. This means that <NavLink to=""/home/users""> will still be active at /home/users, but not at /home/users2. See #7523
Makes ""layout routes"" (routes with no path) never match unless one of their children do. See #8085 
Fixes a route matching regression with splat routes that was introduced in beta.5. See #8072 and #8109 
Fixes matching a nested splat route. See af7d038e
Provide all parent route params to descendant <Routes>. This reverses a decision that we made in beta.5 to remove them. See #8073

💔 Breaking Changes

Splats in route paths (*) match only after a / in the URL. This means that <Route path=""files*""> will always match as if it were <Route path=""files/*"">. The router will issue a warning if your route path ends with * but not /*

🛠 Roadmap
We are very close to a stable release! The last big code changes we need to make are:

Fixing ""linking up"". Currently a <Link to=""..""> operates on the URL pathname. However, this makes it difficult to link to the parent route when you're in a splat route. See #8086. This will be a breaking change.
We are going to remove useBlocker() and <Prompt> in our initial v6 release, with plans to revisit them and possibly add them back at some point in the future. I still need to write up something here that explains our rationale. This will also be a breaking change.
We are going to add some animation primitives (see https://github.com/remix-run/react-router/discussions/8008). The <Routes location> prop will be in v6, but it isn't ideal for animation.

💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next","No big enhancements in this release, just squashing bugs and writing lots of tests! Also, we are hard at work on cranking out examples for v6. See the end of this post for an update on our roadmap between here and v6 stable.
🧰 Examples
We have begun creating some examples for v6 that we hope will help developers make effective use of all the new features we have. So far, we have examples for the following:
Basic Example – A basic client-side app for v6 showing how to use nested routes, layouts, links, and the new  API
Auth Example – Demonstrates an authentication flow including using the new useNavigate() hook, the  element, and location.state
Search Params Example – Demonstrates how to build a simple search form that uses the new useSearchParams() hook
SSR Example – A server-rendered app that uses  on the server and uses a  with ReactDOM.hydrate() on the client
Each example includes a button in the README that allows you to instantly launch a running instance on StackBlitz that you can play with. We hope you enjoy exploring!
🐛  Bugfixes
Make  match only whole URL segments instead of pieces. This means that  will still be active at /home/users, but not at /home/users2. See #7523
Makes ""layout routes"" (routes with no path) never match unless one of their children do. See #8085 
Fixes a route matching regression with splat routes that was introduced in beta.5. See #8072 and #8109 
Fixes matching a nested splat route. See af7d038e
Provide all parent route params to descendant . This reverses a decision that we made in beta.5 to remove them. See #8073
💔 Breaking Changes
Splats in route paths () match only after a / in the URL. This means that  will always match as if it were . The router will issue a warning if your route path ends with * but not /
🛠 Roadmap
We are very close to a stable release! The last big code changes we need to make are:
Fixing ""linking up"". Currently a  operates on the URL pathname. However, this makes it difficult to link to the parent route when you're in a splat route. See #8086. This will be a breaking change.
We are going to remove useBlocker() and  in our initial v6 release, with plans to revisit them and possibly add them back at some point in the future. I still need to write up something here that explains our rationale. This will also be a breaking change.
We are going to add some animation primitives (see link). The  prop will be in v6, but it isn't ideal for animation.
💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next"
92,"This week's release adds some much-needed polish to a few niche features of the router: splat routes (a route that uses a * path) and basenames. It also adds a renderMatches API that completes the story for those of you who may have been using react-router-config in v4 and v5.
🐛  Bugfixes

A * in a child route path matches after a slash following its parent route path. This fixes some situations where the * was overly greedy (see #7972)
Resolution of <Link to="".""> and useResolvedPath(""."") values are fixed in splat routes. Previously these resolved relative to the parent route's path. They now resolve relative to the path of the route that rendered them.

✨  Enhancements
This release makes it easier to work with apps that have multiple entry points. Using the <Router basename> prop allows React Router to be easily deployed on only a portion of a larger site by using a portion of the URL pathname (the ""basename"") to transparently prefix all route paths and link navigations.
For example, you can deploy one React Router app at the /inbox URL prefix, and another one at the /admin prefix. These base URLs represent two different entry points into your app, each with its own bundles. The rest of your site, including the root / URL could be rendered by something other than React Router, for example by your server framework of choice.
In the bundle for each entry point, simply initialize React Router with the basename of that entry point.
tsx
<Router basename=""/inbox"">
  // ...
</Router>
Then define your routes and link paths without using the /inbox URL prefix in any of them. The entire app will run relative to that prefix.
Another improvement in this release is the addition of the renderMatches API, which is the complement of matchRoutes. These APIs are both very low-level and should not normally be needed. But they are sometimes nice to use if you are doing your own data loading using the array of matches that you get back from matchRoutes.
matchRoutes and renderMatches are the equivalent of the react-router-config package we shipped in v4 and v5, just built directly into the router instead of in a separate package.
💔 Breaking Changes

<Routes basename> has moved to <Router basename>. This prop is also available on all router variants (<BrowserRouter>, <HashRouter>, etc.).
useLocation().pathname no longer includes the basename, if present.
The basename argument was removed from useRoutes. This reverts the signature to useRoutes(routes, location), same as it was previous to beta.4.
Descendant <Routes> do not get the params from their parents. This helps a set of <Routes> to be more portable by decoupling it from the params of its parents and makes it easier to know which params will be returned from useParams(). If you were relying on this behavior previously, you'll need to pass along the params manually to the elements rendered by the descendant <Routes>. See this comment for an example of how this is to be done and for a potential workaround if you really need the old behavior.
match.pathname in a splat route now includes the portion of the pathname matched by the *. This makes the * param behave much more like other dynamic :id-style params.
Resolution of relative <Link>s in splat routes is changed now because the entire pathname that was matched by that route is now different (see previous bullet). Instead of resolving relative to the portion of the pathname before the *, paths resolve relative to the full pathname that was matched by the route.

💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next","This week's release adds some much-needed polish to a few niche features of the router: splat routes (a route that uses a * path) and basenames. It also adds a renderMatches API that completes the story for those of you who may have been using react-router-config in v4 and v5.
🐛  Bugfixes
A * in a child route path matches after a slash following its parent route path. This fixes some situations where the * was overly greedy (see #7972)
Resolution of  and useResolvedPath(""."") values are fixed in splat routes. Previously these resolved relative to the parent route's path. They now resolve relative to the path of the route that rendered them.
✨  Enhancements
This release makes it easier to work with apps that have multiple entry points. Using the  prop allows React Router to be easily deployed on only a portion of a larger site by using a portion of the URL pathname (the ""basename"") to transparently prefix all route paths and link navigations.
For example, you can deploy one React Router app at the /inbox URL prefix, and another one at the /admin prefix. These base URLs represent two different entry points into your app, each with its own bundles. The rest of your site, including the root / URL could be rendered by something other than React Router, for example by your server framework of choice.
In the bundle for each entry point, simply initialize React Router with the basename of that entry point.
tsx

  // ...

Then define your routes and link paths without using the /inbox URL prefix in any of them. The entire app will run relative to that prefix.
Another improvement in this release is the addition of the renderMatches API, which is the complement of matchRoutes. These APIs are both very low-level and should not normally be needed. But they are sometimes nice to use if you are doing your own data loading using the array of matches that you get back from matchRoutes.
matchRoutes and renderMatches are the equivalent of the react-router-config package we shipped in v4 and v5, just built directly into the router instead of in a separate package.
💔 Breaking Changes
 has moved to . This prop is also available on all router variants (, , etc.).
useLocation().pathname no longer includes the basename, if present.
The basename argument was removed from useRoutes. This reverts the signature to useRoutes(routes, location), same as it was previous to beta.4.
Descendant  do not get the params from their parents. This helps a set of  to be more portable by decoupling it from the params of its parents and makes it easier to know which params will be returned from useParams(). If you were relying on this behavior previously, you'll need to pass along the params manually to the elements rendered by the descendant . See this comment for an example of how this is to be done and for a potential workaround if you really need the old behavior.
match.pathname in a splat route now includes the portion of the pathname matched by the . This makes the * param behave much more like other dynamic :id-style params.
Resolution of relative s in splat routes is changed now because the entire pathname that was matched by that route is now different (see previous bullet). Instead of resolving relative to the portion of the pathname before the , paths resolve relative to the full pathname that was matched by the route.
💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next"
93,"Last week we released a lot of nice little bug features, but we did get a little carried away and let a little bug slip through with relative path resolution. Our bad! That nasty lil' guy is squashed in this week's beta. 🐛
And there's more! Let's dive in…
🐛 Bugfixes

Path resolution for nested relative routes was broken in the last release and should now be fixed. Nested routes construct their pathname based on the location of their parent, not the current location. This is explained in detail under Relative Routes and Links in our advanced guides, and the issue itself in #8004

✨ Enhancements

We made some enhancements with the Params type which is now generic, so you can add your own types if you know what to expect from functions that return query parameters. (#8019)

```tsx
// before
let { valid, invalid } = useParams(); // No problems here!
let match = useMatch(""profile/:userId"");
let userId = match?.params.user; // wrong param, but TS doesn't know that!
// after:
let { valid, invalid } = useParams<""valid"" | ""key"">(); // Property 'invalid' does not exist on type 'Params<""valid"" | ""key"">'
let match = useMatch<""userId"">(""profile/:userId"");
let userId = match?.params.user; // Property 'user' does not exist on type 'Params<""userId"">'
```

Absolute nested path support

There was quite a bit of discussion in #7335 from people who are using constants to define their route paths. In this style, paths are often written as absolute paths from the root / URL. These constants are then able to be used both in <Route path> definitions as well as <Link to> values. It usually looks something like this:
``tsx
const USERS_PATH = ""/users"";
const USERS_INDEX_PATH =${USERS_PATH}/;
const USER_PROFILE_PATH =${USERS_PATH}/:id`;
function UsersRoutes() {
  return (
    
}>
        } />
        } />
      

  );
}
```
This style of use is now fully supported in v6. This is great for people who write their apps like this, but it technically could cause some breakage if you were using absolute paths (that start with /) in nested routes in previous betas. To fix this, simply remove the / from the beginning of any route paths that are meant to be relative. React Router will throw an error if you are using absolute paths that don't match their parent route paths. Hopefully this should help you find them if you are upgrading.
If you were using <Route path=""/""> to indicate an index route, you can now use the new <Route index> prop to accomplish the same thing. The index prop makes it easy to scan a route config to find the index route. It also provides a guarantee that nobody will ever add children to that route.
Here's the same route config as the one above, but rewritten with relative paths and the index prop:
tsx
function UsersRoutes() {
  return (
    <Routes>
      <Route path=""users"" element={<UsersLayout />}>
        <Route index element={<UsersIndex />} />
        <Route path="":id"" element={<UserProfile />} />
      </Route>
    </Routes>
  );
}
A lot of our work on React Router is about doing the least surprising thing for our users. Allowing absolute paths in nested routes gets us a little closer to that goal!
💔 Breaking Changes


Removed the ability for nested route paths to begin with a / and not contain the complete path of their parent routes. This was necessary in order to introduce support for absolute paths in nested routes, described in detail above


Removed the createRoutesFromArray utility function. You can now pass your routes directly to useRoutes or matchRoutes without passing it through createRoutesFromArray first


Removed the PartialRouteObject type. If you were importing and using this type before, use RouteObject instead, which has been updated to make all properties optional


The useRoutes API has changed slightly. Instead of passing a basename as the second argument, you should instead pass it as a named property in an object:


```tsx
// Before
useRoutes([...routes], basename);
// After
useRoutes([...routes], { basename });
```

The matchPath function now returns match.pattern instead of match.path, which is a little more descriptive about what it actually is

💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next","Last week we released a lot of nice little bug features, but we did get a little carried away and let a little bug slip through with relative path resolution. Our bad! That nasty lil' guy is squashed in this week's beta. 🐛
And there's more! Let's dive in…
🐛 Bugfixes
Path resolution for nested relative routes was broken in the last release and should now be fixed. Nested routes construct their pathname based on the location of their parent, not the current location. This is explained in detail under Relative Routes and Links in our advanced guides, and the issue itself in #8004
✨ Enhancements
We made some enhancements with the Params type which is now generic, so you can add your own types if you know what to expect from functions that return query parameters. (#8019)
module
Absolute nested path support
There was quite a bit of discussion in #7335 from people who are using constants to define their route paths. In this style, paths are often written as absolute paths from the root / URL. These constants are then able to be used both in  definitions as well as  values. It usually looks something like this:
module;
function UsersRoutes() {
  return (
}>
        } />
        } />
);
}
```
This style of use is now fully supported in v6. This is great for people who write their apps like this, but it technically could cause some breakage if you were using absolute paths (that start with /) in nested routes in previous betas. To fix this, simply remove the / from the beginning of any route paths that are meant to be relative. React Router will throw an error if you are using absolute paths that don't match their parent route paths. Hopefully this should help you find them if you are upgrading.
If you were using  to indicate an index route, you can now use the new  prop to accomplish the same thing. The index prop makes it easy to scan a route config to find the index route. It also provides a guarantee that nobody will ever add children to that route.
Here's the same route config as the one above, but rewritten with relative paths and the index prop:
tsx
function UsersRoutes() {
  return (
    
}>
        } />
        } />
      

  );
}
A lot of our work on React Router is about doing the least surprising thing for our users. Allowing absolute paths in nested routes gets us a little closer to that goal!
💔 Breaking Changes
Removed the ability for nested route paths to begin with a / and not contain the complete path of their parent routes. This was necessary in order to introduce support for absolute paths in nested routes, described in detail above
Removed the createRoutesFromArray utility function. You can now pass your routes directly to useRoutes or matchRoutes without passing it through createRoutesFromArray first
Removed the PartialRouteObject type. If you were importing and using this type before, use RouteObject instead, which has been updated to make all properties optional
The useRoutes API has changed slightly. Instead of passing a basename as the second argument, you should instead pass it as a named property in an object:
module
The matchPath function now returns match.pattern instead of match.path, which is a little more descriptive about what it actually is
💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next"
94,"Loads of goodies for you this week, as well as a few breaking changes for all of you eager beavers who are brave enough to use beta software in production! 🦫
(seriously, thank you all for helping us tighten up our APIs and fix nasty bugs)
💔 Breaking Changes!

NavLink no longer supports the activeClassName or activeStyle props. Instead, we provide a more powerful API that allows you to pass functions to either the className or style props to conditionally apply values based on the link's active state. While a bit more verbose in some cases, this offers a nicer experience for folks who use utility class-based CSS. (#7194)

```tsx
// Before


// After

link ${
      isActive
        ? ""active-link""
        : // Couldn't do this before!
          ""inactive-link""
    }
  }
/>
 ({ color: isActive ? ""green"" : ""blue"" })} />
```

Note: You can always abstract over this feature in a custom NavLink if you prefer the old v5 API.


The useRoutes API has changed slightly. Instead of passing a basename as the second argument, you should instead pass it as a named property in an object:

```tsx
// Before
useRoutes([...routes], basename);
// After
useRoutes([...routes], { basename });
```
🐛 Bugfixes

The basename prop on Routes is treated as case-insensitive (#7997)
useNavigate previously used the incorrect pathname when called from parent routes when the URL matches one of its children. This fix also applies to useSearchParams (#7880)

✨ Enhancements

Routes and useRoutes now allow you to override the location, which may be useful when building some modal interfaces and route transition animations. We are working hard to update our docs to include examples for advanced patterns where this might be useful, but in the mean time this also brings Routes closer to feature parity with v5's Switch via the location prop. (#7117)
Provided new hooks useClickHandler and usePressHandler to make customizing Links a bit easier. (#7998)
Please note: with great power comes great responsibility. If you create a custom Link, be sure to render an actual HTML anchor element, otherwise your app will likely be inaccessible without a significant amount of additional work which, I assure you, you don't want to do!

💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next
🙏 Credits
Thanks to @andrelandgraf, @dhulme, @fgatti675, @hugmanrique, @MeiKatz, @chaance and @mjackson for your contributions!","Loads of goodies for you this week, as well as a few breaking changes for all of you eager beavers who are brave enough to use beta software in production! 🦫
(seriously, thank you all for helping us tighten up our APIs and fix nasty bugs)
💔 Breaking Changes!
NavLink no longer supports the activeClassName or activeStyle props. Instead, we provide a more powerful API that allows you to pass functions to either the className or style props to conditionally apply values based on the link's active state. While a bit more verbose in some cases, this offers a nicer experience for folks who use utility class-based CSS. (#7194)
```tsx
// Before
// After
link ${
      isActive
        ? ""active-link""
        : // Couldn't do this before!
          ""inactive-link""
    }
  }
/>
 ({ color: isActive ? ""green"" : ""blue"" })} />
```
Note: You can always abstract over this feature in a custom NavLink if you prefer the old v5 API.
The useRoutes API has changed slightly. Instead of passing a basename as the second argument, you should instead pass it as a named property in an object:
module
🐛 Bugfixes
The basename prop on Routes is treated as case-insensitive (#7997)
useNavigate previously used the incorrect pathname when called from parent routes when the URL matches one of its children. This fix also applies to useSearchParams (#7880)
✨ Enhancements
Routes and useRoutes now allow you to override the location, which may be useful when building some modal interfaces and route transition animations. We are working hard to update our docs to include examples for advanced patterns where this might be useful, but in the mean time this also brings Routes closer to feature parity with v5's Switch via the location prop. (#7117)
Provided new hooks useClickHandler and usePressHandler to make customizing Links a bit easier. (#7998)
Please note: with great power comes great responsibility. If you create a custom Link, be sure to render an actual HTML anchor element, otherwise your app will likely be inaccessible without a significant amount of additional work which, I assure you, you don't want to do!
💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next
🙏 Credits
Thanks to @andrelandgraf, @dhulme, @fgatti675, @hugmanrique, @MeiKatz, @chaance and @mjackson for your contributions!"
95,"This release of react-router-dom adds support for passing a function to either the className or style props to conditionally apply values based on the link's active state.
This provides similar functionality as the existing activeClassName and activeStyle props, but is a bit more powerful. For example, you can now easily apply styles exclusively to an inactive NavLink as well. This offers a nicer experience for folks who use utility class-based CSS tools such as Tailwind.
tsx
function Comp() {
  return (
    <NavLink
      to=""/""
      className={isActive =>
        `px-3 py-2 ${isActive ? 'text-gray-200' : 'text-gray-800'}`
      }
    >
      Home
    </NavLink>
  );
}
Note that as of v6.0.0-beta.3, the activeClassName and activeStyle props are removed completely. Adding support for functional className and style props to both v5 and v6 will give v5 users an easier upgrade path.
Thanks to @tim-phillips for raising the issue that inspired the change! 🥳","This release of react-router-dom adds support for passing a function to either the className or style props to conditionally apply values based on the link's active state.
This provides similar functionality as the existing activeClassName and activeStyle props, but is a bit more powerful. For example, you can now easily apply styles exclusively to an inactive NavLink as well. This offers a nicer experience for folks who use utility class-based CSS tools such as Tailwind.
tsx
function Comp() {
  return (
    
module
      }
    >
      Home
    
  );
}
Note that as of v6.0.0-beta.3, the activeClassName and activeStyle props are removed completely. Adding support for functional className and style props to both v5 and v6 will give v5 users an easier upgrade path.
Thanks to @tim-phillips for raising the issue that inspired the change! 🥳"
96,"This release fixes a bug with <Link> so that, when the to location is the same as the current, the history state entry is replaced instead of pushed to the stack. See https://github.com/remix-run/react-router/issues/5362 for details. 🥳
Thanks to @guidobouman for the PR and for everyone else who weighed in for the fix!","This release fixes a bug with  so that, when the to location is the same as the current, the history state entry is replaced instead of pushed to the stack. See link for details. 🥳
Thanks to @guidobouman for the PR and for everyone else who weighed in for the fix!"
97,"🐛 Bugfixes

Fixed a bug that broke paths in nested routes
Adds missing displayName back to <Link /> and <NavLink /> components

✨ Enhancements

The navigate function now prepends hash and search strings by default:
  js
  navigate({ search: ""?foo=1&bar=2"" }); // this works as expected!
  navigate({ search: ""foo=1&bar=2"" }); // this also works!
useParams now returns parameters from nested <Route />s when called in a parent <Route />

💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next
🙏 Credits
Thanks to @liho98, @wojtekmaj, @cravend, @chaance and @mjackson for your contributions!
Enjoy!","🐛 Bugfixes
Fixed a bug that broke paths in nested routes
Adds missing displayName back to  and  components
✨ Enhancements
The navigate function now prepends hash and search strings by default:
  js
  navigate({ search: ""?foo=1&bar=2"" }); // this works as expected!
  navigate({ search: ""foo=1&bar=2"" }); // this also works!
useParams now returns parameters from nested s when called in a parent 
💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next
🙏 Credits
Thanks to @liho98, @wojtekmaj, @cravend, @chaance and @mjackson for your contributions!
Enjoy!"
98,"We're on the road to a stable v6 release!
There are no new features in this release since beta.0, but a handful of squashed bugs, perf enhancements, and DX improvements for TypeScript users.
🐛 Bugfixes

Fixed a few bugs with pathname resolution. + characters no longer get decoded into spaces, and that little * is just a little less greedy (e.g., app/* no longer matches apples/*).
Link and navigate should properly respect the basename when using absolute paths.

✨ Enhancements

Internally we are separating navigator into a separate context object, meaning your components that call useNavigate will probably render a little less often. Wowza, much perf!
react-router-dom and react-router-native now re-exports all types exported from react-router

💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next
🙏 Credits
Thanks to @brookslybrand, @bogdansoare, @chaance and @mjackson for your contributions!
Enjoy!","We're on the road to a stable v6 release!
There are no new features in this release since beta.0, but a handful of squashed bugs, perf enhancements, and DX improvements for TypeScript users.
🐛 Bugfixes
Fixed a few bugs with pathname resolution. + characters no longer get decoded into spaces, and that little * is just a little less greedy (e.g., app/ no longer matches apples/).
Link and navigate should properly respect the basename when using absolute paths.
✨ Enhancements
Internally we are separating navigator into a separate context object, meaning your components that call useNavigate will probably render a little less often. Wowza, much perf!
react-router-dom and react-router-native now re-exports all types exported from react-router
💻 Installing
Development for v6 is chugging along on the dev branch.
If you'd like to test it out, install from npm:
bash
$ npm install history react-router-dom@next
🙏 Credits
Thanks to @brookslybrand, @bogdansoare, @chaance and @mjackson for your contributions!
Enjoy!"
99,"Today we are very happy to release the first beta of React Router version 6!
Major Features
No new features in this release since alpha.5, besides the fact that we are now using history v5 stable in various places behind the scenes.
Major Changes
There are a few breaking changes from alpha.5:

Moved <Route preload> into the experimental release channel
Moved useLocationPending into the experimental release channel
Made react-router a regular dependency of react-router-dom and react-router-native
Made history a peer dependency
Renamed useResolvedLocation to useResolvedPath to be more inline with the naming in the history API
Renamed resolveLocation to resolvePath to be more inline with the naming in the history API

Bugfixes

We now re-use the sourcemap output from tsc as input into the Rollup toolchain, so sourcemaps go all the way back to the original source instead of stopping at the tsc-generated files

Docs

Added a comprehensive API Reference
Updated the contributing guide

Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install history react-router-dom@next
Or, if you're on React Native:
$ yarn add history react-router-native@next
Roadmap
Now that we are in beta, you can expect fewer breaking changes (if any) between releases in the next channel. We are actively developing features targeted at supporting suspense for data loading in the experimental channel. The main thing left to do is documentation and guides (and fix bugs, ofc). If you can spare some time, we'd love to have some help :) 
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide. There is also a comprehensive API Reference.
Enjoy!","Today we are very happy to release the first beta of React Router version 6!
Major Features
No new features in this release since alpha.5, besides the fact that we are now using history v5 stable in various places behind the scenes.
Major Changes
There are a few breaking changes from alpha.5:
Moved  into the experimental release channel
Moved useLocationPending into the experimental release channel
Made react-router a regular dependency of react-router-dom and react-router-native
Made history a peer dependency
Renamed useResolvedLocation to useResolvedPath to be more inline with the naming in the history API
Renamed resolveLocation to resolvePath to be more inline with the naming in the history API
Bugfixes
We now re-use the sourcemap output from tsc as input into the Rollup toolchain, so sourcemaps go all the way back to the original source instead of stopping at the tsc-generated files
Docs
Added a comprehensive API Reference
Updated the contributing guide
Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install history react-router-dom@next
Or, if you're on React Native:
$ yarn add history react-router-native@next
Roadmap
Now that we are in beta, you can expect fewer breaking changes (if any) between releases in the next channel. We are actively developing features targeted at supporting suspense for data loading in the experimental channel. The main thing left to do is documentation and guides (and fix bugs, ofc). If you can spare some time, we'd love to have some help :) 
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide. There is also a comprehensive API Reference.
Enjoy!"
100,"This release is based on v6.0.0-beta.0 and adds a few features that are targeted at supporting React suspense for data loading. These features are:

A timeoutMs prop that may be passed to a <BrowserRouter>, <HashRouter>, <MemoryRouter>, or <NativeRouter>. This timeout dictates how long these routers will wait before transitioning to a new page after the URL has changed. The default timeoutMs is 5000 (5 seconds).
useLocationPending hook that returns true if a transition to a new location is pending
<Route preload> function that is called whenever a route matches and is about to render. This function is typically used for pre-seeing client-side data caches for data retrieval later during rendering, which may trigger suspense.

Development on v6's experimental channel is happening on the dev-experimental branch, which tracks all changes that occur on the dev branch.
What does ""experimental"" mean?
React Router v6's experimental release channel follows the same semantics as React's own experimental channel, which means that it is used for features that are not yet ready for a stable release. Use the experimental releases to try out new features before they are released.
Installing
If you'd like to test it out, install from npm:
$ npm install history react-router-dom@experimental
Or, if you're on React Native:
$ yarn add history react-router-native@experimental
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide. There is also a comprehensive API Reference.
Enjoy!","This release is based on v6.0.0-beta.0 and adds a few features that are targeted at supporting React suspense for data loading. These features are:
A timeoutMs prop that may be passed to a , , , or . This timeout dictates how long these routers will wait before transitioning to a new page after the URL has changed. The default timeoutMs is 5000 (5 seconds).
useLocationPending hook that returns true if a transition to a new location is pending
 function that is called whenever a route matches and is about to render. This function is typically used for pre-seeing client-side data caches for data retrieval later during rendering, which may trigger suspense.
Development on v6's experimental channel is happening on the dev-experimental branch, which tracks all changes that occur on the dev branch.
What does ""experimental"" mean?
React Router v6's experimental release channel follows the same semantics as React's own experimental channel, which means that it is used for features that are not yet ready for a stable release. Use the experimental releases to try out new features before they are released.
Installing
If you'd like to test it out, install from npm:
$ npm install history react-router-dom@experimental
Or, if you're on React Native:
$ yarn add history react-router-native@experimental
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide. There is also a comprehensive API Reference.
Enjoy!"
101,"This release adds support for data fetching with suspense using React's unstable_useTransition API. It is based on v6.0.0-alpha.5.
Support for suspense is added via a timeoutMs prop that may be passed to a <BrowserRouter>, <HashRouter>, <MemoryRouter>, or <NativeRouter>. Each of these use the prop internally to determine how long to wait to show the new page whenever the URL changes. The default timeoutMs is 5000 (5 seconds).
What does ""experimental"" mean?
React Router v6's experimental release channel follows the same semantics as React's own experimental channel, which means that it is used for features that are not yet ready for a stable release. Use the experimental releases to try out new features before they are released.
Installing
Development on v6's experimental channel is happening on the dev-experimental branch.
If you'd like to test it out, install from npm:
$ npm install react-router@experimental react-router-dom@experimental
Or, if you're on React Native:
$ yarn add react-router@experimental react-router-native@experimental
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!","This release adds support for data fetching with suspense using React's unstable_useTransition API. It is based on v6.0.0-alpha.5.
Support for suspense is added via a timeoutMs prop that may be passed to a , , , or . Each of these use the prop internally to determine how long to wait to show the new page whenever the URL changes. The default timeoutMs is 5000 (5 seconds).
What does ""experimental"" mean?
React Router v6's experimental release channel follows the same semantics as React's own experimental channel, which means that it is used for features that are not yet ready for a stable release. Use the experimental releases to try out new features before they are released.
Installing
Development on v6's experimental channel is happening on the dev-experimental branch.
If you'd like to test it out, install from npm:
$ npm install react-router@experimental react-router-dom@experimental
Or, if you're on React Native:
$ yarn add react-router@experimental react-router-native@experimental
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!"
102,"Major Features

Added <Route preload> and route.preload (JSX and useRoutes) APIs. The preload function will be called when the route has matched and is about to render.
Added <NavLink end> and <NavLink caseSensitive> to better control matching behavior of <NavLink>s

Major Changes
Warning: This release breaks compatibility with 6.0.0-alpha.4

Removed the <Router history> prop and moved responsibility for setting up/tearing down the listener (history.listen) into the wrapper components (<BrowserRouter>, <HashRouter>, etc.). <Router> is now a controlled component that just sets up context for the rest of the app.
Changed generatePath so it never returns placeholders. Instead, it will throw if a needed placeholder is missing.
Removed usage of React's experimental useTransition hook. We will publish our own ""experimental"" channel very soon with this hook added back in, but it won't be added back to the ""next"" channel (or stable) until it goes stable in React core.

Bugfixes

Fixed and improved several TypeScript interfaces

Docs

Added some docs for using the basename functionality to the migration guide

Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!","Major Features
Added  and route.preload (JSX and useRoutes) APIs. The preload function will be called when the route has matched and is about to render.
Added  and  to better control matching behavior of s
Major Changes
Warning: This release breaks compatibility with 6.0.0-alpha.4
Removed the  prop and moved responsibility for setting up/tearing down the listener (history.listen) into the wrapper components (, , etc.).  is now a controlled component that just sets up context for the rest of the app.
Changed generatePath so it never returns placeholders. Instead, it will throw if a needed placeholder is missing.
Removed usage of React's experimental useTransition hook. We will publish our own ""experimental"" channel very soon with this hook added back in, but it won't be added back to the ""next"" channel (or stable) until it goes stable in React core.
Bugfixes
Fixed and improved several TypeScript interfaces
Docs
Added some docs for using the basename functionality to the migration guide
Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!"
103,"This release includes a notable performance boost by separating the ""Router"" context from the ""History"" context internally. We also allow every element type for Link's component prop and support a sensitive prop on NavLink for control over case sensitive matching.
Enjoy!
Changes

Add sensitive prop on NavLink (#7251 by @caseywebdev)
Fix Link component prop type check (#7276 by @ypyakymiv)
Update mini-create-react-context (#7288 by @patricksmms)
Separate history to its own context (#7103 by @illuminist)
","This release includes a notable performance boost by separating the ""Router"" context from the ""History"" context internally. We also allow every element type for Link's component prop and support a sensitive prop on NavLink for control over case sensitive matching.
Enjoy!
Changes
Add sensitive prop on NavLink (#7251 by @caseywebdev)
Fix Link component prop type check (#7276 by @ypyakymiv)
Update mini-create-react-context (#7288 by @patricksmms)
Separate history to its own context (#7103 by @illuminist)"
104,"Lots of great stuff in this release, especially if you like Intellisense :)
Major Features

Migrated the core codebase to TypeScript and added TypeScript declarations
Added a migration guide for folks coming from reach/router
Added useInRouterContext hook for determining if you're in the context of a router or not
Added useLocationPending hook (experimental)
Added matchPath function for manually matching paths to URL pathnames

Note: experimental features rely on an experimental release of React and will probably be moved into a separate ""experimental"" release channel in the near future.
Major Changes
Warning: This release breaks compatibility with 6.0.0-alpha.3

useSearchParams now returns [searchParams, setSearchParams] (similar to useState). setSearchParams is a wrapper for navigate that updates the query string on the current URL. See the updated guide on working with the query string.
Removed the <StaticRouter context> API. We don't support navigation on the initial render in v6, so this API is unnecessary.
useMatch takes a route path (instead of a link to value as it did previously). It should have always taken a route path; this was just a simple oversight.

Bugfixes

Fixed a bug with multiple nested * routes
Force stable sort in browsers that don't have it so routes that otherwise rank equally maintain the order in which they were originally defined

Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!","Lots of great stuff in this release, especially if you like Intellisense :)
Major Features
Migrated the core codebase to TypeScript and added TypeScript declarations
Added a migration guide for folks coming from reach/router
Added useInRouterContext hook for determining if you're in the context of a router or not
Added useLocationPending hook (experimental)
Added matchPath function for manually matching paths to URL pathnames
Note: experimental features rely on an experimental release of React and will probably be moved into a separate ""experimental"" release channel in the near future.
Major Changes
Warning: This release breaks compatibility with 6.0.0-alpha.3
useSearchParams now returns [searchParams, setSearchParams] (similar to useState). setSearchParams is a wrapper for navigate that updates the query string on the current URL. See the updated guide on working with the query string.
Removed the  API. We don't support navigation on the initial render in v6, so this API is unnecessary.
useMatch takes a route path (instead of a link to value as it did previously). It should have always taken a route path; this was just a simple oversight.
Bugfixes
Fixed a bug with multiple nested * routes
Force stable sort in browsers that don't have it so routes that otherwise rank equally maintain the order in which they were originally defined
Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!"
105,"Major Features

Added a new useSearchParams hook (see f59ee5488bc343cf3c957b7e0cc395ef5eb572d2)

The useSearchParams hook returns a URLSearchParams object created from the current location.search string. This is a feature that people have wanted for a while, but we were always hesitant to ship a full-blown query parser with the router. Well, now that we have URLSearchParams widely available, we don't have to. I wrote up a small guide about how to use useSearchParams if you'd like to read more.
Major Changes
Warning: This release breaks compatibility with 6.0.0-alpha.2

Redirect (and redirectTo in useRoutes) was removed (see cbcd398276efaad31e5e994fdb2f80ca454eb859)
We no longer support redirecting on the initial render, due to compatibility issues with future versions of React

React won't let us change the state in an ancestor component on the initial render w/out warning, so we had to remove the <Redirect> component, as well as the ability to do a navigate() on the initial render. You can still render a <Navigate>, but it won't actually update the page until the next render.
If you really need to redirect on the initial render, you can either a) do it on your server (probably best, so it can be cached at the HTTP level instead of doing it in every user's browser) or b) do it outside of React Router (e.g. using the history API directly).
Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!","Major Features
Added a new useSearchParams hook (see f59ee5488bc343cf3c957b7e0cc395ef5eb572d2)
The useSearchParams hook returns a URLSearchParams object created from the current location.search string. This is a feature that people have wanted for a while, but we were always hesitant to ship a full-blown query parser with the router. Well, now that we have URLSearchParams widely available, we don't have to. I wrote up a small guide about how to use useSearchParams if you'd like to read more.
Major Changes
Warning: This release breaks compatibility with 6.0.0-alpha.2
Redirect (and redirectTo in useRoutes) was removed (see cbcd398276efaad31e5e994fdb2f80ca454eb859)
We no longer support redirecting on the initial render, due to compatibility issues with future versions of React
React won't let us change the state in an ancestor component on the initial render w/out warning, so we had to remove the  component, as well as the ability to do a navigate() on the initial render. You can still render a , but it won't actually update the page until the next render.
If you really need to redirect on the initial render, you can either a) do it on your server (probably best, so it can be cached at the HTTP level instead of doing it in every user's browser) or b) do it outside of React Router (e.g. using the history API directly).
Installing
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!"
106,"Changes

Upgrade hoist-non-react-statics/react-is to support newer React APIs (#7182 by @henryqdineen)
","Changes
Upgrade hoist-non-react-statics/react-is to support newer React APIs (#7182 by @henryqdineen)"
107,"This release fixes a few bugs with the previous alpha, namely:

Fix a few path matching corner cases
Fix rendering <Link>s on the server (see https://github.com/ReactTraining/react-router/pull/7126, thanks @danpantry)

Also, we added a new doc about adding React Router to your web project whether you're using create-react-app, Webpack, Parcel, or just plain 'ol <script> tags. Thanks @chancestrickland!
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Enjoy!","This release fixes a few bugs with the previous alpha, namely:
Fix a few path matching corner cases
Fix rendering s on the server (see link, thanks @danpantry)
Also, we added a new doc about adding React Router to your web project whether you're using create-react-app, Webpack, Parcel, or just plain 'ol "
108,"Moved history from peerDependencies to dependencies. This should make it easier for people to install and test.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next","Moved history from peerDependencies to dependencies. This should make it easier for people to install and test.
If you'd like to test it out, install from npm:
$ npm install react-router@next react-router-dom@next
Or, if you're on React Native:
$ yarn add react-router@next react-router-native@next"
109,"First alpha release of the next major version of React Router, version 6. A few of the highlights are:

Relative routes and links
Nested <Route>s
Automatic<Route> ranking with a new <Routes> API
New suspense-ready navigate API
useRoutes + matchRoutes for using object-based routing API

Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install history@5 react-router@6 react-router-dom@6
Or, if you're on React Native:
$ yarn add history@5 react-router@6 react-router-native@6
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Please note that although there are several breaking changes we are still working on the migration path and will continue to publish improvements and helpers in v5 that should help you upgrade as smoothly as possible. We are not done with v5. Heck, we're still cutting releases of v3.
This release addresses several long-standing issues and pitfalls with previous releases. We are focused on providing a smooth upgrade path for both v4/5 users and v3 users who would like to make the jump to v6. We will be publishing more very soon.
Enjoy!","First alpha release of the next major version of React Router, version 6. A few of the highlights are:
Relative routes and links
Nested s
Automatic ranking with a new  API
New suspense-ready navigate API
useRoutes + matchRoutes for using object-based routing API
Development for v6 is happening on the dev branch.
If you'd like to test it out, install from npm:
$ npm install history@5 react-router@6 react-router-dom@6
Or, if you're on React Native:
$ yarn add history@5 react-router@6 react-router-native@6
We are actively working on documentation. For now, if you're just interested in testing things out you may be interested in the getting started guide. If you're interested in upgrading an existing app, please check out the v5 to v6 migration guide.
Please note that although there are several breaking changes we are still working on the migration path and will continue to publish improvements and helpers in v5 that should help you upgrade as smoothly as possible. We are not done with v5. Heck, we're still cutting releases of v3.
This release addresses several long-standing issues and pitfalls with previous releases. We are focused on providing a smooth upgrade path for both v4/5 users and v3 users who would like to make the jump to v6. We will be publishing more very soon.
Enjoy!"
110,"Changes

Fix React version detection for UNSAFE_ lifecycles (fixes issues with React 16.10) (#6961 by @henryqdineen)
Add element shape for Link's innerRef prop (#6886 by @nescalante)
","Changes
Fix React version detection for UNSAFE_ lifecycles (fixes issues with React 16.10) (#6961 by @henryqdineen)
Add element shape for Link's innerRef prop (#6886 by @nescalante)"
111,"List of commits
Bugfixes

Fix lingering <Link ref> error on React 15 (#6954)
","List of commits
Bugfixes
Fix lingering  error on React 15 (#6954)"
112,"List of commits
Bugfixes

Fix issue with useParams reading from null object (#6940)
Fix regression passing ref to functional components in React <= 16.2 (#6934)
Fix regression passing empty string to matchPath (#6941)
","List of commits
Bugfixes
Fix issue with useParams reading from null object (#6940)
Fix regression passing ref to functional components in React <= 16.2 (#6934)
Fix regression passing empty string to matchPath (#6941)"
113,"Read the blog post
List of commits
Features

Add useParams, useLocation, useHistory, and useRouteMatch hooks (d6224d6a)
Add support for forwardRef in <Link> (b5528ed6)
Add support for functions in <Link to> and <NavLink to> (#5331, #5368)
Add <Link component> API (#5437)

Bugfixes

Don't render <Route children> elements when the <Route> does not match (96656595)
","Read the blog post
List of commits
Features
Add useParams, useLocation, useHistory, and useRouteMatch hooks (d6224d6a)
Add support for forwardRef in  (b5528ed6)
Add support for functions in  and  (#5331, #5368)
Add  API (#5437)
Bugfixes
Don't render  elements when the  does not match (96656595)"
114,"Changes

Add UNSAFE_ prefixes to deprecated lifecycle methods (#6883 by @bishwei)
","Changes
Add UNSAFE_ prefixes to deprecated lifecycle methods (#6883 by @bishwei)"
115,This release includes the missing UMD build from the 3.2.2. Sorry about that!,This release includes the missing UMD build from the 3.2.2. Sorry about that!
116,"Changes

React 16.6 support (#6806 by @arthur791004)
Access <Link>s underlying node via innerRef (#6340 by @pascalduez)
","Changes
React 16.6 support (#6806 by @arthur791004)
Access s underlying node via innerRef (#6340 by @pascalduez)"
117,"Changes
Updates

Reduced component depth in withRouter() HOC. (10d78bb)
Changed misleading warning when withRouter is used outside a Router (10d78bb)
Reduced install size and bundle size by switching to mini-create-react-context (992af48)

Bugfixes

Fixed display name for router context consumer and provider (6a99c93)
Fixed infinite loop caused by Redirect in some scenarios (017f692 and 2ce1d32)
Fixed license issue for react context polyfill (f9849c8, then 992af48)
Fixed Redirect throwing an exception in StaticRouter without context (3ccbd19)
Fixed regression in matchPath that caused an exception for empty paths (7bd1407)
Fixed page reload when an exception was thrown in Link onClick (82ce94c)
Fixed warning about createRef or useRef values in wrappedComponentRef when using withRouter() (56c829b)
Fixed withRouter() wrapped component inside NavLink not working properly (a38ef04)
Fixed CJS build - previously, incorrect exports were emitted (caa9950)

Thanks to @StringEpsilon for putting this list together. Enjoy!","Changes
Updates
Reduced component depth in withRouter() HOC. (10d78bb)
Changed misleading warning when withRouter is used outside a Router (10d78bb)
Reduced install size and bundle size by switching to mini-create-react-context (992af48)
Bugfixes
Fixed display name for router context consumer and provider (6a99c93)
Fixed infinite loop caused by Redirect in some scenarios (017f692 and 2ce1d32)
Fixed license issue for react context polyfill (f9849c8, then 992af48)
Fixed Redirect throwing an exception in StaticRouter without context (3ccbd19)
Fixed regression in matchPath that caused an exception for empty paths (7bd1407)
Fixed page reload when an exception was thrown in Link onClick (82ce94c)
Fixed warning about createRef or useRef values in wrappedComponentRef when using withRouter() (56c829b)
Fixed withRouter() wrapped component inside NavLink not working properly (a38ef04)
Fixed CJS build - previously, incorrect exports were emitted (caa9950)
Thanks to @StringEpsilon for putting this list together. Enjoy!"
118,"Note: While this does have a major version bump, it is actually a minor release. We screwed up some of the dependency version selection in 4.3.1, which necessitated a major bump. See this blog post for details.
⚠️ Upgrade Warning ⚠️
Please ensure you have upgraded both react-router and react-router-dom (react-router-native for RN users) to the exact same version. If different versions of those two packages are in your application, you will get errors when using <Link> and other react-router-dom-specific components. You can ensure you have the correct versions of both packages in your app using npm ls react-router react-router-dom.
Breaking Changes

Since the old context API is no longer used, any access to the old context will fail. Use of the react router context is not supported, please use  withRouter() or a <Route/> instead.
Due to the new context API, mixing of imports will now result in an exception:

```jsx
// Be careful, this won't work anymore!
import BrowserRouter from 'react-router-dom/BrowserRouter';
import { Route } from 'react-router-dom';



```
Refactor as follows:
js
// These are both from the same build and use the same context object
// so there won't be a mismatch :)
import { BrowserRouter, Route } from 'react-router-dom';

In development mode, we now throw an error when using 2 different builds (see b2c6fa0), i.E. combining CJS imports with ESM imports.

New Features

<Route /> now supports an array of paths - #5889 (thanks @baronswindle)

jsx 
<Route path={[""/BigApple"", ""/NYC"", ""NewYork""]} component={NewYork} />
Full Changelog

<Route /> now supports multiple child nodes when using react >= 16.0.
Migrated to new react context API, with a polyfill for react versions < 16.2
Removed deprecated lifecycle methods componentWillMount and componentWillReceiveProps
Introduced more warnings in development builds
Changed build-process to rollup:
Smaller build size
Package now includes pre-minified files
Package now consists of single-file builds that include all modules.
Upgraded to history 4.9.0
Per file imports are deprecated and will be removed in a future major version. For now, a warning will be logged.
Made sure that react router conforms to react <StrictMode/>
Fixed <Link /> not working properly with target=""_self"" - #6138 (thanks @ericyang89)
Fixed  prop-type warning when using forwardRef - #6417 (thanks @frehner and @eXon)
Added support for createRef in  - #6567 (thanks @gcangussu)
Removed use of eval in development to be compliant with unsafe-eval CSP - #6611
Migrated to babel-preset-env
Improved testing infrastructure to improve developer workflow
Several docs improvements - #6410 (thanks @justsml)
","Note: While this does have a major version bump, it is actually a minor release. We screwed up some of the dependency version selection in 4.3.1, which necessitated a major bump. See this blog post for details.
⚠️ Upgrade Warning ⚠️
Please ensure you have upgraded both react-router and react-router-dom (react-router-native for RN users) to the exact same version. If different versions of those two packages are in your application, you will get errors when using  and other react-router-dom-specific components. You can ensure you have the correct versions of both packages in your app using npm ls react-router react-router-dom.
Breaking Changes
Since the old context API is no longer used, any access to the old context will fail. Use of the react router context is not supported, please use  withRouter() or a  instead.
Due to the new context API, mixing of imports will now result in an exception:
```jsx
// Be careful, this won't work anymore!
import BrowserRouter from 'react-router-dom/BrowserRouter';
import { Route } from 'react-router-dom';
```
Refactor as follows:
js
// These are both from the same build and use the same context object
// so there won't be a mismatch :)
import { BrowserRouter, Route } from 'react-router-dom';
In development mode, we now throw an error when using 2 different builds (see b2c6fa0), i.E. combining CJS imports with ESM imports.
New Features
 now supports an array of paths - #5889 (thanks @baronswindle)
jsx 

Full Changelog
 now supports multiple child nodes when using react >= 16.0.
Migrated to new react context API, with a polyfill for react versions < 16.2
Removed deprecated lifecycle methods componentWillMount and componentWillReceiveProps
Introduced more warnings in development builds
Changed build-process to rollup:
Smaller build size
Package now includes pre-minified files
Package now consists of single-file builds that include all modules.
Upgraded to history 4.9.0
Per file imports are deprecated and will be removed in a future major version. For now, a warning will be logged.
Made sure that react router conforms to react 
Fixed  not working properly with target=""_self"" - #6138 (thanks @ericyang89)
Fixed  prop-type warning when using forwardRef - #6417 (thanks @frehner and @eXon)
Added support for createRef in  - #6567 (thanks @gcangussu)
Removed use of eval in development to be compliant with unsafe-eval CSP - #6611
Migrated to babel-preset-env
Improved testing infrastructure to improve developer workflow
Several docs improvements - #6410 (thanks @justsml)"
119,"
Stop using eval in development to be compliant with unsafe-eval CSP (see #6611)
Bumps the history dependency to version 4.9.0
","Stop using eval in development to be compliant with unsafe-eval CSP (see #6611)
Bumps the history dependency to version 4.9.0"
120,"
Fixed tree-shaking with Webpack (see #6464 and #6465)
Added support for createRef in <Link innerRef> (see #6567)
We now throw an error when using 2 different builds (dev only, see b2c6fa0725b7ff1ed762064d633b26b6293e0140)
","Fixed tree-shaking with Webpack (see #6464 and #6465)
Added support for createRef in  (see #6567)
We now throw an error when using 2 different builds (dev only, see b2c6fa0725b7ff1ed762064d633b26b6293e0140)"
121,"Fixes

Fixed import of react-is in the CommonJS build (see #6445)
Added missing prop-types dependency for ESM build (see #6438)
","Fixes
Fixed import of react-is in the CommonJS build (see #6445)
Added missing prop-types dependency for ESM build (see #6438)"
122,"Fixes

Fixed <Route component> prop-type warning when using forwardRef (see #6417, thanks @frehner and @eXon)
Added missing file to react-router-config package (see #6415, thanks @Anomen)
Several docs improvements (see #6410, thanks @justsml)
","Fixes
Fixed  prop-type warning when using forwardRef (see #6417, thanks @frehner and @eXon)
Added missing file to react-router-config package (see #6415, thanks @Anomen)
Several docs improvements (see #6410, thanks @justsml)"
123,"Features

Adds support for an array of paths in <Route path> (thanks @baronswindle)

Fixes

Fix for <Link rel=""_self""> (thanks @ericyang89)
MUCH smaller CJS + ESM builds (thanks @pshrmn and @TrySound)
Include required deprecation warning file for require('react-router/Route') statements (thanks @timdorr)

Enjoy! 😅","Features
Adds support for an array of paths in  (thanks @baronswindle)
Fixes
Fix for  (thanks @ericyang89)
MUCH smaller CJS + ESM builds (thanks @pshrmn and @TrySound)
Include required deprecation warning file for require('react-router/Route') statements (thanks @timdorr)
Enjoy! 😅"
124,"
Fixed ESM entry point from 4.4.0-beta.2 🤦‍♂️
",Fixed ESM entry point from 4.4.0-beta.2 🤦‍♂️
125,"Getting closer to 4.4 final! We've received some great feedback during the past few weeks on the 4.4 beta. Please keep it coming :)
Features

Both our CJS and ESM builds now use Rollup, which means they are smaller and should be easier to consume. Requiring individual files (e.g. require('react-router/Route')) from any of our packages is no longer supported.
We now provide a pre-built production-ready CJS and ESM builds instead of requiring consumers to build it themselves.

Fixes

Eliminate all warnings when using the router under React 16's <StrictMode>. In fact, we now wrap all our tests in <StrictMode>!
Don't leak memory when a <Router> is rendered server side (introduced in a previous 4.4 beta).

Enjoy! 😅","Getting closer to 4.4 final! We've received some great feedback during the past few weeks on the 4.4 beta. Please keep it coming :)
Features
Both our CJS and ESM builds now use Rollup, which means they are smaller and should be easier to consume. Requiring individual files (e.g. require('react-router/Route')) from any of our packages is no longer supported.
We now provide a pre-built production-ready CJS and ESM builds instead of requiring consumers to build it themselves.
Fixes
Eliminate all warnings when using the router under React 16's . In fact, we now wrap all our tests in !
Don't leak memory when a  is rendered server side (introduced in a previous 4.4 beta).
Enjoy! 😅"
126,"This release fixes a few issues with the build in v4.4.0-beta.0 where the 4.4.0-beta.0 version was not specified correctly in the dependencies of react-router-dom.
Also, please be careful which build you are using. Prior to this release, you could mix your import styles, i.e.:
```js
// Be careful, this won't work anymore!
import BrowserRouter from 'react-router-dom/BrowserRouter';
import { Route } from 'react-router-dom';



```
The problem here is that, although it may not be obvious the first import is actually using the CommonJS build while the 2nd import is (probably, depending on what your bundler is doing) using the ES modules build. Your bundler can probably handle the variation in module formats just fine, but when you go to run your code you'll see a warning like:
You should not render a <Route> outside a <Router>
Basically, what this means is that <Route> can't find the correct context object because each build has its own context object and the <Router> component was imported from a different build!
Instead, just import both components using the same method:
js
// These are both from the same build and use the same context object
// so there won't be a mismatch :)
import { BrowserRouter, Route } from 'react-router-dom';
I'm going to try and figure out a better way to detect if you're using 2 different builds so we can give you a better warning.
Enjoy! 😅","This release fixes a few issues with the build in v4.4.0-beta.0 where the 4.4.0-beta.0 version was not specified correctly in the dependencies of react-router-dom.
Also, please be careful which build you are using. Prior to this release, you could mix your import styles, i.e.:
```js
// Be careful, this won't work anymore!
import BrowserRouter from 'react-router-dom/BrowserRouter';
import { Route } from 'react-router-dom';
```
The problem here is that, although it may not be obvious the first import is actually using the CommonJS build while the 2nd import is (probably, depending on what your bundler is doing) using the ES modules build. Your bundler can probably handle the variation in module formats just fine, but when you go to run your code you'll see a warning like:
You should not render a  outside a 
Basically, what this means is that  can't find the correct context object because each build has its own context object and the  component was imported from a different build!
Instead, just import both components using the same method:
js
// These are both from the same build and use the same context object
// so there won't be a mismatch :)
import { BrowserRouter, Route } from 'react-router-dom';
I'm going to try and figure out a better way to detect if you're using 2 different builds so we can give you a better warning.
Enjoy! 😅"
127,"This is primarily a maintenance release that is fully backwards compatible with 4.3.1 while also improving compatibility with React 16 and preparing for the future.
The main features of this release are:

Removed the single-child restriction in <Router> so you can have multiple children, provided you're using React 16
Migrated our underlying infrastructure to use React's new context API. A HUGE thank-you to @timdorr who provided the initial work required to migrate the codebase to React's new context API (see #5908)
Removed all traces of the deprecated componentWillMount and componentWillReceiveProps

🚨 If you were accessing our private context API your code will break. If you need stuff on context, use a <Route> or withRouter instead. It's all the same stuff, and that's our public API 🚨
Other housekeeping that was done:

Migrated to use babel-preset-env + a custom list of proposal plugins we use instead of the deprecated babel-preset-es2015 + babel-preset-stage-1
Improved testing infrastructure. Now, instead of running a build when you're working on e.g. react-router-dom and you need some changes in react-router, you don't have to go and rebuild it to test things out. This should make the repo easier to work with
Added some more warnings in dev mode

As always, you can try everything out using the next tag:
yarn add react-router@next
yarn add react-router-dom@next
yarn add react-router-config@next

We will be paying close attention to the feedback on this release and hope to release 4.4.0 final soon!
Enjoy 😅","This is primarily a maintenance release that is fully backwards compatible with 4.3.1 while also improving compatibility with React 16 and preparing for the future.
The main features of this release are:
Removed the single-child restriction in  so you can have multiple children, provided you're using React 16
Migrated our underlying infrastructure to use React's new context API. A HUGE thank-you to @timdorr who provided the initial work required to migrate the codebase to React's new context API (see #5908)
Removed all traces of the deprecated componentWillMount and componentWillReceiveProps
🚨 If you were accessing our private context API your code will break. If you need stuff on context, use a  or withRouter instead. It's all the same stuff, and that's our public API 🚨
Other housekeeping that was done:
Migrated to use babel-preset-env + a custom list of proposal plugins we use instead of the deprecated babel-preset-es2015 + babel-preset-stage-1
Improved testing infrastructure. Now, instead of running a build when you're working on e.g. react-router-dom and you need some changes in react-router, you don't have to go and rebuild it to test things out. This should make the repo easier to work with
Added some more warnings in dev mode
As always, you can try everything out using the next tag:
yarn add react-router@next
yarn add react-router-dom@next
yarn add react-router-config@next
We will be paying close attention to the feedback on this release and hope to release 4.4.0 final soon!
Enjoy 😅"
128,"Just a patch to fix an accidental move of warning from a normal dependency to a devDependency, which was causing issues with installation.","Just a patch to fix an accidental move of warning from a normal dependency to a devDependency, which was causing issues with installation."
129,"The major new things of this release are Redirect with params (see #5209) and the new generatePath API. We also cleaned up the code with Prettier, so browsing through it should be more enjoyable.
One other thing to mention, while I have your attention, is the deprecation of react-router-redux. It's no longer maintained and has a number of fundamental problems (particularly around time travel). Integrating Redux and the DOM History API is challenging because they don't maintain the same semantics and the resulting integration is error prone. Getting to the router context will be easier in future versions of React Router, so the main motivations for needing it will be going away. So, while I would advise against trying to integrate the two, for those that still want this functionality can turn to libraries like @supasate's connected-react-router.
Changes

Use the pretty option in generatePath (#6172 by @sibelius)
aria-current has incorrect value ""true"" (#6118 by @brandonrninefive)
Redirect with parameters (#5209 by @dlindenkreuz)
Fix with missing pathname: <Link to=""?foo=bar""> (#5489 by @pshrmn)
Escape NavLink path to allow special characters in path. (#5596 by @esiegel)
Expose generatePath (#5661 by @rybon)
Use named import of history module. (#5589 by @RoboBurned)
Hoist dependencies for smaller UMD builds (#5720 by @pshrmn)
Remove aria-current from navLink when inactive (#5508 by @AlmeroSteyn)
Add invariant for missing ""to"" property on <Link> (#5792 by @selbekk)
Use Prettier on the code (e6f9017 by @mjackson)
Fix pathless route's match when parent is null (#5964 by @pshrmn)
Use history.createLocation in <StaticRouter> (#5722 by @pshrmn)
","The major new things of this release are Redirect with params (see #5209) and the new generatePath API. We also cleaned up the code with Prettier, so browsing through it should be more enjoyable.
One other thing to mention, while I have your attention, is the deprecation of react-router-redux. It's no longer maintained and has a number of fundamental problems (particularly around time travel). Integrating Redux and the DOM History API is challenging because they don't maintain the same semantics and the resulting integration is error prone. Getting to the router context will be easier in future versions of React Router, so the main motivations for needing it will be going away. So, while I would advise against trying to integrate the two, for those that still want this functionality can turn to libraries like @supasate's connected-react-router.
Changes
Use the pretty option in generatePath (#6172 by @sibelius)
aria-current has incorrect value ""true"" (#6118 by @brandonrninefive)
Redirect with parameters (#5209 by @dlindenkreuz)
Fix with missing pathname:  (#5489 by @pshrmn)
Escape NavLink path to allow special characters in path. (#5596 by @esiegel)
Expose generatePath (#5661 by @rybon)
Use named import of history module. (#5589 by @RoboBurned)
Hoist dependencies for smaller UMD builds (#5720 by @pshrmn)
Remove aria-current from navLink when inactive (#5508 by @AlmeroSteyn)
Add invariant for missing ""to"" property on  (#5792 by @selbekk)
Use Prettier on the code (e6f9017 by @mjackson)
Fix pathless route's match when parent is null (#5964 by @pshrmn)
Use history.createLocation in  (#5722 by @pshrmn)"
130,"Changes

Fix broken UMD builds.
Add sideEffects: false for webpack tree shaking (#6082 by @taylorc93)
","Changes
Fix broken UMD builds.
Add sideEffects: false for webpack tree shaking (#6082 by @taylorc93)"
131,"Changes

Bump hoist-non-react-statics for React 16.3.
Missing generatePath in react-router-dom package.
","Changes
Bump hoist-non-react-statics for React 16.3.
Missing generatePath in react-router-dom package."
132,"Changes

Mar 26, 2018


Redirect with parameters (#5209 by @dlindenkreuz)
Fix with missing pathname: <Link to=""?foo=bar""> (#5489 by @pshrmn)
Escape NavLink path to allow special characters in path. (#5596 by @esiegel)
Expose generatePath (#5661 by @rybon)
Use named import of history module. (#5589 by @RoboBurned)
Hoist dependencies for smaller UMD builds (#5720 by @pshrmn)
Remove aria-current from navLink when inactive (#5508 by @AlmeroSteyn)
Add invariant for missing ""to"" property on <Link> (#5792 by @selbekk)
Use Prettier on the code (e6f9017 by @mjackson)
Fix pathless route's match when parent is null (#5964 by @pshrmn)
Use history.createLocation in <StaticRouter> (#5722 by @pshrmn)
","Changes
Mar 26, 2018
Redirect with parameters (#5209 by @dlindenkreuz)
Fix with missing pathname:  (#5489 by @pshrmn)
Escape NavLink path to allow special characters in path. (#5596 by @esiegel)
Expose generatePath (#5661 by @rybon)
Use named import of history module. (#5589 by @RoboBurned)
Hoist dependencies for smaller UMD builds (#5720 by @pshrmn)
Remove aria-current from navLink when inactive (#5508 by @AlmeroSteyn)
Add invariant for missing ""to"" property on  (#5792 by @selbekk)
Use Prettier on the code (e6f9017 by @mjackson)
Fix pathless route's match when parent is null (#5964 by @pshrmn)
Use history.createLocation in  (#5722 by @pshrmn)"
133,"Changes

React 16.3 support
","Changes
React 16.3 support"
134,"Changes

React 16 support
","Changes
React 16 support"
135,"Apologies for the quick rebuild. There was a bad UMD config, which would have required you to include both the react-router and react-router-dom UMD files. You should only have to include react-router-dom now, which is the same behavior as the npm package.
OK, I'm done for a bit... 😬 ","Apologies for the quick rebuild. There was a bad UMD config, which would have required you to include both the react-router and react-router-dom UMD files. You should only have to include react-router-dom now, which is the same behavior as the npm package.
OK, I'm done for a bit... 😬 "
136,This fixes a missing warning dependency if you were installing just react-router-dom. No other changes to the actual code.,This fixes a missing warning dependency if you were installing just react-router-dom. No other changes to the actual code.
137,"Changes

Aug 23, 2017


Re-run Redirect on props update (#5162 by @alexilyaev)
Prevent remounts on routes with the same component in renderRoutes (#5430 by @artywhite)
Case sensitive routes (#5438 by @paustria)
Use direct imports in platform packages (#5095 by @ruiaraujo)
Add optional otherProps argument renderRoutes (#5137 by @jharris4)
Bump hoist-non-react-statics (#5347 by @roderickhsiao)
3x build speed improvements on CI (ea1212a by @timdorr)
Use Jest for testing (172dc16 by @mjackson)
Explicit error using Route outside of Router (#4939 by @eXon)
react-router-native Link improvements (#4816 by @benstepp)
aria-current on NavLink (#4708 by @JasonEtco)
Make AndroidBackButton a generic BackButton component (#5295 by @DonnieWest)
Access Link's underlying node via innerRef (#5294 by @danielberndt)
Return null from react-router-native DeepLinking if children is undefined (#5278 by @seekshiva)
Warn when using the history prop on a pre-configured Router (#5151 by @Aprillion)
Fix memory leak in ConnectedRouter during server side rendering (#5203 by @klis87)
Reorder NavLink activeClassName/className priority (#5109 by @carloluis)
Change react-native BackAndroid to BackHandler (#5093 by @SeanGroff)
Fix react-router-native StackRouter (#5071 by @kafein)
","Changes
Aug 23, 2017
Re-run Redirect on props update (#5162 by @alexilyaev)
Prevent remounts on routes with the same component in renderRoutes (#5430 by @artywhite)
Case sensitive routes (#5438 by @paustria)
Use direct imports in platform packages (#5095 by @ruiaraujo)
Add optional otherProps argument renderRoutes (#5137 by @jharris4)
Bump hoist-non-react-statics (#5347 by @roderickhsiao)
3x build speed improvements on CI (ea1212a by @timdorr)
Use Jest for testing (172dc16 by @mjackson)
Explicit error using Route outside of Router (#4939 by @eXon)
react-router-native Link improvements (#4816 by @benstepp)
aria-current on NavLink (#4708 by @JasonEtco)
Make AndroidBackButton a generic BackButton component (#5295 by @DonnieWest)
Access Link's underlying node via innerRef (#5294 by @danielberndt)
Return null from react-router-native DeepLinking if children is undefined (#5278 by @seekshiva)
Warn when using the history prop on a pre-configured Router (#5151 by @Aprillion)
Fix memory leak in ConnectedRouter during server side rendering (#5203 by @klis87)
Reorder NavLink activeClassName/className priority (#5109 by @carloluis)
Change react-native BackAndroid to BackHandler (#5093 by @SeanGroff)
Fix react-router-native StackRouter (#5071 by @kafein)"
138,"Changes

Apr 12, 2017


Fixes for the various PropTypes related issues. 

Note: This work is still ongoing, as the React team still has some outstanding issues to figure out themselves. Keep an eye on this issue and the prop-types repo for updates as we all work through this craziness. ","Changes
Apr 12, 2017
Fixes for the various PropTypes related issues. 
Note: This work is still ongoing, as the React team still has some outstanding issues to figure out themselves. Keep an eye on this issue and the prop-types repo for updates as we all work through this craziness. "
139,"Changes

Apr 11, 2017


Add wrappedComponent to the component returned by withRouter
Add wrappedComponentRef prop to the component returned by withRouter
Add non-react static methods and properties of the wrapped component to the component returned by withRouter
","Changes
Apr 11, 2017
Add wrappedComponent to the component returned by withRouter
Add wrappedComponentRef prop to the component returned by withRouter
Add non-react static methods and properties of the wrapped component to the component returned by withRouter"
140,"Changes

Mar 10, 2017


Released! No code changes from 4.0.0-beta.8
","Changes
Mar 10, 2017
Released! No code changes from 4.0.0-beta.8"
141,"Changes

Manually set displayName for components
Async hooks could be removed during simultaneous server requests (#4941 by @s-yadav)
","Changes
Manually set displayName for components
Async hooks could be removed during simultaneous server requests (#4941 by @s-yadav)"
142,"Changes

Fixes for React 15.5 deprecation warnings
","Changes
Fixes for React 15.5 deprecation warnings"
143,"Changes

Fix webpack-related anonymous function issue (#4857 by @alisd23)
Fix usage with babel-plugin-transform-remove-prop-types (#4505 by @oliviertassinari)
Remove references to Link hash/query/state props (#4377 by @insin)
","Changes
Fix webpack-related anonymous function issue (#4857 by @alisd23)
Fix usage with babel-plugin-transform-remove-prop-types (#4505 by @oliviertassinari)
Remove references to Link hash/query/state props (#4377 by @insin)"
144,"Changes

Mar 8, 2017


Updated website
Revert to using context.router for everything since Relay uses context.route
Add staticContext route prop when rendering <Route>s inside a <StaticRouter>
Pass through the parent match object to <Route>s w/out a path. This also
  includes components wrapped using withRouter
Fix unicode <Route> paths
Set NavLink's default activeClassName prop to active
","Changes
Mar 8, 2017
Updated website
Revert to using context.router for everything since Relay uses context.route
Add staticContext route prop when rendering s inside a 
Pass through the parent match object to s w/out a path. This also
  includes components wrapped using withRouter
Fix unicode  paths
Set NavLink's default activeClassName prop to active"
145,"Changes

Added support for <Redirect> as a child of a <Switch>
Fixed a bug where <Switch> would always remount children
Removed subscriptions to avoid unneccessary rerendering in every <Route>
Added <Switch location> and <Route location> props so that ""pure"" route
  components can know when the location changes
Removed location persistence across app restarts in <NativeRouter>
Made docs easier to find in individual packages directories
Split context.router into two parts: context.history and context.route
Changed matchPath signature to matchPath(pathname, options)
","Changes
Added support for  as a child of a 
Fixed a bug where  would always remount children
Removed subscriptions to avoid unneccessary rerendering in every 
Added  and  props so that ""pure"" route
  components can know when the location changes
Removed location persistence across app restarts in 
Made docs easier to find in individual packages directories
Split context.router into two parts: context.history and context.route
Changed matchPath signature to matchPath(pathname, options)"
146,"Changes

Fixed a bug with <StaticRouter>'s createHref (#4484 thanks @pshrmn)
Added support for objects in <Link to> in react-router-native (#4483 by @CodogoFreddie)
Include react-router in react-router-dom's UMD bundle
","Changes
Fixed a bug with 's createHref (#4484 thanks @pshrmn)
Added support for objects in  in react-router-native (#4483 by @CodogoFreddie)
Include react-router in react-router-dom's UMD bundle"
147,"Changes

Remove basename from <StaticRouter> locations
Add ES build to react-router and react-router-dom (#4432 by @billyjanitsch)
NavLink exact & strict tests (#4454 by @pshrmn)
Use boolean strings for cache keys (#4448 by @pshrmn)
Fix scripts on windows (#4447 by @pshrmn)
Use peer deps for react-native
Warn when <Router> is given >1 children (#4450 by @jackfranklin)
Only nullify empty children array (#4475 by @pshrmn)
","Changes
Remove basename from  locations
Add ES build to react-router and react-router-dom (#4432 by @billyjanitsch)
NavLink exact & strict tests (#4454 by @pshrmn)
Use boolean strings for cache keys (#4448 by @pshrmn)
Fix scripts on windows (#4447 by @pshrmn)
Use peer deps for react-native
Warn when  is given >1 children (#4450 by @jackfranklin)
Only nullify empty children array (#4475 by @pshrmn)"
148,"Changes

Fix NavLink location variable (#4403 by @inuscript)
NavLink tests (#4421 by @pshrmn)
Preact support (#4423 by @kwelch)
Allow initialIndex, initialIndex in NativeRouter (#4415 by @IljaDaderko)
Add <NavLink strict> and <NavLink exact>
invariant dependency was missing
","Changes
Fix NavLink location variable (#4403 by @inuscript)
NavLink tests (#4421 by @pshrmn)
Preact support (#4423 by @kwelch)
Allow initialIndex, initialIndex in NativeRouter (#4415 by @IljaDaderko)
Add  and 
invariant dependency was missing"
149,"Changes

Fix missing StaticRouter (#4389 by @supasate)
","Changes
Fix missing StaticRouter (#4389 by @supasate)"
150,"Changes

No end-user changes
","Changes
No end-user changes"
151,"This is a pretty big change from the alpha versions, so the diff isn't super helpful.
This release breaks things into a monorepo format, with several sub-packages for different ways of using the router. Think react-dom vs. react-native. ","This is a pretty big change from the alpha versions, so the diff isn't super helpful.
This release breaks things into a monorepo format, with several sub-packages for different ways of using the router. Think react-dom vs. react-native. "
152,"Changes

Re-add module entry to package.json
","Changes
Re-add module entry to package.json"
153,"Changes

Pass transition hook's arguments correctly (#4123 by @arkist)
Fix index routes inside async pathless routes (#4147 by @taurose)
'to' maybe undefined (#4216 by @panzj)
Fix withRouter error when used without a Router (#4295 by @dropfen)
Adding support for escaped parentheses in Route Paths (#4202 by @sebastiandeutsch) 
","Changes
Pass transition hook's arguments correctly (#4123 by @arkist)
Fix index routes inside async pathless routes (#4147 by @taurose)
'to' maybe undefined (#4216 by @panzj)
Fix withRouter error when used without a Router (#4295 by @dropfen)
Adding support for escaped parentheses in Route Paths (#4202 by @sebastiandeutsch) "
154,"This release fixes problems with the last release for users of npm 2.x and yarn. If you're having trouble with alpha 5, this version should give you less trouble.
Skipping the changelog on this one, as @ryanflorence has a heavily refactored version coming in the next day or two. Please wait for that release before upgrading if you're not blocked by the previous release's packaging issues. ","This release fixes problems with the last release for users of npm 2.x and yarn. If you're having trouble with alpha 5, this version should give you less trouble.
Skipping the changelog on this one, as @ryanflorence has a heavily refactored version coming in the next day or two. Please wait for that release before upgrading if you're not blocked by the previous release's packaging issues. "
155,"🎉  The 100th release of React Router! 🎉 
This release removes all the deprecation warnings from v2.x along with some bugfixes.
While the focus of this project is shifting towards the component-based v4, this branch will be maintained indefinitely!
Bug fixes will continue to be accepted. We are not going to leave anyone hanging and want to assure you that v3 development will be alive and well.
Changes

Oct 24, 2016
- Removed
- Bugfix: Cancel pending enter/change hooks on location change (#4063)
","🎉  The 100th release of React Router! 🎉 
This release removes all the deprecation warnings from v2.x along with some bugfixes.
While the focus of this project is shifting towards the component-based v4, this branch will be maintained indefinitely!
Bug fixes will continue to be accepted. We are not going to leave anyone hanging and want to assure you that v3 development will be alive and well.
Changes
Oct 24, 2016
- Removed
- Bugfix: Cancel pending enter/change hooks on location change (#4063)"
156,"Changes

URL decode all parameters (@tyrsius in #3991)
Fix ambiguous Miss component not rendering (@TimothyKrell in #3980)
Don't include a trailing slash if the basename is not empty (@jochenberger in #4000! 😮 )
Match exactly takes parent into account (@alisd23 in #4001)
Fix non-exact match of pattern with trailing slash (@aaugustin in #3923)
Add  and  (@aaugustin in #3912)
Limit size of matcher cache (@alisd23 in #4004)
Re-enable proptypes warnings (@mjackson in 5f4b649)
Fix build scripts on windows (@alisd23 in #4088)
Fix hashType prop on HashRouter (@herrkris in #4024)
Remove react-history dep (@ryanflorence in d041434)
Links apathetic to active state don't subscribe (@pshrmn in #3986)
blockTransitions returns teardown function (@maxdeviant in #4058)
","Changes
URL decode all parameters (@tyrsius in #3991)
Fix ambiguous Miss component not rendering (@TimothyKrell in #3980)
Don't include a trailing slash if the basename is not empty (@jochenberger in #4000! 😮 )
Match exactly takes parent into account (@alisd23 in #4001)
Fix non-exact match of pattern with trailing slash (@aaugustin in #3923)
Add  and  (@aaugustin in #3912)
Limit size of matcher cache (@alisd23 in #4004)
Re-enable proptypes warnings (@mjackson in 5f4b649)
Fix build scripts on windows (@alisd23 in #4088)
Fix hashType prop on HashRouter (@herrkris in #4024)
Remove react-history dep (@ryanflorence in d041434)
Links apathetic to active state don't subscribe (@pshrmn in #3986)
blockTransitions returns teardown function (@maxdeviant in #4058)"
157,"Changes

PropTypes are now exported (@alisd23 in #3910)
Subscribe to location changes along context. Fixes usage with React Redux (@ryanflorence in bb7d8ee and ce59676)
Strip propTypes in production (@mjackson in eb8a4ef)
Remove the entire website application from the npm package (@timdorr in a5e05f7)
StaticRouter now tracks location in state (@mjackson in 5550cc3)
Rename PropTypes.router to PropTypes.routerContext (@mjackson in c8510da)
Remove direct history dependency (@mjackson in a603eaa)
","Changes
PropTypes are now exported (@alisd23 in #3910)
Subscribe to location changes along context. Fixes usage with React Redux (@ryanflorence in bb7d8ee and ce59676)
Strip propTypes in production (@mjackson in eb8a4ef)
Remove the entire website application from the npm package (@timdorr in a5e05f7)
StaticRouter now tracks location in state (@mjackson in 5550cc3)
Rename PropTypes.router to PropTypes.routerContext (@mjackson in c8510da)
Remove direct history dependency (@mjackson in a603eaa)"
158,"Quick Version Note
I've swapped out the version string to better represent the prerelease nature of the v4 branch currently. It may not have been obvious before, but according to semver, any version string with a -anything on the end is considered a prerelease version. I've seen some references to the versions before as 4.0.1 and 4.0.2. This isn't correct, as we haven't yet pushed a 4.0.0 final version. This is not production-ready code. We're not done building 4.0! 
And, most importantly, we need your help to figure out things that are missing, either stuff that should go into the core of React Router or external libraries and code patterns that need to be established. React Router is now a building block as much as React itself is, and this more lean, mean, super-minimal core means that you can build a lot of interesting stuff on top of it. Now's a great time to get into open source and contribute some code. Keep those issues and PRs coming!
~~Also, for the love of god, yes, we know the docs site isn't scrollable. We'll push a new version soon!~~
Use this link for the docs site from now on: https://react-router.now.sh/ We'll keep it updated.
Changes","Quick Version Note
I've swapped out the version string to better represent the prerelease nature of the v4 branch currently. It may not have been obvious before, but according to semver, any version string with a -anything on the end is considered a prerelease version. I've seen some references to the versions before as 4.0.1 and 4.0.2. This isn't correct, as we haven't yet pushed a 4.0.0 final version. This is not production-ready code. We're not done building 4.0! 
And, most importantly, we need your help to figure out things that are missing, either stuff that should go into the core of React Router or external libraries and code patterns that need to be established. React Router is now a building block as much as React itself is, and this more lean, mean, super-minimal core means that you can build a lot of interesting stuff on top of it. Now's a great time to get into open source and contribute some code. Keep those issues and PRs coming!
~~Also, for the love of god, yes, we know the docs site isn't scrollable. We'll push a new version soon!~~
Use this link for the docs site from now on: link/ We'll keep it updated.
Changes"
159,"Installation
npm install react-router@beta
Changes

Sep 16, 2016
- Feature: Add Promise support to async route functions (#3719)

Upstream changes from v2.7.0 through v2.8.1:
- Bugfix: Fix redirects that specify query (#3808)
- Feature: Support omitting to on <Link> (#3803)
- Refactor: Use history.replace instead of history.transitionTo for redirects (#3799)
- Feature: Support router as a prop on withRouter-wrapped components for overriding the router object from context (#3729)
- Feature: Add withRef option to withRouter that enables getWrappedInstance (#3735, #3740)
- Bugfix: Warn on invalid router middlewares (#3717)","Installation
npm install react-router@beta
Changes
Sep 16, 2016
- Feature: Add Promise support to async route functions (#3719)
Upstream changes from v2.7.0 through v2.8.1:
- Bugfix: Fix redirects that specify query (#3808)
- Feature: Support omitting to on  (#3803)
- Refactor: Use history.replace instead of history.transitionTo for redirects (#3799)
- Feature: Support router as a prop on withRouter-wrapped components for overriding the router object from context (#3729)
- Feature: Add withRef option to withRouter that enables getWrappedInstance (#3735, #3740)
- Bugfix: Warn on invalid router middlewares (#3717)"
160,"
Use the global React in the UMD build.
",Use the global React in the UMD build.
161,"
Add missing path-to-regexp dependency
Remove an extraneous <div> sometimes added by <StaticRouter>
","Add missing path-to-regexp dependency
Remove an extraneous  sometimes added by "
162,"⚠️  🚀  NEW VERSION ALERT ⚠️
Available on npm: npm install react-router@next
This is a ground-up rewrite of React Router that @ryanflorence and @mjackson have been working on for the last few months (with a tiny bit of help from yours truly). The central thesis for this version is ""declarative everything"". Almost all imperative code is completely gone in 4.0. 
The API is not only completely different, so is the way of thinking about routing in general. Async behaviors are gone, replaced by always rendering something (even if that's just a ""Loading..."" screen). There are no top-level route configuration, as you can ""route"" from anywhere in your component tree (but that doesn't keep you from creating your own route config).
We are working on an migration strategy that will allow you to run both version in tandem and update your routes incrementally.
Many of these familiar concepts are removed because they are best implemented from outside the router. v4 is much smaller in scope and code size, which is intentional. These, now external, features will eventually be implement as addon libraries, either provided officially or from the community. 
As expected, there will be growing pains. And bugs. And Twitter flame wars 💦🔥. But this is a declarative, composable approach to routing that fits the declarative, composable model of React. Please let us know where it is not 100% awesome with issues and pull requests.
Quick Update:
Yes, there will still be a 3.0 release (soon!). It is simply v2.0 without any deprecation warnings. We intend to keep supporting the 3.x branch indefinitely (published separately on npm to aid in migration), although there will likely not be any future major versions based on that code. 4.0 is the future, but we won't leave you hanging if you want to stick with 2.x/3.x.
Examples and Docs Site","⚠️  🚀  NEW VERSION ALERT ⚠️
Available on npm: npm install react-router@next
This is a ground-up rewrite of React Router that @ryanflorence and @mjackson have been working on for the last few months (with a tiny bit of help from yours truly). The central thesis for this version is ""declarative everything"". Almost all imperative code is completely gone in 4.0. 
The API is not only completely different, so is the way of thinking about routing in general. Async behaviors are gone, replaced by always rendering something (even if that's just a ""Loading..."" screen). There are no top-level route configuration, as you can ""route"" from anywhere in your component tree (but that doesn't keep you from creating your own route config).
We are working on an migration strategy that will allow you to run both version in tandem and update your routes incrementally.
Many of these familiar concepts are removed because they are best implemented from outside the router. v4 is much smaller in scope and code size, which is intentional. These, now external, features will eventually be implement as addon libraries, either provided officially or from the community. 
As expected, there will be growing pains. And bugs. And Twitter flame wars 💦🔥. But this is a declarative, composable approach to routing that fits the declarative, composable model of React. Please let us know where it is not 100% awesome with issues and pull requests.
Quick Update:
Yes, there will still be a 3.0 release (soon!). It is simply v2.0 without any deprecation warnings. We intend to keep supporting the 3.x branch indefinitely (published separately on npm to aid in migration), although there will likely not be any future major versions based on that code. 4.0 is the future, but we won't leave you hanging if you want to stick with 2.x/3.x.
Examples and Docs Site"
163,"Changes

Sep 13, 2016
- Bugfix: Fix redirects that specify query (#3808)
","Changes
Sep 13, 2016
- Bugfix: Fix redirects that specify query (#3808)"
164,"Changes

Sep 9, 2016
- Feature: Support omitting to on <Link> (#3803)
- Refactor: Use history.replace instead of history.transitionTo for redirects (#3799)
","Changes
Sep 9, 2016
- Feature: Support omitting to on  (#3803)
- Refactor: Use history.replace instead of history.transitionTo for redirects (#3799)"
165,"Changes

Aug 20, 2016
- Feature: Support router as a prop on withRouter-wrapped components for overriding the router object from context (#3729)
- Feature: Add withRef option to withRouter that enables getWrappedInstance (#3735, #3740)
- Bugfix: Warn on invalid router middlewares (#3717)
","Changes
Aug 20, 2016
- Feature: Support router as a prop on withRouter-wrapped components for overriding the router object from context (#3729)
- Feature: Add withRef option to withRouter that enables getWrappedInstance (#3735, #3740)
- Bugfix: Warn on invalid router middlewares (#3717)"
166,"Changes

Aug 2, 2016
- Feature: Support function to prop in <Link> (#3669)
- Chore: Move ES module build to es/ (#3670)
- Chore: Add module entry point for webpack 2 (#3672)
","Changes
Aug 2, 2016
- Feature: Support function to prop in  (#3669)
- Chore: Move ES module build to es/ (#3670)
- Chore: Add module entry point for webpack 2 (#3672)"
167,"Changes

Jul 29, 2016
- Bugfix: Correctly handle routes with patterns that are the names of properties on Object.prototype (#3680)
","Changes
Jul 29, 2016
- Bugfix: Correctly handle routes with patterns that are the names of properties on Object.prototype (#3680)"
168,"Changes

Jul 19, 2016
- Breaking: Remove all deprecated functionality as of v2.6.0 (#3603, #3646)
- Breaking: Support history v3 instead of history v2 (#3647)
- Feature: Add router to props for route components (#3486)
","Changes
Jul 19, 2016
- Breaking: Remove all deprecated functionality as of v2.6.0 (#3603, #3646)
- Breaking: Support history v3 instead of history v2 (#3647)
- Feature: Add router to props for route components (#3486)"
169,"Changes

Jul 18, 2016
- Feature: Add prevState as argument to onLeave hooks (#3616)
- Bugfix: Fix when the <Link> onClick invariant runs (#3636)
","Changes
Jul 18, 2016
- Feature: Add prevState as argument to onLeave hooks (#3616)
- Bugfix: Fix when the  onClick invariant runs (#3636)"
170,"
#3607 [added] Support for React v0.15
#3645 [fixed] Passing through extra props to <Link>
","3607 [added] Support for React v0.15
3645 [fixed] Passing through extra props to "
171,"Changes

Bugfix: Remove extraneous propTypes check when creating a route object from a React element (#3591)
","Changes
Bugfix: Remove extraneous propTypes check when creating a route object from a React element (#3591)"
172,"Changes

Bugfix: Throw error instead of silently failing with history v3 (#3571)
Bugfix: Explicitly throw error in onClick handler of <Link> rendered outside of router context (#3572)
","Changes
Bugfix: Throw error instead of silently failing with history v3 (#3571)
Bugfix: Explicitly throw error in onClick handler of  rendered outside of router context (#3572)"
173,"Changes

Feature/Deprecation: Call getChildRoutes and getIndexRoute with partialNextState; deprecate accessing location directly in favor of partialNextState.location there (#3556, #3561, #3569, Upgrade Guide)
Refactor: Refactor creating routeParams objects (#3544)
","Changes
Feature/Deprecation: Call getChildRoutes and getIndexRoute with partialNextState; deprecate accessing location directly in favor of partialNextState.location there (#3556, #3561, #3569, Upgrade Guide)
Refactor: Refactor creating routeParams objects (#3544)"
174,"Changes

May 19, 2016
- Breaking: Remove all deprecated functionality as of v2.3.0 (#3340, #3435)
- Breaking/Feature: Make <Link> and withRouter update inside static containers (#3430, #3443)
- Feature: Add params, location, and routes to props injected by withRouter and to properties on context.router (#3444, #3446)
","Changes
May 19, 2016
- Breaking: Remove all deprecated functionality as of v2.3.0 (#3340, #3435)
- Breaking/Feature: Make  and withRouter update inside static containers (#3430, #3443)
- Feature: Add params, location, and routes to props injected by withRouter and to properties on context.router (#3444, #3446)"
175,"Changes

Bugfix: Don't crash on invalid URI components in params (#3453)
","Changes
Bugfix: Don't crash on invalid URI components in params (#3453)"
176,"Changes

Feature: Add withRouter higher-order component for injecting props.router (#3352)
Minor: Add React as a peer dependency (#3361)
Minor: Upgrade to Babel 6 (#3362)
Minor: Add target to propTypes for <Link> (#3397)
","Changes
Feature: Add withRouter higher-order component for injecting props.router (#3352)
Minor: Add React as a peer dependency (#3361)
Minor: Upgrade to Babel 6 (#3362)
Minor: Add target to propTypes for  (#3397)"
177,"Changes

Feature: Add applyRouterMiddleware for extending router rendering (#3327)
Feature/Deprecation: Add routerShape and locationShape as top-level exported prop types, and deprecate all the old prop types, including the ones that were previously incorrectly removed (#3349)
Minor: Move ES module build back to es6/ to avoid breaking people who were incorrectly importing from react-router/es6 (#3334)
","Changes
Feature: Add applyRouterMiddleware for extending router rendering (#3327)
Feature/Deprecation: Add routerShape and locationShape as top-level exported prop types, and deprecate all the old prop types, including the ones that were previously incorrectly removed (#3349)
Minor: Move ES module build back to es6/ to avoid breaking people who were incorrectly importing from react-router/es6 (#3334)"
178,"Changes

Noop: Publish again to npm to work around missing tarball problem
","Changes
Noop: Publish again to npm to work around missing tarball problem"
179,"Changes

Bugfix: Don't use Object.assign in getComponentsForRoute (#3331)
Minor: Speed up checking index path active status (#3313)
","Changes
Bugfix: Don't use Object.assign in getComponentsForRoute (#3331)
Minor: Speed up checking index path active status (#3313)"
180,"Changes

Bugfix: Fix edge cases with continuing matches after pathless routes (#3308)
","Changes
Bugfix: Fix edge cases with continuing matches after pathless routes (#3308)"
181,"Changes

Bugfix: Fix this in getComponent and getComponents (#3306)
","Changes
Bugfix: Fix this in getComponent and getComponents (#3306)"
182,"Changes

Feature/Deprecation: Call getComponent and getComponents with nextState; deprecate accessing location directly in favor of nextState.location there (#3298, Upgrade Guide)
Bugfix: Do not ignore extraneous slashes in matching (#3285)
Bugfix: Do not unnecessarily set empty className on <Link> (#3288)
Minor: Update PropTypes (#3218)
Minor: Move ES module build from es6/ to es/ (#3295)
Minor: Do not include unused deprecation logic in production builds (#3296)
","Changes
Feature/Deprecation: Call getComponent and getComponents with nextState; deprecate accessing location directly in favor of nextState.location there (#3298, Upgrade Guide)
Bugfix: Do not ignore extraneous slashes in matching (#3285)
Bugfix: Do not unnecessarily set empty className on  (#3288)
Minor: Update PropTypes (#3218)
Minor: Move ES module build from es6/ to es/ (#3295)
Minor: Do not include unused deprecation logic in production builds (#3296)"
183,"Changes

Bugfix: Remove unintentionally released code change (#3280)
","Changes
Bugfix: Remove unintentionally released code change (#3280)"
184,"Changes

Feature: Add support for onChange hook on routes (#3108)
Minor: Include full warning messages in non-minified UMD build (#3213)
Minor: Speed up path matching (#3217)
","Changes
Feature: Add support for onChange hook on routes (#3108)
Minor: Include full warning messages in non-minified UMD build (#3213)
Minor: Speed up path matching (#3217)"
185,"Changes

Bugfix: Call transition hooks on child routes of parents whose params
  changed but the child's did not. (#3166)
Minor: Remove support for installing from source (#3164)
","Changes
Bugfix: Call transition hooks on child routes of parents whose params
  changed but the child's did not. (#3166)
Minor: Remove support for installing from source (#3164)"
186,"Read the Full Upgrade Guide
Goals
You might enjoy reading this issue: https://github.com/rackt/react-router/issues/2646
1. Clear up the coupling between History and Router with simpler APIs.
2. Provide cleaner integrations with other libraries like Redux, Relay, Async Props etc.
3. Stop providing API that conceals usage of context. It is now a documented feature of React so developers using Router can implement their own opinions on how best to use context: Mixins, higher-order components, decorators, etc. React Router no longer has an opinion, but instead uses the lowest level feature of React.  This project wants to be an incredibly useful routing library and doesn't want to get hung up on best-practice patterns for getting stuff from up top to down low.
4. Draw a clean line between what goes to Route Components as props and what goes on context.
For a lot of apps this upgrade might look like API churn. Underneath the hood there are significant differences that make integrating with the rest of the React ecosystem more straightforward. Thanks for your continued patience and support as we all build this tool together. It's hard to imagine the top-level API changing much after this. But if it does, rest assured we are committed to ...
Backwards Compatibility and Deprecation Warnings
This has been a community project from the start, we need your help making the upgrade as smooth as possible for everybody!
We have done our best to provide backwards compatibility with deprecated APIs. If you drop in v2.x into a v1.x application and it doesn't run, then there is a bug. Please open an issue when you discover what the problem is so we can get a fix out.
The deprecation warnings should also lead you to the relevant part of this document. If one doesn't, please open a pull request with a fix. Also, if any part of this document could be improved, please let us know how. Confound it, our bias is often inescapable!
Upgrade Automatically with Codemods
Using a tool called jscodeshift, we have made available some codemods for upgrading your code to the new APIs automatically: https://github.com/rackt/rackt-codemod
A codemod is much like Babel, but instead of converting your ES2015 code to ES5 compatible syntax, it does a limited set of transformations on function names, arguments, common patterns and more. One way to think of jscodeshift (the underlying tool) is ""jQuery for code"". These codemods aren't bulletproof, so be sure to test your code after you run them. But they can help with upgrading a large codebase to remove deprecation warnings you're now triggering.
Changes since rc6

Add back basename support in match (#3054)
","Read the Full Upgrade Guide
Goals
You might enjoy reading this issue: link
1. Clear up the coupling between History and Router with simpler APIs.
2. Provide cleaner integrations with other libraries like Redux, Relay, Async Props etc.
3. Stop providing API that conceals usage of context. It is now a documented feature of React so developers using Router can implement their own opinions on how best to use context: Mixins, higher-order components, decorators, etc. React Router no longer has an opinion, but instead uses the lowest level feature of React.  This project wants to be an incredibly useful routing library and doesn't want to get hung up on best-practice patterns for getting stuff from up top to down low.
4. Draw a clean line between what goes to Route Components as props and what goes on context.
For a lot of apps this upgrade might look like API churn. Underneath the hood there are significant differences that make integrating with the rest of the React ecosystem more straightforward. Thanks for your continued patience and support as we all build this tool together. It's hard to imagine the top-level API changing much after this. But if it does, rest assured we are committed to ...
Backwards Compatibility and Deprecation Warnings
This has been a community project from the start, we need your help making the upgrade as smooth as possible for everybody!
We have done our best to provide backwards compatibility with deprecated APIs. If you drop in v2.x into a v1.x application and it doesn't run, then there is a bug. Please open an issue when you discover what the problem is so we can get a fix out.
The deprecation warnings should also lead you to the relevant part of this document. If one doesn't, please open a pull request with a fix. Also, if any part of this document could be improved, please let us know how. Confound it, our bias is often inescapable!
Upgrade Automatically with Codemods
Using a tool called jscodeshift, we have made available some codemods for upgrading your code to the new APIs automatically: link
A codemod is much like Babel, but instead of converting your ES2015 code to ES5 compatible syntax, it does a limited set of transformations on function names, arguments, common patterns and more. One way to think of jscodeshift (the underlying tool) is ""jQuery for code"". These codemods aren't bulletproof, so be sure to test your code after you run them. But they can help with upgrading a large codebase to remove deprecation warnings you're now triggering.
Changes since rc6
Add back basename support in match (#3054)"
187,"This should be the final release candidate before 2.0.0 final. Please test this version!
Changes

Breaking: Removed default top-level <Router> export (#2906)
Use history.createLocation where possible (#2910)
Fix initial routing state after match (#2965)
Reduce stack size from matching routes (#2923)
","This should be the final release candidate before 2.0.0 final. Please test this version!
Changes
Breaking: Removed default top-level  export (#2906)
Use history.createLocation where possible (#2910)
Fix initial routing state after match (#2965)
Reduce stack size from matching routes (#2923)"
188,"Changes

Export createMemoryHistory #2792
Fix warnings caused by React Dev Tools #2803
Add passing custom histories to match #2813
Fix basename regression #2822
Add back deprecated RoutingContext export #2851
Improve support for server rendering async routes #2883
","Changes
Export createMemoryHistory #2792
Fix warnings caused by React Dev Tools #2803
Add passing custom histories to match #2813
Fix basename regression #2822
Add back deprecated RoutingContext export #2851
Improve support for server rendering async routes #2883"
189,"
Also do not create a hashHistory on the server.
",Also do not create a hashHistory on the server.
190,"rc2 hit an NPM packaging bug. This is a repackaging with one fix included:
Changes

Rebuilt with history correctly included.
Don’t create browserHistory on the server
","rc2 hit an NPM packaging bug. This is a repackaging with one fix included:
Changes
Rebuilt with history correctly included.
Don’t create browserHistory on the server"
191,"Read the fancy upgrade guide.
Changes
Lots of stuff! Here's the summary.
- Added render prop to Router
- Added singleton browserHistory and hashHistory
- Added createMemoryHistory
- Deprecated all mixins
- Replaced context.history with context.router
- Deprecated Route Component props.history
- Deprecated context.location","Read the fancy upgrade guide.
Changes
Lots of stuff! Here's the summary.
- Added render prop to Router
- Added singleton browserHistory and hashHistory
- Added createMemoryHistory
- Deprecated all mixins
- Replaced context.history with context.router
- Deprecated Route Component props.history
- Deprecated context.location"
192,Don't worry about it. See v2.0.0-rc2 instead!,Don't worry about it. See v2.0.0-rc2 instead!
193,"You may now upgrade your history version to the latest release. NPM will no longer yell at you about versioning and any previous deprecation warnings have been cleared in the 1.17.0 version. Sorry about the confusion!
sh
npm install --save history@1.17.0
Changes

Switched back to a caret range for history, now that the warnings have been removed
","You may now upgrade your history version to the latest release. NPM will no longer yell at you about versioning and any previous deprecation warnings have been cleared in the 1.17.0 version. Sorry about the confusion!
sh
npm install --save history@1.17.0
Changes
Switched back to a caret range for history, now that the warnings have been removed"
194,":warning: IMPORTANT :warning:
Please ensure your project is running history v1.13.1 to avoid any deprecation warnings or unmet peerDependencies errors.
sh
npm install --save history@1.13.1
Changes

Pinned peer dependency on History to 1.13.x to avoid console warnings.
",":warning: IMPORTANT :warning:
Please ensure your project is running history v1.13.1 to avoid any deprecation warnings or unmet peerDependencies errors.
sh
npm install --save history@1.13.1
Changes
Pinned peer dependency on History to 1.13.x to avoid console warnings."
195,"
Support IE8 (#2540)
Add ES2015 module build (#2530)
","Support IE8 (#2540)
Add ES2015 module build (#2530)"
196,"Thanks for your patience :) Big changes from v0.13.x to 1.0. While on the surface a lot of this just looks like shuffling around API, the entire codebase has been rewritten to handle some really great use cases, like loading routes and components on demand, session-based route matching, server rendering, integration with libs like redux and relay, and lots more.
But for now, here's how to translate the old API to the new one.
Importing
The new Router component is a property of the top-level module.
``` js
// v0.13.x
var Router = require('react-router');
var Route = Router.Route;
// v1.0
var ReactRouter = require('react-router');
var Router = ReactRouter.Router;
var Route = ReactRouter.Route;
// or using ES Modules
import { Router, Route } from 'react-router';
```
Rendering
``` js
// v0.13.x
Router.run(routes, (Handler) => {
  render(, el);
})
// v1.0
render({routes}, el)
// looks more like this:
render((
  


), el);
// or if you'd rather
render(, el)
```
Locations
Locations are now called histories (that emit locations). You import them from the history package, not react router.
``` js
// v0.13.x
Router.run(routes, Router.BrowserHistory, (Handler) => {
  render(, el);
})
// v1.0
import createBrowserHistory from 'history/lib/createBrowserHistory'
let history = createBrowserHistory()
render({routes}, el)
```
If you do not specify a history type (as in the example above) then you will notice some unusual behavior after updating to 1.0.0. With the default hash based routing a querystring entry not defined by yourself will start appearing in your URLs called _k. An example of how it looks is this: ?_k=umhx1s
This is intended and part of createHashHistory (which is the default history approach used if one is not specified). You can read more about the feature here and how to opt out here.
Route Config
You can still nest your routes as before, paths are inherited from parents just like before but prop names have changed.
``` js
// v0.13.x

// v1.0

```
Named routes are gone (for now, see discussion)
NotFound route
Not found really confused people, mistaking not finding resources from your API for not matching a route. We've removed it completely since it's simple with a * path.
``` js
// v0.13.x

// v1.0

```
Redirect route
``` js
// v0.13.x

// v1.0
// Works the same as before, except no params, just put them in the path

```
Links
path / params
``` js
// v0.13.x
Mateusz
// v1.0
// because named routes are gone, link to full paths, you no longer need
// to know the names of the parameters, and string templates are quite
// nice. Note that query has not changed.
/users/${user.id}}>Mateusz
```
""active"" class
In 0.13.x links added the ""active"" class by default which you could override with activeClassName, or provide activeStyles. It's usually just a handful of navigation links that need this behavior.
Links no longer add the ""active"" class by default (its expensive and usually not necessary), you opt-in by providing one; if no activeClassName or activeStyles are provided, the link will not check if it's active.
``` js
// v0.13.x
About
// v1.0
About
```
Linking to Index routes
Because named routes are gone, a link to / with an index route at / will always be active. So we've introduced IndexLink that is only active when on exactly that path.
``` js
// v0.13.x
// with this route config




// will be active only when home is active, not when about is active
Home
// v1.0




// will be active only when home is active, not when about is active
Home
```
This gives you more granular control of what causes a link to be active or not when there is an index route involved.
onClick handler
For consistency with React v0.14, returning false from a Link's onClick handler no longer prevents the transition. To prevent the transition, call e.preventDefault() instead.
RouteHandler
RouteHandler is gone. Router now automatically populates this.props.children of your components based on the active route.
``` js
// v0.13.x


// v1.0
{this.props.children}
{React.cloneElement(this.props.children, {someExtraProp: something})}
```
Note: React does not validate propTypes that are specified via cloneElement (see: facebook/react#4494). It is recommended to make such propTypes optional.
Navigation Mixin
If you were using the Navigation mixin, use the History mixin instead.
``` js
// v0.13.x
var Assignment = React.createClass({
  mixins: [ Navigation ],
  navigateAfterSomethingHappened () {
    this.transitionTo('/users', { userId: user.id }, query);
    // this.replaceWith('/users', { userId: user.id }, query);
  }
})
// v1.0
var Assignment = React.createClass({
  mixins: [ History ],
  navigateAfterSomethingHappened () {
    // the router is now built on rackt/history, and it is a first class
    // API in the router for navigating
    this.history.pushState(null, /users/${user.id}, query);
    // this.history.replaceState(null, /users/${user.id}, query);
  }
})
```
The following Navigation methods are now also found on the history object, main difference again is there are no params or route names, just pathnames.
| v0.13 | v1.0 |
| --- | --- |
| go(n) | go(n) |
| goBack() | goBack() |
| goForward() | goForward() |
| makeHref(routeName, params, query) | createHref(pathname, query) |
| makePath(routeName, params, query) | createPath(pathname, query) |
State mixin
``` js
// v0.13.x
var Assignment = React.createClass({
  mixins: [ State ],
  foo () {
    this.getPath()
    this.getParams()
    // etc...
  }
})
// v1.0
// if you are a route component...

var Assignment = React.createClass({
  foo () {
    this.props.location // contains path information
    this.props.params // contains params
    this.props.history.isActive
  }
})
// if you're not a route component, you need to pass location down the
// tree or get the location from context. We will probably provide a
// higher order component that will do this for you but haven't yet.
// see further down for more information on what can be passed down
// via context
var Assignment = React.createClass({
  contextTypes: {
    location: React.PropTypes.object
  },
  foo () {
    this.context.location
  }
})
```
Here's a table of where you used to get stuff with the State mixin, and where you get it now if you're a route component (this.props)
| v0.13 (this) | v1.0 (this.props) |
| --- | --- |
| getPath() | location.pathname+location.search |
| getPathname() | location.pathname |
| getParams() | params |
| getQuery() | location.search |
| getQueryParams() | location.query |
| getRoutes() | routes |
| isActive(to, params, query) | history.isActive(pathname, query, onlyActiveOnIndex) |
Here is another table of properties you used to get via the State and where you can get it now if you are not a route component (this.context).
| v0.13 (this) | v1.0 (this.context) |
| --- | --- |
| getPath() | location.pathname+location.search |
| getPathname() | location.pathname |
| getQuery() | location.search |
| getQueryParams() | location.query |
| isActive(to, params, query) | history.isActive(pathname, query, indexOnly) |
Note not all State functionality can be accessed via context in v1.0. For example, params is not available via context.
Scrolling
We're developing scroll behaviors separately in the scroll-behavior library until we have a stable, robust implementation that we're happy with. Currently, scroll behaviors are exposed there as history enhancers: 
``` js
import createHistory from 'history/lib/createBrowserHistory'
import useScroll from 'scroll-behavior/lib/useStandardScroll'
const history = useScroll(createHistory)()
```
willTransitionTo and willTransitionFrom
Routes now define this behavior:
``` js
// v0.13.x
var Home = React.createClass({
  statics: {
    willTransitionTo (transition, params, query, callback) { }
    willTransitionFrom (component, transition, params, query, callback) { }
  }
})
// v1.0
 {}}
  onLeave={() => {}}
/>
```
To cancel a ""transition from"", please refer to the Confirming Navigation guide.","Thanks for your patience :) Big changes from v0.13.x to 1.0. While on the surface a lot of this just looks like shuffling around API, the entire codebase has been rewritten to handle some really great use cases, like loading routes and components on demand, session-based route matching, server rendering, integration with libs like redux and relay, and lots more.
But for now, here's how to translate the old API to the new one.
Importing
The new Router component is a property of the top-level module.
module
Rendering
``` js
// v0.13.x
Router.run(routes, (Handler) => {
  render(, el);
})
// v1.0
render({routes}, el)
// looks more like this:
render((
), el);
// or if you'd rather
render(, el)
module js
// v0.13.x
Router.run(routes, Router.BrowserHistory, (Handler) => {
  render(, el);
})
// v1.0
import createBrowserHistory from 'history/lib/createBrowserHistory'
let history = createBrowserHistory()
render({routes}, el)
module js
// v0.13.x
// v1.0
module js
// v0.13.x
// v1.0
module js
// v0.13.x
// v1.0
// Works the same as before, except no params, just put them in the path
module js
// v0.13.x
Mateusz
// v1.0
// because named routes are gone, link to full paths, you no longer need
// to know the names of the parameters, and string templates are quite
// nice. Note that query has not changed.
/users/${user.id}}>Mateusz
module js
// v0.13.x
About
// v1.0
About
module js
// v0.13.x
// with this route config
// will be active only when home is active, not when about is active
Home
// v1.0
// will be active only when home is active, not when about is active
Home
module js
// v0.13.x
// v1.0
{this.props.children}
{React.cloneElement(this.props.children, {someExtraProp: something})}
module js
// v0.13.x
var Assignment = React.createClass({
  mixins: [ Navigation ],
  navigateAfterSomethingHappened () {
    this.transitionTo('/users', { userId: user.id }, query);
    // this.replaceWith('/users', { userId: user.id }, query);
  }
})
// v1.0
var Assignment = React.createClass({
  mixins: [ History ],
  navigateAfterSomethingHappened () {
    // the router is now built on rackt/history, and it is a first class
    // API in the router for navigating
    this.history.pushState(null, /users/${user.id}, query);
    // this.history.replaceState(null, /users/${user.id}, query);
  }
})
module js
// v0.13.x
var Assignment = React.createClass({
  mixins: [ State ],
  foo () {
    this.getPath()
    this.getParams()
    // etc...
  }
})
// v1.0
// if you are a route component...
var Assignment = React.createClass({
  foo () {
    this.props.location // contains path information
    this.props.params // contains params
    this.props.history.isActive
  }
})
// if you're not a route component, you need to pass location down the
// tree or get the location from context. We will probably provide a
// higher order component that will do this for you but haven't yet.
// see further down for more information on what can be passed down
// via context
var Assignment = React.createClass({
  contextTypes: {
    location: React.PropTypes.object
  },
  foo () {
    this.context.location
  }
})
module js
import createHistory from 'history/lib/createBrowserHistory'
import useScroll from 'scroll-behavior/lib/useStandardScroll'
const history = useScroll(createHistory)()
module js
// v0.13.x
var Home = React.createClass({
  statics: {
    willTransitionTo (transition, params, query, callback) { }
    willTransitionFrom (component, transition, params, query, callback) { }
  }
})
// v1.0
 {}}
  onLeave={() => {}}
/>
```
To cancel a ""transition from"", please refer to the Confirming Navigation guide."
197,"
ec3f3eb [wip][added] Support custom RoutingContext on Router
4b8e994 [fixed] Index routes with extraneous slashes
c68f9f1 [removed] Remove deprecated handler prop on Route
9e449f5 [fixed] Match routes piece-by-piece
fbc109c [fixed] Use %20 instead of + in URL pathnames
8dd8ceb [fixed] Mark dynamic index routes as active
fae04bc [added] Greedy splat (**)
24ad58c [changed] Query changes aren't route changes
19c7086 [added] Handle undefined query values in isActive
3545ab2 [removed] params from RoutingContext child context
9d346fc [added] params on RoutingContext child context
52cca98 [changed] Preventing transition from onClick
4e48b6b [changed] Pass named children as props
3cc7d6d [added] Peer dependency on history package
751ca25 [fixed] Don't match empty routes for isActive
8459755 [fixed] Include the hash prop on Links
ac7dd4a [fixed] Postinstall script on Windows
d905382 [added] Test for IndexLink to deeply nested IndexRoute
6f8ceac [fixed] Transitions example
","ec3f3eb [wip][added] Support custom RoutingContext on Router
4b8e994 [fixed] Index routes with extraneous slashes
c68f9f1 [removed] Remove deprecated handler prop on Route
9e449f5 [fixed] Match routes piece-by-piece
fbc109c [fixed] Use %20 instead of + in URL pathnames
8dd8ceb [fixed] Mark dynamic index routes as active
fae04bc [added] Greedy splat (**)
24ad58c [changed] Query changes aren't route changes
19c7086 [added] Handle undefined query values in isActive
3545ab2 [removed] params from RoutingContext child context
9d346fc [added] params on RoutingContext child context
52cca98 [changed] Preventing transition from onClick
4e48b6b [changed] Pass named children as props
3cc7d6d [added] Peer dependency on history package
751ca25 [fixed] Don't match empty routes for isActive
8459755 [fixed] Include the hash prop on Links
ac7dd4a [fixed] Postinstall script on Windows
d905382 [added] Test for IndexLink to deeply nested IndexRoute
6f8ceac [fixed] Transitions example"
198,"
#2262 [added] Support for React v0.14
",2262 [added] Support for React v0.14
199,"
e42a4ad [changed] Stop using npm prepublish script
3be6a2d [fixed] Workaround for nasty npm bug
","e42a4ad [changed] Stop using npm prepublish script
3be6a2d [fixed] Workaround for nasty npm bug"
200,"
bdab3d8 [fixed] Compare query by string value
c43fb61 [added]  prop
24e7b4f [fixed] isActive on nested IndexLink
160c5ba [fixed] Removed  warning about no history in context
ca9e3b7 [added] IndexRedirect
428da54 [added] Support 
ebb8d20 [fixed] Remove direct calls to createLocation.
fc8a7a4 [changed] Run examples using HTML5 history
37d9bac [fixed] isActive on 
be37196 [fixed] Actually update state when there are transition hooks
b8f1abe [changed] Removed (un)registerRouteHook
69a9240 [fixed] Added missing IndexLink to exports
","bdab3d8 [fixed] Compare query by string value
c43fb61 [added]  prop
24e7b4f [fixed] isActive on nested IndexLink
160c5ba [fixed] Removed  warning about no history in context
ca9e3b7 [added] IndexRedirect
428da54 [added] Support 
ebb8d20 [fixed] Remove direct calls to createLocation.
fc8a7a4 [changed] Run examples using HTML5 history
37d9bac [fixed] isActive on 
be37196 [fixed] Actually update state when there are transition hooks
b8f1abe [changed] Removed (un)registerRouteHook
69a9240 [fixed] Added missing IndexLink to exports"
201,"
b237238 [fixed] Removed getter for IE8 compat
53ce7f1 [fixed] #1148 regex for detecting trailing slashes
","b237238 [fixed] Removed getter for IE8 compat
53ce7f1 [fixed] #1148 regex for detecting trailing slashes"
202,"
5fbe933 [changed] Do not add ""active"" class by default
85c699c [changed] State -> IsActive
","5fbe933 [changed] Do not add ""active"" class by default
85c699c [changed] State -> IsActive"
203,"
94509e7 [added] IndexLink
adc0a2f [added] IndexRoute
b86509a [added] useRoutes history enhancer [added] RoutingContext component [added] RouteContext mixin [added] Lifecycle mixin
e72812d [added] 
4c6dc1b [fixed] Installing on Windows
042cffc [changed] Removed histories/added history dep
af7eb55 [added] History.onBeforeChange
f4ed900 [fixed] correctly updates the window scroll position
587e54f [added] static history singleton getter for HashHistory and BrowserHistory
5bd62b5 [fixed] errors in examples
4e2ca3c [fixed] URI escape path components with special chars
0630488 [fixed] Link module adds extra space
26400c1 [fixed] Use encodeURI for splat params
178efc3 [fixed]  when using HashHistory
41bd525 [fixed] Properly escape splats
4759961 [fixed] URLUtils recognize values containing \n
2389c61 [changed] Export history classes
824ed63 [fixed]  handling
2447ecb [added] formatPattern util method
","94509e7 [added] IndexLink
adc0a2f [added] IndexRoute
b86509a [added] useRoutes history enhancer [added] RoutingContext component [added] RouteContext mixin [added] Lifecycle mixin
e72812d [added] 
4c6dc1b [fixed] Installing on Windows
042cffc [changed] Removed histories/added history dep
af7eb55 [added] History.onBeforeChange
f4ed900 [fixed] correctly updates the window scroll position
587e54f [added] static history singleton getter for HashHistory and BrowserHistory
5bd62b5 [fixed] errors in examples
4e2ca3c [fixed] URI escape path components with special chars
0630488 [fixed] Link module adds extra space
26400c1 [fixed] Use encodeURI for splat params
178efc3 [fixed]  when using HashHistory
41bd525 [fixed] Properly escape splats
4759961 [fixed] URLUtils recognize values containing \n
2389c61 [changed] Export history classes
824ed63 [fixed]  handling
2447ecb [added] formatPattern util method"
204,https://github.com/rackt/react-router/compare/v1.0.0-beta2...v1.0.0-beta3,link
205,https://github.com/rackt/react-router/compare/v1.0.0-beta1...v1.0.0-beta2,link
206,https://github.com/rackt/react-router/compare/v1.0.0-alpha2...v1.0.0-beta1,link
207,https://github.com/rackt/react-router/compare/0.13.x...v1.0.0-alpha2,link
208,https://github.com/rackt/react-router/compare/v0.13.2...v0.13.3,link
209,"
4a8b756 [fixed] empty query strings not being removed
1b2293b [fixed] use context in examples
4af3c18 [fixed] HashLocation triggers 'replace' state on transition.redirect()
59c28de [fixed] Empty query string now routes correctly
f5d4f36 [fixed] Docs Update
","4a8b756 [fixed] empty query strings not being removed
1b2293b [fixed] use context in examples
4af3c18 [fixed] HashLocation triggers 'replace' state on transition.redirect()
59c28de [fixed] Empty query string now routes correctly
f5d4f36 [fixed] Docs Update"
210,"
d12e9dee Use Router instead of this now that autobinding is off
",d12e9dee Use Router instead of this now that autobinding is off
211,"React introduced the ability to use ES6 classes for component definitions, which has the side-effect of mixins not being ""the thing"" anymore. Our mixins like State and Navigation just proxied calls to some methods on an undocumented feature of React called context, that in turn called methods on the router instance under the hood.
Without mixins we needed a way for you to get access to these methods. We decided the simplest solution was to stop hiding the router instance and just put the whole thing on context.
You can think about context as values that are floating around a render tree that parent components (Handler in the Router.run callback) can explicitly define and descendent components can explicitly ask for. The stuff on context doesn't show up in a component unless you ask for it.
Note: You can still use our mixins, you'll just get a deprecation warning.
``` js
// 0.12.x
var Foo = React.createClass({
  mixins: [ Router.State ],
  render: function () {
    var id = this.getParams().id;
    var searchTerm = this.getQuery().searchTerm;
    // etc. ...
  }
});
// 0.13.x w/o ES6 fanciness
var Foo = React.createClass({
  contextTypes: {
    router: React.PropTypes.func
  },
render: function () {
    var router = this.context.router;
    var id = router.getCurrentParams().id;
    var searchTerm = router.getCurrentQuery().searchTerm;
    // etc.
  }
});
// 0.13.x w/ ES6 fanciness
class Foo extends React.Component {
  render () {
    var { router } = this.context;
    var id = router.getCurrentParams().id;
    var searchTerm = router.getCurrentQuery().searchTerm;
    // etc.
  }
}
Foo.contextTypes = {
  router: React.PropTypes.func
};
```
Most of the time we prefer to just pass the state down the props tree
and not mess with context:
``` js
Router.run(routes, (Handler, state) => {
  React.render(, document.body);
});
// and then when rendering route handlers, keep passing it down

// and then in your methods you have what you need on props
var id = this.props.params.id;
var searchTerm = this.props.query.searchTerm;
```
Changes

f3a44f1 [fixed] React 0.13 compatibility
559c604 [changed] Use empty bracket notation for arrays
07b4972 [fixed] Allow repetition in child paths
696a706 [fixed] Use defaultProps of config components
61f0a8c [changed] Deprecate Navigation/State mixins
","React introduced the ability to use ES6 classes for component definitions, which has the side-effect of mixins not being ""the thing"" anymore. Our mixins like State and Navigation just proxied calls to some methods on an undocumented feature of React called context, that in turn called methods on the router instance under the hood.
Without mixins we needed a way for you to get access to these methods. We decided the simplest solution was to stop hiding the router instance and just put the whole thing on context.
You can think about context as values that are floating around a render tree that parent components (Handler in the Router.run callback) can explicitly define and descendent components can explicitly ask for. The stuff on context doesn't show up in a component unless you ask for it.
Note: You can still use our mixins, you'll just get a deprecation warning.
module
Most of the time we prefer to just pass the state down the props tree
and not mess with context:
``` js
Router.run(routes, (Handler, state) => {
  React.render(, document.body);
});
// and then when rendering route handlers, keep passing it down
// and then in your methods you have what you need on props
var id = this.props.params.id;
var searchTerm = this.props.query.searchTerm;
```
Changes
f3a44f1 [fixed] React 0.13 compatibility
559c604 [changed] Use empty bracket notation for arrays
07b4972 [fixed] Allow repetition in child paths
696a706 [fixed] Use defaultProps of config components
61f0a8c [changed] Deprecate Navigation/State mixins"
212,"
5768506 [fixed] Build generation
",5768506 [fixed] Build generation
213,"
aef0dce [fixed] DefaultRoute/NotFoundRoute name regression
",aef0dce [fixed] DefaultRoute/NotFoundRoute name regression
214,"
196390f [fixed] Make s global, again
","196390f [fixed] Make s global, again"
215,"
3d8a883 [fixed] Ignore extraneous popstate events in WebKit
db2607d [fixed] Double-encoding of URLs
c5a24a5 [added] Route/Match classes
ae6fcda [changed] Rename Scrolling => ScrollHistory
f975bdf [fixed] allow a StaticLocation to be passed directly when creating a router
7d52d55 [changed] TestLocation is a constructor
193222e [added] StaticLocation, for server-side rendering
e05e229 [added] Transition#cancel
04ba639 [added] Link activeStyle property
585d8ec [fixed] Use more correct children invariant
62c49d2 [changed] Change Navigation to return the result of goBack()
83c8f59 [fixed] Allow special characters in query
","3d8a883 [fixed] Ignore extraneous popstate events in WebKit
db2607d [fixed] Double-encoding of URLs
c5a24a5 [added] Route/Match classes
ae6fcda [changed] Rename Scrolling => ScrollHistory
f975bdf [fixed] allow a StaticLocation to be passed directly when creating a router
7d52d55 [changed] TestLocation is a constructor
193222e [added] StaticLocation, for server-side rendering
e05e229 [added] Transition#cancel
04ba639 [added] Link activeStyle property
585d8ec [fixed] Use more correct children invariant
62c49d2 [changed] Change Navigation to return the result of goBack()
83c8f59 [fixed] Allow special characters in query"
216,"transition.wait was removed, you now use a callback instead:
``` js
// 0.11.x
var SomeHandler = React.createClass({
  statics: {
    willTransitionTo (transition) {
      transition.wait(somePromise());
    }
  }
});
// 0.12.0
var SomeHandler = React.createClass({
  statics: {
    willTransitionTo (transition, params, query, callback) {
      somePromise().then(callback);
    }
  }
});
```
Changes

cd2087d [added] default handler to routes
848361e [fixed] Clean up mounted route component on unmount so we don't leak references
5bcf653 [fixed] Double slash in href when parent route has optional trailing slash
e280efd [changed] Don't restore scroll position on Forward
20c2c9b [fixed] Do not decode + in pathname
fe5ec39 [fixed] Double-encoding of query strings
df38294 [fixed] Allow comments in JSX config
84056ba [fixed] Ignore falsy routes
4a770e8 [fixed] Using TestLocation without DOM
2ac2510 [added] router.replaceRoutes(children)
1f81286 [fixed] Ignore stale transitions
c6ed6fa [removed] transition.wait, use callbacks instead
75c6206 [added] router.stop()
4e96256 [fixed] Preserve original query with HashLocation
2f19e63 [changed] Bump qs dependency version
","transition.wait was removed, you now use a callback instead:
module
Changes
cd2087d [added] default handler to routes
848361e [fixed] Clean up mounted route component on unmount so we don't leak references
5bcf653 [fixed] Double slash in href when parent route has optional trailing slash
e280efd [changed] Don't restore scroll position on Forward
20c2c9b [fixed] Do not decode + in pathname
fe5ec39 [fixed] Double-encoding of query strings
df38294 [fixed] Allow comments in JSX config
84056ba [fixed] Ignore falsy routes
4a770e8 [fixed] Using TestLocation without DOM
2ac2510 [added] router.replaceRoutes(children)
1f81286 [fixed] Ignore stale transitions
c6ed6fa [removed] transition.wait, use callbacks instead
75c6206 [added] router.stop()
4e96256 [fixed] Preserve original query with HashLocation
2f19e63 [changed] Bump qs dependency version"
217,"
90cd750 [fixed] Call all transition hooks on query changes
",90cd750 [fixed] Call all transition hooks on query changes
218,"
31e1eb2 [fixed] supportsHistory false negatives on WP 8.1
6417285 [fixed] tearing down location listeners
457d944 [added] Router.History
a07003e [fixed] URL hash consistency across browsers
c6aa4d3 [fixed] Now execute willTransition* hooks even if only query part was changed
","31e1eb2 [fixed] supportsHistory false negatives on WP 8.1
6417285 [fixed] tearing down location listeners
457d944 [added] Router.History
a07003e [fixed] URL hash consistency across browsers
c6aa4d3 [fixed] Now execute willTransition* hooks even if only query part was changed"
219,"
b9079c9 [added] getPathname to Router.State
91d4380 [fixed] Abort pending transition on user navigation
5fe6c08 [changed] Don't update scroll if only query has changed
","b9079c9 [added] getPathname to Router.State
91d4380 [fixed] Abort pending transition on user navigation
5fe6c08 [changed] Don't update scroll if only query has changed"
220,"
91d4380 [fixed] Abort pending transition on user navigation
5fe6c08 [changed] Don't update scroll if only query has changed
","91d4380 [fixed] Abort pending transition on user navigation
5fe6c08 [changed] Don't update scroll if only query has changed"
221,"
017363d [fixed] default redirect path to '*'
187eb0e [fixed] Added missing require statement
5a1ed33 [fixed] Path.decode/encode with query string
","017363d [fixed] default redirect path to '*'
187eb0e [fixed] Added missing require statement
5a1ed33 [fixed] Path.decode/encode with query string"
222,"
b75f648 [fixed] rendering current handlers before rendering root
",b75f648 [fixed] rendering current handlers before rendering root
223,"The router changed a lot in this release. While you won't have to change too much of your app, you will have to change it in a lot of places. The fundamental change is that you, rather than the router, get to have control of your view instances.
If you find anything is missing from this list, please open an issue and we will get it added here ASAP.
React 0.12
You must upgrade to 0.12.x before you can use version 0.11.x of the
router.
<Routes/> and starting the router
<Routes/> is gone, there is a new API that gives you complete control
of your views.
``` js
// 0.10.x
var routes = (
  




);
React.render(routes, el);
// 0.11.x
var routes = (
  


);
Router.run(routes, Router.HistoryLocation, function (Handler) {
  React.render(, el);
});
// or default to hash location
Router.run(routes, function (Handler) {
  React.render(, el);
});
```
this.props.activeRouteHandler() -> <RouteHandler/>
``` js
// 0.10.x
var Something = React.createClass({
  render: function () {
    return (
      


    );
  }
});
// 0.11.x
var RouteHandler = Router.RouteHandler;
var Something = React.createClass({
  render: function () {
    return (
      


    );
  }
});
```
this.props.params and this.props.query
They are no longer available on props, use the State mixin.
``` js
// 0.10.x
var Something = React.createClass({
  render: function () {
    var name = this.props.params.name;
    var something = this.props.query.something;
    // ...
  }
});
// 0.11.x
// pass it down the view hierarchy to get the same lifecycle hooks to
// trigger as before
Router.run(routes, function (Handler, state) {
  React.render(, el);
  // make sure to <RouteHandler {...this.props}/> to continue
  // passing it down the hierarchy
});
// or use the State mixin
var Something = React.createClass({
  mixins: [ Router.State ],
  render: function () {
    var name = this.getParams().name;
    var something = this.getQuery().something;
    // ...
  }
});
// Also, if you're using a flux-style app, you can trigger a ""transition""
// action in the run callback with the params/query in the payload, then
// subscribe in your handlers to the store that grabs the data.
```
ActiveState -> State, and methods too
This mixin's name has changed, and all of its methods that had the word
active in it, too. For example, getActiveParams() becomes getParams().
``` js
// v0.10.x
var Something = React.createClass({
  mixins: [ Router.ActiveState ],
  render: function () {
    var name = this.getActiveParams().name;
    // ...
  }
});
// v0.11.x
var Something = React.createClass({
  mixins: [ Router.State ]
  render: function () {
    var name = this.getParams().name;
    // ...
  }
});
```
CurrentPath -> State
You can find this.getPath() on the Router.State mixin.
``` js
// v0.10.x
var Something = React.createClass({
  mixins: [ Router.CurrentPath ],
  render: function () {
    var path = this.getCurrentPath();
    // ...
  }
});
// v0.11.x
var Something = React.createClass({
  mixins: [ Router.State ],
  render: function () {
    var path = this.getPath();
    // ...
  }
});
```
Route addHandlerKey prop
This option has been removed, you will need to add handler keys
yourself:
``` js
// 0.10.x



// 0.11.x
var App = React.createClass({
  mixins: [ Router.State ],
getHandlerKey: function () {
    // this will all depend on your needs, but here's a typical
    // scenario that's pretty much what the old prop did
    var childDepth = 1; // have to know your depth
    var childName = this.getRoutes()[childDepth].name;
    var id = this.getParams().id;
    var key = childName+id;
    return key;
  },
render: function () {
    return (
      


    );
  }
});
```
<Routes onError={fn}/>
<Routes/> is gone, instead create a router with your error handler as
an option:
``` js
// 0.10.x

  // ...

// 0.11.x
var router = Router.create({
  onError: fn,
  // ...
});
router.run(callback);
```
Router.renderRoutesTo*
These methods have been removed because you, not the router, are in
control of rendering.
`` js
// v0.10.x
Router.renderRoutesToString(routes, path, function (html) {
 // do something withhtml`
});
// v0.11.x
Router.run(routes, path, function (Handler) {
  var html = React.renderToString();
});
```
Route Props Passed to Handlers
In 0.10.x you could add props to your route that would make their way
down to your handlers. While convenient, conflating routes with their
handlers was confusing to a lot of folks.
To get the same effect, you can either create your handlers with a
function and close over the information you need, or simply define those
properties on your handlers.
``` js
// 0.10.x

var Something = React.createClass({
  render () {
    return {this.props.name} {this.props.foo}
  }
});
// 0.11.x
// close over technique

function makeSomething(name, foo) {
  return React.createClass({
    render () {
      return {name} {foo}
    }
  });
}
// handler definition technique

var Something = React.createClass({
  foo: ""bar"",
  name: ""users"",
  render () {
    return {this.name} {this.foo}
  }
});
```","The router changed a lot in this release. While you won't have to change too much of your app, you will have to change it in a lot of places. The fundamental change is that you, rather than the router, get to have control of your view instances.
If you find anything is missing from this list, please open an issue and we will get it added here ASAP.
React 0.12
You must upgrade to 0.12.x before you can use version 0.11.x of the
router.
 and starting the router
 is gone, there is a new API that gives you complete control
of your views.
``` js
// 0.10.x
var routes = (
);
React.render(routes, el);
// 0.11.x
var routes = (
);
Router.run(routes, Router.HistoryLocation, function (Handler) {
  React.render(, el);
});
// or default to hash location
Router.run(routes, function (Handler) {
  React.render(, el);
});
module js
// 0.10.x
var Something = React.createClass({
  render: function () {
    return (
module
}
});
// 0.11.x
var RouteHandler = Router.RouteHandler;
var Something = React.createClass({
  render: function () {
    return (
module
}
});
module js
// 0.10.x
var Something = React.createClass({
  render: function () {
    var name = this.props.params.name;
    var something = this.props.query.something;
    // ...
  }
});
// 0.11.x
// pass it down the view hierarchy to get the same lifecycle hooks to
// trigger as before
Router.run(routes, function (Handler, state) {
  React.render(, el);
  // make sure to  to continue
  // passing it down the hierarchy
});
// or use the State mixin
var Something = React.createClass({
  mixins: [ Router.State ],
  render: function () {
    var name = this.getParams().name;
    var something = this.getQuery().something;
    // ...
  }
});
// Also, if you're using a flux-style app, you can trigger a ""transition""
// action in the run callback with the params/query in the payload, then
// subscribe in your handlers to the store that grabs the data.
module js
// v0.10.x
var Something = React.createClass({
  mixins: [ Router.ActiveState ],
  render: function () {
    var name = this.getActiveParams().name;
    // ...
  }
});
// v0.11.x
var Something = React.createClass({
  mixins: [ Router.State ]
  render: function () {
    var name = this.getParams().name;
    // ...
  }
});
module js
// v0.10.x
var Something = React.createClass({
  mixins: [ Router.CurrentPath ],
  render: function () {
    var path = this.getCurrentPath();
    // ...
  }
});
// v0.11.x
var Something = React.createClass({
  mixins: [ Router.State ],
  render: function () {
    var path = this.getPath();
    // ...
  }
});
module js
// 0.10.x
// 0.11.x
var App = React.createClass({
  mixins: [ Router.State ],
getHandlerKey: function () {
    // this will all depend on your needs, but here's a typical
    // scenario that's pretty much what the old prop did
    var childDepth = 1; // have to know your depth
    var childName = this.getRoutes()[childDepth].name;
    var id = this.getParams().id;
    var key = childName+id;
    return key;
  },
render: function () {
    return (
module
}
});
module js
// 0.10.x
// ...
// 0.11.x
var router = Router.create({
  onError: fn,
  // ...
});
router.run(callback);
module
Route Props Passed to Handlers
In 0.10.x you could add props to your route that would make their way
down to your handlers. While convenient, conflating routes with their
handlers was confusing to a lot of folks.
To get the same effect, you can either create your handlers with a
function and close over the information you need, or simply define those
properties on your handlers.
``` js
// 0.10.x
var Something = React.createClass({
  render () {
    return {this.props.name} {this.props.foo}
  }
});
// 0.11.x
// close over technique
function makeSomething(name, foo) {
  return React.createClass({
    render () {
      return {name} {foo}
    }
  });
}
// handler definition technique
var Something = React.createClass({
  foo: ""bar"",
  name: ""users"",
  render () {
    return {this.name} {this.foo}
  }
});
```"
224,"
940a0d0 [changed] use Object.assign instead of copyProperties
f8cb7f9 [changed] use Object.assign instead of merge
70b442a [added] React 0.12 compatibility
","940a0d0 [changed] use Object.assign instead of copyProperties
f8cb7f9 [changed] use Object.assign instead of merge
70b442a [added] React 0.12 compatibility"
225,"
70b442a [added] React 0.12 compatibility
",70b442a [added] React 0.12 compatibility
226,"Nothing changed, this was simply React 0.12.0 compatibility. Note,
your code needs to use the React 0.11.x API for things to work, there
will be lots of warnings in the console.
Changes

70b442a [added] React 0.12 compatibility
","Nothing changed, this was simply React 0.12.0 compatibility. Note,
your code needs to use the React 0.11.x API for things to work, there
will be lots of warnings in the console.
Changes
70b442a [added] React 0.12 compatibility"
227,"
6192285 [added]  to opt out of scroll behavior for itself and descendants
",6192285 [added]  to opt out of scroll behavior for itself and descendants
228,"
e571c27 [fixed] Add .active class to <Link>s with absolute hrefs
ea5a380 [fixed] Make sure onChange is fired at synchronous first render
dee374f [fixed] Listen to path changes caused by initial redirect, fixes #360
d47d7dd [fixed] potential infinite loop during transitions
1b1a62b [added] Server-side rendering
c7ca87e [added] <Routes onError>
","e571c27 [fixed] Add .active class to s with absolute hrefs
ea5a380 [fixed] Make sure onChange is fired at synchronous first render
dee374f [fixed] Listen to path changes caused by initial redirect, fixes #360
d47d7dd [fixed] potential infinite loop during transitions
1b1a62b [added] Server-side rendering
c7ca87e [added] "
229,"
caf3a2b [fixed] scrollBehavior='none' on path update
",caf3a2b [fixed] scrollBehavior='none' on path update
230,"
d57f830 [changed] Public interface for Location objects
6723dc5 [added] ability to set params/query in Redirect
60f9eb4 [fixed] encoded ampersands in query params
668773c [fixed] transitioning to paths with .
","d57f830 [changed] Public interface for Location objects
6723dc5 [added] ability to set params/query in Redirect
60f9eb4 [fixed] encoded ampersands in query params
668773c [fixed] transitioning to paths with ."
231,"
76fe696 [fixed] trailing comma
",76fe696 [fixed] trailing comma
232,"ActiveState mixin isActive
isActive is now an instance method.
``` js
// 0.7.x
var SomethingActive = React.createClass({
  mixins: [ActiveState],
render: function () {
    var isActive = SomethingActive.isActive(...);
  }
});
// 0.9.x
var SomethingActive = React.createClass({
  mixins: [ActiveState],
render: function () {
    var isActive = this.isActive(...);
  }
});
```
<Routes onActiveStateChange/> -> <Routes onChange />
``` js
// 0.7.x

function fn(nextState) {}
// 0.9.x

function fn() {
  // no arguments
  // this is the routes instance
  // here are some useful methods to get at the data you probably need
  this.getCurrentPath();
  this.getActiveRoutes();
  this.getActiveParams();
  this.getActiveQuery();
}
```
. in params support
. used to be a delimiter like /, but now its a valid character in
your params.
transition.retry()
transition.retry() used to use transitionTo, creating a new history
entry, it now uses replaceWith.
``` js
// 0.7.x
React.createClass({
  login: function () {
    // ...
    transition.retry();
  }
});
// 0.9.x
React.createClass({
  mixins: [Navigation],
  login: function () {
    // ...
    this.transitionTo(transition.path);
  }
});
```
Returning promises from transition hooks
Transition hooks are now sync, unless you opt-in to async with
transition.wait(promise).
``` js
// 0.7.x
React.createClass({
  statics: {
    willTransitionTo: function (transition) {
      return somePromise();
    }
  }
});
// 0.9.x
React.createClass({
  statics: {
    willTransitionTo: function (transition) {
      transition.wait(somePromise());
    }
  }
});
```
preserveScrollPosition -> scrollBehavior
preserveScrollPosition was totally broken and should have been named
perverseScrollPosition.
There are now three scroll behaviors you can use:
- 'browser'
- 'scrollToTop'
- 'none'
browser is the default, and imitates what browsers do in a typical
page reload scenario (preserves scroll positions when using the back
button, scrolls up when you come to a new page, etc.) Also, you can no
longer specify scroll behavior per <Route/> anymore, only <Routes/>
<Routes scrollBehavior=""scrollToTop""/>
RouteStore
This was not a public module, but we know some people were using it.
It's gone now. We have made getting at the current routes incredibly
convenient now with additions to the ActiveState mixin.
Router.transitionTo, replaceWith, goBack
These methods have been moved to mixins.
``` js
var Router = require('react-router');
// 0.7.x
React.createClass({
  whenever: function () {
    Router.transitionTo('something');
    Router.replaceWith('something');
    Router.goBack();
  }
});
// 0.9.x
var Navigation = Router.Navigation;
React.createClass({
  mixins: [Navigation],
  whenever: function () {
    this.transitionTo('something');
    this.replaceWith('something');
    this.goBack();
  }
});
```
<Routes onTransitionError onAbortedTransition/>
These were removed, there is no upgrade path in 0.9.0 but we will have
something soon. These weren't intended to be used.
ActiveState lifecycle method updateActiveState removed
We didn't actually need this. Just use this.isActive(to, params,
query).
AsyncState mixin removed
There is no upgrade path. Just use comoponentDidMount to request
state. This was some groundwork for server-side rendering but we are
going a different direction now (using props passed in to route
handlers) so we've removed it.
Changes

5aae2a8 [added] onChange event to Routes
ba65269 [removed] AsyncState
4d8c7a1 [removed] <Routes onTransitionError>
4d8c7a1 [removed] <Routes onAbortedTransition>
ed0cf62 [added] Navigation mixin for components that need to modify the URL
ed0cf62 [added] CurrentPath mixin for components that need to know the current URL path
ed0cf62 [added] getActiveRoutes, getActiveParams, and getActiveQuery methods to ActiveState mixin
ed0cf62 [removed] Awkward updateActiveState callback from ActiveState mixin
ed0cf62 [removed] Router.PathState (use Router.CurrentPath instead)
ed0cf62 [removed] Router.Transitions (use Router.Navigation instead)
ed0cf62 [removed] Router.RouteLookup (because it was useless)
ed0cf62 [added] <Routes scrollBehavior=""browser""> alias of ""imitateBrowser""
ed0cf62 [changed] <Routes fixedPath> => <Routes initialPath> will be useful for SSR
","ActiveState mixin isActive
isActive is now an instance method.
module
 -> 
``` js
// 0.7.x
function fn(nextState) {}
// 0.9.x
function fn() {
  // no arguments
  // this is the routes instance
  // here are some useful methods to get at the data you probably need
  this.getCurrentPath();
  this.getActiveRoutes();
  this.getActiveParams();
  this.getActiveQuery();
}
module js
// 0.7.x
React.createClass({
  login: function () {
    // ...
    transition.retry();
  }
});
// 0.9.x
React.createClass({
  mixins: [Navigation],
  login: function () {
    // ...
    this.transitionTo(transition.path);
  }
});
module js
// 0.7.x
React.createClass({
  statics: {
    willTransitionTo: function (transition) {
      return somePromise();
    }
  }
});
// 0.9.x
React.createClass({
  statics: {
    willTransitionTo: function (transition) {
      transition.wait(somePromise());
    }
  }
});
module js
var Router = require('react-router');
// 0.7.x
React.createClass({
  whenever: function () {
    Router.transitionTo('something');
    Router.replaceWith('something');
    Router.goBack();
  }
});
// 0.9.x
var Navigation = Router.Navigation;
React.createClass({
  mixins: [Navigation],
  whenever: function () {
    this.transitionTo('something');
    this.replaceWith('something');
    this.goBack();
  }
});
```

These were removed, there is no upgrade path in 0.9.0 but we will have
something soon. These weren't intended to be used.
ActiveState lifecycle method updateActiveState removed
We didn't actually need this. Just use this.isActive(to, params,
query).
AsyncState mixin removed
There is no upgrade path. Just use comoponentDidMount to request
state. This was some groundwork for server-side rendering but we are
going a different direction now (using props passed in to route
handlers) so we've removed it.
Changes
5aae2a8 [added] onChange event to Routes
ba65269 [removed] AsyncState
4d8c7a1 [removed] 
4d8c7a1 [removed] 
ed0cf62 [added] Navigation mixin for components that need to modify the URL
ed0cf62 [added] CurrentPath mixin for components that need to know the current URL path
ed0cf62 [added] getActiveRoutes, getActiveParams, and getActiveQuery methods to ActiveState mixin
ed0cf62 [removed] Awkward updateActiveState callback from ActiveState mixin
ed0cf62 [removed] Router.PathState (use Router.CurrentPath instead)
ed0cf62 [removed] Router.Transitions (use Router.Navigation instead)
ed0cf62 [removed] Router.RouteLookup (because it was useless)
ed0cf62 [added]  alias of ""imitateBrowser""
ed0cf62 [changed]  =>  will be useful for SSR"
233,"Please don't upgrade to 0.8.0, just skip to 0.9.x.
0.8.0 had some transient mixins we didn't intend to document, but had
some miscommunication :( If you were one of three people who used some
of these mixins and need help upgrading from 0.8.0 -> 0.9.x find us on
freenode in #rackt or open a ticket. Thanks!
Changes

d2aa7cb [added] <Routes location=""none"">
637c0ac [added] <Routes fixedPath>
f2bf4bd [removed] RouteStore
f2bf4bd [added] Router.PathState for keeping track of the current URL path
f2bf4bd [added] Router.RouteLookup for looking up routes
f2bf4bd [added] Router.Transitions for transitioning to other routes
f2bf4bd [added] Pluggable scroll behaviors
f2bf4bd [changed] <Routes preserveScrollPosition> => <Routes scrollBehavior>
f2bf4bd [removed] <Route preserveScrollPosition>
f2bf4bd [removed] Router.transitionTo, Router.replaceWith, Router.goBack
97dbf2d [added] transition.wait(promise)
3787179 [changed] Transition retry now uses replaceWith.
e0b708f [added] Ability to transitionTo absolute URLs
c1493b5 [changed] #259 support dots in named params
a4ce7c8 [changed] isActive is an instance method
a4ce7c8 [removed] <Routes onActiveStateChange>
","Please don't upgrade to 0.8.0, just skip to 0.9.x.
0.8.0 had some transient mixins we didn't intend to document, but had
some miscommunication :( If you were one of three people who used some
of these mixins and need help upgrading from 0.8.0 -> 0.9.x find us on
freenode in #rackt or open a ticket. Thanks!
Changes
d2aa7cb [added] 
637c0ac [added] 
f2bf4bd [removed] RouteStore
f2bf4bd [added] Router.PathState for keeping track of the current URL path
f2bf4bd [added] Router.RouteLookup for looking up routes
f2bf4bd [added] Router.Transitions for transitioning to other routes
f2bf4bd [added] Pluggable scroll behaviors
f2bf4bd [changed]  => 
f2bf4bd [removed] 
f2bf4bd [removed] Router.transitionTo, Router.replaceWith, Router.goBack
97dbf2d [added] transition.wait(promise)
3787179 [changed] Transition retry now uses replaceWith.
e0b708f [added] Ability to transitionTo absolute URLs
c1493b5 [changed] #259 support dots in named params
a4ce7c8 [changed] isActive is an instance method
a4ce7c8 [removed] "
234,"The package root modules were removed. Please import modules from the
Router default export.
``` js
// 0.6.x
var Link = require('react-router/Link');
// 0.7.x
var Router = require('react-router');
var Link = Router.Link;
```
Changes

3796371 [changed] Use Browserify to run specs
0e649be [changed] Use Browserify to build examples
bb7b666 [removed] .js files from repo root
96122dd [fixed] undefined Buffer in query strings
","The package root modules were removed. Please import modules from the
Router default export.
module
Changes
3796371 [changed] Use Browserify to run specs
0e649be [changed] Use Browserify to build examples
bb7b666 [removed] .js files from repo root
96122dd [fixed] undefined Buffer in query strings"
235,"
7536d96 [fixed] warning on links w/o params
",7536d96 [fixed] warning on links w/o params
236,"Path Matching
Paths that start with / are absolute and work exactly as they used to.
Paths that don't start with / are now relative, meaning they extend
their parent route.
Simply add / in front of all your paths to keep things working.
``` xml
 0.5.x 



 0.6.x 



```
Though, you may want to embrace this new feature:
``` xml
 0.5.x 




 0.6.x 




```
Also . is no longer matched in dynamic segments.
``` xml
 0.5.x 

 0.6.x 


  or for a looser match to allow for multiple `.` note that the data
  will be available on `this.props.params.splat` instead of
  `this.props.params.filename`


```
Link params
Links should now pass their params in the params property, though the
old behavior will still work, you should update your code soon because
it will be removed by v1.0
``` js
// 0.5.x

// 0.6.x

```
Dynamic Segments, keys, and lifecycle methods
If you have dynamic segments and are depending on getInitialState,
componentWillMount, or componentDidMount to fire between transitions
to the same route--like users/123 and users/456--then you have two
options:
- add addHandlerKey={true} to your route and keep the previous
  behavior (but lose out on performance), or
- implement componentWillReceiveProps.
``` js
// 0.5.x

// 0.6.x

// 0.5.x
var User = React.createClass({
  getInitialState: function () {
    return {
      user: getUser(this.props.params.userId);
    }
  }
});
// 0.6.x
var User = React.createClass({
  getInitialState: function () {
    return this.getState();
  },
componentWillReceiveProps: function (newProps) {
    this.setState(this.getState(newProps));
  },
getState: function (props) {
    props = props || this.props;
    return {
      user: getUser(props.params.userId)
    };
  }
});
```
Changes

2a75f3e [added] query argument to willTransitionTo
b7e21bb [fixed] Window scrolling
5864531 [changed] Default <Redirect from> to *
1064881 [changed] paths to inherit parents
79caf99 [added] <DefaultRoute name>
25adcab [fixed] Using HashLocation without a preceeding /
a63c940 [added] <NotFoundRoute>
d5bd656 [changed] path matching algorithm
6526e70 [removed] location=""disabled""
8d2f3ed [changed] <Link/>s to take params property
2a85b74 [changed] handler keys to be optional
","Path Matching
Paths that start with / are absolute and work exactly as they used to.
Paths that don't start with / are now relative, meaning they extend
their parent route.
Simply add / in front of all your paths to keep things working.
``` xml
 0.5.x 
0.6.x 
module xml
 0.5.x 
0.6.x 
module xml
 0.5.x 
0.6.x 
or for a looser match to allow for multiple module note that the data
  will be available on module instead of
  module
module js
// 0.5.x
// 0.6.x
module js
// 0.5.x
// 0.6.x
// 0.5.x
var User = React.createClass({
  getInitialState: function () {
    return {
      user: getUser(this.props.params.userId);
    }
  }
});
// 0.6.x
var User = React.createClass({
  getInitialState: function () {
    return this.getState();
  },
componentWillReceiveProps: function (newProps) {
    this.setState(this.getState(newProps));
  },
getState: function (props) {
    props = props || this.props;
    return {
      user: getUser(props.params.userId)
    };
  }
});
```
Changes
2a75f3e [added] query argument to willTransitionTo
b7e21bb [fixed] Window scrolling
5864531 [changed] Default  to *
1064881 [changed] paths to inherit parents
79caf99 [added] 
25adcab [fixed] Using HashLocation without a preceeding /
a63c940 [added] 
d5bd656 [changed] path matching algorithm
6526e70 [removed] location=""disabled""
8d2f3ed [changed] s to take params property
2a85b74 [changed] handler keys to be optional"
237,"
273625a [fixed] Active state on <Link>s with key prop
283d3f6 [added] RouteStore#registerChildren
a030648 [changed] Relaxed MemoryStore invariant
e028768 [added] <DefaultRoute> component
6878120 [added] onAbortedTransition, onActiveStateChange, onTransitionError Routes props
58073ca [changed] Transition#cancelReason => abortReason
6d1ae95 [fixed] sibling array route configs
0e7a182 [added] pluggable history implementations closes #166
ca96f86 [fixed] typo in Link
f3dc513 [added] onClick handler to <Link />
b9f92f9 [changed] updated rf-changelog
","273625a [fixed] Active state on s with key prop
283d3f6 [added] RouteStore#registerChildren
a030648 [changed] Relaxed MemoryStore invariant
e028768 [added]  component
6878120 [added] onAbortedTransition, onActiveStateChange, onTransitionError Routes props
58073ca [changed] Transition#cancelReason => abortReason
6d1ae95 [fixed] sibling array route configs
0e7a182 [added] pluggable history implementations closes #166
ca96f86 [fixed] typo in Link
f3dc513 [added] onClick handler to 
b9f92f9 [changed] updated rf-changelog"
238,"
21f4f57 [added] preserveScrollPosition Route/Routes props
f3b4de8 [added] support for extra props in Links, fixes #170
829a9ec [added] <Redirect/> component
0a49665 [added] Router.makeHref
2100b8c [changed] handlers receive route name
154afba [changed] location of public modules
","21f4f57 [added] preserveScrollPosition Route/Routes props
f3b4de8 [added] support for extra props in Links, fixes #170
829a9ec [added]  component
0a49665 [added] Router.makeHref
2100b8c [changed] handlers receive route name
154afba [changed] location of public modules"
239,"
08f5a69 [fixed] location=""history"" fallback
87b1c2a [fixed] Navigation to root URL can fail
760f021 [fixed] infinite loop in RouteStore.unregisterRoute
5fea685 [added] Router.AsyncState mixin
395a590 [changed] fallback to window.location for history
2a3582e [changed] make URLStore.push idempotent
4c4f87b [fixed] alt click on Link should count as modified
97c02f1 [fixed] middle click on <Link/>
","08f5a69 [fixed] location=""history"" fallback
87b1c2a [fixed] Navigation to root URL can fail
760f021 [fixed] infinite loop in RouteStore.unregisterRoute
5fea685 [added] Router.AsyncState mixin
395a590 [changed] fallback to window.location for history
2a3582e [changed] make URLStore.push idempotent
4c4f87b [fixed] alt click on Link should count as modified
97c02f1 [fixed] middle click on "
240,"We brought back <Routes/>.
``` js
// 0.4.x
var routes = (
  


);
// 0.5.x
var routes = (
  




);
```
Changes

5af49d4 [changed] Split <Routes> component from <Route>
","We brought back .
``` js
// 0.4.x
var routes = (
);
// 0.5.x
var routes = (
);
```
Changes
5af49d4 [changed] Split  component from "
241,"
2fc9976 [fixed] eslint cleanup; trailing comma fix for IE
b8018b1 [added] animation example
","2fc9976 [fixed] eslint cleanup; trailing comma fix for IE
b8018b1 [added] animation example"
242,"
8152d67 [changed] repo location to rackt/react-router
0ac4dea [removed] Dependency on react/lib/emptyFunction
","8152d67 [changed] repo location to rackt/react-router
0ac4dea [removed] Dependency on react/lib/emptyFunction"
243,"NPM users should point their apps to react-router instead of react-nested-router. Make sure to npm prune!
Changes

0be4bf7 [changed] npm registry name to react-router :D
","NPM users should point their apps to react-router instead of react-nested-router. Make sure to npm prune!
Changes
0be4bf7 [changed] npm registry name to react-router :D"
244,"
0a7298c [removed] browserify.transforms from package.json
ebf54ab [removed] Dependency on react/lib/merge
","0a7298c [removed] browserify.transforms from package.json
ebf54ab [removed] Dependency on react/lib/merge"
245,"
2598837 [fixed] bower build
8c428ff [fixed] dist min build
","2598837 [fixed] bower build
8c428ff [fixed] dist min build"
246,"
92b9077 [changed] file name of dist builds
",92b9077 [changed] file name of dist builds
247,"
3a4732e [changed] global export to ReactRouter
",3a4732e [changed] global export to ReactRouter
248,"
baf2257 [fixed] dist files
",baf2257 [fixed] dist files
249,"
React 0.11.x is now required.
this.props.activeRoute became this.props.activeRouteHandler()

``` js
// 0.2.x
var App = React.createClass({
  render: function () {
    return (
      
        {this.props.activeRoute}
      
    );
  }
});
// 0.3.x
var App = React.createClass({
  render: function () {
    // now you can send extra props to the active route handler
    // and use the new jsx syntax
    // 
    return (
      
        {this.props.activeRouteHandler()}
      
    );
  }
});
```
Changes

e827870 [added] bower support
58e7b98 [changed] activeRoute -> activeRouteHandler
0177cdd [fixed] Pass the correct component instance to willTransitionFrom hooks
3b590e0 [changed] Upgrade to React 0.11.0
51e1be2 [fixed] Use peerDeps
a8df2f0 [added] Browser builds for version 0.2.1
bb066b8 [added] Browser build script
baf79b6 [fixed] Avoid some warnings
8d30552 [changed] README to make use of activeRoute clearer in JSX.
991dede [changed] activeRoute is a function that returns null when no child routes are active.
73570ed [changed] activeRoute can render with props and children.
8562482 [added] ActiveState mixin
616f8bf [changed] Preserve forward slashes in URL params
6c74c69 [changed] Combine URL helpers into URL module
","React 0.11.x is now required.
this.props.activeRoute became this.props.activeRouteHandler()
``` js
// 0.2.x
var App = React.createClass({
  render: function () {
    return (
module
}
});
// 0.3.x
var App = React.createClass({
  render: function () {
    // now you can send extra props to the active route handler
    // and use the new jsx syntax
    // 
    return (
module
}
});
```
Changes
e827870 [added] bower support
58e7b98 [changed] activeRoute -> activeRouteHandler
0177cdd [fixed] Pass the correct component instance to willTransitionFrom hooks
3b590e0 [changed] Upgrade to React 0.11.0
51e1be2 [fixed] Use peerDeps
a8df2f0 [added] Browser builds for version 0.2.1
bb066b8 [added] Browser build script
baf79b6 [fixed] Avoid some warnings
8d30552 [changed] README to make use of activeRoute clearer in JSX.
991dede [changed] activeRoute is a function that returns null when no child routes are active.
73570ed [changed] activeRoute can render with props and children.
8562482 [added] ActiveState mixin
616f8bf [changed] Preserve forward slashes in URL params
6c74c69 [changed] Combine URL helpers into URL module"
250,"
0f86654 [fixed] checks for class instead of components
a3d6e2a [changed] Render empty div before transition hooks
f474ab1 [changed] '.' is no longer a path delimeter
f3dcdd7 [fixed] injectParams invariant should not throw on values that coerce to false.
468bf3b [changed] Deprecate Router interface
31d1a6e [added] renderComponentToString()
","0f86654 [fixed] checks for class instead of components
a3d6e2a [changed] Render empty div before transition hooks
f474ab1 [changed] '.' is no longer a path delimeter
f3dcdd7 [fixed] injectParams invariant should not throw on values that coerce to false.
468bf3b [changed] Deprecate Router interface
31d1a6e [added] renderComponentToString()"
251,"The Router function was removed.
``` js
// 0.1.x
var router = Router(routes);
router.renderComponent(element);
// 0.2.x
React.renderComponent(routes, element);
```
Changes

468bf3b [changed] Deprecate Router interface
31d1a6e [added] renderComponentToString()
","The Router function was removed.
module
Changes
468bf3b [changed] Deprecate Router interface
31d1a6e [added] renderComponentToString()"
