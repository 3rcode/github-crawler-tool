Index,Release Note
1,"fix

fix(cli): run terraform init in serial so no text file is busy in the cache link
fix(cli): buffer the output from the Terraform CLI and only forward output that has been terminated by a newline link
fix(cli): fix no-color flag passing link
fix(hcl2cdk): Support conversion of functions that have variate arguments at the end link

chore

chore: Mock synth to make parallelism test fail less link
chore: Refactor hcl2cdk to read nicer link
"
2,"Breaking changes
Update to .NET 6.0
We updated our C# template to .NET 6.0 as JSII updated recently and dropped support for module:

The runtime library for .NET & generated .NET bindings will no longer support netcoreapp3.1 after this release. Users are advised to upgrade their apps to use net6.0 or net7.0 instead.

from link
Changes to Terraform function bindings
Terraform functions are now generated based on the JSON schema returned by the new module command which is going to be added to the Terraform CLI in version 1.4 (link, already available in link).
The following new functions were introduced:

link - checks the suffix of a string
link - checks the prefix of a string
link - compares two timestamps

The following functions changed:

module is now module to match the format of all other functions
module does not exist anymore, use module instead
module does not exist anymore, use module instead

As part of this change, we use the same parameter names as Terraform which might require changing keyword arguments in Python.
```python
Fn.join("","", [src.stringResource.result, src.stringResource.result])
Fn.join(separator="","", value=[src.stringResource.result, src.stringResource.result])"
3,"fix

chore: update JSII to 1.75.0 link
fix(lib): zipmap arg validators  link
"
4,"fix

fix(cli): Remove @types/node-fetch from dependencies as those take precedence over direct devDependencies on @node/types link
"
5,"chore

chore: Don't run module when not required link
chore: additionally lock providers for linux only link
chore: refactor 'needs upgrade' link
chore: Update remaining Typescript documentation snippets link
chore: translate more csharp docs link
chore: translate rest of the docs to C# link
chore: run dotnet format link
chore: Update contributing link
chore: truly autoclose older GHA updater PRs link

fix

fix: rename CloudBackendProps to CloudBackendConfig in templates link
fix: switch back to offical image to fix issue with stale signature files link
fix: use correctly named syntax in comments link
fix(lib): Update special defaults link
fix(docs): camel -> snake case in resource escape hatches link
fix(docs): Go post mortem review feedback link
fix(docs): fix typo in CSharp example link
fix(docs): fix links to examples page link
fix(docs): add missing java remote backend example link
fix(docs): properties in create module example use snake case link

feat

feat: add cache flag for prettier to speed up subsequent runs link
feat: Add a wrap in stack optional param to cdktf convert link
feat(docs): Convert some code snippets in docs to Golang link
feat(docs): Translate Aspect example to Go link
feat(docs): Translate more examples to Go link
feat(docs): Translate more examples to Go link
feat(docs): Translate more examples to Go link
feat: also go through files not yet added to git link
"
6,"feat

feat: create a plan file for non-TFC runs link

fix

fix: cdktf login issues link
fix(lib): don't use Fn.set on tagged cloud backend link
fix(provider-generator): use class based map abstractions link

chore

chore: actually autoclose older GHA updater PRs link
chore: fill out homebrew pr body link
chore: support soft sentinel overrides link
"
7,"fix

fix(provider-generator): fix resources named 'provider' breaking the code generation link

chore

chore: autoclose older GHA updater PRs link
"
8,"Breaking changes
Renaming of module and module to module
We had several exports where the configuration passed to constructs or functions was using a class with a different suffix then module. If you are using a language like C#, Java, Python, or Go you might have needed to specify these classes in your CDKTF application. To simplify the usage we changed every suffix to be module, so if you currently use one of the others please rename them to use the module suffix. No options were changed in the process, only the names were aligned.
This would be one example of the change to be made (this is in Java):
```diff
import software.constructs.Construct;
import com.hashicorp.cdktf.App;
import com.hashicorp.cdktf.TerraformStack;
import com.hashicorp.cdktf.CloudBackend;
-import com.hashicorp.cdktf.CloudBackendProps;
+import com.hashicorp.cdktf.CloudBackendConfig;
import com.hashicorp.cdktf.NamedCloudWorkspace;
module

new CloudBackend(this, CloudBackendProps.builder()
new CloudBackend(this, CloudBackendConfig.builder()
                    .organization(""hashicorp"")
                    .workspaces(new NamedCloudWorkspace(""demo""))
                    .build()
            );
```

Notice: CDKTF 0.15 bumps minimum Terraform version to 1.2
CDKTF is bumping the minimum supported version of Terraform from 1.0 to 1.2 starting from CDKTF version 0.15. This change is necessary as CDKTF 0.15 uses the Terraform CLI for planning and applying changes for Terraform Cloud and Terraform Enterprise instead of link used in version 0.14.
link between all v1.x releases, so there shouldn't be any issues with this change. The only changes between these versions are bug fixes, and new feature additions.
Please open an issue if you encounter any issues or bugs with this change.
Deprecation: We deprecate the feature flags that go into the module field of the module
CDKTF used to use feature flags to enable potentially breaking behaviors in a release. These are no longer needed since most of the changes we introduce from here can not be hidden behind feature flags. When the feature flags are removed, the behavior will be the same as this configuration:
module
feat

feat(cli): Add cdktf provider list command link
feat(cli): support -var and -var-file terraform flags link
feat(cli): add -no-color tag link
feat: enable non-escaping mode for tokens link
feat: use our own pre-built package for node-pty to have builds for Nodejs 19 available link
feat(docs): Document node-gyp errors if no precompiled binaries are available and the target system misses a native toolchain link

fix

fix(cli): don't enquote args as they will be escaped and end up in the calls to Terraform link
fix: detect destroys on windows / TF version link
fix(tests): change Options -> Config as per #2471 link
fix(cli): windows fixes link
fix: limit concurrency for integration tests to 10 for each windows and linux link
fix(tests): Make version more stable link
fix: use older SHA from jsii superchain docker image link
fix: fix go build in pipeline link
fix(cli): remove newlines from tokens during terraform login link
fix(cli): abort apply if not all variables are known link
fix: Expose provider matcher to jest link
fix: Adds module to keys to preserve case link
fix: Allow git access for sentry cli in docker link
fix: add path: dist for npm and pypi link

chore

chore: create upgrade guide link
chore: increase parallel limit (10->30) to speed up integration tests link
chore: disable cron for project board link
chore(docs): fix some docs link
chore: fix typo in function name link
chore: add a notice for minimum supported version to changelog link
chore: fix broken GHA version updater link
chore: update CODEOWNERS link
chore(docs): running snippet update tool revealed an existing snippet that is not up-to-date link
chore: update JSII link
chore: Support custom endpoints link
chore: create TFC/TFE workspace using the Terraform CLI link
chore: switch to SHA-based workflow pins link
chore: Update all documentation examples for Typescript link
chore: remove long-running hooks link
chore: translate documentation to csharp link
chore: add a refactoring guide link
chore: fix homebrew deploy step link
chore: add TFE information to TFC docs link
chore: deprecate feature flags link
chore: document variable flags link

refactor

refactor: rename all Props and Options classes and interfaces to *Config link
"
9,"fix

fix: add completed tfc pending states link
fix: skip confirming on auto-apply enabled tfc workspaces link
fix(hcl2cdk): snapshot generated code instead of snapshotting that the function returns a promise link
fix: add module to json schema link

chore

chore: add provider-integration tests conditionally for PRs and to releases link
chore: increase operations per run of stale workflow link
chore: update github workflow actions link
chore(docs): Add Example for Complex input variables link
chore: add Terraform module to Docker container link

feat

feat(cli): prompt added in init - asks to use TFC when credentials are present link
feat(docs): document Token.nullValue() link
"
10,"Breaking changes
We split up our module package into module for the UI parts, utilizing module for the functionality. If you previously relied on the internal module entrypoint you should switch to module. This was never an official API, but we want to mention it here in case it breaks for anyone.
chore

chore: skip hcl2cdk tests for now link
chore: Update Digital Team Files link
chore: move from pr target to pr link
chore: fix finalizing the Sentry release link
chore: update workflows for new workflow endpoint link
chore: disable python edge test link
chore: only trigger unit tests once link
chore: use secret link
chore: document go version link
chore: fix stale workflow link
chore: add build step to ci link
chore: add workflows to auto-close and lock stale issues and PRs link
chore: add expression paranthesis link
chore: dedupe concurrency prefix link
chore: npm-check-updates && yarn upgrade link
chore: improve release pipelines link
chore: add GH Action that labels PRs link
chore(docs): Update remote-backends.mdx link
chore: ensure we run all tests on dependency updates link
chore: re-add run url link
chore: limit concurrency on releases link
chore: fix sentry release script link
chore: fix typo link
chore: offboard checks from PRs to main link
chore(docs): prepare for code samples in multiple languages link
chore: run CI more selectively link
chore: make feature flag tests more resilient to provider updates link
chore: additional potential speedup experiments for hcl2cdk unit tests link
chore(tests): enable go provider add tests link
chore: run linting and prettier as part of CI link
chore(docs): translate hcl-interop examples to c# link
chore: add workflow to update our github actions link
chore(docs): translate functions examples to c# link
chore(docs): translate data-sources examples to c# link
chore(docs): translate aspects example to c# link
chore(docs): translate all examples to python link
chore(docs): Translate Documentation Snippets for Java link

feat

feat(examples): python upcloud server link

fix

fix: pin yargs types version link
fix: Transition to planned state after cost estimation and policy checks with TFC/TFE link
fix(cli): don't fail with UsageError when determining whether a provider is installed as a pre-built provider link
fix: scoped packages need a publish config to be published to npm link
fix: scoped packages need a publish config to be published to npm link
fix(docs): fix header indentation causing no page contents sidebar for this page link
fix(hcl2json): don't overwrite crypto if it's set already link
fix: Graceful failures when using module with non-admin tokens link
fix: Prevent any release jobs from triggering if no release is required link

refactor

refactor(cli): parse json according to schema link
refactor: extract asset and constructs example into separate files link
refactor(cli): move cli library into seperate package link
"
11,"A broken import that only appeared in the bundled module that we publish broke the module release. This patch release fixes this.
fix

fix(provider-generator): fix cross package import which breaks the cdktf-cli release bundle link

chore

chore: document authoring cdktf constructs link
"
12,"Breaking changes
Back in October, we link. These improvements required breaking changes for which we provided backward-compatible provider bindings in version 0.13. As announced, the 0.12 (non-namespaced) provider bindings will no longer work starting with CDKTF 0.14. Refer to the link to learn how to update your imports for these changes.
feat

feat(cli): add provider upgrade command link
feat(cli): Add option to select providers to add with init link
feat(cli): only re-generate provider bindings on get if necessary link
feat(lib): expose operators on their own API class link
feat(lib): Introduce module that allows to pass null to Terraform configurations in languages other than TypeScript link
feat(cli): Automatically Update Locked Providers link
feat(lib): Added testing matchers for Providers link
feat(lib): adds failed process output to test matcher APIs #1953 link

fix

fix(cli): do not check for version when DISABLE_VERSION_CHECK link
fix(docs): fix module code example link
fix(docs): fix links to pre-built provider repositories link
fix(docs): fix a couple of typos in stacks.mdx link
fix(examples): fix CI for Python examples link
fix: set global flag to be able to start search for code blocks at an index link

chore

chore(docs): Add CDK for Terraform to page titles link
chore: document Python hash error in local development link
chore: document JSII debug flags in contribution guide link
chore: update LICENSE link
chore(cli): Prevent minification when watching cdktf-cli link
chore(lib): Add deprecation notices to backends that were deprecated in Terraform v1.2.3 and removed in TF 1.3 link
chore: adding mgarrell777 to docs codeowners to be notified for docs changes link
chore: add ecs-microservices example link
chore: sync version and changelog from the 0.13.3 backported release link
chore: install pre-built provider with exact version link
chore: cache examples and terraform plugins link
"
13,"fix

fix: Redact authorization header when error logging from TFC/TFE link
"
14,"fix

fix(provider-generator): don't require arrays wrapping variable / output declarations link
fix(cli): Use 'id' as argument name for all templates link
fix(cli): use a custom user-agent when talking to TFC link
fix(cli): Ignore local obj/ dir in C# template link
fix(deps): Use apt instead of yum, since base image is debian based now link
fix: correctly denote all of our redirects as temporary because they might change link

chore

chore: Update Go to version 1.18 on windows workflows link
chore: Update Digital Team Files link
chore(cli): change url to pre-built providers to one we control link
chore(cli): Move things to src/ folder link
chore(deps): Update docker image to use new jsii/superchain tag link
chore(docs): rewrite internal redirects link

feat

feat: add CODEOWNERS file for automatic PR review assignment link
"
15,"feat

feat(cli): Add support for terraform's parallelism flag link
feat: add redirect link to pre-built providers json file link
feat(cli): link to troubleshooting page for error link

fix

fix(provider-generator): change Static resource class to StaticResource as their namespace 'static' is not valid in TypeScript re-exports link
fix(cli): dont wrap list terminal output link
fix(cli): handle missing package versions for non-npm packages link
fix(docs): Fix upgrade guide imports for Python link
fix(docs): update old config key link

chore

chore: Update link to blogpost link
"
16,"Breaking Changes
Abbreviated version below, for a guide see link.
0.13 includes performance improvements to generated providers. Instead of exporting a flat list of exports including all supported resources and data sources, we now export each construct and it's associated structures in their own namespace. Due to this, the way you import constructs from your CDKTF application will change. For more information regarding this release, and some of the reasonings behind the changes, please check out the link.
Typescript
```typescript
// Before version 0.13
import { Container, Image, DockerProvider } from ""@ckdtf/provider-docker"";
// Version 0.13
import { Image } from ""@cdktf/provider-docker/lib/image"";
import { DockerProvider } from ""@cdktf/provider-docker/lib/provider"";
import { Container } from ""@cdktf/provider-docker/lib/container"";
```
Python
```python
from cdktf_cdktf_provider_kubernetes.kubernetes import Namespace, Service, Deployment, KubernetesProvider"
17,"Breaking Changes
A very minor change in the UX of the module command now generates the provider bindings for all languages (except TypeScript) in parallel. This speeds up the process in general, but on devices with limited memory it could lead to Out of Memory errors. If this happens you can limit the parallelism by providing the parallelism flag: module.
fix

fix(provider-generator): Add special case in case resource is named 'object' link
fix(docs): Fix two small bugs in the code causing it to not compile link
fix(lib): Add missing config options for AzurermBackend link
fix(cli): Update require package in template link
fix: Change url of module in log link
fix(cli): support using remote execution in Terraform Cloud with up to 500 MB (instead of 10MB) link
fix(docs): remove empty code block link
fix: update constructs and go runtime versions link
fix(cli): add sentry DSN in build process link
fix(docs): fix wrong command mentioned in TFC docs link
fix: let create changelog script use commit hashes from PRs instead of finding merge commit messages that may not always exist link

feat

feat(cli): include language used in cdktf init telemetry event link
feat(cli): support generating provider bindings in parallel link

chore

chore(cli): Use the npm package's repository field for generating go package name link
chore: npm-check-updates && yarn upgrade link
chore: split up unit tests per package link
chore: Update diagram with new provider count link
chore: change YT link to cut version link
chore(cli): Don't trim output for unstructured logs link
chore: only run expensive tasks on source code changes link
chore: Support building with Go 1.19 link
chore: fix go azure example link
chore: fix the project board TS errors link
chore: npm-check-updates && yarn upgrade link
chore: npm-check-updates && yarn upgrade link
chore(examples): clean up examples link
chore(docs): Check whether links work :) link
chore: ensure we have license header link
chore: measure and print memory consumption of build and synth steps for examples in CI link
chore: start running tests against TF 1.2.8 and drop running against 1.0.7 link
"
18,"Breaking Changes
A very minor change in the interface names for provisioners occured link, renaming the following interfaces:

module to module
module to module
module to module
module to module
module to module

Another very minor change is that we now use the module by default when running cdktf init. This requires Terraform >=1.1, therefore an error is thrown on module if you want to use Terraform Cloud and are on an older version. Already existing projects are not affected and you can use module and configure the module if you need to use an older version.
feat

feat(cli): throw an error if a user tries to create a new project with TFC on an old TF version link
feat: install time tool in Docker container to be able to use it for memory consumption tracking in tests link
feat: add Go port of TypeScript Google CloudRun example link
feat(lib): add support for cloud backend link

fix

fix(provider-generator): use terraform get instead of init to download modules link
fix(lib): Add missing config options for S3Backend: skipRegionValidation, assumeRolePolicyArns, assumeRoleTags, and assumeRoleTransitiveTagKeys link
fix: support provisioners in JSII languages link
fix(hcl2json): add fs-extra to dependencies link
fix(lib): Improve error message when provider constructs are missing link
fix(cli): Make provider add command case insensitive for provider names link
fix(cli): run a speculative plan on diff link

chore

chore(cli): remove red and magenta from colors for stack names link
chore: add link to hybrid module talk link
chore: make Terraform 1.2.8 available in Docker image link
chore: document updating the API documentation link
chore(docs): Remove positional language + fix style nits link
chore(lib): deprecate Resource in favor of Construct link
chore: update links in our youtube playlist examples link
chore: npm-check-updates && yarn upgrade link
chore: translate parts of the documentation link

refactor

refactor: port example script to JS link
"
19,"fix

fix(cli): add major versions greater 1 to package name when installing pre-built providers for go link
fix(cli): Wait for other stacks to complete if one of them failed link
fix(cli): fix version detection for Java being a bit too optimistic about the package name link
fix(cli): Improve wording around starting from an existing Terraform project link
fix(tests): force local as Go now has pre-built providers link
fix(tests): as predicted, the test needs to be skipped for a bit of time link
fix(docs): fix aspects example not being valid TypeScript link
fix(docs): fix links by removing all links to the providers-and-resources page that does not exist anymore link
fix: don't lock state in tests link
fix: don't overwrite all module link

chore

chore: add vercel config for cdk.tf redirects page link
chore: add notes for how to clean the local dotnet cache link
chore: add issue template for filing bugs with a pre-built providers label link
chore: npm-check-updates && yarn upgrade link
chore: npm-check-updates && yarn upgrade link
"
20,"Breaking Changes
module exits with 0 exit code when no provider / module specifications are found in the module
Previously we would throw an error and exit with 1 if there were no provider or module specifications in the module file. This can be inconvenient if module is part of a workflow.
module is split into module and module
The Terraform module function can merge both lists and maps, but this can cause link when using the result in a typed language. Therefore we split it into module and module, this means you need to change your cdktf programs code.
Simplified interfaces of recursive attributes
The generated provider bindings are based on the Terraform schema which does not support recursion and hence uses a large, explicit structure instead. Previously this resulted in long names such as e.g. module. In 0.12 we implemented a first rough detection for this underlying recursion which drastically reduced the amount of generated interfaces as they now are converted to recursive data structures themselves.
If you are currently using those types e.g. in a language like Java, you will need to change them to the new shorter names.
feat

feat(lib): Introduce Iterator and module to implement apply time iteration link
feat(lib): Introduce TerraformDynamicBlock to enable iterator usage on blocks link
feat(cli): support refresh only option for diff and deploy link
feat(docs): Add iterator docs page link
feat(docs): document FORCE_COLOR env var that allows disabling colored output link
feat(cli): plug provider add command in help printed after initializing a new cdktf project link
feat(lib): exposed testing matchers for other languages properly link

fix

fix: Allow ""all"" as ignoreChanges lifecycle value link
fix: Fixed naming collision between resources of different providers link
fix: Small fix to the CONTRIBUTING.md link
fix(cli): increase default max memory for node process when running app command for synth link
fix(provider-generator): Meta arguments available for generated modules link
fix(provider-generator): replace dashes with underscores in module names for Go when generating bindings for Terraform modules link
fix(hcl2json): bundle wasm_exec used for building Go instead of looking for it at runtime link
fix(hcl2cdk): use the same attribute renaming function as in the provider generation link
fix(hcl2cdk): maps should not be wrapped in arrays link

chore

chore: document CI flag link
chore: modernize example output link
chore: pin provider version link
chore: update prerequisites link
chore(tests): Re-enable Windows Provider Add C# Test link
chore: add tfe test as pre-step to releasing link
chore: split provider tests into one test per provider link
chore: reuse integration test definition for releases link
chore: fix broken link in readme link
chore: npm-check-updates && yarn upgrade link
"
21,"feat

feat(cli): support custom Terraform Enterprise instances link
feat(hcl2json): expose hcl expression parser link

chore

chore: synthesize all boolean as iresolvable tests link
chore(docs): Fix Environment Variables and Best Practices link
"
22,"fix

fix(cli): Fix package version check on Windows link
fix(docs): fix code blocks in ""create and deploy"" documentation link
fix(release): update changelog link

chore

chore(cli): filter usage errors from error reporting link
chore: document debug command link
chore: add best practice page link
"
23,"Breaking Changes
Abbreviated version below, for a guide see link
module prefixed environment variables can no longer be accessed at synth time
These environment variables will now be filtered out in the synth phase since they are only intended to be used during diff (plan) and deploy (apply) phases to supply values for link. This inhibits accidentally inlining those values into the generated module config.
Environment variable and CLI option changes

module is replaced by setting module, setting the module to debug will now also behave like module and include logs from the provider generation
module is replaced by setting module. If left empty no logs will be written.
module was removed, instead use the environment variable module
module, module need to be set to module or module, before anything worked.

Stack ids can no longer contain whitespaces
A module may no longer contain whitespace characters, since we rely on paths being whitespace free. If you have a stack with an id containing a whitespace, please replace it with a hyphen. If the stack was already deployed with the default module you might need to rename your statefile to match the new stack id.
Computed Map References are referenced through getter
For computed maps, the reference is now through a getter.
To access module, instead of module you can now use module.
Use ComplexLists and ComplexMaps for complex assignable properties link
Assignable properties of the form module or module no longer have setters; they instead have module methods. The getter return type is also changed to be a derivative of either module or module.
fix

fix(docs): Make sure code example works link
fix(lib): Delay complex object fqn so that override id can still be used link
fix(provider-generator): strictly adhere to the provider schema link
fix: Avoid unstable fqn for TerraformElements link
fix(cli): Respect CDKTF_HOME environment variable for checkpoint telemetry link
fix(docs): remove outdated docs from the previous watch implementation link
fix(cli): throw an error if a stack contains a whitespace link

feat

feat(lib): add docstrings to gcs/http/local backend resources link
feat(lib): add a warning about id fields link
feat(docs): add guidance around secrets and warn that those values might be inlined in the generated Terraform config link
feat(lib): add docstrings to cos/etcd/etcdv3 backend resources link
feat(lib): add docstrings to artifactory/azurerm/consul backend resources link
feat(lib): add docstrings to S3 backend resource link
feat(release): support running releases on backport-release branches besides only on main link
feat(cli): add cdktf provider add command link
feat(provider-generator): Use module for any complex list link

test

test(lib): ensure list mapper does not fail when passed IResolvables link

chore

chore: group needs to be prefixed per type link
chore: limit CI concurrency to the latest pushed commits link
chore(cli): add sentry error reporting link
chore: document computed map reference documentation link
chore(release): Update changelog to contain backported release for 0.10.4 link
chore(docs): document how to debug cdktf programs link
"
24,"fix

fix(cli): Stop pinning jest in TS init template link
"
25,"feat

feat(provider-generator): emit a versions.json file to the output directory, containing the used provider versions link
feat(cli): debug command link

chore

chore(cli): add environment variable to disable version checks link
chore: drop Terraform v0.15.7 from Docker image and replace with v1.1.9 for running tests link
chore: add Terraform v1.1.9 to Docker image link
chore(docs): update env var usage link

fix

fix(lib): Add new optional AWS route attributes link
fix(cli): handle version check more defensively link
fix(cli): we should not send wait for approval if a stop has been issued link
fix(cli): Fix indentation of RemoteBackend in CSharp and Java template link
fix(cli): fix templates to properly indent cdktf.json and add RemoteBackend in TS template link
"
26,"fix

fix(tests): pin awscc version link
fix(cli): return non-zero exit code in case of error when using cdktf diff link
fix(cli): allow init command to run in a directory containing a README.md link
fix(provider-generator): Include ""arn"" when assignable link
fix(hcl2cdk): detect list extensions in strings and wrap them in an array link
fix(lib): override values containing intrinsic tokens caused an infinite loop link
fix(lib): contextualize error messages in terraform functions link
fix(cli): fix path for module directory link
fix(cli): improve cli error handling link

chore

chore: align versions to an unpublished version link
chore(docs): update convert docs link
chore(docs): update aspect docs link
chore: npm-check-updates && yarn upgrade link

test

test(hcl2cdk): add test case for property renaming link

feat

feat(cli): warn users about misaligned CLI and library versions link
feat(lib): improve error messages around misused list mutation link
"
27,"fix

fix(cli): fix convert single blocks as array bug link
fix(cli): Only print error that's thrown link

refactor

refactor(tests): move from table driven tests to functional way link
refactor(cli): remove xstate as state machine link

chore

chore(docs): update project maturity statement link
chore(docs): add sidebar link link
chore: add extra column for PRs outside our main repo link

feat

feat(cli): support HTTP_PROXY for Terraform Cloud link
"
28,"Breaking Changes
Remove module Option link
If you are using module to get the synthesized JSON configuration for your Stack, you will now need to run module instead. The module part is your output directory (set by module or via the module flag).
Model ComplexComputedLists as ComplexLists and ComputedObjects link
In an effort to streamline the interfaces of resources, computed attributes of the type list and set are now modeled as a separate module type instead of being a method that directly takes an index and returns an item. This change also did change the type of the index from module to module.
Typescript
```ts
// previously
const firstItemId = resource.listAttribute(""0"").id;
// new
const firstItemId = resource.listAttribute.get(0).id;
const firstItem = resource.listAttribute.get(0); // now possible
```
Python
```python
first_item_id = resource.list_attribute(""0"").id;"
29,"fix

fix(lib): check for null objects and don't try to reverse undefined or null link

chore

chore(cli): fix typo in test assertion link
"
30,"feat

feat(examples): Add Scaleway Golang example link

fix

fix(cli): convert failed with a single provider passed link
fix(tests): Windows needs special docker host override to work link
"
31,"fix

fix: cross-stack references in terraform cloud remote execution mode link

chore

chore: npm-check-updates && yarn upgrade link
chore: npm-check-updates && yarn upgrade link
"
32,"feat

feat(cli): show help when no command is passed link

fix

fix(tests): run package before running unit tests in release pipelines link
fix(hcl2cdk): handle no providers passed and add cdktf import for remote state data sources link
fix(cli): Fix template for Go not adding jsii import when using Terraform Cloud link
fix(lib): Add missing regex Function link
fix(cli): add better messaging on inint link
fix(docs): fix a typo in serverless-application-typescript.md link
fix(provider-generator): Replace jsii incompatible names link
fix(provider-generator): don't build generated edge provider output as part of building the provider-generator link
fix(tests): add module flag to jest invocations when in CI link
fix: stringValue rated valid strings as unescaped double quotes link
chore(deps): upgrade jsii (substantially improves cdktf get performance for Go) link
fix(cli): reflect correct node version requirement link

chore

chore(docs): we now support cross stack refs, the section is no longer needed link
chore(docs): remove old docs files link
chore(docs): Update main from stable-website link
chore(docs): remove old layouts folder link
chore(docs): Merge stable-website into main link
chore(docs): add 0.9 upgrade guide link

test

test(hcl2cdk): check if produced code can generate HCL link
"
33,"Breaking Changes
Standardize IResolvable Usage link
This is an effort to make sure attributes can be freely passed between resources for all different types.
There is a minor breaking change:

module on resources and data sources has gone from module to module. If code was previously passing an module, it will now need to use module

Map Tokens link
As part of an effort to use more native types, there are now tokens for maps of primitive values.
As a result, there is a minor breaking change:

Map attributes have gone from module to module when module is module.
The most common impact is maps created by using Terraform functions (module) will now need to be passed to module before assigning to a resource attribute.

Number[] Tokens link
As part of an effort to use more native types, there are now tokens for module.
This is mostly an internal change, but there is now module which can be used to convert other values into module.
As a result of some standardization, there is a minor breaking change:

Boolean[] attributes have gone from module to module.
This is done because neither module or module is representable by a token.
This should make it easier to pass around module between resources and fuctions.
For jsii languages (especially Java and C#), these types will end up as module.

feat

feat(cli): output command link
feat(lib): cross-stack references link
feat(lib): cross stack references other backends link
feat(lib): Allow relative assets link
feat(lib): Create assets for local modules link
feat(lib): number[] Tokens link
feat(lib): produce stable module output link
feat(lib): Initial improvements for set support link
feat(lib): Map Tokens link
feat(provider-generator): reference computed values nested in lists link
feat(tests): add test which confirms that modules now support sets link

fix

fix(cli): speed up shell autocompletions link
fix(cli): remove deprecated -state option link
fix(lib): resolve objects correctly in cross stack references link
fix(docs): fix typo link
fix: increase memory for module command link

chore

chore(examples): Added go/azurerm examples link
chore(lib): Standardize IResolvable usage link
chore(docs): document pinning state to stack link
chore(docs): link to AWS Constructs base class link
chore(docs): Final Docs Migration Cleanup link
chore(docs): Manual windows testing link
chore: migrate docs to mdx link
chore: store website nav files link
chore: update example for azure app service link
chore: add tooling for an automated issue dashboard link
chore: decrease update speed of the project board link
chore: npm-check-updates && yarn upgrade link
chore: npm-check-updates && yarn upgrade link
chore: npm-check-updates && yarn upgrade link
chore: remove patch file created through update automation link
"
34,"fix

fix(lib): don't treat strings as maps link
fix: update specified nodejs version to >=12.16 to reflect our actual requirements link

Other

chore: fix constructs error link
"
35,"fix

fix(provider-generator): rename String resource link

chore

chore(hcl2cdk): update readme link
chore(examples): Upgrade aws provider version for Go example link
chore: update maven config for publishing link
chore: update constructs to 10.0.25 link
"
36,"fix

fix(provider-generator): remove .html suffix for doc links link
fix: Update Remote State Outputs documentation link

feat

feat(lib): Add nullable field to terraform variables link

chore

chore: update constructs to 10.0.20 link
chore: store website nav files (main) link
chore: add make website command to preview docs website link
"
37,"fix

fix(provider-generator): rename module attributes as they conflict in CSharp (fixes Okta provider) link
fix(docs): fix order of changelog steps to make sure version is bumped after running script link

chore

chore: migrate docs to mdx link
chore: fix edge provider tests in pre-release pipeline link
"
38,"fix

fix(lib): make sure to resolve reference expression target link
fix(provider-generator): Fix false block attributes link
fix(lib): inline references in strings should not destroy string itself link
fix: data can be null in some cases as well link

chore

chore(docs): Adds a REAMDE to docs folder link
chore: update constructs to 10.0.12 link
chore: copy edge provider on release pipeline link

test

test(provider-generator): verify generated provider emit same HCL across languages link
"
39,"fix

fix(cli): Distribute unbundled source code link
fix(lib): Add struct sharding for providers without namespaces link
fix(cli): only log if logs are sent link
fix(lib): Keep specified empty objects link

chore

chore(cli): typescript init prints link to all prebuilt providers link
"
40,"Breaking Changes
Namespaced AWS Provider Resources link
We iterated on the namespacing for the AWS provider which got introduced in link. Our goal was, to enable custom L2 / L3 abstractions being built with jsii, improve the general jsii support for the namespacing and last but not least to allow both namespace and barrel imports in Typescript. A welcome side effect is a 5x performance gain when building packages via jsii for Python (from ~ 16 minutes to ~ 3 minutes) and likely other targets such as Java or C#
As a result, there are a few minor breaking changes:

Namespaces are all lowercased now, without a separating character
Namespaces are all a single word now (e.g. module used to be module in Python - it's now just module)
module namespace got renamed to module

Typescript Example
Before
This was pretty much the only way to use the namespaced provider classes.
```ts
import { CloudFront } from ""@cdktf/provider-aws"";
new CloudFront.CloudfrontDistribution(this, ""cloudfront"", {});
```
After
Now it's possible to either import the entire namespace, or a resource class directly.
```ts
// Similar to before, but namespace is lowercased
import { cloudfront } from ""@cdktf/provider-aws"";
new cloudfront.CloudfrontDistribution(this, ""cloudfront"", {});
// new option
import { CloudfrontDistribution } from ""@cdktf/provider-aws/lib/cloudfront"";
new CloudfrontDistribution(this, ""cloudfront"", {});
```
See this link for more details.
Other Changes
fix

fix(provider-generator): Fix private registry module generation link
fix(lib): Fix incorrect parseInt casing link
fix(lib): fix documentation link for lookup link
fix(provider-generator): Mutating complex objects link
fix(provider-generator): attributes on resources should not be undefined link
fix(examples): Make sure we're using pipenv link
fix(lib): Increased --max-old-space-size value link
fix(examples): temporarily set fixed AWS provider version for Java link
fix(cli): fix bug that required cdktf.json in parent directory when running convert link
fix(provider-generator): escape hyphens in provider names for Go package identifiers link
fix(lib): Rework AWS Provider Namespacing link
fix(lib): escape newlines in terraform functions link
fix(lib): Also separate Token Map and symbols for interoperability with AWS CDK Tokens link
fix(release): only include prs since last version in the changelog link

chore

chore(docs): Fix broken anchor links link
chore(docs): link and layout fixes link
chore(docs): document list escape hatches link
chore(tests): remove jsii version from snapshot link
chore(docs): Add constructs documentation to website link
chore(deps): upgrade jsii versions and unpin AWS TF provider version for Java example link
chore(docs): Move examples up in sidebar, list out tutorials link
chore(deps): yarn upgrade link
chore(cli): upgrade React version link
chore(release): Pre-releases should use next version link
chore(docs): Fix docs nits like images, headings, and contractions link
chore(deps): remove obsolete dependency module link
chore(deps): fix dependabot config link
chore(deps): re-enable dependabot link
chore(docs): document escape hatch for dynamic blocks link
chore(docs): copy over aspects link
chore(docs): revert link change link
chore(docs): Laura fix docs nits link
chore(examples): Use AWS provider 3.0 link

Other

chore: add website release automation link
fix: Fix EC2 Instance creation example link
fix: Minor typo in error message about missing providers link

feat

feat(cli): use ts-node to compile main.ts link
feat(docs): add link to new deploy apps tutorial link
feat(lib): Add module option to TerraformOutput (uses construct id as synthesized output name)"" link
feat(lib): throw error when a token is used in a construct name link
feat(hcl2cdk): document providers with missing type information link
feat(lib): Expand Output value types link

test

test(cli): test generated providers link
test(lib): ensure assets dont redeploy without FS changes link
"
41,"Breaking Changes
Abbreviated version below, for a guide see link
Namespaced AWS Provider Resources link
The AWS Provider has a size that makes it hard to navigate in editors, especially in languages that compile it to a single file like Python. We implemented namespaces that hold Resources and Data Sources the same category together, the categories can be found on the link.
If you don't use the AWS provider no action is needed, if you do you need to adjust your import statements to match the namespaces. You can find more information at link.
Simplify Provider API Surface link
When generating the provider bindings we previously translated any block to an array of a certain type, both in configuration and as properties on the resource / data source instances. For blocks that can only appear once at most this is making the API harder to use. From this version on these blocks are going to be just the type instead of an array of a certain type.
For information on how to migrate please see link.
Technical Preview
AWS Adapter

The AWS Adapter is a technical preview and not ready for production usage. Its API is not stable and things might break unexpectedly.

The module (included in the module package) allows you to use Amazon Web Services Cloud Development Kit (AWS CDK) constructs in your CDK for Terraform (CDKTF) projects. Find out more in the Github repository link or jump straight to the link.
Features

feat(docs): Aws Adapter link
feat(lib): change the namespace of encoded string, list and number tokens link
feat(docs): document the use of aspects and annotations link
feat(lib): invoke Aspects when using module and module link
feat(cli): namespace aws provider link
feat(docs): add telemetry docs link
feat(examples): add example azure service bus link
feat(hcl2cdk): Copy local modules when init from TF project link
feat(lib): use objects instead of objects in arrays if possible link
feat: Extend support for Terraform expressions link

Fixed Bugs

fix(docs): fix missing backticks link
fix(lib): Lock jsii version link
fix(provider-generator): rename lambda namespace in lambda functions link
fix(docs): fix typo in remote templates docs link
fix(examples): fix path to setup.js file in jest config link
fix(hcl2cdk): Convert null provider link
fix(docs): fix example for integration test link
fix(tests): quote lerna scope to prevent shell expansion link
fix(hcl2cdk): Always using module binding for convert command link
fix(hcl2cdk): Fix duplicate modules link

Refactoring

refactor(cli): replace links with redirects link

Documentation

chore(docs): Fix link to outputs doc link
chore(docs): Fixes broken links link
chore(docs): Update docs link link
chore(docs): Fix docs links link
chore(docs): reference interoperability layer link
chore(docs): add new namespaces link
chore(docs): review cli reference link
chore(docs): remove adapter part link
chore(docs): improve release script to not require manual pr selection link
chore(docs): Proofreading edits link
chore(docs): Terraform Docs link
chore(docs): document numeric tokens link
chore(deps): add script to update all snapshot tests link
chore(docs): Laura architecture edits link
chore(docs): Merge docs content to stable website link
chore(docs): Laura docs todos edits link
chore(docs): Add note and copyediting to providers page link
chore(docs): Address todos link
chore(docs): CDK for Terraform Architecture link
chore(docs): Update cli configuration doc link
chore(docs): Autofix prettier link
chore(tests): Ignore website changes for test workflows link
chore(docs): Combine Resources and Providers pages link
chore(docs): Edits to Project Setup & Config file docs link
chore(docs): Terraform Outputs link
chore(docs): Adds descriptions example drafts link
chore(docs): improve community documentation link
chore(docs): What is CDKTF and Interoperability link
chore(docs): link docs to Pocket codebase, YouTube link
chore(docs): Project Setup link
"
42,"Breaking Changes
fix(cli): Better handle non-registry modules and improved naming link
If you use Terraform Modules you will need to adust their names. We changed the naming to be more intuitive, e.g. module is now module. To migrate please run module with this version and change your imports to match the new abbreviated form.
Fixed Bugs

fix(cli): directly depend on cli-spinners v2.6.0 link
fix(cli): create .cdktf folder if needed link
fix(lib): check for null on removing metadata in testing framework link
fix: ignore build output in prettier link

Chores

chore(deps): bump trim-newlines from 3.0.0 to 3.0.1 link
chore(docs): remove roadmap link from README link
"
43,"Features

feat(hcl2cdk): Add logical id override when construct id's aren't unique link
feat(lib): use jest asymetric matchers & nicer error messages link

Fixed Bugs

fix(hcl2cdk): Correctly handle remote state link
fix(docs): adjust setup handling in docs link
fix(cli): don't create config.json files if none was present before link
fix(lib): fix source path generated for local modules link
fix(docs): typo in documentation link
fix(lib): Fix release pipeline link

Chores

chore(tests): Build examples as matrix - 1 build per example link
chore(tests): Fix release pipeline link
chore(tests): Upgrade to jest 0.27 for integration tests and retry failed tests once link
chore(deps): bump tmpl from 1.0.4 to 1.0.5 link
chore: fix config for dependabot link
"
44,"Fixed Bugs

fix(cli): replaceAll not available in node v14 link
fix(cli): fix import path for Manifest (was relative) link

Chores

chore: lint monorepo for relative imports between packages link
chore: remove duplicated jest interface members link

Documentation

feat(docs): add docs for module link
"
45,"Fixed Bugs

fix(lib): Fix testing setup link
"
46,"Breaking Changes
Abbreviated version below, for a guide see link
Constructs upgrade (module to module)
The module package serves as the base for all building blocks of the CDKs (e.g. CDK for Terraform, AWS CDK and cdk8s). Recently the module package was lifted to v10 with a few but major changes. The reason behind those was to make it future proof and stable across different CDKs. In this process the API surface area of the module base package was reduced and some functionality has been moved directly to the AWS CDK instead. For more information and the underlying motivation for the changes to the module library refer to the link.
Moved functionality

module are now part of module as they've been removed from module. If you use them, you need to change your import statement to import them from the module package. The api also has changed a bit. The new way to register module is module instead of module.
The module, module and module methods are now available under the module API: e.g. module. module are a part of the module base library.

Removed functionality

module / module has been removed. Instead you can use link.
module has been removed. If you find yourself needing support for it, please file a new issue on this repo and describe your use-case.

Features

feat(hcl2cdk): inform about recommended variable usage link
feat(lib): make asset paths change if asset content changes link
feat(cli): Introduce support for shell completions link
feat(lib): Print a hint when the app has been passed to a backend instead of the stack link
feat(lib): expose unit testing helpers link
feat(cli): detect and validate used node & go version link
feat(lib): expose terraform functions link

Documentation

chore(docs): add a first short note about how to release link
feat(docs): document how to connect CDKTF to Terraform Cloud link
fix(docs): update docs to be correct about outdir since multiple stacks feature link
fix(hcl2cdk): aliased provider missed in graph link
chore(docs): release pre-built providers link
chore(docs): update telemetry.md for 0.6 release link
chore(docs): remove custom adapter section for now link
feat(docs): upgrade guide for v0.6 link

Fixed Bugs

fix(lib): keysToSnakeCase needs to ignore intrinsic tokens link
fix(lib): synthesise numbers correctly link
fix(lib): better error for uninitialized provider link
fix(cli): Don't specify --user flag when running in an pip activated virtualenv link
fix(deps): check in husky hooks link
fix(lib): Alternative Validation Approach link
fix(cli): Don't print sensitive outputs when running deploy link
fix(tests): enable windows test with escapes link
fix(hcl2cdk): Fix convert with numeric count link
fix(lib): Module references to providers synthesizes array instead of map link
fix(tests): disable terraform cloud test for now link

Chores

chore(lib): speed up TS compilation link
chore(deps): ignore tsbuildinfo link
chore(docs): Brief reference for local provider usage link
chore(docs): Link Python Poetry community template link
chore(deps): bump tar from 4.4.13 to 4.4.17 link
chore(tests): remove unused aws provider dependency to speed up test link
chore: fix typos link
chore(lib): BREAKING CHANGE upgrade constructs lib to v10 link
chore(deps): Upgrade yargs to v17 link
chore(tests): Align workflow trigger link
chore(cli): Make sure Python dependencies are working locally link
chore(deps): bump tar from 4.4.17 to 4.4.19 link
chore(release): run all tests on npm test link
chore(hcl2cdk): Provide guidance for imports link
chore(deps): bump axios from 0.21.1 to 0.21.4 link
refactor(lib): use the same jest config everywhere link
feat(cli): Improve telemetry link
"
47,"Read the announcement blog post: link
New Features

feat(cli): implement hcl2cdk link
feat(cli): add cdktf module command link

Documentation

chore(docs): link docker integration example link
chore(docs): add google cloud kubernetes example link
chore(docs): python example for gcp cloud function link
chore(docs): Add serverless application guide link
chore(docs): link to serverless e2e example link
chore(docs): add examples for ucloud provider (ts/python/java/c#/go) link
chore(docs): add azure python link link
chore(docs): Enhance readme with Terraform Platform Illustration link
chore(docs): Add Project Maturity section to README link
chore(docs): Add callouts to Learn tutorials link
chore(docs): Create BUGPROCESS.md link
refactor(docs): clarify that we support all providers and modules link
fix(docs): remove Csharp readme in Python for #745 link
fix(docs): add mandatory cdktf get step link
fix(docs): document module generation link

Fixed Bugs

fix(cli): throw explicit error when commands are invoked outside of a cdktf project link
fix(cli): dont compile cdktf output directory link
fix(cli): dont upload .terraform folders link
fix(cli): polish user interaction by switching libraries link
fix(cli): update hint for tfstate file link
fix(cli): parse JSON output link
fix(hcl2cdk): exclude non-registry modules from the cdktf.json link
fix(hcl2cdk): adjust link for label renaming link
fix(hcl2cdk): only run get conditionally link
fix(hcl2cdk): camelCase backend properties link
fix(hcl2cdk): suffix variables and locals link
fix(tests): make less assumptions about environment in config.test.ts link
fix(lib): Add in new optional AWS route attributes link

Chores

chore(deps): use nodejs v14 version of aws jsii/superchain image link
chore(deps): add gcc and gcc-c++ to Dockerfile required for node-gyp link
chore(deps): Upgrade eslint to v7 link
chore(deps): bump ws from 7.4.2 to 7.4.6 link
chore(deps): bump y18n from 4.0.0 to 4.0.3 link
chore(cli): send telemetry on errors link
chore(cli): lint tsx files and clean up React Hooks code link
chore(cli): add prettier link
chore(lib): track overrides and backend types in stack link
chore(tests): Provide global PR workflow status link
"
48,"Fixed Bugs

Fix module - Make sure output parses only relevant parts link
Dont error on init when log has been written link
"
49,"Implemented enhancements

Experimental Go Support link
Add Asset Construct link
Support sensitive variables link
Update python templates to use RemoteBackend construct link & link
UX: Explain how to specify a stack in the error message link
Terraform Cloud: Output uses attribute name instead of id link
Terraform Cloud: Stream resource updates link
Add JSDoc links to Terraform Registry docs when generating providers link

Fixed Bugs

Return non-zero exit code on unknown command and allow terraform-like command names link
Add cdktf.log to .gitignore of built-in templates link
Fix elasticsearch index resource link
Fix gitignore after init link
Deploy changes on TF output changes link
Fix: Unable to use resources containing an argument named 'stack' link
OCI Synth issues: ""module has already exported a member"" link
Adapt to changed output format in Terraform 0.15.4 link
"
50,"Breaking Changes
We're now supporting multiple Stacks! - existing Terraform state files from local Terraform workflows have to be renamed to match the stack name.
Up until CDK for Terraform version module only a single stack was supported. For local state handling, a module file in the project root folder was used. With version module the local state file reflects the stack name it belongs to in its file name. When a module file is still present in the project root folder, it has to be renamed to match the schema module manually.
Implemented enhancements:

Add support for remote templates link
Handle Multiple Stacks link

Fixed Bugs

Wait for ConfigurationVersion to be ready when using Terraform Cloud link
Fix module variables without type link
Fix module without newline link
Rename instance variable to a more specific name to avoid name collisions link
Fix multiple modules with same end name link
"
51,"Fixed Bugs

Resources containing hyphens in resource ids did not correctly display their apply status link
Add missing handling for resource status lines link
Print more descriptive error messages if requests to Terraform Cloud fail link, link, link, link
"
52,"Fixed Bugs

Allow for module without outputs link
Fix Python template link
Don't treat warning lines as resources link
Handle malformed code blocks in provider schema descriptions link
"
53,"Breaking Changes

Generated classes for modules from the registry will change - see link for more details
Phased out testing and support for Terraform module. It's likely to still work for now, but it's not guaranteed anymore link

Implemented enhancements:

Improve Module Support link
Release packages to Maven Central link
Release packages to Nuget.org link
TerraformHclModule outputs use tokens link
Improve C# init behaviour for Github Package Registry link
Support for dynamic attribute type link
Upgrade to ink v3 link

Fixed bugs:

Correct depends on casing for modules link
Python pip template adjustments for windows link
Checkpoint Error Handling / Timeout link
Inject defaults for certain attributes link
Python-pip template fix/improvements link
Quote cdktf path in init templates link
Include feature flags in java template and test link
Update jsii-srcmak to remove symlink link
Rename null provider for java & c# link

Chores:

Fix typo in execTerraformSynth link
Upgrade Java exec-maven-plugin 3.0.0 link
"
54,"Implemented enhancements:

C# Support link
Terraform Cloud support with remote execution mode link

Fixed bugs:

Include feature flags in java template and test link

Security Updates:

Bump ini from 1.3.5 to 1.3.8 link
CVE-2020-7789 / GHSA-p9pc-299p-vxgp link / link
"
55,"Fixed bugs:

Depends on expansion link
Make sure tokens resolved before converting to json link
Alter reset and input names when they conflict link
Fix complex map attribute data source reference link
Remap 'equals' to 'equalTo' to work around jsii limitation link
Generated custom mappings link
"
56,"Fixed bugs:

Update jsii with python docs fix link
Maintain dependencies between required construct properties link

Implemented enhancements:

Java support link
Simple Terraform Locals link
allow to use TERRAFORM_BINARY_NAME env to set terraform binary link
Default to NPM in templates link
Terraform version check link
Terraform Variables link
Terraform hcl module link
Support for matching existing Terraform names link
"
57,"Fixed bugs:

Fix Orcale Provider link
Run Terraform commands with module flag link
Use default provider caching of Terraform, rather than creating error prone symlinks link

Implemented enhancements:

Streamline CLI workflows for prebuilt providers link
CLI installable via Homebrew link
Support Terraform provider caching by default link, link, link
"
58,"Fixed bugs:

Fix TerraformProvider alias definition link

Implemented enhancements:

Checkpoint telemetry integration link
Adding cdktf version to the terraform user agent link
Migrate to jsii-srcmak link
"
59,"Fixed bugs:

Terraform 0.13 Compatibility for 3rd Party Providers (e.g. Docker) in Python link
Fix Naming Collision with Config interfaces link

Implemented enhancements:

Use remote backend class for typescript template link
"
60,"Implemented enhancements:

Terraform 0.13 Compatibility link

Security Updates:

Fix dot-prop security dependency bot alert link
"
61,"Fixed bugs:

Fix interpolation bug in complex computed list of data sources link
Avoid conflicts with resource attributes called ""node"" link
Python: setup imports dir as a package link

Implemented enhancements:

Add support for List of Maps in schema generator link
Add Lists of Maps link
Bump and align Typescript / @node/types Dependencies - Upgrade lodash link
Terraform backend config link
Terraform data remote state link
"
62,"Fixed bugs:

module was broken on Windows link
"
63,"Implemented enhancements:

Defaults are opposite of Terraform but should default to being non-destructive link
Version check for new cdktf cli link
Set NODE_ENV for CLI link
Make local state persistent  link
Improved resource name structure in Diff / Deploy / Destroy link

Fixed bugs:

cdktf destroy errors saying stale plan link
Migrating from local state to remote state doesn't work link
Display Typescript Errors for Synth link
cdktf init is broken link
Handle stale stacks in cdktf link
cdktf init Terraform Cloud workspace creation doesn't work link
Case sensitive tags are incorrectly downcased link
"
64,"
Bug when creating Terraform Cloud workspace via module (#144)
"
65,"
Fix module issue (#139)
"
66,Minor bug fixes and documentation for getting started guides.
67,"
Support for module (#90)
Support for module (#92)
Support for module (#111)
Support for Terraform Cloud via module (#96)
Support for logging across the project (#100)
New UI for module and module (#103)
Basic error handling support (#110)

There are other minor bug fixes included in the release. (#109, #122, #128)."
68,"
Typescript examples and template defaults for synthesize commands to compile application (#63)
Terraform Output doesn't handle Optional Types (#83)
"
69,"
Document Terraform outputs and remote backend (#64)
Fix providers file workflow (#66)
Stack escape hatch (#81)
"
70,"
Getting started guide for Python (#73)
Change output directory to module for Terraform configuration (#70)
Fix output directory argument for module (#62)
"
71,Enable synthesis to Python
72,Minor output changes and updated README.md example.
73,Alpha release for Github and NPM
74,Initial release of module and module to Github and NPM registry.
